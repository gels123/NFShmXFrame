// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Avatar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Avatar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_AvatarFragmentAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarFragmentAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarValueAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarValueAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarDisplayMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarDisplayMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarChangeMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarChangeMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarChangeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarChangeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarChangetab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarChangetab_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarChangetab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarChangetab_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarBattleslot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarBattleslot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarBattleslot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarBattleslot_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarAdvanceUpattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarAdvanceUpattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarEquipsuitAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarEquipsuitAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AvatarEquipsuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AvatarEquipsuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AvatarEquipsuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AvatarEquipsuit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fAvatar_2eproto() {
  protobuf_AddDesc_E_5fAvatar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Avatar.proto");
  GOOGLE_CHECK(file != NULL);
  E_AvatarFragmentAttributeDesc_descriptor_ = file->message_type(0);
  static const int E_AvatarFragmentAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragmentAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragmentAttributeDesc, m_type_),
  };
  E_AvatarFragmentAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarFragmentAttributeDesc_descriptor_,
      E_AvatarFragmentAttributeDesc::default_instance_,
      E_AvatarFragmentAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragmentAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragmentAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarFragmentAttributeDesc));
  E_AvatarFragment_descriptor_ = file->message_type(1);
  static const int E_AvatarFragment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragment, m_fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragment, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragment, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragment, m_attribute_),
  };
  E_AvatarFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarFragment_descriptor_,
      E_AvatarFragment::default_instance_,
      E_AvatarFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarFragment));
  Sheet_AvatarFragment_descriptor_ = file->message_type(2);
  static const int Sheet_AvatarFragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarFragment, e_avatarfragment_list_),
  };
  Sheet_AvatarFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarFragment_descriptor_,
      Sheet_AvatarFragment::default_instance_,
      Sheet_AvatarFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarFragment));
  E_AvatarValueAttributeDesc_descriptor_ = file->message_type(3);
  static const int E_AvatarValueAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValueAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValueAttributeDesc, m_type_),
  };
  E_AvatarValueAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarValueAttributeDesc_descriptor_,
      E_AvatarValueAttributeDesc::default_instance_,
      E_AvatarValueAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValueAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValueAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarValueAttributeDesc));
  E_AvatarValue_descriptor_ = file->message_type(4);
  static const int E_AvatarValue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValue, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValue, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValue, m_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValue, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValue, m_attribute_),
  };
  E_AvatarValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarValue_descriptor_,
      E_AvatarValue::default_instance_,
      E_AvatarValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarValue));
  Sheet_AvatarValue_descriptor_ = file->message_type(5);
  static const int Sheet_AvatarValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarValue, e_avatarvalue_list_),
  };
  Sheet_AvatarValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarValue_descriptor_,
      Sheet_AvatarValue::default_instance_,
      Sheet_AvatarValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarValue));
  E_AvatarDisplayMaterialDesc_descriptor_ = file->message_type(6);
  static const int E_AvatarDisplayMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplayMaterialDesc, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplayMaterialDesc, m_id_),
  };
  E_AvatarDisplayMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarDisplayMaterialDesc_descriptor_,
      E_AvatarDisplayMaterialDesc::default_instance_,
      E_AvatarDisplayMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplayMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplayMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarDisplayMaterialDesc));
  E_AvatarDisplay_descriptor_ = file->message_type(7);
  static const int E_AvatarDisplay_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplay, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplay, m_uplvtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplay, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplay, m_material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplay, m_fragmentid_),
  };
  E_AvatarDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarDisplay_descriptor_,
      E_AvatarDisplay::default_instance_,
      E_AvatarDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarDisplay));
  Sheet_AvatarDisplay_descriptor_ = file->message_type(8);
  static const int Sheet_AvatarDisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarDisplay, e_avatardisplay_list_),
  };
  Sheet_AvatarDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarDisplay_descriptor_,
      Sheet_AvatarDisplay::default_instance_,
      Sheet_AvatarDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarDisplay));
  E_AvatarChangeMaterialDesc_descriptor_ = file->message_type(9);
  static const int E_AvatarChangeMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangeMaterialDesc, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangeMaterialDesc, m_id_),
  };
  E_AvatarChangeMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarChangeMaterialDesc_descriptor_,
      E_AvatarChangeMaterialDesc::default_instance_,
      E_AvatarChangeMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangeMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangeMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarChangeMaterialDesc));
  E_AvatarChangeAttributeDesc_descriptor_ = file->message_type(10);
  static const int E_AvatarChangeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangeAttributeDesc, m_upvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangeAttributeDesc, m_upber_),
  };
  E_AvatarChangeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarChangeAttributeDesc_descriptor_,
      E_AvatarChangeAttributeDesc::default_instance_,
      E_AvatarChangeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarChangeAttributeDesc));
  E_AvatarChange_descriptor_ = file->message_type(11);
  static const int E_AvatarChange_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_uplvtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_avatarskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_avatarcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_avatartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_avatarshield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_starmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_lvmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_starupattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_fununlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_maxequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_equipsuit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_initiativeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, m_attribute_),
  };
  E_AvatarChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarChange_descriptor_,
      E_AvatarChange::default_instance_,
      E_AvatarChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarChange));
  Sheet_AvatarChange_descriptor_ = file->message_type(12);
  static const int Sheet_AvatarChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarChange, e_avatarchange_list_),
  };
  Sheet_AvatarChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarChange_descriptor_,
      Sheet_AvatarChange::default_instance_,
      Sheet_AvatarChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarChange));
  E_AvatarChangetab_descriptor_ = file->message_type(13);
  static const int E_AvatarChangetab_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangetab, m_tabid_),
  };
  E_AvatarChangetab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarChangetab_descriptor_,
      E_AvatarChangetab::default_instance_,
      E_AvatarChangetab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangetab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarChangetab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarChangetab));
  Sheet_AvatarChangetab_descriptor_ = file->message_type(14);
  static const int Sheet_AvatarChangetab_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarChangetab, e_avatarchangetab_list_),
  };
  Sheet_AvatarChangetab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarChangetab_descriptor_,
      Sheet_AvatarChangetab::default_instance_,
      Sheet_AvatarChangetab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarChangetab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarChangetab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarChangetab));
  E_AvatarBattleslot_descriptor_ = file->message_type(15);
  static const int E_AvatarBattleslot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarBattleslot, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarBattleslot, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarBattleslot, m_arg_),
  };
  E_AvatarBattleslot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarBattleslot_descriptor_,
      E_AvatarBattleslot::default_instance_,
      E_AvatarBattleslot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarBattleslot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarBattleslot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarBattleslot));
  Sheet_AvatarBattleslot_descriptor_ = file->message_type(16);
  static const int Sheet_AvatarBattleslot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarBattleslot, e_avatarbattleslot_list_),
  };
  Sheet_AvatarBattleslot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarBattleslot_descriptor_,
      Sheet_AvatarBattleslot::default_instance_,
      Sheet_AvatarBattleslot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarBattleslot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarBattleslot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarBattleslot));
  E_AvatarAdvanceUpattributeDesc_descriptor_ = file->message_type(17);
  static const int E_AvatarAdvanceUpattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvanceUpattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvanceUpattributeDesc, m_type_),
  };
  E_AvatarAdvanceUpattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarAdvanceUpattributeDesc_descriptor_,
      E_AvatarAdvanceUpattributeDesc::default_instance_,
      E_AvatarAdvanceUpattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvanceUpattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvanceUpattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarAdvanceUpattributeDesc));
  E_AvatarAdvance_descriptor_ = file->message_type(18);
  static const int E_AvatarAdvance_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvance, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvance, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvance, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvance, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvance, m_upattribute_),
  };
  E_AvatarAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarAdvance_descriptor_,
      E_AvatarAdvance::default_instance_,
      E_AvatarAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarAdvance));
  Sheet_AvatarAdvance_descriptor_ = file->message_type(19);
  static const int Sheet_AvatarAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarAdvance, e_avataradvance_list_),
  };
  Sheet_AvatarAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarAdvance_descriptor_,
      Sheet_AvatarAdvance::default_instance_,
      Sheet_AvatarAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarAdvance));
  E_AvatarSkill_descriptor_ = file->message_type(20);
  static const int E_AvatarSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarSkill, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarSkill, m_belong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarSkill, m_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarSkill, m_skillid_),
  };
  E_AvatarSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarSkill_descriptor_,
      E_AvatarSkill::default_instance_,
      E_AvatarSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarSkill));
  Sheet_AvatarSkill_descriptor_ = file->message_type(21);
  static const int Sheet_AvatarSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarSkill, e_avatarskill_list_),
  };
  Sheet_AvatarSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarSkill_descriptor_,
      Sheet_AvatarSkill::default_instance_,
      Sheet_AvatarSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarSkill));
  E_AvatarEquipsuitAttributeDesc_descriptor_ = file->message_type(22);
  static const int E_AvatarEquipsuitAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuitAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuitAttributeDesc, m_type_),
  };
  E_AvatarEquipsuitAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarEquipsuitAttributeDesc_descriptor_,
      E_AvatarEquipsuitAttributeDesc::default_instance_,
      E_AvatarEquipsuitAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuitAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuitAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarEquipsuitAttributeDesc));
  E_AvatarEquipsuit_descriptor_ = file->message_type(23);
  static const int E_AvatarEquipsuit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuit, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuit, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuit, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuit, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuit, m_attribute_),
  };
  E_AvatarEquipsuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AvatarEquipsuit_descriptor_,
      E_AvatarEquipsuit::default_instance_,
      E_AvatarEquipsuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AvatarEquipsuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AvatarEquipsuit));
  Sheet_AvatarEquipsuit_descriptor_ = file->message_type(24);
  static const int Sheet_AvatarEquipsuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarEquipsuit, e_avatarequipsuit_list_),
  };
  Sheet_AvatarEquipsuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AvatarEquipsuit_descriptor_,
      Sheet_AvatarEquipsuit::default_instance_,
      Sheet_AvatarEquipsuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarEquipsuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AvatarEquipsuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AvatarEquipsuit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fAvatar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarFragmentAttributeDesc_descriptor_, &E_AvatarFragmentAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarFragment_descriptor_, &E_AvatarFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarFragment_descriptor_, &Sheet_AvatarFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarValueAttributeDesc_descriptor_, &E_AvatarValueAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarValue_descriptor_, &E_AvatarValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarValue_descriptor_, &Sheet_AvatarValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarDisplayMaterialDesc_descriptor_, &E_AvatarDisplayMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarDisplay_descriptor_, &E_AvatarDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarDisplay_descriptor_, &Sheet_AvatarDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarChangeMaterialDesc_descriptor_, &E_AvatarChangeMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarChangeAttributeDesc_descriptor_, &E_AvatarChangeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarChange_descriptor_, &E_AvatarChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarChange_descriptor_, &Sheet_AvatarChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarChangetab_descriptor_, &E_AvatarChangetab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarChangetab_descriptor_, &Sheet_AvatarChangetab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarBattleslot_descriptor_, &E_AvatarBattleslot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarBattleslot_descriptor_, &Sheet_AvatarBattleslot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarAdvanceUpattributeDesc_descriptor_, &E_AvatarAdvanceUpattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarAdvance_descriptor_, &E_AvatarAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarAdvance_descriptor_, &Sheet_AvatarAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarSkill_descriptor_, &E_AvatarSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarSkill_descriptor_, &Sheet_AvatarSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarEquipsuitAttributeDesc_descriptor_, &E_AvatarEquipsuitAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AvatarEquipsuit_descriptor_, &E_AvatarEquipsuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AvatarEquipsuit_descriptor_, &Sheet_AvatarEquipsuit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fAvatar_2eproto() {
  delete E_AvatarFragmentAttributeDesc::default_instance_;
  delete E_AvatarFragmentAttributeDesc_reflection_;
  delete E_AvatarFragment::default_instance_;
  delete E_AvatarFragment_reflection_;
  delete Sheet_AvatarFragment::default_instance_;
  delete Sheet_AvatarFragment_reflection_;
  delete E_AvatarValueAttributeDesc::default_instance_;
  delete E_AvatarValueAttributeDesc_reflection_;
  delete E_AvatarValue::default_instance_;
  delete E_AvatarValue_reflection_;
  delete Sheet_AvatarValue::default_instance_;
  delete Sheet_AvatarValue_reflection_;
  delete E_AvatarDisplayMaterialDesc::default_instance_;
  delete E_AvatarDisplayMaterialDesc_reflection_;
  delete E_AvatarDisplay::default_instance_;
  delete E_AvatarDisplay_reflection_;
  delete Sheet_AvatarDisplay::default_instance_;
  delete Sheet_AvatarDisplay_reflection_;
  delete E_AvatarChangeMaterialDesc::default_instance_;
  delete E_AvatarChangeMaterialDesc_reflection_;
  delete E_AvatarChangeAttributeDesc::default_instance_;
  delete E_AvatarChangeAttributeDesc_reflection_;
  delete E_AvatarChange::default_instance_;
  delete E_AvatarChange_reflection_;
  delete Sheet_AvatarChange::default_instance_;
  delete Sheet_AvatarChange_reflection_;
  delete E_AvatarChangetab::default_instance_;
  delete E_AvatarChangetab_reflection_;
  delete Sheet_AvatarChangetab::default_instance_;
  delete Sheet_AvatarChangetab_reflection_;
  delete E_AvatarBattleslot::default_instance_;
  delete E_AvatarBattleslot_reflection_;
  delete Sheet_AvatarBattleslot::default_instance_;
  delete Sheet_AvatarBattleslot_reflection_;
  delete E_AvatarAdvanceUpattributeDesc::default_instance_;
  delete E_AvatarAdvanceUpattributeDesc_reflection_;
  delete E_AvatarAdvance::default_instance_;
  delete E_AvatarAdvance_reflection_;
  delete Sheet_AvatarAdvance::default_instance_;
  delete Sheet_AvatarAdvance_reflection_;
  delete E_AvatarSkill::default_instance_;
  delete E_AvatarSkill_reflection_;
  delete Sheet_AvatarSkill::default_instance_;
  delete Sheet_AvatarSkill_reflection_;
  delete E_AvatarEquipsuitAttributeDesc::default_instance_;
  delete E_AvatarEquipsuitAttributeDesc_reflection_;
  delete E_AvatarEquipsuit::default_instance_;
  delete E_AvatarEquipsuit_reflection_;
  delete Sheet_AvatarEquipsuit::default_instance_;
  delete Sheet_AvatarEquipsuit_reflection_;
}

void protobuf_AddDesc_E_5fAvatar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016E_Avatar.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"Q\n\035E_AvatarFragmentAttributeDe"
    "sc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002"
    " \001(\005B\006\302\377\024\002ID\"\323\001\n\020E_AvatarFragment\022\"\n\014m_f"
    "ragmentID\030\001 \001(\003B\014\302\377\024\010\347\242\216\347\211\207ID\022\034\n\006m_item\030"
    "\002 \001(\003B\014\302\377\024\010\347\211\251\345\223\201ID\022)\n\tm_itemNum\030\003 \001(\005B\026"
    "\302\377\024\022\347\242\216\347\211\207\344\275\277\347\224\250\344\270\212\351\231\220\022R\n\013m_attribute\030\004 "
    "\003(\0132\'.proto_ff.E_AvatarFragmentAttribute"
    "DescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\005\"W\n\024Sheet_Avat"
    "arFragment\022\?\n\025E_AvatarFragment_List\030\001 \003("
    "\0132\032.proto_ff.E_AvatarFragmentB\004\210\301\024\004\"L\n\032E"
    "_AvatarValueAttributeDesc\022\030\n\007m_value\030\001 \001"
    "(\005B\007\302\377\024\003\345\200\274\022\024\n\006m_type\030\002 \001(\005B\004\302\377\024\000\"\365\001\n\rE_"
    "AvatarValue\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006m_t"
    "ype\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\030\n\004m_lv\030\003 \001(\005B\n\302\377\024"
    "\006\347\255\211\347\272\247\022&\n\006m_cost\030\004 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\346\266\210\350\200"
    "\227\346\225\260\351\207\217\022%\n\005m_Exp\030\005 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\351\234\200\350\246\201"
    "\347\273\217\351\252\214\022I\n\013m_Attribute\030\006 \003(\0132$.proto_ff.E"
    "_AvatarValueAttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024"
    "\r\"O\n\021Sheet_AvatarValue\022:\n\022E_AvatarValue_"
    "List\030\001 \003(\0132\027.proto_ff.E_AvatarValueB\005\210\301\024"
    "\200 \"Q\n\033E_AvatarDisplayMaterialDesc\022\034\n\005m_e"
    "xp\030\001 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\022\024\n\004m_id\030\002 \001(\005B\006\302"
    "\377\024\002ID\"\376\001\n\017E_AvatarDisplay\022\024\n\004m_id\030\001 \001(\005B"
    "\006\302\377\024\002id\022*\n\nm_UpLvType\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\345"
    "\217\202\350\200\203\347\261\273\345\236\213\022*\n\tm_skillID\030\003 \001(\tB\027\302\377\024\017\350\247\243\351"
    "\224\201\346\212\200\350\203\275\347\273\204\220\301\024@\022O\n\nm_material\030\004 \003(\0132%.pr"
    "oto_ff.E_AvatarDisplayMaterialDescB\024\302\377\024\014"
    "\345\215\207\347\272\247\346\235\220\346\226\231\210\301\024\003\022,\n\014m_fragmentID\030\005 \003(\003B\026"
    "\302\377\024\016\345\205\263\350\201\224\347\242\216\347\211\207ID\210\301\024\003\"T\n\023Sheet_AvatarDi"
    "splay\022=\n\024E_AvatarDisplay_List\030\001 \003(\0132\031.pr"
    "oto_ff.E_AvatarDisplayB\004\210\301\024\002\"P\n\032E_Avatar"
    "ChangeMaterialDesc\022\034\n\005m_exp\030\001 \001(\005B\r\302\377\024\t\347"
    "\273\217\351\252\214\345\200\274\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"P\n\033E_Avat"
    "arChangeAttributeDesc\022\032\n\tm_UpValue\030\001 \001(\005"
    "B\007\302\377\024\003\345\200\274\022\025\n\007m_UpBer\030\002 \001(\005B\004\302\377\024\000\"\320\010\n\016E_A"
    "vatarChange\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\035\n\tm_q"
    "uality\030\002 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022*\n\nm_UpLvType\030\003"
    " \001(\005B\026\302\377\024\022\345\215\207\347\272\247\345\217\202\350\200\203\347\261\273\345\236\213\022\'\n\rm_avatar"
    "Skill\030\004 \001(\003B\020\302\377\024\014\345\217\230\350\272\253\346\212\200\350\203\275\022 \n\nm_avata"
    "rCD\030\005 \001(\005B\014\302\377\024\010\345\217\230\350\272\253cd\022&\n\014m_avatarTime\030"
    "\006 \001(\005B\020\302\377\024\014\345\217\230\350\272\253\346\227\266\351\225\277\022.\n\016m_avatarShiel"
    "d\030\007 \001(\005B\026\302\377\024\022\345\217\230\350\272\253\346\212\244\347\233\276\346\225\210\347\216\207\022*\n\tm_ski"
    "llID\030\010 \001(\tB\027\302\377\024\017\350\247\243\351\224\201\346\212\200\350\203\275\347\273\204\220\301\024@\022#\n\tm"
    "_starMax\030\t \001(\005B\020\302\377\024\014\346\230\237\346\230\237\344\270\212\351\231\220\022!\n\007m_Lv"
    "Max\030\n \001(\005B\020\302\377\024\014\347\255\211\347\272\247\344\270\212\351\231\220\022\037\n\tm_ModelID"
    "\030\013 \001(\005B\014\302\377\024\010\346\250\241\345\236\213id\022#\n\tm_advance\030\014 \001(\005B"
    "\020\302\377\024\014\350\277\233\351\230\266\347\261\273\345\236\213\0223\n\020m_activationItem\030\r "
    "\001(\005B\031\302\377\024\025\346\277\200\346\264\273\351\234\200\350\246\201\347\232\204\351\201\223\345\205\267\0228\n\017m_acti"
    "vationNum\030\016 \001(\005B\037\302\377\024\033\346\277\200\346\264\273\351\234\200\350\246\201\347\232\204\351\201\223\345"
    "\205\267\346\225\260\351\207\217\022*\n\010m_starId\030\017 \001(\005B\030\302\377\024\024\345\215\207\346\230\237\351\234"
    "\200\350\246\201\351\201\223\345\205\267ID\022-\n\tm_starNum\030\020 \001(\tB\032\302\377\024\022\345\215\207"
    "\346\230\237\351\234\200\350\246\201\346\225\260\351\207\217\220\301\024@\0223\n\023m_starUpAttribute"
    "Id\030\021 \001(\005B\026\302\377\024\022\346\230\237\347\272\247\345\261\236\346\200\247\347\261\273\345\236\213\022+\n\013m_fu"
    "nUnlock\030\022 \001(\005B\026\302\377\024\022\345\244\251\347\245\236\350\247\243\351\224\201\346\235\241\344\273\266\022*\n"
    "\nm_maxEquip\030\023 \001(\005B\026\302\377\024\022\346\234\200\351\253\230\350\243\205\345\244\207\345\223\201\350\264"
    "\250\022!\n\013m_equipSuit\030\024 \001(\005B\014\302\377\024\010\345\245\227\350\243\205id\022/\n\t"
    "m_starBer\030\025 \001(\005B\034\302\377\024\030\346\257\217\346\230\237\347\272\247\346\217\220\345\215\207\347\231\276\345"
    "\210\206\346\257\224\022N\n\nm_material\030\026 \003(\0132$.proto_ff.E_A"
    "vatarChangeMaterialDescB\024\302\377\024\014\345\215\207\347\272\247\346\235\220\346\226"
    "\231\210\301\024\003\022/\n\021m_InitiativeSkill\030\027 \003(\003B\024\302\377\024\014\344\270"
    "\273\345\212\250\346\212\200\350\203\275\210\301\024\007\022S\n\013m_Attribute\030\030 \003(\0132%.pr"
    "oto_ff.E_AvatarChangeAttributeDescB\027\302\377\024\017"
    "\347\231\276\345\210\206\346\257\224\345\261\236\346\200\247\210\301\024\004\"Q\n\022Sheet_AvatarChang"
    "e\022;\n\023E_AvatarChange_List\030\001 \003(\0132\030.proto_f"
    "f.E_AvatarChangeB\004\210\301\024\010\",\n\021E_AvatarChange"
    "tab\022\027\n\007m_tabID\030\001 \001(\005B\006\302\377\024\002id\"Z\n\025Sheet_Av"
    "atarChangetab\022A\n\026E_AvatarChangetab_List\030"
    "\001 \003(\0132\033.proto_ff.E_AvatarChangetabB\004\210\301\024\020"
    "\"q\n\022E_AvatarBattleslot\022\024\n\004m_id\030\001 \001(\005B\006\302\377"
    "\024\002id\022 \n\006m_type\030\002 \001(\005B\020\302\377\024\014\350\247\243\351\224\201\347\261\273\345\236\213\022#"
    "\n\005m_arg\030\003 \001(\tB\024\302\377\024\014\350\247\243\351\224\201\345\217\202\346\225\260\220\301\024@\"]\n\026S"
    "heet_AvatarBattleslot\022C\n\027E_AvatarBattles"
    "lot_List\030\001 \003(\0132\034.proto_ff.E_AvatarBattle"
    "slotB\004\210\301\024\010\"R\n\036E_AvatarAdvanceUpattribute"
    "Desc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type"
    "\030\002 \001(\005B\006\302\377\024\002ID\"\212\002\n\017E_AvatarAdvance\022\024\n\004m_"
    "id\030\001 \001(\005B\006\302\377\024\002id\022)\n\017m_upAttributeId\030\002 \001("
    "\005B\020\302\377\024\014\350\277\233\351\230\266\347\261\273\345\236\213\0224\n\010m_starID\030\003 \001(\005B\"\302"
    "\377\024\036\350\277\233\351\230\266\344\270\223\345\261\236\351\234\200\346\261\202\346\230\237\346\230\237\346\225\260\351\207\217\022)\n\tm_s"
    "killID\030\004 \001(\005B\026\302\377\024\022\350\277\233\351\230\266\344\270\223\345\261\236\346\212\200\350\203\275\022U\n\r"
    "m_upAttribute\030\005 \003(\0132(.proto_ff.E_AvatarA"
    "dvanceUpattributeDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210"
    "\301\024\005\"T\n\023Sheet_AvatarAdvance\022=\n\024E_AvatarAd"
    "vance_List\030\001 \003(\0132\031.proto_ff.E_AvatarAdva"
    "nceB\004\210\301\024 \"\207\001\n\rE_AvatarSkill\022\024\n\004m_id\030\001 \001("
    "\005B\006\302\377\024\002id\022\"\n\010m_belong\030\002 \001(\005B\020\302\377\024\014\345\275\222\345\261\236\351"
    "\241\265\347\255\276\022\033\n\007m_order\030\003 \001(\005B\n\302\377\024\006\346\216\222\345\272\217\022\037\n\tm_"
    "skillid\030\004 \001(\005B\014\302\377\024\010\346\212\200\350\203\275id\"N\n\021Sheet_Ava"
    "tarSkill\0229\n\022E_AvatarSkill_List\030\001 \003(\0132\027.p"
    "roto_ff.E_AvatarSkillB\004\210\301\024\020\"P\n\036E_AvatarE"
    "quipsuitAttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007"
    "\302\377\024\003\345\200\274\022\024\n\006m_type\030\002 \001(\005B\004\302\377\024\000\"\335\001\n\021E_Avat"
    "arEquipsuit\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm_g"
    "roupID\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022#\n\tm_quality\030\003 \001"
    "(\005B\020\302\377\024\014\350\246\201\346\261\202\345\223\201\350\264\250\022 \n\006m_star\030\004 \001(\005B\020\302\377"
    "\024\014\350\246\201\346\261\202\346\230\237\347\272\247\022M\n\013m_Attribute\030\005 \003(\0132(.pr"
    "oto_ff.E_AvatarEquipsuitAttributeDescB\016\302"
    "\377\024\006\345\261\236\346\200\247\210\301\024\003\"Z\n\025Sheet_AvatarEquipsuit\022A"
    "\n\026E_AvatarEquipsuit_List\030\001 \003(\0132\033.proto_f"
    "f.E_AvatarEquipsuitB\004\210\301\024\020", 4025);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Avatar.proto", &protobuf_RegisterTypes);
  E_AvatarFragmentAttributeDesc::default_instance_ = new E_AvatarFragmentAttributeDesc();
  E_AvatarFragment::default_instance_ = new E_AvatarFragment();
  Sheet_AvatarFragment::default_instance_ = new Sheet_AvatarFragment();
  E_AvatarValueAttributeDesc::default_instance_ = new E_AvatarValueAttributeDesc();
  E_AvatarValue::default_instance_ = new E_AvatarValue();
  Sheet_AvatarValue::default_instance_ = new Sheet_AvatarValue();
  E_AvatarDisplayMaterialDesc::default_instance_ = new E_AvatarDisplayMaterialDesc();
  E_AvatarDisplay::default_instance_ = new E_AvatarDisplay();
  Sheet_AvatarDisplay::default_instance_ = new Sheet_AvatarDisplay();
  E_AvatarChangeMaterialDesc::default_instance_ = new E_AvatarChangeMaterialDesc();
  E_AvatarChangeAttributeDesc::default_instance_ = new E_AvatarChangeAttributeDesc();
  E_AvatarChange::default_instance_ = new E_AvatarChange();
  Sheet_AvatarChange::default_instance_ = new Sheet_AvatarChange();
  E_AvatarChangetab::default_instance_ = new E_AvatarChangetab();
  Sheet_AvatarChangetab::default_instance_ = new Sheet_AvatarChangetab();
  E_AvatarBattleslot::default_instance_ = new E_AvatarBattleslot();
  Sheet_AvatarBattleslot::default_instance_ = new Sheet_AvatarBattleslot();
  E_AvatarAdvanceUpattributeDesc::default_instance_ = new E_AvatarAdvanceUpattributeDesc();
  E_AvatarAdvance::default_instance_ = new E_AvatarAdvance();
  Sheet_AvatarAdvance::default_instance_ = new Sheet_AvatarAdvance();
  E_AvatarSkill::default_instance_ = new E_AvatarSkill();
  Sheet_AvatarSkill::default_instance_ = new Sheet_AvatarSkill();
  E_AvatarEquipsuitAttributeDesc::default_instance_ = new E_AvatarEquipsuitAttributeDesc();
  E_AvatarEquipsuit::default_instance_ = new E_AvatarEquipsuit();
  Sheet_AvatarEquipsuit::default_instance_ = new Sheet_AvatarEquipsuit();
  E_AvatarFragmentAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_AvatarFragment::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarFragment::default_instance_->InitAsDefaultInstance();
  E_AvatarValueAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_AvatarValue::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarValue::default_instance_->InitAsDefaultInstance();
  E_AvatarDisplayMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_AvatarDisplay::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarDisplay::default_instance_->InitAsDefaultInstance();
  E_AvatarChangeMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_AvatarChangeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_AvatarChange::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarChange::default_instance_->InitAsDefaultInstance();
  E_AvatarChangetab::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarChangetab::default_instance_->InitAsDefaultInstance();
  E_AvatarBattleslot::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarBattleslot::default_instance_->InitAsDefaultInstance();
  E_AvatarAdvanceUpattributeDesc::default_instance_->InitAsDefaultInstance();
  E_AvatarAdvance::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarAdvance::default_instance_->InitAsDefaultInstance();
  E_AvatarSkill::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarSkill::default_instance_->InitAsDefaultInstance();
  E_AvatarEquipsuitAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_AvatarEquipsuit::default_instance_->InitAsDefaultInstance();
  Sheet_AvatarEquipsuit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fAvatar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fAvatar_2eproto {
  StaticDescriptorInitializer_E_5fAvatar_2eproto() {
    protobuf_AddDesc_E_5fAvatar_2eproto();
  }
} static_descriptor_initializer_E_5fAvatar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_AvatarFragmentAttributeDesc::kMValueFieldNumber;
const int E_AvatarFragmentAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_AvatarFragmentAttributeDesc::E_AvatarFragmentAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarFragmentAttributeDesc::InitAsDefaultInstance() {
}

E_AvatarFragmentAttributeDesc::E_AvatarFragmentAttributeDesc(const E_AvatarFragmentAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarFragmentAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarFragmentAttributeDesc::~E_AvatarFragmentAttributeDesc() {
  SharedDtor();
}

void E_AvatarFragmentAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarFragmentAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarFragmentAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarFragmentAttributeDesc_descriptor_;
}

const E_AvatarFragmentAttributeDesc& E_AvatarFragmentAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarFragmentAttributeDesc* E_AvatarFragmentAttributeDesc::default_instance_ = NULL;

E_AvatarFragmentAttributeDesc* E_AvatarFragmentAttributeDesc::New() const {
  return new E_AvatarFragmentAttributeDesc;
}

void E_AvatarFragmentAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarFragmentAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarFragmentAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarFragmentAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarFragmentAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarFragmentAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarFragmentAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarFragmentAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarFragmentAttributeDesc::MergeFrom(const E_AvatarFragmentAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarFragmentAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarFragmentAttributeDesc::CopyFrom(const E_AvatarFragmentAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarFragmentAttributeDesc::IsInitialized() const {

  return true;
}

void E_AvatarFragmentAttributeDesc::Swap(E_AvatarFragmentAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarFragmentAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarFragmentAttributeDesc_descriptor_;
  metadata.reflection = E_AvatarFragmentAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarFragment::kMFragmentIDFieldNumber;
const int E_AvatarFragment::kMItemFieldNumber;
const int E_AvatarFragment::kMItemNumFieldNumber;
const int E_AvatarFragment::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_AvatarFragment::E_AvatarFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarFragment::InitAsDefaultInstance() {
}

E_AvatarFragment::E_AvatarFragment(const E_AvatarFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarFragment::SharedCtor() {
  _cached_size_ = 0;
  m_fragmentid_ = GOOGLE_LONGLONG(0);
  m_item_ = GOOGLE_LONGLONG(0);
  m_itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarFragment::~E_AvatarFragment() {
  SharedDtor();
}

void E_AvatarFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarFragment_descriptor_;
}

const E_AvatarFragment& E_AvatarFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarFragment* E_AvatarFragment::default_instance_ = NULL;

E_AvatarFragment* E_AvatarFragment::New() const {
  return new E_AvatarFragment;
}

void E_AvatarFragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fragmentid_ = GOOGLE_LONGLONG(0);
    m_item_ = GOOGLE_LONGLONG(0);
    m_itemnum_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_fragmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fragmentid_)));
          set_has_m_fragmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int64 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemNum;
        break;
      }

      // optional int32 m_itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_AvatarFragmentAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_fragmentID = 1;
  if (has_m_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_fragmentid(), output);
  }

  // optional int64 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_item(), output);
  }

  // optional int32 m_itemNum = 3;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_itemnum(), output);
  }

  // repeated .proto_ff.E_AvatarFragmentAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_fragmentID = 1;
  if (has_m_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_fragmentid(), target);
  }

  // optional int64 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_item(), target);
  }

  // optional int32 m_itemNum = 3;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_itemnum(), target);
  }

  // repeated .proto_ff.E_AvatarFragmentAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarFragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_fragmentID = 1;
    if (has_m_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fragmentid());
    }

    // optional int64 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_item());
    }

    // optional int32 m_itemNum = 3;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

  }
  // repeated .proto_ff.E_AvatarFragmentAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarFragment::MergeFrom(const E_AvatarFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fragmentid()) {
      set_m_fragmentid(from.m_fragmentid());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarFragment::CopyFrom(const E_AvatarFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarFragment::IsInitialized() const {

  return true;
}

void E_AvatarFragment::Swap(E_AvatarFragment* other) {
  if (other != this) {
    std::swap(m_fragmentid_, other->m_fragmentid_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_itemnum_, other->m_itemnum_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarFragment_descriptor_;
  metadata.reflection = E_AvatarFragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarFragment::kEAvatarFragmentListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarFragment::Sheet_AvatarFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarFragment::InitAsDefaultInstance() {
}

Sheet_AvatarFragment::Sheet_AvatarFragment(const Sheet_AvatarFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarFragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarFragment::~Sheet_AvatarFragment() {
  SharedDtor();
}

void Sheet_AvatarFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarFragment_descriptor_;
}

const Sheet_AvatarFragment& Sheet_AvatarFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarFragment* Sheet_AvatarFragment::default_instance_ = NULL;

Sheet_AvatarFragment* Sheet_AvatarFragment::New() const {
  return new Sheet_AvatarFragment;
}

void Sheet_AvatarFragment::Clear() {
  e_avatarfragment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarFragment E_AvatarFragment_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarFragment_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avatarfragment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarFragment_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarFragment E_AvatarFragment_List = 1;
  for (int i = 0; i < this->e_avatarfragment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avatarfragment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarFragment E_AvatarFragment_List = 1;
  for (int i = 0; i < this->e_avatarfragment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avatarfragment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarFragment::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarFragment E_AvatarFragment_List = 1;
  total_size += 1 * this->e_avatarfragment_list_size();
  for (int i = 0; i < this->e_avatarfragment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avatarfragment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarFragment::MergeFrom(const Sheet_AvatarFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avatarfragment_list_.MergeFrom(from.e_avatarfragment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarFragment::CopyFrom(const Sheet_AvatarFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarFragment::IsInitialized() const {

  return true;
}

void Sheet_AvatarFragment::Swap(Sheet_AvatarFragment* other) {
  if (other != this) {
    e_avatarfragment_list_.Swap(&other->e_avatarfragment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarFragment_descriptor_;
  metadata.reflection = Sheet_AvatarFragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarValueAttributeDesc::kMValueFieldNumber;
const int E_AvatarValueAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_AvatarValueAttributeDesc::E_AvatarValueAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarValueAttributeDesc::InitAsDefaultInstance() {
}

E_AvatarValueAttributeDesc::E_AvatarValueAttributeDesc(const E_AvatarValueAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarValueAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarValueAttributeDesc::~E_AvatarValueAttributeDesc() {
  SharedDtor();
}

void E_AvatarValueAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarValueAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarValueAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarValueAttributeDesc_descriptor_;
}

const E_AvatarValueAttributeDesc& E_AvatarValueAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarValueAttributeDesc* E_AvatarValueAttributeDesc::default_instance_ = NULL;

E_AvatarValueAttributeDesc* E_AvatarValueAttributeDesc::New() const {
  return new E_AvatarValueAttributeDesc;
}

void E_AvatarValueAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarValueAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarValueAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarValueAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarValueAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarValueAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarValueAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarValueAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarValueAttributeDesc::MergeFrom(const E_AvatarValueAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarValueAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarValueAttributeDesc::CopyFrom(const E_AvatarValueAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarValueAttributeDesc::IsInitialized() const {

  return true;
}

void E_AvatarValueAttributeDesc::Swap(E_AvatarValueAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarValueAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarValueAttributeDesc_descriptor_;
  metadata.reflection = E_AvatarValueAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarValue::kMIdFieldNumber;
const int E_AvatarValue::kMTypeFieldNumber;
const int E_AvatarValue::kMLvFieldNumber;
const int E_AvatarValue::kMCostFieldNumber;
const int E_AvatarValue::kMExpFieldNumber;
const int E_AvatarValue::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_AvatarValue::E_AvatarValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarValue::InitAsDefaultInstance() {
}

E_AvatarValue::E_AvatarValue(const E_AvatarValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarValue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_lv_ = 0;
  m_cost_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarValue::~E_AvatarValue() {
  SharedDtor();
}

void E_AvatarValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarValue_descriptor_;
}

const E_AvatarValue& E_AvatarValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarValue* E_AvatarValue::default_instance_ = NULL;

E_AvatarValue* E_AvatarValue::New() const {
  return new E_AvatarValue;
}

void E_AvatarValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_lv_ = 0;
    m_cost_ = 0;
    m_exp_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_cost;
        break;
      }

      // optional int32 m_cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cost_)));
          set_has_m_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Exp;
        break;
      }

      // optional int32 m_Exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_Attribute;
        break;
      }

      // repeated .proto_ff.E_AvatarValueAttributeDesc m_Attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_Attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // optional int32 m_cost = 4;
  if (has_m_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cost(), output);
  }

  // optional int32 m_Exp = 5;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_exp(), output);
  }

  // repeated .proto_ff.E_AvatarValueAttributeDesc m_Attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // optional int32 m_cost = 4;
  if (has_m_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cost(), target);
  }

  // optional int32 m_Exp = 5;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_exp(), target);
  }

  // repeated .proto_ff.E_AvatarValueAttributeDesc m_Attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_cost = 4;
    if (has_m_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cost());
    }

    // optional int32 m_Exp = 5;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  // repeated .proto_ff.E_AvatarValueAttributeDesc m_Attribute = 6;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarValue::MergeFrom(const E_AvatarValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_cost()) {
      set_m_cost(from.m_cost());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarValue::CopyFrom(const E_AvatarValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarValue::IsInitialized() const {

  return true;
}

void E_AvatarValue::Swap(E_AvatarValue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_cost_, other->m_cost_);
    std::swap(m_exp_, other->m_exp_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarValue_descriptor_;
  metadata.reflection = E_AvatarValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarValue::kEAvatarValueListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarValue::Sheet_AvatarValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarValue::InitAsDefaultInstance() {
}

Sheet_AvatarValue::Sheet_AvatarValue(const Sheet_AvatarValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarValue::~Sheet_AvatarValue() {
  SharedDtor();
}

void Sheet_AvatarValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarValue_descriptor_;
}

const Sheet_AvatarValue& Sheet_AvatarValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarValue* Sheet_AvatarValue::default_instance_ = NULL;

Sheet_AvatarValue* Sheet_AvatarValue::New() const {
  return new Sheet_AvatarValue;
}

void Sheet_AvatarValue::Clear() {
  e_avatarvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarValue E_AvatarValue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarValue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avatarvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarValue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarValue E_AvatarValue_List = 1;
  for (int i = 0; i < this->e_avatarvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avatarvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarValue E_AvatarValue_List = 1;
  for (int i = 0; i < this->e_avatarvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avatarvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarValue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarValue E_AvatarValue_List = 1;
  total_size += 1 * this->e_avatarvalue_list_size();
  for (int i = 0; i < this->e_avatarvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avatarvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarValue::MergeFrom(const Sheet_AvatarValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avatarvalue_list_.MergeFrom(from.e_avatarvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarValue::CopyFrom(const Sheet_AvatarValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarValue::IsInitialized() const {

  return true;
}

void Sheet_AvatarValue::Swap(Sheet_AvatarValue* other) {
  if (other != this) {
    e_avatarvalue_list_.Swap(&other->e_avatarvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarValue_descriptor_;
  metadata.reflection = Sheet_AvatarValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarDisplayMaterialDesc::kMExpFieldNumber;
const int E_AvatarDisplayMaterialDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_AvatarDisplayMaterialDesc::E_AvatarDisplayMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarDisplayMaterialDesc::InitAsDefaultInstance() {
}

E_AvatarDisplayMaterialDesc::E_AvatarDisplayMaterialDesc(const E_AvatarDisplayMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarDisplayMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_exp_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarDisplayMaterialDesc::~E_AvatarDisplayMaterialDesc() {
  SharedDtor();
}

void E_AvatarDisplayMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarDisplayMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarDisplayMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarDisplayMaterialDesc_descriptor_;
}

const E_AvatarDisplayMaterialDesc& E_AvatarDisplayMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarDisplayMaterialDesc* E_AvatarDisplayMaterialDesc::default_instance_ = NULL;

E_AvatarDisplayMaterialDesc* E_AvatarDisplayMaterialDesc::New() const {
  return new E_AvatarDisplayMaterialDesc;
}

void E_AvatarDisplayMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_exp_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarDisplayMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarDisplayMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_exp(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarDisplayMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_exp(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarDisplayMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_exp = 1;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarDisplayMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarDisplayMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarDisplayMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarDisplayMaterialDesc::MergeFrom(const E_AvatarDisplayMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarDisplayMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarDisplayMaterialDesc::CopyFrom(const E_AvatarDisplayMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarDisplayMaterialDesc::IsInitialized() const {

  return true;
}

void E_AvatarDisplayMaterialDesc::Swap(E_AvatarDisplayMaterialDesc* other) {
  if (other != this) {
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarDisplayMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarDisplayMaterialDesc_descriptor_;
  metadata.reflection = E_AvatarDisplayMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarDisplay::kMIdFieldNumber;
const int E_AvatarDisplay::kMUpLvTypeFieldNumber;
const int E_AvatarDisplay::kMSkillIDFieldNumber;
const int E_AvatarDisplay::kMMaterialFieldNumber;
const int E_AvatarDisplay::kMFragmentIDFieldNumber;
#endif  // !_MSC_VER

E_AvatarDisplay::E_AvatarDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarDisplay::InitAsDefaultInstance() {
}

E_AvatarDisplay::E_AvatarDisplay(const E_AvatarDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarDisplay::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_uplvtype_ = 0;
  m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarDisplay::~E_AvatarDisplay() {
  SharedDtor();
}

void E_AvatarDisplay::SharedDtor() {
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillid_;
  }
  if (this != default_instance_) {
  }
}

void E_AvatarDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarDisplay_descriptor_;
}

const E_AvatarDisplay& E_AvatarDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarDisplay* E_AvatarDisplay::default_instance_ = NULL;

E_AvatarDisplay* E_AvatarDisplay::New() const {
  return new E_AvatarDisplay;
}

void E_AvatarDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_uplvtype_ = 0;
    if (has_m_skillid()) {
      if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
        m_skillid_->clear();
      }
    }
  }
  m_material_.Clear();
  m_fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_UpLvType;
        break;
      }

      // optional int32 m_UpLvType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UpLvType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplvtype_)));
          set_has_m_uplvtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_skillID;
        break;
      }

      // optional string m_skillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skillID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skillid().data(), this->m_skillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_AvatarDisplayMaterialDesc m_material = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_material;
        if (input->ExpectTag(40)) goto parse_m_fragmentID;
        break;
      }

      // repeated int64 m_fragmentID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fragmentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_m_fragmentid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_fragmentid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_fragmentID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_UpLvType = 2;
  if (has_m_uplvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_uplvtype(), output);
  }

  // optional string m_skillID = 3;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_skillid(), output);
  }

  // repeated .proto_ff.E_AvatarDisplayMaterialDesc m_material = 4;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_material(i), output);
  }

  // repeated int64 m_fragmentID = 5;
  for (int i = 0; i < this->m_fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->m_fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_UpLvType = 2;
  if (has_m_uplvtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_uplvtype(), target);
  }

  // optional string m_skillID = 3;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_skillid(), target);
  }

  // repeated .proto_ff.E_AvatarDisplayMaterialDesc m_material = 4;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_material(i), target);
  }

  // repeated int64 m_fragmentID = 5;
  for (int i = 0; i < this->m_fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->m_fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarDisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_UpLvType = 2;
    if (has_m_uplvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplvtype());
    }

    // optional string m_skillID = 3;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skillid());
    }

  }
  // repeated .proto_ff.E_AvatarDisplayMaterialDesc m_material = 4;
  total_size += 1 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  // repeated int64 m_fragmentID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_fragmentid(i));
    }
    total_size += 1 * this->m_fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarDisplay::MergeFrom(const E_AvatarDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_material_.MergeFrom(from.m_material_);
  m_fragmentid_.MergeFrom(from.m_fragmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_uplvtype()) {
      set_m_uplvtype(from.m_uplvtype());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarDisplay::CopyFrom(const E_AvatarDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarDisplay::IsInitialized() const {

  return true;
}

void E_AvatarDisplay::Swap(E_AvatarDisplay* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_uplvtype_, other->m_uplvtype_);
    std::swap(m_skillid_, other->m_skillid_);
    m_material_.Swap(&other->m_material_);
    m_fragmentid_.Swap(&other->m_fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarDisplay_descriptor_;
  metadata.reflection = E_AvatarDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarDisplay::kEAvatarDisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarDisplay::Sheet_AvatarDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarDisplay::InitAsDefaultInstance() {
}

Sheet_AvatarDisplay::Sheet_AvatarDisplay(const Sheet_AvatarDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarDisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarDisplay::~Sheet_AvatarDisplay() {
  SharedDtor();
}

void Sheet_AvatarDisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarDisplay_descriptor_;
}

const Sheet_AvatarDisplay& Sheet_AvatarDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarDisplay* Sheet_AvatarDisplay::default_instance_ = NULL;

Sheet_AvatarDisplay* Sheet_AvatarDisplay::New() const {
  return new Sheet_AvatarDisplay;
}

void Sheet_AvatarDisplay::Clear() {
  e_avatardisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarDisplay E_AvatarDisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarDisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avatardisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarDisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarDisplay E_AvatarDisplay_List = 1;
  for (int i = 0; i < this->e_avatardisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avatardisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarDisplay E_AvatarDisplay_List = 1;
  for (int i = 0; i < this->e_avatardisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avatardisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarDisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarDisplay E_AvatarDisplay_List = 1;
  total_size += 1 * this->e_avatardisplay_list_size();
  for (int i = 0; i < this->e_avatardisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avatardisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarDisplay::MergeFrom(const Sheet_AvatarDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avatardisplay_list_.MergeFrom(from.e_avatardisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarDisplay::CopyFrom(const Sheet_AvatarDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarDisplay::IsInitialized() const {

  return true;
}

void Sheet_AvatarDisplay::Swap(Sheet_AvatarDisplay* other) {
  if (other != this) {
    e_avatardisplay_list_.Swap(&other->e_avatardisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarDisplay_descriptor_;
  metadata.reflection = Sheet_AvatarDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarChangeMaterialDesc::kMExpFieldNumber;
const int E_AvatarChangeMaterialDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_AvatarChangeMaterialDesc::E_AvatarChangeMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarChangeMaterialDesc::InitAsDefaultInstance() {
}

E_AvatarChangeMaterialDesc::E_AvatarChangeMaterialDesc(const E_AvatarChangeMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarChangeMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_exp_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarChangeMaterialDesc::~E_AvatarChangeMaterialDesc() {
  SharedDtor();
}

void E_AvatarChangeMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarChangeMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarChangeMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarChangeMaterialDesc_descriptor_;
}

const E_AvatarChangeMaterialDesc& E_AvatarChangeMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarChangeMaterialDesc* E_AvatarChangeMaterialDesc::default_instance_ = NULL;

E_AvatarChangeMaterialDesc* E_AvatarChangeMaterialDesc::New() const {
  return new E_AvatarChangeMaterialDesc;
}

void E_AvatarChangeMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_exp_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarChangeMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarChangeMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_exp(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarChangeMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_exp(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarChangeMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_exp = 1;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarChangeMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarChangeMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarChangeMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarChangeMaterialDesc::MergeFrom(const E_AvatarChangeMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarChangeMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarChangeMaterialDesc::CopyFrom(const E_AvatarChangeMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarChangeMaterialDesc::IsInitialized() const {

  return true;
}

void E_AvatarChangeMaterialDesc::Swap(E_AvatarChangeMaterialDesc* other) {
  if (other != this) {
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarChangeMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarChangeMaterialDesc_descriptor_;
  metadata.reflection = E_AvatarChangeMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarChangeAttributeDesc::kMUpValueFieldNumber;
const int E_AvatarChangeAttributeDesc::kMUpBerFieldNumber;
#endif  // !_MSC_VER

E_AvatarChangeAttributeDesc::E_AvatarChangeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarChangeAttributeDesc::InitAsDefaultInstance() {
}

E_AvatarChangeAttributeDesc::E_AvatarChangeAttributeDesc(const E_AvatarChangeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarChangeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_upvalue_ = 0;
  m_upber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarChangeAttributeDesc::~E_AvatarChangeAttributeDesc() {
  SharedDtor();
}

void E_AvatarChangeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarChangeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarChangeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarChangeAttributeDesc_descriptor_;
}

const E_AvatarChangeAttributeDesc& E_AvatarChangeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarChangeAttributeDesc* E_AvatarChangeAttributeDesc::default_instance_ = NULL;

E_AvatarChangeAttributeDesc* E_AvatarChangeAttributeDesc::New() const {
  return new E_AvatarChangeAttributeDesc;
}

void E_AvatarChangeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_upvalue_ = 0;
    m_upber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarChangeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_UpValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upvalue_)));
          set_has_m_upvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_UpBer;
        break;
      }

      // optional int32 m_UpBer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UpBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upber_)));
          set_has_m_upber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarChangeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_UpValue = 1;
  if (has_m_upvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_upvalue(), output);
  }

  // optional int32 m_UpBer = 2;
  if (has_m_upber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_upber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarChangeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_UpValue = 1;
  if (has_m_upvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_upvalue(), target);
  }

  // optional int32 m_UpBer = 2;
  if (has_m_upber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_upber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarChangeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_UpValue = 1;
    if (has_m_upvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upvalue());
    }

    // optional int32 m_UpBer = 2;
    if (has_m_upber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarChangeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarChangeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarChangeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarChangeAttributeDesc::MergeFrom(const E_AvatarChangeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_upvalue()) {
      set_m_upvalue(from.m_upvalue());
    }
    if (from.has_m_upber()) {
      set_m_upber(from.m_upber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarChangeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarChangeAttributeDesc::CopyFrom(const E_AvatarChangeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarChangeAttributeDesc::IsInitialized() const {

  return true;
}

void E_AvatarChangeAttributeDesc::Swap(E_AvatarChangeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_upvalue_, other->m_upvalue_);
    std::swap(m_upber_, other->m_upber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarChangeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarChangeAttributeDesc_descriptor_;
  metadata.reflection = E_AvatarChangeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarChange::kMIdFieldNumber;
const int E_AvatarChange::kMQualityFieldNumber;
const int E_AvatarChange::kMUpLvTypeFieldNumber;
const int E_AvatarChange::kMAvatarSkillFieldNumber;
const int E_AvatarChange::kMAvatarCDFieldNumber;
const int E_AvatarChange::kMAvatarTimeFieldNumber;
const int E_AvatarChange::kMAvatarShieldFieldNumber;
const int E_AvatarChange::kMSkillIDFieldNumber;
const int E_AvatarChange::kMStarMaxFieldNumber;
const int E_AvatarChange::kMLvMaxFieldNumber;
const int E_AvatarChange::kMModelIDFieldNumber;
const int E_AvatarChange::kMAdvanceFieldNumber;
const int E_AvatarChange::kMActivationItemFieldNumber;
const int E_AvatarChange::kMActivationNumFieldNumber;
const int E_AvatarChange::kMStarIdFieldNumber;
const int E_AvatarChange::kMStarNumFieldNumber;
const int E_AvatarChange::kMStarUpAttributeIdFieldNumber;
const int E_AvatarChange::kMFunUnlockFieldNumber;
const int E_AvatarChange::kMMaxEquipFieldNumber;
const int E_AvatarChange::kMEquipSuitFieldNumber;
const int E_AvatarChange::kMStarBerFieldNumber;
const int E_AvatarChange::kMMaterialFieldNumber;
const int E_AvatarChange::kMInitiativeSkillFieldNumber;
const int E_AvatarChange::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_AvatarChange::E_AvatarChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarChange::InitAsDefaultInstance() {
}

E_AvatarChange::E_AvatarChange(const E_AvatarChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarChange::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_quality_ = 0;
  m_uplvtype_ = 0;
  m_avatarskill_ = GOOGLE_LONGLONG(0);
  m_avatarcd_ = 0;
  m_avatartime_ = 0;
  m_avatarshield_ = 0;
  m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starmax_ = 0;
  m_lvmax_ = 0;
  m_modelid_ = 0;
  m_advance_ = 0;
  m_activationitem_ = 0;
  m_activationnum_ = 0;
  m_starid_ = 0;
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starupattributeid_ = 0;
  m_fununlock_ = 0;
  m_maxequip_ = 0;
  m_equipsuit_ = 0;
  m_starber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarChange::~E_AvatarChange() {
  SharedDtor();
}

void E_AvatarChange::SharedDtor() {
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillid_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (this != default_instance_) {
  }
}

void E_AvatarChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarChange_descriptor_;
}

const E_AvatarChange& E_AvatarChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarChange* E_AvatarChange::default_instance_ = NULL;

E_AvatarChange* E_AvatarChange::New() const {
  return new E_AvatarChange;
}

void E_AvatarChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_quality_ = 0;
    m_uplvtype_ = 0;
    m_avatarskill_ = GOOGLE_LONGLONG(0);
    m_avatarcd_ = 0;
    m_avatartime_ = 0;
    m_avatarshield_ = 0;
    if (has_m_skillid()) {
      if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
        m_skillid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_starmax_ = 0;
    m_lvmax_ = 0;
    m_modelid_ = 0;
    m_advance_ = 0;
    m_activationitem_ = 0;
    m_activationnum_ = 0;
    m_starid_ = 0;
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_starupattributeid_ = 0;
    m_fununlock_ = 0;
    m_maxequip_ = 0;
    m_equipsuit_ = 0;
    m_starber_ = 0;
  }
  m_material_.Clear();
  m_initiativeskill_.Clear();
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_UpLvType;
        break;
      }

      // optional int32 m_UpLvType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UpLvType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplvtype_)));
          set_has_m_uplvtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_avatarSkill;
        break;
      }

      // optional int64 m_avatarSkill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_avatarSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_avatarskill_)));
          set_has_m_avatarskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_avatarCD;
        break;
      }

      // optional int32 m_avatarCD = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_avatarCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_avatarcd_)));
          set_has_m_avatarcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_avatarTime;
        break;
      }

      // optional int32 m_avatarTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_avatarTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_avatartime_)));
          set_has_m_avatartime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_avatarShield;
        break;
      }

      // optional int32 m_avatarShield = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_avatarShield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_avatarshield_)));
          set_has_m_avatarshield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_skillID;
        break;
      }

      // optional string m_skillID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skillID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skillid().data(), this->m_skillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_starMax;
        break;
      }

      // optional int32 m_starMax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starmax_)));
          set_has_m_starmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_LvMax;
        break;
      }

      // optional int32 m_LvMax = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_LvMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmax_)));
          set_has_m_lvmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_ModelID;
        break;
      }

      // optional int32 m_ModelID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ModelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modelid_)));
          set_has_m_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_advance;
        break;
      }

      // optional int32 m_advance = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advance_)));
          set_has_m_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_activationItem;
        break;
      }

      // optional int32 m_activationItem = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activationitem_)));
          set_has_m_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_activationNum;
        break;
      }

      // optional int32 m_activationNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activationnum_)));
          set_has_m_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_starId;
        break;
      }

      // optional int32 m_starId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_starNum;
        break;
      }

      // optional string m_starNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_starUpAttributeId;
        break;
      }

      // optional int32 m_starUpAttributeId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starUpAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starupattributeid_)));
          set_has_m_starupattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_funUnlock;
        break;
      }

      // optional int32 m_funUnlock = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_funUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fununlock_)));
          set_has_m_fununlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_maxEquip;
        break;
      }

      // optional int32 m_maxEquip = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxEquip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxequip_)));
          set_has_m_maxequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_equipSuit;
        break;
      }

      // optional int32 m_equipSuit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipSuit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipsuit_)));
          set_has_m_equipsuit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_starBer;
        break;
      }

      // optional int32 m_starBer = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starber_)));
          set_has_m_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_AvatarChangeMaterialDesc m_material = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_m_material;
        if (input->ExpectTag(184)) goto parse_m_InitiativeSkill;
        break;
      }

      // repeated int64 m_InitiativeSkill = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_InitiativeSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 184, input, this->mutable_m_initiativeskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_initiativeskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_InitiativeSkill;
        if (input->ExpectTag(194)) goto parse_m_Attribute;
        break;
      }

      // repeated .proto_ff.E_AvatarChangeAttributeDesc m_Attribute = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_m_Attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // optional int32 m_UpLvType = 3;
  if (has_m_uplvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_uplvtype(), output);
  }

  // optional int64 m_avatarSkill = 4;
  if (has_m_avatarskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_avatarskill(), output);
  }

  // optional int32 m_avatarCD = 5;
  if (has_m_avatarcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_avatarcd(), output);
  }

  // optional int32 m_avatarTime = 6;
  if (has_m_avatartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_avatartime(), output);
  }

  // optional int32 m_avatarShield = 7;
  if (has_m_avatarshield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_avatarshield(), output);
  }

  // optional string m_skillID = 8;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_skillid(), output);
  }

  // optional int32 m_starMax = 9;
  if (has_m_starmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_starmax(), output);
  }

  // optional int32 m_LvMax = 10;
  if (has_m_lvmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_lvmax(), output);
  }

  // optional int32 m_ModelID = 11;
  if (has_m_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_modelid(), output);
  }

  // optional int32 m_advance = 12;
  if (has_m_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_advance(), output);
  }

  // optional int32 m_activationItem = 13;
  if (has_m_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_activationitem(), output);
  }

  // optional int32 m_activationNum = 14;
  if (has_m_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_activationnum(), output);
  }

  // optional int32 m_starId = 15;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_starid(), output);
  }

  // optional string m_starNum = 16;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->m_starnum(), output);
  }

  // optional int32 m_starUpAttributeId = 17;
  if (has_m_starupattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_starupattributeid(), output);
  }

  // optional int32 m_funUnlock = 18;
  if (has_m_fununlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_fununlock(), output);
  }

  // optional int32 m_maxEquip = 19;
  if (has_m_maxequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_maxequip(), output);
  }

  // optional int32 m_equipSuit = 20;
  if (has_m_equipsuit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_equipsuit(), output);
  }

  // optional int32 m_starBer = 21;
  if (has_m_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_starber(), output);
  }

  // repeated .proto_ff.E_AvatarChangeMaterialDesc m_material = 22;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->m_material(i), output);
  }

  // repeated int64 m_InitiativeSkill = 23;
  for (int i = 0; i < this->m_initiativeskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      23, this->m_initiativeskill(i), output);
  }

  // repeated .proto_ff.E_AvatarChangeAttributeDesc m_Attribute = 24;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // optional int32 m_UpLvType = 3;
  if (has_m_uplvtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_uplvtype(), target);
  }

  // optional int64 m_avatarSkill = 4;
  if (has_m_avatarskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_avatarskill(), target);
  }

  // optional int32 m_avatarCD = 5;
  if (has_m_avatarcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_avatarcd(), target);
  }

  // optional int32 m_avatarTime = 6;
  if (has_m_avatartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_avatartime(), target);
  }

  // optional int32 m_avatarShield = 7;
  if (has_m_avatarshield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_avatarshield(), target);
  }

  // optional string m_skillID = 8;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_skillid(), target);
  }

  // optional int32 m_starMax = 9;
  if (has_m_starmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_starmax(), target);
  }

  // optional int32 m_LvMax = 10;
  if (has_m_lvmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_lvmax(), target);
  }

  // optional int32 m_ModelID = 11;
  if (has_m_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_modelid(), target);
  }

  // optional int32 m_advance = 12;
  if (has_m_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_advance(), target);
  }

  // optional int32 m_activationItem = 13;
  if (has_m_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_activationitem(), target);
  }

  // optional int32 m_activationNum = 14;
  if (has_m_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_activationnum(), target);
  }

  // optional int32 m_starId = 15;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_starid(), target);
  }

  // optional string m_starNum = 16;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->m_starnum(), target);
  }

  // optional int32 m_starUpAttributeId = 17;
  if (has_m_starupattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_starupattributeid(), target);
  }

  // optional int32 m_funUnlock = 18;
  if (has_m_fununlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_fununlock(), target);
  }

  // optional int32 m_maxEquip = 19;
  if (has_m_maxequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_maxequip(), target);
  }

  // optional int32 m_equipSuit = 20;
  if (has_m_equipsuit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_equipsuit(), target);
  }

  // optional int32 m_starBer = 21;
  if (has_m_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_starber(), target);
  }

  // repeated .proto_ff.E_AvatarChangeMaterialDesc m_material = 22;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->m_material(i), target);
  }

  // repeated int64 m_InitiativeSkill = 23;
  for (int i = 0; i < this->m_initiativeskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(23, this->m_initiativeskill(i), target);
  }

  // repeated .proto_ff.E_AvatarChangeAttributeDesc m_Attribute = 24;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_UpLvType = 3;
    if (has_m_uplvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplvtype());
    }

    // optional int64 m_avatarSkill = 4;
    if (has_m_avatarskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_avatarskill());
    }

    // optional int32 m_avatarCD = 5;
    if (has_m_avatarcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_avatarcd());
    }

    // optional int32 m_avatarTime = 6;
    if (has_m_avatartime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_avatartime());
    }

    // optional int32 m_avatarShield = 7;
    if (has_m_avatarshield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_avatarshield());
    }

    // optional string m_skillID = 8;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skillid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_starMax = 9;
    if (has_m_starmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starmax());
    }

    // optional int32 m_LvMax = 10;
    if (has_m_lvmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmax());
    }

    // optional int32 m_ModelID = 11;
    if (has_m_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modelid());
    }

    // optional int32 m_advance = 12;
    if (has_m_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advance());
    }

    // optional int32 m_activationItem = 13;
    if (has_m_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activationitem());
    }

    // optional int32 m_activationNum = 14;
    if (has_m_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activationnum());
    }

    // optional int32 m_starId = 15;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starid());
    }

    // optional string m_starNum = 16;
    if (has_m_starnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_starUpAttributeId = 17;
    if (has_m_starupattributeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starupattributeid());
    }

    // optional int32 m_funUnlock = 18;
    if (has_m_fununlock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fununlock());
    }

    // optional int32 m_maxEquip = 19;
    if (has_m_maxequip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxequip());
    }

    // optional int32 m_equipSuit = 20;
    if (has_m_equipsuit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipsuit());
    }

    // optional int32 m_starBer = 21;
    if (has_m_starber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starber());
    }

  }
  // repeated .proto_ff.E_AvatarChangeMaterialDesc m_material = 22;
  total_size += 2 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  // repeated int64 m_InitiativeSkill = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_initiativeskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_initiativeskill(i));
    }
    total_size += 2 * this->m_initiativeskill_size() + data_size;
  }

  // repeated .proto_ff.E_AvatarChangeAttributeDesc m_Attribute = 24;
  total_size += 2 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarChange::MergeFrom(const E_AvatarChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_material_.MergeFrom(from.m_material_);
  m_initiativeskill_.MergeFrom(from.m_initiativeskill_);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_uplvtype()) {
      set_m_uplvtype(from.m_uplvtype());
    }
    if (from.has_m_avatarskill()) {
      set_m_avatarskill(from.m_avatarskill());
    }
    if (from.has_m_avatarcd()) {
      set_m_avatarcd(from.m_avatarcd());
    }
    if (from.has_m_avatartime()) {
      set_m_avatartime(from.m_avatartime());
    }
    if (from.has_m_avatarshield()) {
      set_m_avatarshield(from.m_avatarshield());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_starmax()) {
      set_m_starmax(from.m_starmax());
    }
    if (from.has_m_lvmax()) {
      set_m_lvmax(from.m_lvmax());
    }
    if (from.has_m_modelid()) {
      set_m_modelid(from.m_modelid());
    }
    if (from.has_m_advance()) {
      set_m_advance(from.m_advance());
    }
    if (from.has_m_activationitem()) {
      set_m_activationitem(from.m_activationitem());
    }
    if (from.has_m_activationnum()) {
      set_m_activationnum(from.m_activationnum());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_starupattributeid()) {
      set_m_starupattributeid(from.m_starupattributeid());
    }
    if (from.has_m_fununlock()) {
      set_m_fununlock(from.m_fununlock());
    }
    if (from.has_m_maxequip()) {
      set_m_maxequip(from.m_maxequip());
    }
    if (from.has_m_equipsuit()) {
      set_m_equipsuit(from.m_equipsuit());
    }
    if (from.has_m_starber()) {
      set_m_starber(from.m_starber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarChange::CopyFrom(const E_AvatarChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarChange::IsInitialized() const {

  return true;
}

void E_AvatarChange::Swap(E_AvatarChange* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_uplvtype_, other->m_uplvtype_);
    std::swap(m_avatarskill_, other->m_avatarskill_);
    std::swap(m_avatarcd_, other->m_avatarcd_);
    std::swap(m_avatartime_, other->m_avatartime_);
    std::swap(m_avatarshield_, other->m_avatarshield_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_starmax_, other->m_starmax_);
    std::swap(m_lvmax_, other->m_lvmax_);
    std::swap(m_modelid_, other->m_modelid_);
    std::swap(m_advance_, other->m_advance_);
    std::swap(m_activationitem_, other->m_activationitem_);
    std::swap(m_activationnum_, other->m_activationnum_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_starupattributeid_, other->m_starupattributeid_);
    std::swap(m_fununlock_, other->m_fununlock_);
    std::swap(m_maxequip_, other->m_maxequip_);
    std::swap(m_equipsuit_, other->m_equipsuit_);
    std::swap(m_starber_, other->m_starber_);
    m_material_.Swap(&other->m_material_);
    m_initiativeskill_.Swap(&other->m_initiativeskill_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarChange_descriptor_;
  metadata.reflection = E_AvatarChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarChange::kEAvatarChangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarChange::Sheet_AvatarChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarChange::InitAsDefaultInstance() {
}

Sheet_AvatarChange::Sheet_AvatarChange(const Sheet_AvatarChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarChange::~Sheet_AvatarChange() {
  SharedDtor();
}

void Sheet_AvatarChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarChange_descriptor_;
}

const Sheet_AvatarChange& Sheet_AvatarChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarChange* Sheet_AvatarChange::default_instance_ = NULL;

Sheet_AvatarChange* Sheet_AvatarChange::New() const {
  return new Sheet_AvatarChange;
}

void Sheet_AvatarChange::Clear() {
  e_avatarchange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarChange E_AvatarChange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarChange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avatarchange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarChange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarChange E_AvatarChange_List = 1;
  for (int i = 0; i < this->e_avatarchange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avatarchange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarChange E_AvatarChange_List = 1;
  for (int i = 0; i < this->e_avatarchange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avatarchange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarChange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarChange E_AvatarChange_List = 1;
  total_size += 1 * this->e_avatarchange_list_size();
  for (int i = 0; i < this->e_avatarchange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avatarchange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarChange::MergeFrom(const Sheet_AvatarChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avatarchange_list_.MergeFrom(from.e_avatarchange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarChange::CopyFrom(const Sheet_AvatarChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarChange::IsInitialized() const {

  return true;
}

void Sheet_AvatarChange::Swap(Sheet_AvatarChange* other) {
  if (other != this) {
    e_avatarchange_list_.Swap(&other->e_avatarchange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarChange_descriptor_;
  metadata.reflection = Sheet_AvatarChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarChangetab::kMTabIDFieldNumber;
#endif  // !_MSC_VER

E_AvatarChangetab::E_AvatarChangetab()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarChangetab::InitAsDefaultInstance() {
}

E_AvatarChangetab::E_AvatarChangetab(const E_AvatarChangetab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarChangetab::SharedCtor() {
  _cached_size_ = 0;
  m_tabid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarChangetab::~E_AvatarChangetab() {
  SharedDtor();
}

void E_AvatarChangetab::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarChangetab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarChangetab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarChangetab_descriptor_;
}

const E_AvatarChangetab& E_AvatarChangetab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarChangetab* E_AvatarChangetab::default_instance_ = NULL;

E_AvatarChangetab* E_AvatarChangetab::New() const {
  return new E_AvatarChangetab;
}

void E_AvatarChangetab::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_tabid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarChangetab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_tabID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tabid_)));
          set_has_m_tabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarChangetab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_tabID = 1;
  if (has_m_tabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_tabid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarChangetab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_tabID = 1;
  if (has_m_tabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_tabid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarChangetab::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_tabID = 1;
    if (has_m_tabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tabid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarChangetab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarChangetab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarChangetab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarChangetab::MergeFrom(const E_AvatarChangetab& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tabid()) {
      set_m_tabid(from.m_tabid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarChangetab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarChangetab::CopyFrom(const E_AvatarChangetab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarChangetab::IsInitialized() const {

  return true;
}

void E_AvatarChangetab::Swap(E_AvatarChangetab* other) {
  if (other != this) {
    std::swap(m_tabid_, other->m_tabid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarChangetab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarChangetab_descriptor_;
  metadata.reflection = E_AvatarChangetab_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarChangetab::kEAvatarChangetabListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarChangetab::Sheet_AvatarChangetab()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarChangetab::InitAsDefaultInstance() {
}

Sheet_AvatarChangetab::Sheet_AvatarChangetab(const Sheet_AvatarChangetab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarChangetab::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarChangetab::~Sheet_AvatarChangetab() {
  SharedDtor();
}

void Sheet_AvatarChangetab::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarChangetab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarChangetab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarChangetab_descriptor_;
}

const Sheet_AvatarChangetab& Sheet_AvatarChangetab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarChangetab* Sheet_AvatarChangetab::default_instance_ = NULL;

Sheet_AvatarChangetab* Sheet_AvatarChangetab::New() const {
  return new Sheet_AvatarChangetab;
}

void Sheet_AvatarChangetab::Clear() {
  e_avatarchangetab_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarChangetab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarChangetab E_AvatarChangetab_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarChangetab_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avatarchangetab_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarChangetab_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarChangetab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarChangetab E_AvatarChangetab_List = 1;
  for (int i = 0; i < this->e_avatarchangetab_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avatarchangetab_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarChangetab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarChangetab E_AvatarChangetab_List = 1;
  for (int i = 0; i < this->e_avatarchangetab_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avatarchangetab_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarChangetab::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarChangetab E_AvatarChangetab_List = 1;
  total_size += 1 * this->e_avatarchangetab_list_size();
  for (int i = 0; i < this->e_avatarchangetab_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avatarchangetab_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarChangetab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarChangetab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarChangetab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarChangetab::MergeFrom(const Sheet_AvatarChangetab& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avatarchangetab_list_.MergeFrom(from.e_avatarchangetab_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarChangetab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarChangetab::CopyFrom(const Sheet_AvatarChangetab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarChangetab::IsInitialized() const {

  return true;
}

void Sheet_AvatarChangetab::Swap(Sheet_AvatarChangetab* other) {
  if (other != this) {
    e_avatarchangetab_list_.Swap(&other->e_avatarchangetab_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarChangetab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarChangetab_descriptor_;
  metadata.reflection = Sheet_AvatarChangetab_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarBattleslot::kMIdFieldNumber;
const int E_AvatarBattleslot::kMTypeFieldNumber;
const int E_AvatarBattleslot::kMArgFieldNumber;
#endif  // !_MSC_VER

E_AvatarBattleslot::E_AvatarBattleslot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarBattleslot::InitAsDefaultInstance() {
}

E_AvatarBattleslot::E_AvatarBattleslot(const E_AvatarBattleslot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarBattleslot::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarBattleslot::~E_AvatarBattleslot() {
  SharedDtor();
}

void E_AvatarBattleslot::SharedDtor() {
  if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_arg_;
  }
  if (this != default_instance_) {
  }
}

void E_AvatarBattleslot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarBattleslot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarBattleslot_descriptor_;
}

const E_AvatarBattleslot& E_AvatarBattleslot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarBattleslot* E_AvatarBattleslot::default_instance_ = NULL;

E_AvatarBattleslot* E_AvatarBattleslot::New() const {
  return new E_AvatarBattleslot;
}

void E_AvatarBattleslot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    if (has_m_arg()) {
      if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
        m_arg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarBattleslot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_arg;
        break;
      }

      // optional string m_arg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_arg().data(), this->m_arg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarBattleslot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional string m_arg = 3;
  if (has_m_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_arg().data(), this->m_arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_arg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarBattleslot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional string m_arg = 3;
  if (has_m_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_arg().data(), this->m_arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_arg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarBattleslot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_arg = 3;
    if (has_m_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_arg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarBattleslot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarBattleslot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarBattleslot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarBattleslot::MergeFrom(const E_AvatarBattleslot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_arg()) {
      set_m_arg(from.m_arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarBattleslot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarBattleslot::CopyFrom(const E_AvatarBattleslot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarBattleslot::IsInitialized() const {

  return true;
}

void E_AvatarBattleslot::Swap(E_AvatarBattleslot* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_arg_, other->m_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarBattleslot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarBattleslot_descriptor_;
  metadata.reflection = E_AvatarBattleslot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarBattleslot::kEAvatarBattleslotListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarBattleslot::Sheet_AvatarBattleslot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarBattleslot::InitAsDefaultInstance() {
}

Sheet_AvatarBattleslot::Sheet_AvatarBattleslot(const Sheet_AvatarBattleslot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarBattleslot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarBattleslot::~Sheet_AvatarBattleslot() {
  SharedDtor();
}

void Sheet_AvatarBattleslot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarBattleslot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarBattleslot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarBattleslot_descriptor_;
}

const Sheet_AvatarBattleslot& Sheet_AvatarBattleslot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarBattleslot* Sheet_AvatarBattleslot::default_instance_ = NULL;

Sheet_AvatarBattleslot* Sheet_AvatarBattleslot::New() const {
  return new Sheet_AvatarBattleslot;
}

void Sheet_AvatarBattleslot::Clear() {
  e_avatarbattleslot_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarBattleslot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarBattleslot E_AvatarBattleslot_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarBattleslot_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avatarbattleslot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarBattleslot_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarBattleslot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarBattleslot E_AvatarBattleslot_List = 1;
  for (int i = 0; i < this->e_avatarbattleslot_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avatarbattleslot_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarBattleslot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarBattleslot E_AvatarBattleslot_List = 1;
  for (int i = 0; i < this->e_avatarbattleslot_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avatarbattleslot_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarBattleslot::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarBattleslot E_AvatarBattleslot_List = 1;
  total_size += 1 * this->e_avatarbattleslot_list_size();
  for (int i = 0; i < this->e_avatarbattleslot_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avatarbattleslot_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarBattleslot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarBattleslot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarBattleslot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarBattleslot::MergeFrom(const Sheet_AvatarBattleslot& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avatarbattleslot_list_.MergeFrom(from.e_avatarbattleslot_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarBattleslot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarBattleslot::CopyFrom(const Sheet_AvatarBattleslot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarBattleslot::IsInitialized() const {

  return true;
}

void Sheet_AvatarBattleslot::Swap(Sheet_AvatarBattleslot* other) {
  if (other != this) {
    e_avatarbattleslot_list_.Swap(&other->e_avatarbattleslot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarBattleslot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarBattleslot_descriptor_;
  metadata.reflection = Sheet_AvatarBattleslot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarAdvanceUpattributeDesc::kMValueFieldNumber;
const int E_AvatarAdvanceUpattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_AvatarAdvanceUpattributeDesc::E_AvatarAdvanceUpattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarAdvanceUpattributeDesc::InitAsDefaultInstance() {
}

E_AvatarAdvanceUpattributeDesc::E_AvatarAdvanceUpattributeDesc(const E_AvatarAdvanceUpattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarAdvanceUpattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarAdvanceUpattributeDesc::~E_AvatarAdvanceUpattributeDesc() {
  SharedDtor();
}

void E_AvatarAdvanceUpattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarAdvanceUpattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarAdvanceUpattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarAdvanceUpattributeDesc_descriptor_;
}

const E_AvatarAdvanceUpattributeDesc& E_AvatarAdvanceUpattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarAdvanceUpattributeDesc* E_AvatarAdvanceUpattributeDesc::default_instance_ = NULL;

E_AvatarAdvanceUpattributeDesc* E_AvatarAdvanceUpattributeDesc::New() const {
  return new E_AvatarAdvanceUpattributeDesc;
}

void E_AvatarAdvanceUpattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarAdvanceUpattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarAdvanceUpattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarAdvanceUpattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarAdvanceUpattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarAdvanceUpattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarAdvanceUpattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarAdvanceUpattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarAdvanceUpattributeDesc::MergeFrom(const E_AvatarAdvanceUpattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarAdvanceUpattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarAdvanceUpattributeDesc::CopyFrom(const E_AvatarAdvanceUpattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarAdvanceUpattributeDesc::IsInitialized() const {

  return true;
}

void E_AvatarAdvanceUpattributeDesc::Swap(E_AvatarAdvanceUpattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarAdvanceUpattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarAdvanceUpattributeDesc_descriptor_;
  metadata.reflection = E_AvatarAdvanceUpattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarAdvance::kMIdFieldNumber;
const int E_AvatarAdvance::kMUpAttributeIdFieldNumber;
const int E_AvatarAdvance::kMStarIDFieldNumber;
const int E_AvatarAdvance::kMSkillIDFieldNumber;
const int E_AvatarAdvance::kMUpAttributeFieldNumber;
#endif  // !_MSC_VER

E_AvatarAdvance::E_AvatarAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarAdvance::InitAsDefaultInstance() {
}

E_AvatarAdvance::E_AvatarAdvance(const E_AvatarAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarAdvance::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_upattributeid_ = 0;
  m_starid_ = 0;
  m_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarAdvance::~E_AvatarAdvance() {
  SharedDtor();
}

void E_AvatarAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarAdvance_descriptor_;
}

const E_AvatarAdvance& E_AvatarAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarAdvance* E_AvatarAdvance::default_instance_ = NULL;

E_AvatarAdvance* E_AvatarAdvance::New() const {
  return new E_AvatarAdvance;
}

void E_AvatarAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_upattributeid_ = 0;
    m_starid_ = 0;
    m_skillid_ = 0;
  }
  m_upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_upAttributeId;
        break;
      }

      // optional int32 m_upAttributeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_starID;
        break;
      }

      // optional int32 m_starID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_skillID;
        break;
      }

      // optional int32 m_skillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_upAttribute;
        break;
      }

      // repeated .proto_ff.E_AvatarAdvanceUpattributeDesc m_upAttribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_upAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_upAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_upAttributeId = 2;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_upattributeid(), output);
  }

  // optional int32 m_starID = 3;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_starid(), output);
  }

  // optional int32 m_skillID = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_skillid(), output);
  }

  // repeated .proto_ff.E_AvatarAdvanceUpattributeDesc m_upAttribute = 5;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_upAttributeId = 2;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_upattributeid(), target);
  }

  // optional int32 m_starID = 3;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_starid(), target);
  }

  // optional int32 m_skillID = 4;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_skillid(), target);
  }

  // repeated .proto_ff.E_AvatarAdvanceUpattributeDesc m_upAttribute = 5;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_upAttributeId = 2;
    if (has_m_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upattributeid());
    }

    // optional int32 m_starID = 3;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starid());
    }

    // optional int32 m_skillID = 4;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

  }
  // repeated .proto_ff.E_AvatarAdvanceUpattributeDesc m_upAttribute = 5;
  total_size += 1 * this->m_upattribute_size();
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarAdvance::MergeFrom(const E_AvatarAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_upattribute_.MergeFrom(from.m_upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarAdvance::CopyFrom(const E_AvatarAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarAdvance::IsInitialized() const {

  return true;
}

void E_AvatarAdvance::Swap(E_AvatarAdvance* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_skillid_, other->m_skillid_);
    m_upattribute_.Swap(&other->m_upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarAdvance_descriptor_;
  metadata.reflection = E_AvatarAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarAdvance::kEAvatarAdvanceListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarAdvance::Sheet_AvatarAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarAdvance::InitAsDefaultInstance() {
}

Sheet_AvatarAdvance::Sheet_AvatarAdvance(const Sheet_AvatarAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarAdvance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarAdvance::~Sheet_AvatarAdvance() {
  SharedDtor();
}

void Sheet_AvatarAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarAdvance_descriptor_;
}

const Sheet_AvatarAdvance& Sheet_AvatarAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarAdvance* Sheet_AvatarAdvance::default_instance_ = NULL;

Sheet_AvatarAdvance* Sheet_AvatarAdvance::New() const {
  return new Sheet_AvatarAdvance;
}

void Sheet_AvatarAdvance::Clear() {
  e_avataradvance_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarAdvance E_AvatarAdvance_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarAdvance_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avataradvance_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarAdvance_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarAdvance E_AvatarAdvance_List = 1;
  for (int i = 0; i < this->e_avataradvance_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avataradvance_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarAdvance E_AvatarAdvance_List = 1;
  for (int i = 0; i < this->e_avataradvance_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avataradvance_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarAdvance::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarAdvance E_AvatarAdvance_List = 1;
  total_size += 1 * this->e_avataradvance_list_size();
  for (int i = 0; i < this->e_avataradvance_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avataradvance_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarAdvance::MergeFrom(const Sheet_AvatarAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avataradvance_list_.MergeFrom(from.e_avataradvance_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarAdvance::CopyFrom(const Sheet_AvatarAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarAdvance::IsInitialized() const {

  return true;
}

void Sheet_AvatarAdvance::Swap(Sheet_AvatarAdvance* other) {
  if (other != this) {
    e_avataradvance_list_.Swap(&other->e_avataradvance_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarAdvance_descriptor_;
  metadata.reflection = Sheet_AvatarAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarSkill::kMIdFieldNumber;
const int E_AvatarSkill::kMBelongFieldNumber;
const int E_AvatarSkill::kMOrderFieldNumber;
const int E_AvatarSkill::kMSkillidFieldNumber;
#endif  // !_MSC_VER

E_AvatarSkill::E_AvatarSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarSkill::InitAsDefaultInstance() {
}

E_AvatarSkill::E_AvatarSkill(const E_AvatarSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarSkill::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_belong_ = 0;
  m_order_ = 0;
  m_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarSkill::~E_AvatarSkill() {
  SharedDtor();
}

void E_AvatarSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarSkill_descriptor_;
}

const E_AvatarSkill& E_AvatarSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarSkill* E_AvatarSkill::default_instance_ = NULL;

E_AvatarSkill* E_AvatarSkill::New() const {
  return new E_AvatarSkill;
}

void E_AvatarSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_belong_ = 0;
    m_order_ = 0;
    m_skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_belong;
        break;
      }

      // optional int32 m_belong = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_belong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_belong_)));
          set_has_m_belong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_order;
        break;
      }

      // optional int32 m_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_order_)));
          set_has_m_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_belong = 2;
  if (has_m_belong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_belong(), output);
  }

  // optional int32 m_order = 3;
  if (has_m_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_order(), output);
  }

  // optional int32 m_skillid = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_belong = 2;
  if (has_m_belong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_belong(), target);
  }

  // optional int32 m_order = 3;
  if (has_m_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_order(), target);
  }

  // optional int32 m_skillid = 4;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_belong = 2;
    if (has_m_belong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_belong());
    }

    // optional int32 m_order = 3;
    if (has_m_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_order());
    }

    // optional int32 m_skillid = 4;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarSkill::MergeFrom(const E_AvatarSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_belong()) {
      set_m_belong(from.m_belong());
    }
    if (from.has_m_order()) {
      set_m_order(from.m_order());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarSkill::CopyFrom(const E_AvatarSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarSkill::IsInitialized() const {

  return true;
}

void E_AvatarSkill::Swap(E_AvatarSkill* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_belong_, other->m_belong_);
    std::swap(m_order_, other->m_order_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarSkill_descriptor_;
  metadata.reflection = E_AvatarSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarSkill::kEAvatarSkillListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarSkill::Sheet_AvatarSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarSkill::InitAsDefaultInstance() {
}

Sheet_AvatarSkill::Sheet_AvatarSkill(const Sheet_AvatarSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarSkill::~Sheet_AvatarSkill() {
  SharedDtor();
}

void Sheet_AvatarSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarSkill_descriptor_;
}

const Sheet_AvatarSkill& Sheet_AvatarSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarSkill* Sheet_AvatarSkill::default_instance_ = NULL;

Sheet_AvatarSkill* Sheet_AvatarSkill::New() const {
  return new Sheet_AvatarSkill;
}

void Sheet_AvatarSkill::Clear() {
  e_avatarskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarSkill E_AvatarSkill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarSkill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avatarskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarSkill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarSkill E_AvatarSkill_List = 1;
  for (int i = 0; i < this->e_avatarskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avatarskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarSkill E_AvatarSkill_List = 1;
  for (int i = 0; i < this->e_avatarskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avatarskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarSkill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarSkill E_AvatarSkill_List = 1;
  total_size += 1 * this->e_avatarskill_list_size();
  for (int i = 0; i < this->e_avatarskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avatarskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarSkill::MergeFrom(const Sheet_AvatarSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avatarskill_list_.MergeFrom(from.e_avatarskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarSkill::CopyFrom(const Sheet_AvatarSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarSkill::IsInitialized() const {

  return true;
}

void Sheet_AvatarSkill::Swap(Sheet_AvatarSkill* other) {
  if (other != this) {
    e_avatarskill_list_.Swap(&other->e_avatarskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarSkill_descriptor_;
  metadata.reflection = Sheet_AvatarSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarEquipsuitAttributeDesc::kMValueFieldNumber;
const int E_AvatarEquipsuitAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_AvatarEquipsuitAttributeDesc::E_AvatarEquipsuitAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarEquipsuitAttributeDesc::InitAsDefaultInstance() {
}

E_AvatarEquipsuitAttributeDesc::E_AvatarEquipsuitAttributeDesc(const E_AvatarEquipsuitAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarEquipsuitAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarEquipsuitAttributeDesc::~E_AvatarEquipsuitAttributeDesc() {
  SharedDtor();
}

void E_AvatarEquipsuitAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarEquipsuitAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarEquipsuitAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarEquipsuitAttributeDesc_descriptor_;
}

const E_AvatarEquipsuitAttributeDesc& E_AvatarEquipsuitAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarEquipsuitAttributeDesc* E_AvatarEquipsuitAttributeDesc::default_instance_ = NULL;

E_AvatarEquipsuitAttributeDesc* E_AvatarEquipsuitAttributeDesc::New() const {
  return new E_AvatarEquipsuitAttributeDesc;
}

void E_AvatarEquipsuitAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarEquipsuitAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarEquipsuitAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarEquipsuitAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarEquipsuitAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarEquipsuitAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarEquipsuitAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarEquipsuitAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarEquipsuitAttributeDesc::MergeFrom(const E_AvatarEquipsuitAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarEquipsuitAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarEquipsuitAttributeDesc::CopyFrom(const E_AvatarEquipsuitAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarEquipsuitAttributeDesc::IsInitialized() const {

  return true;
}

void E_AvatarEquipsuitAttributeDesc::Swap(E_AvatarEquipsuitAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarEquipsuitAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarEquipsuitAttributeDesc_descriptor_;
  metadata.reflection = E_AvatarEquipsuitAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AvatarEquipsuit::kMIdFieldNumber;
const int E_AvatarEquipsuit::kMGroupIDFieldNumber;
const int E_AvatarEquipsuit::kMQualityFieldNumber;
const int E_AvatarEquipsuit::kMStarFieldNumber;
const int E_AvatarEquipsuit::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_AvatarEquipsuit::E_AvatarEquipsuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AvatarEquipsuit::InitAsDefaultInstance() {
}

E_AvatarEquipsuit::E_AvatarEquipsuit(const E_AvatarEquipsuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AvatarEquipsuit::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AvatarEquipsuit::~E_AvatarEquipsuit() {
  SharedDtor();
}

void E_AvatarEquipsuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AvatarEquipsuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AvatarEquipsuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AvatarEquipsuit_descriptor_;
}

const E_AvatarEquipsuit& E_AvatarEquipsuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

E_AvatarEquipsuit* E_AvatarEquipsuit::default_instance_ = NULL;

E_AvatarEquipsuit* E_AvatarEquipsuit::New() const {
  return new E_AvatarEquipsuit;
}

void E_AvatarEquipsuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AvatarEquipsuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupID;
        break;
      }

      // optional int32 m_groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_Attribute;
        break;
      }

      // repeated .proto_ff.E_AvatarEquipsuitAttributeDesc m_Attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_Attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AvatarEquipsuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_quality(), output);
  }

  // optional int32 m_star = 4;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_star(), output);
  }

  // repeated .proto_ff.E_AvatarEquipsuitAttributeDesc m_Attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AvatarEquipsuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_quality(), target);
  }

  // optional int32 m_star = 4;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_star(), target);
  }

  // repeated .proto_ff.E_AvatarEquipsuitAttributeDesc m_Attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AvatarEquipsuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupID = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_quality = 3;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 4;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

  }
  // repeated .proto_ff.E_AvatarEquipsuitAttributeDesc m_Attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AvatarEquipsuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AvatarEquipsuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AvatarEquipsuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AvatarEquipsuit::MergeFrom(const E_AvatarEquipsuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AvatarEquipsuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AvatarEquipsuit::CopyFrom(const E_AvatarEquipsuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AvatarEquipsuit::IsInitialized() const {

  return true;
}

void E_AvatarEquipsuit::Swap(E_AvatarEquipsuit* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AvatarEquipsuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AvatarEquipsuit_descriptor_;
  metadata.reflection = E_AvatarEquipsuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AvatarEquipsuit::kEAvatarEquipsuitListFieldNumber;
#endif  // !_MSC_VER

Sheet_AvatarEquipsuit::Sheet_AvatarEquipsuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AvatarEquipsuit::InitAsDefaultInstance() {
}

Sheet_AvatarEquipsuit::Sheet_AvatarEquipsuit(const Sheet_AvatarEquipsuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AvatarEquipsuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AvatarEquipsuit::~Sheet_AvatarEquipsuit() {
  SharedDtor();
}

void Sheet_AvatarEquipsuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AvatarEquipsuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AvatarEquipsuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AvatarEquipsuit_descriptor_;
}

const Sheet_AvatarEquipsuit& Sheet_AvatarEquipsuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fAvatar_2eproto();
  return *default_instance_;
}

Sheet_AvatarEquipsuit* Sheet_AvatarEquipsuit::default_instance_ = NULL;

Sheet_AvatarEquipsuit* Sheet_AvatarEquipsuit::New() const {
  return new Sheet_AvatarEquipsuit;
}

void Sheet_AvatarEquipsuit::Clear() {
  e_avatarequipsuit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AvatarEquipsuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AvatarEquipsuit E_AvatarEquipsuit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AvatarEquipsuit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_avatarequipsuit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AvatarEquipsuit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AvatarEquipsuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AvatarEquipsuit E_AvatarEquipsuit_List = 1;
  for (int i = 0; i < this->e_avatarequipsuit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_avatarequipsuit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AvatarEquipsuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AvatarEquipsuit E_AvatarEquipsuit_List = 1;
  for (int i = 0; i < this->e_avatarequipsuit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_avatarequipsuit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AvatarEquipsuit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AvatarEquipsuit E_AvatarEquipsuit_List = 1;
  total_size += 1 * this->e_avatarequipsuit_list_size();
  for (int i = 0; i < this->e_avatarequipsuit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_avatarequipsuit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AvatarEquipsuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AvatarEquipsuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AvatarEquipsuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AvatarEquipsuit::MergeFrom(const Sheet_AvatarEquipsuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_avatarequipsuit_list_.MergeFrom(from.e_avatarequipsuit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AvatarEquipsuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AvatarEquipsuit::CopyFrom(const Sheet_AvatarEquipsuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AvatarEquipsuit::IsInitialized() const {

  return true;
}

void Sheet_AvatarEquipsuit::Swap(Sheet_AvatarEquipsuit* other) {
  if (other != this) {
    e_avatarequipsuit_list_.Swap(&other->e_avatarequipsuit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AvatarEquipsuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AvatarEquipsuit_descriptor_;
  metadata.reflection = Sheet_AvatarEquipsuit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
