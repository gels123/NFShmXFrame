// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Pk1v1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Pk1v1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_Pk1v1Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Pk1v1Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Pk1v1Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Pk1v1Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_Pk1v1Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Pk1v1Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Pk1v1Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Pk1v1Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_Pk1v1Dailyreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_Pk1v1Dailyreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_Pk1v1Dailyreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_Pk1v1Dailyreward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fPk1v1_2eproto() {
  protobuf_AddDesc_E_5fPk1v1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Pk1v1.proto");
  GOOGLE_CHECK(file != NULL);
  E_Pk1v1Rank_descriptor_ = file->message_type(0);
  static const int E_Pk1v1Rank_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_scoremin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_scoremax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_sucessscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_defeatscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_sucessbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_defeatbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, m_tiebox_),
  };
  E_Pk1v1Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Pk1v1Rank_descriptor_,
      E_Pk1v1Rank::default_instance_,
      E_Pk1v1Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Pk1v1Rank));
  Sheet_Pk1v1Rank_descriptor_ = file->message_type(1);
  static const int Sheet_Pk1v1Rank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Rank, e_pk1v1rank_list_),
  };
  Sheet_Pk1v1Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Pk1v1Rank_descriptor_,
      Sheet_Pk1v1Rank::default_instance_,
      Sheet_Pk1v1Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Pk1v1Rank));
  E_Pk1v1Reward_descriptor_ = file->message_type(2);
  static const int E_Pk1v1Reward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Reward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Reward, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Reward, m_boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Reward, m_typearg_),
  };
  E_Pk1v1Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Pk1v1Reward_descriptor_,
      E_Pk1v1Reward::default_instance_,
      E_Pk1v1Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Pk1v1Reward));
  Sheet_Pk1v1Reward_descriptor_ = file->message_type(3);
  static const int Sheet_Pk1v1Reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Reward, e_pk1v1reward_list_),
  };
  Sheet_Pk1v1Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Pk1v1Reward_descriptor_,
      Sheet_Pk1v1Reward::default_instance_,
      Sheet_Pk1v1Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Pk1v1Reward));
  E_Pk1v1Dailyreward_descriptor_ = file->message_type(4);
  static const int E_Pk1v1Dailyreward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Dailyreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Dailyreward, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Dailyreward, m_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Dailyreward, m_boxid_),
  };
  E_Pk1v1Dailyreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_Pk1v1Dailyreward_descriptor_,
      E_Pk1v1Dailyreward::default_instance_,
      E_Pk1v1Dailyreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Dailyreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_Pk1v1Dailyreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_Pk1v1Dailyreward));
  Sheet_Pk1v1Dailyreward_descriptor_ = file->message_type(5);
  static const int Sheet_Pk1v1Dailyreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Dailyreward, e_pk1v1dailyreward_list_),
  };
  Sheet_Pk1v1Dailyreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_Pk1v1Dailyreward_descriptor_,
      Sheet_Pk1v1Dailyreward::default_instance_,
      Sheet_Pk1v1Dailyreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Dailyreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_Pk1v1Dailyreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_Pk1v1Dailyreward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fPk1v1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Pk1v1Rank_descriptor_, &E_Pk1v1Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Pk1v1Rank_descriptor_, &Sheet_Pk1v1Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Pk1v1Reward_descriptor_, &E_Pk1v1Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Pk1v1Reward_descriptor_, &Sheet_Pk1v1Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_Pk1v1Dailyreward_descriptor_, &E_Pk1v1Dailyreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_Pk1v1Dailyreward_descriptor_, &Sheet_Pk1v1Dailyreward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fPk1v1_2eproto() {
  delete E_Pk1v1Rank::default_instance_;
  delete E_Pk1v1Rank_reflection_;
  delete Sheet_Pk1v1Rank::default_instance_;
  delete Sheet_Pk1v1Rank_reflection_;
  delete E_Pk1v1Reward::default_instance_;
  delete E_Pk1v1Reward_reflection_;
  delete Sheet_Pk1v1Reward::default_instance_;
  delete Sheet_Pk1v1Reward_reflection_;
  delete E_Pk1v1Dailyreward::default_instance_;
  delete E_Pk1v1Dailyreward_reflection_;
  delete Sheet_Pk1v1Dailyreward::default_instance_;
  delete Sheet_Pk1v1Dailyreward_reflection_;
}

void protobuf_AddDesc_E_5fPk1v1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rE_Pk1v1.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\347\002\n\013E_Pk1v1Rank\022\024\n\004m_id\030\001 \001(\005B\006"
    "\302\377\024\002id\022 \n\006m_mark\030\002 \001(\005B\020\302\377\024\014\346\256\265\344\275\215\346\240\207\350\257\206"
    "\022$\n\nm_scoreMin\030\003 \001(\005B\020\302\377\024\014\345\210\206\346\225\260\344\270\213\351\231\220\022$"
    "\n\nm_scoreMax\030\004 \001(\005B\020\302\377\024\014\345\210\206\346\225\260\344\270\212\351\231\220\022\'\n\r"
    "m_sucessScore\030\005 \001(\005B\020\302\377\024\014\350\203\234\345\210\251\345\212\240\345\210\206\022\'\n"
    "\rm_defeatScore\030\006 \001(\005B\020\302\377\024\014\345\244\261\350\264\245\346\211\243\345\210\206\022+"
    "\n\013m_sucessBox\030\007 \001(\005B\026\302\377\024\022\345\215\225\345\234\272\350\216\267\350\203\234\345\245\226"
    "\345\212\261\022+\n\013m_defeatBox\030\010 \001(\005B\026\302\377\024\022\345\215\225\345\234\272\345\244\261\350"
    "\264\245\345\245\226\345\212\261\022(\n\010m_tieBox\030\t \001(\005B\026\302\377\024\022\345\215\225\345\234\272\345\271"
    "\263\345\261\200\345\245\226\345\212\261\"H\n\017Sheet_Pk1v1Rank\0225\n\020E_Pk1v1"
    "Rank_List\030\001 \003(\0132\025.proto_ff.E_Pk1v1RankB\004"
    "\210\301\024@\"\215\001\n\rE_Pk1v1Reward\022\024\n\004m_id\030\001 \001(\005B\006\302\377"
    "\024\002id\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022!\n\007m_bo"
    "xid\030\003 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\345\206\205\345\256\271\022\'\n\tm_typeArg"
    "\030\004 \003(\005B\024\302\377\024\014\347\261\273\345\236\213\345\217\202\346\225\260\210\301\024\003\"N\n\021Sheet_Pk"
    "1v1Reward\0229\n\022E_Pk1v1Reward_List\030\001 \003(\0132\027."
    "proto_ff.E_Pk1v1RewardB\004\210\301\024 \"\226\001\n\022E_Pk1v1"
    "Dailyreward\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022$\n\006m_n"
    "ame\030\002 \001(\tB\024\302\377\024\014\345\245\226\345\212\261\345\220\215\347\247\260\220\301\024@\022!\n\007m_tim"
    "es\030\003 \001(\005B\020\302\377\024\014\345\217\202\344\270\216\346\254\241\346\225\260\022!\n\007m_boxid\030\004 "
    "\001(\005B\020\302\377\024\014\345\245\226\345\212\261\345\206\205\345\256\271\"]\n\026Sheet_Pk1v1Dail"
    "yreward\022C\n\027E_Pk1v1Dailyreward_List\030\001 \003(\013"
    "2\034.proto_ff.E_Pk1v1DailyrewardB\004\210\301\024\010", 956);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Pk1v1.proto", &protobuf_RegisterTypes);
  E_Pk1v1Rank::default_instance_ = new E_Pk1v1Rank();
  Sheet_Pk1v1Rank::default_instance_ = new Sheet_Pk1v1Rank();
  E_Pk1v1Reward::default_instance_ = new E_Pk1v1Reward();
  Sheet_Pk1v1Reward::default_instance_ = new Sheet_Pk1v1Reward();
  E_Pk1v1Dailyreward::default_instance_ = new E_Pk1v1Dailyreward();
  Sheet_Pk1v1Dailyreward::default_instance_ = new Sheet_Pk1v1Dailyreward();
  E_Pk1v1Rank::default_instance_->InitAsDefaultInstance();
  Sheet_Pk1v1Rank::default_instance_->InitAsDefaultInstance();
  E_Pk1v1Reward::default_instance_->InitAsDefaultInstance();
  Sheet_Pk1v1Reward::default_instance_->InitAsDefaultInstance();
  E_Pk1v1Dailyreward::default_instance_->InitAsDefaultInstance();
  Sheet_Pk1v1Dailyreward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fPk1v1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fPk1v1_2eproto {
  StaticDescriptorInitializer_E_5fPk1v1_2eproto() {
    protobuf_AddDesc_E_5fPk1v1_2eproto();
  }
} static_descriptor_initializer_E_5fPk1v1_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_Pk1v1Rank::kMIdFieldNumber;
const int E_Pk1v1Rank::kMMarkFieldNumber;
const int E_Pk1v1Rank::kMScoreMinFieldNumber;
const int E_Pk1v1Rank::kMScoreMaxFieldNumber;
const int E_Pk1v1Rank::kMSucessScoreFieldNumber;
const int E_Pk1v1Rank::kMDefeatScoreFieldNumber;
const int E_Pk1v1Rank::kMSucessBoxFieldNumber;
const int E_Pk1v1Rank::kMDefeatBoxFieldNumber;
const int E_Pk1v1Rank::kMTieBoxFieldNumber;
#endif  // !_MSC_VER

E_Pk1v1Rank::E_Pk1v1Rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Pk1v1Rank::InitAsDefaultInstance() {
}

E_Pk1v1Rank::E_Pk1v1Rank(const E_Pk1v1Rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Pk1v1Rank::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_mark_ = 0;
  m_scoremin_ = 0;
  m_scoremax_ = 0;
  m_sucessscore_ = 0;
  m_defeatscore_ = 0;
  m_sucessbox_ = 0;
  m_defeatbox_ = 0;
  m_tiebox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Pk1v1Rank::~E_Pk1v1Rank() {
  SharedDtor();
}

void E_Pk1v1Rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_Pk1v1Rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Pk1v1Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Pk1v1Rank_descriptor_;
}

const E_Pk1v1Rank& E_Pk1v1Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk1v1_2eproto();
  return *default_instance_;
}

E_Pk1v1Rank* E_Pk1v1Rank::default_instance_ = NULL;

E_Pk1v1Rank* E_Pk1v1Rank::New() const {
  return new E_Pk1v1Rank;
}

void E_Pk1v1Rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_mark_ = 0;
    m_scoremin_ = 0;
    m_scoremax_ = 0;
    m_sucessscore_ = 0;
    m_defeatscore_ = 0;
    m_sucessbox_ = 0;
    m_defeatbox_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_tiebox_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Pk1v1Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_mark;
        break;
      }

      // optional int32 m_mark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mark_)));
          set_has_m_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_scoreMin;
        break;
      }

      // optional int32 m_scoreMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scoreMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scoremin_)));
          set_has_m_scoremin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_scoreMax;
        break;
      }

      // optional int32 m_scoreMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scoreMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scoremax_)));
          set_has_m_scoremax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_sucessScore;
        break;
      }

      // optional int32 m_sucessScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sucessScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sucessscore_)));
          set_has_m_sucessscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_defeatScore;
        break;
      }

      // optional int32 m_defeatScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_defeatScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_defeatscore_)));
          set_has_m_defeatscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_sucessBox;
        break;
      }

      // optional int32 m_sucessBox = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sucessBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sucessbox_)));
          set_has_m_sucessbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_defeatBox;
        break;
      }

      // optional int32 m_defeatBox = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_defeatBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_defeatbox_)));
          set_has_m_defeatbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_tieBox;
        break;
      }

      // optional int32 m_tieBox = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tieBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tiebox_)));
          set_has_m_tiebox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Pk1v1Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_mark = 2;
  if (has_m_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_mark(), output);
  }

  // optional int32 m_scoreMin = 3;
  if (has_m_scoremin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_scoremin(), output);
  }

  // optional int32 m_scoreMax = 4;
  if (has_m_scoremax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_scoremax(), output);
  }

  // optional int32 m_sucessScore = 5;
  if (has_m_sucessscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_sucessscore(), output);
  }

  // optional int32 m_defeatScore = 6;
  if (has_m_defeatscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_defeatscore(), output);
  }

  // optional int32 m_sucessBox = 7;
  if (has_m_sucessbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_sucessbox(), output);
  }

  // optional int32 m_defeatBox = 8;
  if (has_m_defeatbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_defeatbox(), output);
  }

  // optional int32 m_tieBox = 9;
  if (has_m_tiebox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_tiebox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Pk1v1Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_mark = 2;
  if (has_m_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_mark(), target);
  }

  // optional int32 m_scoreMin = 3;
  if (has_m_scoremin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_scoremin(), target);
  }

  // optional int32 m_scoreMax = 4;
  if (has_m_scoremax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_scoremax(), target);
  }

  // optional int32 m_sucessScore = 5;
  if (has_m_sucessscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_sucessscore(), target);
  }

  // optional int32 m_defeatScore = 6;
  if (has_m_defeatscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_defeatscore(), target);
  }

  // optional int32 m_sucessBox = 7;
  if (has_m_sucessbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_sucessbox(), target);
  }

  // optional int32 m_defeatBox = 8;
  if (has_m_defeatbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_defeatbox(), target);
  }

  // optional int32 m_tieBox = 9;
  if (has_m_tiebox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_tiebox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Pk1v1Rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_mark = 2;
    if (has_m_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mark());
    }

    // optional int32 m_scoreMin = 3;
    if (has_m_scoremin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scoremin());
    }

    // optional int32 m_scoreMax = 4;
    if (has_m_scoremax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scoremax());
    }

    // optional int32 m_sucessScore = 5;
    if (has_m_sucessscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sucessscore());
    }

    // optional int32 m_defeatScore = 6;
    if (has_m_defeatscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_defeatscore());
    }

    // optional int32 m_sucessBox = 7;
    if (has_m_sucessbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sucessbox());
    }

    // optional int32 m_defeatBox = 8;
    if (has_m_defeatbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_defeatbox());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_tieBox = 9;
    if (has_m_tiebox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tiebox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Pk1v1Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Pk1v1Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Pk1v1Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Pk1v1Rank::MergeFrom(const E_Pk1v1Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_mark()) {
      set_m_mark(from.m_mark());
    }
    if (from.has_m_scoremin()) {
      set_m_scoremin(from.m_scoremin());
    }
    if (from.has_m_scoremax()) {
      set_m_scoremax(from.m_scoremax());
    }
    if (from.has_m_sucessscore()) {
      set_m_sucessscore(from.m_sucessscore());
    }
    if (from.has_m_defeatscore()) {
      set_m_defeatscore(from.m_defeatscore());
    }
    if (from.has_m_sucessbox()) {
      set_m_sucessbox(from.m_sucessbox());
    }
    if (from.has_m_defeatbox()) {
      set_m_defeatbox(from.m_defeatbox());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_tiebox()) {
      set_m_tiebox(from.m_tiebox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Pk1v1Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Pk1v1Rank::CopyFrom(const E_Pk1v1Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Pk1v1Rank::IsInitialized() const {

  return true;
}

void E_Pk1v1Rank::Swap(E_Pk1v1Rank* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_mark_, other->m_mark_);
    std::swap(m_scoremin_, other->m_scoremin_);
    std::swap(m_scoremax_, other->m_scoremax_);
    std::swap(m_sucessscore_, other->m_sucessscore_);
    std::swap(m_defeatscore_, other->m_defeatscore_);
    std::swap(m_sucessbox_, other->m_sucessbox_);
    std::swap(m_defeatbox_, other->m_defeatbox_);
    std::swap(m_tiebox_, other->m_tiebox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Pk1v1Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Pk1v1Rank_descriptor_;
  metadata.reflection = E_Pk1v1Rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Pk1v1Rank::kEPk1V1RankListFieldNumber;
#endif  // !_MSC_VER

Sheet_Pk1v1Rank::Sheet_Pk1v1Rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Pk1v1Rank::InitAsDefaultInstance() {
}

Sheet_Pk1v1Rank::Sheet_Pk1v1Rank(const Sheet_Pk1v1Rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Pk1v1Rank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Pk1v1Rank::~Sheet_Pk1v1Rank() {
  SharedDtor();
}

void Sheet_Pk1v1Rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Pk1v1Rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Pk1v1Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Pk1v1Rank_descriptor_;
}

const Sheet_Pk1v1Rank& Sheet_Pk1v1Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk1v1_2eproto();
  return *default_instance_;
}

Sheet_Pk1v1Rank* Sheet_Pk1v1Rank::default_instance_ = NULL;

Sheet_Pk1v1Rank* Sheet_Pk1v1Rank::New() const {
  return new Sheet_Pk1v1Rank;
}

void Sheet_Pk1v1Rank::Clear() {
  e_pk1v1rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Pk1v1Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Pk1v1Rank E_Pk1v1Rank_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Pk1v1Rank_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pk1v1rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Pk1v1Rank_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Pk1v1Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Pk1v1Rank E_Pk1v1Rank_List = 1;
  for (int i = 0; i < this->e_pk1v1rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pk1v1rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Pk1v1Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Pk1v1Rank E_Pk1v1Rank_List = 1;
  for (int i = 0; i < this->e_pk1v1rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pk1v1rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Pk1v1Rank::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Pk1v1Rank E_Pk1v1Rank_List = 1;
  total_size += 1 * this->e_pk1v1rank_list_size();
  for (int i = 0; i < this->e_pk1v1rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pk1v1rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Pk1v1Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Pk1v1Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Pk1v1Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Pk1v1Rank::MergeFrom(const Sheet_Pk1v1Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pk1v1rank_list_.MergeFrom(from.e_pk1v1rank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Pk1v1Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Pk1v1Rank::CopyFrom(const Sheet_Pk1v1Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Pk1v1Rank::IsInitialized() const {

  return true;
}

void Sheet_Pk1v1Rank::Swap(Sheet_Pk1v1Rank* other) {
  if (other != this) {
    e_pk1v1rank_list_.Swap(&other->e_pk1v1rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Pk1v1Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Pk1v1Rank_descriptor_;
  metadata.reflection = Sheet_Pk1v1Rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_Pk1v1Reward::kMIdFieldNumber;
const int E_Pk1v1Reward::kMTypeFieldNumber;
const int E_Pk1v1Reward::kMBoxidFieldNumber;
const int E_Pk1v1Reward::kMTypeArgFieldNumber;
#endif  // !_MSC_VER

E_Pk1v1Reward::E_Pk1v1Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Pk1v1Reward::InitAsDefaultInstance() {
}

E_Pk1v1Reward::E_Pk1v1Reward(const E_Pk1v1Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Pk1v1Reward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Pk1v1Reward::~E_Pk1v1Reward() {
  SharedDtor();
}

void E_Pk1v1Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_Pk1v1Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Pk1v1Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Pk1v1Reward_descriptor_;
}

const E_Pk1v1Reward& E_Pk1v1Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk1v1_2eproto();
  return *default_instance_;
}

E_Pk1v1Reward* E_Pk1v1Reward::default_instance_ = NULL;

E_Pk1v1Reward* E_Pk1v1Reward::New() const {
  return new E_Pk1v1Reward;
}

void E_Pk1v1Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_boxid_ = 0;
  }
  m_typearg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Pk1v1Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_typeArg;
        break;
      }

      // repeated int32 m_typeArg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_m_typearg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_typearg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_typeArg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Pk1v1Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_boxid = 3;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_boxid(), output);
  }

  // repeated int32 m_typeArg = 4;
  for (int i = 0; i < this->m_typearg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->m_typearg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Pk1v1Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_boxid = 3;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_boxid(), target);
  }

  // repeated int32 m_typeArg = 4;
  for (int i = 0; i < this->m_typearg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->m_typearg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Pk1v1Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_boxid = 3;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  // repeated int32 m_typeArg = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_typearg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_typearg(i));
    }
    total_size += 1 * this->m_typearg_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Pk1v1Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Pk1v1Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Pk1v1Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Pk1v1Reward::MergeFrom(const E_Pk1v1Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_typearg_.MergeFrom(from.m_typearg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Pk1v1Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Pk1v1Reward::CopyFrom(const E_Pk1v1Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Pk1v1Reward::IsInitialized() const {

  return true;
}

void E_Pk1v1Reward::Swap(E_Pk1v1Reward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_boxid_, other->m_boxid_);
    m_typearg_.Swap(&other->m_typearg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Pk1v1Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Pk1v1Reward_descriptor_;
  metadata.reflection = E_Pk1v1Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Pk1v1Reward::kEPk1V1RewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_Pk1v1Reward::Sheet_Pk1v1Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Pk1v1Reward::InitAsDefaultInstance() {
}

Sheet_Pk1v1Reward::Sheet_Pk1v1Reward(const Sheet_Pk1v1Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Pk1v1Reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Pk1v1Reward::~Sheet_Pk1v1Reward() {
  SharedDtor();
}

void Sheet_Pk1v1Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Pk1v1Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Pk1v1Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Pk1v1Reward_descriptor_;
}

const Sheet_Pk1v1Reward& Sheet_Pk1v1Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk1v1_2eproto();
  return *default_instance_;
}

Sheet_Pk1v1Reward* Sheet_Pk1v1Reward::default_instance_ = NULL;

Sheet_Pk1v1Reward* Sheet_Pk1v1Reward::New() const {
  return new Sheet_Pk1v1Reward;
}

void Sheet_Pk1v1Reward::Clear() {
  e_pk1v1reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Pk1v1Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Pk1v1Reward E_Pk1v1Reward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Pk1v1Reward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pk1v1reward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Pk1v1Reward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Pk1v1Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Pk1v1Reward E_Pk1v1Reward_List = 1;
  for (int i = 0; i < this->e_pk1v1reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pk1v1reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Pk1v1Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Pk1v1Reward E_Pk1v1Reward_List = 1;
  for (int i = 0; i < this->e_pk1v1reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pk1v1reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Pk1v1Reward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Pk1v1Reward E_Pk1v1Reward_List = 1;
  total_size += 1 * this->e_pk1v1reward_list_size();
  for (int i = 0; i < this->e_pk1v1reward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pk1v1reward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Pk1v1Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Pk1v1Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Pk1v1Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Pk1v1Reward::MergeFrom(const Sheet_Pk1v1Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pk1v1reward_list_.MergeFrom(from.e_pk1v1reward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Pk1v1Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Pk1v1Reward::CopyFrom(const Sheet_Pk1v1Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Pk1v1Reward::IsInitialized() const {

  return true;
}

void Sheet_Pk1v1Reward::Swap(Sheet_Pk1v1Reward* other) {
  if (other != this) {
    e_pk1v1reward_list_.Swap(&other->e_pk1v1reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Pk1v1Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Pk1v1Reward_descriptor_;
  metadata.reflection = Sheet_Pk1v1Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_Pk1v1Dailyreward::kMIdFieldNumber;
const int E_Pk1v1Dailyreward::kMNameFieldNumber;
const int E_Pk1v1Dailyreward::kMTimesFieldNumber;
const int E_Pk1v1Dailyreward::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_Pk1v1Dailyreward::E_Pk1v1Dailyreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_Pk1v1Dailyreward::InitAsDefaultInstance() {
}

E_Pk1v1Dailyreward::E_Pk1v1Dailyreward(const E_Pk1v1Dailyreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_Pk1v1Dailyreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_times_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_Pk1v1Dailyreward::~E_Pk1v1Dailyreward() {
  SharedDtor();
}

void E_Pk1v1Dailyreward::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_Pk1v1Dailyreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_Pk1v1Dailyreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_Pk1v1Dailyreward_descriptor_;
}

const E_Pk1v1Dailyreward& E_Pk1v1Dailyreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk1v1_2eproto();
  return *default_instance_;
}

E_Pk1v1Dailyreward* E_Pk1v1Dailyreward::default_instance_ = NULL;

E_Pk1v1Dailyreward* E_Pk1v1Dailyreward::New() const {
  return new E_Pk1v1Dailyreward;
}

void E_Pk1v1Dailyreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_times_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_Pk1v1Dailyreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_times;
        break;
      }

      // optional int32 m_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_times_)));
          set_has_m_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_Pk1v1Dailyreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_times = 3;
  if (has_m_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_times(), output);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_Pk1v1Dailyreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_times = 3;
  if (has_m_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_times(), target);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_Pk1v1Dailyreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_times = 3;
    if (has_m_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_times());
    }

    // optional int32 m_boxid = 4;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_Pk1v1Dailyreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_Pk1v1Dailyreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_Pk1v1Dailyreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_Pk1v1Dailyreward::MergeFrom(const E_Pk1v1Dailyreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_times()) {
      set_m_times(from.m_times());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_Pk1v1Dailyreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_Pk1v1Dailyreward::CopyFrom(const E_Pk1v1Dailyreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_Pk1v1Dailyreward::IsInitialized() const {

  return true;
}

void E_Pk1v1Dailyreward::Swap(E_Pk1v1Dailyreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_times_, other->m_times_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_Pk1v1Dailyreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_Pk1v1Dailyreward_descriptor_;
  metadata.reflection = E_Pk1v1Dailyreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_Pk1v1Dailyreward::kEPk1V1DailyrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_Pk1v1Dailyreward::Sheet_Pk1v1Dailyreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_Pk1v1Dailyreward::InitAsDefaultInstance() {
}

Sheet_Pk1v1Dailyreward::Sheet_Pk1v1Dailyreward(const Sheet_Pk1v1Dailyreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_Pk1v1Dailyreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_Pk1v1Dailyreward::~Sheet_Pk1v1Dailyreward() {
  SharedDtor();
}

void Sheet_Pk1v1Dailyreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_Pk1v1Dailyreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_Pk1v1Dailyreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_Pk1v1Dailyreward_descriptor_;
}

const Sheet_Pk1v1Dailyreward& Sheet_Pk1v1Dailyreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPk1v1_2eproto();
  return *default_instance_;
}

Sheet_Pk1v1Dailyreward* Sheet_Pk1v1Dailyreward::default_instance_ = NULL;

Sheet_Pk1v1Dailyreward* Sheet_Pk1v1Dailyreward::New() const {
  return new Sheet_Pk1v1Dailyreward;
}

void Sheet_Pk1v1Dailyreward::Clear() {
  e_pk1v1dailyreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_Pk1v1Dailyreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_Pk1v1Dailyreward E_Pk1v1Dailyreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_Pk1v1Dailyreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pk1v1dailyreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_Pk1v1Dailyreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_Pk1v1Dailyreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_Pk1v1Dailyreward E_Pk1v1Dailyreward_List = 1;
  for (int i = 0; i < this->e_pk1v1dailyreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pk1v1dailyreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_Pk1v1Dailyreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_Pk1v1Dailyreward E_Pk1v1Dailyreward_List = 1;
  for (int i = 0; i < this->e_pk1v1dailyreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pk1v1dailyreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_Pk1v1Dailyreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_Pk1v1Dailyreward E_Pk1v1Dailyreward_List = 1;
  total_size += 1 * this->e_pk1v1dailyreward_list_size();
  for (int i = 0; i < this->e_pk1v1dailyreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pk1v1dailyreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_Pk1v1Dailyreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_Pk1v1Dailyreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_Pk1v1Dailyreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_Pk1v1Dailyreward::MergeFrom(const Sheet_Pk1v1Dailyreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pk1v1dailyreward_list_.MergeFrom(from.e_pk1v1dailyreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_Pk1v1Dailyreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_Pk1v1Dailyreward::CopyFrom(const Sheet_Pk1v1Dailyreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_Pk1v1Dailyreward::IsInitialized() const {

  return true;
}

void Sheet_Pk1v1Dailyreward::Swap(Sheet_Pk1v1Dailyreward* other) {
  if (other != this) {
    e_pk1v1dailyreward_list_.Swap(&other->e_pk1v1dailyreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_Pk1v1Dailyreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_Pk1v1Dailyreward_descriptor_;
  metadata.reflection = Sheet_Pk1v1Dailyreward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
