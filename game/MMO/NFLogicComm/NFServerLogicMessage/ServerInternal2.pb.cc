// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternal2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerInternal2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyGateLeaveGame2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGateLeaveGame2_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCenterDisConnect2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCenterDisConnect2_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyServerBusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyServerBusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WroldToProxyChangeServerBusId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WroldToProxyChangeServerBusId_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToOtherServerDisconnectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToOtherServerDisconnectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameReq2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicLeaveGameReq2_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameRsp2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicLeaveGameRsp2_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* STLLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STLLoginRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerInternal2_2eproto() {
  protobuf_AddDesc_ServerInternal2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerInternal2.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyGateLeaveGame2_descriptor_ = file->message_type(0);
  static const int NotifyGateLeaveGame2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, leave_flag_),
  };
  NotifyGateLeaveGame2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGateLeaveGame2_descriptor_,
      NotifyGateLeaveGame2::default_instance_,
      NotifyGateLeaveGame2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGateLeaveGame2));
  NotifyCenterDisConnect2_descriptor_ = file->message_type(1);
  static const int NotifyCenterDisConnect2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, errflag_),
  };
  NotifyCenterDisConnect2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCenterDisConnect2_descriptor_,
      NotifyCenterDisConnect2::default_instance_,
      NotifyCenterDisConnect2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCenterDisConnect2));
  ProxyServerBusInfo_descriptor_ = file->message_type(2);
  static const int ProxyServerBusInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, bus_id_),
  };
  ProxyServerBusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyServerBusInfo_descriptor_,
      ProxyServerBusInfo::default_instance_,
      ProxyServerBusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyServerBusInfo));
  WroldToProxyChangeServerBusId_descriptor_ = file->message_type(3);
  static const int WroldToProxyChangeServerBusId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, server_info_),
  };
  WroldToProxyChangeServerBusId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WroldToProxyChangeServerBusId_descriptor_,
      WroldToProxyChangeServerBusId::default_instance_,
      WroldToProxyChangeServerBusId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WroldToProxyChangeServerBusId));
  WorldToOtherServerDisconnectNotify_descriptor_ = file->message_type(4);
  static const int WorldToOtherServerDisconnectNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, reason_),
  };
  WorldToOtherServerDisconnectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToOtherServerDisconnectNotify_descriptor_,
      WorldToOtherServerDisconnectNotify::default_instance_,
      WorldToOtherServerDisconnectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToOtherServerDisconnectNotify));
  NotifyLogicLeaveGameReq2_descriptor_ = file->message_type(5);
  static const int NotifyLogicLeaveGameReq2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, type_),
  };
  NotifyLogicLeaveGameReq2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicLeaveGameReq2_descriptor_,
      NotifyLogicLeaveGameReq2::default_instance_,
      NotifyLogicLeaveGameReq2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicLeaveGameReq2));
  NotifyLogicLeaveGameRsp2_descriptor_ = file->message_type(6);
  static const int NotifyLogicLeaveGameRsp2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, logout_type_),
  };
  NotifyLogicLeaveGameRsp2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicLeaveGameRsp2_descriptor_,
      NotifyLogicLeaveGameRsp2::default_instance_,
      NotifyLogicLeaveGameRsp2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicLeaveGameRsp2));
  LTSLoginReq_descriptor_ = file->message_type(7);
  static const int LTSLoginReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, base_),
  };
  LTSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTSLoginReq_descriptor_,
      LTSLoginReq::default_instance_,
      LTSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTSLoginReq));
  STLLoginRsp_descriptor_ = file->message_type(8);
  static const int STLLoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STLLoginRsp, ret_),
  };
  STLLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STLLoginRsp_descriptor_,
      STLLoginRsp::default_instance_,
      STLLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STLLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STLLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STLLoginRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerInternal2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGateLeaveGame2_descriptor_, &NotifyGateLeaveGame2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCenterDisConnect2_descriptor_, &NotifyCenterDisConnect2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyServerBusInfo_descriptor_, &ProxyServerBusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WroldToProxyChangeServerBusId_descriptor_, &WroldToProxyChangeServerBusId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToOtherServerDisconnectNotify_descriptor_, &WorldToOtherServerDisconnectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicLeaveGameReq2_descriptor_, &NotifyLogicLeaveGameReq2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicLeaveGameRsp2_descriptor_, &NotifyLogicLeaveGameRsp2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTSLoginReq_descriptor_, &LTSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STLLoginRsp_descriptor_, &STLLoginRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerInternal2_2eproto() {
  delete NotifyGateLeaveGame2::default_instance_;
  delete NotifyGateLeaveGame2_reflection_;
  delete NotifyCenterDisConnect2::default_instance_;
  delete NotifyCenterDisConnect2_reflection_;
  delete ProxyServerBusInfo::default_instance_;
  delete ProxyServerBusInfo_reflection_;
  delete WroldToProxyChangeServerBusId::default_instance_;
  delete WroldToProxyChangeServerBusId_reflection_;
  delete WorldToOtherServerDisconnectNotify::default_instance_;
  delete WorldToOtherServerDisconnectNotify_reflection_;
  delete NotifyLogicLeaveGameReq2::default_instance_;
  delete NotifyLogicLeaveGameReq2_reflection_;
  delete NotifyLogicLeaveGameRsp2::default_instance_;
  delete NotifyLogicLeaveGameRsp2_reflection_;
  delete LTSLoginReq::default_instance_;
  delete LTSLoginReq_reflection_;
  delete STLLoginRsp::default_instance_;
  delete STLLoginRsp_reflection_;
}

void protobuf_AddDesc_ServerInternal2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_DBProxy_2eproto();
  ::proto_ff::protobuf_AddDesc_DBProxy2_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ServerInternal2.proto\022\010proto_ff\032\rDBPro"
    "xy.proto\032\016DBProxy2.proto\032\tCom.proto\032\017Com"
    "Define.proto\"S\n\024NotifyGateLeaveGame2\022\020\n\010"
    "clientid\030\001 \001(\004\022)\n\nleave_flag\030\003 \001(\0162\025.pro"
    "to_ff.LOGOUT_TYPE\"I\n\027NotifyCenterDisConn"
    "ect2\022\020\n\010clientId\030\001 \001(\004\022\013\n\003cid\030\002 \001(\004\022\017\n\007e"
    "rrflag\030\003 \001(\005\"9\n\022ProxyServerBusInfo\022\023\n\013se"
    "rver_type\030\001 \001(\r\022\016\n\006bus_id\030\002 \001(\r\"R\n\035Wrold"
    "ToProxyChangeServerBusId\0221\n\013server_info\030"
    "\001 \003(\0132\034.proto_ff.ProxyServerBusInfo\"D\n\"W"
    "orldToOtherServerDisconnectNotify\022\016\n\006rol"
    "eId\030\001 \001(\004\022\016\n\006reason\030\002 \001(\r\"Y\n\030NotifyLogic"
    "LeaveGameReq2\022\013\n\003cid\030\001 \002(\004\022\013\n\003uid\030\002 \002(\004\022"
    "#\n\004type\030\003 \001(\0162\025.proto_ff.LOGOUT_TYPE\"I\n\030"
    "NotifyLogicLeaveGameRsp2\022\013\n\003cid\030\001 \002(\004\022\013\n"
    "\003uid\030\002 \002(\004\022\023\n\013logout_type\030\003 \001(\005\"\\\n\013LTSLo"
    "ginReq\022\013\n\003cid\030\001 \001(\004\022\013\n\003zid\030\002 \001(\r\022\013\n\003uid\030"
    "\003 \001(\r\022&\n\004base\030\004 \001(\0132\030.proto_ff.RoleDBBas"
    "eData\"\032\n\013STLLoginRsp\022\013\n\003ret\030\001 \001(\005", 753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerInternal2.proto", &protobuf_RegisterTypes);
  NotifyGateLeaveGame2::default_instance_ = new NotifyGateLeaveGame2();
  NotifyCenterDisConnect2::default_instance_ = new NotifyCenterDisConnect2();
  ProxyServerBusInfo::default_instance_ = new ProxyServerBusInfo();
  WroldToProxyChangeServerBusId::default_instance_ = new WroldToProxyChangeServerBusId();
  WorldToOtherServerDisconnectNotify::default_instance_ = new WorldToOtherServerDisconnectNotify();
  NotifyLogicLeaveGameReq2::default_instance_ = new NotifyLogicLeaveGameReq2();
  NotifyLogicLeaveGameRsp2::default_instance_ = new NotifyLogicLeaveGameRsp2();
  LTSLoginReq::default_instance_ = new LTSLoginReq();
  STLLoginRsp::default_instance_ = new STLLoginRsp();
  NotifyGateLeaveGame2::default_instance_->InitAsDefaultInstance();
  NotifyCenterDisConnect2::default_instance_->InitAsDefaultInstance();
  ProxyServerBusInfo::default_instance_->InitAsDefaultInstance();
  WroldToProxyChangeServerBusId::default_instance_->InitAsDefaultInstance();
  WorldToOtherServerDisconnectNotify::default_instance_->InitAsDefaultInstance();
  NotifyLogicLeaveGameReq2::default_instance_->InitAsDefaultInstance();
  NotifyLogicLeaveGameRsp2::default_instance_->InitAsDefaultInstance();
  LTSLoginReq::default_instance_->InitAsDefaultInstance();
  STLLoginRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerInternal2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerInternal2_2eproto {
  StaticDescriptorInitializer_ServerInternal2_2eproto() {
    protobuf_AddDesc_ServerInternal2_2eproto();
  }
} static_descriptor_initializer_ServerInternal2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyGateLeaveGame2::kClientidFieldNumber;
const int NotifyGateLeaveGame2::kLeaveFlagFieldNumber;
#endif  // !_MSC_VER

NotifyGateLeaveGame2::NotifyGateLeaveGame2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGateLeaveGame2::InitAsDefaultInstance() {
}

NotifyGateLeaveGame2::NotifyGateLeaveGame2(const NotifyGateLeaveGame2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGateLeaveGame2::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  leave_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGateLeaveGame2::~NotifyGateLeaveGame2() {
  SharedDtor();
}

void NotifyGateLeaveGame2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGateLeaveGame2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGateLeaveGame2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGateLeaveGame2_descriptor_;
}

const NotifyGateLeaveGame2& NotifyGateLeaveGame2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyGateLeaveGame2* NotifyGateLeaveGame2::default_instance_ = NULL;

NotifyGateLeaveGame2* NotifyGateLeaveGame2::New() const {
  return new NotifyGateLeaveGame2;
}

void NotifyGateLeaveGame2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = GOOGLE_ULONGLONG(0);
    leave_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGateLeaveGame2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leave_flag;
        break;
      }

      // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::LOGOUT_TYPE_IsValid(value)) {
            set_leave_flag(static_cast< ::proto_ff::LOGOUT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGateLeaveGame2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clientid(), output);
  }

  // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
  if (has_leave_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->leave_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGateLeaveGame2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clientid = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clientid(), target);
  }

  // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
  if (has_leave_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->leave_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGateLeaveGame2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
    if (has_leave_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leave_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGateLeaveGame2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGateLeaveGame2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGateLeaveGame2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGateLeaveGame2::MergeFrom(const NotifyGateLeaveGame2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_leave_flag()) {
      set_leave_flag(from.leave_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGateLeaveGame2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGateLeaveGame2::CopyFrom(const NotifyGateLeaveGame2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGateLeaveGame2::IsInitialized() const {

  return true;
}

void NotifyGateLeaveGame2::Swap(NotifyGateLeaveGame2* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(leave_flag_, other->leave_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGateLeaveGame2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGateLeaveGame2_descriptor_;
  metadata.reflection = NotifyGateLeaveGame2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCenterDisConnect2::kClientIdFieldNumber;
const int NotifyCenterDisConnect2::kCidFieldNumber;
const int NotifyCenterDisConnect2::kErrflagFieldNumber;
#endif  // !_MSC_VER

NotifyCenterDisConnect2::NotifyCenterDisConnect2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCenterDisConnect2::InitAsDefaultInstance() {
}

NotifyCenterDisConnect2::NotifyCenterDisConnect2(const NotifyCenterDisConnect2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCenterDisConnect2::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  errflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCenterDisConnect2::~NotifyCenterDisConnect2() {
  SharedDtor();
}

void NotifyCenterDisConnect2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCenterDisConnect2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCenterDisConnect2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCenterDisConnect2_descriptor_;
}

const NotifyCenterDisConnect2& NotifyCenterDisConnect2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyCenterDisConnect2* NotifyCenterDisConnect2::default_instance_ = NULL;

NotifyCenterDisConnect2* NotifyCenterDisConnect2::New() const {
  return new NotifyCenterDisConnect2;
}

void NotifyCenterDisConnect2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    errflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCenterDisConnect2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errflag;
        break;
      }

      // optional int32 errflag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errflag_)));
          set_has_errflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCenterDisConnect2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clientid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 errflag = 3;
  if (has_errflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCenterDisConnect2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clientid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 errflag = 3;
  if (has_errflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCenterDisConnect2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 errflag = 3;
    if (has_errflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCenterDisConnect2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCenterDisConnect2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCenterDisConnect2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCenterDisConnect2::MergeFrom(const NotifyCenterDisConnect2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_errflag()) {
      set_errflag(from.errflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCenterDisConnect2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCenterDisConnect2::CopyFrom(const NotifyCenterDisConnect2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCenterDisConnect2::IsInitialized() const {

  return true;
}

void NotifyCenterDisConnect2::Swap(NotifyCenterDisConnect2* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(cid_, other->cid_);
    std::swap(errflag_, other->errflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCenterDisConnect2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCenterDisConnect2_descriptor_;
  metadata.reflection = NotifyCenterDisConnect2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyServerBusInfo::kServerTypeFieldNumber;
const int ProxyServerBusInfo::kBusIdFieldNumber;
#endif  // !_MSC_VER

ProxyServerBusInfo::ProxyServerBusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyServerBusInfo::InitAsDefaultInstance() {
}

ProxyServerBusInfo::ProxyServerBusInfo(const ProxyServerBusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyServerBusInfo::SharedCtor() {
  _cached_size_ = 0;
  server_type_ = 0u;
  bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyServerBusInfo::~ProxyServerBusInfo() {
  SharedDtor();
}

void ProxyServerBusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProxyServerBusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyServerBusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyServerBusInfo_descriptor_;
}

const ProxyServerBusInfo& ProxyServerBusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

ProxyServerBusInfo* ProxyServerBusInfo::default_instance_ = NULL;

ProxyServerBusInfo* ProxyServerBusInfo::New() const {
  return new ProxyServerBusInfo;
}

void ProxyServerBusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_type_ = 0u;
    bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyServerBusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bus_id;
        break;
      }

      // optional uint32 bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyServerBusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyServerBusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyServerBusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_type = 1;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint32 bus_id = 2;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyServerBusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyServerBusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyServerBusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyServerBusInfo::MergeFrom(const ProxyServerBusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyServerBusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyServerBusInfo::CopyFrom(const ProxyServerBusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyServerBusInfo::IsInitialized() const {

  return true;
}

void ProxyServerBusInfo::Swap(ProxyServerBusInfo* other) {
  if (other != this) {
    std::swap(server_type_, other->server_type_);
    std::swap(bus_id_, other->bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyServerBusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyServerBusInfo_descriptor_;
  metadata.reflection = ProxyServerBusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WroldToProxyChangeServerBusId::kServerInfoFieldNumber;
#endif  // !_MSC_VER

WroldToProxyChangeServerBusId::WroldToProxyChangeServerBusId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WroldToProxyChangeServerBusId::InitAsDefaultInstance() {
}

WroldToProxyChangeServerBusId::WroldToProxyChangeServerBusId(const WroldToProxyChangeServerBusId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WroldToProxyChangeServerBusId::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WroldToProxyChangeServerBusId::~WroldToProxyChangeServerBusId() {
  SharedDtor();
}

void WroldToProxyChangeServerBusId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WroldToProxyChangeServerBusId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WroldToProxyChangeServerBusId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WroldToProxyChangeServerBusId_descriptor_;
}

const WroldToProxyChangeServerBusId& WroldToProxyChangeServerBusId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WroldToProxyChangeServerBusId* WroldToProxyChangeServerBusId::default_instance_ = NULL;

WroldToProxyChangeServerBusId* WroldToProxyChangeServerBusId::New() const {
  return new WroldToProxyChangeServerBusId;
}

void WroldToProxyChangeServerBusId::Clear() {
  server_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WroldToProxyChangeServerBusId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WroldToProxyChangeServerBusId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  for (int i = 0; i < this->server_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WroldToProxyChangeServerBusId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  for (int i = 0; i < this->server_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WroldToProxyChangeServerBusId::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  total_size += 1 * this->server_info_size();
  for (int i = 0; i < this->server_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WroldToProxyChangeServerBusId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WroldToProxyChangeServerBusId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WroldToProxyChangeServerBusId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WroldToProxyChangeServerBusId::MergeFrom(const WroldToProxyChangeServerBusId& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_info_.MergeFrom(from.server_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WroldToProxyChangeServerBusId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WroldToProxyChangeServerBusId::CopyFrom(const WroldToProxyChangeServerBusId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WroldToProxyChangeServerBusId::IsInitialized() const {

  return true;
}

void WroldToProxyChangeServerBusId::Swap(WroldToProxyChangeServerBusId* other) {
  if (other != this) {
    server_info_.Swap(&other->server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WroldToProxyChangeServerBusId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WroldToProxyChangeServerBusId_descriptor_;
  metadata.reflection = WroldToProxyChangeServerBusId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToOtherServerDisconnectNotify::kRoleIdFieldNumber;
const int WorldToOtherServerDisconnectNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

WorldToOtherServerDisconnectNotify::WorldToOtherServerDisconnectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToOtherServerDisconnectNotify::InitAsDefaultInstance() {
}

WorldToOtherServerDisconnectNotify::WorldToOtherServerDisconnectNotify(const WorldToOtherServerDisconnectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToOtherServerDisconnectNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToOtherServerDisconnectNotify::~WorldToOtherServerDisconnectNotify() {
  SharedDtor();
}

void WorldToOtherServerDisconnectNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldToOtherServerDisconnectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToOtherServerDisconnectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToOtherServerDisconnectNotify_descriptor_;
}

const WorldToOtherServerDisconnectNotify& WorldToOtherServerDisconnectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToOtherServerDisconnectNotify* WorldToOtherServerDisconnectNotify::default_instance_ = NULL;

WorldToOtherServerDisconnectNotify* WorldToOtherServerDisconnectNotify::New() const {
  return new WorldToOtherServerDisconnectNotify;
}

void WorldToOtherServerDisconnectNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToOtherServerDisconnectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToOtherServerDisconnectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToOtherServerDisconnectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToOtherServerDisconnectNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToOtherServerDisconnectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToOtherServerDisconnectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToOtherServerDisconnectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToOtherServerDisconnectNotify::MergeFrom(const WorldToOtherServerDisconnectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToOtherServerDisconnectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToOtherServerDisconnectNotify::CopyFrom(const WorldToOtherServerDisconnectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToOtherServerDisconnectNotify::IsInitialized() const {

  return true;
}

void WorldToOtherServerDisconnectNotify::Swap(WorldToOtherServerDisconnectNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToOtherServerDisconnectNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToOtherServerDisconnectNotify_descriptor_;
  metadata.reflection = WorldToOtherServerDisconnectNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicLeaveGameReq2::kCidFieldNumber;
const int NotifyLogicLeaveGameReq2::kUidFieldNumber;
const int NotifyLogicLeaveGameReq2::kTypeFieldNumber;
#endif  // !_MSC_VER

NotifyLogicLeaveGameReq2::NotifyLogicLeaveGameReq2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicLeaveGameReq2::InitAsDefaultInstance() {
}

NotifyLogicLeaveGameReq2::NotifyLogicLeaveGameReq2(const NotifyLogicLeaveGameReq2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicLeaveGameReq2::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicLeaveGameReq2::~NotifyLogicLeaveGameReq2() {
  SharedDtor();
}

void NotifyLogicLeaveGameReq2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicLeaveGameReq2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameReq2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicLeaveGameReq2_descriptor_;
}

const NotifyLogicLeaveGameReq2& NotifyLogicLeaveGameReq2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyLogicLeaveGameReq2* NotifyLogicLeaveGameReq2::default_instance_ = NULL;

NotifyLogicLeaveGameReq2* NotifyLogicLeaveGameReq2::New() const {
  return new NotifyLogicLeaveGameReq2;
}

void NotifyLogicLeaveGameReq2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicLeaveGameReq2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .proto_ff.LOGOUT_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::LOGOUT_TYPE_IsValid(value)) {
            set_type(static_cast< ::proto_ff::LOGOUT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicLeaveGameReq2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional .proto_ff.LOGOUT_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicLeaveGameReq2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional .proto_ff.LOGOUT_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicLeaveGameReq2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .proto_ff.LOGOUT_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicLeaveGameReq2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicLeaveGameReq2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicLeaveGameReq2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicLeaveGameReq2::MergeFrom(const NotifyLogicLeaveGameReq2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicLeaveGameReq2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicLeaveGameReq2::CopyFrom(const NotifyLogicLeaveGameReq2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicLeaveGameReq2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyLogicLeaveGameReq2::Swap(NotifyLogicLeaveGameReq2* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicLeaveGameReq2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicLeaveGameReq2_descriptor_;
  metadata.reflection = NotifyLogicLeaveGameReq2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicLeaveGameRsp2::kCidFieldNumber;
const int NotifyLogicLeaveGameRsp2::kUidFieldNumber;
const int NotifyLogicLeaveGameRsp2::kLogoutTypeFieldNumber;
#endif  // !_MSC_VER

NotifyLogicLeaveGameRsp2::NotifyLogicLeaveGameRsp2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicLeaveGameRsp2::InitAsDefaultInstance() {
}

NotifyLogicLeaveGameRsp2::NotifyLogicLeaveGameRsp2(const NotifyLogicLeaveGameRsp2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicLeaveGameRsp2::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  logout_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicLeaveGameRsp2::~NotifyLogicLeaveGameRsp2() {
  SharedDtor();
}

void NotifyLogicLeaveGameRsp2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicLeaveGameRsp2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameRsp2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicLeaveGameRsp2_descriptor_;
}

const NotifyLogicLeaveGameRsp2& NotifyLogicLeaveGameRsp2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyLogicLeaveGameRsp2* NotifyLogicLeaveGameRsp2::default_instance_ = NULL;

NotifyLogicLeaveGameRsp2* NotifyLogicLeaveGameRsp2::New() const {
  return new NotifyLogicLeaveGameRsp2;
}

void NotifyLogicLeaveGameRsp2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = GOOGLE_ULONGLONG(0);
    logout_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicLeaveGameRsp2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logout_type;
        break;
      }

      // optional int32 logout_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logout_type_)));
          set_has_logout_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicLeaveGameRsp2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional int32 logout_type = 3;
  if (has_logout_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logout_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicLeaveGameRsp2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional int32 logout_type = 3;
  if (has_logout_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logout_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicLeaveGameRsp2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional int32 logout_type = 3;
    if (has_logout_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logout_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicLeaveGameRsp2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicLeaveGameRsp2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicLeaveGameRsp2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicLeaveGameRsp2::MergeFrom(const NotifyLogicLeaveGameRsp2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_logout_type()) {
      set_logout_type(from.logout_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicLeaveGameRsp2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicLeaveGameRsp2::CopyFrom(const NotifyLogicLeaveGameRsp2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicLeaveGameRsp2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyLogicLeaveGameRsp2::Swap(NotifyLogicLeaveGameRsp2* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(logout_type_, other->logout_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicLeaveGameRsp2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicLeaveGameRsp2_descriptor_;
  metadata.reflection = NotifyLogicLeaveGameRsp2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTSLoginReq::kCidFieldNumber;
const int LTSLoginReq::kZidFieldNumber;
const int LTSLoginReq::kUidFieldNumber;
const int LTSLoginReq::kBaseFieldNumber;
#endif  // !_MSC_VER

LTSLoginReq::LTSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTSLoginReq::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
}

LTSLoginReq::LTSLoginReq(const LTSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  uid_ = 0u;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTSLoginReq::~LTSLoginReq() {
  SharedDtor();
}

void LTSLoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void LTSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTSLoginReq_descriptor_;
}

const LTSLoginReq& LTSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

LTSLoginReq* LTSLoginReq::default_instance_ = NULL;

LTSLoginReq* LTSLoginReq::New() const {
  return new LTSLoginReq;
}

void LTSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    uid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTSLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBBaseData base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTSLoginReq::MergeFrom(const LTSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTSLoginReq::CopyFrom(const LTSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTSLoginReq::IsInitialized() const {

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void LTSLoginReq::Swap(LTSLoginReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(uid_, other->uid_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTSLoginReq_descriptor_;
  metadata.reflection = LTSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STLLoginRsp::kRetFieldNumber;
#endif  // !_MSC_VER

STLLoginRsp::STLLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STLLoginRsp::InitAsDefaultInstance() {
}

STLLoginRsp::STLLoginRsp(const STLLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STLLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STLLoginRsp::~STLLoginRsp() {
  SharedDtor();
}

void STLLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STLLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STLLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STLLoginRsp_descriptor_;
}

const STLLoginRsp& STLLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

STLLoginRsp* STLLoginRsp::default_instance_ = NULL;

STLLoginRsp* STLLoginRsp::New() const {
  return new STLLoginRsp;
}

void STLLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STLLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STLLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STLLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STLLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STLLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STLLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STLLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STLLoginRsp::MergeFrom(const STLLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STLLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STLLoginRsp::CopyFrom(const STLLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STLLoginRsp::IsInitialized() const {

  return true;
}

void STLLoginRsp::Swap(STLLoginRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STLLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STLLoginRsp_descriptor_;
  metadata.reflection = STLLoginRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
