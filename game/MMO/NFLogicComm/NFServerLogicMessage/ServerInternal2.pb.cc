// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternal2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerInternal2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyGateLeaveGame2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGateLeaveGame2_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCenterDisConnect2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCenterDisConnect2_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyServerBusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyServerBusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WroldToProxyChangeServerBusId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WroldToProxyChangeServerBusId_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToOtherServerDisconnectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToOtherServerDisconnectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameReq2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicLeaveGameReq2_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameRsp2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicLeaveGameRsp2_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTSLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTSLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* STLLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STLLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterMapInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterMapInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReigsterMapInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReigsterMapInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientEnterGameInternalRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientEnterGameInternalRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterSceneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterSceneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPlayerEnterServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPlayerEnterServer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerInternal2_2eproto() {
  protobuf_AddDesc_ServerInternal2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerInternal2.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyGateLeaveGame2_descriptor_ = file->message_type(0);
  static const int NotifyGateLeaveGame2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, leave_flag_),
  };
  NotifyGateLeaveGame2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGateLeaveGame2_descriptor_,
      NotifyGateLeaveGame2::default_instance_,
      NotifyGateLeaveGame2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGateLeaveGame2));
  NotifyCenterDisConnect2_descriptor_ = file->message_type(1);
  static const int NotifyCenterDisConnect2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, errflag_),
  };
  NotifyCenterDisConnect2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCenterDisConnect2_descriptor_,
      NotifyCenterDisConnect2::default_instance_,
      NotifyCenterDisConnect2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCenterDisConnect2));
  ProxyServerBusInfo_descriptor_ = file->message_type(2);
  static const int ProxyServerBusInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, bus_id_),
  };
  ProxyServerBusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyServerBusInfo_descriptor_,
      ProxyServerBusInfo::default_instance_,
      ProxyServerBusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyServerBusInfo));
  WroldToProxyChangeServerBusId_descriptor_ = file->message_type(3);
  static const int WroldToProxyChangeServerBusId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, server_info_),
  };
  WroldToProxyChangeServerBusId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WroldToProxyChangeServerBusId_descriptor_,
      WroldToProxyChangeServerBusId::default_instance_,
      WroldToProxyChangeServerBusId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WroldToProxyChangeServerBusId));
  WorldToOtherServerDisconnectNotify_descriptor_ = file->message_type(4);
  static const int WorldToOtherServerDisconnectNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, reason_),
  };
  WorldToOtherServerDisconnectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToOtherServerDisconnectNotify_descriptor_,
      WorldToOtherServerDisconnectNotify::default_instance_,
      WorldToOtherServerDisconnectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToOtherServerDisconnectNotify));
  NotifyLogicLeaveGameReq2_descriptor_ = file->message_type(5);
  static const int NotifyLogicLeaveGameReq2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, type_),
  };
  NotifyLogicLeaveGameReq2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicLeaveGameReq2_descriptor_,
      NotifyLogicLeaveGameReq2::default_instance_,
      NotifyLogicLeaveGameReq2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameReq2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicLeaveGameReq2));
  NotifyLogicLeaveGameRsp2_descriptor_ = file->message_type(6);
  static const int NotifyLogicLeaveGameRsp2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, logout_type_),
  };
  NotifyLogicLeaveGameRsp2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicLeaveGameRsp2_descriptor_,
      NotifyLogicLeaveGameRsp2::default_instance_,
      NotifyLogicLeaveGameRsp2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicLeaveGameRsp2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicLeaveGameRsp2));
  LTSLoginReq_descriptor_ = file->message_type(7);
  static const int LTSLoginReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, logic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, game_id_),
  };
  LTSLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTSLoginReq_descriptor_,
      LTSLoginReq::default_instance_,
      LTSLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTSLoginReq));
  STLLoginRsp_descriptor_ = file->message_type(8);
  static const int STLLoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STLLoginRsp, ret_),
  };
  STLLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STLLoginRsp_descriptor_,
      STLLoginRsp::default_instance_,
      STLLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STLLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STLLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STLLoginRsp));
  RegisterMapInfoReq_descriptor_ = file->message_type(9);
  static const int RegisterMapInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMapInfoReq, bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMapInfoReq, map_id_),
  };
  RegisterMapInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterMapInfoReq_descriptor_,
      RegisterMapInfoReq::default_instance_,
      RegisterMapInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMapInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterMapInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterMapInfoReq));
  ReigsterMapInfoRsp_descriptor_ = file->message_type(10);
  static const int ReigsterMapInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReigsterMapInfoRsp, ret_code_),
  };
  ReigsterMapInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReigsterMapInfoRsp_descriptor_,
      ReigsterMapInfoRsp::default_instance_,
      ReigsterMapInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReigsterMapInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReigsterMapInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReigsterMapInfoRsp));
  ClientEnterGameInternalRsp_descriptor_ = file->message_type(11);
  static const int ClientEnterGameInternalRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameInternalRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameInternalRsp, logic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameInternalRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameInternalRsp, sns_id_),
  };
  ClientEnterGameInternalRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientEnterGameInternalRsp_descriptor_,
      ClientEnterGameInternalRsp::default_instance_,
      ClientEnterGameInternalRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameInternalRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameInternalRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientEnterGameInternalRsp));
  EnterSceneReq_descriptor_ = file->message_type(12);
  static const int EnterSceneReq_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, dst_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, dst_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, dst_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, src_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, src_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, src_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, trans_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, logic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, sns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, world_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, trans_param_),
  };
  EnterSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterSceneReq_descriptor_,
      EnterSceneReq::default_instance_,
      EnterSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterSceneReq));
  EnterSceneRsp_descriptor_ = file->message_type(13);
  static const int EnterSceneRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneRsp, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneRsp, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneRsp, pos_),
  };
  EnterSceneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterSceneRsp_descriptor_,
      EnterSceneRsp::default_instance_,
      EnterSceneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterSceneRsp));
  NotifyPlayerEnterServer_descriptor_ = file->message_type(14);
  static const int NotifyPlayerEnterServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerEnterServer, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerEnterServer, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerEnterServer, logic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerEnterServer, sns_id_),
  };
  NotifyPlayerEnterServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPlayerEnterServer_descriptor_,
      NotifyPlayerEnterServer::default_instance_,
      NotifyPlayerEnterServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerEnterServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerEnterServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPlayerEnterServer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerInternal2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGateLeaveGame2_descriptor_, &NotifyGateLeaveGame2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCenterDisConnect2_descriptor_, &NotifyCenterDisConnect2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyServerBusInfo_descriptor_, &ProxyServerBusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WroldToProxyChangeServerBusId_descriptor_, &WroldToProxyChangeServerBusId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToOtherServerDisconnectNotify_descriptor_, &WorldToOtherServerDisconnectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicLeaveGameReq2_descriptor_, &NotifyLogicLeaveGameReq2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicLeaveGameRsp2_descriptor_, &NotifyLogicLeaveGameRsp2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTSLoginReq_descriptor_, &LTSLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STLLoginRsp_descriptor_, &STLLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterMapInfoReq_descriptor_, &RegisterMapInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReigsterMapInfoRsp_descriptor_, &ReigsterMapInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientEnterGameInternalRsp_descriptor_, &ClientEnterGameInternalRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterSceneReq_descriptor_, &EnterSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterSceneRsp_descriptor_, &EnterSceneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPlayerEnterServer_descriptor_, &NotifyPlayerEnterServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerInternal2_2eproto() {
  delete NotifyGateLeaveGame2::default_instance_;
  delete NotifyGateLeaveGame2_reflection_;
  delete NotifyCenterDisConnect2::default_instance_;
  delete NotifyCenterDisConnect2_reflection_;
  delete ProxyServerBusInfo::default_instance_;
  delete ProxyServerBusInfo_reflection_;
  delete WroldToProxyChangeServerBusId::default_instance_;
  delete WroldToProxyChangeServerBusId_reflection_;
  delete WorldToOtherServerDisconnectNotify::default_instance_;
  delete WorldToOtherServerDisconnectNotify_reflection_;
  delete NotifyLogicLeaveGameReq2::default_instance_;
  delete NotifyLogicLeaveGameReq2_reflection_;
  delete NotifyLogicLeaveGameRsp2::default_instance_;
  delete NotifyLogicLeaveGameRsp2_reflection_;
  delete LTSLoginReq::default_instance_;
  delete LTSLoginReq_reflection_;
  delete STLLoginRsp::default_instance_;
  delete STLLoginRsp_reflection_;
  delete RegisterMapInfoReq::default_instance_;
  delete RegisterMapInfoReq_reflection_;
  delete ReigsterMapInfoRsp::default_instance_;
  delete ReigsterMapInfoRsp_reflection_;
  delete ClientEnterGameInternalRsp::default_instance_;
  delete ClientEnterGameInternalRsp_reflection_;
  delete EnterSceneReq::default_instance_;
  delete EnterSceneReq_reflection_;
  delete EnterSceneRsp::default_instance_;
  delete EnterSceneRsp_reflection_;
  delete NotifyPlayerEnterServer::default_instance_;
  delete NotifyPlayerEnterServer_reflection_;
}

void protobuf_AddDesc_ServerInternal2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_DBProxy_2eproto();
  ::proto_ff::protobuf_AddDesc_DBProxy2_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ServerInternal2.proto\022\010proto_ff\032\rDBPro"
    "xy.proto\032\016DBProxy2.proto\032\tCom.proto\032\017Com"
    "Define.proto\"S\n\024NotifyGateLeaveGame2\022\020\n\010"
    "clientid\030\001 \001(\004\022)\n\nleave_flag\030\003 \001(\0162\025.pro"
    "to_ff.LOGOUT_TYPE\"I\n\027NotifyCenterDisConn"
    "ect2\022\020\n\010clientId\030\001 \001(\004\022\013\n\003cid\030\002 \001(\004\022\017\n\007e"
    "rrflag\030\003 \001(\005\"9\n\022ProxyServerBusInfo\022\023\n\013se"
    "rver_type\030\001 \001(\r\022\016\n\006bus_id\030\002 \001(\r\"R\n\035Wrold"
    "ToProxyChangeServerBusId\0221\n\013server_info\030"
    "\001 \003(\0132\034.proto_ff.ProxyServerBusInfo\"D\n\"W"
    "orldToOtherServerDisconnectNotify\022\016\n\006rol"
    "eId\030\001 \001(\004\022\016\n\006reason\030\002 \001(\r\"Y\n\030NotifyLogic"
    "LeaveGameReq2\022\013\n\003cid\030\001 \002(\004\022\013\n\003uid\030\002 \002(\004\022"
    "#\n\004type\030\003 \001(\0162\025.proto_ff.LOGOUT_TYPE\"I\n\030"
    "NotifyLogicLeaveGameRsp2\022\013\n\003cid\030\001 \002(\004\022\013\n"
    "\003uid\030\002 \002(\004\022\023\n\013logout_type\030\003 \001(\005\"\221\001\n\013LTSL"
    "oginReq\022\013\n\003cid\030\001 \001(\004\022\013\n\003zid\030\002 \001(\r\022\013\n\003uid"
    "\030\003 \001(\r\022&\n\004base\030\004 \001(\0132\030.proto_ff.RoleDBBa"
    "seData\022\020\n\010proxy_id\030\005 \001(\r\022\020\n\010logic_id\030\006 \001"
    "(\r\022\017\n\007game_id\030\007 \001(\r\"\032\n\013STLLoginRsp\022\013\n\003re"
    "t\030\001 \001(\005\"4\n\022RegisterMapInfoReq\022\016\n\006bus_id\030"
    "\001 \001(\r\022\016\n\006map_id\030\002 \003(\r\"&\n\022ReigsterMapInfo"
    "Rsp\022\020\n\010ret_code\030\001 \001(\005\"a\n\032ClientEnterGame"
    "InternalRsp\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010logic_i"
    "d\030\002 \001(\r\022\017\n\007game_id\030\003 \001(\r\022\016\n\006sns_id\030\004 \001(\r"
    "\"\362\002\n\rEnterSceneReq\022\013\n\003cid\030\001 \001(\004\022\022\n\ndst_m"
    "ap_id\030\002 \001(\004\022\024\n\014dst_scene_id\030\003 \001(\004\022$\n\007dst"
    "_pos\030\004 \001(\0132\023.proto_ff.Vector3PB\022\022\n\nsrc_m"
    "ap_id\030\005 \001(\004\022\024\n\014src_scene_id\030\006 \001(\004\022$\n\007src"
    "_pos\030\007 \001(\0132\023.proto_ff.Vector3PB\022\022\n\ntrans"
    "_type\030\010 \001(\r\022*\n\004data\030\t \001(\0132\034.proto_ff.Rol"
    "eEnterSceneData\022\020\n\010proxy_id\030\n \001(\r\022\020\n\010log"
    "ic_id\030\013 \001(\r\022\016\n\006sns_id\030\014 \001(\r\022\020\n\010world_id\030"
    "\r \001(\r\022.\n\013trans_param\030\016 \001(\0132\031.proto_ff.Sc"
    "eneTransParam\"v\n\rEnterSceneRsp\022\020\n\010ret_co"
    "de\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\016\n\006map_id\030\003 \001("
    "\004\022\020\n\010scene_id\030\004 \001(\004\022 \n\003pos\030\005 \001(\0132\023.proto"
    "_ff.Vector3PB\"U\n\027NotifyPlayerEnterServer"
    "\022\013\n\003uid\030\001 \001(\r\022\013\n\003cid\030\002 \001(\004\022\020\n\010logic_id\030\003"
    " \001(\r\022\016\n\006sns_id\030\004 \001(\r", 1580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerInternal2.proto", &protobuf_RegisterTypes);
  NotifyGateLeaveGame2::default_instance_ = new NotifyGateLeaveGame2();
  NotifyCenterDisConnect2::default_instance_ = new NotifyCenterDisConnect2();
  ProxyServerBusInfo::default_instance_ = new ProxyServerBusInfo();
  WroldToProxyChangeServerBusId::default_instance_ = new WroldToProxyChangeServerBusId();
  WorldToOtherServerDisconnectNotify::default_instance_ = new WorldToOtherServerDisconnectNotify();
  NotifyLogicLeaveGameReq2::default_instance_ = new NotifyLogicLeaveGameReq2();
  NotifyLogicLeaveGameRsp2::default_instance_ = new NotifyLogicLeaveGameRsp2();
  LTSLoginReq::default_instance_ = new LTSLoginReq();
  STLLoginRsp::default_instance_ = new STLLoginRsp();
  RegisterMapInfoReq::default_instance_ = new RegisterMapInfoReq();
  ReigsterMapInfoRsp::default_instance_ = new ReigsterMapInfoRsp();
  ClientEnterGameInternalRsp::default_instance_ = new ClientEnterGameInternalRsp();
  EnterSceneReq::default_instance_ = new EnterSceneReq();
  EnterSceneRsp::default_instance_ = new EnterSceneRsp();
  NotifyPlayerEnterServer::default_instance_ = new NotifyPlayerEnterServer();
  NotifyGateLeaveGame2::default_instance_->InitAsDefaultInstance();
  NotifyCenterDisConnect2::default_instance_->InitAsDefaultInstance();
  ProxyServerBusInfo::default_instance_->InitAsDefaultInstance();
  WroldToProxyChangeServerBusId::default_instance_->InitAsDefaultInstance();
  WorldToOtherServerDisconnectNotify::default_instance_->InitAsDefaultInstance();
  NotifyLogicLeaveGameReq2::default_instance_->InitAsDefaultInstance();
  NotifyLogicLeaveGameRsp2::default_instance_->InitAsDefaultInstance();
  LTSLoginReq::default_instance_->InitAsDefaultInstance();
  STLLoginRsp::default_instance_->InitAsDefaultInstance();
  RegisterMapInfoReq::default_instance_->InitAsDefaultInstance();
  ReigsterMapInfoRsp::default_instance_->InitAsDefaultInstance();
  ClientEnterGameInternalRsp::default_instance_->InitAsDefaultInstance();
  EnterSceneReq::default_instance_->InitAsDefaultInstance();
  EnterSceneRsp::default_instance_->InitAsDefaultInstance();
  NotifyPlayerEnterServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerInternal2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerInternal2_2eproto {
  StaticDescriptorInitializer_ServerInternal2_2eproto() {
    protobuf_AddDesc_ServerInternal2_2eproto();
  }
} static_descriptor_initializer_ServerInternal2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyGateLeaveGame2::kClientidFieldNumber;
const int NotifyGateLeaveGame2::kLeaveFlagFieldNumber;
#endif  // !_MSC_VER

NotifyGateLeaveGame2::NotifyGateLeaveGame2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGateLeaveGame2::InitAsDefaultInstance() {
}

NotifyGateLeaveGame2::NotifyGateLeaveGame2(const NotifyGateLeaveGame2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGateLeaveGame2::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  leave_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGateLeaveGame2::~NotifyGateLeaveGame2() {
  SharedDtor();
}

void NotifyGateLeaveGame2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGateLeaveGame2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGateLeaveGame2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGateLeaveGame2_descriptor_;
}

const NotifyGateLeaveGame2& NotifyGateLeaveGame2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyGateLeaveGame2* NotifyGateLeaveGame2::default_instance_ = NULL;

NotifyGateLeaveGame2* NotifyGateLeaveGame2::New() const {
  return new NotifyGateLeaveGame2;
}

void NotifyGateLeaveGame2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = GOOGLE_ULONGLONG(0);
    leave_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGateLeaveGame2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leave_flag;
        break;
      }

      // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::LOGOUT_TYPE_IsValid(value)) {
            set_leave_flag(static_cast< ::proto_ff::LOGOUT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGateLeaveGame2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clientid(), output);
  }

  // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
  if (has_leave_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->leave_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGateLeaveGame2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clientid = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clientid(), target);
  }

  // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
  if (has_leave_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->leave_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGateLeaveGame2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
    if (has_leave_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leave_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGateLeaveGame2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGateLeaveGame2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGateLeaveGame2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGateLeaveGame2::MergeFrom(const NotifyGateLeaveGame2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_leave_flag()) {
      set_leave_flag(from.leave_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGateLeaveGame2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGateLeaveGame2::CopyFrom(const NotifyGateLeaveGame2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGateLeaveGame2::IsInitialized() const {

  return true;
}

void NotifyGateLeaveGame2::Swap(NotifyGateLeaveGame2* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(leave_flag_, other->leave_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGateLeaveGame2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGateLeaveGame2_descriptor_;
  metadata.reflection = NotifyGateLeaveGame2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCenterDisConnect2::kClientIdFieldNumber;
const int NotifyCenterDisConnect2::kCidFieldNumber;
const int NotifyCenterDisConnect2::kErrflagFieldNumber;
#endif  // !_MSC_VER

NotifyCenterDisConnect2::NotifyCenterDisConnect2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCenterDisConnect2::InitAsDefaultInstance() {
}

NotifyCenterDisConnect2::NotifyCenterDisConnect2(const NotifyCenterDisConnect2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCenterDisConnect2::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  errflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCenterDisConnect2::~NotifyCenterDisConnect2() {
  SharedDtor();
}

void NotifyCenterDisConnect2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCenterDisConnect2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCenterDisConnect2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCenterDisConnect2_descriptor_;
}

const NotifyCenterDisConnect2& NotifyCenterDisConnect2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyCenterDisConnect2* NotifyCenterDisConnect2::default_instance_ = NULL;

NotifyCenterDisConnect2* NotifyCenterDisConnect2::New() const {
  return new NotifyCenterDisConnect2;
}

void NotifyCenterDisConnect2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    errflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCenterDisConnect2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errflag;
        break;
      }

      // optional int32 errflag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errflag_)));
          set_has_errflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCenterDisConnect2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clientid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 errflag = 3;
  if (has_errflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCenterDisConnect2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clientid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 errflag = 3;
  if (has_errflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCenterDisConnect2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 errflag = 3;
    if (has_errflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCenterDisConnect2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCenterDisConnect2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCenterDisConnect2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCenterDisConnect2::MergeFrom(const NotifyCenterDisConnect2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_errflag()) {
      set_errflag(from.errflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCenterDisConnect2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCenterDisConnect2::CopyFrom(const NotifyCenterDisConnect2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCenterDisConnect2::IsInitialized() const {

  return true;
}

void NotifyCenterDisConnect2::Swap(NotifyCenterDisConnect2* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(cid_, other->cid_);
    std::swap(errflag_, other->errflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCenterDisConnect2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCenterDisConnect2_descriptor_;
  metadata.reflection = NotifyCenterDisConnect2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyServerBusInfo::kServerTypeFieldNumber;
const int ProxyServerBusInfo::kBusIdFieldNumber;
#endif  // !_MSC_VER

ProxyServerBusInfo::ProxyServerBusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyServerBusInfo::InitAsDefaultInstance() {
}

ProxyServerBusInfo::ProxyServerBusInfo(const ProxyServerBusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyServerBusInfo::SharedCtor() {
  _cached_size_ = 0;
  server_type_ = 0u;
  bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyServerBusInfo::~ProxyServerBusInfo() {
  SharedDtor();
}

void ProxyServerBusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProxyServerBusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyServerBusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyServerBusInfo_descriptor_;
}

const ProxyServerBusInfo& ProxyServerBusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

ProxyServerBusInfo* ProxyServerBusInfo::default_instance_ = NULL;

ProxyServerBusInfo* ProxyServerBusInfo::New() const {
  return new ProxyServerBusInfo;
}

void ProxyServerBusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_type_ = 0u;
    bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyServerBusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bus_id;
        break;
      }

      // optional uint32 bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyServerBusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyServerBusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyServerBusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_type = 1;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint32 bus_id = 2;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyServerBusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyServerBusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyServerBusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyServerBusInfo::MergeFrom(const ProxyServerBusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyServerBusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyServerBusInfo::CopyFrom(const ProxyServerBusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyServerBusInfo::IsInitialized() const {

  return true;
}

void ProxyServerBusInfo::Swap(ProxyServerBusInfo* other) {
  if (other != this) {
    std::swap(server_type_, other->server_type_);
    std::swap(bus_id_, other->bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyServerBusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyServerBusInfo_descriptor_;
  metadata.reflection = ProxyServerBusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WroldToProxyChangeServerBusId::kServerInfoFieldNumber;
#endif  // !_MSC_VER

WroldToProxyChangeServerBusId::WroldToProxyChangeServerBusId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WroldToProxyChangeServerBusId::InitAsDefaultInstance() {
}

WroldToProxyChangeServerBusId::WroldToProxyChangeServerBusId(const WroldToProxyChangeServerBusId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WroldToProxyChangeServerBusId::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WroldToProxyChangeServerBusId::~WroldToProxyChangeServerBusId() {
  SharedDtor();
}

void WroldToProxyChangeServerBusId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WroldToProxyChangeServerBusId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WroldToProxyChangeServerBusId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WroldToProxyChangeServerBusId_descriptor_;
}

const WroldToProxyChangeServerBusId& WroldToProxyChangeServerBusId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WroldToProxyChangeServerBusId* WroldToProxyChangeServerBusId::default_instance_ = NULL;

WroldToProxyChangeServerBusId* WroldToProxyChangeServerBusId::New() const {
  return new WroldToProxyChangeServerBusId;
}

void WroldToProxyChangeServerBusId::Clear() {
  server_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WroldToProxyChangeServerBusId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WroldToProxyChangeServerBusId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  for (int i = 0; i < this->server_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WroldToProxyChangeServerBusId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  for (int i = 0; i < this->server_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WroldToProxyChangeServerBusId::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  total_size += 1 * this->server_info_size();
  for (int i = 0; i < this->server_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WroldToProxyChangeServerBusId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WroldToProxyChangeServerBusId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WroldToProxyChangeServerBusId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WroldToProxyChangeServerBusId::MergeFrom(const WroldToProxyChangeServerBusId& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_info_.MergeFrom(from.server_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WroldToProxyChangeServerBusId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WroldToProxyChangeServerBusId::CopyFrom(const WroldToProxyChangeServerBusId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WroldToProxyChangeServerBusId::IsInitialized() const {

  return true;
}

void WroldToProxyChangeServerBusId::Swap(WroldToProxyChangeServerBusId* other) {
  if (other != this) {
    server_info_.Swap(&other->server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WroldToProxyChangeServerBusId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WroldToProxyChangeServerBusId_descriptor_;
  metadata.reflection = WroldToProxyChangeServerBusId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToOtherServerDisconnectNotify::kRoleIdFieldNumber;
const int WorldToOtherServerDisconnectNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

WorldToOtherServerDisconnectNotify::WorldToOtherServerDisconnectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToOtherServerDisconnectNotify::InitAsDefaultInstance() {
}

WorldToOtherServerDisconnectNotify::WorldToOtherServerDisconnectNotify(const WorldToOtherServerDisconnectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToOtherServerDisconnectNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToOtherServerDisconnectNotify::~WorldToOtherServerDisconnectNotify() {
  SharedDtor();
}

void WorldToOtherServerDisconnectNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldToOtherServerDisconnectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToOtherServerDisconnectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToOtherServerDisconnectNotify_descriptor_;
}

const WorldToOtherServerDisconnectNotify& WorldToOtherServerDisconnectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToOtherServerDisconnectNotify* WorldToOtherServerDisconnectNotify::default_instance_ = NULL;

WorldToOtherServerDisconnectNotify* WorldToOtherServerDisconnectNotify::New() const {
  return new WorldToOtherServerDisconnectNotify;
}

void WorldToOtherServerDisconnectNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToOtherServerDisconnectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToOtherServerDisconnectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToOtherServerDisconnectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToOtherServerDisconnectNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToOtherServerDisconnectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToOtherServerDisconnectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToOtherServerDisconnectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToOtherServerDisconnectNotify::MergeFrom(const WorldToOtherServerDisconnectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToOtherServerDisconnectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToOtherServerDisconnectNotify::CopyFrom(const WorldToOtherServerDisconnectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToOtherServerDisconnectNotify::IsInitialized() const {

  return true;
}

void WorldToOtherServerDisconnectNotify::Swap(WorldToOtherServerDisconnectNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToOtherServerDisconnectNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToOtherServerDisconnectNotify_descriptor_;
  metadata.reflection = WorldToOtherServerDisconnectNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicLeaveGameReq2::kCidFieldNumber;
const int NotifyLogicLeaveGameReq2::kUidFieldNumber;
const int NotifyLogicLeaveGameReq2::kTypeFieldNumber;
#endif  // !_MSC_VER

NotifyLogicLeaveGameReq2::NotifyLogicLeaveGameReq2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicLeaveGameReq2::InitAsDefaultInstance() {
}

NotifyLogicLeaveGameReq2::NotifyLogicLeaveGameReq2(const NotifyLogicLeaveGameReq2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicLeaveGameReq2::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicLeaveGameReq2::~NotifyLogicLeaveGameReq2() {
  SharedDtor();
}

void NotifyLogicLeaveGameReq2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicLeaveGameReq2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameReq2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicLeaveGameReq2_descriptor_;
}

const NotifyLogicLeaveGameReq2& NotifyLogicLeaveGameReq2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyLogicLeaveGameReq2* NotifyLogicLeaveGameReq2::default_instance_ = NULL;

NotifyLogicLeaveGameReq2* NotifyLogicLeaveGameReq2::New() const {
  return new NotifyLogicLeaveGameReq2;
}

void NotifyLogicLeaveGameReq2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicLeaveGameReq2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .proto_ff.LOGOUT_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::LOGOUT_TYPE_IsValid(value)) {
            set_type(static_cast< ::proto_ff::LOGOUT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicLeaveGameReq2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional .proto_ff.LOGOUT_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicLeaveGameReq2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional .proto_ff.LOGOUT_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicLeaveGameReq2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .proto_ff.LOGOUT_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicLeaveGameReq2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicLeaveGameReq2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicLeaveGameReq2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicLeaveGameReq2::MergeFrom(const NotifyLogicLeaveGameReq2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicLeaveGameReq2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicLeaveGameReq2::CopyFrom(const NotifyLogicLeaveGameReq2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicLeaveGameReq2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyLogicLeaveGameReq2::Swap(NotifyLogicLeaveGameReq2* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicLeaveGameReq2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicLeaveGameReq2_descriptor_;
  metadata.reflection = NotifyLogicLeaveGameReq2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicLeaveGameRsp2::kCidFieldNumber;
const int NotifyLogicLeaveGameRsp2::kUidFieldNumber;
const int NotifyLogicLeaveGameRsp2::kLogoutTypeFieldNumber;
#endif  // !_MSC_VER

NotifyLogicLeaveGameRsp2::NotifyLogicLeaveGameRsp2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicLeaveGameRsp2::InitAsDefaultInstance() {
}

NotifyLogicLeaveGameRsp2::NotifyLogicLeaveGameRsp2(const NotifyLogicLeaveGameRsp2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicLeaveGameRsp2::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  logout_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicLeaveGameRsp2::~NotifyLogicLeaveGameRsp2() {
  SharedDtor();
}

void NotifyLogicLeaveGameRsp2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicLeaveGameRsp2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicLeaveGameRsp2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicLeaveGameRsp2_descriptor_;
}

const NotifyLogicLeaveGameRsp2& NotifyLogicLeaveGameRsp2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyLogicLeaveGameRsp2* NotifyLogicLeaveGameRsp2::default_instance_ = NULL;

NotifyLogicLeaveGameRsp2* NotifyLogicLeaveGameRsp2::New() const {
  return new NotifyLogicLeaveGameRsp2;
}

void NotifyLogicLeaveGameRsp2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = GOOGLE_ULONGLONG(0);
    logout_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicLeaveGameRsp2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logout_type;
        break;
      }

      // optional int32 logout_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logout_type_)));
          set_has_logout_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicLeaveGameRsp2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional int32 logout_type = 3;
  if (has_logout_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logout_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicLeaveGameRsp2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional int32 logout_type = 3;
  if (has_logout_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logout_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicLeaveGameRsp2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional int32 logout_type = 3;
    if (has_logout_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logout_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicLeaveGameRsp2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicLeaveGameRsp2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicLeaveGameRsp2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicLeaveGameRsp2::MergeFrom(const NotifyLogicLeaveGameRsp2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_logout_type()) {
      set_logout_type(from.logout_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicLeaveGameRsp2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicLeaveGameRsp2::CopyFrom(const NotifyLogicLeaveGameRsp2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicLeaveGameRsp2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyLogicLeaveGameRsp2::Swap(NotifyLogicLeaveGameRsp2* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(logout_type_, other->logout_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicLeaveGameRsp2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicLeaveGameRsp2_descriptor_;
  metadata.reflection = NotifyLogicLeaveGameRsp2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTSLoginReq::kCidFieldNumber;
const int LTSLoginReq::kZidFieldNumber;
const int LTSLoginReq::kUidFieldNumber;
const int LTSLoginReq::kBaseFieldNumber;
const int LTSLoginReq::kProxyIdFieldNumber;
const int LTSLoginReq::kLogicIdFieldNumber;
const int LTSLoginReq::kGameIdFieldNumber;
#endif  // !_MSC_VER

LTSLoginReq::LTSLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTSLoginReq::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
}

LTSLoginReq::LTSLoginReq(const LTSLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTSLoginReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  uid_ = 0u;
  base_ = NULL;
  proxy_id_ = 0u;
  logic_id_ = 0u;
  game_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTSLoginReq::~LTSLoginReq() {
  SharedDtor();
}

void LTSLoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void LTSLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTSLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTSLoginReq_descriptor_;
}

const LTSLoginReq& LTSLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

LTSLoginReq* LTSLoginReq::default_instance_ = NULL;

LTSLoginReq* LTSLoginReq::New() const {
  return new LTSLoginReq;
}

void LTSLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    uid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
    proxy_id_ = 0u;
    logic_id_ = 0u;
    game_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTSLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proxy_id;
        break;
      }

      // optional uint32 proxy_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logic_id;
        break;
      }

      // optional uint32 logic_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTSLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }

  // optional uint32 proxy_id = 5;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->proxy_id(), output);
  }

  // optional uint32 logic_id = 6;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logic_id(), output);
  }

  // optional uint32 game_id = 7;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTSLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }

  // optional uint32 proxy_id = 5;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->proxy_id(), target);
  }

  // optional uint32 logic_id = 6;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logic_id(), target);
  }

  // optional uint32 game_id = 7;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTSLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBBaseData base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional uint32 proxy_id = 5;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_id());
    }

    // optional uint32 logic_id = 6;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_id());
    }

    // optional uint32 game_id = 7;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTSLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTSLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTSLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTSLoginReq::MergeFrom(const LTSLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTSLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTSLoginReq::CopyFrom(const LTSLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTSLoginReq::IsInitialized() const {

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void LTSLoginReq::Swap(LTSLoginReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(uid_, other->uid_);
    std::swap(base_, other->base_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTSLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTSLoginReq_descriptor_;
  metadata.reflection = LTSLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STLLoginRsp::kRetFieldNumber;
#endif  // !_MSC_VER

STLLoginRsp::STLLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STLLoginRsp::InitAsDefaultInstance() {
}

STLLoginRsp::STLLoginRsp(const STLLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STLLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STLLoginRsp::~STLLoginRsp() {
  SharedDtor();
}

void STLLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STLLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STLLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STLLoginRsp_descriptor_;
}

const STLLoginRsp& STLLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

STLLoginRsp* STLLoginRsp::default_instance_ = NULL;

STLLoginRsp* STLLoginRsp::New() const {
  return new STLLoginRsp;
}

void STLLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STLLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STLLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STLLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STLLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STLLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STLLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STLLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STLLoginRsp::MergeFrom(const STLLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STLLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STLLoginRsp::CopyFrom(const STLLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STLLoginRsp::IsInitialized() const {

  return true;
}

void STLLoginRsp::Swap(STLLoginRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STLLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STLLoginRsp_descriptor_;
  metadata.reflection = STLLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterMapInfoReq::kBusIdFieldNumber;
const int RegisterMapInfoReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

RegisterMapInfoReq::RegisterMapInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterMapInfoReq::InitAsDefaultInstance() {
}

RegisterMapInfoReq::RegisterMapInfoReq(const RegisterMapInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterMapInfoReq::SharedCtor() {
  _cached_size_ = 0;
  bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterMapInfoReq::~RegisterMapInfoReq() {
  SharedDtor();
}

void RegisterMapInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterMapInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterMapInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterMapInfoReq_descriptor_;
}

const RegisterMapInfoReq& RegisterMapInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

RegisterMapInfoReq* RegisterMapInfoReq::default_instance_ = NULL;

RegisterMapInfoReq* RegisterMapInfoReq::New() const {
  return new RegisterMapInfoReq;
}

void RegisterMapInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bus_id_ = 0u;
  }
  map_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterMapInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bus_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // repeated uint32 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_map_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_map_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterMapInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bus_id = 1;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bus_id(), output);
  }

  // repeated uint32 map_id = 2;
  for (int i = 0; i < this->map_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->map_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterMapInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bus_id = 1;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bus_id(), target);
  }

  // repeated uint32 map_id = 2;
  for (int i = 0; i < this->map_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->map_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterMapInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bus_id = 1;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

  }
  // repeated uint32 map_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->map_id(i));
    }
    total_size += 1 * this->map_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterMapInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterMapInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterMapInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterMapInfoReq::MergeFrom(const RegisterMapInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_id_.MergeFrom(from.map_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterMapInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMapInfoReq::CopyFrom(const RegisterMapInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMapInfoReq::IsInitialized() const {

  return true;
}

void RegisterMapInfoReq::Swap(RegisterMapInfoReq* other) {
  if (other != this) {
    std::swap(bus_id_, other->bus_id_);
    map_id_.Swap(&other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterMapInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterMapInfoReq_descriptor_;
  metadata.reflection = RegisterMapInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReigsterMapInfoRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

ReigsterMapInfoRsp::ReigsterMapInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReigsterMapInfoRsp::InitAsDefaultInstance() {
}

ReigsterMapInfoRsp::ReigsterMapInfoRsp(const ReigsterMapInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReigsterMapInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReigsterMapInfoRsp::~ReigsterMapInfoRsp() {
  SharedDtor();
}

void ReigsterMapInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReigsterMapInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReigsterMapInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReigsterMapInfoRsp_descriptor_;
}

const ReigsterMapInfoRsp& ReigsterMapInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

ReigsterMapInfoRsp* ReigsterMapInfoRsp::default_instance_ = NULL;

ReigsterMapInfoRsp* ReigsterMapInfoRsp::New() const {
  return new ReigsterMapInfoRsp;
}

void ReigsterMapInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReigsterMapInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReigsterMapInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReigsterMapInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReigsterMapInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReigsterMapInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReigsterMapInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReigsterMapInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReigsterMapInfoRsp::MergeFrom(const ReigsterMapInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReigsterMapInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReigsterMapInfoRsp::CopyFrom(const ReigsterMapInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReigsterMapInfoRsp::IsInitialized() const {

  return true;
}

void ReigsterMapInfoRsp::Swap(ReigsterMapInfoRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReigsterMapInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReigsterMapInfoRsp_descriptor_;
  metadata.reflection = ReigsterMapInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientEnterGameInternalRsp::kRetCodeFieldNumber;
const int ClientEnterGameInternalRsp::kLogicIdFieldNumber;
const int ClientEnterGameInternalRsp::kGameIdFieldNumber;
const int ClientEnterGameInternalRsp::kSnsIdFieldNumber;
#endif  // !_MSC_VER

ClientEnterGameInternalRsp::ClientEnterGameInternalRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientEnterGameInternalRsp::InitAsDefaultInstance() {
}

ClientEnterGameInternalRsp::ClientEnterGameInternalRsp(const ClientEnterGameInternalRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientEnterGameInternalRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  logic_id_ = 0u;
  game_id_ = 0u;
  sns_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientEnterGameInternalRsp::~ClientEnterGameInternalRsp() {
  SharedDtor();
}

void ClientEnterGameInternalRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientEnterGameInternalRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientEnterGameInternalRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientEnterGameInternalRsp_descriptor_;
}

const ClientEnterGameInternalRsp& ClientEnterGameInternalRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

ClientEnterGameInternalRsp* ClientEnterGameInternalRsp::default_instance_ = NULL;

ClientEnterGameInternalRsp* ClientEnterGameInternalRsp::New() const {
  return new ClientEnterGameInternalRsp;
}

void ClientEnterGameInternalRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    logic_id_ = 0u;
    game_id_ = 0u;
    sns_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientEnterGameInternalRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_id;
        break;
      }

      // optional uint32 logic_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sns_id;
        break;
      }

      // optional uint32 sns_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sns_id_)));
          set_has_sns_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientEnterGameInternalRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint32 logic_id = 2;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logic_id(), output);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_id(), output);
  }

  // optional uint32 sns_id = 4;
  if (has_sns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sns_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientEnterGameInternalRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint32 logic_id = 2;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logic_id(), target);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_id(), target);
  }

  // optional uint32 sns_id = 4;
  if (has_sns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sns_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientEnterGameInternalRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint32 logic_id = 2;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_id());
    }

    // optional uint32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 sns_id = 4;
    if (has_sns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sns_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientEnterGameInternalRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientEnterGameInternalRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientEnterGameInternalRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientEnterGameInternalRsp::MergeFrom(const ClientEnterGameInternalRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_sns_id()) {
      set_sns_id(from.sns_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientEnterGameInternalRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEnterGameInternalRsp::CopyFrom(const ClientEnterGameInternalRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEnterGameInternalRsp::IsInitialized() const {

  return true;
}

void ClientEnterGameInternalRsp::Swap(ClientEnterGameInternalRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(sns_id_, other->sns_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientEnterGameInternalRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientEnterGameInternalRsp_descriptor_;
  metadata.reflection = ClientEnterGameInternalRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterSceneReq::kCidFieldNumber;
const int EnterSceneReq::kDstMapIdFieldNumber;
const int EnterSceneReq::kDstSceneIdFieldNumber;
const int EnterSceneReq::kDstPosFieldNumber;
const int EnterSceneReq::kSrcMapIdFieldNumber;
const int EnterSceneReq::kSrcSceneIdFieldNumber;
const int EnterSceneReq::kSrcPosFieldNumber;
const int EnterSceneReq::kTransTypeFieldNumber;
const int EnterSceneReq::kDataFieldNumber;
const int EnterSceneReq::kProxyIdFieldNumber;
const int EnterSceneReq::kLogicIdFieldNumber;
const int EnterSceneReq::kSnsIdFieldNumber;
const int EnterSceneReq::kWorldIdFieldNumber;
const int EnterSceneReq::kTransParamFieldNumber;
#endif  // !_MSC_VER

EnterSceneReq::EnterSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterSceneReq::InitAsDefaultInstance() {
  dst_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  src_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  data_ = const_cast< ::proto_ff::RoleEnterSceneData*>(&::proto_ff::RoleEnterSceneData::default_instance());
  trans_param_ = const_cast< ::proto_ff::SceneTransParam*>(&::proto_ff::SceneTransParam::default_instance());
}

EnterSceneReq::EnterSceneReq(const EnterSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterSceneReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  dst_map_id_ = GOOGLE_ULONGLONG(0);
  dst_scene_id_ = GOOGLE_ULONGLONG(0);
  dst_pos_ = NULL;
  src_map_id_ = GOOGLE_ULONGLONG(0);
  src_scene_id_ = GOOGLE_ULONGLONG(0);
  src_pos_ = NULL;
  trans_type_ = 0u;
  data_ = NULL;
  proxy_id_ = 0u;
  logic_id_ = 0u;
  sns_id_ = 0u;
  world_id_ = 0u;
  trans_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterSceneReq::~EnterSceneReq() {
  SharedDtor();
}

void EnterSceneReq::SharedDtor() {
  if (this != default_instance_) {
    delete dst_pos_;
    delete src_pos_;
    delete data_;
    delete trans_param_;
  }
}

void EnterSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterSceneReq_descriptor_;
}

const EnterSceneReq& EnterSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

EnterSceneReq* EnterSceneReq::default_instance_ = NULL;

EnterSceneReq* EnterSceneReq::New() const {
  return new EnterSceneReq;
}

void EnterSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    dst_map_id_ = GOOGLE_ULONGLONG(0);
    dst_scene_id_ = GOOGLE_ULONGLONG(0);
    if (has_dst_pos()) {
      if (dst_pos_ != NULL) dst_pos_->::proto_ff::Vector3PB::Clear();
    }
    src_map_id_ = GOOGLE_ULONGLONG(0);
    src_scene_id_ = GOOGLE_ULONGLONG(0);
    if (has_src_pos()) {
      if (src_pos_ != NULL) src_pos_->::proto_ff::Vector3PB::Clear();
    }
    trans_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RoleEnterSceneData::Clear();
    }
    proxy_id_ = 0u;
    logic_id_ = 0u;
    sns_id_ = 0u;
    world_id_ = 0u;
    if (has_trans_param()) {
      if (trans_param_ != NULL) trans_param_->::proto_ff::SceneTransParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_map_id;
        break;
      }

      // optional uint64 dst_map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_map_id_)));
          set_has_dst_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_scene_id;
        break;
      }

      // optional uint64 dst_scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_scene_id_)));
          set_has_dst_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dst_pos;
        break;
      }

      // optional .proto_ff.Vector3PB dst_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_src_map_id;
        break;
      }

      // optional uint64 src_map_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_map_id_)));
          set_has_src_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_src_scene_id;
        break;
      }

      // optional uint64 src_scene_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_scene_id_)));
          set_has_src_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_src_pos;
        break;
      }

      // optional .proto_ff.Vector3PB src_pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_trans_type;
        break;
      }

      // optional uint32 trans_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trans_type_)));
          set_has_trans_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional .proto_ff.RoleEnterSceneData data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_proxy_id;
        break;
      }

      // optional uint32 proxy_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_logic_id;
        break;
      }

      // optional uint32 logic_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sns_id;
        break;
      }

      // optional uint32 sns_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sns_id_)));
          set_has_sns_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_world_id;
        break;
      }

      // optional uint32 world_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_id_)));
          set_has_world_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_trans_param;
        break;
      }

      // optional .proto_ff.SceneTransParam trans_param = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 dst_map_id = 2;
  if (has_dst_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dst_map_id(), output);
  }

  // optional uint64 dst_scene_id = 3;
  if (has_dst_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dst_scene_id(), output);
  }

  // optional .proto_ff.Vector3PB dst_pos = 4;
  if (has_dst_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dst_pos(), output);
  }

  // optional uint64 src_map_id = 5;
  if (has_src_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->src_map_id(), output);
  }

  // optional uint64 src_scene_id = 6;
  if (has_src_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->src_scene_id(), output);
  }

  // optional .proto_ff.Vector3PB src_pos = 7;
  if (has_src_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->src_pos(), output);
  }

  // optional uint32 trans_type = 8;
  if (has_trans_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->trans_type(), output);
  }

  // optional .proto_ff.RoleEnterSceneData data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(), output);
  }

  // optional uint32 proxy_id = 10;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->proxy_id(), output);
  }

  // optional uint32 logic_id = 11;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->logic_id(), output);
  }

  // optional uint32 sns_id = 12;
  if (has_sns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sns_id(), output);
  }

  // optional uint32 world_id = 13;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->world_id(), output);
  }

  // optional .proto_ff.SceneTransParam trans_param = 14;
  if (has_trans_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->trans_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 dst_map_id = 2;
  if (has_dst_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dst_map_id(), target);
  }

  // optional uint64 dst_scene_id = 3;
  if (has_dst_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dst_scene_id(), target);
  }

  // optional .proto_ff.Vector3PB dst_pos = 4;
  if (has_dst_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dst_pos(), target);
  }

  // optional uint64 src_map_id = 5;
  if (has_src_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->src_map_id(), target);
  }

  // optional uint64 src_scene_id = 6;
  if (has_src_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->src_scene_id(), target);
  }

  // optional .proto_ff.Vector3PB src_pos = 7;
  if (has_src_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->src_pos(), target);
  }

  // optional uint32 trans_type = 8;
  if (has_trans_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->trans_type(), target);
  }

  // optional .proto_ff.RoleEnterSceneData data = 9;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(), target);
  }

  // optional uint32 proxy_id = 10;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->proxy_id(), target);
  }

  // optional uint32 logic_id = 11;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->logic_id(), target);
  }

  // optional uint32 sns_id = 12;
  if (has_sns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sns_id(), target);
  }

  // optional uint32 world_id = 13;
  if (has_world_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->world_id(), target);
  }

  // optional .proto_ff.SceneTransParam trans_param = 14;
  if (has_trans_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->trans_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 dst_map_id = 2;
    if (has_dst_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_map_id());
    }

    // optional uint64 dst_scene_id = 3;
    if (has_dst_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_scene_id());
    }

    // optional .proto_ff.Vector3PB dst_pos = 4;
    if (has_dst_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_pos());
    }

    // optional uint64 src_map_id = 5;
    if (has_src_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_map_id());
    }

    // optional uint64 src_scene_id = 6;
    if (has_src_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_scene_id());
    }

    // optional .proto_ff.Vector3PB src_pos = 7;
    if (has_src_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_pos());
    }

    // optional uint32 trans_type = 8;
    if (has_trans_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trans_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.RoleEnterSceneData data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 proxy_id = 10;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_id());
    }

    // optional uint32 logic_id = 11;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_id());
    }

    // optional uint32 sns_id = 12;
    if (has_sns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sns_id());
    }

    // optional uint32 world_id = 13;
    if (has_world_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_id());
    }

    // optional .proto_ff.SceneTransParam trans_param = 14;
    if (has_trans_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterSceneReq::MergeFrom(const EnterSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_dst_map_id()) {
      set_dst_map_id(from.dst_map_id());
    }
    if (from.has_dst_scene_id()) {
      set_dst_scene_id(from.dst_scene_id());
    }
    if (from.has_dst_pos()) {
      mutable_dst_pos()->::proto_ff::Vector3PB::MergeFrom(from.dst_pos());
    }
    if (from.has_src_map_id()) {
      set_src_map_id(from.src_map_id());
    }
    if (from.has_src_scene_id()) {
      set_src_scene_id(from.src_scene_id());
    }
    if (from.has_src_pos()) {
      mutable_src_pos()->::proto_ff::Vector3PB::MergeFrom(from.src_pos());
    }
    if (from.has_trans_type()) {
      set_trans_type(from.trans_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::RoleEnterSceneData::MergeFrom(from.data());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
    if (from.has_sns_id()) {
      set_sns_id(from.sns_id());
    }
    if (from.has_world_id()) {
      set_world_id(from.world_id());
    }
    if (from.has_trans_param()) {
      mutable_trans_param()->::proto_ff::SceneTransParam::MergeFrom(from.trans_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterSceneReq::CopyFrom(const EnterSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneReq::IsInitialized() const {

  if (has_dst_pos()) {
    if (!this->dst_pos().IsInitialized()) return false;
  }
  if (has_src_pos()) {
    if (!this->src_pos().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void EnterSceneReq::Swap(EnterSceneReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(dst_map_id_, other->dst_map_id_);
    std::swap(dst_scene_id_, other->dst_scene_id_);
    std::swap(dst_pos_, other->dst_pos_);
    std::swap(src_map_id_, other->src_map_id_);
    std::swap(src_scene_id_, other->src_scene_id_);
    std::swap(src_pos_, other->src_pos_);
    std::swap(trans_type_, other->trans_type_);
    std::swap(data_, other->data_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(sns_id_, other->sns_id_);
    std::swap(world_id_, other->world_id_);
    std::swap(trans_param_, other->trans_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterSceneReq_descriptor_;
  metadata.reflection = EnterSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterSceneRsp::kRetCodeFieldNumber;
const int EnterSceneRsp::kGameIdFieldNumber;
const int EnterSceneRsp::kMapIdFieldNumber;
const int EnterSceneRsp::kSceneIdFieldNumber;
const int EnterSceneRsp::kPosFieldNumber;
#endif  // !_MSC_VER

EnterSceneRsp::EnterSceneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterSceneRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

EnterSceneRsp::EnterSceneRsp(const EnterSceneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterSceneRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  map_id_ = GOOGLE_ULONGLONG(0);
  scene_id_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterSceneRsp::~EnterSceneRsp() {
  SharedDtor();
}

void EnterSceneRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void EnterSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterSceneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterSceneRsp_descriptor_;
}

const EnterSceneRsp& EnterSceneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

EnterSceneRsp* EnterSceneRsp::default_instance_ = NULL;

EnterSceneRsp* EnterSceneRsp::New() const {
  return new EnterSceneRsp;
}

void EnterSceneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    map_id_ = GOOGLE_ULONGLONG(0);
    scene_id_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // optional uint64 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ret_code(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint64 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->map_id(), output);
  }

  // optional uint64 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->scene_id(), output);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterSceneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ret_code(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint64 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->map_id(), target);
  }

  // optional uint64 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->scene_id(), target);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterSceneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ret_code());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint64 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->map_id());
    }

    // optional uint64 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional .proto_ff.Vector3PB pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterSceneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterSceneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterSceneRsp::MergeFrom(const EnterSceneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterSceneRsp::CopyFrom(const EnterSceneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneRsp::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void EnterSceneRsp::Swap(EnterSceneRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(game_id_, other->game_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterSceneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterSceneRsp_descriptor_;
  metadata.reflection = EnterSceneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPlayerEnterServer::kUidFieldNumber;
const int NotifyPlayerEnterServer::kCidFieldNumber;
const int NotifyPlayerEnterServer::kLogicIdFieldNumber;
const int NotifyPlayerEnterServer::kSnsIdFieldNumber;
#endif  // !_MSC_VER

NotifyPlayerEnterServer::NotifyPlayerEnterServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPlayerEnterServer::InitAsDefaultInstance() {
}

NotifyPlayerEnterServer::NotifyPlayerEnterServer(const NotifyPlayerEnterServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPlayerEnterServer::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  logic_id_ = 0u;
  sns_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPlayerEnterServer::~NotifyPlayerEnterServer() {
  SharedDtor();
}

void NotifyPlayerEnterServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPlayerEnterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPlayerEnterServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerEnterServer_descriptor_;
}

const NotifyPlayerEnterServer& NotifyPlayerEnterServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyPlayerEnterServer* NotifyPlayerEnterServer::default_instance_ = NULL;

NotifyPlayerEnterServer* NotifyPlayerEnterServer::New() const {
  return new NotifyPlayerEnterServer;
}

void NotifyPlayerEnterServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    logic_id_ = 0u;
    sns_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPlayerEnterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logic_id;
        break;
      }

      // optional uint32 logic_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sns_id;
        break;
      }

      // optional uint32 sns_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sns_id_)));
          set_has_sns_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPlayerEnterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 logic_id = 3;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->logic_id(), output);
  }

  // optional uint32 sns_id = 4;
  if (has_sns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sns_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPlayerEnterServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 logic_id = 3;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->logic_id(), target);
  }

  // optional uint32 sns_id = 4;
  if (has_sns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sns_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPlayerEnterServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 logic_id = 3;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_id());
    }

    // optional uint32 sns_id = 4;
    if (has_sns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sns_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPlayerEnterServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPlayerEnterServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPlayerEnterServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPlayerEnterServer::MergeFrom(const NotifyPlayerEnterServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
    if (from.has_sns_id()) {
      set_sns_id(from.sns_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPlayerEnterServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerEnterServer::CopyFrom(const NotifyPlayerEnterServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerEnterServer::IsInitialized() const {

  return true;
}

void NotifyPlayerEnterServer::Swap(NotifyPlayerEnterServer* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(sns_id_, other->sns_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPlayerEnterServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPlayerEnterServer_descriptor_;
  metadata.reflection = NotifyPlayerEnterServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
