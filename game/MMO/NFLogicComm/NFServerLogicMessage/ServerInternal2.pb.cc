// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternal2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerInternal2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* WorldToLogicGetRoleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToLogicGetRoleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToWorldGetRoleListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToWorldGetRoleListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyGateLeaveGame2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyGateLeaveGame2_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToLogicCreateRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToLogicCreateRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToWorldCreateRoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToWorldCreateRoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCenterDisConnect2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCenterDisConnect2_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProxyServerBusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProxyServerBusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WroldToProxyChangeServerBusId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WroldToProxyChangeServerBusId_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToOtherServerDisconnectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToOtherServerDisconnectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToLogicLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToLogicLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToWorldLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToWorldLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToSnsLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToSnsLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnsToWorldLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnsToWorldLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameToWorldRegisterMapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameToWorldRegisterMapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToGameRegisterMapRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToGameRegisterMapRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToLogicLoginFinishNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToLogicLoginFinishNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicToWorldEnterSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicToWorldEnterSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldToGameEnterSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldToGameEnterSceneReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServerInternal2_2eproto() {
  protobuf_AddDesc_ServerInternal2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServerInternal2.proto");
  GOOGLE_CHECK(file != NULL);
  WorldToLogicGetRoleList_descriptor_ = file->message_type(0);
  static const int WorldToLogicGetRoleList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicGetRoleList, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicGetRoleList, born_zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicGetRoleList, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicGetRoleList, client_id_),
  };
  WorldToLogicGetRoleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToLogicGetRoleList_descriptor_,
      WorldToLogicGetRoleList::default_instance_,
      WorldToLogicGetRoleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicGetRoleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicGetRoleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToLogicGetRoleList));
  LogicToWorldGetRoleListRsp_descriptor_ = file->message_type(1);
  static const int LogicToWorldGetRoleListRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, born_zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, role_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, register_num_),
  };
  LogicToWorldGetRoleListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToWorldGetRoleListRsp_descriptor_,
      LogicToWorldGetRoleListRsp::default_instance_,
      LogicToWorldGetRoleListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldGetRoleListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToWorldGetRoleListRsp));
  NotifyGateLeaveGame2_descriptor_ = file->message_type(2);
  static const int NotifyGateLeaveGame2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, leave_flag_),
  };
  NotifyGateLeaveGame2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyGateLeaveGame2_descriptor_,
      NotifyGateLeaveGame2::default_instance_,
      NotifyGateLeaveGame2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyGateLeaveGame2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyGateLeaveGame2));
  WorldToLogicCreateRoleReq_descriptor_ = file->message_type(3);
  static const int WorldToLogicCreateRoleReq_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, born_zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, zone_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, enter_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, enter_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, enterposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, enterposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, enterposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, lastsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, lastposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, lastposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, lastposz_),
  };
  WorldToLogicCreateRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToLogicCreateRoleReq_descriptor_,
      WorldToLogicCreateRoleReq::default_instance_,
      WorldToLogicCreateRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicCreateRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToLogicCreateRoleReq));
  LogicToWorldCreateRoleRsp_descriptor_ = file->message_type(4);
  static const int LogicToWorldCreateRoleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldCreateRoleRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldCreateRoleRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldCreateRoleRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldCreateRoleRsp, role_info_),
  };
  LogicToWorldCreateRoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToWorldCreateRoleRsp_descriptor_,
      LogicToWorldCreateRoleRsp::default_instance_,
      LogicToWorldCreateRoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldCreateRoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldCreateRoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToWorldCreateRoleRsp));
  NotifyCenterDisConnect2_descriptor_ = file->message_type(5);
  static const int NotifyCenterDisConnect2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, errflag_),
  };
  NotifyCenterDisConnect2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCenterDisConnect2_descriptor_,
      NotifyCenterDisConnect2::default_instance_,
      NotifyCenterDisConnect2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCenterDisConnect2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCenterDisConnect2));
  ProxyServerBusInfo_descriptor_ = file->message_type(6);
  static const int ProxyServerBusInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, bus_id_),
  };
  ProxyServerBusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProxyServerBusInfo_descriptor_,
      ProxyServerBusInfo::default_instance_,
      ProxyServerBusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProxyServerBusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProxyServerBusInfo));
  WroldToProxyChangeServerBusId_descriptor_ = file->message_type(7);
  static const int WroldToProxyChangeServerBusId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, server_info_),
  };
  WroldToProxyChangeServerBusId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WroldToProxyChangeServerBusId_descriptor_,
      WroldToProxyChangeServerBusId::default_instance_,
      WroldToProxyChangeServerBusId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WroldToProxyChangeServerBusId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WroldToProxyChangeServerBusId));
  WorldToOtherServerDisconnectNotify_descriptor_ = file->message_type(8);
  static const int WorldToOtherServerDisconnectNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, reason_),
  };
  WorldToOtherServerDisconnectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToOtherServerDisconnectNotify_descriptor_,
      WorldToOtherServerDisconnectNotify::default_instance_,
      WorldToOtherServerDisconnectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToOtherServerDisconnectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToOtherServerDisconnectNotify));
  WorldToLogicLoginReq_descriptor_ = file->message_type(9);
  static const int WorldToLogicLoginReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginReq, proxy_id_),
  };
  WorldToLogicLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToLogicLoginReq_descriptor_,
      WorldToLogicLoginReq::default_instance_,
      WorldToLogicLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToLogicLoginReq));
  LogicToWorldLoginRsp_descriptor_ = file->message_type(10);
  static const int LogicToWorldLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldLoginRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldLoginRsp, simple_data_),
  };
  LogicToWorldLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToWorldLoginRsp_descriptor_,
      LogicToWorldLoginRsp::default_instance_,
      LogicToWorldLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToWorldLoginRsp));
  WorldToSnsLoginReq_descriptor_ = file->message_type(11);
  static const int WorldToSnsLoginReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToSnsLoginReq, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToSnsLoginReq, logic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToSnsLoginReq, simple_data_),
  };
  WorldToSnsLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToSnsLoginReq_descriptor_,
      WorldToSnsLoginReq::default_instance_,
      WorldToSnsLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToSnsLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToSnsLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToSnsLoginReq));
  SnsToWorldLoginRsp_descriptor_ = file->message_type(12);
  static const int SnsToWorldLoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsToWorldLoginRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsToWorldLoginRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsToWorldLoginRsp, cid_),
  };
  SnsToWorldLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SnsToWorldLoginRsp_descriptor_,
      SnsToWorldLoginRsp::default_instance_,
      SnsToWorldLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsToWorldLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsToWorldLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SnsToWorldLoginRsp));
  GameToWorldRegisterMapReq_descriptor_ = file->message_type(13);
  static const int GameToWorldRegisterMapReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToWorldRegisterMapReq, game_bus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToWorldRegisterMapReq, map_id_),
  };
  GameToWorldRegisterMapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameToWorldRegisterMapReq_descriptor_,
      GameToWorldRegisterMapReq::default_instance_,
      GameToWorldRegisterMapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToWorldRegisterMapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameToWorldRegisterMapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameToWorldRegisterMapReq));
  WorldToGameRegisterMapRsp_descriptor_ = file->message_type(14);
  static const int WorldToGameRegisterMapRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameRegisterMapRsp, ret_code_),
  };
  WorldToGameRegisterMapRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToGameRegisterMapRsp_descriptor_,
      WorldToGameRegisterMapRsp::default_instance_,
      WorldToGameRegisterMapRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameRegisterMapRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameRegisterMapRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToGameRegisterMapRsp));
  WorldToLogicLoginFinishNotify_descriptor_ = file->message_type(15);
  static const int WorldToLogicLoginFinishNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginFinishNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginFinishNotify, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginFinishNotify, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginFinishNotify, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginFinishNotify, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginFinishNotify, pos_),
  };
  WorldToLogicLoginFinishNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToLogicLoginFinishNotify_descriptor_,
      WorldToLogicLoginFinishNotify::default_instance_,
      WorldToLogicLoginFinishNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginFinishNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToLogicLoginFinishNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToLogicLoginFinishNotify));
  LogicToWorldEnterSceneReq_descriptor_ = file->message_type(16);
  static const int LogicToWorldEnterSceneReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldEnterSceneReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldEnterSceneReq, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldEnterSceneReq, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldEnterSceneReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldEnterSceneReq, req_trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldEnterSceneReq, data_),
  };
  LogicToWorldEnterSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicToWorldEnterSceneReq_descriptor_,
      LogicToWorldEnterSceneReq::default_instance_,
      LogicToWorldEnterSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldEnterSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicToWorldEnterSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicToWorldEnterSceneReq));
  WorldToGameEnterSceneReq_descriptor_ = file->message_type(17);
  static const int WorldToGameEnterSceneReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, req_trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, gate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, logic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, data_),
  };
  WorldToGameEnterSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldToGameEnterSceneReq_descriptor_,
      WorldToGameEnterSceneReq::default_instance_,
      WorldToGameEnterSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldToGameEnterSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldToGameEnterSceneReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServerInternal2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToLogicGetRoleList_descriptor_, &WorldToLogicGetRoleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToWorldGetRoleListRsp_descriptor_, &LogicToWorldGetRoleListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyGateLeaveGame2_descriptor_, &NotifyGateLeaveGame2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToLogicCreateRoleReq_descriptor_, &WorldToLogicCreateRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToWorldCreateRoleRsp_descriptor_, &LogicToWorldCreateRoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCenterDisConnect2_descriptor_, &NotifyCenterDisConnect2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProxyServerBusInfo_descriptor_, &ProxyServerBusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WroldToProxyChangeServerBusId_descriptor_, &WroldToProxyChangeServerBusId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToOtherServerDisconnectNotify_descriptor_, &WorldToOtherServerDisconnectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToLogicLoginReq_descriptor_, &WorldToLogicLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToWorldLoginRsp_descriptor_, &LogicToWorldLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToSnsLoginReq_descriptor_, &WorldToSnsLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SnsToWorldLoginRsp_descriptor_, &SnsToWorldLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameToWorldRegisterMapReq_descriptor_, &GameToWorldRegisterMapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToGameRegisterMapRsp_descriptor_, &WorldToGameRegisterMapRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToLogicLoginFinishNotify_descriptor_, &WorldToLogicLoginFinishNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicToWorldEnterSceneReq_descriptor_, &LogicToWorldEnterSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldToGameEnterSceneReq_descriptor_, &WorldToGameEnterSceneReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServerInternal2_2eproto() {
  delete WorldToLogicGetRoleList::default_instance_;
  delete WorldToLogicGetRoleList_reflection_;
  delete LogicToWorldGetRoleListRsp::default_instance_;
  delete LogicToWorldGetRoleListRsp_reflection_;
  delete NotifyGateLeaveGame2::default_instance_;
  delete NotifyGateLeaveGame2_reflection_;
  delete WorldToLogicCreateRoleReq::default_instance_;
  delete WorldToLogicCreateRoleReq_reflection_;
  delete LogicToWorldCreateRoleRsp::default_instance_;
  delete LogicToWorldCreateRoleRsp_reflection_;
  delete NotifyCenterDisConnect2::default_instance_;
  delete NotifyCenterDisConnect2_reflection_;
  delete ProxyServerBusInfo::default_instance_;
  delete ProxyServerBusInfo_reflection_;
  delete WroldToProxyChangeServerBusId::default_instance_;
  delete WroldToProxyChangeServerBusId_reflection_;
  delete WorldToOtherServerDisconnectNotify::default_instance_;
  delete WorldToOtherServerDisconnectNotify_reflection_;
  delete WorldToLogicLoginReq::default_instance_;
  delete WorldToLogicLoginReq_reflection_;
  delete LogicToWorldLoginRsp::default_instance_;
  delete LogicToWorldLoginRsp_reflection_;
  delete WorldToSnsLoginReq::default_instance_;
  delete WorldToSnsLoginReq_reflection_;
  delete SnsToWorldLoginRsp::default_instance_;
  delete SnsToWorldLoginRsp_reflection_;
  delete GameToWorldRegisterMapReq::default_instance_;
  delete GameToWorldRegisterMapReq_reflection_;
  delete WorldToGameRegisterMapRsp::default_instance_;
  delete WorldToGameRegisterMapRsp_reflection_;
  delete WorldToLogicLoginFinishNotify::default_instance_;
  delete WorldToLogicLoginFinishNotify_reflection_;
  delete LogicToWorldEnterSceneReq::default_instance_;
  delete LogicToWorldEnterSceneReq_reflection_;
  delete WorldToGameEnterSceneReq::default_instance_;
  delete WorldToGameEnterSceneReq_reflection_;
}

void protobuf_AddDesc_ServerInternal2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_DBProto_2eproto();
  ::proto_ff::protobuf_AddDesc_DBProto2_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ServerInternal2.proto\022\010proto_ff\032\025yd_fi"
    "eldoptions.proto\032\022common_logic.proto\032\rDB"
    "Proto.proto\032\016DBProto2.proto\032\tCom.proto\032\017"
    "ComDefine.proto\"a\n\027WorldToLogicGetRoleLi"
    "st\022\013\n\003uid\030\001 \001(\004\022\024\n\014born_zone_id\030\002 \001(\r\022\020\n"
    "\010proxy_id\030\003 \001(\004\022\021\n\tclient_id\030\004 \001(\004\"\272\001\n\032L"
    "ogicToWorldGetRoleListRsp\022\020\n\010ret_code\030\001 "
    "\001(\005\022\013\n\003uid\030\002 \001(\004\022\024\n\014born_zone_id\030\003 \001(\r\022\020"
    "\n\010proxy_id\030\004 \001(\004\022\021\n\tclient_id\030\005 \001(\004\022,\n\016r"
    "ole_info_list\030\006 \003(\0132\024.proto_ff.RoleDBDat"
    "a\022\024\n\014register_num\030\007 \001(\r\"S\n\024NotifyGateLea"
    "veGame2\022\020\n\010clientid\030\001 \001(\004\022)\n\nleave_flag\030"
    "\003 \001(\0162\025.proto_ff.LOGOUT_TYPE\"\371\002\n\031WorldTo"
    "LogicCreateRoleReq\022\013\n\003uid\030\001 \001(\004\022\013\n\003cid\030\002"
    " \001(\004\022\013\n\003zid\030\003 \001(\r\022\020\n\010born_zid\030\004 \001(\r\022\022\n\nc"
    "hannel_id\030\005 \001(\r\022\020\n\010zone_mid\030\006 \001(\004\022\014\n\004nam"
    "e\030\007 \001(\t\022\014\n\004prof\030\010 \001(\r\022\r\n\005level\030\t \001(\r\022\r\n\005"
    "color\030\n \001(\r\022\026\n\016enter_scene_id\030\013 \001(\004\022\024\n\014e"
    "nter_map_id\030\014 \001(\004\022\021\n\tenterposx\030\r \001(\002\022\021\n\t"
    "enterposy\030\016 \001(\002\022\021\n\tenterposz\030\017 \001(\002\022\023\n\013la"
    "stsceneid\030\020 \001(\004\022\021\n\tlastmapid\030\021 \001(\004\022\020\n\010la"
    "stposx\030\022 \001(\002\022\020\n\010lastposy\030\023 \001(\002\022\020\n\010lastpo"
    "sz\030\024 \001(\002\"p\n\031LogicToWorldCreateRoleRsp\022\020\n"
    "\010ret_code\030\001 \001(\r\022\013\n\003uid\030\002 \001(\004\022\013\n\003cid\030\003 \001("
    "\004\022\'\n\trole_info\030\004 \001(\0132\024.proto_ff.RoleDBDa"
    "ta\"I\n\027NotifyCenterDisConnect2\022\020\n\010clientI"
    "d\030\001 \001(\004\022\013\n\003cid\030\002 \001(\004\022\017\n\007errflag\030\003 \001(\005\"9\n"
    "\022ProxyServerBusInfo\022\023\n\013server_type\030\001 \001(\r"
    "\022\016\n\006bus_id\030\002 \001(\r\"R\n\035WroldToProxyChangeSe"
    "rverBusId\0221\n\013server_info\030\001 \003(\0132\034.proto_f"
    "f.ProxyServerBusInfo\"D\n\"WorldToOtherServ"
    "erDisconnectNotify\022\016\n\006roleId\030\001 \001(\004\022\016\n\006re"
    "ason\030\002 \001(\r\"B\n\024WorldToLogicLoginReq\022\013\n\003ui"
    "d\030\001 \001(\004\022\013\n\003cid\030\002 \001(\004\022\020\n\010proxy_id\030\003 \001(\r\"Y"
    "\n\024LogicToWorldLoginRsp\022\020\n\010ret_code\030\001 \001(\r"
    "\022/\n\013simple_data\030\002 \001(\0132\032.proto_ff.RoleDBS"
    "impleData\"i\n\022WorldToSnsLoginReq\022\020\n\010proxy"
    "_id\030\001 \001(\r\022\020\n\010logic_id\030\002 \001(\r\022/\n\013simple_da"
    "ta\030\003 \001(\0132\032.proto_ff.RoleDBSimpleData\"@\n\022"
    "SnsToWorldLoginRsp\022\020\n\010ret_code\030\001 \001(\r\022\013\n\003"
    "uid\030\002 \001(\004\022\013\n\003cid\030\003 \001(\004\"=\n\031GameToWorldReg"
    "isterMapReq\022\020\n\010game_bus\030\001 \001(\r\022\016\n\006map_id\030"
    "\002 \003(\004\"-\n\031WorldToGameRegisterMapRsp\022\020\n\010re"
    "t_code\030\001 \001(\r\"\217\001\n\035WorldToLogicLoginFinish"
    "Notify\022\013\n\003uid\030\001 \001(\004\022\013\n\003cid\030\002 \001(\004\022\020\n\010prox"
    "y_id\030\003 \001(\r\022\016\n\006map_id\030\004 \001(\004\022\020\n\010scene_id\030\005"
    " \001(\004\022 \n\003pos\030\006 \001(\0132\023.proto_ff.Vector3PB\"\256"
    "\001\n\031LogicToWorldEnterSceneReq\022\013\n\003cid\030\001 \001("
    "\004\022\016\n\006map_id\030\002 \001(\004\022\020\n\010scene_id\030\003 \001(\004\022 \n\003p"
    "os\030\004 \001(\0132\023.proto_ff.Vector3PB\022\024\n\014req_tra"
    "ns_id\030\005 \001(\r\022*\n\004data\030\006 \001(\0132\034.proto_ff.Rol"
    "eEnterSceneData\"\320\001\n\030WorldToGameEnterScen"
    "eReq\022\013\n\003cid\030\001 \001(\004\022\016\n\006map_id\030\002 \001(\004\022\020\n\010sce"
    "ne_id\030\003 \001(\004\022 \n\003pos\030\004 \001(\0132\023.proto_ff.Vect"
    "or3PB\022\024\n\014req_trans_id\030\005 \001(\r\022\017\n\007gate_id\030\006"
    " \001(\r\022\020\n\010logic_id\030\007 \001(\r\022*\n\004data\030\010 \001(\0132\034.p"
    "roto_ff.RoleEnterSceneData", 2266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServerInternal2.proto", &protobuf_RegisterTypes);
  WorldToLogicGetRoleList::default_instance_ = new WorldToLogicGetRoleList();
  LogicToWorldGetRoleListRsp::default_instance_ = new LogicToWorldGetRoleListRsp();
  NotifyGateLeaveGame2::default_instance_ = new NotifyGateLeaveGame2();
  WorldToLogicCreateRoleReq::default_instance_ = new WorldToLogicCreateRoleReq();
  LogicToWorldCreateRoleRsp::default_instance_ = new LogicToWorldCreateRoleRsp();
  NotifyCenterDisConnect2::default_instance_ = new NotifyCenterDisConnect2();
  ProxyServerBusInfo::default_instance_ = new ProxyServerBusInfo();
  WroldToProxyChangeServerBusId::default_instance_ = new WroldToProxyChangeServerBusId();
  WorldToOtherServerDisconnectNotify::default_instance_ = new WorldToOtherServerDisconnectNotify();
  WorldToLogicLoginReq::default_instance_ = new WorldToLogicLoginReq();
  LogicToWorldLoginRsp::default_instance_ = new LogicToWorldLoginRsp();
  WorldToSnsLoginReq::default_instance_ = new WorldToSnsLoginReq();
  SnsToWorldLoginRsp::default_instance_ = new SnsToWorldLoginRsp();
  GameToWorldRegisterMapReq::default_instance_ = new GameToWorldRegisterMapReq();
  WorldToGameRegisterMapRsp::default_instance_ = new WorldToGameRegisterMapRsp();
  WorldToLogicLoginFinishNotify::default_instance_ = new WorldToLogicLoginFinishNotify();
  LogicToWorldEnterSceneReq::default_instance_ = new LogicToWorldEnterSceneReq();
  WorldToGameEnterSceneReq::default_instance_ = new WorldToGameEnterSceneReq();
  WorldToLogicGetRoleList::default_instance_->InitAsDefaultInstance();
  LogicToWorldGetRoleListRsp::default_instance_->InitAsDefaultInstance();
  NotifyGateLeaveGame2::default_instance_->InitAsDefaultInstance();
  WorldToLogicCreateRoleReq::default_instance_->InitAsDefaultInstance();
  LogicToWorldCreateRoleRsp::default_instance_->InitAsDefaultInstance();
  NotifyCenterDisConnect2::default_instance_->InitAsDefaultInstance();
  ProxyServerBusInfo::default_instance_->InitAsDefaultInstance();
  WroldToProxyChangeServerBusId::default_instance_->InitAsDefaultInstance();
  WorldToOtherServerDisconnectNotify::default_instance_->InitAsDefaultInstance();
  WorldToLogicLoginReq::default_instance_->InitAsDefaultInstance();
  LogicToWorldLoginRsp::default_instance_->InitAsDefaultInstance();
  WorldToSnsLoginReq::default_instance_->InitAsDefaultInstance();
  SnsToWorldLoginRsp::default_instance_->InitAsDefaultInstance();
  GameToWorldRegisterMapReq::default_instance_->InitAsDefaultInstance();
  WorldToGameRegisterMapRsp::default_instance_->InitAsDefaultInstance();
  WorldToLogicLoginFinishNotify::default_instance_->InitAsDefaultInstance();
  LogicToWorldEnterSceneReq::default_instance_->InitAsDefaultInstance();
  WorldToGameEnterSceneReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerInternal2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerInternal2_2eproto {
  StaticDescriptorInitializer_ServerInternal2_2eproto() {
    protobuf_AddDesc_ServerInternal2_2eproto();
  }
} static_descriptor_initializer_ServerInternal2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldToLogicGetRoleList::kUidFieldNumber;
const int WorldToLogicGetRoleList::kBornZoneIdFieldNumber;
const int WorldToLogicGetRoleList::kProxyIdFieldNumber;
const int WorldToLogicGetRoleList::kClientIdFieldNumber;
#endif  // !_MSC_VER

WorldToLogicGetRoleList::WorldToLogicGetRoleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToLogicGetRoleList::InitAsDefaultInstance() {
}

WorldToLogicGetRoleList::WorldToLogicGetRoleList(const WorldToLogicGetRoleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToLogicGetRoleList::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  born_zone_id_ = 0u;
  proxy_id_ = GOOGLE_ULONGLONG(0);
  client_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToLogicGetRoleList::~WorldToLogicGetRoleList() {
  SharedDtor();
}

void WorldToLogicGetRoleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldToLogicGetRoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToLogicGetRoleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToLogicGetRoleList_descriptor_;
}

const WorldToLogicGetRoleList& WorldToLogicGetRoleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToLogicGetRoleList* WorldToLogicGetRoleList::default_instance_ = NULL;

WorldToLogicGetRoleList* WorldToLogicGetRoleList::New() const {
  return new WorldToLogicGetRoleList;
}

void WorldToLogicGetRoleList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    born_zone_id_ = 0u;
    proxy_id_ = GOOGLE_ULONGLONG(0);
    client_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToLogicGetRoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_born_zone_id;
        break;
      }

      // optional uint32 born_zone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zone_id_)));
          set_has_born_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proxy_id;
        break;
      }

      // optional uint64 proxy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_id;
        break;
      }

      // optional uint64 client_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToLogicGetRoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 born_zone_id = 2;
  if (has_born_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->born_zone_id(), output);
  }

  // optional uint64 proxy_id = 3;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->proxy_id(), output);
  }

  // optional uint64 client_id = 4;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToLogicGetRoleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 born_zone_id = 2;
  if (has_born_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->born_zone_id(), target);
  }

  // optional uint64 proxy_id = 3;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->proxy_id(), target);
  }

  // optional uint64 client_id = 4;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToLogicGetRoleList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 born_zone_id = 2;
    if (has_born_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zone_id());
    }

    // optional uint64 proxy_id = 3;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proxy_id());
    }

    // optional uint64 client_id = 4;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToLogicGetRoleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToLogicGetRoleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToLogicGetRoleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToLogicGetRoleList::MergeFrom(const WorldToLogicGetRoleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_born_zone_id()) {
      set_born_zone_id(from.born_zone_id());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToLogicGetRoleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToLogicGetRoleList::CopyFrom(const WorldToLogicGetRoleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToLogicGetRoleList::IsInitialized() const {

  return true;
}

void WorldToLogicGetRoleList::Swap(WorldToLogicGetRoleList* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(born_zone_id_, other->born_zone_id_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToLogicGetRoleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToLogicGetRoleList_descriptor_;
  metadata.reflection = WorldToLogicGetRoleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToWorldGetRoleListRsp::kRetCodeFieldNumber;
const int LogicToWorldGetRoleListRsp::kUidFieldNumber;
const int LogicToWorldGetRoleListRsp::kBornZoneIdFieldNumber;
const int LogicToWorldGetRoleListRsp::kProxyIdFieldNumber;
const int LogicToWorldGetRoleListRsp::kClientIdFieldNumber;
const int LogicToWorldGetRoleListRsp::kRoleInfoListFieldNumber;
const int LogicToWorldGetRoleListRsp::kRegisterNumFieldNumber;
#endif  // !_MSC_VER

LogicToWorldGetRoleListRsp::LogicToWorldGetRoleListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToWorldGetRoleListRsp::InitAsDefaultInstance() {
}

LogicToWorldGetRoleListRsp::LogicToWorldGetRoleListRsp(const LogicToWorldGetRoleListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToWorldGetRoleListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  born_zone_id_ = 0u;
  proxy_id_ = GOOGLE_ULONGLONG(0);
  client_id_ = GOOGLE_ULONGLONG(0);
  register_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToWorldGetRoleListRsp::~LogicToWorldGetRoleListRsp() {
  SharedDtor();
}

void LogicToWorldGetRoleListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogicToWorldGetRoleListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToWorldGetRoleListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToWorldGetRoleListRsp_descriptor_;
}

const LogicToWorldGetRoleListRsp& LogicToWorldGetRoleListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

LogicToWorldGetRoleListRsp* LogicToWorldGetRoleListRsp::default_instance_ = NULL;

LogicToWorldGetRoleListRsp* LogicToWorldGetRoleListRsp::New() const {
  return new LogicToWorldGetRoleListRsp;
}

void LogicToWorldGetRoleListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    uid_ = GOOGLE_ULONGLONG(0);
    born_zone_id_ = 0u;
    proxy_id_ = GOOGLE_ULONGLONG(0);
    client_id_ = GOOGLE_ULONGLONG(0);
    register_num_ = 0u;
  }
  role_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToWorldGetRoleListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_born_zone_id;
        break;
      }

      // optional uint32 born_zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zone_id_)));
          set_has_born_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proxy_id;
        break;
      }

      // optional uint64 proxy_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_client_id;
        break;
      }

      // optional uint64 client_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_info_list;
        break;
      }

      // repeated .proto_ff.RoleDBData role_info_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_info_list;
        if (input->ExpectTag(56)) goto parse_register_num;
        break;
      }

      // optional uint32 register_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_register_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &register_num_)));
          set_has_register_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToWorldGetRoleListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional uint32 born_zone_id = 3;
  if (has_born_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->born_zone_id(), output);
  }

  // optional uint64 proxy_id = 4;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->proxy_id(), output);
  }

  // optional uint64 client_id = 5;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->client_id(), output);
  }

  // repeated .proto_ff.RoleDBData role_info_list = 6;
  for (int i = 0; i < this->role_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->role_info_list(i), output);
  }

  // optional uint32 register_num = 7;
  if (has_register_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->register_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToWorldGetRoleListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional uint32 born_zone_id = 3;
  if (has_born_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->born_zone_id(), target);
  }

  // optional uint64 proxy_id = 4;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->proxy_id(), target);
  }

  // optional uint64 client_id = 5;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->client_id(), target);
  }

  // repeated .proto_ff.RoleDBData role_info_list = 6;
  for (int i = 0; i < this->role_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->role_info_list(i), target);
  }

  // optional uint32 register_num = 7;
  if (has_register_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->register_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToWorldGetRoleListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 born_zone_id = 3;
    if (has_born_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zone_id());
    }

    // optional uint64 proxy_id = 4;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proxy_id());
    }

    // optional uint64 client_id = 5;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // optional uint32 register_num = 7;
    if (has_register_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->register_num());
    }

  }
  // repeated .proto_ff.RoleDBData role_info_list = 6;
  total_size += 1 * this->role_info_list_size();
  for (int i = 0; i < this->role_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToWorldGetRoleListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToWorldGetRoleListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToWorldGetRoleListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToWorldGetRoleListRsp::MergeFrom(const LogicToWorldGetRoleListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_info_list_.MergeFrom(from.role_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_born_zone_id()) {
      set_born_zone_id(from.born_zone_id());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_register_num()) {
      set_register_num(from.register_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToWorldGetRoleListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToWorldGetRoleListRsp::CopyFrom(const LogicToWorldGetRoleListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToWorldGetRoleListRsp::IsInitialized() const {

  for (int i = 0; i < role_info_list_size(); i++) {
    if (!this->role_info_list(i).IsInitialized()) return false;
  }
  return true;
}

void LogicToWorldGetRoleListRsp::Swap(LogicToWorldGetRoleListRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(uid_, other->uid_);
    std::swap(born_zone_id_, other->born_zone_id_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(client_id_, other->client_id_);
    role_info_list_.Swap(&other->role_info_list_);
    std::swap(register_num_, other->register_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToWorldGetRoleListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToWorldGetRoleListRsp_descriptor_;
  metadata.reflection = LogicToWorldGetRoleListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyGateLeaveGame2::kClientidFieldNumber;
const int NotifyGateLeaveGame2::kLeaveFlagFieldNumber;
#endif  // !_MSC_VER

NotifyGateLeaveGame2::NotifyGateLeaveGame2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyGateLeaveGame2::InitAsDefaultInstance() {
}

NotifyGateLeaveGame2::NotifyGateLeaveGame2(const NotifyGateLeaveGame2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyGateLeaveGame2::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  leave_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyGateLeaveGame2::~NotifyGateLeaveGame2() {
  SharedDtor();
}

void NotifyGateLeaveGame2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyGateLeaveGame2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyGateLeaveGame2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyGateLeaveGame2_descriptor_;
}

const NotifyGateLeaveGame2& NotifyGateLeaveGame2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyGateLeaveGame2* NotifyGateLeaveGame2::default_instance_ = NULL;

NotifyGateLeaveGame2* NotifyGateLeaveGame2::New() const {
  return new NotifyGateLeaveGame2;
}

void NotifyGateLeaveGame2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = GOOGLE_ULONGLONG(0);
    leave_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyGateLeaveGame2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leave_flag;
        break;
      }

      // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::LOGOUT_TYPE_IsValid(value)) {
            set_leave_flag(static_cast< ::proto_ff::LOGOUT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyGateLeaveGame2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clientid = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clientid(), output);
  }

  // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
  if (has_leave_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->leave_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyGateLeaveGame2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clientid = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clientid(), target);
  }

  // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
  if (has_leave_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->leave_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyGateLeaveGame2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clientid = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // optional .proto_ff.LOGOUT_TYPE leave_flag = 3;
    if (has_leave_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leave_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyGateLeaveGame2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyGateLeaveGame2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyGateLeaveGame2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyGateLeaveGame2::MergeFrom(const NotifyGateLeaveGame2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_leave_flag()) {
      set_leave_flag(from.leave_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyGateLeaveGame2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyGateLeaveGame2::CopyFrom(const NotifyGateLeaveGame2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyGateLeaveGame2::IsInitialized() const {

  return true;
}

void NotifyGateLeaveGame2::Swap(NotifyGateLeaveGame2* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(leave_flag_, other->leave_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyGateLeaveGame2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyGateLeaveGame2_descriptor_;
  metadata.reflection = NotifyGateLeaveGame2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToLogicCreateRoleReq::kUidFieldNumber;
const int WorldToLogicCreateRoleReq::kCidFieldNumber;
const int WorldToLogicCreateRoleReq::kZidFieldNumber;
const int WorldToLogicCreateRoleReq::kBornZidFieldNumber;
const int WorldToLogicCreateRoleReq::kChannelIdFieldNumber;
const int WorldToLogicCreateRoleReq::kZoneMidFieldNumber;
const int WorldToLogicCreateRoleReq::kNameFieldNumber;
const int WorldToLogicCreateRoleReq::kProfFieldNumber;
const int WorldToLogicCreateRoleReq::kLevelFieldNumber;
const int WorldToLogicCreateRoleReq::kColorFieldNumber;
const int WorldToLogicCreateRoleReq::kEnterSceneIdFieldNumber;
const int WorldToLogicCreateRoleReq::kEnterMapIdFieldNumber;
const int WorldToLogicCreateRoleReq::kEnterposxFieldNumber;
const int WorldToLogicCreateRoleReq::kEnterposyFieldNumber;
const int WorldToLogicCreateRoleReq::kEnterposzFieldNumber;
const int WorldToLogicCreateRoleReq::kLastsceneidFieldNumber;
const int WorldToLogicCreateRoleReq::kLastmapidFieldNumber;
const int WorldToLogicCreateRoleReq::kLastposxFieldNumber;
const int WorldToLogicCreateRoleReq::kLastposyFieldNumber;
const int WorldToLogicCreateRoleReq::kLastposzFieldNumber;
#endif  // !_MSC_VER

WorldToLogicCreateRoleReq::WorldToLogicCreateRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToLogicCreateRoleReq::InitAsDefaultInstance() {
}

WorldToLogicCreateRoleReq::WorldToLogicCreateRoleReq(const WorldToLogicCreateRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToLogicCreateRoleReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  born_zid_ = 0u;
  channel_id_ = 0u;
  zone_mid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  color_ = 0u;
  enter_scene_id_ = GOOGLE_ULONGLONG(0);
  enter_map_id_ = GOOGLE_ULONGLONG(0);
  enterposx_ = 0;
  enterposy_ = 0;
  enterposz_ = 0;
  lastsceneid_ = GOOGLE_ULONGLONG(0);
  lastmapid_ = GOOGLE_ULONGLONG(0);
  lastposx_ = 0;
  lastposy_ = 0;
  lastposz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToLogicCreateRoleReq::~WorldToLogicCreateRoleReq() {
  SharedDtor();
}

void WorldToLogicCreateRoleReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WorldToLogicCreateRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToLogicCreateRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToLogicCreateRoleReq_descriptor_;
}

const WorldToLogicCreateRoleReq& WorldToLogicCreateRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToLogicCreateRoleReq* WorldToLogicCreateRoleReq::default_instance_ = NULL;

WorldToLogicCreateRoleReq* WorldToLogicCreateRoleReq::New() const {
  return new WorldToLogicCreateRoleReq;
}

void WorldToLogicCreateRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    born_zid_ = 0u;
    channel_id_ = 0u;
    zone_mid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0u;
    color_ = 0u;
    enter_scene_id_ = GOOGLE_ULONGLONG(0);
    enter_map_id_ = GOOGLE_ULONGLONG(0);
    enterposx_ = 0;
    enterposy_ = 0;
    enterposz_ = 0;
    lastsceneid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lastmapid_ = GOOGLE_ULONGLONG(0);
    lastposx_ = 0;
    lastposy_ = 0;
    lastposz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToLogicCreateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_born_zid;
        break;
      }

      // optional uint32 born_zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zid_)));
          set_has_born_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_zone_mid;
        break;
      }

      // optional uint64 zone_mid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zone_mid_)));
          set_has_zone_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional uint32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_color;
        break;
      }

      // optional uint32 color = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_enter_scene_id;
        break;
      }

      // optional uint64 enter_scene_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_scene_id_)));
          set_has_enter_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_enter_map_id;
        break;
      }

      // optional uint64 enter_map_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_map_id_)));
          set_has_enter_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_enterposx;
        break;
      }

      // optional float enterposx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposx_)));
          set_has_enterposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_enterposy;
        break;
      }

      // optional float enterposy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposy_)));
          set_has_enterposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_enterposz;
        break;
      }

      // optional float enterposz = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposz_)));
          set_has_enterposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lastsceneid;
        break;
      }

      // optional uint64 lastsceneid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastsceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsceneid_)));
          set_has_lastsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lastmapid;
        break;
      }

      // optional uint64 lastmapid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_lastposx;
        break;
      }

      // optional float lastposx = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposx_)));
          set_has_lastposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_lastposy;
        break;
      }

      // optional float lastposy = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposy_)));
          set_has_lastposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_lastposz;
        break;
      }

      // optional float lastposz = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposz_)));
          set_has_lastposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToLogicCreateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional uint32 born_zid = 4;
  if (has_born_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->born_zid(), output);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->channel_id(), output);
  }

  // optional uint64 zone_mid = 6;
  if (has_zone_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->zone_mid(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional uint32 prof = 8;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->prof(), output);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // optional uint32 color = 10;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->color(), output);
  }

  // optional uint64 enter_scene_id = 11;
  if (has_enter_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->enter_scene_id(), output);
  }

  // optional uint64 enter_map_id = 12;
  if (has_enter_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->enter_map_id(), output);
  }

  // optional float enterposx = 13;
  if (has_enterposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->enterposx(), output);
  }

  // optional float enterposy = 14;
  if (has_enterposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->enterposy(), output);
  }

  // optional float enterposz = 15;
  if (has_enterposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->enterposz(), output);
  }

  // optional uint64 lastsceneid = 16;
  if (has_lastsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->lastsceneid(), output);
  }

  // optional uint64 lastmapid = 17;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->lastmapid(), output);
  }

  // optional float lastposx = 18;
  if (has_lastposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->lastposx(), output);
  }

  // optional float lastposy = 19;
  if (has_lastposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->lastposy(), output);
  }

  // optional float lastposz = 20;
  if (has_lastposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->lastposz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToLogicCreateRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional uint32 born_zid = 4;
  if (has_born_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->born_zid(), target);
  }

  // optional uint32 channel_id = 5;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->channel_id(), target);
  }

  // optional uint64 zone_mid = 6;
  if (has_zone_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->zone_mid(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional uint32 prof = 8;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->prof(), target);
  }

  // optional uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // optional uint32 color = 10;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->color(), target);
  }

  // optional uint64 enter_scene_id = 11;
  if (has_enter_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->enter_scene_id(), target);
  }

  // optional uint64 enter_map_id = 12;
  if (has_enter_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->enter_map_id(), target);
  }

  // optional float enterposx = 13;
  if (has_enterposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->enterposx(), target);
  }

  // optional float enterposy = 14;
  if (has_enterposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->enterposy(), target);
  }

  // optional float enterposz = 15;
  if (has_enterposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->enterposz(), target);
  }

  // optional uint64 lastsceneid = 16;
  if (has_lastsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->lastsceneid(), target);
  }

  // optional uint64 lastmapid = 17;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->lastmapid(), target);
  }

  // optional float lastposx = 18;
  if (has_lastposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->lastposx(), target);
  }

  // optional float lastposy = 19;
  if (has_lastposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->lastposy(), target);
  }

  // optional float lastposz = 20;
  if (has_lastposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->lastposz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToLogicCreateRoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 born_zid = 4;
    if (has_born_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zid());
    }

    // optional uint32 channel_id = 5;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint64 zone_mid = 6;
    if (has_zone_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zone_mid());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 prof = 8;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 color = 10;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint64 enter_scene_id = 11;
    if (has_enter_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_scene_id());
    }

    // optional uint64 enter_map_id = 12;
    if (has_enter_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_map_id());
    }

    // optional float enterposx = 13;
    if (has_enterposx()) {
      total_size += 1 + 4;
    }

    // optional float enterposy = 14;
    if (has_enterposy()) {
      total_size += 1 + 4;
    }

    // optional float enterposz = 15;
    if (has_enterposz()) {
      total_size += 1 + 4;
    }

    // optional uint64 lastsceneid = 16;
    if (has_lastsceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsceneid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 lastmapid = 17;
    if (has_lastmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmapid());
    }

    // optional float lastposx = 18;
    if (has_lastposx()) {
      total_size += 2 + 4;
    }

    // optional float lastposy = 19;
    if (has_lastposy()) {
      total_size += 2 + 4;
    }

    // optional float lastposz = 20;
    if (has_lastposz()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToLogicCreateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToLogicCreateRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToLogicCreateRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToLogicCreateRoleReq::MergeFrom(const WorldToLogicCreateRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_born_zid()) {
      set_born_zid(from.born_zid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_zone_mid()) {
      set_zone_mid(from.zone_mid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_enter_scene_id()) {
      set_enter_scene_id(from.enter_scene_id());
    }
    if (from.has_enter_map_id()) {
      set_enter_map_id(from.enter_map_id());
    }
    if (from.has_enterposx()) {
      set_enterposx(from.enterposx());
    }
    if (from.has_enterposy()) {
      set_enterposy(from.enterposy());
    }
    if (from.has_enterposz()) {
      set_enterposz(from.enterposz());
    }
    if (from.has_lastsceneid()) {
      set_lastsceneid(from.lastsceneid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
    if (from.has_lastposx()) {
      set_lastposx(from.lastposx());
    }
    if (from.has_lastposy()) {
      set_lastposy(from.lastposy());
    }
    if (from.has_lastposz()) {
      set_lastposz(from.lastposz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToLogicCreateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToLogicCreateRoleReq::CopyFrom(const WorldToLogicCreateRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToLogicCreateRoleReq::IsInitialized() const {

  return true;
}

void WorldToLogicCreateRoleReq::Swap(WorldToLogicCreateRoleReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(born_zid_, other->born_zid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(zone_mid_, other->zone_mid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(color_, other->color_);
    std::swap(enter_scene_id_, other->enter_scene_id_);
    std::swap(enter_map_id_, other->enter_map_id_);
    std::swap(enterposx_, other->enterposx_);
    std::swap(enterposy_, other->enterposy_);
    std::swap(enterposz_, other->enterposz_);
    std::swap(lastsceneid_, other->lastsceneid_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastposx_, other->lastposx_);
    std::swap(lastposy_, other->lastposy_);
    std::swap(lastposz_, other->lastposz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToLogicCreateRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToLogicCreateRoleReq_descriptor_;
  metadata.reflection = WorldToLogicCreateRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToWorldCreateRoleRsp::kRetCodeFieldNumber;
const int LogicToWorldCreateRoleRsp::kUidFieldNumber;
const int LogicToWorldCreateRoleRsp::kCidFieldNumber;
const int LogicToWorldCreateRoleRsp::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

LogicToWorldCreateRoleRsp::LogicToWorldCreateRoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToWorldCreateRoleRsp::InitAsDefaultInstance() {
  role_info_ = const_cast< ::proto_ff::RoleDBData*>(&::proto_ff::RoleDBData::default_instance());
}

LogicToWorldCreateRoleRsp::LogicToWorldCreateRoleRsp(const LogicToWorldCreateRoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToWorldCreateRoleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  role_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToWorldCreateRoleRsp::~LogicToWorldCreateRoleRsp() {
  SharedDtor();
}

void LogicToWorldCreateRoleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete role_info_;
  }
}

void LogicToWorldCreateRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToWorldCreateRoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToWorldCreateRoleRsp_descriptor_;
}

const LogicToWorldCreateRoleRsp& LogicToWorldCreateRoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

LogicToWorldCreateRoleRsp* LogicToWorldCreateRoleRsp::default_instance_ = NULL;

LogicToWorldCreateRoleRsp* LogicToWorldCreateRoleRsp::New() const {
  return new LogicToWorldCreateRoleRsp;
}

void LogicToWorldCreateRoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0u;
    uid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_role_info()) {
      if (role_info_ != NULL) role_info_->::proto_ff::RoleDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToWorldCreateRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_info;
        break;
      }

      // optional .proto_ff.RoleDBData role_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToWorldCreateRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret_code(), output);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional .proto_ff.RoleDBData role_info = 4;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToWorldCreateRoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional .proto_ff.RoleDBData role_info = 4;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToWorldCreateRoleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.RoleDBData role_info = 4;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToWorldCreateRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToWorldCreateRoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToWorldCreateRoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToWorldCreateRoleRsp::MergeFrom(const LogicToWorldCreateRoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_role_info()) {
      mutable_role_info()->::proto_ff::RoleDBData::MergeFrom(from.role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToWorldCreateRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToWorldCreateRoleRsp::CopyFrom(const LogicToWorldCreateRoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToWorldCreateRoleRsp::IsInitialized() const {

  if (has_role_info()) {
    if (!this->role_info().IsInitialized()) return false;
  }
  return true;
}

void LogicToWorldCreateRoleRsp::Swap(LogicToWorldCreateRoleRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(role_info_, other->role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToWorldCreateRoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToWorldCreateRoleRsp_descriptor_;
  metadata.reflection = LogicToWorldCreateRoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyCenterDisConnect2::kClientIdFieldNumber;
const int NotifyCenterDisConnect2::kCidFieldNumber;
const int NotifyCenterDisConnect2::kErrflagFieldNumber;
#endif  // !_MSC_VER

NotifyCenterDisConnect2::NotifyCenterDisConnect2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCenterDisConnect2::InitAsDefaultInstance() {
}

NotifyCenterDisConnect2::NotifyCenterDisConnect2(const NotifyCenterDisConnect2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCenterDisConnect2::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  errflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCenterDisConnect2::~NotifyCenterDisConnect2() {
  SharedDtor();
}

void NotifyCenterDisConnect2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCenterDisConnect2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCenterDisConnect2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCenterDisConnect2_descriptor_;
}

const NotifyCenterDisConnect2& NotifyCenterDisConnect2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

NotifyCenterDisConnect2* NotifyCenterDisConnect2::default_instance_ = NULL;

NotifyCenterDisConnect2* NotifyCenterDisConnect2::New() const {
  return new NotifyCenterDisConnect2;
}

void NotifyCenterDisConnect2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    errflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCenterDisConnect2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errflag;
        break;
      }

      // optional int32 errflag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errflag_)));
          set_has_errflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCenterDisConnect2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clientid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 errflag = 3;
  if (has_errflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCenterDisConnect2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clientid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 errflag = 3;
  if (has_errflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCenterDisConnect2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 clientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 errflag = 3;
    if (has_errflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCenterDisConnect2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCenterDisConnect2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCenterDisConnect2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCenterDisConnect2::MergeFrom(const NotifyCenterDisConnect2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_errflag()) {
      set_errflag(from.errflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCenterDisConnect2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCenterDisConnect2::CopyFrom(const NotifyCenterDisConnect2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCenterDisConnect2::IsInitialized() const {

  return true;
}

void NotifyCenterDisConnect2::Swap(NotifyCenterDisConnect2* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(cid_, other->cid_);
    std::swap(errflag_, other->errflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCenterDisConnect2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCenterDisConnect2_descriptor_;
  metadata.reflection = NotifyCenterDisConnect2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProxyServerBusInfo::kServerTypeFieldNumber;
const int ProxyServerBusInfo::kBusIdFieldNumber;
#endif  // !_MSC_VER

ProxyServerBusInfo::ProxyServerBusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProxyServerBusInfo::InitAsDefaultInstance() {
}

ProxyServerBusInfo::ProxyServerBusInfo(const ProxyServerBusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProxyServerBusInfo::SharedCtor() {
  _cached_size_ = 0;
  server_type_ = 0u;
  bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProxyServerBusInfo::~ProxyServerBusInfo() {
  SharedDtor();
}

void ProxyServerBusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProxyServerBusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProxyServerBusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProxyServerBusInfo_descriptor_;
}

const ProxyServerBusInfo& ProxyServerBusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

ProxyServerBusInfo* ProxyServerBusInfo::default_instance_ = NULL;

ProxyServerBusInfo* ProxyServerBusInfo::New() const {
  return new ProxyServerBusInfo;
}

void ProxyServerBusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_type_ = 0u;
    bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProxyServerBusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bus_id;
        break;
      }

      // optional uint32 bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProxyServerBusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProxyServerBusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProxyServerBusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_type = 1;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint32 bus_id = 2;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProxyServerBusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProxyServerBusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProxyServerBusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProxyServerBusInfo::MergeFrom(const ProxyServerBusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProxyServerBusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProxyServerBusInfo::CopyFrom(const ProxyServerBusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProxyServerBusInfo::IsInitialized() const {

  return true;
}

void ProxyServerBusInfo::Swap(ProxyServerBusInfo* other) {
  if (other != this) {
    std::swap(server_type_, other->server_type_);
    std::swap(bus_id_, other->bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProxyServerBusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProxyServerBusInfo_descriptor_;
  metadata.reflection = ProxyServerBusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WroldToProxyChangeServerBusId::kServerInfoFieldNumber;
#endif  // !_MSC_VER

WroldToProxyChangeServerBusId::WroldToProxyChangeServerBusId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WroldToProxyChangeServerBusId::InitAsDefaultInstance() {
}

WroldToProxyChangeServerBusId::WroldToProxyChangeServerBusId(const WroldToProxyChangeServerBusId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WroldToProxyChangeServerBusId::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WroldToProxyChangeServerBusId::~WroldToProxyChangeServerBusId() {
  SharedDtor();
}

void WroldToProxyChangeServerBusId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WroldToProxyChangeServerBusId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WroldToProxyChangeServerBusId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WroldToProxyChangeServerBusId_descriptor_;
}

const WroldToProxyChangeServerBusId& WroldToProxyChangeServerBusId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WroldToProxyChangeServerBusId* WroldToProxyChangeServerBusId::default_instance_ = NULL;

WroldToProxyChangeServerBusId* WroldToProxyChangeServerBusId::New() const {
  return new WroldToProxyChangeServerBusId;
}

void WroldToProxyChangeServerBusId::Clear() {
  server_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WroldToProxyChangeServerBusId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WroldToProxyChangeServerBusId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  for (int i = 0; i < this->server_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WroldToProxyChangeServerBusId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  for (int i = 0; i < this->server_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WroldToProxyChangeServerBusId::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ProxyServerBusInfo server_info = 1;
  total_size += 1 * this->server_info_size();
  for (int i = 0; i < this->server_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WroldToProxyChangeServerBusId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WroldToProxyChangeServerBusId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WroldToProxyChangeServerBusId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WroldToProxyChangeServerBusId::MergeFrom(const WroldToProxyChangeServerBusId& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_info_.MergeFrom(from.server_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WroldToProxyChangeServerBusId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WroldToProxyChangeServerBusId::CopyFrom(const WroldToProxyChangeServerBusId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WroldToProxyChangeServerBusId::IsInitialized() const {

  return true;
}

void WroldToProxyChangeServerBusId::Swap(WroldToProxyChangeServerBusId* other) {
  if (other != this) {
    server_info_.Swap(&other->server_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WroldToProxyChangeServerBusId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WroldToProxyChangeServerBusId_descriptor_;
  metadata.reflection = WroldToProxyChangeServerBusId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToOtherServerDisconnectNotify::kRoleIdFieldNumber;
const int WorldToOtherServerDisconnectNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

WorldToOtherServerDisconnectNotify::WorldToOtherServerDisconnectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToOtherServerDisconnectNotify::InitAsDefaultInstance() {
}

WorldToOtherServerDisconnectNotify::WorldToOtherServerDisconnectNotify(const WorldToOtherServerDisconnectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToOtherServerDisconnectNotify::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToOtherServerDisconnectNotify::~WorldToOtherServerDisconnectNotify() {
  SharedDtor();
}

void WorldToOtherServerDisconnectNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldToOtherServerDisconnectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToOtherServerDisconnectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToOtherServerDisconnectNotify_descriptor_;
}

const WorldToOtherServerDisconnectNotify& WorldToOtherServerDisconnectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToOtherServerDisconnectNotify* WorldToOtherServerDisconnectNotify::default_instance_ = NULL;

WorldToOtherServerDisconnectNotify* WorldToOtherServerDisconnectNotify::New() const {
  return new WorldToOtherServerDisconnectNotify;
}

void WorldToOtherServerDisconnectNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToOtherServerDisconnectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToOtherServerDisconnectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToOtherServerDisconnectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional uint32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToOtherServerDisconnectNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToOtherServerDisconnectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToOtherServerDisconnectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToOtherServerDisconnectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToOtherServerDisconnectNotify::MergeFrom(const WorldToOtherServerDisconnectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToOtherServerDisconnectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToOtherServerDisconnectNotify::CopyFrom(const WorldToOtherServerDisconnectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToOtherServerDisconnectNotify::IsInitialized() const {

  return true;
}

void WorldToOtherServerDisconnectNotify::Swap(WorldToOtherServerDisconnectNotify* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToOtherServerDisconnectNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToOtherServerDisconnectNotify_descriptor_;
  metadata.reflection = WorldToOtherServerDisconnectNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToLogicLoginReq::kUidFieldNumber;
const int WorldToLogicLoginReq::kCidFieldNumber;
const int WorldToLogicLoginReq::kProxyIdFieldNumber;
#endif  // !_MSC_VER

WorldToLogicLoginReq::WorldToLogicLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToLogicLoginReq::InitAsDefaultInstance() {
}

WorldToLogicLoginReq::WorldToLogicLoginReq(const WorldToLogicLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToLogicLoginReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  proxy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToLogicLoginReq::~WorldToLogicLoginReq() {
  SharedDtor();
}

void WorldToLogicLoginReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldToLogicLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToLogicLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToLogicLoginReq_descriptor_;
}

const WorldToLogicLoginReq& WorldToLogicLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToLogicLoginReq* WorldToLogicLoginReq::default_instance_ = NULL;

WorldToLogicLoginReq* WorldToLogicLoginReq::New() const {
  return new WorldToLogicLoginReq;
}

void WorldToLogicLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    proxy_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToLogicLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proxy_id;
        break;
      }

      // optional uint32 proxy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToLogicLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 proxy_id = 3;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proxy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToLogicLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 proxy_id = 3;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->proxy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToLogicLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 proxy_id = 3;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToLogicLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToLogicLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToLogicLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToLogicLoginReq::MergeFrom(const WorldToLogicLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToLogicLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToLogicLoginReq::CopyFrom(const WorldToLogicLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToLogicLoginReq::IsInitialized() const {

  return true;
}

void WorldToLogicLoginReq::Swap(WorldToLogicLoginReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToLogicLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToLogicLoginReq_descriptor_;
  metadata.reflection = WorldToLogicLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToWorldLoginRsp::kRetCodeFieldNumber;
const int LogicToWorldLoginRsp::kSimpleDataFieldNumber;
#endif  // !_MSC_VER

LogicToWorldLoginRsp::LogicToWorldLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToWorldLoginRsp::InitAsDefaultInstance() {
  simple_data_ = const_cast< ::proto_ff::RoleDBSimpleData*>(&::proto_ff::RoleDBSimpleData::default_instance());
}

LogicToWorldLoginRsp::LogicToWorldLoginRsp(const LogicToWorldLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToWorldLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0u;
  simple_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToWorldLoginRsp::~LogicToWorldLoginRsp() {
  SharedDtor();
}

void LogicToWorldLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete simple_data_;
  }
}

void LogicToWorldLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToWorldLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToWorldLoginRsp_descriptor_;
}

const LogicToWorldLoginRsp& LogicToWorldLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

LogicToWorldLoginRsp* LogicToWorldLoginRsp::default_instance_ = NULL;

LogicToWorldLoginRsp* LogicToWorldLoginRsp::New() const {
  return new LogicToWorldLoginRsp;
}

void LogicToWorldLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0u;
    if (has_simple_data()) {
      if (simple_data_ != NULL) simple_data_->::proto_ff::RoleDBSimpleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToWorldLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_data;
        break;
      }

      // optional .proto_ff.RoleDBSimpleData simple_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToWorldLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.RoleDBSimpleData simple_data = 2;
  if (has_simple_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToWorldLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.RoleDBSimpleData simple_data = 2;
  if (has_simple_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToWorldLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional .proto_ff.RoleDBSimpleData simple_data = 2;
    if (has_simple_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToWorldLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToWorldLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToWorldLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToWorldLoginRsp::MergeFrom(const LogicToWorldLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_simple_data()) {
      mutable_simple_data()->::proto_ff::RoleDBSimpleData::MergeFrom(from.simple_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToWorldLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToWorldLoginRsp::CopyFrom(const LogicToWorldLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToWorldLoginRsp::IsInitialized() const {

  if (has_simple_data()) {
    if (!this->simple_data().IsInitialized()) return false;
  }
  return true;
}

void LogicToWorldLoginRsp::Swap(LogicToWorldLoginRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(simple_data_, other->simple_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToWorldLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToWorldLoginRsp_descriptor_;
  metadata.reflection = LogicToWorldLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToSnsLoginReq::kProxyIdFieldNumber;
const int WorldToSnsLoginReq::kLogicIdFieldNumber;
const int WorldToSnsLoginReq::kSimpleDataFieldNumber;
#endif  // !_MSC_VER

WorldToSnsLoginReq::WorldToSnsLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToSnsLoginReq::InitAsDefaultInstance() {
  simple_data_ = const_cast< ::proto_ff::RoleDBSimpleData*>(&::proto_ff::RoleDBSimpleData::default_instance());
}

WorldToSnsLoginReq::WorldToSnsLoginReq(const WorldToSnsLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToSnsLoginReq::SharedCtor() {
  _cached_size_ = 0;
  proxy_id_ = 0u;
  logic_id_ = 0u;
  simple_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToSnsLoginReq::~WorldToSnsLoginReq() {
  SharedDtor();
}

void WorldToSnsLoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete simple_data_;
  }
}

void WorldToSnsLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToSnsLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToSnsLoginReq_descriptor_;
}

const WorldToSnsLoginReq& WorldToSnsLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToSnsLoginReq* WorldToSnsLoginReq::default_instance_ = NULL;

WorldToSnsLoginReq* WorldToSnsLoginReq::New() const {
  return new WorldToSnsLoginReq;
}

void WorldToSnsLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proxy_id_ = 0u;
    logic_id_ = 0u;
    if (has_simple_data()) {
      if (simple_data_ != NULL) simple_data_->::proto_ff::RoleDBSimpleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToSnsLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 proxy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_id;
        break;
      }

      // optional uint32 logic_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_simple_data;
        break;
      }

      // optional .proto_ff.RoleDBSimpleData simple_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToSnsLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 proxy_id = 1;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->proxy_id(), output);
  }

  // optional uint32 logic_id = 2;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logic_id(), output);
  }

  // optional .proto_ff.RoleDBSimpleData simple_data = 3;
  if (has_simple_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->simple_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToSnsLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 proxy_id = 1;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->proxy_id(), target);
  }

  // optional uint32 logic_id = 2;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logic_id(), target);
  }

  // optional .proto_ff.RoleDBSimpleData simple_data = 3;
  if (has_simple_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->simple_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToSnsLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 proxy_id = 1;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_id());
    }

    // optional uint32 logic_id = 2;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_id());
    }

    // optional .proto_ff.RoleDBSimpleData simple_data = 3;
    if (has_simple_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToSnsLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToSnsLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToSnsLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToSnsLoginReq::MergeFrom(const WorldToSnsLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
    if (from.has_simple_data()) {
      mutable_simple_data()->::proto_ff::RoleDBSimpleData::MergeFrom(from.simple_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToSnsLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToSnsLoginReq::CopyFrom(const WorldToSnsLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToSnsLoginReq::IsInitialized() const {

  if (has_simple_data()) {
    if (!this->simple_data().IsInitialized()) return false;
  }
  return true;
}

void WorldToSnsLoginReq::Swap(WorldToSnsLoginReq* other) {
  if (other != this) {
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(simple_data_, other->simple_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToSnsLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToSnsLoginReq_descriptor_;
  metadata.reflection = WorldToSnsLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SnsToWorldLoginRsp::kRetCodeFieldNumber;
const int SnsToWorldLoginRsp::kUidFieldNumber;
const int SnsToWorldLoginRsp::kCidFieldNumber;
#endif  // !_MSC_VER

SnsToWorldLoginRsp::SnsToWorldLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SnsToWorldLoginRsp::InitAsDefaultInstance() {
}

SnsToWorldLoginRsp::SnsToWorldLoginRsp(const SnsToWorldLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SnsToWorldLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SnsToWorldLoginRsp::~SnsToWorldLoginRsp() {
  SharedDtor();
}

void SnsToWorldLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SnsToWorldLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsToWorldLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnsToWorldLoginRsp_descriptor_;
}

const SnsToWorldLoginRsp& SnsToWorldLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

SnsToWorldLoginRsp* SnsToWorldLoginRsp::default_instance_ = NULL;

SnsToWorldLoginRsp* SnsToWorldLoginRsp::New() const {
  return new SnsToWorldLoginRsp;
}

void SnsToWorldLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0u;
    uid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SnsToWorldLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SnsToWorldLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret_code(), output);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SnsToWorldLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SnsToWorldLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsToWorldLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SnsToWorldLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SnsToWorldLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SnsToWorldLoginRsp::MergeFrom(const SnsToWorldLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SnsToWorldLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsToWorldLoginRsp::CopyFrom(const SnsToWorldLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsToWorldLoginRsp::IsInitialized() const {

  return true;
}

void SnsToWorldLoginRsp::Swap(SnsToWorldLoginRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SnsToWorldLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnsToWorldLoginRsp_descriptor_;
  metadata.reflection = SnsToWorldLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameToWorldRegisterMapReq::kGameBusFieldNumber;
const int GameToWorldRegisterMapReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

GameToWorldRegisterMapReq::GameToWorldRegisterMapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameToWorldRegisterMapReq::InitAsDefaultInstance() {
}

GameToWorldRegisterMapReq::GameToWorldRegisterMapReq(const GameToWorldRegisterMapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameToWorldRegisterMapReq::SharedCtor() {
  _cached_size_ = 0;
  game_bus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameToWorldRegisterMapReq::~GameToWorldRegisterMapReq() {
  SharedDtor();
}

void GameToWorldRegisterMapReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameToWorldRegisterMapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameToWorldRegisterMapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameToWorldRegisterMapReq_descriptor_;
}

const GameToWorldRegisterMapReq& GameToWorldRegisterMapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

GameToWorldRegisterMapReq* GameToWorldRegisterMapReq::default_instance_ = NULL;

GameToWorldRegisterMapReq* GameToWorldRegisterMapReq::New() const {
  return new GameToWorldRegisterMapReq;
}

void GameToWorldRegisterMapReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_bus_ = 0u;
  }
  map_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameToWorldRegisterMapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_bus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_)));
          set_has_game_bus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // repeated uint64 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_map_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_map_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameToWorldRegisterMapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_bus = 1;
  if (has_game_bus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_bus(), output);
  }

  // repeated uint64 map_id = 2;
  for (int i = 0; i < this->map_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->map_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameToWorldRegisterMapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_bus = 1;
  if (has_game_bus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_bus(), target);
  }

  // repeated uint64 map_id = 2;
  for (int i = 0; i < this->map_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->map_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameToWorldRegisterMapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_bus = 1;
    if (has_game_bus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus());
    }

  }
  // repeated uint64 map_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->map_id(i));
    }
    total_size += 1 * this->map_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameToWorldRegisterMapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameToWorldRegisterMapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameToWorldRegisterMapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameToWorldRegisterMapReq::MergeFrom(const GameToWorldRegisterMapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_id_.MergeFrom(from.map_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_bus()) {
      set_game_bus(from.game_bus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameToWorldRegisterMapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameToWorldRegisterMapReq::CopyFrom(const GameToWorldRegisterMapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameToWorldRegisterMapReq::IsInitialized() const {

  return true;
}

void GameToWorldRegisterMapReq::Swap(GameToWorldRegisterMapReq* other) {
  if (other != this) {
    std::swap(game_bus_, other->game_bus_);
    map_id_.Swap(&other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameToWorldRegisterMapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameToWorldRegisterMapReq_descriptor_;
  metadata.reflection = GameToWorldRegisterMapReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToGameRegisterMapRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

WorldToGameRegisterMapRsp::WorldToGameRegisterMapRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToGameRegisterMapRsp::InitAsDefaultInstance() {
}

WorldToGameRegisterMapRsp::WorldToGameRegisterMapRsp(const WorldToGameRegisterMapRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToGameRegisterMapRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToGameRegisterMapRsp::~WorldToGameRegisterMapRsp() {
  SharedDtor();
}

void WorldToGameRegisterMapRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldToGameRegisterMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToGameRegisterMapRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToGameRegisterMapRsp_descriptor_;
}

const WorldToGameRegisterMapRsp& WorldToGameRegisterMapRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToGameRegisterMapRsp* WorldToGameRegisterMapRsp::default_instance_ = NULL;

WorldToGameRegisterMapRsp* WorldToGameRegisterMapRsp::New() const {
  return new WorldToGameRegisterMapRsp;
}

void WorldToGameRegisterMapRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToGameRegisterMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToGameRegisterMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToGameRegisterMapRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToGameRegisterMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToGameRegisterMapRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToGameRegisterMapRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToGameRegisterMapRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToGameRegisterMapRsp::MergeFrom(const WorldToGameRegisterMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToGameRegisterMapRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToGameRegisterMapRsp::CopyFrom(const WorldToGameRegisterMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToGameRegisterMapRsp::IsInitialized() const {

  return true;
}

void WorldToGameRegisterMapRsp::Swap(WorldToGameRegisterMapRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToGameRegisterMapRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToGameRegisterMapRsp_descriptor_;
  metadata.reflection = WorldToGameRegisterMapRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToLogicLoginFinishNotify::kUidFieldNumber;
const int WorldToLogicLoginFinishNotify::kCidFieldNumber;
const int WorldToLogicLoginFinishNotify::kProxyIdFieldNumber;
const int WorldToLogicLoginFinishNotify::kMapIdFieldNumber;
const int WorldToLogicLoginFinishNotify::kSceneIdFieldNumber;
const int WorldToLogicLoginFinishNotify::kPosFieldNumber;
#endif  // !_MSC_VER

WorldToLogicLoginFinishNotify::WorldToLogicLoginFinishNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToLogicLoginFinishNotify::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

WorldToLogicLoginFinishNotify::WorldToLogicLoginFinishNotify(const WorldToLogicLoginFinishNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToLogicLoginFinishNotify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  proxy_id_ = 0u;
  map_id_ = GOOGLE_ULONGLONG(0);
  scene_id_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToLogicLoginFinishNotify::~WorldToLogicLoginFinishNotify() {
  SharedDtor();
}

void WorldToLogicLoginFinishNotify::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void WorldToLogicLoginFinishNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToLogicLoginFinishNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToLogicLoginFinishNotify_descriptor_;
}

const WorldToLogicLoginFinishNotify& WorldToLogicLoginFinishNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToLogicLoginFinishNotify* WorldToLogicLoginFinishNotify::default_instance_ = NULL;

WorldToLogicLoginFinishNotify* WorldToLogicLoginFinishNotify::New() const {
  return new WorldToLogicLoginFinishNotify;
}

void WorldToLogicLoginFinishNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    proxy_id_ = 0u;
    map_id_ = GOOGLE_ULONGLONG(0);
    scene_id_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToLogicLoginFinishNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proxy_id;
        break;
      }

      // optional uint32 proxy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }

      // optional uint64 map_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToLogicLoginFinishNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 proxy_id = 3;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proxy_id(), output);
  }

  // optional uint64 map_id = 4;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->map_id(), output);
  }

  // optional uint64 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->scene_id(), output);
  }

  // optional .proto_ff.Vector3PB pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToLogicLoginFinishNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 proxy_id = 3;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->proxy_id(), target);
  }

  // optional uint64 map_id = 4;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->map_id(), target);
  }

  // optional uint64 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->scene_id(), target);
  }

  // optional .proto_ff.Vector3PB pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToLogicLoginFinishNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 proxy_id = 3;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_id());
    }

    // optional uint64 map_id = 4;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->map_id());
    }

    // optional uint64 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional .proto_ff.Vector3PB pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToLogicLoginFinishNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToLogicLoginFinishNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToLogicLoginFinishNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToLogicLoginFinishNotify::MergeFrom(const WorldToLogicLoginFinishNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToLogicLoginFinishNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToLogicLoginFinishNotify::CopyFrom(const WorldToLogicLoginFinishNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToLogicLoginFinishNotify::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void WorldToLogicLoginFinishNotify::Swap(WorldToLogicLoginFinishNotify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToLogicLoginFinishNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToLogicLoginFinishNotify_descriptor_;
  metadata.reflection = WorldToLogicLoginFinishNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicToWorldEnterSceneReq::kCidFieldNumber;
const int LogicToWorldEnterSceneReq::kMapIdFieldNumber;
const int LogicToWorldEnterSceneReq::kSceneIdFieldNumber;
const int LogicToWorldEnterSceneReq::kPosFieldNumber;
const int LogicToWorldEnterSceneReq::kReqTransIdFieldNumber;
const int LogicToWorldEnterSceneReq::kDataFieldNumber;
#endif  // !_MSC_VER

LogicToWorldEnterSceneReq::LogicToWorldEnterSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicToWorldEnterSceneReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  data_ = const_cast< ::proto_ff::RoleEnterSceneData*>(&::proto_ff::RoleEnterSceneData::default_instance());
}

LogicToWorldEnterSceneReq::LogicToWorldEnterSceneReq(const LogicToWorldEnterSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicToWorldEnterSceneReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  map_id_ = GOOGLE_ULONGLONG(0);
  scene_id_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  req_trans_id_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicToWorldEnterSceneReq::~LogicToWorldEnterSceneReq() {
  SharedDtor();
}

void LogicToWorldEnterSceneReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete data_;
  }
}

void LogicToWorldEnterSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicToWorldEnterSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicToWorldEnterSceneReq_descriptor_;
}

const LogicToWorldEnterSceneReq& LogicToWorldEnterSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

LogicToWorldEnterSceneReq* LogicToWorldEnterSceneReq::default_instance_ = NULL;

LogicToWorldEnterSceneReq* LogicToWorldEnterSceneReq::New() const {
  return new LogicToWorldEnterSceneReq;
}

void LogicToWorldEnterSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    map_id_ = GOOGLE_ULONGLONG(0);
    scene_id_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    req_trans_id_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RoleEnterSceneData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicToWorldEnterSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // optional uint64 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_req_trans_id;
        break;
      }

      // optional uint32 req_trans_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_trans_id_)));
          set_has_req_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .proto_ff.RoleEnterSceneData data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicToWorldEnterSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->map_id(), output);
  }

  // optional uint64 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scene_id(), output);
  }

  // optional .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional uint32 req_trans_id = 5;
  if (has_req_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->req_trans_id(), output);
  }

  // optional .proto_ff.RoleEnterSceneData data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicToWorldEnterSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->map_id(), target);
  }

  // optional uint64 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scene_id(), target);
  }

  // optional .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional uint32 req_trans_id = 5;
  if (has_req_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->req_trans_id(), target);
  }

  // optional .proto_ff.RoleEnterSceneData data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicToWorldEnterSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->map_id());
    }

    // optional uint64 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional .proto_ff.Vector3PB pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 req_trans_id = 5;
    if (has_req_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_trans_id());
    }

    // optional .proto_ff.RoleEnterSceneData data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicToWorldEnterSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicToWorldEnterSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicToWorldEnterSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicToWorldEnterSceneReq::MergeFrom(const LogicToWorldEnterSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_req_trans_id()) {
      set_req_trans_id(from.req_trans_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::RoleEnterSceneData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicToWorldEnterSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicToWorldEnterSceneReq::CopyFrom(const LogicToWorldEnterSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicToWorldEnterSceneReq::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LogicToWorldEnterSceneReq::Swap(LogicToWorldEnterSceneReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(pos_, other->pos_);
    std::swap(req_trans_id_, other->req_trans_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicToWorldEnterSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicToWorldEnterSceneReq_descriptor_;
  metadata.reflection = LogicToWorldEnterSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldToGameEnterSceneReq::kCidFieldNumber;
const int WorldToGameEnterSceneReq::kMapIdFieldNumber;
const int WorldToGameEnterSceneReq::kSceneIdFieldNumber;
const int WorldToGameEnterSceneReq::kPosFieldNumber;
const int WorldToGameEnterSceneReq::kReqTransIdFieldNumber;
const int WorldToGameEnterSceneReq::kGateIdFieldNumber;
const int WorldToGameEnterSceneReq::kLogicIdFieldNumber;
const int WorldToGameEnterSceneReq::kDataFieldNumber;
#endif  // !_MSC_VER

WorldToGameEnterSceneReq::WorldToGameEnterSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldToGameEnterSceneReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  data_ = const_cast< ::proto_ff::RoleEnterSceneData*>(&::proto_ff::RoleEnterSceneData::default_instance());
}

WorldToGameEnterSceneReq::WorldToGameEnterSceneReq(const WorldToGameEnterSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldToGameEnterSceneReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  map_id_ = GOOGLE_ULONGLONG(0);
  scene_id_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  req_trans_id_ = 0u;
  gate_id_ = 0u;
  logic_id_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldToGameEnterSceneReq::~WorldToGameEnterSceneReq() {
  SharedDtor();
}

void WorldToGameEnterSceneReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete data_;
  }
}

void WorldToGameEnterSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldToGameEnterSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldToGameEnterSceneReq_descriptor_;
}

const WorldToGameEnterSceneReq& WorldToGameEnterSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServerInternal2_2eproto();
  return *default_instance_;
}

WorldToGameEnterSceneReq* WorldToGameEnterSceneReq::default_instance_ = NULL;

WorldToGameEnterSceneReq* WorldToGameEnterSceneReq::New() const {
  return new WorldToGameEnterSceneReq;
}

void WorldToGameEnterSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    map_id_ = GOOGLE_ULONGLONG(0);
    scene_id_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    req_trans_id_ = 0u;
    gate_id_ = 0u;
    logic_id_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RoleEnterSceneData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldToGameEnterSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // optional uint64 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_req_trans_id;
        break;
      }

      // optional uint32 req_trans_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_trans_id_)));
          set_has_req_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gate_id;
        break;
      }

      // optional uint32 gate_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_id_)));
          set_has_gate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_logic_id;
        break;
      }

      // optional uint32 logic_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional .proto_ff.RoleEnterSceneData data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldToGameEnterSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->map_id(), output);
  }

  // optional uint64 scene_id = 3;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scene_id(), output);
  }

  // optional .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional uint32 req_trans_id = 5;
  if (has_req_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->req_trans_id(), output);
  }

  // optional uint32 gate_id = 6;
  if (has_gate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gate_id(), output);
  }

  // optional uint32 logic_id = 7;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->logic_id(), output);
  }

  // optional .proto_ff.RoleEnterSceneData data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldToGameEnterSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->map_id(), target);
  }

  // optional uint64 scene_id = 3;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scene_id(), target);
  }

  // optional .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional uint32 req_trans_id = 5;
  if (has_req_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->req_trans_id(), target);
  }

  // optional uint32 gate_id = 6;
  if (has_gate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gate_id(), target);
  }

  // optional uint32 logic_id = 7;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->logic_id(), target);
  }

  // optional .proto_ff.RoleEnterSceneData data = 8;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldToGameEnterSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->map_id());
    }

    // optional uint64 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional .proto_ff.Vector3PB pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 req_trans_id = 5;
    if (has_req_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_trans_id());
    }

    // optional uint32 gate_id = 6;
    if (has_gate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gate_id());
    }

    // optional uint32 logic_id = 7;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_id());
    }

    // optional .proto_ff.RoleEnterSceneData data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldToGameEnterSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldToGameEnterSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldToGameEnterSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldToGameEnterSceneReq::MergeFrom(const WorldToGameEnterSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_req_trans_id()) {
      set_req_trans_id(from.req_trans_id());
    }
    if (from.has_gate_id()) {
      set_gate_id(from.gate_id());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::RoleEnterSceneData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldToGameEnterSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldToGameEnterSceneReq::CopyFrom(const WorldToGameEnterSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldToGameEnterSceneReq::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void WorldToGameEnterSceneReq::Swap(WorldToGameEnterSceneReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(pos_, other->pos_);
    std::swap(req_trans_id_, other->req_trans_id_);
    std::swap(gate_id_, other->gate_id_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldToGameEnterSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldToGameEnterSceneReq_descriptor_;
  metadata.reflection = WorldToGameEnterSceneReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
