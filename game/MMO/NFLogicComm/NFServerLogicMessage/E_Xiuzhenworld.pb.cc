// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Xiuzhenworld.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Xiuzhenworld.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_XiuzhenworldConstantTimeitemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenworldConstantTimeitemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XiuzhenworldConstantTypeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenworldConstantTypeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XiuzhenworldConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenworldConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XiuzhenworldConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XiuzhenworldConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XiuzhenworldExpmap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenworldExpmap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XiuzhenworldExpmap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XiuzhenworldExpmap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fXiuzhenworld_2eproto() {
  protobuf_AddDesc_E_5fXiuzhenworld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Xiuzhenworld.proto");
  GOOGLE_CHECK(file != NULL);
  E_XiuzhenworldConstantTimeitemDesc_descriptor_ = file->message_type(0);
  static const int E_XiuzhenworldConstantTimeitemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstantTimeitemDesc, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstantTimeitemDesc, m_id_),
  };
  E_XiuzhenworldConstantTimeitemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenworldConstantTimeitemDesc_descriptor_,
      E_XiuzhenworldConstantTimeitemDesc::default_instance_,
      E_XiuzhenworldConstantTimeitemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstantTimeitemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstantTimeitemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenworldConstantTimeitemDesc));
  E_XiuzhenworldConstantTypeDesc_descriptor_ = file->message_type(1);
  static const int E_XiuzhenworldConstantTypeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstantTypeDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstantTypeDesc, m_id_),
  };
  E_XiuzhenworldConstantTypeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenworldConstantTypeDesc_descriptor_,
      E_XiuzhenworldConstantTypeDesc::default_instance_,
      E_XiuzhenworldConstantTypeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstantTypeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstantTypeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenworldConstantTypeDesc));
  E_XiuzhenworldConstant_descriptor_ = file->message_type(2);
  static const int E_XiuzhenworldConstant_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_starfreetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_freetimemoment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_freetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_freetimemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_helpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_addgexpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_pripricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_pricevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_gexppribonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_gexpgroupbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_mapstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_mapend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_expitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_timeitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, m_type_),
  };
  E_XiuzhenworldConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenworldConstant_descriptor_,
      E_XiuzhenworldConstant::default_instance_,
      E_XiuzhenworldConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenworldConstant));
  Sheet_XiuzhenworldConstant_descriptor_ = file->message_type(3);
  static const int Sheet_XiuzhenworldConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenworldConstant, e_xiuzhenworldconstant_list_),
  };
  Sheet_XiuzhenworldConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XiuzhenworldConstant_descriptor_,
      Sheet_XiuzhenworldConstant::default_instance_,
      Sheet_XiuzhenworldConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenworldConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenworldConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XiuzhenworldConstant));
  E_XiuzhenworldExpmap_descriptor_ = file->message_type(4);
  static const int E_XiuzhenworldExpmap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldExpmap, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldExpmap, m_conditionglv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldExpmap, m_mapid_),
  };
  E_XiuzhenworldExpmap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenworldExpmap_descriptor_,
      E_XiuzhenworldExpmap::default_instance_,
      E_XiuzhenworldExpmap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldExpmap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenworldExpmap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenworldExpmap));
  Sheet_XiuzhenworldExpmap_descriptor_ = file->message_type(5);
  static const int Sheet_XiuzhenworldExpmap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenworldExpmap, e_xiuzhenworldexpmap_list_),
  };
  Sheet_XiuzhenworldExpmap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XiuzhenworldExpmap_descriptor_,
      Sheet_XiuzhenworldExpmap::default_instance_,
      Sheet_XiuzhenworldExpmap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenworldExpmap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenworldExpmap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XiuzhenworldExpmap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fXiuzhenworld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenworldConstantTimeitemDesc_descriptor_, &E_XiuzhenworldConstantTimeitemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenworldConstantTypeDesc_descriptor_, &E_XiuzhenworldConstantTypeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenworldConstant_descriptor_, &E_XiuzhenworldConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XiuzhenworldConstant_descriptor_, &Sheet_XiuzhenworldConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenworldExpmap_descriptor_, &E_XiuzhenworldExpmap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XiuzhenworldExpmap_descriptor_, &Sheet_XiuzhenworldExpmap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fXiuzhenworld_2eproto() {
  delete E_XiuzhenworldConstantTimeitemDesc::default_instance_;
  delete E_XiuzhenworldConstantTimeitemDesc_reflection_;
  delete E_XiuzhenworldConstantTypeDesc::default_instance_;
  delete E_XiuzhenworldConstantTypeDesc_reflection_;
  delete E_XiuzhenworldConstant::default_instance_;
  delete E_XiuzhenworldConstant_reflection_;
  delete Sheet_XiuzhenworldConstant::default_instance_;
  delete Sheet_XiuzhenworldConstant_reflection_;
  delete E_XiuzhenworldExpmap::default_instance_;
  delete E_XiuzhenworldExpmap_reflection_;
  delete Sheet_XiuzhenworldExpmap::default_instance_;
  delete Sheet_XiuzhenworldExpmap_reflection_;
}

void protobuf_AddDesc_E_5fXiuzhenworld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024E_Xiuzhenworld.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\"V\n\"E_XiuzhenworldConstan"
    "tTimeitemDesc\022\032\n\006m_time\030\001 \001(\005B\n\302\377\024\006\346\227\266\351\227"
    "\264\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\"R\n\036E_Xiuzhenworl"
    "dConstantTypeDesc\022\032\n\005m_num\030\001 \001(\tB\013\302\377\024\003\345\200"
    "\274\220\301\024@\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"\242\006\n\026E_Xiuzhe"
    "nworldConstant\022\024\n\004m_ID\030\001 \001(\005B\006\302\377\024\002id\022.\n\016"
    "m_starFreeTime\030\002 \001(\005B\026\302\377\024\022\345\210\235\345\247\213\345\205\215\350\264\271\346\227"
    "\266\351\227\264\022@\n\020m_freeTimeMoment\030\003 \001(\tB&\302\377\024\036\350\216\267\345"
    "\276\227\345\205\215\350\264\271\346\227\266\351\227\264\347\232\204\346\227\266\351\227\264\347\202\271\220\301\024@\022-\n\nm_free"
    "Time\030\004 \001(\005B\031\302\377\024\025\346\257\217\346\254\241\350\216\267\345\276\227\347\232\204\346\227\266\351\227\264\022-\n"
    "\rm_freeTimeMax\030\005 \001(\005B\026\302\377\024\022\345\205\215\350\264\271\346\227\266\351\227\264\344\270"
    "\212\351\231\220\022\"\n\010m_helpid\030\006 \001(\005B\020\302\377\024\014\345\270\256\345\212\251\344\277\241\346\201\257"
    "\022,\n\014m_addGExpMax\030\007 \001(\005B\026\302\377\024\022\347\245\236\345\205\203\347\273\217\351\252\214"
    "\344\270\212\351\231\220\022.\n\016m_priPriceType\030\010 \001(\005B\026\302\377\024\022\347\211\271\346"
    "\235\203\344\273\267\346\240\274\347\261\273\345\236\213\022&\n\014m_priceValue\030\t \001(\005B\020\302\377"
    "\024\014\347\211\271\346\235\203\344\273\267\346\240\274\0224\n\016m_GExpPriBonus\030\n \001(\005B\034"
    "\302\377\024\030\347\211\271\346\235\203\347\245\236\345\205\203\347\273\217\351\252\214\345\212\240\346\210\220\022*\n\020m_GExpGr"
    "oupBonus\030\013 \001(\005B\020\302\377\024\014\347\273\204\351\230\237\345\212\240\346\210\220\022$\n\nm_ma"
    "pStart\030\014 \001(\005B\020\302\377\024\014\345\234\260\345\233\276\345\274\200\345\247\213\022\"\n\010m_mapE"
    "nd\030\r \001(\005B\020\302\377\024\014\345\234\260\345\233\276\347\273\223\346\235\237\022*\n\013m_expItemI"
    "d\030\016 \001(\005B\025\302\377\024\021\347\273\217\351\252\214\347\232\204\347\211\251\345\223\201ID\022V\n\nm_time"
    "Item\030\017 \003(\0132,.proto_ff.E_XiuzhenworldCons"
    "tantTimeitemDescB\024\302\377\024\014\346\227\266\351\227\264\351\201\223\345\205\267\210\301\024\003\022H"
    "\n\006m_type\030\020 \003(\0132(.proto_ff.E_Xiuzhenworld"
    "ConstantTypeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\005\"i\n\032Shee"
    "t_XiuzhenworldConstant\022K\n\033E_Xiuzhenworld"
    "Constant_List\030\001 \003(\0132 .proto_ff.E_Xiuzhen"
    "worldConstantB\004\210\301\024\020\"{\n\024E_XiuzhenworldExp"
    "map\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022.\n\016m_condition"
    "Glv\030\002 \001(\005B\026\302\377\024\022\350\277\233\345\205\245\350\275\254\347\224\237\350\246\201\346\261\202\022\035\n\007m_m"
    "apid\030\003 \001(\005B\014\302\377\024\010\345\234\260\345\233\276id\"c\n\030Sheet_Xiuzhe"
    "nworldExpmap\022G\n\031E_XiuzhenworldExpmap_Lis"
    "t\030\001 \003(\0132\036.proto_ff.E_XiuzhenworldExpmapB"
    "\004\210\301\024\010", 1365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Xiuzhenworld.proto", &protobuf_RegisterTypes);
  E_XiuzhenworldConstantTimeitemDesc::default_instance_ = new E_XiuzhenworldConstantTimeitemDesc();
  E_XiuzhenworldConstantTypeDesc::default_instance_ = new E_XiuzhenworldConstantTypeDesc();
  E_XiuzhenworldConstant::default_instance_ = new E_XiuzhenworldConstant();
  Sheet_XiuzhenworldConstant::default_instance_ = new Sheet_XiuzhenworldConstant();
  E_XiuzhenworldExpmap::default_instance_ = new E_XiuzhenworldExpmap();
  Sheet_XiuzhenworldExpmap::default_instance_ = new Sheet_XiuzhenworldExpmap();
  E_XiuzhenworldConstantTimeitemDesc::default_instance_->InitAsDefaultInstance();
  E_XiuzhenworldConstantTypeDesc::default_instance_->InitAsDefaultInstance();
  E_XiuzhenworldConstant::default_instance_->InitAsDefaultInstance();
  Sheet_XiuzhenworldConstant::default_instance_->InitAsDefaultInstance();
  E_XiuzhenworldExpmap::default_instance_->InitAsDefaultInstance();
  Sheet_XiuzhenworldExpmap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fXiuzhenworld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fXiuzhenworld_2eproto {
  StaticDescriptorInitializer_E_5fXiuzhenworld_2eproto() {
    protobuf_AddDesc_E_5fXiuzhenworld_2eproto();
  }
} static_descriptor_initializer_E_5fXiuzhenworld_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenworldConstantTimeitemDesc::kMTimeFieldNumber;
const int E_XiuzhenworldConstantTimeitemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenworldConstantTimeitemDesc::E_XiuzhenworldConstantTimeitemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenworldConstantTimeitemDesc::InitAsDefaultInstance() {
}

E_XiuzhenworldConstantTimeitemDesc::E_XiuzhenworldConstantTimeitemDesc(const E_XiuzhenworldConstantTimeitemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenworldConstantTimeitemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_time_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenworldConstantTimeitemDesc::~E_XiuzhenworldConstantTimeitemDesc() {
  SharedDtor();
}

void E_XiuzhenworldConstantTimeitemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XiuzhenworldConstantTimeitemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenworldConstantTimeitemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenworldConstantTimeitemDesc_descriptor_;
}

const E_XiuzhenworldConstantTimeitemDesc& E_XiuzhenworldConstantTimeitemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenworld_2eproto();
  return *default_instance_;
}

E_XiuzhenworldConstantTimeitemDesc* E_XiuzhenworldConstantTimeitemDesc::default_instance_ = NULL;

E_XiuzhenworldConstantTimeitemDesc* E_XiuzhenworldConstantTimeitemDesc::New() const {
  return new E_XiuzhenworldConstantTimeitemDesc;
}

void E_XiuzhenworldConstantTimeitemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_time_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenworldConstantTimeitemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenworldConstantTimeitemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_time = 1;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_time(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenworldConstantTimeitemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_time = 1;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_time(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenworldConstantTimeitemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_time = 1;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenworldConstantTimeitemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenworldConstantTimeitemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenworldConstantTimeitemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenworldConstantTimeitemDesc::MergeFrom(const E_XiuzhenworldConstantTimeitemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenworldConstantTimeitemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenworldConstantTimeitemDesc::CopyFrom(const E_XiuzhenworldConstantTimeitemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenworldConstantTimeitemDesc::IsInitialized() const {

  return true;
}

void E_XiuzhenworldConstantTimeitemDesc::Swap(E_XiuzhenworldConstantTimeitemDesc* other) {
  if (other != this) {
    std::swap(m_time_, other->m_time_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenworldConstantTimeitemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenworldConstantTimeitemDesc_descriptor_;
  metadata.reflection = E_XiuzhenworldConstantTimeitemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenworldConstantTypeDesc::kMNumFieldNumber;
const int E_XiuzhenworldConstantTypeDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenworldConstantTypeDesc::E_XiuzhenworldConstantTypeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenworldConstantTypeDesc::InitAsDefaultInstance() {
}

E_XiuzhenworldConstantTypeDesc::E_XiuzhenworldConstantTypeDesc(const E_XiuzhenworldConstantTypeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenworldConstantTypeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenworldConstantTypeDesc::~E_XiuzhenworldConstantTypeDesc() {
  SharedDtor();
}

void E_XiuzhenworldConstantTypeDesc::SharedDtor() {
  if (m_num_ != &::google::protobuf::internal::kEmptyString) {
    delete m_num_;
  }
  if (this != default_instance_) {
  }
}

void E_XiuzhenworldConstantTypeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenworldConstantTypeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenworldConstantTypeDesc_descriptor_;
}

const E_XiuzhenworldConstantTypeDesc& E_XiuzhenworldConstantTypeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenworld_2eproto();
  return *default_instance_;
}

E_XiuzhenworldConstantTypeDesc* E_XiuzhenworldConstantTypeDesc::default_instance_ = NULL;

E_XiuzhenworldConstantTypeDesc* E_XiuzhenworldConstantTypeDesc::New() const {
  return new E_XiuzhenworldConstantTypeDesc;
}

void E_XiuzhenworldConstantTypeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_num()) {
      if (m_num_ != &::google::protobuf::internal::kEmptyString) {
        m_num_->clear();
      }
    }
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenworldConstantTypeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_num().data(), this->m_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenworldConstantTypeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_num().data(), this->m_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenworldConstantTypeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_num().data(), this->m_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenworldConstantTypeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenworldConstantTypeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenworldConstantTypeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenworldConstantTypeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenworldConstantTypeDesc::MergeFrom(const E_XiuzhenworldConstantTypeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenworldConstantTypeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenworldConstantTypeDesc::CopyFrom(const E_XiuzhenworldConstantTypeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenworldConstantTypeDesc::IsInitialized() const {

  return true;
}

void E_XiuzhenworldConstantTypeDesc::Swap(E_XiuzhenworldConstantTypeDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenworldConstantTypeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenworldConstantTypeDesc_descriptor_;
  metadata.reflection = E_XiuzhenworldConstantTypeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenworldConstant::kMIDFieldNumber;
const int E_XiuzhenworldConstant::kMStarFreeTimeFieldNumber;
const int E_XiuzhenworldConstant::kMFreeTimeMomentFieldNumber;
const int E_XiuzhenworldConstant::kMFreeTimeFieldNumber;
const int E_XiuzhenworldConstant::kMFreeTimeMaxFieldNumber;
const int E_XiuzhenworldConstant::kMHelpidFieldNumber;
const int E_XiuzhenworldConstant::kMAddGExpMaxFieldNumber;
const int E_XiuzhenworldConstant::kMPriPriceTypeFieldNumber;
const int E_XiuzhenworldConstant::kMPriceValueFieldNumber;
const int E_XiuzhenworldConstant::kMGExpPriBonusFieldNumber;
const int E_XiuzhenworldConstant::kMGExpGroupBonusFieldNumber;
const int E_XiuzhenworldConstant::kMMapStartFieldNumber;
const int E_XiuzhenworldConstant::kMMapEndFieldNumber;
const int E_XiuzhenworldConstant::kMExpItemIdFieldNumber;
const int E_XiuzhenworldConstant::kMTimeItemFieldNumber;
const int E_XiuzhenworldConstant::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenworldConstant::E_XiuzhenworldConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenworldConstant::InitAsDefaultInstance() {
}

E_XiuzhenworldConstant::E_XiuzhenworldConstant(const E_XiuzhenworldConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenworldConstant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_starfreetime_ = 0;
  m_freetimemoment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_freetime_ = 0;
  m_freetimemax_ = 0;
  m_helpid_ = 0;
  m_addgexpmax_ = 0;
  m_pripricetype_ = 0;
  m_pricevalue_ = 0;
  m_gexppribonus_ = 0;
  m_gexpgroupbonus_ = 0;
  m_mapstart_ = 0;
  m_mapend_ = 0;
  m_expitemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenworldConstant::~E_XiuzhenworldConstant() {
  SharedDtor();
}

void E_XiuzhenworldConstant::SharedDtor() {
  if (m_freetimemoment_ != &::google::protobuf::internal::kEmptyString) {
    delete m_freetimemoment_;
  }
  if (this != default_instance_) {
  }
}

void E_XiuzhenworldConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenworldConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenworldConstant_descriptor_;
}

const E_XiuzhenworldConstant& E_XiuzhenworldConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenworld_2eproto();
  return *default_instance_;
}

E_XiuzhenworldConstant* E_XiuzhenworldConstant::default_instance_ = NULL;

E_XiuzhenworldConstant* E_XiuzhenworldConstant::New() const {
  return new E_XiuzhenworldConstant;
}

void E_XiuzhenworldConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_starfreetime_ = 0;
    if (has_m_freetimemoment()) {
      if (m_freetimemoment_ != &::google::protobuf::internal::kEmptyString) {
        m_freetimemoment_->clear();
      }
    }
    m_freetime_ = 0;
    m_freetimemax_ = 0;
    m_helpid_ = 0;
    m_addgexpmax_ = 0;
    m_pripricetype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_pricevalue_ = 0;
    m_gexppribonus_ = 0;
    m_gexpgroupbonus_ = 0;
    m_mapstart_ = 0;
    m_mapend_ = 0;
    m_expitemid_ = 0;
  }
  m_timeitem_.Clear();
  m_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenworldConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_starFreeTime;
        break;
      }

      // optional int32 m_starFreeTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starFreeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starfreetime_)));
          set_has_m_starfreetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_freeTimeMoment;
        break;
      }

      // optional string m_freeTimeMoment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_freeTimeMoment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_freetimemoment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_freetimemoment().data(), this->m_freetimemoment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_freeTime;
        break;
      }

      // optional int32 m_freeTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_freeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_freetime_)));
          set_has_m_freetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_freeTimeMax;
        break;
      }

      // optional int32 m_freeTimeMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_freeTimeMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_freetimemax_)));
          set_has_m_freetimemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_helpid;
        break;
      }

      // optional int32 m_helpid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_helpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_helpid_)));
          set_has_m_helpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_addGExpMax;
        break;
      }

      // optional int32 m_addGExpMax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addGExpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_addgexpmax_)));
          set_has_m_addgexpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_priPriceType;
        break;
      }

      // optional int32 m_priPriceType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_priPriceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pripricetype_)));
          set_has_m_pripricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_priceValue;
        break;
      }

      // optional int32 m_priceValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_priceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pricevalue_)));
          set_has_m_pricevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_GExpPriBonus;
        break;
      }

      // optional int32 m_GExpPriBonus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GExpPriBonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gexppribonus_)));
          set_has_m_gexppribonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_GExpGroupBonus;
        break;
      }

      // optional int32 m_GExpGroupBonus = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GExpGroupBonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gexpgroupbonus_)));
          set_has_m_gexpgroupbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_mapStart;
        break;
      }

      // optional int32 m_mapStart = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapstart_)));
          set_has_m_mapstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_mapEnd;
        break;
      }

      // optional int32 m_mapEnd = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapend_)));
          set_has_m_mapend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_expItemId;
        break;
      }

      // optional int32 m_expItemId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expitemid_)));
          set_has_m_expitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_timeItem;
        break;
      }

      // repeated .proto_ff.E_XiuzhenworldConstantTimeitemDesc m_timeItem = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_timeItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_timeitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_timeItem;
        if (input->ExpectTag(130)) goto parse_m_type;
        break;
      }

      // repeated .proto_ff.E_XiuzhenworldConstantTypeDesc m_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenworldConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_starFreeTime = 2;
  if (has_m_starfreetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_starfreetime(), output);
  }

  // optional string m_freeTimeMoment = 3;
  if (has_m_freetimemoment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_freetimemoment().data(), this->m_freetimemoment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_freetimemoment(), output);
  }

  // optional int32 m_freeTime = 4;
  if (has_m_freetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_freetime(), output);
  }

  // optional int32 m_freeTimeMax = 5;
  if (has_m_freetimemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_freetimemax(), output);
  }

  // optional int32 m_helpid = 6;
  if (has_m_helpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_helpid(), output);
  }

  // optional int32 m_addGExpMax = 7;
  if (has_m_addgexpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_addgexpmax(), output);
  }

  // optional int32 m_priPriceType = 8;
  if (has_m_pripricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_pripricetype(), output);
  }

  // optional int32 m_priceValue = 9;
  if (has_m_pricevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_pricevalue(), output);
  }

  // optional int32 m_GExpPriBonus = 10;
  if (has_m_gexppribonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_gexppribonus(), output);
  }

  // optional int32 m_GExpGroupBonus = 11;
  if (has_m_gexpgroupbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_gexpgroupbonus(), output);
  }

  // optional int32 m_mapStart = 12;
  if (has_m_mapstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_mapstart(), output);
  }

  // optional int32 m_mapEnd = 13;
  if (has_m_mapend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_mapend(), output);
  }

  // optional int32 m_expItemId = 14;
  if (has_m_expitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_expitemid(), output);
  }

  // repeated .proto_ff.E_XiuzhenworldConstantTimeitemDesc m_timeItem = 15;
  for (int i = 0; i < this->m_timeitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_timeitem(i), output);
  }

  // repeated .proto_ff.E_XiuzhenworldConstantTypeDesc m_type = 16;
  for (int i = 0; i < this->m_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenworldConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_starFreeTime = 2;
  if (has_m_starfreetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_starfreetime(), target);
  }

  // optional string m_freeTimeMoment = 3;
  if (has_m_freetimemoment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_freetimemoment().data(), this->m_freetimemoment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_freetimemoment(), target);
  }

  // optional int32 m_freeTime = 4;
  if (has_m_freetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_freetime(), target);
  }

  // optional int32 m_freeTimeMax = 5;
  if (has_m_freetimemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_freetimemax(), target);
  }

  // optional int32 m_helpid = 6;
  if (has_m_helpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_helpid(), target);
  }

  // optional int32 m_addGExpMax = 7;
  if (has_m_addgexpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_addgexpmax(), target);
  }

  // optional int32 m_priPriceType = 8;
  if (has_m_pripricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_pripricetype(), target);
  }

  // optional int32 m_priceValue = 9;
  if (has_m_pricevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_pricevalue(), target);
  }

  // optional int32 m_GExpPriBonus = 10;
  if (has_m_gexppribonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_gexppribonus(), target);
  }

  // optional int32 m_GExpGroupBonus = 11;
  if (has_m_gexpgroupbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_gexpgroupbonus(), target);
  }

  // optional int32 m_mapStart = 12;
  if (has_m_mapstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_mapstart(), target);
  }

  // optional int32 m_mapEnd = 13;
  if (has_m_mapend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_mapend(), target);
  }

  // optional int32 m_expItemId = 14;
  if (has_m_expitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_expitemid(), target);
  }

  // repeated .proto_ff.E_XiuzhenworldConstantTimeitemDesc m_timeItem = 15;
  for (int i = 0; i < this->m_timeitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_timeitem(i), target);
  }

  // repeated .proto_ff.E_XiuzhenworldConstantTypeDesc m_type = 16;
  for (int i = 0; i < this->m_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenworldConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_starFreeTime = 2;
    if (has_m_starfreetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starfreetime());
    }

    // optional string m_freeTimeMoment = 3;
    if (has_m_freetimemoment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_freetimemoment());
    }

    // optional int32 m_freeTime = 4;
    if (has_m_freetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_freetime());
    }

    // optional int32 m_freeTimeMax = 5;
    if (has_m_freetimemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_freetimemax());
    }

    // optional int32 m_helpid = 6;
    if (has_m_helpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_helpid());
    }

    // optional int32 m_addGExpMax = 7;
    if (has_m_addgexpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_addgexpmax());
    }

    // optional int32 m_priPriceType = 8;
    if (has_m_pripricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pripricetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_priceValue = 9;
    if (has_m_pricevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pricevalue());
    }

    // optional int32 m_GExpPriBonus = 10;
    if (has_m_gexppribonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gexppribonus());
    }

    // optional int32 m_GExpGroupBonus = 11;
    if (has_m_gexpgroupbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gexpgroupbonus());
    }

    // optional int32 m_mapStart = 12;
    if (has_m_mapstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapstart());
    }

    // optional int32 m_mapEnd = 13;
    if (has_m_mapend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapend());
    }

    // optional int32 m_expItemId = 14;
    if (has_m_expitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expitemid());
    }

  }
  // repeated .proto_ff.E_XiuzhenworldConstantTimeitemDesc m_timeItem = 15;
  total_size += 1 * this->m_timeitem_size();
  for (int i = 0; i < this->m_timeitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_timeitem(i));
  }

  // repeated .proto_ff.E_XiuzhenworldConstantTypeDesc m_type = 16;
  total_size += 2 * this->m_type_size();
  for (int i = 0; i < this->m_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenworldConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenworldConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenworldConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenworldConstant::MergeFrom(const E_XiuzhenworldConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_timeitem_.MergeFrom(from.m_timeitem_);
  m_type_.MergeFrom(from.m_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_starfreetime()) {
      set_m_starfreetime(from.m_starfreetime());
    }
    if (from.has_m_freetimemoment()) {
      set_m_freetimemoment(from.m_freetimemoment());
    }
    if (from.has_m_freetime()) {
      set_m_freetime(from.m_freetime());
    }
    if (from.has_m_freetimemax()) {
      set_m_freetimemax(from.m_freetimemax());
    }
    if (from.has_m_helpid()) {
      set_m_helpid(from.m_helpid());
    }
    if (from.has_m_addgexpmax()) {
      set_m_addgexpmax(from.m_addgexpmax());
    }
    if (from.has_m_pripricetype()) {
      set_m_pripricetype(from.m_pripricetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_pricevalue()) {
      set_m_pricevalue(from.m_pricevalue());
    }
    if (from.has_m_gexppribonus()) {
      set_m_gexppribonus(from.m_gexppribonus());
    }
    if (from.has_m_gexpgroupbonus()) {
      set_m_gexpgroupbonus(from.m_gexpgroupbonus());
    }
    if (from.has_m_mapstart()) {
      set_m_mapstart(from.m_mapstart());
    }
    if (from.has_m_mapend()) {
      set_m_mapend(from.m_mapend());
    }
    if (from.has_m_expitemid()) {
      set_m_expitemid(from.m_expitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenworldConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenworldConstant::CopyFrom(const E_XiuzhenworldConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenworldConstant::IsInitialized() const {

  return true;
}

void E_XiuzhenworldConstant::Swap(E_XiuzhenworldConstant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_starfreetime_, other->m_starfreetime_);
    std::swap(m_freetimemoment_, other->m_freetimemoment_);
    std::swap(m_freetime_, other->m_freetime_);
    std::swap(m_freetimemax_, other->m_freetimemax_);
    std::swap(m_helpid_, other->m_helpid_);
    std::swap(m_addgexpmax_, other->m_addgexpmax_);
    std::swap(m_pripricetype_, other->m_pripricetype_);
    std::swap(m_pricevalue_, other->m_pricevalue_);
    std::swap(m_gexppribonus_, other->m_gexppribonus_);
    std::swap(m_gexpgroupbonus_, other->m_gexpgroupbonus_);
    std::swap(m_mapstart_, other->m_mapstart_);
    std::swap(m_mapend_, other->m_mapend_);
    std::swap(m_expitemid_, other->m_expitemid_);
    m_timeitem_.Swap(&other->m_timeitem_);
    m_type_.Swap(&other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenworldConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenworldConstant_descriptor_;
  metadata.reflection = E_XiuzhenworldConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XiuzhenworldConstant::kEXiuzhenworldConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_XiuzhenworldConstant::Sheet_XiuzhenworldConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XiuzhenworldConstant::InitAsDefaultInstance() {
}

Sheet_XiuzhenworldConstant::Sheet_XiuzhenworldConstant(const Sheet_XiuzhenworldConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XiuzhenworldConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XiuzhenworldConstant::~Sheet_XiuzhenworldConstant() {
  SharedDtor();
}

void Sheet_XiuzhenworldConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XiuzhenworldConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XiuzhenworldConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XiuzhenworldConstant_descriptor_;
}

const Sheet_XiuzhenworldConstant& Sheet_XiuzhenworldConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenworld_2eproto();
  return *default_instance_;
}

Sheet_XiuzhenworldConstant* Sheet_XiuzhenworldConstant::default_instance_ = NULL;

Sheet_XiuzhenworldConstant* Sheet_XiuzhenworldConstant::New() const {
  return new Sheet_XiuzhenworldConstant;
}

void Sheet_XiuzhenworldConstant::Clear() {
  e_xiuzhenworldconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XiuzhenworldConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XiuzhenworldConstant E_XiuzhenworldConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XiuzhenworldConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xiuzhenworldconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XiuzhenworldConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XiuzhenworldConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XiuzhenworldConstant E_XiuzhenworldConstant_List = 1;
  for (int i = 0; i < this->e_xiuzhenworldconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xiuzhenworldconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XiuzhenworldConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XiuzhenworldConstant E_XiuzhenworldConstant_List = 1;
  for (int i = 0; i < this->e_xiuzhenworldconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xiuzhenworldconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XiuzhenworldConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XiuzhenworldConstant E_XiuzhenworldConstant_List = 1;
  total_size += 1 * this->e_xiuzhenworldconstant_list_size();
  for (int i = 0; i < this->e_xiuzhenworldconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xiuzhenworldconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XiuzhenworldConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XiuzhenworldConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XiuzhenworldConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XiuzhenworldConstant::MergeFrom(const Sheet_XiuzhenworldConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xiuzhenworldconstant_list_.MergeFrom(from.e_xiuzhenworldconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XiuzhenworldConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XiuzhenworldConstant::CopyFrom(const Sheet_XiuzhenworldConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XiuzhenworldConstant::IsInitialized() const {

  return true;
}

void Sheet_XiuzhenworldConstant::Swap(Sheet_XiuzhenworldConstant* other) {
  if (other != this) {
    e_xiuzhenworldconstant_list_.Swap(&other->e_xiuzhenworldconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XiuzhenworldConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XiuzhenworldConstant_descriptor_;
  metadata.reflection = Sheet_XiuzhenworldConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenworldExpmap::kMIdFieldNumber;
const int E_XiuzhenworldExpmap::kMConditionGlvFieldNumber;
const int E_XiuzhenworldExpmap::kMMapidFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenworldExpmap::E_XiuzhenworldExpmap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenworldExpmap::InitAsDefaultInstance() {
}

E_XiuzhenworldExpmap::E_XiuzhenworldExpmap(const E_XiuzhenworldExpmap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenworldExpmap::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_conditionglv_ = 0;
  m_mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenworldExpmap::~E_XiuzhenworldExpmap() {
  SharedDtor();
}

void E_XiuzhenworldExpmap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XiuzhenworldExpmap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenworldExpmap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenworldExpmap_descriptor_;
}

const E_XiuzhenworldExpmap& E_XiuzhenworldExpmap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenworld_2eproto();
  return *default_instance_;
}

E_XiuzhenworldExpmap* E_XiuzhenworldExpmap::default_instance_ = NULL;

E_XiuzhenworldExpmap* E_XiuzhenworldExpmap::New() const {
  return new E_XiuzhenworldExpmap;
}

void E_XiuzhenworldExpmap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_conditionglv_ = 0;
    m_mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenworldExpmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_conditionGlv;
        break;
      }

      // optional int32 m_conditionGlv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_conditionGlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_conditionglv_)));
          set_has_m_conditionglv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_mapid;
        break;
      }

      // optional int32 m_mapid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mapid_)));
          set_has_m_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenworldExpmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_conditionGlv = 2;
  if (has_m_conditionglv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_conditionglv(), output);
  }

  // optional int32 m_mapid = 3;
  if (has_m_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenworldExpmap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_conditionGlv = 2;
  if (has_m_conditionglv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_conditionglv(), target);
  }

  // optional int32 m_mapid = 3;
  if (has_m_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenworldExpmap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_conditionGlv = 2;
    if (has_m_conditionglv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_conditionglv());
    }

    // optional int32 m_mapid = 3;
    if (has_m_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenworldExpmap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenworldExpmap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenworldExpmap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenworldExpmap::MergeFrom(const E_XiuzhenworldExpmap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_conditionglv()) {
      set_m_conditionglv(from.m_conditionglv());
    }
    if (from.has_m_mapid()) {
      set_m_mapid(from.m_mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenworldExpmap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenworldExpmap::CopyFrom(const E_XiuzhenworldExpmap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenworldExpmap::IsInitialized() const {

  return true;
}

void E_XiuzhenworldExpmap::Swap(E_XiuzhenworldExpmap* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_conditionglv_, other->m_conditionglv_);
    std::swap(m_mapid_, other->m_mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenworldExpmap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenworldExpmap_descriptor_;
  metadata.reflection = E_XiuzhenworldExpmap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XiuzhenworldExpmap::kEXiuzhenworldExpmapListFieldNumber;
#endif  // !_MSC_VER

Sheet_XiuzhenworldExpmap::Sheet_XiuzhenworldExpmap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XiuzhenworldExpmap::InitAsDefaultInstance() {
}

Sheet_XiuzhenworldExpmap::Sheet_XiuzhenworldExpmap(const Sheet_XiuzhenworldExpmap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XiuzhenworldExpmap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XiuzhenworldExpmap::~Sheet_XiuzhenworldExpmap() {
  SharedDtor();
}

void Sheet_XiuzhenworldExpmap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XiuzhenworldExpmap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XiuzhenworldExpmap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XiuzhenworldExpmap_descriptor_;
}

const Sheet_XiuzhenworldExpmap& Sheet_XiuzhenworldExpmap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenworld_2eproto();
  return *default_instance_;
}

Sheet_XiuzhenworldExpmap* Sheet_XiuzhenworldExpmap::default_instance_ = NULL;

Sheet_XiuzhenworldExpmap* Sheet_XiuzhenworldExpmap::New() const {
  return new Sheet_XiuzhenworldExpmap;
}

void Sheet_XiuzhenworldExpmap::Clear() {
  e_xiuzhenworldexpmap_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XiuzhenworldExpmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XiuzhenworldExpmap E_XiuzhenworldExpmap_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XiuzhenworldExpmap_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xiuzhenworldexpmap_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XiuzhenworldExpmap_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XiuzhenworldExpmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XiuzhenworldExpmap E_XiuzhenworldExpmap_List = 1;
  for (int i = 0; i < this->e_xiuzhenworldexpmap_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xiuzhenworldexpmap_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XiuzhenworldExpmap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XiuzhenworldExpmap E_XiuzhenworldExpmap_List = 1;
  for (int i = 0; i < this->e_xiuzhenworldexpmap_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xiuzhenworldexpmap_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XiuzhenworldExpmap::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XiuzhenworldExpmap E_XiuzhenworldExpmap_List = 1;
  total_size += 1 * this->e_xiuzhenworldexpmap_list_size();
  for (int i = 0; i < this->e_xiuzhenworldexpmap_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xiuzhenworldexpmap_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XiuzhenworldExpmap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XiuzhenworldExpmap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XiuzhenworldExpmap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XiuzhenworldExpmap::MergeFrom(const Sheet_XiuzhenworldExpmap& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xiuzhenworldexpmap_list_.MergeFrom(from.e_xiuzhenworldexpmap_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XiuzhenworldExpmap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XiuzhenworldExpmap::CopyFrom(const Sheet_XiuzhenworldExpmap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XiuzhenworldExpmap::IsInitialized() const {

  return true;
}

void Sheet_XiuzhenworldExpmap::Swap(Sheet_XiuzhenworldExpmap* other) {
  if (other != this) {
    e_xiuzhenworldexpmap_list_.Swap(&other->e_xiuzhenworldexpmap_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XiuzhenworldExpmap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XiuzhenworldExpmap_descriptor_;
  metadata.reflection = Sheet_XiuzhenworldExpmap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
