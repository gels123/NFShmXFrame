// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Festival.proto

#ifndef PROTOBUF_E_5fFestival_2eproto__INCLUDED
#define PROTOBUF_E_5fFestival_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fFestival_2eproto();
void protobuf_AssignDesc_E_5fFestival_2eproto();
void protobuf_ShutdownFile_E_5fFestival_2eproto();

class E_FestivalPeriodindex;
class Sheet_FestivalPeriodindex;
class E_FestivalFestival;
class Sheet_FestivalFestival;
class E_FestivalTemplate;
class Sheet_FestivalTemplate;
class E_FestivalMuban_rebatestoreExpendDesc;
class E_FestivalMuban_rebatestore;
class Sheet_FestivalMuban_rebatestore;
class E_FestivalMuban_rebatestore_mall;
class Sheet_FestivalMuban_rebatestore_mall;
class E_FestivalMuban_contrecharge;
class Sheet_FestivalMuban_contrecharge;
class E_FestivalMuban_contrecharge_totalTotalDesc;
class E_FestivalMuban_contrecharge_total;
class Sheet_FestivalMuban_contrecharge_total;
class E_FestivalMuban_contrecharge_day;
class Sheet_FestivalMuban_contrecharge_day;
class E_FestivalMuban_login;
class Sheet_FestivalMuban_login;
class E_FestivalMuban_firstrecharge;
class Sheet_FestivalMuban_firstrecharge;
class E_FestivalMuban_love;
class Sheet_FestivalMuban_love;
class E_FestivalMuban_love_rank;
class Sheet_FestivalMuban_love_rank;
class E_FestivalMuban_love_rank_data;
class Sheet_FestivalMuban_love_rank_data;
class E_FestivalMuban_love_task;
class Sheet_FestivalMuban_love_task;
class E_FestivalMuban_love_taskreward;
class Sheet_FestivalMuban_love_taskreward;
class E_FestivalMuban_addbox;
class Sheet_FestivalMuban_addbox;
class E_FestivalMuban_doublebox;
class Sheet_FestivalMuban_doublebox;
class E_FestivalMuban_bossfristkill;
class Sheet_FestivalMuban_bossfristkill;
class E_FestivalMuban_severrank;
class Sheet_FestivalMuban_severrank;
class E_FestivalMuban_severrank_data;
class Sheet_FestivalMuban_severrank_data;
class E_FestivalMuban_collectwordCostDesc;
class E_FestivalMuban_collectword;
class Sheet_FestivalMuban_collectword;
class E_FestivalMuban_sign;
class Sheet_FestivalMuban_sign;
class E_FestivalMuban_shop;
class Sheet_FestivalMuban_shop;
class E_FestivalMuban_rechange;
class Sheet_FestivalMuban_rechange;
class E_FestivalMuban_leiji;
class Sheet_FestivalMuban_leiji;
class E_FestivalMuban_zadan;
class Sheet_FestivalMuban_zadan;
class E_FestivalZadanconstant;
class Sheet_FestivalZadanconstant;
class E_FestivalMuban_turntable;
class Sheet_FestivalMuban_turntable;
class E_FestivalMuban_turntable_pool;
class Sheet_FestivalMuban_turntable_pool;
class E_FestivalMuban_turntable_task;
class Sheet_FestivalMuban_turntable_task;
class E_FestivalMuban_donate;
class Sheet_FestivalMuban_donate;
class E_FestivalMuban_donate_sever;
class Sheet_FestivalMuban_donate_sever;
class E_FestivalMuban_donate_single;
class Sheet_FestivalMuban_donate_single;
class E_FestivalMuban_donate_task;
class Sheet_FestivalMuban_donate_task;
class E_FestivalMuban_online;
class Sheet_FestivalMuban_online;
class E_FestivalMuban_rturntable;
class Sheet_FestivalMuban_rturntable;
class E_FestivalMuban_rturntable_recharge;
class Sheet_FestivalMuban_rturntable_recharge;
class E_FestivalMuban_rturntable_recharge_ratio;
class Sheet_FestivalMuban_rturntable_recharge_ratio;
class E_FestivalMuban_drawpize;
class Sheet_FestivalMuban_drawpize;
class E_FestivalMuban_drawpize_pool;
class Sheet_FestivalMuban_drawpize_pool;
class E_FestivalMuban_drawpize_total;
class Sheet_FestivalMuban_drawpize_total;
class E_FestivalMuban_totalrecharge;
class Sheet_FestivalMuban_totalrecharge;
class E_FestivalMuban_dailytotalrecharge;
class Sheet_FestivalMuban_dailytotalrecharge;
class E_FestivalMuban_play;
class Sheet_FestivalMuban_play;
class E_FestivalMuban_play_reward;
class Sheet_FestivalMuban_play_reward;
class E_FestivalMuban_play_game;
class Sheet_FestivalMuban_play_game;
class E_FestivalMuban_play_score;
class Sheet_FestivalMuban_play_score;

// ===================================================================

class E_FestivalPeriodindex : public ::google::protobuf::Message {
 public:
  E_FestivalPeriodindex();
  virtual ~E_FestivalPeriodindex();

  E_FestivalPeriodindex(const E_FestivalPeriodindex& from);

  inline E_FestivalPeriodindex& operator=(const E_FestivalPeriodindex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalPeriodindex& default_instance();

  void Swap(E_FestivalPeriodindex* other);

  // implements Message ----------------------------------------------

  E_FestivalPeriodindex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalPeriodindex& from);
  void MergeFrom(const E_FestivalPeriodindex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_minOrigalDay = 1;
  inline bool has_m_minorigalday() const;
  inline void clear_m_minorigalday();
  static const int kMMinOrigalDayFieldNumber = 1;
  inline ::google::protobuf::int32 m_minorigalday() const;
  inline void set_m_minorigalday(::google::protobuf::int32 value);

  // repeated int32 m_period = 2;
  inline int m_period_size() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period(int index) const;
  inline void set_m_period(int index, ::google::protobuf::int32 value);
  inline void add_m_period(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_period() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_period();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalPeriodindex)
 private:
  inline void set_has_m_minorigalday();
  inline void clear_has_m_minorigalday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_period_;
  ::google::protobuf::int32 m_minorigalday_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalPeriodindex* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalPeriodindex : public ::google::protobuf::Message {
 public:
  Sheet_FestivalPeriodindex();
  virtual ~Sheet_FestivalPeriodindex();

  Sheet_FestivalPeriodindex(const Sheet_FestivalPeriodindex& from);

  inline Sheet_FestivalPeriodindex& operator=(const Sheet_FestivalPeriodindex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalPeriodindex& default_instance();

  void Swap(Sheet_FestivalPeriodindex* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalPeriodindex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalPeriodindex& from);
  void MergeFrom(const Sheet_FestivalPeriodindex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalPeriodindex E_FestivalPeriodindex_List = 1;
  inline int e_festivalperiodindex_list_size() const;
  inline void clear_e_festivalperiodindex_list();
  static const int kEFestivalPeriodindexListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalPeriodindex& e_festivalperiodindex_list(int index) const;
  inline ::proto_ff::E_FestivalPeriodindex* mutable_e_festivalperiodindex_list(int index);
  inline ::proto_ff::E_FestivalPeriodindex* add_e_festivalperiodindex_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalPeriodindex >&
      e_festivalperiodindex_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalPeriodindex >*
      mutable_e_festivalperiodindex_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalPeriodindex)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalPeriodindex > e_festivalperiodindex_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalPeriodindex* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalFestival : public ::google::protobuf::Message {
 public:
  E_FestivalFestival();
  virtual ~E_FestivalFestival();

  E_FestivalFestival(const E_FestivalFestival& from);

  inline E_FestivalFestival& operator=(const E_FestivalFestival& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalFestival& default_instance();

  void Swap(E_FestivalFestival* other);

  // implements Message ----------------------------------------------

  E_FestivalFestival* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalFestival& from);
  void MergeFrom(const E_FestivalFestival& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalFestival)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalFestival* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalFestival : public ::google::protobuf::Message {
 public:
  Sheet_FestivalFestival();
  virtual ~Sheet_FestivalFestival();

  Sheet_FestivalFestival(const Sheet_FestivalFestival& from);

  inline Sheet_FestivalFestival& operator=(const Sheet_FestivalFestival& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalFestival& default_instance();

  void Swap(Sheet_FestivalFestival* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalFestival* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalFestival& from);
  void MergeFrom(const Sheet_FestivalFestival& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalFestival E_FestivalFestival_List = 1;
  inline int e_festivalfestival_list_size() const;
  inline void clear_e_festivalfestival_list();
  static const int kEFestivalFestivalListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalFestival& e_festivalfestival_list(int index) const;
  inline ::proto_ff::E_FestivalFestival* mutable_e_festivalfestival_list(int index);
  inline ::proto_ff::E_FestivalFestival* add_e_festivalfestival_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalFestival >&
      e_festivalfestival_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalFestival >*
      mutable_e_festivalfestival_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalFestival)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalFestival > e_festivalfestival_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalFestival* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalTemplate : public ::google::protobuf::Message {
 public:
  E_FestivalTemplate();
  virtual ~E_FestivalTemplate();

  E_FestivalTemplate(const E_FestivalTemplate& from);

  inline E_FestivalTemplate& operator=(const E_FestivalTemplate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalTemplate& default_instance();

  void Swap(E_FestivalTemplate* other);

  // implements Message ----------------------------------------------

  E_FestivalTemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalTemplate& from);
  void MergeFrom(const E_FestivalTemplate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_festivalId = 3;
  inline bool has_m_festivalid() const;
  inline void clear_m_festivalid();
  static const int kMFestivalIdFieldNumber = 3;
  inline ::google::protobuf::int32 m_festivalid() const;
  inline void set_m_festivalid(::google::protobuf::int32 value);

  // optional int32 m_timeType = 4;
  inline bool has_m_timetype() const;
  inline void clear_m_timetype();
  static const int kMTimeTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_timetype() const;
  inline void set_m_timetype(::google::protobuf::int32 value);

  // optional int32 m_level = 5;
  inline bool has_m_level() const;
  inline void clear_m_level();
  static const int kMLevelFieldNumber = 5;
  inline ::google::protobuf::int32 m_level() const;
  inline void set_m_level(::google::protobuf::int32 value);

  // optional int32 m_vipLevel = 6;
  inline bool has_m_viplevel() const;
  inline void clear_m_viplevel();
  static const int kMVipLevelFieldNumber = 6;
  inline ::google::protobuf::int32 m_viplevel() const;
  inline void set_m_viplevel(::google::protobuf::int32 value);

  // optional int32 m_rechange = 7;
  inline bool has_m_rechange() const;
  inline void clear_m_rechange();
  static const int kMRechangeFieldNumber = 7;
  inline ::google::protobuf::int32 m_rechange() const;
  inline void set_m_rechange(::google::protobuf::int32 value);

  // optional int32 m_severType = 8;
  inline bool has_m_severtype() const;
  inline void clear_m_severtype();
  static const int kMSeverTypeFieldNumber = 8;
  inline ::google::protobuf::int32 m_severtype() const;
  inline void set_m_severtype(::google::protobuf::int32 value);

  // optional string m_typeArg = 9;
  inline bool has_m_typearg() const;
  inline void clear_m_typearg();
  static const int kMTypeArgFieldNumber = 9;
  inline const ::std::string& m_typearg() const;
  inline void set_m_typearg(const ::std::string& value);
  inline void set_m_typearg(const char* value);
  inline void set_m_typearg(const char* value, size_t size);
  inline ::std::string* mutable_m_typearg();
  inline ::std::string* release_m_typearg();
  inline void set_allocated_m_typearg(::std::string* m_typearg);

  // optional int32 m_periodType = 10;
  inline bool has_m_periodtype() const;
  inline void clear_m_periodtype();
  static const int kMPeriodTypeFieldNumber = 10;
  inline ::google::protobuf::int32 m_periodtype() const;
  inline void set_m_periodtype(::google::protobuf::int32 value);

  // optional int32 m_period = 11;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 11;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_ifOpen = 12;
  inline bool has_m_ifopen() const;
  inline void clear_m_ifopen();
  static const int kMIfOpenFieldNumber = 12;
  inline ::google::protobuf::int32 m_ifopen() const;
  inline void set_m_ifopen(::google::protobuf::int32 value);

  // optional int32 m_activeID = 13;
  inline bool has_m_activeid() const;
  inline void clear_m_activeid();
  static const int kMActiveIDFieldNumber = 13;
  inline ::google::protobuf::int32 m_activeid() const;
  inline void set_m_activeid(::google::protobuf::int32 value);

  // repeated string m_timeArg = 14;
  inline int m_timearg_size() const;
  inline void clear_m_timearg();
  static const int kMTimeArgFieldNumber = 14;
  inline const ::std::string& m_timearg(int index) const;
  inline ::std::string* mutable_m_timearg(int index);
  inline void set_m_timearg(int index, const ::std::string& value);
  inline void set_m_timearg(int index, const char* value);
  inline void set_m_timearg(int index, const char* value, size_t size);
  inline ::std::string* add_m_timearg();
  inline void add_m_timearg(const ::std::string& value);
  inline void add_m_timearg(const char* value);
  inline void add_m_timearg(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_timearg() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_timearg();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalTemplate)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_festivalid();
  inline void clear_has_m_festivalid();
  inline void set_has_m_timetype();
  inline void clear_has_m_timetype();
  inline void set_has_m_level();
  inline void clear_has_m_level();
  inline void set_has_m_viplevel();
  inline void clear_has_m_viplevel();
  inline void set_has_m_rechange();
  inline void clear_has_m_rechange();
  inline void set_has_m_severtype();
  inline void clear_has_m_severtype();
  inline void set_has_m_typearg();
  inline void clear_has_m_typearg();
  inline void set_has_m_periodtype();
  inline void clear_has_m_periodtype();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_ifopen();
  inline void clear_has_m_ifopen();
  inline void set_has_m_activeid();
  inline void clear_has_m_activeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_name_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_festivalid_;
  ::google::protobuf::int32 m_timetype_;
  ::google::protobuf::int32 m_level_;
  ::google::protobuf::int32 m_viplevel_;
  ::google::protobuf::int32 m_rechange_;
  ::std::string* m_typearg_;
  ::google::protobuf::int32 m_severtype_;
  ::google::protobuf::int32 m_periodtype_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_ifopen_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_timearg_;
  ::google::protobuf::int32 m_activeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalTemplate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalTemplate : public ::google::protobuf::Message {
 public:
  Sheet_FestivalTemplate();
  virtual ~Sheet_FestivalTemplate();

  Sheet_FestivalTemplate(const Sheet_FestivalTemplate& from);

  inline Sheet_FestivalTemplate& operator=(const Sheet_FestivalTemplate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalTemplate& default_instance();

  void Swap(Sheet_FestivalTemplate* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalTemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalTemplate& from);
  void MergeFrom(const Sheet_FestivalTemplate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalTemplate E_FestivalTemplate_List = 1;
  inline int e_festivaltemplate_list_size() const;
  inline void clear_e_festivaltemplate_list();
  static const int kEFestivalTemplateListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalTemplate& e_festivaltemplate_list(int index) const;
  inline ::proto_ff::E_FestivalTemplate* mutable_e_festivaltemplate_list(int index);
  inline ::proto_ff::E_FestivalTemplate* add_e_festivaltemplate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalTemplate >&
      e_festivaltemplate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalTemplate >*
      mutable_e_festivaltemplate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalTemplate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalTemplate > e_festivaltemplate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalTemplate* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_rebatestoreExpendDesc : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_rebatestoreExpendDesc();
  virtual ~E_FestivalMuban_rebatestoreExpendDesc();

  E_FestivalMuban_rebatestoreExpendDesc(const E_FestivalMuban_rebatestoreExpendDesc& from);

  inline E_FestivalMuban_rebatestoreExpendDesc& operator=(const E_FestivalMuban_rebatestoreExpendDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_rebatestoreExpendDesc& default_instance();

  void Swap(E_FestivalMuban_rebatestoreExpendDesc* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_rebatestoreExpendDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_rebatestoreExpendDesc& from);
  void MergeFrom(const E_FestivalMuban_rebatestoreExpendDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_BoxID = 1;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // optional int32 m_Value = 2;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 2;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_rebatestoreExpendDesc)
 private:
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();
  inline void set_has_m_value();
  inline void clear_has_m_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_boxid_;
  ::google::protobuf::int32 m_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_rebatestoreExpendDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_rebatestore : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_rebatestore();
  virtual ~E_FestivalMuban_rebatestore();

  E_FestivalMuban_rebatestore(const E_FestivalMuban_rebatestore& from);

  inline E_FestivalMuban_rebatestore& operator=(const E_FestivalMuban_rebatestore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_rebatestore& default_instance();

  void Swap(E_FestivalMuban_rebatestore* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_rebatestore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_rebatestore& from);
  void MergeFrom(const E_FestivalMuban_rebatestore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_groupID = 3;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // repeated .proto_ff.E_FestivalMuban_rebatestoreExpendDesc m_expend = 4;
  inline int m_expend_size() const;
  inline void clear_m_expend();
  static const int kMExpendFieldNumber = 4;
  inline const ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc& m_expend(int index) const;
  inline ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc* mutable_m_expend(int index);
  inline ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc* add_m_expend();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc >&
      m_expend() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc >*
      mutable_m_expend();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_rebatestore)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc > m_expend_;
  ::google::protobuf::int32 m_groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_rebatestore* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_rebatestore : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_rebatestore();
  virtual ~Sheet_FestivalMuban_rebatestore();

  Sheet_FestivalMuban_rebatestore(const Sheet_FestivalMuban_rebatestore& from);

  inline Sheet_FestivalMuban_rebatestore& operator=(const Sheet_FestivalMuban_rebatestore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_rebatestore& default_instance();

  void Swap(Sheet_FestivalMuban_rebatestore* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_rebatestore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_rebatestore& from);
  void MergeFrom(const Sheet_FestivalMuban_rebatestore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_rebatestore E_FestivalMuban_rebatestore_List = 1;
  inline int e_festivalmuban_rebatestore_list_size() const;
  inline void clear_e_festivalmuban_rebatestore_list();
  static const int kEFestivalMubanRebatestoreListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_rebatestore& e_festivalmuban_rebatestore_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_rebatestore* mutable_e_festivalmuban_rebatestore_list(int index);
  inline ::proto_ff::E_FestivalMuban_rebatestore* add_e_festivalmuban_rebatestore_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore >&
      e_festivalmuban_rebatestore_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore >*
      mutable_e_festivalmuban_rebatestore_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_rebatestore)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore > e_festivalmuban_rebatestore_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_rebatestore* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_rebatestore_mall : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_rebatestore_mall();
  virtual ~E_FestivalMuban_rebatestore_mall();

  E_FestivalMuban_rebatestore_mall(const E_FestivalMuban_rebatestore_mall& from);

  inline E_FestivalMuban_rebatestore_mall& operator=(const E_FestivalMuban_rebatestore_mall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_rebatestore_mall& default_instance();

  void Swap(E_FestivalMuban_rebatestore_mall* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_rebatestore_mall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_rebatestore_mall& from);
  void MergeFrom(const E_FestivalMuban_rebatestore_mall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_mallType = 3;
  inline bool has_m_malltype() const;
  inline void clear_m_malltype();
  static const int kMMallTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_malltype() const;
  inline void set_m_malltype(::google::protobuf::int32 value);

  // optional int32 m_itemID = 4;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemIDFieldNumber = 4;
  inline ::google::protobuf::int32 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int32 value);

  // optional int32 m_price = 5;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 5;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 m_originPrice = 6;
  inline bool has_m_originprice() const;
  inline void clear_m_originprice();
  static const int kMOriginPriceFieldNumber = 6;
  inline ::google::protobuf::int32 m_originprice() const;
  inline void set_m_originprice(::google::protobuf::int32 value);

  // optional int32 m_discount = 7;
  inline bool has_m_discount() const;
  inline void clear_m_discount();
  static const int kMDiscountFieldNumber = 7;
  inline ::google::protobuf::int32 m_discount() const;
  inline void set_m_discount(::google::protobuf::int32 value);

  // optional int32 m_daily = 8;
  inline bool has_m_daily() const;
  inline void clear_m_daily();
  static const int kMDailyFieldNumber = 8;
  inline ::google::protobuf::int32 m_daily() const;
  inline void set_m_daily(::google::protobuf::int32 value);

  // optional int32 m_buyAmount = 9;
  inline bool has_m_buyamount() const;
  inline void clear_m_buyamount();
  static const int kMBuyAmountFieldNumber = 9;
  inline ::google::protobuf::int32 m_buyamount() const;
  inline void set_m_buyamount(::google::protobuf::int32 value);

  // optional int32 m_functionUnlock = 10;
  inline bool has_m_functionunlock() const;
  inline void clear_m_functionunlock();
  static const int kMFunctionUnlockFieldNumber = 10;
  inline ::google::protobuf::int32 m_functionunlock() const;
  inline void set_m_functionunlock(::google::protobuf::int32 value);

  // optional int32 m_openDay = 11;
  inline bool has_m_openday() const;
  inline void clear_m_openday();
  static const int kMOpenDayFieldNumber = 11;
  inline ::google::protobuf::int32 m_openday() const;
  inline void set_m_openday(::google::protobuf::int32 value);

  // optional int32 m_closeDay = 12;
  inline bool has_m_closeday() const;
  inline void clear_m_closeday();
  static const int kMCloseDayFieldNumber = 12;
  inline ::google::protobuf::int32 m_closeday() const;
  inline void set_m_closeday(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_rebatestore_mall)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_malltype();
  inline void clear_has_m_malltype();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_originprice();
  inline void clear_has_m_originprice();
  inline void set_has_m_discount();
  inline void clear_has_m_discount();
  inline void set_has_m_daily();
  inline void clear_has_m_daily();
  inline void set_has_m_buyamount();
  inline void clear_has_m_buyamount();
  inline void set_has_m_functionunlock();
  inline void clear_has_m_functionunlock();
  inline void set_has_m_openday();
  inline void clear_has_m_openday();
  inline void set_has_m_closeday();
  inline void clear_has_m_closeday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_malltype_;
  ::google::protobuf::int32 m_itemid_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 m_originprice_;
  ::google::protobuf::int32 m_discount_;
  ::google::protobuf::int32 m_daily_;
  ::google::protobuf::int32 m_buyamount_;
  ::google::protobuf::int32 m_functionunlock_;
  ::google::protobuf::int32 m_openday_;
  ::google::protobuf::int32 m_closeday_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_rebatestore_mall* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_rebatestore_mall : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_rebatestore_mall();
  virtual ~Sheet_FestivalMuban_rebatestore_mall();

  Sheet_FestivalMuban_rebatestore_mall(const Sheet_FestivalMuban_rebatestore_mall& from);

  inline Sheet_FestivalMuban_rebatestore_mall& operator=(const Sheet_FestivalMuban_rebatestore_mall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_rebatestore_mall& default_instance();

  void Swap(Sheet_FestivalMuban_rebatestore_mall* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_rebatestore_mall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_rebatestore_mall& from);
  void MergeFrom(const Sheet_FestivalMuban_rebatestore_mall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_rebatestore_mall E_FestivalMuban_rebatestore_mall_List = 1;
  inline int e_festivalmuban_rebatestore_mall_list_size() const;
  inline void clear_e_festivalmuban_rebatestore_mall_list();
  static const int kEFestivalMubanRebatestoreMallListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_rebatestore_mall& e_festivalmuban_rebatestore_mall_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_rebatestore_mall* mutable_e_festivalmuban_rebatestore_mall_list(int index);
  inline ::proto_ff::E_FestivalMuban_rebatestore_mall* add_e_festivalmuban_rebatestore_mall_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore_mall >&
      e_festivalmuban_rebatestore_mall_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore_mall >*
      mutable_e_festivalmuban_rebatestore_mall_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_rebatestore_mall)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore_mall > e_festivalmuban_rebatestore_mall_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_rebatestore_mall* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_contrecharge : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_contrecharge();
  virtual ~E_FestivalMuban_contrecharge();

  E_FestivalMuban_contrecharge(const E_FestivalMuban_contrecharge& from);

  inline E_FestivalMuban_contrecharge& operator=(const E_FestivalMuban_contrecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_contrecharge& default_instance();

  void Swap(E_FestivalMuban_contrecharge* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_contrecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_contrecharge& from);
  void MergeFrom(const E_FestivalMuban_contrecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_totalGroup = 3;
  inline bool has_m_totalgroup() const;
  inline void clear_m_totalgroup();
  static const int kMTotalGroupFieldNumber = 3;
  inline ::google::protobuf::int32 m_totalgroup() const;
  inline void set_m_totalgroup(::google::protobuf::int32 value);

  // optional int32 m_dailyGroup = 4;
  inline bool has_m_dailygroup() const;
  inline void clear_m_dailygroup();
  static const int kMDailyGroupFieldNumber = 4;
  inline ::google::protobuf::int32 m_dailygroup() const;
  inline void set_m_dailygroup(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_contrecharge)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_totalgroup();
  inline void clear_has_m_totalgroup();
  inline void set_has_m_dailygroup();
  inline void clear_has_m_dailygroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_totalgroup_;
  ::google::protobuf::int32 m_dailygroup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_contrecharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_contrecharge : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_contrecharge();
  virtual ~Sheet_FestivalMuban_contrecharge();

  Sheet_FestivalMuban_contrecharge(const Sheet_FestivalMuban_contrecharge& from);

  inline Sheet_FestivalMuban_contrecharge& operator=(const Sheet_FestivalMuban_contrecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_contrecharge& default_instance();

  void Swap(Sheet_FestivalMuban_contrecharge* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_contrecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_contrecharge& from);
  void MergeFrom(const Sheet_FestivalMuban_contrecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_contrecharge E_FestivalMuban_contrecharge_List = 1;
  inline int e_festivalmuban_contrecharge_list_size() const;
  inline void clear_e_festivalmuban_contrecharge_list();
  static const int kEFestivalMubanContrechargeListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_contrecharge& e_festivalmuban_contrecharge_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_contrecharge* mutable_e_festivalmuban_contrecharge_list(int index);
  inline ::proto_ff::E_FestivalMuban_contrecharge* add_e_festivalmuban_contrecharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge >&
      e_festivalmuban_contrecharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge >*
      mutable_e_festivalmuban_contrecharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_contrecharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge > e_festivalmuban_contrecharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_contrecharge* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_contrecharge_totalTotalDesc : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_contrecharge_totalTotalDesc();
  virtual ~E_FestivalMuban_contrecharge_totalTotalDesc();

  E_FestivalMuban_contrecharge_totalTotalDesc(const E_FestivalMuban_contrecharge_totalTotalDesc& from);

  inline E_FestivalMuban_contrecharge_totalTotalDesc& operator=(const E_FestivalMuban_contrecharge_totalTotalDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_contrecharge_totalTotalDesc& default_instance();

  void Swap(E_FestivalMuban_contrecharge_totalTotalDesc* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_contrecharge_totalTotalDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_contrecharge_totalTotalDesc& from);
  void MergeFrom(const E_FestivalMuban_contrecharge_totalTotalDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_Box = 1;
  inline bool has_m_box() const;
  inline void clear_m_box();
  static const int kMBoxFieldNumber = 1;
  inline ::google::protobuf::int32 m_box() const;
  inline void set_m_box(::google::protobuf::int32 value);

  // optional int32 m_Days = 2;
  inline bool has_m_days() const;
  inline void clear_m_days();
  static const int kMDaysFieldNumber = 2;
  inline ::google::protobuf::int32 m_days() const;
  inline void set_m_days(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_contrecharge_totalTotalDesc)
 private:
  inline void set_has_m_box();
  inline void clear_has_m_box();
  inline void set_has_m_days();
  inline void clear_has_m_days();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_box_;
  ::google::protobuf::int32 m_days_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_contrecharge_totalTotalDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_contrecharge_total : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_contrecharge_total();
  virtual ~E_FestivalMuban_contrecharge_total();

  E_FestivalMuban_contrecharge_total(const E_FestivalMuban_contrecharge_total& from);

  inline E_FestivalMuban_contrecharge_total& operator=(const E_FestivalMuban_contrecharge_total& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_contrecharge_total& default_instance();

  void Swap(E_FestivalMuban_contrecharge_total* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_contrecharge_total* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_contrecharge_total& from);
  void MergeFrom(const E_FestivalMuban_contrecharge_total& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_Gear = 3;
  inline bool has_m_gear() const;
  inline void clear_m_gear();
  static const int kMGearFieldNumber = 3;
  inline ::google::protobuf::int32 m_gear() const;
  inline void set_m_gear(::google::protobuf::int32 value);

  // optional int32 m_recharge = 4;
  inline bool has_m_recharge() const;
  inline void clear_m_recharge();
  static const int kMRechargeFieldNumber = 4;
  inline ::google::protobuf::int32 m_recharge() const;
  inline void set_m_recharge(::google::protobuf::int32 value);

  // repeated .proto_ff.E_FestivalMuban_contrecharge_totalTotalDesc m_total = 5;
  inline int m_total_size() const;
  inline void clear_m_total();
  static const int kMTotalFieldNumber = 5;
  inline const ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc& m_total(int index) const;
  inline ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc* mutable_m_total(int index);
  inline ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc* add_m_total();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc >&
      m_total() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc >*
      mutable_m_total();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_contrecharge_total)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_gear();
  inline void clear_has_m_gear();
  inline void set_has_m_recharge();
  inline void clear_has_m_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_gear_;
  ::google::protobuf::int32 m_recharge_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc > m_total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_contrecharge_total* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_contrecharge_total : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_contrecharge_total();
  virtual ~Sheet_FestivalMuban_contrecharge_total();

  Sheet_FestivalMuban_contrecharge_total(const Sheet_FestivalMuban_contrecharge_total& from);

  inline Sheet_FestivalMuban_contrecharge_total& operator=(const Sheet_FestivalMuban_contrecharge_total& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_contrecharge_total& default_instance();

  void Swap(Sheet_FestivalMuban_contrecharge_total* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_contrecharge_total* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_contrecharge_total& from);
  void MergeFrom(const Sheet_FestivalMuban_contrecharge_total& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_contrecharge_total E_FestivalMuban_contrecharge_total_List = 1;
  inline int e_festivalmuban_contrecharge_total_list_size() const;
  inline void clear_e_festivalmuban_contrecharge_total_list();
  static const int kEFestivalMubanContrechargeTotalListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_contrecharge_total& e_festivalmuban_contrecharge_total_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_contrecharge_total* mutable_e_festivalmuban_contrecharge_total_list(int index);
  inline ::proto_ff::E_FestivalMuban_contrecharge_total* add_e_festivalmuban_contrecharge_total_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_total >&
      e_festivalmuban_contrecharge_total_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_total >*
      mutable_e_festivalmuban_contrecharge_total_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_contrecharge_total)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_total > e_festivalmuban_contrecharge_total_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_contrecharge_total* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_contrecharge_day : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_contrecharge_day();
  virtual ~E_FestivalMuban_contrecharge_day();

  E_FestivalMuban_contrecharge_day(const E_FestivalMuban_contrecharge_day& from);

  inline E_FestivalMuban_contrecharge_day& operator=(const E_FestivalMuban_contrecharge_day& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_contrecharge_day& default_instance();

  void Swap(E_FestivalMuban_contrecharge_day* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_contrecharge_day* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_contrecharge_day& from);
  void MergeFrom(const E_FestivalMuban_contrecharge_day& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_day = 3;
  inline bool has_m_day() const;
  inline void clear_m_day();
  static const int kMDayFieldNumber = 3;
  inline ::google::protobuf::int32 m_day() const;
  inline void set_m_day(::google::protobuf::int32 value);

  // optional int32 m_gear = 4;
  inline bool has_m_gear() const;
  inline void clear_m_gear();
  static const int kMGearFieldNumber = 4;
  inline ::google::protobuf::int32 m_gear() const;
  inline void set_m_gear(::google::protobuf::int32 value);

  // optional int32 m_box = 5;
  inline bool has_m_box() const;
  inline void clear_m_box();
  static const int kMBoxFieldNumber = 5;
  inline ::google::protobuf::int32 m_box() const;
  inline void set_m_box(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_contrecharge_day)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_day();
  inline void clear_has_m_day();
  inline void set_has_m_gear();
  inline void clear_has_m_gear();
  inline void set_has_m_box();
  inline void clear_has_m_box();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_day_;
  ::google::protobuf::int32 m_gear_;
  ::google::protobuf::int32 m_box_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_contrecharge_day* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_contrecharge_day : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_contrecharge_day();
  virtual ~Sheet_FestivalMuban_contrecharge_day();

  Sheet_FestivalMuban_contrecharge_day(const Sheet_FestivalMuban_contrecharge_day& from);

  inline Sheet_FestivalMuban_contrecharge_day& operator=(const Sheet_FestivalMuban_contrecharge_day& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_contrecharge_day& default_instance();

  void Swap(Sheet_FestivalMuban_contrecharge_day* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_contrecharge_day* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_contrecharge_day& from);
  void MergeFrom(const Sheet_FestivalMuban_contrecharge_day& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_contrecharge_day E_FestivalMuban_contrecharge_day_List = 1;
  inline int e_festivalmuban_contrecharge_day_list_size() const;
  inline void clear_e_festivalmuban_contrecharge_day_list();
  static const int kEFestivalMubanContrechargeDayListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_contrecharge_day& e_festivalmuban_contrecharge_day_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_contrecharge_day* mutable_e_festivalmuban_contrecharge_day_list(int index);
  inline ::proto_ff::E_FestivalMuban_contrecharge_day* add_e_festivalmuban_contrecharge_day_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_day >&
      e_festivalmuban_contrecharge_day_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_day >*
      mutable_e_festivalmuban_contrecharge_day_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_contrecharge_day)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_day > e_festivalmuban_contrecharge_day_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_contrecharge_day* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_login : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_login();
  virtual ~E_FestivalMuban_login();

  E_FestivalMuban_login(const E_FestivalMuban_login& from);

  inline E_FestivalMuban_login& operator=(const E_FestivalMuban_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_login& default_instance();

  void Swap(E_FestivalMuban_login* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_login& from);
  void MergeFrom(const E_FestivalMuban_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_loginDay = 3;
  inline bool has_m_loginday() const;
  inline void clear_m_loginday();
  static const int kMLoginDayFieldNumber = 3;
  inline ::google::protobuf::int32 m_loginday() const;
  inline void set_m_loginday(::google::protobuf::int32 value);

  // optional int32 m_boxid = 4;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxidFieldNumber = 4;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_login)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_loginday();
  inline void clear_has_m_loginday();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_loginday_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_login* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_login : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_login();
  virtual ~Sheet_FestivalMuban_login();

  Sheet_FestivalMuban_login(const Sheet_FestivalMuban_login& from);

  inline Sheet_FestivalMuban_login& operator=(const Sheet_FestivalMuban_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_login& default_instance();

  void Swap(Sheet_FestivalMuban_login* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_login& from);
  void MergeFrom(const Sheet_FestivalMuban_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_login E_FestivalMuban_login_List = 1;
  inline int e_festivalmuban_login_list_size() const;
  inline void clear_e_festivalmuban_login_list();
  static const int kEFestivalMubanLoginListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_login& e_festivalmuban_login_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_login* mutable_e_festivalmuban_login_list(int index);
  inline ::proto_ff::E_FestivalMuban_login* add_e_festivalmuban_login_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_login >&
      e_festivalmuban_login_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_login >*
      mutable_e_festivalmuban_login_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_login)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_login > e_festivalmuban_login_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_login* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_firstrecharge : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_firstrecharge();
  virtual ~E_FestivalMuban_firstrecharge();

  E_FestivalMuban_firstrecharge(const E_FestivalMuban_firstrecharge& from);

  inline E_FestivalMuban_firstrecharge& operator=(const E_FestivalMuban_firstrecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_firstrecharge& default_instance();

  void Swap(E_FestivalMuban_firstrecharge* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_firstrecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_firstrecharge& from);
  void MergeFrom(const E_FestivalMuban_firstrecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_day = 3;
  inline bool has_m_day() const;
  inline void clear_m_day();
  static const int kMDayFieldNumber = 3;
  inline ::google::protobuf::int32 m_day() const;
  inline void set_m_day(::google::protobuf::int32 value);

  // optional int32 m_gear = 4;
  inline bool has_m_gear() const;
  inline void clear_m_gear();
  static const int kMGearFieldNumber = 4;
  inline ::google::protobuf::int32 m_gear() const;
  inline void set_m_gear(::google::protobuf::int32 value);

  // optional int32 m_recharge = 5;
  inline bool has_m_recharge() const;
  inline void clear_m_recharge();
  static const int kMRechargeFieldNumber = 5;
  inline ::google::protobuf::int32 m_recharge() const;
  inline void set_m_recharge(::google::protobuf::int32 value);

  // optional int32 m_boxid = 6;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxidFieldNumber = 6;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_firstrecharge)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_day();
  inline void clear_has_m_day();
  inline void set_has_m_gear();
  inline void clear_has_m_gear();
  inline void set_has_m_recharge();
  inline void clear_has_m_recharge();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_day_;
  ::google::protobuf::int32 m_gear_;
  ::google::protobuf::int32 m_recharge_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_firstrecharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_firstrecharge : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_firstrecharge();
  virtual ~Sheet_FestivalMuban_firstrecharge();

  Sheet_FestivalMuban_firstrecharge(const Sheet_FestivalMuban_firstrecharge& from);

  inline Sheet_FestivalMuban_firstrecharge& operator=(const Sheet_FestivalMuban_firstrecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_firstrecharge& default_instance();

  void Swap(Sheet_FestivalMuban_firstrecharge* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_firstrecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_firstrecharge& from);
  void MergeFrom(const Sheet_FestivalMuban_firstrecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_firstrecharge E_FestivalMuban_firstrecharge_List = 1;
  inline int e_festivalmuban_firstrecharge_list_size() const;
  inline void clear_e_festivalmuban_firstrecharge_list();
  static const int kEFestivalMubanFirstrechargeListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_firstrecharge& e_festivalmuban_firstrecharge_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_firstrecharge* mutable_e_festivalmuban_firstrecharge_list(int index);
  inline ::proto_ff::E_FestivalMuban_firstrecharge* add_e_festivalmuban_firstrecharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_firstrecharge >&
      e_festivalmuban_firstrecharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_firstrecharge >*
      mutable_e_festivalmuban_firstrecharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_firstrecharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_firstrecharge > e_festivalmuban_firstrecharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_firstrecharge* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_love : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_love();
  virtual ~E_FestivalMuban_love();

  E_FestivalMuban_love(const E_FestivalMuban_love& from);

  inline E_FestivalMuban_love& operator=(const E_FestivalMuban_love& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_love& default_instance();

  void Swap(E_FestivalMuban_love* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_love* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_love& from);
  void MergeFrom(const E_FestivalMuban_love& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_taskPointID = 3;
  inline bool has_m_taskpointid() const;
  inline void clear_m_taskpointid();
  static const int kMTaskPointIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_taskpointid() const;
  inline void set_m_taskpointid(::google::protobuf::int32 value);

  // optional int32 m_rankGroup = 4;
  inline bool has_m_rankgroup() const;
  inline void clear_m_rankgroup();
  static const int kMRankGroupFieldNumber = 4;
  inline ::google::protobuf::int32 m_rankgroup() const;
  inline void set_m_rankgroup(::google::protobuf::int32 value);

  // optional int32 m_taskGroup = 5;
  inline bool has_m_taskgroup() const;
  inline void clear_m_taskgroup();
  static const int kMTaskGroupFieldNumber = 5;
  inline ::google::protobuf::int32 m_taskgroup() const;
  inline void set_m_taskgroup(::google::protobuf::int32 value);

  // optional int32 m_taskRewardGroup = 6;
  inline bool has_m_taskrewardgroup() const;
  inline void clear_m_taskrewardgroup();
  static const int kMTaskRewardGroupFieldNumber = 6;
  inline ::google::protobuf::int32 m_taskrewardgroup() const;
  inline void set_m_taskrewardgroup(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_love)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_taskpointid();
  inline void clear_has_m_taskpointid();
  inline void set_has_m_rankgroup();
  inline void clear_has_m_rankgroup();
  inline void set_has_m_taskgroup();
  inline void clear_has_m_taskgroup();
  inline void set_has_m_taskrewardgroup();
  inline void clear_has_m_taskrewardgroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_taskpointid_;
  ::google::protobuf::int32 m_rankgroup_;
  ::google::protobuf::int32 m_taskgroup_;
  ::google::protobuf::int32 m_taskrewardgroup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_love* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_love : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_love();
  virtual ~Sheet_FestivalMuban_love();

  Sheet_FestivalMuban_love(const Sheet_FestivalMuban_love& from);

  inline Sheet_FestivalMuban_love& operator=(const Sheet_FestivalMuban_love& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_love& default_instance();

  void Swap(Sheet_FestivalMuban_love* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_love* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_love& from);
  void MergeFrom(const Sheet_FestivalMuban_love& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_love E_FestivalMuban_love_List = 1;
  inline int e_festivalmuban_love_list_size() const;
  inline void clear_e_festivalmuban_love_list();
  static const int kEFestivalMubanLoveListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_love& e_festivalmuban_love_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_love* mutable_e_festivalmuban_love_list(int index);
  inline ::proto_ff::E_FestivalMuban_love* add_e_festivalmuban_love_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love >&
      e_festivalmuban_love_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love >*
      mutable_e_festivalmuban_love_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_love)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love > e_festivalmuban_love_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_love* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_love_rank : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_love_rank();
  virtual ~E_FestivalMuban_love_rank();

  E_FestivalMuban_love_rank(const E_FestivalMuban_love_rank& from);

  inline E_FestivalMuban_love_rank& operator=(const E_FestivalMuban_love_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_love_rank& default_instance();

  void Swap(E_FestivalMuban_love_rank* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_love_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_love_rank& from);
  void MergeFrom(const E_FestivalMuban_love_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupid = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupidFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_rewardShow = 3;
  inline bool has_m_rewardshow() const;
  inline void clear_m_rewardshow();
  static const int kMRewardShowFieldNumber = 3;
  inline ::google::protobuf::int32 m_rewardshow() const;
  inline void set_m_rewardshow(::google::protobuf::int32 value);

  // optional int32 m_dataGroupID = 4;
  inline bool has_m_datagroupid() const;
  inline void clear_m_datagroupid();
  static const int kMDataGroupIDFieldNumber = 4;
  inline ::google::protobuf::int32 m_datagroupid() const;
  inline void set_m_datagroupid(::google::protobuf::int32 value);

  // optional int32 m_rankType = 5;
  inline bool has_m_ranktype() const;
  inline void clear_m_ranktype();
  static const int kMRankTypeFieldNumber = 5;
  inline ::google::protobuf::int32 m_ranktype() const;
  inline void set_m_ranktype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_love_rank)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_rewardshow();
  inline void clear_has_m_rewardshow();
  inline void set_has_m_datagroupid();
  inline void clear_has_m_datagroupid();
  inline void set_has_m_ranktype();
  inline void clear_has_m_ranktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_rewardshow_;
  ::google::protobuf::int32 m_datagroupid_;
  ::google::protobuf::int32 m_ranktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_love_rank* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_love_rank : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_love_rank();
  virtual ~Sheet_FestivalMuban_love_rank();

  Sheet_FestivalMuban_love_rank(const Sheet_FestivalMuban_love_rank& from);

  inline Sheet_FestivalMuban_love_rank& operator=(const Sheet_FestivalMuban_love_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_love_rank& default_instance();

  void Swap(Sheet_FestivalMuban_love_rank* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_love_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_love_rank& from);
  void MergeFrom(const Sheet_FestivalMuban_love_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_love_rank E_FestivalMuban_love_rank_List = 1;
  inline int e_festivalmuban_love_rank_list_size() const;
  inline void clear_e_festivalmuban_love_rank_list();
  static const int kEFestivalMubanLoveRankListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_love_rank& e_festivalmuban_love_rank_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_love_rank* mutable_e_festivalmuban_love_rank_list(int index);
  inline ::proto_ff::E_FestivalMuban_love_rank* add_e_festivalmuban_love_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank >&
      e_festivalmuban_love_rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank >*
      mutable_e_festivalmuban_love_rank_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_love_rank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank > e_festivalmuban_love_rank_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_love_rank* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_love_rank_data : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_love_rank_data();
  virtual ~E_FestivalMuban_love_rank_data();

  E_FestivalMuban_love_rank_data(const E_FestivalMuban_love_rank_data& from);

  inline E_FestivalMuban_love_rank_data& operator=(const E_FestivalMuban_love_rank_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_love_rank_data& default_instance();

  void Swap(E_FestivalMuban_love_rank_data* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_love_rank_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_love_rank_data& from);
  void MergeFrom(const E_FestivalMuban_love_rank_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_maxRank = 3;
  inline bool has_m_maxrank() const;
  inline void clear_m_maxrank();
  static const int kMMaxRankFieldNumber = 3;
  inline ::google::protobuf::int32 m_maxrank() const;
  inline void set_m_maxrank(::google::protobuf::int32 value);

  // optional int32 m_minRank = 4;
  inline bool has_m_minrank() const;
  inline void clear_m_minrank();
  static const int kMMinRankFieldNumber = 4;
  inline ::google::protobuf::int32 m_minrank() const;
  inline void set_m_minrank(::google::protobuf::int32 value);

  // optional int32 m_rankValue = 5;
  inline bool has_m_rankvalue() const;
  inline void clear_m_rankvalue();
  static const int kMRankValueFieldNumber = 5;
  inline ::google::protobuf::int32 m_rankvalue() const;
  inline void set_m_rankvalue(::google::protobuf::int32 value);

  // optional int32 m_boxID = 6;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxIDFieldNumber = 6;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_love_rank_data)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_maxrank();
  inline void clear_has_m_maxrank();
  inline void set_has_m_minrank();
  inline void clear_has_m_minrank();
  inline void set_has_m_rankvalue();
  inline void clear_has_m_rankvalue();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_maxrank_;
  ::google::protobuf::int32 m_minrank_;
  ::google::protobuf::int32 m_rankvalue_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_love_rank_data* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_love_rank_data : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_love_rank_data();
  virtual ~Sheet_FestivalMuban_love_rank_data();

  Sheet_FestivalMuban_love_rank_data(const Sheet_FestivalMuban_love_rank_data& from);

  inline Sheet_FestivalMuban_love_rank_data& operator=(const Sheet_FestivalMuban_love_rank_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_love_rank_data& default_instance();

  void Swap(Sheet_FestivalMuban_love_rank_data* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_love_rank_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_love_rank_data& from);
  void MergeFrom(const Sheet_FestivalMuban_love_rank_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_love_rank_data E_FestivalMuban_love_rank_data_List = 1;
  inline int e_festivalmuban_love_rank_data_list_size() const;
  inline void clear_e_festivalmuban_love_rank_data_list();
  static const int kEFestivalMubanLoveRankDataListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_love_rank_data& e_festivalmuban_love_rank_data_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_love_rank_data* mutable_e_festivalmuban_love_rank_data_list(int index);
  inline ::proto_ff::E_FestivalMuban_love_rank_data* add_e_festivalmuban_love_rank_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank_data >&
      e_festivalmuban_love_rank_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank_data >*
      mutable_e_festivalmuban_love_rank_data_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_love_rank_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank_data > e_festivalmuban_love_rank_data_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_love_rank_data* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_love_task : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_love_task();
  virtual ~E_FestivalMuban_love_task();

  E_FestivalMuban_love_task(const E_FestivalMuban_love_task& from);

  inline E_FestivalMuban_love_task& operator=(const E_FestivalMuban_love_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_love_task& default_instance();

  void Swap(E_FestivalMuban_love_task* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_love_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_love_task& from);
  void MergeFrom(const E_FestivalMuban_love_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_eventType = 3;
  inline bool has_m_eventtype() const;
  inline void clear_m_eventtype();
  static const int kMEventTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_eventtype() const;
  inline void set_m_eventtype(::google::protobuf::int32 value);

  // optional int32 m_reachPrice = 4;
  inline bool has_m_reachprice() const;
  inline void clear_m_reachprice();
  static const int kMReachPriceFieldNumber = 4;
  inline ::google::protobuf::int32 m_reachprice() const;
  inline void set_m_reachprice(::google::protobuf::int32 value);

  // optional int32 m_link = 5;
  inline bool has_m_link() const;
  inline void clear_m_link();
  static const int kMLinkFieldNumber = 5;
  inline ::google::protobuf::int32 m_link() const;
  inline void set_m_link(::google::protobuf::int32 value);

  // optional int32 m_rewardTimes = 6;
  inline bool has_m_rewardtimes() const;
  inline void clear_m_rewardtimes();
  static const int kMRewardTimesFieldNumber = 6;
  inline ::google::protobuf::int32 m_rewardtimes() const;
  inline void set_m_rewardtimes(::google::protobuf::int32 value);

  // optional int32 m_reward = 7;
  inline bool has_m_reward() const;
  inline void clear_m_reward();
  static const int kMRewardFieldNumber = 7;
  inline ::google::protobuf::int32 m_reward() const;
  inline void set_m_reward(::google::protobuf::int32 value);

  // repeated int32 m_param = 8;
  inline int m_param_size() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 8;
  inline ::google::protobuf::int32 m_param(int index) const;
  inline void set_m_param(int index, ::google::protobuf::int32 value);
  inline void add_m_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_param();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_love_task)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_eventtype();
  inline void clear_has_m_eventtype();
  inline void set_has_m_reachprice();
  inline void clear_has_m_reachprice();
  inline void set_has_m_link();
  inline void clear_has_m_link();
  inline void set_has_m_rewardtimes();
  inline void clear_has_m_rewardtimes();
  inline void set_has_m_reward();
  inline void clear_has_m_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_eventtype_;
  ::google::protobuf::int32 m_reachprice_;
  ::google::protobuf::int32 m_link_;
  ::google::protobuf::int32 m_rewardtimes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_param_;
  ::google::protobuf::int32 m_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_love_task* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_love_task : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_love_task();
  virtual ~Sheet_FestivalMuban_love_task();

  Sheet_FestivalMuban_love_task(const Sheet_FestivalMuban_love_task& from);

  inline Sheet_FestivalMuban_love_task& operator=(const Sheet_FestivalMuban_love_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_love_task& default_instance();

  void Swap(Sheet_FestivalMuban_love_task* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_love_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_love_task& from);
  void MergeFrom(const Sheet_FestivalMuban_love_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_love_task E_FestivalMuban_love_task_List = 1;
  inline int e_festivalmuban_love_task_list_size() const;
  inline void clear_e_festivalmuban_love_task_list();
  static const int kEFestivalMubanLoveTaskListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_love_task& e_festivalmuban_love_task_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_love_task* mutable_e_festivalmuban_love_task_list(int index);
  inline ::proto_ff::E_FestivalMuban_love_task* add_e_festivalmuban_love_task_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_task >&
      e_festivalmuban_love_task_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_task >*
      mutable_e_festivalmuban_love_task_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_love_task)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_task > e_festivalmuban_love_task_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_love_task* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_love_taskreward : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_love_taskreward();
  virtual ~E_FestivalMuban_love_taskreward();

  E_FestivalMuban_love_taskreward(const E_FestivalMuban_love_taskreward& from);

  inline E_FestivalMuban_love_taskreward& operator=(const E_FestivalMuban_love_taskreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_love_taskreward& default_instance();

  void Swap(E_FestivalMuban_love_taskreward* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_love_taskreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_love_taskreward& from);
  void MergeFrom(const E_FestivalMuban_love_taskreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_value = 3;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 3;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_box = 4;
  inline bool has_m_box() const;
  inline void clear_m_box();
  static const int kMBoxFieldNumber = 4;
  inline ::google::protobuf::int32 m_box() const;
  inline void set_m_box(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_love_taskreward)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_box();
  inline void clear_has_m_box();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_box_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_love_taskreward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_love_taskreward : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_love_taskreward();
  virtual ~Sheet_FestivalMuban_love_taskreward();

  Sheet_FestivalMuban_love_taskreward(const Sheet_FestivalMuban_love_taskreward& from);

  inline Sheet_FestivalMuban_love_taskreward& operator=(const Sheet_FestivalMuban_love_taskreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_love_taskreward& default_instance();

  void Swap(Sheet_FestivalMuban_love_taskreward* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_love_taskreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_love_taskreward& from);
  void MergeFrom(const Sheet_FestivalMuban_love_taskreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_love_taskreward E_FestivalMuban_love_taskreward_List = 1;
  inline int e_festivalmuban_love_taskreward_list_size() const;
  inline void clear_e_festivalmuban_love_taskreward_list();
  static const int kEFestivalMubanLoveTaskrewardListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_love_taskreward& e_festivalmuban_love_taskreward_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_love_taskreward* mutable_e_festivalmuban_love_taskreward_list(int index);
  inline ::proto_ff::E_FestivalMuban_love_taskreward* add_e_festivalmuban_love_taskreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_taskreward >&
      e_festivalmuban_love_taskreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_taskreward >*
      mutable_e_festivalmuban_love_taskreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_love_taskreward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_taskreward > e_festivalmuban_love_taskreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_love_taskreward* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_addbox : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_addbox();
  virtual ~E_FestivalMuban_addbox();

  E_FestivalMuban_addbox(const E_FestivalMuban_addbox& from);

  inline E_FestivalMuban_addbox& operator=(const E_FestivalMuban_addbox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_addbox& default_instance();

  void Swap(E_FestivalMuban_addbox* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_addbox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_addbox& from);
  void MergeFrom(const E_FestivalMuban_addbox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_lvLimit = 3;
  inline bool has_m_lvlimit() const;
  inline void clear_m_lvlimit();
  static const int kMLvLimitFieldNumber = 3;
  inline ::google::protobuf::int32 m_lvlimit() const;
  inline void set_m_lvlimit(::google::protobuf::int32 value);

  // optional int32 m_type = 4;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional string m_arg = 5;
  inline bool has_m_arg() const;
  inline void clear_m_arg();
  static const int kMArgFieldNumber = 5;
  inline const ::std::string& m_arg() const;
  inline void set_m_arg(const ::std::string& value);
  inline void set_m_arg(const char* value);
  inline void set_m_arg(const char* value, size_t size);
  inline ::std::string* mutable_m_arg();
  inline ::std::string* release_m_arg();
  inline void set_allocated_m_arg(::std::string* m_arg);

  // optional int32 m_addBoxId = 6;
  inline bool has_m_addboxid() const;
  inline void clear_m_addboxid();
  static const int kMAddBoxIdFieldNumber = 6;
  inline ::google::protobuf::int32 m_addboxid() const;
  inline void set_m_addboxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_addbox)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_lvlimit();
  inline void clear_has_m_lvlimit();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_arg();
  inline void clear_has_m_arg();
  inline void set_has_m_addboxid();
  inline void clear_has_m_addboxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_lvlimit_;
  ::google::protobuf::int32 m_type_;
  ::std::string* m_arg_;
  ::google::protobuf::int32 m_addboxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_addbox* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_addbox : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_addbox();
  virtual ~Sheet_FestivalMuban_addbox();

  Sheet_FestivalMuban_addbox(const Sheet_FestivalMuban_addbox& from);

  inline Sheet_FestivalMuban_addbox& operator=(const Sheet_FestivalMuban_addbox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_addbox& default_instance();

  void Swap(Sheet_FestivalMuban_addbox* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_addbox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_addbox& from);
  void MergeFrom(const Sheet_FestivalMuban_addbox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_addbox E_FestivalMuban_addbox_List = 1;
  inline int e_festivalmuban_addbox_list_size() const;
  inline void clear_e_festivalmuban_addbox_list();
  static const int kEFestivalMubanAddboxListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_addbox& e_festivalmuban_addbox_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_addbox* mutable_e_festivalmuban_addbox_list(int index);
  inline ::proto_ff::E_FestivalMuban_addbox* add_e_festivalmuban_addbox_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_addbox >&
      e_festivalmuban_addbox_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_addbox >*
      mutable_e_festivalmuban_addbox_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_addbox)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_addbox > e_festivalmuban_addbox_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_addbox* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_doublebox : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_doublebox();
  virtual ~E_FestivalMuban_doublebox();

  E_FestivalMuban_doublebox(const E_FestivalMuban_doublebox& from);

  inline E_FestivalMuban_doublebox& operator=(const E_FestivalMuban_doublebox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_doublebox& default_instance();

  void Swap(E_FestivalMuban_doublebox* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_doublebox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_doublebox& from);
  void MergeFrom(const E_FestivalMuban_doublebox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_type = 3;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional string m_arg = 4;
  inline bool has_m_arg() const;
  inline void clear_m_arg();
  static const int kMArgFieldNumber = 4;
  inline const ::std::string& m_arg() const;
  inline void set_m_arg(const ::std::string& value);
  inline void set_m_arg(const char* value);
  inline void set_m_arg(const char* value, size_t size);
  inline ::std::string* mutable_m_arg();
  inline ::std::string* release_m_arg();
  inline void set_allocated_m_arg(::std::string* m_arg);

  // optional int32 m_multiply = 5;
  inline bool has_m_multiply() const;
  inline void clear_m_multiply();
  static const int kMMultiplyFieldNumber = 5;
  inline ::google::protobuf::int32 m_multiply() const;
  inline void set_m_multiply(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_doublebox)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_arg();
  inline void clear_has_m_arg();
  inline void set_has_m_multiply();
  inline void clear_has_m_multiply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::std::string* m_arg_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_multiply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_doublebox* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_doublebox : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_doublebox();
  virtual ~Sheet_FestivalMuban_doublebox();

  Sheet_FestivalMuban_doublebox(const Sheet_FestivalMuban_doublebox& from);

  inline Sheet_FestivalMuban_doublebox& operator=(const Sheet_FestivalMuban_doublebox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_doublebox& default_instance();

  void Swap(Sheet_FestivalMuban_doublebox* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_doublebox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_doublebox& from);
  void MergeFrom(const Sheet_FestivalMuban_doublebox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_doublebox E_FestivalMuban_doublebox_List = 1;
  inline int e_festivalmuban_doublebox_list_size() const;
  inline void clear_e_festivalmuban_doublebox_list();
  static const int kEFestivalMubanDoubleboxListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_doublebox& e_festivalmuban_doublebox_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_doublebox* mutable_e_festivalmuban_doublebox_list(int index);
  inline ::proto_ff::E_FestivalMuban_doublebox* add_e_festivalmuban_doublebox_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_doublebox >&
      e_festivalmuban_doublebox_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_doublebox >*
      mutable_e_festivalmuban_doublebox_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_doublebox)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_doublebox > e_festivalmuban_doublebox_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_doublebox* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_bossfristkill : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_bossfristkill();
  virtual ~E_FestivalMuban_bossfristkill();

  E_FestivalMuban_bossfristkill(const E_FestivalMuban_bossfristkill& from);

  inline E_FestivalMuban_bossfristkill& operator=(const E_FestivalMuban_bossfristkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_bossfristkill& default_instance();

  void Swap(E_FestivalMuban_bossfristkill* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_bossfristkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_bossfristkill& from);
  void MergeFrom(const E_FestivalMuban_bossfristkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_type = 3;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_bossid = 4;
  inline bool has_m_bossid() const;
  inline void clear_m_bossid();
  static const int kMBossidFieldNumber = 4;
  inline ::google::protobuf::int32 m_bossid() const;
  inline void set_m_bossid(::google::protobuf::int32 value);

  // optional int32 m_fristKillReward = 5;
  inline bool has_m_fristkillreward() const;
  inline void clear_m_fristkillreward();
  static const int kMFristKillRewardFieldNumber = 5;
  inline ::google::protobuf::int32 m_fristkillreward() const;
  inline void set_m_fristkillreward(::google::protobuf::int32 value);

  // optional int32 m_killReward = 6;
  inline bool has_m_killreward() const;
  inline void clear_m_killreward();
  static const int kMKillRewardFieldNumber = 6;
  inline ::google::protobuf::int32 m_killreward() const;
  inline void set_m_killreward(::google::protobuf::int32 value);

  // optional int32 m_fristKillPacket = 7;
  inline bool has_m_fristkillpacket() const;
  inline void clear_m_fristkillpacket();
  static const int kMFristKillPacketFieldNumber = 7;
  inline ::google::protobuf::int32 m_fristkillpacket() const;
  inline void set_m_fristkillpacket(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_bossfristkill)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_bossid();
  inline void clear_has_m_bossid();
  inline void set_has_m_fristkillreward();
  inline void clear_has_m_fristkillreward();
  inline void set_has_m_killreward();
  inline void clear_has_m_killreward();
  inline void set_has_m_fristkillpacket();
  inline void clear_has_m_fristkillpacket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_bossid_;
  ::google::protobuf::int32 m_fristkillreward_;
  ::google::protobuf::int32 m_killreward_;
  ::google::protobuf::int32 m_fristkillpacket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_bossfristkill* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_bossfristkill : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_bossfristkill();
  virtual ~Sheet_FestivalMuban_bossfristkill();

  Sheet_FestivalMuban_bossfristkill(const Sheet_FestivalMuban_bossfristkill& from);

  inline Sheet_FestivalMuban_bossfristkill& operator=(const Sheet_FestivalMuban_bossfristkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_bossfristkill& default_instance();

  void Swap(Sheet_FestivalMuban_bossfristkill* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_bossfristkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_bossfristkill& from);
  void MergeFrom(const Sheet_FestivalMuban_bossfristkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_bossfristkill E_FestivalMuban_bossfristkill_List = 1;
  inline int e_festivalmuban_bossfristkill_list_size() const;
  inline void clear_e_festivalmuban_bossfristkill_list();
  static const int kEFestivalMubanBossfristkillListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_bossfristkill& e_festivalmuban_bossfristkill_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_bossfristkill* mutable_e_festivalmuban_bossfristkill_list(int index);
  inline ::proto_ff::E_FestivalMuban_bossfristkill* add_e_festivalmuban_bossfristkill_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_bossfristkill >&
      e_festivalmuban_bossfristkill_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_bossfristkill >*
      mutable_e_festivalmuban_bossfristkill_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_bossfristkill)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_bossfristkill > e_festivalmuban_bossfristkill_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_bossfristkill* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_severrank : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_severrank();
  virtual ~E_FestivalMuban_severrank();

  E_FestivalMuban_severrank(const E_FestivalMuban_severrank& from);

  inline E_FestivalMuban_severrank& operator=(const E_FestivalMuban_severrank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_severrank& default_instance();

  void Swap(E_FestivalMuban_severrank* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_severrank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_severrank& from);
  void MergeFrom(const E_FestivalMuban_severrank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional string m_order = 3;
  inline bool has_m_order() const;
  inline void clear_m_order();
  static const int kMOrderFieldNumber = 3;
  inline const ::std::string& m_order() const;
  inline void set_m_order(const ::std::string& value);
  inline void set_m_order(const char* value);
  inline void set_m_order(const char* value, size_t size);
  inline ::std::string* mutable_m_order();
  inline ::std::string* release_m_order();
  inline void set_allocated_m_order(::std::string* m_order);

  // optional string m_name = 4;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 4;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_openDay = 5;
  inline bool has_m_openday() const;
  inline void clear_m_openday();
  static const int kMOpenDayFieldNumber = 5;
  inline ::google::protobuf::int32 m_openday() const;
  inline void set_m_openday(::google::protobuf::int32 value);

  // optional int32 m_closeDay = 6;
  inline bool has_m_closeday() const;
  inline void clear_m_closeday();
  static const int kMCloseDayFieldNumber = 6;
  inline ::google::protobuf::int32 m_closeday() const;
  inline void set_m_closeday(::google::protobuf::int32 value);

  // optional string m_championTitle = 7;
  inline bool has_m_championtitle() const;
  inline void clear_m_championtitle();
  static const int kMChampionTitleFieldNumber = 7;
  inline const ::std::string& m_championtitle() const;
  inline void set_m_championtitle(const ::std::string& value);
  inline void set_m_championtitle(const char* value);
  inline void set_m_championtitle(const char* value, size_t size);
  inline ::std::string* mutable_m_championtitle();
  inline ::std::string* release_m_championtitle();
  inline void set_allocated_m_championtitle(::std::string* m_championtitle);

  // optional string m_rewardShow = 8;
  inline bool has_m_rewardshow() const;
  inline void clear_m_rewardshow();
  static const int kMRewardShowFieldNumber = 8;
  inline const ::std::string& m_rewardshow() const;
  inline void set_m_rewardshow(const ::std::string& value);
  inline void set_m_rewardshow(const char* value);
  inline void set_m_rewardshow(const char* value, size_t size);
  inline ::std::string* mutable_m_rewardshow();
  inline ::std::string* release_m_rewardshow();
  inline void set_allocated_m_rewardshow(::std::string* m_rewardshow);

  // optional int32 m_dataGroupID = 9;
  inline bool has_m_datagroupid() const;
  inline void clear_m_datagroupid();
  static const int kMDataGroupIDFieldNumber = 9;
  inline ::google::protobuf::int32 m_datagroupid() const;
  inline void set_m_datagroupid(::google::protobuf::int32 value);

  // optional int32 m_rankType = 10;
  inline bool has_m_ranktype() const;
  inline void clear_m_ranktype();
  static const int kMRankTypeFieldNumber = 10;
  inline ::google::protobuf::int32 m_ranktype() const;
  inline void set_m_ranktype(::google::protobuf::int32 value);

  // optional string m_rankGift = 11;
  inline bool has_m_rankgift() const;
  inline void clear_m_rankgift();
  static const int kMRankGiftFieldNumber = 11;
  inline const ::std::string& m_rankgift() const;
  inline void set_m_rankgift(const ::std::string& value);
  inline void set_m_rankgift(const char* value);
  inline void set_m_rankgift(const char* value, size_t size);
  inline ::std::string* mutable_m_rankgift();
  inline ::std::string* release_m_rankgift();
  inline void set_allocated_m_rankgift(::std::string* m_rankgift);

  // optional string m_giftIcon = 12;
  inline bool has_m_gifticon() const;
  inline void clear_m_gifticon();
  static const int kMGiftIconFieldNumber = 12;
  inline const ::std::string& m_gifticon() const;
  inline void set_m_gifticon(const ::std::string& value);
  inline void set_m_gifticon(const char* value);
  inline void set_m_gifticon(const char* value, size_t size);
  inline ::std::string* mutable_m_gifticon();
  inline ::std::string* release_m_gifticon();
  inline void set_allocated_m_gifticon(::std::string* m_gifticon);

  // optional int32 m_giftItemId = 13;
  inline bool has_m_giftitemid() const;
  inline void clear_m_giftitemid();
  static const int kMGiftItemIdFieldNumber = 13;
  inline ::google::protobuf::int32 m_giftitemid() const;
  inline void set_m_giftitemid(::google::protobuf::int32 value);

  // optional int32 m_originalPrice = 14;
  inline bool has_m_originalprice() const;
  inline void clear_m_originalprice();
  static const int kMOriginalPriceFieldNumber = 14;
  inline ::google::protobuf::int32 m_originalprice() const;
  inline void set_m_originalprice(::google::protobuf::int32 value);

  // optional int32 m_price = 15;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 15;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 m_ratioShow = 16;
  inline bool has_m_ratioshow() const;
  inline void clear_m_ratioshow();
  static const int kMRatioShowFieldNumber = 16;
  inline ::google::protobuf::int32 m_ratioshow() const;
  inline void set_m_ratioshow(::google::protobuf::int32 value);

  // optional int32 m_redPointBox = 17;
  inline bool has_m_redpointbox() const;
  inline void clear_m_redpointbox();
  static const int kMRedPointBoxFieldNumber = 17;
  inline ::google::protobuf::int32 m_redpointbox() const;
  inline void set_m_redpointbox(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_severrank)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_order();
  inline void clear_has_m_order();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_openday();
  inline void clear_has_m_openday();
  inline void set_has_m_closeday();
  inline void clear_has_m_closeday();
  inline void set_has_m_championtitle();
  inline void clear_has_m_championtitle();
  inline void set_has_m_rewardshow();
  inline void clear_has_m_rewardshow();
  inline void set_has_m_datagroupid();
  inline void clear_has_m_datagroupid();
  inline void set_has_m_ranktype();
  inline void clear_has_m_ranktype();
  inline void set_has_m_rankgift();
  inline void clear_has_m_rankgift();
  inline void set_has_m_gifticon();
  inline void clear_has_m_gifticon();
  inline void set_has_m_giftitemid();
  inline void clear_has_m_giftitemid();
  inline void set_has_m_originalprice();
  inline void clear_has_m_originalprice();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_ratioshow();
  inline void clear_has_m_ratioshow();
  inline void set_has_m_redpointbox();
  inline void clear_has_m_redpointbox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::std::string* m_order_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_openday_;
  ::google::protobuf::int32 m_closeday_;
  ::std::string* m_championtitle_;
  ::std::string* m_rewardshow_;
  ::google::protobuf::int32 m_datagroupid_;
  ::google::protobuf::int32 m_ranktype_;
  ::std::string* m_rankgift_;
  ::std::string* m_gifticon_;
  ::google::protobuf::int32 m_giftitemid_;
  ::google::protobuf::int32 m_originalprice_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 m_ratioshow_;
  ::google::protobuf::int32 m_redpointbox_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_severrank* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_severrank : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_severrank();
  virtual ~Sheet_FestivalMuban_severrank();

  Sheet_FestivalMuban_severrank(const Sheet_FestivalMuban_severrank& from);

  inline Sheet_FestivalMuban_severrank& operator=(const Sheet_FestivalMuban_severrank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_severrank& default_instance();

  void Swap(Sheet_FestivalMuban_severrank* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_severrank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_severrank& from);
  void MergeFrom(const Sheet_FestivalMuban_severrank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_severrank E_FestivalMuban_severrank_List = 1;
  inline int e_festivalmuban_severrank_list_size() const;
  inline void clear_e_festivalmuban_severrank_list();
  static const int kEFestivalMubanSeverrankListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_severrank& e_festivalmuban_severrank_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_severrank* mutable_e_festivalmuban_severrank_list(int index);
  inline ::proto_ff::E_FestivalMuban_severrank* add_e_festivalmuban_severrank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank >&
      e_festivalmuban_severrank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank >*
      mutable_e_festivalmuban_severrank_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_severrank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank > e_festivalmuban_severrank_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_severrank* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_severrank_data : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_severrank_data();
  virtual ~E_FestivalMuban_severrank_data();

  E_FestivalMuban_severrank_data(const E_FestivalMuban_severrank_data& from);

  inline E_FestivalMuban_severrank_data& operator=(const E_FestivalMuban_severrank_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_severrank_data& default_instance();

  void Swap(E_FestivalMuban_severrank_data* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_severrank_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_severrank_data& from);
  void MergeFrom(const E_FestivalMuban_severrank_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_maxRank = 3;
  inline bool has_m_maxrank() const;
  inline void clear_m_maxrank();
  static const int kMMaxRankFieldNumber = 3;
  inline ::google::protobuf::int32 m_maxrank() const;
  inline void set_m_maxrank(::google::protobuf::int32 value);

  // optional int32 m_minRank = 4;
  inline bool has_m_minrank() const;
  inline void clear_m_minrank();
  static const int kMMinRankFieldNumber = 4;
  inline ::google::protobuf::int32 m_minrank() const;
  inline void set_m_minrank(::google::protobuf::int32 value);

  // optional int32 m_rankValue = 5;
  inline bool has_m_rankvalue() const;
  inline void clear_m_rankvalue();
  static const int kMRankValueFieldNumber = 5;
  inline ::google::protobuf::int32 m_rankvalue() const;
  inline void set_m_rankvalue(::google::protobuf::int32 value);

  // optional string m_UnachieveDisplay = 6;
  inline bool has_m_unachievedisplay() const;
  inline void clear_m_unachievedisplay();
  static const int kMUnachieveDisplayFieldNumber = 6;
  inline const ::std::string& m_unachievedisplay() const;
  inline void set_m_unachievedisplay(const ::std::string& value);
  inline void set_m_unachievedisplay(const char* value);
  inline void set_m_unachievedisplay(const char* value, size_t size);
  inline ::std::string* mutable_m_unachievedisplay();
  inline ::std::string* release_m_unachievedisplay();
  inline void set_allocated_m_unachievedisplay(::std::string* m_unachievedisplay);

  // optional int32 m_boxID = 7;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxIDFieldNumber = 7;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_severrank_data)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_maxrank();
  inline void clear_has_m_maxrank();
  inline void set_has_m_minrank();
  inline void clear_has_m_minrank();
  inline void set_has_m_rankvalue();
  inline void clear_has_m_rankvalue();
  inline void set_has_m_unachievedisplay();
  inline void clear_has_m_unachievedisplay();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_maxrank_;
  ::google::protobuf::int32 m_minrank_;
  ::std::string* m_unachievedisplay_;
  ::google::protobuf::int32 m_rankvalue_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_severrank_data* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_severrank_data : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_severrank_data();
  virtual ~Sheet_FestivalMuban_severrank_data();

  Sheet_FestivalMuban_severrank_data(const Sheet_FestivalMuban_severrank_data& from);

  inline Sheet_FestivalMuban_severrank_data& operator=(const Sheet_FestivalMuban_severrank_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_severrank_data& default_instance();

  void Swap(Sheet_FestivalMuban_severrank_data* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_severrank_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_severrank_data& from);
  void MergeFrom(const Sheet_FestivalMuban_severrank_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_severrank_data E_FestivalMuban_severrank_data_List = 1;
  inline int e_festivalmuban_severrank_data_list_size() const;
  inline void clear_e_festivalmuban_severrank_data_list();
  static const int kEFestivalMubanSeverrankDataListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_severrank_data& e_festivalmuban_severrank_data_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_severrank_data* mutable_e_festivalmuban_severrank_data_list(int index);
  inline ::proto_ff::E_FestivalMuban_severrank_data* add_e_festivalmuban_severrank_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank_data >&
      e_festivalmuban_severrank_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank_data >*
      mutable_e_festivalmuban_severrank_data_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_severrank_data)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank_data > e_festivalmuban_severrank_data_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_severrank_data* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_collectwordCostDesc : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_collectwordCostDesc();
  virtual ~E_FestivalMuban_collectwordCostDesc();

  E_FestivalMuban_collectwordCostDesc(const E_FestivalMuban_collectwordCostDesc& from);

  inline E_FestivalMuban_collectwordCostDesc& operator=(const E_FestivalMuban_collectwordCostDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_collectwordCostDesc& default_instance();

  void Swap(E_FestivalMuban_collectwordCostDesc* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_collectwordCostDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_collectwordCostDesc& from);
  void MergeFrom(const E_FestivalMuban_collectwordCostDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_num = 1;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 1;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // optional int32 m_id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_collectwordCostDesc)
 private:
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_num_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_collectwordCostDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_collectword : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_collectword();
  virtual ~E_FestivalMuban_collectword();

  E_FestivalMuban_collectword(const E_FestivalMuban_collectword& from);

  inline E_FestivalMuban_collectword& operator=(const E_FestivalMuban_collectword& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_collectword& default_instance();

  void Swap(E_FestivalMuban_collectword* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_collectword* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_collectword& from);
  void MergeFrom(const E_FestivalMuban_collectword& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_exchange_id = 3;
  inline bool has_m_exchange_id() const;
  inline void clear_m_exchange_id();
  static const int kMExchangeIdFieldNumber = 3;
  inline ::google::protobuf::int32 m_exchange_id() const;
  inline void set_m_exchange_id(::google::protobuf::int32 value);

  // optional int32 m_exchange_num = 4;
  inline bool has_m_exchange_num() const;
  inline void clear_m_exchange_num();
  static const int kMExchangeNumFieldNumber = 4;
  inline ::google::protobuf::int32 m_exchange_num() const;
  inline void set_m_exchange_num(::google::protobuf::int32 value);

  // optional int32 m_times = 5;
  inline bool has_m_times() const;
  inline void clear_m_times();
  static const int kMTimesFieldNumber = 5;
  inline ::google::protobuf::int32 m_times() const;
  inline void set_m_times(::google::protobuf::int32 value);

  // repeated .proto_ff.E_FestivalMuban_collectwordCostDesc m_cost = 6;
  inline int m_cost_size() const;
  inline void clear_m_cost();
  static const int kMCostFieldNumber = 6;
  inline const ::proto_ff::E_FestivalMuban_collectwordCostDesc& m_cost(int index) const;
  inline ::proto_ff::E_FestivalMuban_collectwordCostDesc* mutable_m_cost(int index);
  inline ::proto_ff::E_FestivalMuban_collectwordCostDesc* add_m_cost();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectwordCostDesc >&
      m_cost() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectwordCostDesc >*
      mutable_m_cost();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_collectword)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_exchange_id();
  inline void clear_has_m_exchange_id();
  inline void set_has_m_exchange_num();
  inline void clear_has_m_exchange_num();
  inline void set_has_m_times();
  inline void clear_has_m_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_exchange_id_;
  ::google::protobuf::int32 m_exchange_num_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectwordCostDesc > m_cost_;
  ::google::protobuf::int32 m_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_collectword* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_collectword : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_collectword();
  virtual ~Sheet_FestivalMuban_collectword();

  Sheet_FestivalMuban_collectword(const Sheet_FestivalMuban_collectword& from);

  inline Sheet_FestivalMuban_collectword& operator=(const Sheet_FestivalMuban_collectword& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_collectword& default_instance();

  void Swap(Sheet_FestivalMuban_collectword* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_collectword* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_collectword& from);
  void MergeFrom(const Sheet_FestivalMuban_collectword& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_collectword E_FestivalMuban_collectword_List = 1;
  inline int e_festivalmuban_collectword_list_size() const;
  inline void clear_e_festivalmuban_collectword_list();
  static const int kEFestivalMubanCollectwordListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_collectword& e_festivalmuban_collectword_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_collectword* mutable_e_festivalmuban_collectword_list(int index);
  inline ::proto_ff::E_FestivalMuban_collectword* add_e_festivalmuban_collectword_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectword >&
      e_festivalmuban_collectword_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectword >*
      mutable_e_festivalmuban_collectword_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_collectword)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectword > e_festivalmuban_collectword_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_collectword* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_sign : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_sign();
  virtual ~E_FestivalMuban_sign();

  E_FestivalMuban_sign(const E_FestivalMuban_sign& from);

  inline E_FestivalMuban_sign& operator=(const E_FestivalMuban_sign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_sign& default_instance();

  void Swap(E_FestivalMuban_sign* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_sign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_sign& from);
  void MergeFrom(const E_FestivalMuban_sign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_boxID = 3;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_sign)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_sign* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_sign : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_sign();
  virtual ~Sheet_FestivalMuban_sign();

  Sheet_FestivalMuban_sign(const Sheet_FestivalMuban_sign& from);

  inline Sheet_FestivalMuban_sign& operator=(const Sheet_FestivalMuban_sign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_sign& default_instance();

  void Swap(Sheet_FestivalMuban_sign* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_sign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_sign& from);
  void MergeFrom(const Sheet_FestivalMuban_sign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_sign E_FestivalMuban_sign_List = 1;
  inline int e_festivalmuban_sign_list_size() const;
  inline void clear_e_festivalmuban_sign_list();
  static const int kEFestivalMubanSignListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_sign& e_festivalmuban_sign_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_sign* mutable_e_festivalmuban_sign_list(int index);
  inline ::proto_ff::E_FestivalMuban_sign* add_e_festivalmuban_sign_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_sign >&
      e_festivalmuban_sign_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_sign >*
      mutable_e_festivalmuban_sign_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_sign)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_sign > e_festivalmuban_sign_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_sign* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_shop : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_shop();
  virtual ~E_FestivalMuban_shop();

  E_FestivalMuban_shop(const E_FestivalMuban_shop& from);

  inline E_FestivalMuban_shop& operator=(const E_FestivalMuban_shop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_shop& default_instance();

  void Swap(E_FestivalMuban_shop* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_shop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_shop& from);
  void MergeFrom(const E_FestivalMuban_shop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_vipLevel = 3;
  inline bool has_m_viplevel() const;
  inline void clear_m_viplevel();
  static const int kMVipLevelFieldNumber = 3;
  inline ::google::protobuf::int32 m_viplevel() const;
  inline void set_m_viplevel(::google::protobuf::int32 value);

  // optional int32 m_box = 4;
  inline bool has_m_box() const;
  inline void clear_m_box();
  static const int kMBoxFieldNumber = 4;
  inline ::google::protobuf::int32 m_box() const;
  inline void set_m_box(::google::protobuf::int32 value);

  // optional int32 m_timeLimit = 5;
  inline bool has_m_timelimit() const;
  inline void clear_m_timelimit();
  static const int kMTimeLimitFieldNumber = 5;
  inline ::google::protobuf::int32 m_timelimit() const;
  inline void set_m_timelimit(::google::protobuf::int32 value);

  // optional int32 m_price = 6;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 6;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 m_priceType = 7;
  inline bool has_m_pricetype() const;
  inline void clear_m_pricetype();
  static const int kMPriceTypeFieldNumber = 7;
  inline ::google::protobuf::int32 m_pricetype() const;
  inline void set_m_pricetype(::google::protobuf::int32 value);

  // optional int32 m_starTime = 8;
  inline bool has_m_startime() const;
  inline void clear_m_startime();
  static const int kMStarTimeFieldNumber = 8;
  inline ::google::protobuf::int32 m_startime() const;
  inline void set_m_startime(::google::protobuf::int32 value);

  // optional int32 m_durTime = 9;
  inline bool has_m_durtime() const;
  inline void clear_m_durtime();
  static const int kMDurTimeFieldNumber = 9;
  inline ::google::protobuf::int32 m_durtime() const;
  inline void set_m_durtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_shop)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_viplevel();
  inline void clear_has_m_viplevel();
  inline void set_has_m_box();
  inline void clear_has_m_box();
  inline void set_has_m_timelimit();
  inline void clear_has_m_timelimit();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_pricetype();
  inline void clear_has_m_pricetype();
  inline void set_has_m_startime();
  inline void clear_has_m_startime();
  inline void set_has_m_durtime();
  inline void clear_has_m_durtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_viplevel_;
  ::google::protobuf::int32 m_box_;
  ::google::protobuf::int32 m_timelimit_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 m_pricetype_;
  ::google::protobuf::int32 m_startime_;
  ::google::protobuf::int32 m_durtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_shop* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_shop : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_shop();
  virtual ~Sheet_FestivalMuban_shop();

  Sheet_FestivalMuban_shop(const Sheet_FestivalMuban_shop& from);

  inline Sheet_FestivalMuban_shop& operator=(const Sheet_FestivalMuban_shop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_shop& default_instance();

  void Swap(Sheet_FestivalMuban_shop* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_shop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_shop& from);
  void MergeFrom(const Sheet_FestivalMuban_shop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_shop E_FestivalMuban_shop_List = 1;
  inline int e_festivalmuban_shop_list_size() const;
  inline void clear_e_festivalmuban_shop_list();
  static const int kEFestivalMubanShopListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_shop& e_festivalmuban_shop_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_shop* mutable_e_festivalmuban_shop_list(int index);
  inline ::proto_ff::E_FestivalMuban_shop* add_e_festivalmuban_shop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_shop >&
      e_festivalmuban_shop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_shop >*
      mutable_e_festivalmuban_shop_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_shop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_shop > e_festivalmuban_shop_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_shop* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_rechange : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_rechange();
  virtual ~E_FestivalMuban_rechange();

  E_FestivalMuban_rechange(const E_FestivalMuban_rechange& from);

  inline E_FestivalMuban_rechange& operator=(const E_FestivalMuban_rechange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_rechange& default_instance();

  void Swap(E_FestivalMuban_rechange* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_rechange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_rechange& from);
  void MergeFrom(const E_FestivalMuban_rechange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_rebate = 3;
  inline bool has_m_rebate() const;
  inline void clear_m_rebate();
  static const int kMRebateFieldNumber = 3;
  inline ::google::protobuf::int32 m_rebate() const;
  inline void set_m_rebate(::google::protobuf::int32 value);

  // optional int32 m_timeLimit = 4;
  inline bool has_m_timelimit() const;
  inline void clear_m_timelimit();
  static const int kMTimeLimitFieldNumber = 4;
  inline ::google::protobuf::int32 m_timelimit() const;
  inline void set_m_timelimit(::google::protobuf::int32 value);

  // optional int32 m_price = 5;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 5;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 m_typer = 6;
  inline bool has_m_typer() const;
  inline void clear_m_typer();
  static const int kMTyperFieldNumber = 6;
  inline ::google::protobuf::int32 m_typer() const;
  inline void set_m_typer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_rechange)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_rebate();
  inline void clear_has_m_rebate();
  inline void set_has_m_timelimit();
  inline void clear_has_m_timelimit();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_typer();
  inline void clear_has_m_typer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_rebate_;
  ::google::protobuf::int32 m_timelimit_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 m_typer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_rechange* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_rechange : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_rechange();
  virtual ~Sheet_FestivalMuban_rechange();

  Sheet_FestivalMuban_rechange(const Sheet_FestivalMuban_rechange& from);

  inline Sheet_FestivalMuban_rechange& operator=(const Sheet_FestivalMuban_rechange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_rechange& default_instance();

  void Swap(Sheet_FestivalMuban_rechange* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_rechange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_rechange& from);
  void MergeFrom(const Sheet_FestivalMuban_rechange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_rechange E_FestivalMuban_rechange_List = 1;
  inline int e_festivalmuban_rechange_list_size() const;
  inline void clear_e_festivalmuban_rechange_list();
  static const int kEFestivalMubanRechangeListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_rechange& e_festivalmuban_rechange_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_rechange* mutable_e_festivalmuban_rechange_list(int index);
  inline ::proto_ff::E_FestivalMuban_rechange* add_e_festivalmuban_rechange_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rechange >&
      e_festivalmuban_rechange_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rechange >*
      mutable_e_festivalmuban_rechange_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_rechange)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rechange > e_festivalmuban_rechange_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_rechange* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_leiji : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_leiji();
  virtual ~E_FestivalMuban_leiji();

  E_FestivalMuban_leiji(const E_FestivalMuban_leiji& from);

  inline E_FestivalMuban_leiji& operator=(const E_FestivalMuban_leiji& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_leiji& default_instance();

  void Swap(E_FestivalMuban_leiji* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_leiji* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_leiji& from);
  void MergeFrom(const E_FestivalMuban_leiji& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_leiji = 3;
  inline bool has_m_leiji() const;
  inline void clear_m_leiji();
  static const int kMLeijiFieldNumber = 3;
  inline ::google::protobuf::int32 m_leiji() const;
  inline void set_m_leiji(::google::protobuf::int32 value);

  // optional int32 m_boxID = 4;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxIDFieldNumber = 4;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_leiji)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_leiji();
  inline void clear_has_m_leiji();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_leiji_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_leiji* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_leiji : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_leiji();
  virtual ~Sheet_FestivalMuban_leiji();

  Sheet_FestivalMuban_leiji(const Sheet_FestivalMuban_leiji& from);

  inline Sheet_FestivalMuban_leiji& operator=(const Sheet_FestivalMuban_leiji& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_leiji& default_instance();

  void Swap(Sheet_FestivalMuban_leiji* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_leiji* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_leiji& from);
  void MergeFrom(const Sheet_FestivalMuban_leiji& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_leiji E_FestivalMuban_leiji_List = 1;
  inline int e_festivalmuban_leiji_list_size() const;
  inline void clear_e_festivalmuban_leiji_list();
  static const int kEFestivalMubanLeijiListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_leiji& e_festivalmuban_leiji_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_leiji* mutable_e_festivalmuban_leiji_list(int index);
  inline ::proto_ff::E_FestivalMuban_leiji* add_e_festivalmuban_leiji_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_leiji >&
      e_festivalmuban_leiji_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_leiji >*
      mutable_e_festivalmuban_leiji_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_leiji)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_leiji > e_festivalmuban_leiji_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_leiji* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_zadan : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_zadan();
  virtual ~E_FestivalMuban_zadan();

  E_FestivalMuban_zadan(const E_FestivalMuban_zadan& from);

  inline E_FestivalMuban_zadan& operator=(const E_FestivalMuban_zadan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_zadan& default_instance();

  void Swap(E_FestivalMuban_zadan* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_zadan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_zadan& from);
  void MergeFrom(const E_FestivalMuban_zadan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int64 m_itemid = 3;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemidFieldNumber = 3;
  inline ::google::protobuf::int64 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int64 value);

  // optional int32 m_num = 4;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 4;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // optional int32 m_type = 5;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 5;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_probability = 6;
  inline bool has_m_probability() const;
  inline void clear_m_probability();
  static const int kMProbabilityFieldNumber = 6;
  inline ::google::protobuf::int32 m_probability() const;
  inline void set_m_probability(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_zadan)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_probability();
  inline void clear_has_m_probability();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int64 m_itemid_;
  ::google::protobuf::int32 m_num_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_probability_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_zadan* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_zadan : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_zadan();
  virtual ~Sheet_FestivalMuban_zadan();

  Sheet_FestivalMuban_zadan(const Sheet_FestivalMuban_zadan& from);

  inline Sheet_FestivalMuban_zadan& operator=(const Sheet_FestivalMuban_zadan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_zadan& default_instance();

  void Swap(Sheet_FestivalMuban_zadan* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_zadan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_zadan& from);
  void MergeFrom(const Sheet_FestivalMuban_zadan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_zadan E_FestivalMuban_zadan_List = 1;
  inline int e_festivalmuban_zadan_list_size() const;
  inline void clear_e_festivalmuban_zadan_list();
  static const int kEFestivalMubanZadanListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_zadan& e_festivalmuban_zadan_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_zadan* mutable_e_festivalmuban_zadan_list(int index);
  inline ::proto_ff::E_FestivalMuban_zadan* add_e_festivalmuban_zadan_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_zadan >&
      e_festivalmuban_zadan_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_zadan >*
      mutable_e_festivalmuban_zadan_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_zadan)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_zadan > e_festivalmuban_zadan_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_zadan* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalZadanconstant : public ::google::protobuf::Message {
 public:
  E_FestivalZadanconstant();
  virtual ~E_FestivalZadanconstant();

  E_FestivalZadanconstant(const E_FestivalZadanconstant& from);

  inline E_FestivalZadanconstant& operator=(const E_FestivalZadanconstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalZadanconstant& default_instance();

  void Swap(E_FestivalZadanconstant* other);

  // implements Message ----------------------------------------------

  E_FestivalZadanconstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalZadanconstant& from);
  void MergeFrom(const E_FestivalZadanconstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_period = 1;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 1;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int64 m_costItem = 2;
  inline bool has_m_costitem() const;
  inline void clear_m_costitem();
  static const int kMCostItemFieldNumber = 2;
  inline ::google::protobuf::int64 m_costitem() const;
  inline void set_m_costitem(::google::protobuf::int64 value);

  // optional int32 m_number = 3;
  inline bool has_m_number() const;
  inline void clear_m_number();
  static const int kMNumberFieldNumber = 3;
  inline ::google::protobuf::int32 m_number() const;
  inline void set_m_number(::google::protobuf::int32 value);

  // optional int32 m_free = 4;
  inline bool has_m_free() const;
  inline void clear_m_free();
  static const int kMFreeFieldNumber = 4;
  inline ::google::protobuf::int32 m_free() const;
  inline void set_m_free(::google::protobuf::int32 value);

  // optional int32 m_currency = 5;
  inline bool has_m_currency() const;
  inline void clear_m_currency();
  static const int kMCurrencyFieldNumber = 5;
  inline ::google::protobuf::int32 m_currency() const;
  inline void set_m_currency(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalZadanconstant)
 private:
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_costitem();
  inline void clear_has_m_costitem();
  inline void set_has_m_number();
  inline void clear_has_m_number();
  inline void set_has_m_free();
  inline void clear_has_m_free();
  inline void set_has_m_currency();
  inline void clear_has_m_currency();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_costitem_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_number_;
  ::google::protobuf::int32 m_free_;
  ::google::protobuf::int32 m_currency_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalZadanconstant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalZadanconstant : public ::google::protobuf::Message {
 public:
  Sheet_FestivalZadanconstant();
  virtual ~Sheet_FestivalZadanconstant();

  Sheet_FestivalZadanconstant(const Sheet_FestivalZadanconstant& from);

  inline Sheet_FestivalZadanconstant& operator=(const Sheet_FestivalZadanconstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalZadanconstant& default_instance();

  void Swap(Sheet_FestivalZadanconstant* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalZadanconstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalZadanconstant& from);
  void MergeFrom(const Sheet_FestivalZadanconstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalZadanconstant E_FestivalZadanconstant_List = 1;
  inline int e_festivalzadanconstant_list_size() const;
  inline void clear_e_festivalzadanconstant_list();
  static const int kEFestivalZadanconstantListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalZadanconstant& e_festivalzadanconstant_list(int index) const;
  inline ::proto_ff::E_FestivalZadanconstant* mutable_e_festivalzadanconstant_list(int index);
  inline ::proto_ff::E_FestivalZadanconstant* add_e_festivalzadanconstant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalZadanconstant >&
      e_festivalzadanconstant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalZadanconstant >*
      mutable_e_festivalzadanconstant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalZadanconstant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalZadanconstant > e_festivalzadanconstant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalZadanconstant* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_turntable : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_turntable();
  virtual ~E_FestivalMuban_turntable();

  E_FestivalMuban_turntable(const E_FestivalMuban_turntable& from);

  inline E_FestivalMuban_turntable& operator=(const E_FestivalMuban_turntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_turntable& default_instance();

  void Swap(E_FestivalMuban_turntable* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_turntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_turntable& from);
  void MergeFrom(const E_FestivalMuban_turntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_poolGroup = 3;
  inline bool has_m_poolgroup() const;
  inline void clear_m_poolgroup();
  static const int kMPoolGroupFieldNumber = 3;
  inline ::google::protobuf::int32 m_poolgroup() const;
  inline void set_m_poolgroup(::google::protobuf::int32 value);

  // optional int32 m_taskGroup = 4;
  inline bool has_m_taskgroup() const;
  inline void clear_m_taskgroup();
  static const int kMTaskGroupFieldNumber = 4;
  inline ::google::protobuf::int32 m_taskgroup() const;
  inline void set_m_taskgroup(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_turntable)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_poolgroup();
  inline void clear_has_m_poolgroup();
  inline void set_has_m_taskgroup();
  inline void clear_has_m_taskgroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_poolgroup_;
  ::google::protobuf::int32 m_taskgroup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_turntable* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_turntable : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_turntable();
  virtual ~Sheet_FestivalMuban_turntable();

  Sheet_FestivalMuban_turntable(const Sheet_FestivalMuban_turntable& from);

  inline Sheet_FestivalMuban_turntable& operator=(const Sheet_FestivalMuban_turntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_turntable& default_instance();

  void Swap(Sheet_FestivalMuban_turntable* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_turntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_turntable& from);
  void MergeFrom(const Sheet_FestivalMuban_turntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_turntable E_FestivalMuban_turntable_List = 1;
  inline int e_festivalmuban_turntable_list_size() const;
  inline void clear_e_festivalmuban_turntable_list();
  static const int kEFestivalMubanTurntableListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_turntable& e_festivalmuban_turntable_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_turntable* mutable_e_festivalmuban_turntable_list(int index);
  inline ::proto_ff::E_FestivalMuban_turntable* add_e_festivalmuban_turntable_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable >&
      e_festivalmuban_turntable_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable >*
      mutable_e_festivalmuban_turntable_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_turntable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable > e_festivalmuban_turntable_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_turntable* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_turntable_pool : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_turntable_pool();
  virtual ~E_FestivalMuban_turntable_pool();

  E_FestivalMuban_turntable_pool(const E_FestivalMuban_turntable_pool& from);

  inline E_FestivalMuban_turntable_pool& operator=(const E_FestivalMuban_turntable_pool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_turntable_pool& default_instance();

  void Swap(E_FestivalMuban_turntable_pool* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_turntable_pool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_turntable_pool& from);
  void MergeFrom(const E_FestivalMuban_turntable_pool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_itemID = 3;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int32 value);

  // optional int32 m_num = 4;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 4;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // optional int32 m_weight = 5;
  inline bool has_m_weight() const;
  inline void clear_m_weight();
  static const int kMWeightFieldNumber = 5;
  inline ::google::protobuf::int32 m_weight() const;
  inline void set_m_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_turntable_pool)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_weight();
  inline void clear_has_m_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_itemid_;
  ::google::protobuf::int32 m_num_;
  ::google::protobuf::int32 m_weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_turntable_pool* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_turntable_pool : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_turntable_pool();
  virtual ~Sheet_FestivalMuban_turntable_pool();

  Sheet_FestivalMuban_turntable_pool(const Sheet_FestivalMuban_turntable_pool& from);

  inline Sheet_FestivalMuban_turntable_pool& operator=(const Sheet_FestivalMuban_turntable_pool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_turntable_pool& default_instance();

  void Swap(Sheet_FestivalMuban_turntable_pool* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_turntable_pool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_turntable_pool& from);
  void MergeFrom(const Sheet_FestivalMuban_turntable_pool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_turntable_pool E_FestivalMuban_turntable_pool_List = 1;
  inline int e_festivalmuban_turntable_pool_list_size() const;
  inline void clear_e_festivalmuban_turntable_pool_list();
  static const int kEFestivalMubanTurntablePoolListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_turntable_pool& e_festivalmuban_turntable_pool_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_turntable_pool* mutable_e_festivalmuban_turntable_pool_list(int index);
  inline ::proto_ff::E_FestivalMuban_turntable_pool* add_e_festivalmuban_turntable_pool_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_pool >&
      e_festivalmuban_turntable_pool_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_pool >*
      mutable_e_festivalmuban_turntable_pool_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_turntable_pool)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_pool > e_festivalmuban_turntable_pool_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_turntable_pool* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_turntable_task : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_turntable_task();
  virtual ~E_FestivalMuban_turntable_task();

  E_FestivalMuban_turntable_task(const E_FestivalMuban_turntable_task& from);

  inline E_FestivalMuban_turntable_task& operator=(const E_FestivalMuban_turntable_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_turntable_task& default_instance();

  void Swap(E_FestivalMuban_turntable_task* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_turntable_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_turntable_task& from);
  void MergeFrom(const E_FestivalMuban_turntable_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_eventType = 3;
  inline bool has_m_eventtype() const;
  inline void clear_m_eventtype();
  static const int kMEventTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_eventtype() const;
  inline void set_m_eventtype(::google::protobuf::int32 value);

  // optional int32 m_reachPrice = 4;
  inline bool has_m_reachprice() const;
  inline void clear_m_reachprice();
  static const int kMReachPriceFieldNumber = 4;
  inline ::google::protobuf::int32 m_reachprice() const;
  inline void set_m_reachprice(::google::protobuf::int32 value);

  // optional int32 m_link = 5;
  inline bool has_m_link() const;
  inline void clear_m_link();
  static const int kMLinkFieldNumber = 5;
  inline ::google::protobuf::int32 m_link() const;
  inline void set_m_link(::google::protobuf::int32 value);

  // optional int32 m_rewardTimes = 6;
  inline bool has_m_rewardtimes() const;
  inline void clear_m_rewardtimes();
  static const int kMRewardTimesFieldNumber = 6;
  inline ::google::protobuf::int32 m_rewardtimes() const;
  inline void set_m_rewardtimes(::google::protobuf::int32 value);

  // repeated int32 m_param = 7;
  inline int m_param_size() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 7;
  inline ::google::protobuf::int32 m_param(int index) const;
  inline void set_m_param(int index, ::google::protobuf::int32 value);
  inline void add_m_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_param();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_turntable_task)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_eventtype();
  inline void clear_has_m_eventtype();
  inline void set_has_m_reachprice();
  inline void clear_has_m_reachprice();
  inline void set_has_m_link();
  inline void clear_has_m_link();
  inline void set_has_m_rewardtimes();
  inline void clear_has_m_rewardtimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_eventtype_;
  ::google::protobuf::int32 m_reachprice_;
  ::google::protobuf::int32 m_link_;
  ::google::protobuf::int32 m_rewardtimes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_turntable_task* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_turntable_task : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_turntable_task();
  virtual ~Sheet_FestivalMuban_turntable_task();

  Sheet_FestivalMuban_turntable_task(const Sheet_FestivalMuban_turntable_task& from);

  inline Sheet_FestivalMuban_turntable_task& operator=(const Sheet_FestivalMuban_turntable_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_turntable_task& default_instance();

  void Swap(Sheet_FestivalMuban_turntable_task* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_turntable_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_turntable_task& from);
  void MergeFrom(const Sheet_FestivalMuban_turntable_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_turntable_task E_FestivalMuban_turntable_task_List = 1;
  inline int e_festivalmuban_turntable_task_list_size() const;
  inline void clear_e_festivalmuban_turntable_task_list();
  static const int kEFestivalMubanTurntableTaskListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_turntable_task& e_festivalmuban_turntable_task_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_turntable_task* mutable_e_festivalmuban_turntable_task_list(int index);
  inline ::proto_ff::E_FestivalMuban_turntable_task* add_e_festivalmuban_turntable_task_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_task >&
      e_festivalmuban_turntable_task_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_task >*
      mutable_e_festivalmuban_turntable_task_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_turntable_task)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_task > e_festivalmuban_turntable_task_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_turntable_task* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_donate : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_donate();
  virtual ~E_FestivalMuban_donate();

  E_FestivalMuban_donate(const E_FestivalMuban_donate& from);

  inline E_FestivalMuban_donate& operator=(const E_FestivalMuban_donate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_donate& default_instance();

  void Swap(E_FestivalMuban_donate* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_donate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_donate& from);
  void MergeFrom(const E_FestivalMuban_donate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_donateItem = 3;
  inline bool has_m_donateitem() const;
  inline void clear_m_donateitem();
  static const int kMDonateItemFieldNumber = 3;
  inline ::google::protobuf::int32 m_donateitem() const;
  inline void set_m_donateitem(::google::protobuf::int32 value);

  // optional int32 m_donateReward = 4;
  inline bool has_m_donatereward() const;
  inline void clear_m_donatereward();
  static const int kMDonateRewardFieldNumber = 4;
  inline ::google::protobuf::int32 m_donatereward() const;
  inline void set_m_donatereward(::google::protobuf::int32 value);

  // optional int32 m_severReward = 5;
  inline bool has_m_severreward() const;
  inline void clear_m_severreward();
  static const int kMSeverRewardFieldNumber = 5;
  inline ::google::protobuf::int32 m_severreward() const;
  inline void set_m_severreward(::google::protobuf::int32 value);

  // optional int32 m_singleReward = 6;
  inline bool has_m_singlereward() const;
  inline void clear_m_singlereward();
  static const int kMSingleRewardFieldNumber = 6;
  inline ::google::protobuf::int32 m_singlereward() const;
  inline void set_m_singlereward(::google::protobuf::int32 value);

  // optional int32 m_taskGroupID = 7;
  inline bool has_m_taskgroupid() const;
  inline void clear_m_taskgroupid();
  static const int kMTaskGroupIDFieldNumber = 7;
  inline ::google::protobuf::int32 m_taskgroupid() const;
  inline void set_m_taskgroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_donate)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_donateitem();
  inline void clear_has_m_donateitem();
  inline void set_has_m_donatereward();
  inline void clear_has_m_donatereward();
  inline void set_has_m_severreward();
  inline void clear_has_m_severreward();
  inline void set_has_m_singlereward();
  inline void clear_has_m_singlereward();
  inline void set_has_m_taskgroupid();
  inline void clear_has_m_taskgroupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_donateitem_;
  ::google::protobuf::int32 m_donatereward_;
  ::google::protobuf::int32 m_severreward_;
  ::google::protobuf::int32 m_singlereward_;
  ::google::protobuf::int32 m_taskgroupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_donate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_donate : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_donate();
  virtual ~Sheet_FestivalMuban_donate();

  Sheet_FestivalMuban_donate(const Sheet_FestivalMuban_donate& from);

  inline Sheet_FestivalMuban_donate& operator=(const Sheet_FestivalMuban_donate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_donate& default_instance();

  void Swap(Sheet_FestivalMuban_donate* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_donate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_donate& from);
  void MergeFrom(const Sheet_FestivalMuban_donate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_donate E_FestivalMuban_donate_List = 1;
  inline int e_festivalmuban_donate_list_size() const;
  inline void clear_e_festivalmuban_donate_list();
  static const int kEFestivalMubanDonateListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_donate& e_festivalmuban_donate_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_donate* mutable_e_festivalmuban_donate_list(int index);
  inline ::proto_ff::E_FestivalMuban_donate* add_e_festivalmuban_donate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate >&
      e_festivalmuban_donate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate >*
      mutable_e_festivalmuban_donate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_donate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate > e_festivalmuban_donate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_donate* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_donate_sever : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_donate_sever();
  virtual ~E_FestivalMuban_donate_sever();

  E_FestivalMuban_donate_sever(const E_FestivalMuban_donate_sever& from);

  inline E_FestivalMuban_donate_sever& operator=(const E_FestivalMuban_donate_sever& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_donate_sever& default_instance();

  void Swap(E_FestivalMuban_donate_sever* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_donate_sever* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_donate_sever& from);
  void MergeFrom(const E_FestivalMuban_donate_sever& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_value = 3;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 3;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_type = 4;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional string m_typeArg = 5;
  inline bool has_m_typearg() const;
  inline void clear_m_typearg();
  static const int kMTypeArgFieldNumber = 5;
  inline const ::std::string& m_typearg() const;
  inline void set_m_typearg(const ::std::string& value);
  inline void set_m_typearg(const char* value);
  inline void set_m_typearg(const char* value, size_t size);
  inline ::std::string* mutable_m_typearg();
  inline ::std::string* release_m_typearg();
  inline void set_allocated_m_typearg(::std::string* m_typearg);

  // optional string m_pro = 6;
  inline bool has_m_pro() const;
  inline void clear_m_pro();
  static const int kMProFieldNumber = 6;
  inline const ::std::string& m_pro() const;
  inline void set_m_pro(const ::std::string& value);
  inline void set_m_pro(const char* value);
  inline void set_m_pro(const char* value, size_t size);
  inline ::std::string* mutable_m_pro();
  inline ::std::string* release_m_pro();
  inline void set_allocated_m_pro(::std::string* m_pro);

  // optional int32 m_num = 7;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 7;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_donate_sever)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_typearg();
  inline void clear_has_m_typearg();
  inline void set_has_m_pro();
  inline void clear_has_m_pro();
  inline void set_has_m_num();
  inline void clear_has_m_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_type_;
  ::std::string* m_typearg_;
  ::std::string* m_pro_;
  ::google::protobuf::int32 m_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_donate_sever* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_donate_sever : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_donate_sever();
  virtual ~Sheet_FestivalMuban_donate_sever();

  Sheet_FestivalMuban_donate_sever(const Sheet_FestivalMuban_donate_sever& from);

  inline Sheet_FestivalMuban_donate_sever& operator=(const Sheet_FestivalMuban_donate_sever& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_donate_sever& default_instance();

  void Swap(Sheet_FestivalMuban_donate_sever* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_donate_sever* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_donate_sever& from);
  void MergeFrom(const Sheet_FestivalMuban_donate_sever& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_donate_sever E_FestivalMuban_donate_sever_List = 1;
  inline int e_festivalmuban_donate_sever_list_size() const;
  inline void clear_e_festivalmuban_donate_sever_list();
  static const int kEFestivalMubanDonateSeverListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_donate_sever& e_festivalmuban_donate_sever_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_donate_sever* mutable_e_festivalmuban_donate_sever_list(int index);
  inline ::proto_ff::E_FestivalMuban_donate_sever* add_e_festivalmuban_donate_sever_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_sever >&
      e_festivalmuban_donate_sever_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_sever >*
      mutable_e_festivalmuban_donate_sever_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_donate_sever)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_sever > e_festivalmuban_donate_sever_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_donate_sever* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_donate_single : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_donate_single();
  virtual ~E_FestivalMuban_donate_single();

  E_FestivalMuban_donate_single(const E_FestivalMuban_donate_single& from);

  inline E_FestivalMuban_donate_single& operator=(const E_FestivalMuban_donate_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_donate_single& default_instance();

  void Swap(E_FestivalMuban_donate_single* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_donate_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_donate_single& from);
  void MergeFrom(const E_FestivalMuban_donate_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_value = 3;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 3;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional string m_itemID = 4;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemIDFieldNumber = 4;
  inline const ::std::string& m_itemid() const;
  inline void set_m_itemid(const ::std::string& value);
  inline void set_m_itemid(const char* value);
  inline void set_m_itemid(const char* value, size_t size);
  inline ::std::string* mutable_m_itemid();
  inline ::std::string* release_m_itemid();
  inline void set_allocated_m_itemid(::std::string* m_itemid);

  // optional string m_pro = 5;
  inline bool has_m_pro() const;
  inline void clear_m_pro();
  static const int kMProFieldNumber = 5;
  inline const ::std::string& m_pro() const;
  inline void set_m_pro(const ::std::string& value);
  inline void set_m_pro(const char* value);
  inline void set_m_pro(const char* value, size_t size);
  inline ::std::string* mutable_m_pro();
  inline ::std::string* release_m_pro();
  inline void set_allocated_m_pro(::std::string* m_pro);

  // optional int32 m_num = 6;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 6;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_donate_single)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_pro();
  inline void clear_has_m_pro();
  inline void set_has_m_num();
  inline void clear_has_m_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::std::string* m_itemid_;
  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_num_;
  ::std::string* m_pro_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_donate_single* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_donate_single : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_donate_single();
  virtual ~Sheet_FestivalMuban_donate_single();

  Sheet_FestivalMuban_donate_single(const Sheet_FestivalMuban_donate_single& from);

  inline Sheet_FestivalMuban_donate_single& operator=(const Sheet_FestivalMuban_donate_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_donate_single& default_instance();

  void Swap(Sheet_FestivalMuban_donate_single* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_donate_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_donate_single& from);
  void MergeFrom(const Sheet_FestivalMuban_donate_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_donate_single E_FestivalMuban_donate_single_List = 1;
  inline int e_festivalmuban_donate_single_list_size() const;
  inline void clear_e_festivalmuban_donate_single_list();
  static const int kEFestivalMubanDonateSingleListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_donate_single& e_festivalmuban_donate_single_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_donate_single* mutable_e_festivalmuban_donate_single_list(int index);
  inline ::proto_ff::E_FestivalMuban_donate_single* add_e_festivalmuban_donate_single_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_single >&
      e_festivalmuban_donate_single_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_single >*
      mutable_e_festivalmuban_donate_single_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_donate_single)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_single > e_festivalmuban_donate_single_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_donate_single* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_donate_task : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_donate_task();
  virtual ~E_FestivalMuban_donate_task();

  E_FestivalMuban_donate_task(const E_FestivalMuban_donate_task& from);

  inline E_FestivalMuban_donate_task& operator=(const E_FestivalMuban_donate_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_donate_task& default_instance();

  void Swap(E_FestivalMuban_donate_task* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_donate_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_donate_task& from);
  void MergeFrom(const E_FestivalMuban_donate_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_eventType = 3;
  inline bool has_m_eventtype() const;
  inline void clear_m_eventtype();
  static const int kMEventTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_eventtype() const;
  inline void set_m_eventtype(::google::protobuf::int32 value);

  // optional int32 m_reachPrice = 4;
  inline bool has_m_reachprice() const;
  inline void clear_m_reachprice();
  static const int kMReachPriceFieldNumber = 4;
  inline ::google::protobuf::int32 m_reachprice() const;
  inline void set_m_reachprice(::google::protobuf::int32 value);

  // optional int32 m_itemID = 5;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemIDFieldNumber = 5;
  inline ::google::protobuf::int32 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int32 value);

  // optional int32 m_itemNum = 6;
  inline bool has_m_itemnum() const;
  inline void clear_m_itemnum();
  static const int kMItemNumFieldNumber = 6;
  inline ::google::protobuf::int32 m_itemnum() const;
  inline void set_m_itemnum(::google::protobuf::int32 value);

  // repeated int32 m_param = 7;
  inline int m_param_size() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 7;
  inline ::google::protobuf::int32 m_param(int index) const;
  inline void set_m_param(int index, ::google::protobuf::int32 value);
  inline void add_m_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_param();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_donate_task)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_eventtype();
  inline void clear_has_m_eventtype();
  inline void set_has_m_reachprice();
  inline void clear_has_m_reachprice();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_itemnum();
  inline void clear_has_m_itemnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_eventtype_;
  ::google::protobuf::int32 m_reachprice_;
  ::google::protobuf::int32 m_itemid_;
  ::google::protobuf::int32 m_itemnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_donate_task* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_donate_task : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_donate_task();
  virtual ~Sheet_FestivalMuban_donate_task();

  Sheet_FestivalMuban_donate_task(const Sheet_FestivalMuban_donate_task& from);

  inline Sheet_FestivalMuban_donate_task& operator=(const Sheet_FestivalMuban_donate_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_donate_task& default_instance();

  void Swap(Sheet_FestivalMuban_donate_task* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_donate_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_donate_task& from);
  void MergeFrom(const Sheet_FestivalMuban_donate_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_donate_task E_FestivalMuban_donate_task_List = 1;
  inline int e_festivalmuban_donate_task_list_size() const;
  inline void clear_e_festivalmuban_donate_task_list();
  static const int kEFestivalMubanDonateTaskListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_donate_task& e_festivalmuban_donate_task_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_donate_task* mutable_e_festivalmuban_donate_task_list(int index);
  inline ::proto_ff::E_FestivalMuban_donate_task* add_e_festivalmuban_donate_task_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_task >&
      e_festivalmuban_donate_task_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_task >*
      mutable_e_festivalmuban_donate_task_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_donate_task)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_task > e_festivalmuban_donate_task_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_donate_task* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_online : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_online();
  virtual ~E_FestivalMuban_online();

  E_FestivalMuban_online(const E_FestivalMuban_online& from);

  inline E_FestivalMuban_online& operator=(const E_FestivalMuban_online& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_online& default_instance();

  void Swap(E_FestivalMuban_online* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_online* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_online& from);
  void MergeFrom(const E_FestivalMuban_online& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional string m_timeStart = 3;
  inline bool has_m_timestart() const;
  inline void clear_m_timestart();
  static const int kMTimeStartFieldNumber = 3;
  inline const ::std::string& m_timestart() const;
  inline void set_m_timestart(const ::std::string& value);
  inline void set_m_timestart(const char* value);
  inline void set_m_timestart(const char* value, size_t size);
  inline ::std::string* mutable_m_timestart();
  inline ::std::string* release_m_timestart();
  inline void set_allocated_m_timestart(::std::string* m_timestart);

  // optional string m_timeEnd = 4;
  inline bool has_m_timeend() const;
  inline void clear_m_timeend();
  static const int kMTimeEndFieldNumber = 4;
  inline const ::std::string& m_timeend() const;
  inline void set_m_timeend(const ::std::string& value);
  inline void set_m_timeend(const char* value);
  inline void set_m_timeend(const char* value, size_t size);
  inline ::std::string* mutable_m_timeend();
  inline ::std::string* release_m_timeend();
  inline void set_allocated_m_timeend(::std::string* m_timeend);

  // optional int32 m_itemID = 5;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemIDFieldNumber = 5;
  inline ::google::protobuf::int32 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int32 value);

  // optional int32 m_itemNum = 6;
  inline bool has_m_itemnum() const;
  inline void clear_m_itemnum();
  static const int kMItemNumFieldNumber = 6;
  inline ::google::protobuf::int32 m_itemnum() const;
  inline void set_m_itemnum(::google::protobuf::int32 value);

  // optional int32 m_vip = 7;
  inline bool has_m_vip() const;
  inline void clear_m_vip();
  static const int kMVipFieldNumber = 7;
  inline ::google::protobuf::int32 m_vip() const;
  inline void set_m_vip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_online)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_timestart();
  inline void clear_has_m_timestart();
  inline void set_has_m_timeend();
  inline void clear_has_m_timeend();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_itemnum();
  inline void clear_has_m_itemnum();
  inline void set_has_m_vip();
  inline void clear_has_m_vip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::std::string* m_timestart_;
  ::std::string* m_timeend_;
  ::google::protobuf::int32 m_itemid_;
  ::google::protobuf::int32 m_itemnum_;
  ::google::protobuf::int32 m_vip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_online* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_online : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_online();
  virtual ~Sheet_FestivalMuban_online();

  Sheet_FestivalMuban_online(const Sheet_FestivalMuban_online& from);

  inline Sheet_FestivalMuban_online& operator=(const Sheet_FestivalMuban_online& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_online& default_instance();

  void Swap(Sheet_FestivalMuban_online* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_online* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_online& from);
  void MergeFrom(const Sheet_FestivalMuban_online& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_online E_FestivalMuban_online_List = 1;
  inline int e_festivalmuban_online_list_size() const;
  inline void clear_e_festivalmuban_online_list();
  static const int kEFestivalMubanOnlineListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_online& e_festivalmuban_online_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_online* mutable_e_festivalmuban_online_list(int index);
  inline ::proto_ff::E_FestivalMuban_online* add_e_festivalmuban_online_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_online >&
      e_festivalmuban_online_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_online >*
      mutable_e_festivalmuban_online_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_online)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_online > e_festivalmuban_online_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_online* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_rturntable : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_rturntable();
  virtual ~E_FestivalMuban_rturntable();

  E_FestivalMuban_rturntable(const E_FestivalMuban_rturntable& from);

  inline E_FestivalMuban_rturntable& operator=(const E_FestivalMuban_rturntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_rturntable& default_instance();

  void Swap(E_FestivalMuban_rturntable* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_rturntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_rturntable& from);
  void MergeFrom(const E_FestivalMuban_rturntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_rechargeGroupID = 3;
  inline bool has_m_rechargegroupid() const;
  inline void clear_m_rechargegroupid();
  static const int kMRechargeGroupIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_rechargegroupid() const;
  inline void set_m_rechargegroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_rturntable)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_rechargegroupid();
  inline void clear_has_m_rechargegroupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_rechargegroupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_rturntable* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_rturntable : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_rturntable();
  virtual ~Sheet_FestivalMuban_rturntable();

  Sheet_FestivalMuban_rturntable(const Sheet_FestivalMuban_rturntable& from);

  inline Sheet_FestivalMuban_rturntable& operator=(const Sheet_FestivalMuban_rturntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_rturntable& default_instance();

  void Swap(Sheet_FestivalMuban_rturntable* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_rturntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_rturntable& from);
  void MergeFrom(const Sheet_FestivalMuban_rturntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_rturntable E_FestivalMuban_rturntable_List = 1;
  inline int e_festivalmuban_rturntable_list_size() const;
  inline void clear_e_festivalmuban_rturntable_list();
  static const int kEFestivalMubanRturntableListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_rturntable& e_festivalmuban_rturntable_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_rturntable* mutable_e_festivalmuban_rturntable_list(int index);
  inline ::proto_ff::E_FestivalMuban_rturntable* add_e_festivalmuban_rturntable_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable >&
      e_festivalmuban_rturntable_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable >*
      mutable_e_festivalmuban_rturntable_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_rturntable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable > e_festivalmuban_rturntable_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_rturntable* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_rturntable_recharge : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_rturntable_recharge();
  virtual ~E_FestivalMuban_rturntable_recharge();

  E_FestivalMuban_rturntable_recharge(const E_FestivalMuban_rturntable_recharge& from);

  inline E_FestivalMuban_rturntable_recharge& operator=(const E_FestivalMuban_rturntable_recharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_rturntable_recharge& default_instance();

  void Swap(E_FestivalMuban_rturntable_recharge* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_rturntable_recharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_rturntable_recharge& from);
  void MergeFrom(const E_FestivalMuban_rturntable_recharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_rechargeID = 3;
  inline bool has_m_rechargeid() const;
  inline void clear_m_rechargeid();
  static const int kMRechargeIDFieldNumber = 3;
  inline ::google::protobuf::int32 m_rechargeid() const;
  inline void set_m_rechargeid(::google::protobuf::int32 value);

  // optional int32 m_limit = 4;
  inline bool has_m_limit() const;
  inline void clear_m_limit();
  static const int kMLimitFieldNumber = 4;
  inline ::google::protobuf::int32 m_limit() const;
  inline void set_m_limit(::google::protobuf::int32 value);

  // optional int32 m_ratioGroupID = 5;
  inline bool has_m_ratiogroupid() const;
  inline void clear_m_ratiogroupid();
  static const int kMRatioGroupIDFieldNumber = 5;
  inline ::google::protobuf::int32 m_ratiogroupid() const;
  inline void set_m_ratiogroupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_rturntable_recharge)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_rechargeid();
  inline void clear_has_m_rechargeid();
  inline void set_has_m_limit();
  inline void clear_has_m_limit();
  inline void set_has_m_ratiogroupid();
  inline void clear_has_m_ratiogroupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_rechargeid_;
  ::google::protobuf::int32 m_limit_;
  ::google::protobuf::int32 m_ratiogroupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_rturntable_recharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_rturntable_recharge : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_rturntable_recharge();
  virtual ~Sheet_FestivalMuban_rturntable_recharge();

  Sheet_FestivalMuban_rturntable_recharge(const Sheet_FestivalMuban_rturntable_recharge& from);

  inline Sheet_FestivalMuban_rturntable_recharge& operator=(const Sheet_FestivalMuban_rturntable_recharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_rturntable_recharge& default_instance();

  void Swap(Sheet_FestivalMuban_rturntable_recharge* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_rturntable_recharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_rturntable_recharge& from);
  void MergeFrom(const Sheet_FestivalMuban_rturntable_recharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_rturntable_recharge E_FestivalMuban_rturntable_recharge_List = 1;
  inline int e_festivalmuban_rturntable_recharge_list_size() const;
  inline void clear_e_festivalmuban_rturntable_recharge_list();
  static const int kEFestivalMubanRturntableRechargeListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_rturntable_recharge& e_festivalmuban_rturntable_recharge_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_rturntable_recharge* mutable_e_festivalmuban_rturntable_recharge_list(int index);
  inline ::proto_ff::E_FestivalMuban_rturntable_recharge* add_e_festivalmuban_rturntable_recharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge >&
      e_festivalmuban_rturntable_recharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge >*
      mutable_e_festivalmuban_rturntable_recharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_rturntable_recharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge > e_festivalmuban_rturntable_recharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_rturntable_recharge* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_rturntable_recharge_ratio : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_rturntable_recharge_ratio();
  virtual ~E_FestivalMuban_rturntable_recharge_ratio();

  E_FestivalMuban_rturntable_recharge_ratio(const E_FestivalMuban_rturntable_recharge_ratio& from);

  inline E_FestivalMuban_rturntable_recharge_ratio& operator=(const E_FestivalMuban_rturntable_recharge_ratio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_rturntable_recharge_ratio& default_instance();

  void Swap(E_FestivalMuban_rturntable_recharge_ratio* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_rturntable_recharge_ratio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_rturntable_recharge_ratio& from);
  void MergeFrom(const E_FestivalMuban_rturntable_recharge_ratio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_ratio = 3;
  inline bool has_m_ratio() const;
  inline void clear_m_ratio();
  static const int kMRatioFieldNumber = 3;
  inline ::google::protobuf::int32 m_ratio() const;
  inline void set_m_ratio(::google::protobuf::int32 value);

  // optional int32 m_weight = 4;
  inline bool has_m_weight() const;
  inline void clear_m_weight();
  static const int kMWeightFieldNumber = 4;
  inline ::google::protobuf::int32 m_weight() const;
  inline void set_m_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_rturntable_recharge_ratio)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_ratio();
  inline void clear_has_m_ratio();
  inline void set_has_m_weight();
  inline void clear_has_m_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_ratio_;
  ::google::protobuf::int32 m_weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_rturntable_recharge_ratio* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_rturntable_recharge_ratio : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_rturntable_recharge_ratio();
  virtual ~Sheet_FestivalMuban_rturntable_recharge_ratio();

  Sheet_FestivalMuban_rturntable_recharge_ratio(const Sheet_FestivalMuban_rturntable_recharge_ratio& from);

  inline Sheet_FestivalMuban_rturntable_recharge_ratio& operator=(const Sheet_FestivalMuban_rturntable_recharge_ratio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_rturntable_recharge_ratio& default_instance();

  void Swap(Sheet_FestivalMuban_rturntable_recharge_ratio* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_rturntable_recharge_ratio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_rturntable_recharge_ratio& from);
  void MergeFrom(const Sheet_FestivalMuban_rturntable_recharge_ratio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_rturntable_recharge_ratio E_FestivalMuban_rturntable_recharge_ratio_List = 1;
  inline int e_festivalmuban_rturntable_recharge_ratio_list_size() const;
  inline void clear_e_festivalmuban_rturntable_recharge_ratio_list();
  static const int kEFestivalMubanRturntableRechargeRatioListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio& e_festivalmuban_rturntable_recharge_ratio_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio* mutable_e_festivalmuban_rturntable_recharge_ratio_list(int index);
  inline ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio* add_e_festivalmuban_rturntable_recharge_ratio_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio >&
      e_festivalmuban_rturntable_recharge_ratio_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio >*
      mutable_e_festivalmuban_rturntable_recharge_ratio_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_rturntable_recharge_ratio)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio > e_festivalmuban_rturntable_recharge_ratio_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_rturntable_recharge_ratio* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_drawpize : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_drawpize();
  virtual ~E_FestivalMuban_drawpize();

  E_FestivalMuban_drawpize(const E_FestivalMuban_drawpize& from);

  inline E_FestivalMuban_drawpize& operator=(const E_FestivalMuban_drawpize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_drawpize& default_instance();

  void Swap(E_FestivalMuban_drawpize* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_drawpize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_drawpize& from);
  void MergeFrom(const E_FestivalMuban_drawpize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int64 m_costID = 3;
  inline bool has_m_costid() const;
  inline void clear_m_costid();
  static const int kMCostIDFieldNumber = 3;
  inline ::google::protobuf::int64 m_costid() const;
  inline void set_m_costid(::google::protobuf::int64 value);

  // optional string m_costNum = 4;
  inline bool has_m_costnum() const;
  inline void clear_m_costnum();
  static const int kMCostNumFieldNumber = 4;
  inline const ::std::string& m_costnum() const;
  inline void set_m_costnum(const ::std::string& value);
  inline void set_m_costnum(const char* value);
  inline void set_m_costnum(const char* value, size_t size);
  inline ::std::string* mutable_m_costnum();
  inline ::std::string* release_m_costnum();
  inline void set_allocated_m_costnum(::std::string* m_costnum);

  // optional int32 m_poolGroupId = 5;
  inline bool has_m_poolgroupid() const;
  inline void clear_m_poolgroupid();
  static const int kMPoolGroupIdFieldNumber = 5;
  inline ::google::protobuf::int32 m_poolgroupid() const;
  inline void set_m_poolgroupid(::google::protobuf::int32 value);

  // optional int32 m_totalGroupID = 6;
  inline bool has_m_totalgroupid() const;
  inline void clear_m_totalgroupid();
  static const int kMTotalGroupIDFieldNumber = 6;
  inline ::google::protobuf::int32 m_totalgroupid() const;
  inline void set_m_totalgroupid(::google::protobuf::int32 value);

  // optional int32 m_severLimit = 7;
  inline bool has_m_severlimit() const;
  inline void clear_m_severlimit();
  static const int kMSeverLimitFieldNumber = 7;
  inline ::google::protobuf::int32 m_severlimit() const;
  inline void set_m_severlimit(::google::protobuf::int32 value);

  // optional int32 m_protectTime = 8;
  inline bool has_m_protecttime() const;
  inline void clear_m_protecttime();
  static const int kMProtectTimeFieldNumber = 8;
  inline ::google::protobuf::int32 m_protecttime() const;
  inline void set_m_protecttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_drawpize)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_costid();
  inline void clear_has_m_costid();
  inline void set_has_m_costnum();
  inline void clear_has_m_costnum();
  inline void set_has_m_poolgroupid();
  inline void clear_has_m_poolgroupid();
  inline void set_has_m_totalgroupid();
  inline void clear_has_m_totalgroupid();
  inline void set_has_m_severlimit();
  inline void clear_has_m_severlimit();
  inline void set_has_m_protecttime();
  inline void clear_has_m_protecttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int64 m_costid_;
  ::std::string* m_costnum_;
  ::google::protobuf::int32 m_poolgroupid_;
  ::google::protobuf::int32 m_totalgroupid_;
  ::google::protobuf::int32 m_severlimit_;
  ::google::protobuf::int32 m_protecttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_drawpize* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_drawpize : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_drawpize();
  virtual ~Sheet_FestivalMuban_drawpize();

  Sheet_FestivalMuban_drawpize(const Sheet_FestivalMuban_drawpize& from);

  inline Sheet_FestivalMuban_drawpize& operator=(const Sheet_FestivalMuban_drawpize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_drawpize& default_instance();

  void Swap(Sheet_FestivalMuban_drawpize* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_drawpize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_drawpize& from);
  void MergeFrom(const Sheet_FestivalMuban_drawpize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_drawpize E_FestivalMuban_drawpize_List = 1;
  inline int e_festivalmuban_drawpize_list_size() const;
  inline void clear_e_festivalmuban_drawpize_list();
  static const int kEFestivalMubanDrawpizeListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_drawpize& e_festivalmuban_drawpize_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_drawpize* mutable_e_festivalmuban_drawpize_list(int index);
  inline ::proto_ff::E_FestivalMuban_drawpize* add_e_festivalmuban_drawpize_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize >&
      e_festivalmuban_drawpize_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize >*
      mutable_e_festivalmuban_drawpize_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_drawpize)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize > e_festivalmuban_drawpize_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_drawpize* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_drawpize_pool : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_drawpize_pool();
  virtual ~E_FestivalMuban_drawpize_pool();

  E_FestivalMuban_drawpize_pool(const E_FestivalMuban_drawpize_pool& from);

  inline E_FestivalMuban_drawpize_pool& operator=(const E_FestivalMuban_drawpize_pool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_drawpize_pool& default_instance();

  void Swap(E_FestivalMuban_drawpize_pool* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_drawpize_pool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_drawpize_pool& from);
  void MergeFrom(const E_FestivalMuban_drawpize_pool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int64 m_itemid = 3;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemidFieldNumber = 3;
  inline ::google::protobuf::int64 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int64 value);

  // optional int32 m_num = 4;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 4;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // optional int32 m_prof = 5;
  inline bool has_m_prof() const;
  inline void clear_m_prof();
  static const int kMProfFieldNumber = 5;
  inline ::google::protobuf::int32 m_prof() const;
  inline void set_m_prof(::google::protobuf::int32 value);

  // optional int32 m_weights = 6;
  inline bool has_m_weights() const;
  inline void clear_m_weights();
  static const int kMWeightsFieldNumber = 6;
  inline ::google::protobuf::int32 m_weights() const;
  inline void set_m_weights(::google::protobuf::int32 value);

  // optional int32 m_proWeights = 7;
  inline bool has_m_proweights() const;
  inline void clear_m_proweights();
  static const int kMProWeightsFieldNumber = 7;
  inline ::google::protobuf::int32 m_proweights() const;
  inline void set_m_proweights(::google::protobuf::int32 value);

  // optional int32 m_timeLimit = 8;
  inline bool has_m_timelimit() const;
  inline void clear_m_timelimit();
  static const int kMTimeLimitFieldNumber = 8;
  inline ::google::protobuf::int32 m_timelimit() const;
  inline void set_m_timelimit(::google::protobuf::int32 value);

  // optional int32 m_Record = 9;
  inline bool has_m_record() const;
  inline void clear_m_record();
  static const int kMRecordFieldNumber = 9;
  inline ::google::protobuf::int32 m_record() const;
  inline void set_m_record(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_drawpize_pool)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_prof();
  inline void clear_has_m_prof();
  inline void set_has_m_weights();
  inline void clear_has_m_weights();
  inline void set_has_m_proweights();
  inline void clear_has_m_proweights();
  inline void set_has_m_timelimit();
  inline void clear_has_m_timelimit();
  inline void set_has_m_record();
  inline void clear_has_m_record();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int64 m_itemid_;
  ::google::protobuf::int32 m_num_;
  ::google::protobuf::int32 m_prof_;
  ::google::protobuf::int32 m_weights_;
  ::google::protobuf::int32 m_proweights_;
  ::google::protobuf::int32 m_timelimit_;
  ::google::protobuf::int32 m_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_drawpize_pool* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_drawpize_pool : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_drawpize_pool();
  virtual ~Sheet_FestivalMuban_drawpize_pool();

  Sheet_FestivalMuban_drawpize_pool(const Sheet_FestivalMuban_drawpize_pool& from);

  inline Sheet_FestivalMuban_drawpize_pool& operator=(const Sheet_FestivalMuban_drawpize_pool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_drawpize_pool& default_instance();

  void Swap(Sheet_FestivalMuban_drawpize_pool* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_drawpize_pool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_drawpize_pool& from);
  void MergeFrom(const Sheet_FestivalMuban_drawpize_pool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_drawpize_pool E_FestivalMuban_drawpize_pool_List = 1;
  inline int e_festivalmuban_drawpize_pool_list_size() const;
  inline void clear_e_festivalmuban_drawpize_pool_list();
  static const int kEFestivalMubanDrawpizePoolListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_drawpize_pool& e_festivalmuban_drawpize_pool_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_drawpize_pool* mutable_e_festivalmuban_drawpize_pool_list(int index);
  inline ::proto_ff::E_FestivalMuban_drawpize_pool* add_e_festivalmuban_drawpize_pool_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_pool >&
      e_festivalmuban_drawpize_pool_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_pool >*
      mutable_e_festivalmuban_drawpize_pool_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_drawpize_pool)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_pool > e_festivalmuban_drawpize_pool_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_drawpize_pool* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_drawpize_total : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_drawpize_total();
  virtual ~E_FestivalMuban_drawpize_total();

  E_FestivalMuban_drawpize_total(const E_FestivalMuban_drawpize_total& from);

  inline E_FestivalMuban_drawpize_total& operator=(const E_FestivalMuban_drawpize_total& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_drawpize_total& default_instance();

  void Swap(E_FestivalMuban_drawpize_total* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_drawpize_total* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_drawpize_total& from);
  void MergeFrom(const E_FestivalMuban_drawpize_total& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupid = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupidFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_value = 3;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 3;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_itemID = 4;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemIDFieldNumber = 4;
  inline ::google::protobuf::int32 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int32 value);

  // optional int32 m_num = 5;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 5;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_drawpize_total)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_num();
  inline void clear_has_m_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_itemid_;
  ::google::protobuf::int32 m_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_drawpize_total* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_drawpize_total : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_drawpize_total();
  virtual ~Sheet_FestivalMuban_drawpize_total();

  Sheet_FestivalMuban_drawpize_total(const Sheet_FestivalMuban_drawpize_total& from);

  inline Sheet_FestivalMuban_drawpize_total& operator=(const Sheet_FestivalMuban_drawpize_total& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_drawpize_total& default_instance();

  void Swap(Sheet_FestivalMuban_drawpize_total* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_drawpize_total* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_drawpize_total& from);
  void MergeFrom(const Sheet_FestivalMuban_drawpize_total& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_drawpize_total E_FestivalMuban_drawpize_total_List = 1;
  inline int e_festivalmuban_drawpize_total_list_size() const;
  inline void clear_e_festivalmuban_drawpize_total_list();
  static const int kEFestivalMubanDrawpizeTotalListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_drawpize_total& e_festivalmuban_drawpize_total_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_drawpize_total* mutable_e_festivalmuban_drawpize_total_list(int index);
  inline ::proto_ff::E_FestivalMuban_drawpize_total* add_e_festivalmuban_drawpize_total_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_total >&
      e_festivalmuban_drawpize_total_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_total >*
      mutable_e_festivalmuban_drawpize_total_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_drawpize_total)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_total > e_festivalmuban_drawpize_total_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_drawpize_total* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_totalrecharge : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_totalrecharge();
  virtual ~E_FestivalMuban_totalrecharge();

  E_FestivalMuban_totalrecharge(const E_FestivalMuban_totalrecharge& from);

  inline E_FestivalMuban_totalrecharge& operator=(const E_FestivalMuban_totalrecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_totalrecharge& default_instance();

  void Swap(E_FestivalMuban_totalrecharge* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_totalrecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_totalrecharge& from);
  void MergeFrom(const E_FestivalMuban_totalrecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_value = 3;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 3;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_boxid = 4;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxidFieldNumber = 4;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_totalrecharge)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_totalrecharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_totalrecharge : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_totalrecharge();
  virtual ~Sheet_FestivalMuban_totalrecharge();

  Sheet_FestivalMuban_totalrecharge(const Sheet_FestivalMuban_totalrecharge& from);

  inline Sheet_FestivalMuban_totalrecharge& operator=(const Sheet_FestivalMuban_totalrecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_totalrecharge& default_instance();

  void Swap(Sheet_FestivalMuban_totalrecharge* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_totalrecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_totalrecharge& from);
  void MergeFrom(const Sheet_FestivalMuban_totalrecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_totalrecharge E_FestivalMuban_totalrecharge_List = 1;
  inline int e_festivalmuban_totalrecharge_list_size() const;
  inline void clear_e_festivalmuban_totalrecharge_list();
  static const int kEFestivalMubanTotalrechargeListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_totalrecharge& e_festivalmuban_totalrecharge_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_totalrecharge* mutable_e_festivalmuban_totalrecharge_list(int index);
  inline ::proto_ff::E_FestivalMuban_totalrecharge* add_e_festivalmuban_totalrecharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_totalrecharge >&
      e_festivalmuban_totalrecharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_totalrecharge >*
      mutable_e_festivalmuban_totalrecharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_totalrecharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_totalrecharge > e_festivalmuban_totalrecharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_totalrecharge* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_dailytotalrecharge : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_dailytotalrecharge();
  virtual ~E_FestivalMuban_dailytotalrecharge();

  E_FestivalMuban_dailytotalrecharge(const E_FestivalMuban_dailytotalrecharge& from);

  inline E_FestivalMuban_dailytotalrecharge& operator=(const E_FestivalMuban_dailytotalrecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_dailytotalrecharge& default_instance();

  void Swap(E_FestivalMuban_dailytotalrecharge* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_dailytotalrecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_dailytotalrecharge& from);
  void MergeFrom(const E_FestivalMuban_dailytotalrecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_value = 3;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 3;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_boxid = 4;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxidFieldNumber = 4;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_dailytotalrecharge)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_dailytotalrecharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_dailytotalrecharge : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_dailytotalrecharge();
  virtual ~Sheet_FestivalMuban_dailytotalrecharge();

  Sheet_FestivalMuban_dailytotalrecharge(const Sheet_FestivalMuban_dailytotalrecharge& from);

  inline Sheet_FestivalMuban_dailytotalrecharge& operator=(const Sheet_FestivalMuban_dailytotalrecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_dailytotalrecharge& default_instance();

  void Swap(Sheet_FestivalMuban_dailytotalrecharge* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_dailytotalrecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_dailytotalrecharge& from);
  void MergeFrom(const Sheet_FestivalMuban_dailytotalrecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_dailytotalrecharge E_FestivalMuban_dailytotalrecharge_List = 1;
  inline int e_festivalmuban_dailytotalrecharge_list_size() const;
  inline void clear_e_festivalmuban_dailytotalrecharge_list();
  static const int kEFestivalMubanDailytotalrechargeListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_dailytotalrecharge& e_festivalmuban_dailytotalrecharge_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_dailytotalrecharge* mutable_e_festivalmuban_dailytotalrecharge_list(int index);
  inline ::proto_ff::E_FestivalMuban_dailytotalrecharge* add_e_festivalmuban_dailytotalrecharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_dailytotalrecharge >&
      e_festivalmuban_dailytotalrecharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_dailytotalrecharge >*
      mutable_e_festivalmuban_dailytotalrecharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_dailytotalrecharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_dailytotalrecharge > e_festivalmuban_dailytotalrecharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_dailytotalrecharge* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_play : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_play();
  virtual ~E_FestivalMuban_play();

  E_FestivalMuban_play(const E_FestivalMuban_play& from);

  inline E_FestivalMuban_play& operator=(const E_FestivalMuban_play& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_play& default_instance();

  void Swap(E_FestivalMuban_play* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_play* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_play& from);
  void MergeFrom(const E_FestivalMuban_play& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_period = 2;
  inline bool has_m_period() const;
  inline void clear_m_period();
  static const int kMPeriodFieldNumber = 2;
  inline ::google::protobuf::int32 m_period() const;
  inline void set_m_period(::google::protobuf::int32 value);

  // optional int32 m_rewardGroup = 3;
  inline bool has_m_rewardgroup() const;
  inline void clear_m_rewardgroup();
  static const int kMRewardGroupFieldNumber = 3;
  inline ::google::protobuf::int32 m_rewardgroup() const;
  inline void set_m_rewardgroup(::google::protobuf::int32 value);

  // optional int32 m_gameGroup = 4;
  inline bool has_m_gamegroup() const;
  inline void clear_m_gamegroup();
  static const int kMGameGroupFieldNumber = 4;
  inline ::google::protobuf::int32 m_gamegroup() const;
  inline void set_m_gamegroup(::google::protobuf::int32 value);

  // repeated string m_openTime = 5;
  inline int m_opentime_size() const;
  inline void clear_m_opentime();
  static const int kMOpenTimeFieldNumber = 5;
  inline const ::std::string& m_opentime(int index) const;
  inline ::std::string* mutable_m_opentime(int index);
  inline void set_m_opentime(int index, const ::std::string& value);
  inline void set_m_opentime(int index, const char* value);
  inline void set_m_opentime(int index, const char* value, size_t size);
  inline ::std::string* add_m_opentime();
  inline void add_m_opentime(const ::std::string& value);
  inline void add_m_opentime(const char* value);
  inline void add_m_opentime(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_opentime() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_opentime();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_play)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_period();
  inline void clear_has_m_period();
  inline void set_has_m_rewardgroup();
  inline void clear_has_m_rewardgroup();
  inline void set_has_m_gamegroup();
  inline void clear_has_m_gamegroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_period_;
  ::google::protobuf::int32 m_rewardgroup_;
  ::google::protobuf::int32 m_gamegroup_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_opentime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_play* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_play : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_play();
  virtual ~Sheet_FestivalMuban_play();

  Sheet_FestivalMuban_play(const Sheet_FestivalMuban_play& from);

  inline Sheet_FestivalMuban_play& operator=(const Sheet_FestivalMuban_play& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_play& default_instance();

  void Swap(Sheet_FestivalMuban_play* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_play* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_play& from);
  void MergeFrom(const Sheet_FestivalMuban_play& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_play E_FestivalMuban_play_List = 1;
  inline int e_festivalmuban_play_list_size() const;
  inline void clear_e_festivalmuban_play_list();
  static const int kEFestivalMubanPlayListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_play& e_festivalmuban_play_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_play* mutable_e_festivalmuban_play_list(int index);
  inline ::proto_ff::E_FestivalMuban_play* add_e_festivalmuban_play_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play >&
      e_festivalmuban_play_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play >*
      mutable_e_festivalmuban_play_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_play)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play > e_festivalmuban_play_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_play* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_play_reward : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_play_reward();
  virtual ~E_FestivalMuban_play_reward();

  E_FestivalMuban_play_reward(const E_FestivalMuban_play_reward& from);

  inline E_FestivalMuban_play_reward& operator=(const E_FestivalMuban_play_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_play_reward& default_instance();

  void Swap(E_FestivalMuban_play_reward* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_play_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_play_reward& from);
  void MergeFrom(const E_FestivalMuban_play_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_points = 3;
  inline bool has_m_points() const;
  inline void clear_m_points();
  static const int kMPointsFieldNumber = 3;
  inline ::google::protobuf::int32 m_points() const;
  inline void set_m_points(::google::protobuf::int32 value);

  // optional int32 m_boxID = 4;
  inline bool has_m_boxid() const;
  inline void clear_m_boxid();
  static const int kMBoxIDFieldNumber = 4;
  inline ::google::protobuf::int32 m_boxid() const;
  inline void set_m_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_play_reward)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_points();
  inline void clear_has_m_points();
  inline void set_has_m_boxid();
  inline void clear_has_m_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_points_;
  ::google::protobuf::int32 m_boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_play_reward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_play_reward : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_play_reward();
  virtual ~Sheet_FestivalMuban_play_reward();

  Sheet_FestivalMuban_play_reward(const Sheet_FestivalMuban_play_reward& from);

  inline Sheet_FestivalMuban_play_reward& operator=(const Sheet_FestivalMuban_play_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_play_reward& default_instance();

  void Swap(Sheet_FestivalMuban_play_reward* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_play_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_play_reward& from);
  void MergeFrom(const Sheet_FestivalMuban_play_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_play_reward E_FestivalMuban_play_reward_List = 1;
  inline int e_festivalmuban_play_reward_list_size() const;
  inline void clear_e_festivalmuban_play_reward_list();
  static const int kEFestivalMubanPlayRewardListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_play_reward& e_festivalmuban_play_reward_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_play_reward* mutable_e_festivalmuban_play_reward_list(int index);
  inline ::proto_ff::E_FestivalMuban_play_reward* add_e_festivalmuban_play_reward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_reward >&
      e_festivalmuban_play_reward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_reward >*
      mutable_e_festivalmuban_play_reward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_play_reward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_reward > e_festivalmuban_play_reward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_play_reward* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_play_game : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_play_game();
  virtual ~E_FestivalMuban_play_game();

  E_FestivalMuban_play_game(const E_FestivalMuban_play_game& from);

  inline E_FestivalMuban_play_game& operator=(const E_FestivalMuban_play_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_play_game& default_instance();

  void Swap(E_FestivalMuban_play_game* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_play_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_play_game& from);
  void MergeFrom(const E_FestivalMuban_play_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_groupID = 2;
  inline bool has_m_groupid() const;
  inline void clear_m_groupid();
  static const int kMGroupIDFieldNumber = 2;
  inline ::google::protobuf::int32 m_groupid() const;
  inline void set_m_groupid(::google::protobuf::int32 value);

  // optional int32 m_order = 3;
  inline bool has_m_order() const;
  inline void clear_m_order();
  static const int kMOrderFieldNumber = 3;
  inline ::google::protobuf::int32 m_order() const;
  inline void set_m_order(::google::protobuf::int32 value);

  // optional int32 m_playType = 4;
  inline bool has_m_playtype() const;
  inline void clear_m_playtype();
  static const int kMPlayTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_playtype() const;
  inline void set_m_playtype(::google::protobuf::int32 value);

  // optional string m_arg = 5;
  inline bool has_m_arg() const;
  inline void clear_m_arg();
  static const int kMArgFieldNumber = 5;
  inline const ::std::string& m_arg() const;
  inline void set_m_arg(const ::std::string& value);
  inline void set_m_arg(const char* value);
  inline void set_m_arg(const char* value, size_t size);
  inline ::std::string* mutable_m_arg();
  inline ::std::string* release_m_arg();
  inline void set_allocated_m_arg(::std::string* m_arg);

  // optional int32 m_rewardBox = 6;
  inline bool has_m_rewardbox() const;
  inline void clear_m_rewardbox();
  static const int kMRewardBoxFieldNumber = 6;
  inline ::google::protobuf::int32 m_rewardbox() const;
  inline void set_m_rewardbox(::google::protobuf::int32 value);

  // optional int32 m_preTime = 7;
  inline bool has_m_pretime() const;
  inline void clear_m_pretime();
  static const int kMPreTimeFieldNumber = 7;
  inline ::google::protobuf::int32 m_pretime() const;
  inline void set_m_pretime(::google::protobuf::int32 value);

  // repeated string m_playArg = 8;
  inline int m_playarg_size() const;
  inline void clear_m_playarg();
  static const int kMPlayArgFieldNumber = 8;
  inline const ::std::string& m_playarg(int index) const;
  inline ::std::string* mutable_m_playarg(int index);
  inline void set_m_playarg(int index, const ::std::string& value);
  inline void set_m_playarg(int index, const char* value);
  inline void set_m_playarg(int index, const char* value, size_t size);
  inline ::std::string* add_m_playarg();
  inline void add_m_playarg(const ::std::string& value);
  inline void add_m_playarg(const char* value);
  inline void add_m_playarg(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_playarg() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_playarg();

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_play_game)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_groupid();
  inline void clear_has_m_groupid();
  inline void set_has_m_order();
  inline void clear_has_m_order();
  inline void set_has_m_playtype();
  inline void clear_has_m_playtype();
  inline void set_has_m_arg();
  inline void clear_has_m_arg();
  inline void set_has_m_rewardbox();
  inline void clear_has_m_rewardbox();
  inline void set_has_m_pretime();
  inline void clear_has_m_pretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_groupid_;
  ::google::protobuf::int32 m_order_;
  ::google::protobuf::int32 m_playtype_;
  ::std::string* m_arg_;
  ::google::protobuf::int32 m_rewardbox_;
  ::google::protobuf::int32 m_pretime_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_playarg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_play_game* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_play_game : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_play_game();
  virtual ~Sheet_FestivalMuban_play_game();

  Sheet_FestivalMuban_play_game(const Sheet_FestivalMuban_play_game& from);

  inline Sheet_FestivalMuban_play_game& operator=(const Sheet_FestivalMuban_play_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_play_game& default_instance();

  void Swap(Sheet_FestivalMuban_play_game* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_play_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_play_game& from);
  void MergeFrom(const Sheet_FestivalMuban_play_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_play_game E_FestivalMuban_play_game_List = 1;
  inline int e_festivalmuban_play_game_list_size() const;
  inline void clear_e_festivalmuban_play_game_list();
  static const int kEFestivalMubanPlayGameListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_play_game& e_festivalmuban_play_game_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_play_game* mutable_e_festivalmuban_play_game_list(int index);
  inline ::proto_ff::E_FestivalMuban_play_game* add_e_festivalmuban_play_game_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_game >&
      e_festivalmuban_play_game_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_game >*
      mutable_e_festivalmuban_play_game_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_play_game)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_game > e_festivalmuban_play_game_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_play_game* default_instance_;
};
// -------------------------------------------------------------------

class E_FestivalMuban_play_score : public ::google::protobuf::Message {
 public:
  E_FestivalMuban_play_score();
  virtual ~E_FestivalMuban_play_score();

  E_FestivalMuban_play_score(const E_FestivalMuban_play_score& from);

  inline E_FestivalMuban_play_score& operator=(const E_FestivalMuban_play_score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_FestivalMuban_play_score& default_instance();

  void Swap(E_FestivalMuban_play_score* other);

  // implements Message ----------------------------------------------

  E_FestivalMuban_play_score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_FestivalMuban_play_score& from);
  void MergeFrom(const E_FestivalMuban_play_score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_score = 2;
  inline bool has_m_score() const;
  inline void clear_m_score();
  static const int kMScoreFieldNumber = 2;
  inline ::google::protobuf::int32 m_score() const;
  inline void set_m_score(::google::protobuf::int32 value);

  // optional string m_image = 3;
  inline bool has_m_image() const;
  inline void clear_m_image();
  static const int kMImageFieldNumber = 3;
  inline const ::std::string& m_image() const;
  inline void set_m_image(const ::std::string& value);
  inline void set_m_image(const char* value);
  inline void set_m_image(const char* value, size_t size);
  inline ::std::string* mutable_m_image();
  inline ::std::string* release_m_image();
  inline void set_allocated_m_image(::std::string* m_image);

  // optional int32 m_point = 4;
  inline bool has_m_point() const;
  inline void clear_m_point();
  static const int kMPointFieldNumber = 4;
  inline ::google::protobuf::int32 m_point() const;
  inline void set_m_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_FestivalMuban_play_score)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_score();
  inline void clear_has_m_score();
  inline void set_has_m_image();
  inline void clear_has_m_image();
  inline void set_has_m_point();
  inline void clear_has_m_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_score_;
  ::std::string* m_image_;
  ::google::protobuf::int32 m_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static E_FestivalMuban_play_score* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FestivalMuban_play_score : public ::google::protobuf::Message {
 public:
  Sheet_FestivalMuban_play_score();
  virtual ~Sheet_FestivalMuban_play_score();

  Sheet_FestivalMuban_play_score(const Sheet_FestivalMuban_play_score& from);

  inline Sheet_FestivalMuban_play_score& operator=(const Sheet_FestivalMuban_play_score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FestivalMuban_play_score& default_instance();

  void Swap(Sheet_FestivalMuban_play_score* other);

  // implements Message ----------------------------------------------

  Sheet_FestivalMuban_play_score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FestivalMuban_play_score& from);
  void MergeFrom(const Sheet_FestivalMuban_play_score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_FestivalMuban_play_score E_FestivalMuban_play_score_List = 1;
  inline int e_festivalmuban_play_score_list_size() const;
  inline void clear_e_festivalmuban_play_score_list();
  static const int kEFestivalMubanPlayScoreListFieldNumber = 1;
  inline const ::proto_ff::E_FestivalMuban_play_score& e_festivalmuban_play_score_list(int index) const;
  inline ::proto_ff::E_FestivalMuban_play_score* mutable_e_festivalmuban_play_score_list(int index);
  inline ::proto_ff::E_FestivalMuban_play_score* add_e_festivalmuban_play_score_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_score >&
      e_festivalmuban_play_score_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_score >*
      mutable_e_festivalmuban_play_score_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FestivalMuban_play_score)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_score > e_festivalmuban_play_score_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fFestival_2eproto();
  friend void protobuf_AssignDesc_E_5fFestival_2eproto();
  friend void protobuf_ShutdownFile_E_5fFestival_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FestivalMuban_play_score* default_instance_;
};
// ===================================================================


// ===================================================================

// E_FestivalPeriodindex

// optional int32 m_minOrigalDay = 1;
inline bool E_FestivalPeriodindex::has_m_minorigalday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalPeriodindex::set_has_m_minorigalday() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalPeriodindex::clear_has_m_minorigalday() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalPeriodindex::clear_m_minorigalday() {
  m_minorigalday_ = 0;
  clear_has_m_minorigalday();
}
inline ::google::protobuf::int32 E_FestivalPeriodindex::m_minorigalday() const {
  return m_minorigalday_;
}
inline void E_FestivalPeriodindex::set_m_minorigalday(::google::protobuf::int32 value) {
  set_has_m_minorigalday();
  m_minorigalday_ = value;
}

// repeated int32 m_period = 2;
inline int E_FestivalPeriodindex::m_period_size() const {
  return m_period_.size();
}
inline void E_FestivalPeriodindex::clear_m_period() {
  m_period_.Clear();
}
inline ::google::protobuf::int32 E_FestivalPeriodindex::m_period(int index) const {
  return m_period_.Get(index);
}
inline void E_FestivalPeriodindex::set_m_period(int index, ::google::protobuf::int32 value) {
  m_period_.Set(index, value);
}
inline void E_FestivalPeriodindex::add_m_period(::google::protobuf::int32 value) {
  m_period_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_FestivalPeriodindex::m_period() const {
  return m_period_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_FestivalPeriodindex::mutable_m_period() {
  return &m_period_;
}

// -------------------------------------------------------------------

// Sheet_FestivalPeriodindex

// repeated .proto_ff.E_FestivalPeriodindex E_FestivalPeriodindex_List = 1;
inline int Sheet_FestivalPeriodindex::e_festivalperiodindex_list_size() const {
  return e_festivalperiodindex_list_.size();
}
inline void Sheet_FestivalPeriodindex::clear_e_festivalperiodindex_list() {
  e_festivalperiodindex_list_.Clear();
}
inline const ::proto_ff::E_FestivalPeriodindex& Sheet_FestivalPeriodindex::e_festivalperiodindex_list(int index) const {
  return e_festivalperiodindex_list_.Get(index);
}
inline ::proto_ff::E_FestivalPeriodindex* Sheet_FestivalPeriodindex::mutable_e_festivalperiodindex_list(int index) {
  return e_festivalperiodindex_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalPeriodindex* Sheet_FestivalPeriodindex::add_e_festivalperiodindex_list() {
  return e_festivalperiodindex_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalPeriodindex >&
Sheet_FestivalPeriodindex::e_festivalperiodindex_list() const {
  return e_festivalperiodindex_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalPeriodindex >*
Sheet_FestivalPeriodindex::mutable_e_festivalperiodindex_list() {
  return &e_festivalperiodindex_list_;
}

// -------------------------------------------------------------------

// E_FestivalFestival

// optional int32 m_id = 1;
inline bool E_FestivalFestival::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalFestival::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalFestival::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalFestival::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalFestival::m_id() const {
  return m_id_;
}
inline void E_FestivalFestival::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_type = 2;
inline bool E_FestivalFestival::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalFestival::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalFestival::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalFestival::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_FestivalFestival::m_type() const {
  return m_type_;
}
inline void E_FestivalFestival::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalFestival

// repeated .proto_ff.E_FestivalFestival E_FestivalFestival_List = 1;
inline int Sheet_FestivalFestival::e_festivalfestival_list_size() const {
  return e_festivalfestival_list_.size();
}
inline void Sheet_FestivalFestival::clear_e_festivalfestival_list() {
  e_festivalfestival_list_.Clear();
}
inline const ::proto_ff::E_FestivalFestival& Sheet_FestivalFestival::e_festivalfestival_list(int index) const {
  return e_festivalfestival_list_.Get(index);
}
inline ::proto_ff::E_FestivalFestival* Sheet_FestivalFestival::mutable_e_festivalfestival_list(int index) {
  return e_festivalfestival_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalFestival* Sheet_FestivalFestival::add_e_festivalfestival_list() {
  return e_festivalfestival_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalFestival >&
Sheet_FestivalFestival::e_festivalfestival_list() const {
  return e_festivalfestival_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalFestival >*
Sheet_FestivalFestival::mutable_e_festivalfestival_list() {
  return &e_festivalfestival_list_;
}

// -------------------------------------------------------------------

// E_FestivalTemplate

// optional int32 m_id = 1;
inline bool E_FestivalTemplate::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalTemplate::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalTemplate::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalTemplate::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_id() const {
  return m_id_;
}
inline void E_FestivalTemplate::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_name = 2;
inline bool E_FestivalTemplate::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalTemplate::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalTemplate::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalTemplate::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_FestivalTemplate::m_name() const {
  return *m_name_;
}
inline void E_FestivalTemplate::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_FestivalTemplate::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_FestivalTemplate::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalTemplate::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_FestivalTemplate::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalTemplate::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_festivalId = 3;
inline bool E_FestivalTemplate::has_m_festivalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalTemplate::set_has_m_festivalid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalTemplate::clear_has_m_festivalid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalTemplate::clear_m_festivalid() {
  m_festivalid_ = 0;
  clear_has_m_festivalid();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_festivalid() const {
  return m_festivalid_;
}
inline void E_FestivalTemplate::set_m_festivalid(::google::protobuf::int32 value) {
  set_has_m_festivalid();
  m_festivalid_ = value;
}

// optional int32 m_timeType = 4;
inline bool E_FestivalTemplate::has_m_timetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalTemplate::set_has_m_timetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalTemplate::clear_has_m_timetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalTemplate::clear_m_timetype() {
  m_timetype_ = 0;
  clear_has_m_timetype();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_timetype() const {
  return m_timetype_;
}
inline void E_FestivalTemplate::set_m_timetype(::google::protobuf::int32 value) {
  set_has_m_timetype();
  m_timetype_ = value;
}

// optional int32 m_level = 5;
inline bool E_FestivalTemplate::has_m_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalTemplate::set_has_m_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalTemplate::clear_has_m_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalTemplate::clear_m_level() {
  m_level_ = 0;
  clear_has_m_level();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_level() const {
  return m_level_;
}
inline void E_FestivalTemplate::set_m_level(::google::protobuf::int32 value) {
  set_has_m_level();
  m_level_ = value;
}

// optional int32 m_vipLevel = 6;
inline bool E_FestivalTemplate::has_m_viplevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalTemplate::set_has_m_viplevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalTemplate::clear_has_m_viplevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalTemplate::clear_m_viplevel() {
  m_viplevel_ = 0;
  clear_has_m_viplevel();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_viplevel() const {
  return m_viplevel_;
}
inline void E_FestivalTemplate::set_m_viplevel(::google::protobuf::int32 value) {
  set_has_m_viplevel();
  m_viplevel_ = value;
}

// optional int32 m_rechange = 7;
inline bool E_FestivalTemplate::has_m_rechange() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalTemplate::set_has_m_rechange() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalTemplate::clear_has_m_rechange() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalTemplate::clear_m_rechange() {
  m_rechange_ = 0;
  clear_has_m_rechange();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_rechange() const {
  return m_rechange_;
}
inline void E_FestivalTemplate::set_m_rechange(::google::protobuf::int32 value) {
  set_has_m_rechange();
  m_rechange_ = value;
}

// optional int32 m_severType = 8;
inline bool E_FestivalTemplate::has_m_severtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_FestivalTemplate::set_has_m_severtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_FestivalTemplate::clear_has_m_severtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_FestivalTemplate::clear_m_severtype() {
  m_severtype_ = 0;
  clear_has_m_severtype();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_severtype() const {
  return m_severtype_;
}
inline void E_FestivalTemplate::set_m_severtype(::google::protobuf::int32 value) {
  set_has_m_severtype();
  m_severtype_ = value;
}

// optional string m_typeArg = 9;
inline bool E_FestivalTemplate::has_m_typearg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_FestivalTemplate::set_has_m_typearg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_FestivalTemplate::clear_has_m_typearg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_FestivalTemplate::clear_m_typearg() {
  if (m_typearg_ != &::google::protobuf::internal::kEmptyString) {
    m_typearg_->clear();
  }
  clear_has_m_typearg();
}
inline const ::std::string& E_FestivalTemplate::m_typearg() const {
  return *m_typearg_;
}
inline void E_FestivalTemplate::set_m_typearg(const ::std::string& value) {
  set_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    m_typearg_ = new ::std::string;
  }
  m_typearg_->assign(value);
}
inline void E_FestivalTemplate::set_m_typearg(const char* value) {
  set_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    m_typearg_ = new ::std::string;
  }
  m_typearg_->assign(value);
}
inline void E_FestivalTemplate::set_m_typearg(const char* value, size_t size) {
  set_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    m_typearg_ = new ::std::string;
  }
  m_typearg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalTemplate::mutable_m_typearg() {
  set_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    m_typearg_ = new ::std::string;
  }
  return m_typearg_;
}
inline ::std::string* E_FestivalTemplate::release_m_typearg() {
  clear_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_typearg_;
    m_typearg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalTemplate::set_allocated_m_typearg(::std::string* m_typearg) {
  if (m_typearg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typearg_;
  }
  if (m_typearg) {
    set_has_m_typearg();
    m_typearg_ = m_typearg;
  } else {
    clear_has_m_typearg();
    m_typearg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_periodType = 10;
inline bool E_FestivalTemplate::has_m_periodtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_FestivalTemplate::set_has_m_periodtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_FestivalTemplate::clear_has_m_periodtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_FestivalTemplate::clear_m_periodtype() {
  m_periodtype_ = 0;
  clear_has_m_periodtype();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_periodtype() const {
  return m_periodtype_;
}
inline void E_FestivalTemplate::set_m_periodtype(::google::protobuf::int32 value) {
  set_has_m_periodtype();
  m_periodtype_ = value;
}

// optional int32 m_period = 11;
inline bool E_FestivalTemplate::has_m_period() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_FestivalTemplate::set_has_m_period() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_FestivalTemplate::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_FestivalTemplate::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_period() const {
  return m_period_;
}
inline void E_FestivalTemplate::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_ifOpen = 12;
inline bool E_FestivalTemplate::has_m_ifopen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_FestivalTemplate::set_has_m_ifopen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_FestivalTemplate::clear_has_m_ifopen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_FestivalTemplate::clear_m_ifopen() {
  m_ifopen_ = 0;
  clear_has_m_ifopen();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_ifopen() const {
  return m_ifopen_;
}
inline void E_FestivalTemplate::set_m_ifopen(::google::protobuf::int32 value) {
  set_has_m_ifopen();
  m_ifopen_ = value;
}

// optional int32 m_activeID = 13;
inline bool E_FestivalTemplate::has_m_activeid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_FestivalTemplate::set_has_m_activeid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_FestivalTemplate::clear_has_m_activeid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_FestivalTemplate::clear_m_activeid() {
  m_activeid_ = 0;
  clear_has_m_activeid();
}
inline ::google::protobuf::int32 E_FestivalTemplate::m_activeid() const {
  return m_activeid_;
}
inline void E_FestivalTemplate::set_m_activeid(::google::protobuf::int32 value) {
  set_has_m_activeid();
  m_activeid_ = value;
}

// repeated string m_timeArg = 14;
inline int E_FestivalTemplate::m_timearg_size() const {
  return m_timearg_.size();
}
inline void E_FestivalTemplate::clear_m_timearg() {
  m_timearg_.Clear();
}
inline const ::std::string& E_FestivalTemplate::m_timearg(int index) const {
  return m_timearg_.Get(index);
}
inline ::std::string* E_FestivalTemplate::mutable_m_timearg(int index) {
  return m_timearg_.Mutable(index);
}
inline void E_FestivalTemplate::set_m_timearg(int index, const ::std::string& value) {
  m_timearg_.Mutable(index)->assign(value);
}
inline void E_FestivalTemplate::set_m_timearg(int index, const char* value) {
  m_timearg_.Mutable(index)->assign(value);
}
inline void E_FestivalTemplate::set_m_timearg(int index, const char* value, size_t size) {
  m_timearg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalTemplate::add_m_timearg() {
  return m_timearg_.Add();
}
inline void E_FestivalTemplate::add_m_timearg(const ::std::string& value) {
  m_timearg_.Add()->assign(value);
}
inline void E_FestivalTemplate::add_m_timearg(const char* value) {
  m_timearg_.Add()->assign(value);
}
inline void E_FestivalTemplate::add_m_timearg(const char* value, size_t size) {
  m_timearg_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
E_FestivalTemplate::m_timearg() const {
  return m_timearg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
E_FestivalTemplate::mutable_m_timearg() {
  return &m_timearg_;
}

// -------------------------------------------------------------------

// Sheet_FestivalTemplate

// repeated .proto_ff.E_FestivalTemplate E_FestivalTemplate_List = 1;
inline int Sheet_FestivalTemplate::e_festivaltemplate_list_size() const {
  return e_festivaltemplate_list_.size();
}
inline void Sheet_FestivalTemplate::clear_e_festivaltemplate_list() {
  e_festivaltemplate_list_.Clear();
}
inline const ::proto_ff::E_FestivalTemplate& Sheet_FestivalTemplate::e_festivaltemplate_list(int index) const {
  return e_festivaltemplate_list_.Get(index);
}
inline ::proto_ff::E_FestivalTemplate* Sheet_FestivalTemplate::mutable_e_festivaltemplate_list(int index) {
  return e_festivaltemplate_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalTemplate* Sheet_FestivalTemplate::add_e_festivaltemplate_list() {
  return e_festivaltemplate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalTemplate >&
Sheet_FestivalTemplate::e_festivaltemplate_list() const {
  return e_festivaltemplate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalTemplate >*
Sheet_FestivalTemplate::mutable_e_festivaltemplate_list() {
  return &e_festivaltemplate_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_rebatestoreExpendDesc

// optional int32 m_BoxID = 1;
inline bool E_FestivalMuban_rebatestoreExpendDesc::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_rebatestoreExpendDesc::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_rebatestoreExpendDesc::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_rebatestoreExpendDesc::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestoreExpendDesc::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_rebatestoreExpendDesc::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// optional int32 m_Value = 2;
inline bool E_FestivalMuban_rebatestoreExpendDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_rebatestoreExpendDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_rebatestoreExpendDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_rebatestoreExpendDesc::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestoreExpendDesc::m_value() const {
  return m_value_;
}
inline void E_FestivalMuban_rebatestoreExpendDesc::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// -------------------------------------------------------------------

// E_FestivalMuban_rebatestore

// optional int32 m_id = 1;
inline bool E_FestivalMuban_rebatestore::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_rebatestore::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_rebatestore::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_rebatestore::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_rebatestore::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_rebatestore::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_rebatestore::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_rebatestore::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_rebatestore::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_rebatestore::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_groupID = 3;
inline bool E_FestivalMuban_rebatestore::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_rebatestore::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_rebatestore::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_rebatestore::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_rebatestore::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// repeated .proto_ff.E_FestivalMuban_rebatestoreExpendDesc m_expend = 4;
inline int E_FestivalMuban_rebatestore::m_expend_size() const {
  return m_expend_.size();
}
inline void E_FestivalMuban_rebatestore::clear_m_expend() {
  m_expend_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc& E_FestivalMuban_rebatestore::m_expend(int index) const {
  return m_expend_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc* E_FestivalMuban_rebatestore::mutable_m_expend(int index) {
  return m_expend_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc* E_FestivalMuban_rebatestore::add_m_expend() {
  return m_expend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc >&
E_FestivalMuban_rebatestore::m_expend() const {
  return m_expend_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestoreExpendDesc >*
E_FestivalMuban_rebatestore::mutable_m_expend() {
  return &m_expend_;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_rebatestore

// repeated .proto_ff.E_FestivalMuban_rebatestore E_FestivalMuban_rebatestore_List = 1;
inline int Sheet_FestivalMuban_rebatestore::e_festivalmuban_rebatestore_list_size() const {
  return e_festivalmuban_rebatestore_list_.size();
}
inline void Sheet_FestivalMuban_rebatestore::clear_e_festivalmuban_rebatestore_list() {
  e_festivalmuban_rebatestore_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_rebatestore& Sheet_FestivalMuban_rebatestore::e_festivalmuban_rebatestore_list(int index) const {
  return e_festivalmuban_rebatestore_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_rebatestore* Sheet_FestivalMuban_rebatestore::mutable_e_festivalmuban_rebatestore_list(int index) {
  return e_festivalmuban_rebatestore_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_rebatestore* Sheet_FestivalMuban_rebatestore::add_e_festivalmuban_rebatestore_list() {
  return e_festivalmuban_rebatestore_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore >&
Sheet_FestivalMuban_rebatestore::e_festivalmuban_rebatestore_list() const {
  return e_festivalmuban_rebatestore_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore >*
Sheet_FestivalMuban_rebatestore::mutable_e_festivalmuban_rebatestore_list() {
  return &e_festivalmuban_rebatestore_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_rebatestore_mall

// optional int32 m_id = 1;
inline bool E_FestivalMuban_rebatestore_mall::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_rebatestore_mall::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_mallType = 3;
inline bool E_FestivalMuban_rebatestore_mall::has_m_malltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_malltype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_malltype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_malltype() {
  m_malltype_ = 0;
  clear_has_m_malltype();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_malltype() const {
  return m_malltype_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_malltype(::google::protobuf::int32 value) {
  set_has_m_malltype();
  m_malltype_ = value;
}

// optional int32 m_itemID = 4;
inline bool E_FestivalMuban_rebatestore_mall::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_itemid() {
  m_itemid_ = 0;
  clear_has_m_itemid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_itemid() const {
  return m_itemid_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_itemid(::google::protobuf::int32 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_price = 5;
inline bool E_FestivalMuban_rebatestore_mall::has_m_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_price() const {
  return m_price_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_originPrice = 6;
inline bool E_FestivalMuban_rebatestore_mall::has_m_originprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_originprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_originprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_originprice() {
  m_originprice_ = 0;
  clear_has_m_originprice();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_originprice() const {
  return m_originprice_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_originprice(::google::protobuf::int32 value) {
  set_has_m_originprice();
  m_originprice_ = value;
}

// optional int32 m_discount = 7;
inline bool E_FestivalMuban_rebatestore_mall::has_m_discount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_discount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_discount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_discount() {
  m_discount_ = 0;
  clear_has_m_discount();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_discount() const {
  return m_discount_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_discount(::google::protobuf::int32 value) {
  set_has_m_discount();
  m_discount_ = value;
}

// optional int32 m_daily = 8;
inline bool E_FestivalMuban_rebatestore_mall::has_m_daily() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_daily() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_daily() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_daily() {
  m_daily_ = 0;
  clear_has_m_daily();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_daily() const {
  return m_daily_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_daily(::google::protobuf::int32 value) {
  set_has_m_daily();
  m_daily_ = value;
}

// optional int32 m_buyAmount = 9;
inline bool E_FestivalMuban_rebatestore_mall::has_m_buyamount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_buyamount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_buyamount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_buyamount() {
  m_buyamount_ = 0;
  clear_has_m_buyamount();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_buyamount() const {
  return m_buyamount_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_buyamount(::google::protobuf::int32 value) {
  set_has_m_buyamount();
  m_buyamount_ = value;
}

// optional int32 m_functionUnlock = 10;
inline bool E_FestivalMuban_rebatestore_mall::has_m_functionunlock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_functionunlock() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_functionunlock() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_functionunlock() {
  m_functionunlock_ = 0;
  clear_has_m_functionunlock();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_functionunlock() const {
  return m_functionunlock_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_functionunlock(::google::protobuf::int32 value) {
  set_has_m_functionunlock();
  m_functionunlock_ = value;
}

// optional int32 m_openDay = 11;
inline bool E_FestivalMuban_rebatestore_mall::has_m_openday() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_openday() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_openday() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_openday() {
  m_openday_ = 0;
  clear_has_m_openday();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_openday() const {
  return m_openday_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_openday(::google::protobuf::int32 value) {
  set_has_m_openday();
  m_openday_ = value;
}

// optional int32 m_closeDay = 12;
inline bool E_FestivalMuban_rebatestore_mall::has_m_closeday() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_FestivalMuban_rebatestore_mall::set_has_m_closeday() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_has_m_closeday() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_FestivalMuban_rebatestore_mall::clear_m_closeday() {
  m_closeday_ = 0;
  clear_has_m_closeday();
}
inline ::google::protobuf::int32 E_FestivalMuban_rebatestore_mall::m_closeday() const {
  return m_closeday_;
}
inline void E_FestivalMuban_rebatestore_mall::set_m_closeday(::google::protobuf::int32 value) {
  set_has_m_closeday();
  m_closeday_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_rebatestore_mall

// repeated .proto_ff.E_FestivalMuban_rebatestore_mall E_FestivalMuban_rebatestore_mall_List = 1;
inline int Sheet_FestivalMuban_rebatestore_mall::e_festivalmuban_rebatestore_mall_list_size() const {
  return e_festivalmuban_rebatestore_mall_list_.size();
}
inline void Sheet_FestivalMuban_rebatestore_mall::clear_e_festivalmuban_rebatestore_mall_list() {
  e_festivalmuban_rebatestore_mall_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_rebatestore_mall& Sheet_FestivalMuban_rebatestore_mall::e_festivalmuban_rebatestore_mall_list(int index) const {
  return e_festivalmuban_rebatestore_mall_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_rebatestore_mall* Sheet_FestivalMuban_rebatestore_mall::mutable_e_festivalmuban_rebatestore_mall_list(int index) {
  return e_festivalmuban_rebatestore_mall_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_rebatestore_mall* Sheet_FestivalMuban_rebatestore_mall::add_e_festivalmuban_rebatestore_mall_list() {
  return e_festivalmuban_rebatestore_mall_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore_mall >&
Sheet_FestivalMuban_rebatestore_mall::e_festivalmuban_rebatestore_mall_list() const {
  return e_festivalmuban_rebatestore_mall_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rebatestore_mall >*
Sheet_FestivalMuban_rebatestore_mall::mutable_e_festivalmuban_rebatestore_mall_list() {
  return &e_festivalmuban_rebatestore_mall_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_contrecharge

// optional int32 m_id = 1;
inline bool E_FestivalMuban_contrecharge::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_contrecharge::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_contrecharge::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_contrecharge::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_contrecharge::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_contrecharge::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_contrecharge::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_contrecharge::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_contrecharge::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_contrecharge::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_totalGroup = 3;
inline bool E_FestivalMuban_contrecharge::has_m_totalgroup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_contrecharge::set_has_m_totalgroup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_contrecharge::clear_has_m_totalgroup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_contrecharge::clear_m_totalgroup() {
  m_totalgroup_ = 0;
  clear_has_m_totalgroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge::m_totalgroup() const {
  return m_totalgroup_;
}
inline void E_FestivalMuban_contrecharge::set_m_totalgroup(::google::protobuf::int32 value) {
  set_has_m_totalgroup();
  m_totalgroup_ = value;
}

// optional int32 m_dailyGroup = 4;
inline bool E_FestivalMuban_contrecharge::has_m_dailygroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_contrecharge::set_has_m_dailygroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_contrecharge::clear_has_m_dailygroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_contrecharge::clear_m_dailygroup() {
  m_dailygroup_ = 0;
  clear_has_m_dailygroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge::m_dailygroup() const {
  return m_dailygroup_;
}
inline void E_FestivalMuban_contrecharge::set_m_dailygroup(::google::protobuf::int32 value) {
  set_has_m_dailygroup();
  m_dailygroup_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_contrecharge

// repeated .proto_ff.E_FestivalMuban_contrecharge E_FestivalMuban_contrecharge_List = 1;
inline int Sheet_FestivalMuban_contrecharge::e_festivalmuban_contrecharge_list_size() const {
  return e_festivalmuban_contrecharge_list_.size();
}
inline void Sheet_FestivalMuban_contrecharge::clear_e_festivalmuban_contrecharge_list() {
  e_festivalmuban_contrecharge_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_contrecharge& Sheet_FestivalMuban_contrecharge::e_festivalmuban_contrecharge_list(int index) const {
  return e_festivalmuban_contrecharge_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_contrecharge* Sheet_FestivalMuban_contrecharge::mutable_e_festivalmuban_contrecharge_list(int index) {
  return e_festivalmuban_contrecharge_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_contrecharge* Sheet_FestivalMuban_contrecharge::add_e_festivalmuban_contrecharge_list() {
  return e_festivalmuban_contrecharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge >&
Sheet_FestivalMuban_contrecharge::e_festivalmuban_contrecharge_list() const {
  return e_festivalmuban_contrecharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge >*
Sheet_FestivalMuban_contrecharge::mutable_e_festivalmuban_contrecharge_list() {
  return &e_festivalmuban_contrecharge_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_contrecharge_totalTotalDesc

// optional int32 m_Box = 1;
inline bool E_FestivalMuban_contrecharge_totalTotalDesc::has_m_box() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_contrecharge_totalTotalDesc::set_has_m_box() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_contrecharge_totalTotalDesc::clear_has_m_box() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_contrecharge_totalTotalDesc::clear_m_box() {
  m_box_ = 0;
  clear_has_m_box();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_totalTotalDesc::m_box() const {
  return m_box_;
}
inline void E_FestivalMuban_contrecharge_totalTotalDesc::set_m_box(::google::protobuf::int32 value) {
  set_has_m_box();
  m_box_ = value;
}

// optional int32 m_Days = 2;
inline bool E_FestivalMuban_contrecharge_totalTotalDesc::has_m_days() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_contrecharge_totalTotalDesc::set_has_m_days() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_contrecharge_totalTotalDesc::clear_has_m_days() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_contrecharge_totalTotalDesc::clear_m_days() {
  m_days_ = 0;
  clear_has_m_days();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_totalTotalDesc::m_days() const {
  return m_days_;
}
inline void E_FestivalMuban_contrecharge_totalTotalDesc::set_m_days(::google::protobuf::int32 value) {
  set_has_m_days();
  m_days_ = value;
}

// -------------------------------------------------------------------

// E_FestivalMuban_contrecharge_total

// optional int32 m_id = 1;
inline bool E_FestivalMuban_contrecharge_total::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_contrecharge_total::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_contrecharge_total::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_contrecharge_total::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_total::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_contrecharge_total::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_contrecharge_total::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_contrecharge_total::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_contrecharge_total::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_contrecharge_total::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_total::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_contrecharge_total::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_Gear = 3;
inline bool E_FestivalMuban_contrecharge_total::has_m_gear() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_contrecharge_total::set_has_m_gear() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_contrecharge_total::clear_has_m_gear() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_contrecharge_total::clear_m_gear() {
  m_gear_ = 0;
  clear_has_m_gear();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_total::m_gear() const {
  return m_gear_;
}
inline void E_FestivalMuban_contrecharge_total::set_m_gear(::google::protobuf::int32 value) {
  set_has_m_gear();
  m_gear_ = value;
}

// optional int32 m_recharge = 4;
inline bool E_FestivalMuban_contrecharge_total::has_m_recharge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_contrecharge_total::set_has_m_recharge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_contrecharge_total::clear_has_m_recharge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_contrecharge_total::clear_m_recharge() {
  m_recharge_ = 0;
  clear_has_m_recharge();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_total::m_recharge() const {
  return m_recharge_;
}
inline void E_FestivalMuban_contrecharge_total::set_m_recharge(::google::protobuf::int32 value) {
  set_has_m_recharge();
  m_recharge_ = value;
}

// repeated .proto_ff.E_FestivalMuban_contrecharge_totalTotalDesc m_total = 5;
inline int E_FestivalMuban_contrecharge_total::m_total_size() const {
  return m_total_.size();
}
inline void E_FestivalMuban_contrecharge_total::clear_m_total() {
  m_total_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc& E_FestivalMuban_contrecharge_total::m_total(int index) const {
  return m_total_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc* E_FestivalMuban_contrecharge_total::mutable_m_total(int index) {
  return m_total_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc* E_FestivalMuban_contrecharge_total::add_m_total() {
  return m_total_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc >&
E_FestivalMuban_contrecharge_total::m_total() const {
  return m_total_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_totalTotalDesc >*
E_FestivalMuban_contrecharge_total::mutable_m_total() {
  return &m_total_;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_contrecharge_total

// repeated .proto_ff.E_FestivalMuban_contrecharge_total E_FestivalMuban_contrecharge_total_List = 1;
inline int Sheet_FestivalMuban_contrecharge_total::e_festivalmuban_contrecharge_total_list_size() const {
  return e_festivalmuban_contrecharge_total_list_.size();
}
inline void Sheet_FestivalMuban_contrecharge_total::clear_e_festivalmuban_contrecharge_total_list() {
  e_festivalmuban_contrecharge_total_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_contrecharge_total& Sheet_FestivalMuban_contrecharge_total::e_festivalmuban_contrecharge_total_list(int index) const {
  return e_festivalmuban_contrecharge_total_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_contrecharge_total* Sheet_FestivalMuban_contrecharge_total::mutable_e_festivalmuban_contrecharge_total_list(int index) {
  return e_festivalmuban_contrecharge_total_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_contrecharge_total* Sheet_FestivalMuban_contrecharge_total::add_e_festivalmuban_contrecharge_total_list() {
  return e_festivalmuban_contrecharge_total_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_total >&
Sheet_FestivalMuban_contrecharge_total::e_festivalmuban_contrecharge_total_list() const {
  return e_festivalmuban_contrecharge_total_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_total >*
Sheet_FestivalMuban_contrecharge_total::mutable_e_festivalmuban_contrecharge_total_list() {
  return &e_festivalmuban_contrecharge_total_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_contrecharge_day

// optional int32 m_id = 1;
inline bool E_FestivalMuban_contrecharge_day::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_contrecharge_day::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_contrecharge_day::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_contrecharge_day::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_day::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_contrecharge_day::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_contrecharge_day::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_contrecharge_day::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_contrecharge_day::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_contrecharge_day::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_day::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_contrecharge_day::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_day = 3;
inline bool E_FestivalMuban_contrecharge_day::has_m_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_contrecharge_day::set_has_m_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_contrecharge_day::clear_has_m_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_contrecharge_day::clear_m_day() {
  m_day_ = 0;
  clear_has_m_day();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_day::m_day() const {
  return m_day_;
}
inline void E_FestivalMuban_contrecharge_day::set_m_day(::google::protobuf::int32 value) {
  set_has_m_day();
  m_day_ = value;
}

// optional int32 m_gear = 4;
inline bool E_FestivalMuban_contrecharge_day::has_m_gear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_contrecharge_day::set_has_m_gear() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_contrecharge_day::clear_has_m_gear() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_contrecharge_day::clear_m_gear() {
  m_gear_ = 0;
  clear_has_m_gear();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_day::m_gear() const {
  return m_gear_;
}
inline void E_FestivalMuban_contrecharge_day::set_m_gear(::google::protobuf::int32 value) {
  set_has_m_gear();
  m_gear_ = value;
}

// optional int32 m_box = 5;
inline bool E_FestivalMuban_contrecharge_day::has_m_box() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_contrecharge_day::set_has_m_box() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_contrecharge_day::clear_has_m_box() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_contrecharge_day::clear_m_box() {
  m_box_ = 0;
  clear_has_m_box();
}
inline ::google::protobuf::int32 E_FestivalMuban_contrecharge_day::m_box() const {
  return m_box_;
}
inline void E_FestivalMuban_contrecharge_day::set_m_box(::google::protobuf::int32 value) {
  set_has_m_box();
  m_box_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_contrecharge_day

// repeated .proto_ff.E_FestivalMuban_contrecharge_day E_FestivalMuban_contrecharge_day_List = 1;
inline int Sheet_FestivalMuban_contrecharge_day::e_festivalmuban_contrecharge_day_list_size() const {
  return e_festivalmuban_contrecharge_day_list_.size();
}
inline void Sheet_FestivalMuban_contrecharge_day::clear_e_festivalmuban_contrecharge_day_list() {
  e_festivalmuban_contrecharge_day_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_contrecharge_day& Sheet_FestivalMuban_contrecharge_day::e_festivalmuban_contrecharge_day_list(int index) const {
  return e_festivalmuban_contrecharge_day_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_contrecharge_day* Sheet_FestivalMuban_contrecharge_day::mutable_e_festivalmuban_contrecharge_day_list(int index) {
  return e_festivalmuban_contrecharge_day_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_contrecharge_day* Sheet_FestivalMuban_contrecharge_day::add_e_festivalmuban_contrecharge_day_list() {
  return e_festivalmuban_contrecharge_day_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_day >&
Sheet_FestivalMuban_contrecharge_day::e_festivalmuban_contrecharge_day_list() const {
  return e_festivalmuban_contrecharge_day_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_contrecharge_day >*
Sheet_FestivalMuban_contrecharge_day::mutable_e_festivalmuban_contrecharge_day_list() {
  return &e_festivalmuban_contrecharge_day_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_login

// optional int32 m_id = 1;
inline bool E_FestivalMuban_login::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_login::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_login::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_login::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_login::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_login::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_login::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_login::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_login::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_login::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_login::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_login::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_loginDay = 3;
inline bool E_FestivalMuban_login::has_m_loginday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_login::set_has_m_loginday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_login::clear_has_m_loginday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_login::clear_m_loginday() {
  m_loginday_ = 0;
  clear_has_m_loginday();
}
inline ::google::protobuf::int32 E_FestivalMuban_login::m_loginday() const {
  return m_loginday_;
}
inline void E_FestivalMuban_login::set_m_loginday(::google::protobuf::int32 value) {
  set_has_m_loginday();
  m_loginday_ = value;
}

// optional int32 m_boxid = 4;
inline bool E_FestivalMuban_login::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_login::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_login::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_login::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_login::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_login::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_login

// repeated .proto_ff.E_FestivalMuban_login E_FestivalMuban_login_List = 1;
inline int Sheet_FestivalMuban_login::e_festivalmuban_login_list_size() const {
  return e_festivalmuban_login_list_.size();
}
inline void Sheet_FestivalMuban_login::clear_e_festivalmuban_login_list() {
  e_festivalmuban_login_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_login& Sheet_FestivalMuban_login::e_festivalmuban_login_list(int index) const {
  return e_festivalmuban_login_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_login* Sheet_FestivalMuban_login::mutable_e_festivalmuban_login_list(int index) {
  return e_festivalmuban_login_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_login* Sheet_FestivalMuban_login::add_e_festivalmuban_login_list() {
  return e_festivalmuban_login_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_login >&
Sheet_FestivalMuban_login::e_festivalmuban_login_list() const {
  return e_festivalmuban_login_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_login >*
Sheet_FestivalMuban_login::mutable_e_festivalmuban_login_list() {
  return &e_festivalmuban_login_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_firstrecharge

// optional int32 m_id = 1;
inline bool E_FestivalMuban_firstrecharge::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_firstrecharge::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_firstrecharge::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_firstrecharge::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_firstrecharge::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_firstrecharge::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_firstrecharge::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_firstrecharge::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_firstrecharge::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_firstrecharge::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_firstrecharge::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_firstrecharge::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_day = 3;
inline bool E_FestivalMuban_firstrecharge::has_m_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_firstrecharge::set_has_m_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_firstrecharge::clear_has_m_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_firstrecharge::clear_m_day() {
  m_day_ = 0;
  clear_has_m_day();
}
inline ::google::protobuf::int32 E_FestivalMuban_firstrecharge::m_day() const {
  return m_day_;
}
inline void E_FestivalMuban_firstrecharge::set_m_day(::google::protobuf::int32 value) {
  set_has_m_day();
  m_day_ = value;
}

// optional int32 m_gear = 4;
inline bool E_FestivalMuban_firstrecharge::has_m_gear() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_firstrecharge::set_has_m_gear() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_firstrecharge::clear_has_m_gear() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_firstrecharge::clear_m_gear() {
  m_gear_ = 0;
  clear_has_m_gear();
}
inline ::google::protobuf::int32 E_FestivalMuban_firstrecharge::m_gear() const {
  return m_gear_;
}
inline void E_FestivalMuban_firstrecharge::set_m_gear(::google::protobuf::int32 value) {
  set_has_m_gear();
  m_gear_ = value;
}

// optional int32 m_recharge = 5;
inline bool E_FestivalMuban_firstrecharge::has_m_recharge() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_firstrecharge::set_has_m_recharge() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_firstrecharge::clear_has_m_recharge() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_firstrecharge::clear_m_recharge() {
  m_recharge_ = 0;
  clear_has_m_recharge();
}
inline ::google::protobuf::int32 E_FestivalMuban_firstrecharge::m_recharge() const {
  return m_recharge_;
}
inline void E_FestivalMuban_firstrecharge::set_m_recharge(::google::protobuf::int32 value) {
  set_has_m_recharge();
  m_recharge_ = value;
}

// optional int32 m_boxid = 6;
inline bool E_FestivalMuban_firstrecharge::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_firstrecharge::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_firstrecharge::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_firstrecharge::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_firstrecharge::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_firstrecharge::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_firstrecharge

// repeated .proto_ff.E_FestivalMuban_firstrecharge E_FestivalMuban_firstrecharge_List = 1;
inline int Sheet_FestivalMuban_firstrecharge::e_festivalmuban_firstrecharge_list_size() const {
  return e_festivalmuban_firstrecharge_list_.size();
}
inline void Sheet_FestivalMuban_firstrecharge::clear_e_festivalmuban_firstrecharge_list() {
  e_festivalmuban_firstrecharge_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_firstrecharge& Sheet_FestivalMuban_firstrecharge::e_festivalmuban_firstrecharge_list(int index) const {
  return e_festivalmuban_firstrecharge_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_firstrecharge* Sheet_FestivalMuban_firstrecharge::mutable_e_festivalmuban_firstrecharge_list(int index) {
  return e_festivalmuban_firstrecharge_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_firstrecharge* Sheet_FestivalMuban_firstrecharge::add_e_festivalmuban_firstrecharge_list() {
  return e_festivalmuban_firstrecharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_firstrecharge >&
Sheet_FestivalMuban_firstrecharge::e_festivalmuban_firstrecharge_list() const {
  return e_festivalmuban_firstrecharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_firstrecharge >*
Sheet_FestivalMuban_firstrecharge::mutable_e_festivalmuban_firstrecharge_list() {
  return &e_festivalmuban_firstrecharge_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_love

// optional int32 m_id = 1;
inline bool E_FestivalMuban_love::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_love::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_love::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_love::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_love::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_love::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_love::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_love::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_love::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_love::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_love::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_love::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_taskPointID = 3;
inline bool E_FestivalMuban_love::has_m_taskpointid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_love::set_has_m_taskpointid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_love::clear_has_m_taskpointid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_love::clear_m_taskpointid() {
  m_taskpointid_ = 0;
  clear_has_m_taskpointid();
}
inline ::google::protobuf::int32 E_FestivalMuban_love::m_taskpointid() const {
  return m_taskpointid_;
}
inline void E_FestivalMuban_love::set_m_taskpointid(::google::protobuf::int32 value) {
  set_has_m_taskpointid();
  m_taskpointid_ = value;
}

// optional int32 m_rankGroup = 4;
inline bool E_FestivalMuban_love::has_m_rankgroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_love::set_has_m_rankgroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_love::clear_has_m_rankgroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_love::clear_m_rankgroup() {
  m_rankgroup_ = 0;
  clear_has_m_rankgroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_love::m_rankgroup() const {
  return m_rankgroup_;
}
inline void E_FestivalMuban_love::set_m_rankgroup(::google::protobuf::int32 value) {
  set_has_m_rankgroup();
  m_rankgroup_ = value;
}

// optional int32 m_taskGroup = 5;
inline bool E_FestivalMuban_love::has_m_taskgroup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_love::set_has_m_taskgroup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_love::clear_has_m_taskgroup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_love::clear_m_taskgroup() {
  m_taskgroup_ = 0;
  clear_has_m_taskgroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_love::m_taskgroup() const {
  return m_taskgroup_;
}
inline void E_FestivalMuban_love::set_m_taskgroup(::google::protobuf::int32 value) {
  set_has_m_taskgroup();
  m_taskgroup_ = value;
}

// optional int32 m_taskRewardGroup = 6;
inline bool E_FestivalMuban_love::has_m_taskrewardgroup() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_love::set_has_m_taskrewardgroup() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_love::clear_has_m_taskrewardgroup() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_love::clear_m_taskrewardgroup() {
  m_taskrewardgroup_ = 0;
  clear_has_m_taskrewardgroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_love::m_taskrewardgroup() const {
  return m_taskrewardgroup_;
}
inline void E_FestivalMuban_love::set_m_taskrewardgroup(::google::protobuf::int32 value) {
  set_has_m_taskrewardgroup();
  m_taskrewardgroup_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_love

// repeated .proto_ff.E_FestivalMuban_love E_FestivalMuban_love_List = 1;
inline int Sheet_FestivalMuban_love::e_festivalmuban_love_list_size() const {
  return e_festivalmuban_love_list_.size();
}
inline void Sheet_FestivalMuban_love::clear_e_festivalmuban_love_list() {
  e_festivalmuban_love_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_love& Sheet_FestivalMuban_love::e_festivalmuban_love_list(int index) const {
  return e_festivalmuban_love_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_love* Sheet_FestivalMuban_love::mutable_e_festivalmuban_love_list(int index) {
  return e_festivalmuban_love_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_love* Sheet_FestivalMuban_love::add_e_festivalmuban_love_list() {
  return e_festivalmuban_love_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love >&
Sheet_FestivalMuban_love::e_festivalmuban_love_list() const {
  return e_festivalmuban_love_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love >*
Sheet_FestivalMuban_love::mutable_e_festivalmuban_love_list() {
  return &e_festivalmuban_love_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_love_rank

// optional int32 m_id = 1;
inline bool E_FestivalMuban_love_rank::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_love_rank::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_love_rank::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_love_rank::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_love_rank::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupid = 2;
inline bool E_FestivalMuban_love_rank::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_love_rank::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_love_rank::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_love_rank::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_love_rank::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_rewardShow = 3;
inline bool E_FestivalMuban_love_rank::has_m_rewardshow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_love_rank::set_has_m_rewardshow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_love_rank::clear_has_m_rewardshow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_love_rank::clear_m_rewardshow() {
  m_rewardshow_ = 0;
  clear_has_m_rewardshow();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank::m_rewardshow() const {
  return m_rewardshow_;
}
inline void E_FestivalMuban_love_rank::set_m_rewardshow(::google::protobuf::int32 value) {
  set_has_m_rewardshow();
  m_rewardshow_ = value;
}

// optional int32 m_dataGroupID = 4;
inline bool E_FestivalMuban_love_rank::has_m_datagroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_love_rank::set_has_m_datagroupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_love_rank::clear_has_m_datagroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_love_rank::clear_m_datagroupid() {
  m_datagroupid_ = 0;
  clear_has_m_datagroupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank::m_datagroupid() const {
  return m_datagroupid_;
}
inline void E_FestivalMuban_love_rank::set_m_datagroupid(::google::protobuf::int32 value) {
  set_has_m_datagroupid();
  m_datagroupid_ = value;
}

// optional int32 m_rankType = 5;
inline bool E_FestivalMuban_love_rank::has_m_ranktype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_love_rank::set_has_m_ranktype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_love_rank::clear_has_m_ranktype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_love_rank::clear_m_ranktype() {
  m_ranktype_ = 0;
  clear_has_m_ranktype();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank::m_ranktype() const {
  return m_ranktype_;
}
inline void E_FestivalMuban_love_rank::set_m_ranktype(::google::protobuf::int32 value) {
  set_has_m_ranktype();
  m_ranktype_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_love_rank

// repeated .proto_ff.E_FestivalMuban_love_rank E_FestivalMuban_love_rank_List = 1;
inline int Sheet_FestivalMuban_love_rank::e_festivalmuban_love_rank_list_size() const {
  return e_festivalmuban_love_rank_list_.size();
}
inline void Sheet_FestivalMuban_love_rank::clear_e_festivalmuban_love_rank_list() {
  e_festivalmuban_love_rank_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_love_rank& Sheet_FestivalMuban_love_rank::e_festivalmuban_love_rank_list(int index) const {
  return e_festivalmuban_love_rank_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_love_rank* Sheet_FestivalMuban_love_rank::mutable_e_festivalmuban_love_rank_list(int index) {
  return e_festivalmuban_love_rank_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_love_rank* Sheet_FestivalMuban_love_rank::add_e_festivalmuban_love_rank_list() {
  return e_festivalmuban_love_rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank >&
Sheet_FestivalMuban_love_rank::e_festivalmuban_love_rank_list() const {
  return e_festivalmuban_love_rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank >*
Sheet_FestivalMuban_love_rank::mutable_e_festivalmuban_love_rank_list() {
  return &e_festivalmuban_love_rank_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_love_rank_data

// optional int32 m_id = 1;
inline bool E_FestivalMuban_love_rank_data::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_love_rank_data::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_love_rank_data::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_love_rank_data::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank_data::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_love_rank_data::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_love_rank_data::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_love_rank_data::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_love_rank_data::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_love_rank_data::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank_data::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_love_rank_data::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_maxRank = 3;
inline bool E_FestivalMuban_love_rank_data::has_m_maxrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_love_rank_data::set_has_m_maxrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_love_rank_data::clear_has_m_maxrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_love_rank_data::clear_m_maxrank() {
  m_maxrank_ = 0;
  clear_has_m_maxrank();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank_data::m_maxrank() const {
  return m_maxrank_;
}
inline void E_FestivalMuban_love_rank_data::set_m_maxrank(::google::protobuf::int32 value) {
  set_has_m_maxrank();
  m_maxrank_ = value;
}

// optional int32 m_minRank = 4;
inline bool E_FestivalMuban_love_rank_data::has_m_minrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_love_rank_data::set_has_m_minrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_love_rank_data::clear_has_m_minrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_love_rank_data::clear_m_minrank() {
  m_minrank_ = 0;
  clear_has_m_minrank();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank_data::m_minrank() const {
  return m_minrank_;
}
inline void E_FestivalMuban_love_rank_data::set_m_minrank(::google::protobuf::int32 value) {
  set_has_m_minrank();
  m_minrank_ = value;
}

// optional int32 m_rankValue = 5;
inline bool E_FestivalMuban_love_rank_data::has_m_rankvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_love_rank_data::set_has_m_rankvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_love_rank_data::clear_has_m_rankvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_love_rank_data::clear_m_rankvalue() {
  m_rankvalue_ = 0;
  clear_has_m_rankvalue();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank_data::m_rankvalue() const {
  return m_rankvalue_;
}
inline void E_FestivalMuban_love_rank_data::set_m_rankvalue(::google::protobuf::int32 value) {
  set_has_m_rankvalue();
  m_rankvalue_ = value;
}

// optional int32 m_boxID = 6;
inline bool E_FestivalMuban_love_rank_data::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_love_rank_data::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_love_rank_data::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_love_rank_data::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_rank_data::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_love_rank_data::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_love_rank_data

// repeated .proto_ff.E_FestivalMuban_love_rank_data E_FestivalMuban_love_rank_data_List = 1;
inline int Sheet_FestivalMuban_love_rank_data::e_festivalmuban_love_rank_data_list_size() const {
  return e_festivalmuban_love_rank_data_list_.size();
}
inline void Sheet_FestivalMuban_love_rank_data::clear_e_festivalmuban_love_rank_data_list() {
  e_festivalmuban_love_rank_data_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_love_rank_data& Sheet_FestivalMuban_love_rank_data::e_festivalmuban_love_rank_data_list(int index) const {
  return e_festivalmuban_love_rank_data_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_love_rank_data* Sheet_FestivalMuban_love_rank_data::mutable_e_festivalmuban_love_rank_data_list(int index) {
  return e_festivalmuban_love_rank_data_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_love_rank_data* Sheet_FestivalMuban_love_rank_data::add_e_festivalmuban_love_rank_data_list() {
  return e_festivalmuban_love_rank_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank_data >&
Sheet_FestivalMuban_love_rank_data::e_festivalmuban_love_rank_data_list() const {
  return e_festivalmuban_love_rank_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_rank_data >*
Sheet_FestivalMuban_love_rank_data::mutable_e_festivalmuban_love_rank_data_list() {
  return &e_festivalmuban_love_rank_data_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_love_task

// optional int32 m_id = 1;
inline bool E_FestivalMuban_love_task::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_love_task::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_love_task::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_love_task::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_task::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_love_task::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_love_task::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_love_task::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_love_task::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_love_task::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_task::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_love_task::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_eventType = 3;
inline bool E_FestivalMuban_love_task::has_m_eventtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_love_task::set_has_m_eventtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_love_task::clear_has_m_eventtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_love_task::clear_m_eventtype() {
  m_eventtype_ = 0;
  clear_has_m_eventtype();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_task::m_eventtype() const {
  return m_eventtype_;
}
inline void E_FestivalMuban_love_task::set_m_eventtype(::google::protobuf::int32 value) {
  set_has_m_eventtype();
  m_eventtype_ = value;
}

// optional int32 m_reachPrice = 4;
inline bool E_FestivalMuban_love_task::has_m_reachprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_love_task::set_has_m_reachprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_love_task::clear_has_m_reachprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_love_task::clear_m_reachprice() {
  m_reachprice_ = 0;
  clear_has_m_reachprice();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_task::m_reachprice() const {
  return m_reachprice_;
}
inline void E_FestivalMuban_love_task::set_m_reachprice(::google::protobuf::int32 value) {
  set_has_m_reachprice();
  m_reachprice_ = value;
}

// optional int32 m_link = 5;
inline bool E_FestivalMuban_love_task::has_m_link() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_love_task::set_has_m_link() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_love_task::clear_has_m_link() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_love_task::clear_m_link() {
  m_link_ = 0;
  clear_has_m_link();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_task::m_link() const {
  return m_link_;
}
inline void E_FestivalMuban_love_task::set_m_link(::google::protobuf::int32 value) {
  set_has_m_link();
  m_link_ = value;
}

// optional int32 m_rewardTimes = 6;
inline bool E_FestivalMuban_love_task::has_m_rewardtimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_love_task::set_has_m_rewardtimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_love_task::clear_has_m_rewardtimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_love_task::clear_m_rewardtimes() {
  m_rewardtimes_ = 0;
  clear_has_m_rewardtimes();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_task::m_rewardtimes() const {
  return m_rewardtimes_;
}
inline void E_FestivalMuban_love_task::set_m_rewardtimes(::google::protobuf::int32 value) {
  set_has_m_rewardtimes();
  m_rewardtimes_ = value;
}

// optional int32 m_reward = 7;
inline bool E_FestivalMuban_love_task::has_m_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_love_task::set_has_m_reward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_love_task::clear_has_m_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_love_task::clear_m_reward() {
  m_reward_ = 0;
  clear_has_m_reward();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_task::m_reward() const {
  return m_reward_;
}
inline void E_FestivalMuban_love_task::set_m_reward(::google::protobuf::int32 value) {
  set_has_m_reward();
  m_reward_ = value;
}

// repeated int32 m_param = 8;
inline int E_FestivalMuban_love_task::m_param_size() const {
  return m_param_.size();
}
inline void E_FestivalMuban_love_task::clear_m_param() {
  m_param_.Clear();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_task::m_param(int index) const {
  return m_param_.Get(index);
}
inline void E_FestivalMuban_love_task::set_m_param(int index, ::google::protobuf::int32 value) {
  m_param_.Set(index, value);
}
inline void E_FestivalMuban_love_task::add_m_param(::google::protobuf::int32 value) {
  m_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_FestivalMuban_love_task::m_param() const {
  return m_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_FestivalMuban_love_task::mutable_m_param() {
  return &m_param_;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_love_task

// repeated .proto_ff.E_FestivalMuban_love_task E_FestivalMuban_love_task_List = 1;
inline int Sheet_FestivalMuban_love_task::e_festivalmuban_love_task_list_size() const {
  return e_festivalmuban_love_task_list_.size();
}
inline void Sheet_FestivalMuban_love_task::clear_e_festivalmuban_love_task_list() {
  e_festivalmuban_love_task_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_love_task& Sheet_FestivalMuban_love_task::e_festivalmuban_love_task_list(int index) const {
  return e_festivalmuban_love_task_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_love_task* Sheet_FestivalMuban_love_task::mutable_e_festivalmuban_love_task_list(int index) {
  return e_festivalmuban_love_task_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_love_task* Sheet_FestivalMuban_love_task::add_e_festivalmuban_love_task_list() {
  return e_festivalmuban_love_task_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_task >&
Sheet_FestivalMuban_love_task::e_festivalmuban_love_task_list() const {
  return e_festivalmuban_love_task_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_task >*
Sheet_FestivalMuban_love_task::mutable_e_festivalmuban_love_task_list() {
  return &e_festivalmuban_love_task_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_love_taskreward

// optional int32 m_id = 1;
inline bool E_FestivalMuban_love_taskreward::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_love_taskreward::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_love_taskreward::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_love_taskreward::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_taskreward::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_love_taskreward::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_love_taskreward::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_love_taskreward::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_love_taskreward::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_love_taskreward::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_taskreward::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_love_taskreward::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_value = 3;
inline bool E_FestivalMuban_love_taskreward::has_m_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_love_taskreward::set_has_m_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_love_taskreward::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_love_taskreward::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_taskreward::m_value() const {
  return m_value_;
}
inline void E_FestivalMuban_love_taskreward::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_box = 4;
inline bool E_FestivalMuban_love_taskreward::has_m_box() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_love_taskreward::set_has_m_box() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_love_taskreward::clear_has_m_box() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_love_taskreward::clear_m_box() {
  m_box_ = 0;
  clear_has_m_box();
}
inline ::google::protobuf::int32 E_FestivalMuban_love_taskreward::m_box() const {
  return m_box_;
}
inline void E_FestivalMuban_love_taskreward::set_m_box(::google::protobuf::int32 value) {
  set_has_m_box();
  m_box_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_love_taskreward

// repeated .proto_ff.E_FestivalMuban_love_taskreward E_FestivalMuban_love_taskreward_List = 1;
inline int Sheet_FestivalMuban_love_taskreward::e_festivalmuban_love_taskreward_list_size() const {
  return e_festivalmuban_love_taskreward_list_.size();
}
inline void Sheet_FestivalMuban_love_taskreward::clear_e_festivalmuban_love_taskreward_list() {
  e_festivalmuban_love_taskreward_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_love_taskreward& Sheet_FestivalMuban_love_taskreward::e_festivalmuban_love_taskreward_list(int index) const {
  return e_festivalmuban_love_taskreward_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_love_taskreward* Sheet_FestivalMuban_love_taskreward::mutable_e_festivalmuban_love_taskreward_list(int index) {
  return e_festivalmuban_love_taskreward_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_love_taskreward* Sheet_FestivalMuban_love_taskreward::add_e_festivalmuban_love_taskreward_list() {
  return e_festivalmuban_love_taskreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_taskreward >&
Sheet_FestivalMuban_love_taskreward::e_festivalmuban_love_taskreward_list() const {
  return e_festivalmuban_love_taskreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_love_taskreward >*
Sheet_FestivalMuban_love_taskreward::mutable_e_festivalmuban_love_taskreward_list() {
  return &e_festivalmuban_love_taskreward_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_addbox

// optional int32 m_id = 1;
inline bool E_FestivalMuban_addbox::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_addbox::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_addbox::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_addbox::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_addbox::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_addbox::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_addbox::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_addbox::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_addbox::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_addbox::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_addbox::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_addbox::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_lvLimit = 3;
inline bool E_FestivalMuban_addbox::has_m_lvlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_addbox::set_has_m_lvlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_addbox::clear_has_m_lvlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_addbox::clear_m_lvlimit() {
  m_lvlimit_ = 0;
  clear_has_m_lvlimit();
}
inline ::google::protobuf::int32 E_FestivalMuban_addbox::m_lvlimit() const {
  return m_lvlimit_;
}
inline void E_FestivalMuban_addbox::set_m_lvlimit(::google::protobuf::int32 value) {
  set_has_m_lvlimit();
  m_lvlimit_ = value;
}

// optional int32 m_type = 4;
inline bool E_FestivalMuban_addbox::has_m_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_addbox::set_has_m_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_addbox::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_addbox::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_FestivalMuban_addbox::m_type() const {
  return m_type_;
}
inline void E_FestivalMuban_addbox::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional string m_arg = 5;
inline bool E_FestivalMuban_addbox::has_m_arg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_addbox::set_has_m_arg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_addbox::clear_has_m_arg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_addbox::clear_m_arg() {
  if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
    m_arg_->clear();
  }
  clear_has_m_arg();
}
inline const ::std::string& E_FestivalMuban_addbox::m_arg() const {
  return *m_arg_;
}
inline void E_FestivalMuban_addbox::set_m_arg(const ::std::string& value) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(value);
}
inline void E_FestivalMuban_addbox::set_m_arg(const char* value) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(value);
}
inline void E_FestivalMuban_addbox::set_m_arg(const char* value, size_t size) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_addbox::mutable_m_arg() {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  return m_arg_;
}
inline ::std::string* E_FestivalMuban_addbox::release_m_arg() {
  clear_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_arg_;
    m_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_addbox::set_allocated_m_arg(::std::string* m_arg) {
  if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_arg_;
  }
  if (m_arg) {
    set_has_m_arg();
    m_arg_ = m_arg;
  } else {
    clear_has_m_arg();
    m_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_addBoxId = 6;
inline bool E_FestivalMuban_addbox::has_m_addboxid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_addbox::set_has_m_addboxid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_addbox::clear_has_m_addboxid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_addbox::clear_m_addboxid() {
  m_addboxid_ = 0;
  clear_has_m_addboxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_addbox::m_addboxid() const {
  return m_addboxid_;
}
inline void E_FestivalMuban_addbox::set_m_addboxid(::google::protobuf::int32 value) {
  set_has_m_addboxid();
  m_addboxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_addbox

// repeated .proto_ff.E_FestivalMuban_addbox E_FestivalMuban_addbox_List = 1;
inline int Sheet_FestivalMuban_addbox::e_festivalmuban_addbox_list_size() const {
  return e_festivalmuban_addbox_list_.size();
}
inline void Sheet_FestivalMuban_addbox::clear_e_festivalmuban_addbox_list() {
  e_festivalmuban_addbox_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_addbox& Sheet_FestivalMuban_addbox::e_festivalmuban_addbox_list(int index) const {
  return e_festivalmuban_addbox_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_addbox* Sheet_FestivalMuban_addbox::mutable_e_festivalmuban_addbox_list(int index) {
  return e_festivalmuban_addbox_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_addbox* Sheet_FestivalMuban_addbox::add_e_festivalmuban_addbox_list() {
  return e_festivalmuban_addbox_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_addbox >&
Sheet_FestivalMuban_addbox::e_festivalmuban_addbox_list() const {
  return e_festivalmuban_addbox_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_addbox >*
Sheet_FestivalMuban_addbox::mutable_e_festivalmuban_addbox_list() {
  return &e_festivalmuban_addbox_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_doublebox

// optional int32 m_id = 1;
inline bool E_FestivalMuban_doublebox::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_doublebox::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_doublebox::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_doublebox::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_doublebox::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_doublebox::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_doublebox::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_doublebox::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_doublebox::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_doublebox::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_doublebox::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_doublebox::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_type = 3;
inline bool E_FestivalMuban_doublebox::has_m_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_doublebox::set_has_m_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_doublebox::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_doublebox::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_FestivalMuban_doublebox::m_type() const {
  return m_type_;
}
inline void E_FestivalMuban_doublebox::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional string m_arg = 4;
inline bool E_FestivalMuban_doublebox::has_m_arg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_doublebox::set_has_m_arg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_doublebox::clear_has_m_arg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_doublebox::clear_m_arg() {
  if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
    m_arg_->clear();
  }
  clear_has_m_arg();
}
inline const ::std::string& E_FestivalMuban_doublebox::m_arg() const {
  return *m_arg_;
}
inline void E_FestivalMuban_doublebox::set_m_arg(const ::std::string& value) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(value);
}
inline void E_FestivalMuban_doublebox::set_m_arg(const char* value) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(value);
}
inline void E_FestivalMuban_doublebox::set_m_arg(const char* value, size_t size) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_doublebox::mutable_m_arg() {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  return m_arg_;
}
inline ::std::string* E_FestivalMuban_doublebox::release_m_arg() {
  clear_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_arg_;
    m_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_doublebox::set_allocated_m_arg(::std::string* m_arg) {
  if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_arg_;
  }
  if (m_arg) {
    set_has_m_arg();
    m_arg_ = m_arg;
  } else {
    clear_has_m_arg();
    m_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_multiply = 5;
inline bool E_FestivalMuban_doublebox::has_m_multiply() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_doublebox::set_has_m_multiply() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_doublebox::clear_has_m_multiply() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_doublebox::clear_m_multiply() {
  m_multiply_ = 0;
  clear_has_m_multiply();
}
inline ::google::protobuf::int32 E_FestivalMuban_doublebox::m_multiply() const {
  return m_multiply_;
}
inline void E_FestivalMuban_doublebox::set_m_multiply(::google::protobuf::int32 value) {
  set_has_m_multiply();
  m_multiply_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_doublebox

// repeated .proto_ff.E_FestivalMuban_doublebox E_FestivalMuban_doublebox_List = 1;
inline int Sheet_FestivalMuban_doublebox::e_festivalmuban_doublebox_list_size() const {
  return e_festivalmuban_doublebox_list_.size();
}
inline void Sheet_FestivalMuban_doublebox::clear_e_festivalmuban_doublebox_list() {
  e_festivalmuban_doublebox_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_doublebox& Sheet_FestivalMuban_doublebox::e_festivalmuban_doublebox_list(int index) const {
  return e_festivalmuban_doublebox_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_doublebox* Sheet_FestivalMuban_doublebox::mutable_e_festivalmuban_doublebox_list(int index) {
  return e_festivalmuban_doublebox_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_doublebox* Sheet_FestivalMuban_doublebox::add_e_festivalmuban_doublebox_list() {
  return e_festivalmuban_doublebox_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_doublebox >&
Sheet_FestivalMuban_doublebox::e_festivalmuban_doublebox_list() const {
  return e_festivalmuban_doublebox_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_doublebox >*
Sheet_FestivalMuban_doublebox::mutable_e_festivalmuban_doublebox_list() {
  return &e_festivalmuban_doublebox_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_bossfristkill

// optional int32 m_id = 1;
inline bool E_FestivalMuban_bossfristkill::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_bossfristkill::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_bossfristkill::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_bossfristkill::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_bossfristkill::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_bossfristkill::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_bossfristkill::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_bossfristkill::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_bossfristkill::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_bossfristkill::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_bossfristkill::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_bossfristkill::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_type = 3;
inline bool E_FestivalMuban_bossfristkill::has_m_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_bossfristkill::set_has_m_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_bossfristkill::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_bossfristkill::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_FestivalMuban_bossfristkill::m_type() const {
  return m_type_;
}
inline void E_FestivalMuban_bossfristkill::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_bossid = 4;
inline bool E_FestivalMuban_bossfristkill::has_m_bossid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_bossfristkill::set_has_m_bossid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_bossfristkill::clear_has_m_bossid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_bossfristkill::clear_m_bossid() {
  m_bossid_ = 0;
  clear_has_m_bossid();
}
inline ::google::protobuf::int32 E_FestivalMuban_bossfristkill::m_bossid() const {
  return m_bossid_;
}
inline void E_FestivalMuban_bossfristkill::set_m_bossid(::google::protobuf::int32 value) {
  set_has_m_bossid();
  m_bossid_ = value;
}

// optional int32 m_fristKillReward = 5;
inline bool E_FestivalMuban_bossfristkill::has_m_fristkillreward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_bossfristkill::set_has_m_fristkillreward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_bossfristkill::clear_has_m_fristkillreward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_bossfristkill::clear_m_fristkillreward() {
  m_fristkillreward_ = 0;
  clear_has_m_fristkillreward();
}
inline ::google::protobuf::int32 E_FestivalMuban_bossfristkill::m_fristkillreward() const {
  return m_fristkillreward_;
}
inline void E_FestivalMuban_bossfristkill::set_m_fristkillreward(::google::protobuf::int32 value) {
  set_has_m_fristkillreward();
  m_fristkillreward_ = value;
}

// optional int32 m_killReward = 6;
inline bool E_FestivalMuban_bossfristkill::has_m_killreward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_bossfristkill::set_has_m_killreward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_bossfristkill::clear_has_m_killreward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_bossfristkill::clear_m_killreward() {
  m_killreward_ = 0;
  clear_has_m_killreward();
}
inline ::google::protobuf::int32 E_FestivalMuban_bossfristkill::m_killreward() const {
  return m_killreward_;
}
inline void E_FestivalMuban_bossfristkill::set_m_killreward(::google::protobuf::int32 value) {
  set_has_m_killreward();
  m_killreward_ = value;
}

// optional int32 m_fristKillPacket = 7;
inline bool E_FestivalMuban_bossfristkill::has_m_fristkillpacket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_bossfristkill::set_has_m_fristkillpacket() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_bossfristkill::clear_has_m_fristkillpacket() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_bossfristkill::clear_m_fristkillpacket() {
  m_fristkillpacket_ = 0;
  clear_has_m_fristkillpacket();
}
inline ::google::protobuf::int32 E_FestivalMuban_bossfristkill::m_fristkillpacket() const {
  return m_fristkillpacket_;
}
inline void E_FestivalMuban_bossfristkill::set_m_fristkillpacket(::google::protobuf::int32 value) {
  set_has_m_fristkillpacket();
  m_fristkillpacket_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_bossfristkill

// repeated .proto_ff.E_FestivalMuban_bossfristkill E_FestivalMuban_bossfristkill_List = 1;
inline int Sheet_FestivalMuban_bossfristkill::e_festivalmuban_bossfristkill_list_size() const {
  return e_festivalmuban_bossfristkill_list_.size();
}
inline void Sheet_FestivalMuban_bossfristkill::clear_e_festivalmuban_bossfristkill_list() {
  e_festivalmuban_bossfristkill_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_bossfristkill& Sheet_FestivalMuban_bossfristkill::e_festivalmuban_bossfristkill_list(int index) const {
  return e_festivalmuban_bossfristkill_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_bossfristkill* Sheet_FestivalMuban_bossfristkill::mutable_e_festivalmuban_bossfristkill_list(int index) {
  return e_festivalmuban_bossfristkill_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_bossfristkill* Sheet_FestivalMuban_bossfristkill::add_e_festivalmuban_bossfristkill_list() {
  return e_festivalmuban_bossfristkill_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_bossfristkill >&
Sheet_FestivalMuban_bossfristkill::e_festivalmuban_bossfristkill_list() const {
  return e_festivalmuban_bossfristkill_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_bossfristkill >*
Sheet_FestivalMuban_bossfristkill::mutable_e_festivalmuban_bossfristkill_list() {
  return &e_festivalmuban_bossfristkill_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_severrank

// optional int32 m_id = 1;
inline bool E_FestivalMuban_severrank::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_severrank::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_severrank::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_severrank::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_severrank::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_severrank::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_severrank::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_severrank::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional string m_order = 3;
inline bool E_FestivalMuban_severrank::has_m_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_severrank::clear_has_m_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_severrank::clear_m_order() {
  if (m_order_ != &::google::protobuf::internal::kEmptyString) {
    m_order_->clear();
  }
  clear_has_m_order();
}
inline const ::std::string& E_FestivalMuban_severrank::m_order() const {
  return *m_order_;
}
inline void E_FestivalMuban_severrank::set_m_order(const ::std::string& value) {
  set_has_m_order();
  if (m_order_ == &::google::protobuf::internal::kEmptyString) {
    m_order_ = new ::std::string;
  }
  m_order_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_order(const char* value) {
  set_has_m_order();
  if (m_order_ == &::google::protobuf::internal::kEmptyString) {
    m_order_ = new ::std::string;
  }
  m_order_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_order(const char* value, size_t size) {
  set_has_m_order();
  if (m_order_ == &::google::protobuf::internal::kEmptyString) {
    m_order_ = new ::std::string;
  }
  m_order_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_severrank::mutable_m_order() {
  set_has_m_order();
  if (m_order_ == &::google::protobuf::internal::kEmptyString) {
    m_order_ = new ::std::string;
  }
  return m_order_;
}
inline ::std::string* E_FestivalMuban_severrank::release_m_order() {
  clear_has_m_order();
  if (m_order_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_order_;
    m_order_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_severrank::set_allocated_m_order(::std::string* m_order) {
  if (m_order_ != &::google::protobuf::internal::kEmptyString) {
    delete m_order_;
  }
  if (m_order) {
    set_has_m_order();
    m_order_ = m_order;
  } else {
    clear_has_m_order();
    m_order_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_name = 4;
inline bool E_FestivalMuban_severrank::has_m_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_severrank::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_severrank::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_FestivalMuban_severrank::m_name() const {
  return *m_name_;
}
inline void E_FestivalMuban_severrank::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_severrank::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_FestivalMuban_severrank::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_severrank::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_openDay = 5;
inline bool E_FestivalMuban_severrank::has_m_openday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_openday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_severrank::clear_has_m_openday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_severrank::clear_m_openday() {
  m_openday_ = 0;
  clear_has_m_openday();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_openday() const {
  return m_openday_;
}
inline void E_FestivalMuban_severrank::set_m_openday(::google::protobuf::int32 value) {
  set_has_m_openday();
  m_openday_ = value;
}

// optional int32 m_closeDay = 6;
inline bool E_FestivalMuban_severrank::has_m_closeday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_closeday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_severrank::clear_has_m_closeday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_severrank::clear_m_closeday() {
  m_closeday_ = 0;
  clear_has_m_closeday();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_closeday() const {
  return m_closeday_;
}
inline void E_FestivalMuban_severrank::set_m_closeday(::google::protobuf::int32 value) {
  set_has_m_closeday();
  m_closeday_ = value;
}

// optional string m_championTitle = 7;
inline bool E_FestivalMuban_severrank::has_m_championtitle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_championtitle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_severrank::clear_has_m_championtitle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_severrank::clear_m_championtitle() {
  if (m_championtitle_ != &::google::protobuf::internal::kEmptyString) {
    m_championtitle_->clear();
  }
  clear_has_m_championtitle();
}
inline const ::std::string& E_FestivalMuban_severrank::m_championtitle() const {
  return *m_championtitle_;
}
inline void E_FestivalMuban_severrank::set_m_championtitle(const ::std::string& value) {
  set_has_m_championtitle();
  if (m_championtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_championtitle_ = new ::std::string;
  }
  m_championtitle_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_championtitle(const char* value) {
  set_has_m_championtitle();
  if (m_championtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_championtitle_ = new ::std::string;
  }
  m_championtitle_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_championtitle(const char* value, size_t size) {
  set_has_m_championtitle();
  if (m_championtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_championtitle_ = new ::std::string;
  }
  m_championtitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_severrank::mutable_m_championtitle() {
  set_has_m_championtitle();
  if (m_championtitle_ == &::google::protobuf::internal::kEmptyString) {
    m_championtitle_ = new ::std::string;
  }
  return m_championtitle_;
}
inline ::std::string* E_FestivalMuban_severrank::release_m_championtitle() {
  clear_has_m_championtitle();
  if (m_championtitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_championtitle_;
    m_championtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_severrank::set_allocated_m_championtitle(::std::string* m_championtitle) {
  if (m_championtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete m_championtitle_;
  }
  if (m_championtitle) {
    set_has_m_championtitle();
    m_championtitle_ = m_championtitle;
  } else {
    clear_has_m_championtitle();
    m_championtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_rewardShow = 8;
inline bool E_FestivalMuban_severrank::has_m_rewardshow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_rewardshow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_FestivalMuban_severrank::clear_has_m_rewardshow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_FestivalMuban_severrank::clear_m_rewardshow() {
  if (m_rewardshow_ != &::google::protobuf::internal::kEmptyString) {
    m_rewardshow_->clear();
  }
  clear_has_m_rewardshow();
}
inline const ::std::string& E_FestivalMuban_severrank::m_rewardshow() const {
  return *m_rewardshow_;
}
inline void E_FestivalMuban_severrank::set_m_rewardshow(const ::std::string& value) {
  set_has_m_rewardshow();
  if (m_rewardshow_ == &::google::protobuf::internal::kEmptyString) {
    m_rewardshow_ = new ::std::string;
  }
  m_rewardshow_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_rewardshow(const char* value) {
  set_has_m_rewardshow();
  if (m_rewardshow_ == &::google::protobuf::internal::kEmptyString) {
    m_rewardshow_ = new ::std::string;
  }
  m_rewardshow_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_rewardshow(const char* value, size_t size) {
  set_has_m_rewardshow();
  if (m_rewardshow_ == &::google::protobuf::internal::kEmptyString) {
    m_rewardshow_ = new ::std::string;
  }
  m_rewardshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_severrank::mutable_m_rewardshow() {
  set_has_m_rewardshow();
  if (m_rewardshow_ == &::google::protobuf::internal::kEmptyString) {
    m_rewardshow_ = new ::std::string;
  }
  return m_rewardshow_;
}
inline ::std::string* E_FestivalMuban_severrank::release_m_rewardshow() {
  clear_has_m_rewardshow();
  if (m_rewardshow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rewardshow_;
    m_rewardshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_severrank::set_allocated_m_rewardshow(::std::string* m_rewardshow) {
  if (m_rewardshow_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rewardshow_;
  }
  if (m_rewardshow) {
    set_has_m_rewardshow();
    m_rewardshow_ = m_rewardshow;
  } else {
    clear_has_m_rewardshow();
    m_rewardshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_dataGroupID = 9;
inline bool E_FestivalMuban_severrank::has_m_datagroupid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_datagroupid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_FestivalMuban_severrank::clear_has_m_datagroupid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_FestivalMuban_severrank::clear_m_datagroupid() {
  m_datagroupid_ = 0;
  clear_has_m_datagroupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_datagroupid() const {
  return m_datagroupid_;
}
inline void E_FestivalMuban_severrank::set_m_datagroupid(::google::protobuf::int32 value) {
  set_has_m_datagroupid();
  m_datagroupid_ = value;
}

// optional int32 m_rankType = 10;
inline bool E_FestivalMuban_severrank::has_m_ranktype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_ranktype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_FestivalMuban_severrank::clear_has_m_ranktype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_FestivalMuban_severrank::clear_m_ranktype() {
  m_ranktype_ = 0;
  clear_has_m_ranktype();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_ranktype() const {
  return m_ranktype_;
}
inline void E_FestivalMuban_severrank::set_m_ranktype(::google::protobuf::int32 value) {
  set_has_m_ranktype();
  m_ranktype_ = value;
}

// optional string m_rankGift = 11;
inline bool E_FestivalMuban_severrank::has_m_rankgift() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_rankgift() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_FestivalMuban_severrank::clear_has_m_rankgift() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_FestivalMuban_severrank::clear_m_rankgift() {
  if (m_rankgift_ != &::google::protobuf::internal::kEmptyString) {
    m_rankgift_->clear();
  }
  clear_has_m_rankgift();
}
inline const ::std::string& E_FestivalMuban_severrank::m_rankgift() const {
  return *m_rankgift_;
}
inline void E_FestivalMuban_severrank::set_m_rankgift(const ::std::string& value) {
  set_has_m_rankgift();
  if (m_rankgift_ == &::google::protobuf::internal::kEmptyString) {
    m_rankgift_ = new ::std::string;
  }
  m_rankgift_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_rankgift(const char* value) {
  set_has_m_rankgift();
  if (m_rankgift_ == &::google::protobuf::internal::kEmptyString) {
    m_rankgift_ = new ::std::string;
  }
  m_rankgift_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_rankgift(const char* value, size_t size) {
  set_has_m_rankgift();
  if (m_rankgift_ == &::google::protobuf::internal::kEmptyString) {
    m_rankgift_ = new ::std::string;
  }
  m_rankgift_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_severrank::mutable_m_rankgift() {
  set_has_m_rankgift();
  if (m_rankgift_ == &::google::protobuf::internal::kEmptyString) {
    m_rankgift_ = new ::std::string;
  }
  return m_rankgift_;
}
inline ::std::string* E_FestivalMuban_severrank::release_m_rankgift() {
  clear_has_m_rankgift();
  if (m_rankgift_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rankgift_;
    m_rankgift_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_severrank::set_allocated_m_rankgift(::std::string* m_rankgift) {
  if (m_rankgift_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rankgift_;
  }
  if (m_rankgift) {
    set_has_m_rankgift();
    m_rankgift_ = m_rankgift;
  } else {
    clear_has_m_rankgift();
    m_rankgift_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_giftIcon = 12;
inline bool E_FestivalMuban_severrank::has_m_gifticon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_gifticon() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_FestivalMuban_severrank::clear_has_m_gifticon() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_FestivalMuban_severrank::clear_m_gifticon() {
  if (m_gifticon_ != &::google::protobuf::internal::kEmptyString) {
    m_gifticon_->clear();
  }
  clear_has_m_gifticon();
}
inline const ::std::string& E_FestivalMuban_severrank::m_gifticon() const {
  return *m_gifticon_;
}
inline void E_FestivalMuban_severrank::set_m_gifticon(const ::std::string& value) {
  set_has_m_gifticon();
  if (m_gifticon_ == &::google::protobuf::internal::kEmptyString) {
    m_gifticon_ = new ::std::string;
  }
  m_gifticon_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_gifticon(const char* value) {
  set_has_m_gifticon();
  if (m_gifticon_ == &::google::protobuf::internal::kEmptyString) {
    m_gifticon_ = new ::std::string;
  }
  m_gifticon_->assign(value);
}
inline void E_FestivalMuban_severrank::set_m_gifticon(const char* value, size_t size) {
  set_has_m_gifticon();
  if (m_gifticon_ == &::google::protobuf::internal::kEmptyString) {
    m_gifticon_ = new ::std::string;
  }
  m_gifticon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_severrank::mutable_m_gifticon() {
  set_has_m_gifticon();
  if (m_gifticon_ == &::google::protobuf::internal::kEmptyString) {
    m_gifticon_ = new ::std::string;
  }
  return m_gifticon_;
}
inline ::std::string* E_FestivalMuban_severrank::release_m_gifticon() {
  clear_has_m_gifticon();
  if (m_gifticon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_gifticon_;
    m_gifticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_severrank::set_allocated_m_gifticon(::std::string* m_gifticon) {
  if (m_gifticon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gifticon_;
  }
  if (m_gifticon) {
    set_has_m_gifticon();
    m_gifticon_ = m_gifticon;
  } else {
    clear_has_m_gifticon();
    m_gifticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_giftItemId = 13;
inline bool E_FestivalMuban_severrank::has_m_giftitemid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_giftitemid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_FestivalMuban_severrank::clear_has_m_giftitemid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_FestivalMuban_severrank::clear_m_giftitemid() {
  m_giftitemid_ = 0;
  clear_has_m_giftitemid();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_giftitemid() const {
  return m_giftitemid_;
}
inline void E_FestivalMuban_severrank::set_m_giftitemid(::google::protobuf::int32 value) {
  set_has_m_giftitemid();
  m_giftitemid_ = value;
}

// optional int32 m_originalPrice = 14;
inline bool E_FestivalMuban_severrank::has_m_originalprice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_originalprice() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_FestivalMuban_severrank::clear_has_m_originalprice() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_FestivalMuban_severrank::clear_m_originalprice() {
  m_originalprice_ = 0;
  clear_has_m_originalprice();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_originalprice() const {
  return m_originalprice_;
}
inline void E_FestivalMuban_severrank::set_m_originalprice(::google::protobuf::int32 value) {
  set_has_m_originalprice();
  m_originalprice_ = value;
}

// optional int32 m_price = 15;
inline bool E_FestivalMuban_severrank::has_m_price() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_price() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_FestivalMuban_severrank::clear_has_m_price() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_FestivalMuban_severrank::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_price() const {
  return m_price_;
}
inline void E_FestivalMuban_severrank::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_ratioShow = 16;
inline bool E_FestivalMuban_severrank::has_m_ratioshow() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_ratioshow() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_FestivalMuban_severrank::clear_has_m_ratioshow() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_FestivalMuban_severrank::clear_m_ratioshow() {
  m_ratioshow_ = 0;
  clear_has_m_ratioshow();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_ratioshow() const {
  return m_ratioshow_;
}
inline void E_FestivalMuban_severrank::set_m_ratioshow(::google::protobuf::int32 value) {
  set_has_m_ratioshow();
  m_ratioshow_ = value;
}

// optional int32 m_redPointBox = 17;
inline bool E_FestivalMuban_severrank::has_m_redpointbox() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_FestivalMuban_severrank::set_has_m_redpointbox() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_FestivalMuban_severrank::clear_has_m_redpointbox() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_FestivalMuban_severrank::clear_m_redpointbox() {
  m_redpointbox_ = 0;
  clear_has_m_redpointbox();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank::m_redpointbox() const {
  return m_redpointbox_;
}
inline void E_FestivalMuban_severrank::set_m_redpointbox(::google::protobuf::int32 value) {
  set_has_m_redpointbox();
  m_redpointbox_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_severrank

// repeated .proto_ff.E_FestivalMuban_severrank E_FestivalMuban_severrank_List = 1;
inline int Sheet_FestivalMuban_severrank::e_festivalmuban_severrank_list_size() const {
  return e_festivalmuban_severrank_list_.size();
}
inline void Sheet_FestivalMuban_severrank::clear_e_festivalmuban_severrank_list() {
  e_festivalmuban_severrank_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_severrank& Sheet_FestivalMuban_severrank::e_festivalmuban_severrank_list(int index) const {
  return e_festivalmuban_severrank_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_severrank* Sheet_FestivalMuban_severrank::mutable_e_festivalmuban_severrank_list(int index) {
  return e_festivalmuban_severrank_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_severrank* Sheet_FestivalMuban_severrank::add_e_festivalmuban_severrank_list() {
  return e_festivalmuban_severrank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank >&
Sheet_FestivalMuban_severrank::e_festivalmuban_severrank_list() const {
  return e_festivalmuban_severrank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank >*
Sheet_FestivalMuban_severrank::mutable_e_festivalmuban_severrank_list() {
  return &e_festivalmuban_severrank_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_severrank_data

// optional int32 m_id = 1;
inline bool E_FestivalMuban_severrank_data::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_severrank_data::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_severrank_data::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_severrank_data::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank_data::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_severrank_data::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_severrank_data::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_severrank_data::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_severrank_data::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_severrank_data::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank_data::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_severrank_data::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_maxRank = 3;
inline bool E_FestivalMuban_severrank_data::has_m_maxrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_severrank_data::set_has_m_maxrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_severrank_data::clear_has_m_maxrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_severrank_data::clear_m_maxrank() {
  m_maxrank_ = 0;
  clear_has_m_maxrank();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank_data::m_maxrank() const {
  return m_maxrank_;
}
inline void E_FestivalMuban_severrank_data::set_m_maxrank(::google::protobuf::int32 value) {
  set_has_m_maxrank();
  m_maxrank_ = value;
}

// optional int32 m_minRank = 4;
inline bool E_FestivalMuban_severrank_data::has_m_minrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_severrank_data::set_has_m_minrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_severrank_data::clear_has_m_minrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_severrank_data::clear_m_minrank() {
  m_minrank_ = 0;
  clear_has_m_minrank();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank_data::m_minrank() const {
  return m_minrank_;
}
inline void E_FestivalMuban_severrank_data::set_m_minrank(::google::protobuf::int32 value) {
  set_has_m_minrank();
  m_minrank_ = value;
}

// optional int32 m_rankValue = 5;
inline bool E_FestivalMuban_severrank_data::has_m_rankvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_severrank_data::set_has_m_rankvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_severrank_data::clear_has_m_rankvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_severrank_data::clear_m_rankvalue() {
  m_rankvalue_ = 0;
  clear_has_m_rankvalue();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank_data::m_rankvalue() const {
  return m_rankvalue_;
}
inline void E_FestivalMuban_severrank_data::set_m_rankvalue(::google::protobuf::int32 value) {
  set_has_m_rankvalue();
  m_rankvalue_ = value;
}

// optional string m_UnachieveDisplay = 6;
inline bool E_FestivalMuban_severrank_data::has_m_unachievedisplay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_severrank_data::set_has_m_unachievedisplay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_severrank_data::clear_has_m_unachievedisplay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_severrank_data::clear_m_unachievedisplay() {
  if (m_unachievedisplay_ != &::google::protobuf::internal::kEmptyString) {
    m_unachievedisplay_->clear();
  }
  clear_has_m_unachievedisplay();
}
inline const ::std::string& E_FestivalMuban_severrank_data::m_unachievedisplay() const {
  return *m_unachievedisplay_;
}
inline void E_FestivalMuban_severrank_data::set_m_unachievedisplay(const ::std::string& value) {
  set_has_m_unachievedisplay();
  if (m_unachievedisplay_ == &::google::protobuf::internal::kEmptyString) {
    m_unachievedisplay_ = new ::std::string;
  }
  m_unachievedisplay_->assign(value);
}
inline void E_FestivalMuban_severrank_data::set_m_unachievedisplay(const char* value) {
  set_has_m_unachievedisplay();
  if (m_unachievedisplay_ == &::google::protobuf::internal::kEmptyString) {
    m_unachievedisplay_ = new ::std::string;
  }
  m_unachievedisplay_->assign(value);
}
inline void E_FestivalMuban_severrank_data::set_m_unachievedisplay(const char* value, size_t size) {
  set_has_m_unachievedisplay();
  if (m_unachievedisplay_ == &::google::protobuf::internal::kEmptyString) {
    m_unachievedisplay_ = new ::std::string;
  }
  m_unachievedisplay_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_severrank_data::mutable_m_unachievedisplay() {
  set_has_m_unachievedisplay();
  if (m_unachievedisplay_ == &::google::protobuf::internal::kEmptyString) {
    m_unachievedisplay_ = new ::std::string;
  }
  return m_unachievedisplay_;
}
inline ::std::string* E_FestivalMuban_severrank_data::release_m_unachievedisplay() {
  clear_has_m_unachievedisplay();
  if (m_unachievedisplay_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_unachievedisplay_;
    m_unachievedisplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_severrank_data::set_allocated_m_unachievedisplay(::std::string* m_unachievedisplay) {
  if (m_unachievedisplay_ != &::google::protobuf::internal::kEmptyString) {
    delete m_unachievedisplay_;
  }
  if (m_unachievedisplay) {
    set_has_m_unachievedisplay();
    m_unachievedisplay_ = m_unachievedisplay;
  } else {
    clear_has_m_unachievedisplay();
    m_unachievedisplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_boxID = 7;
inline bool E_FestivalMuban_severrank_data::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_severrank_data::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_severrank_data::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_severrank_data::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_severrank_data::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_severrank_data::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_severrank_data

// repeated .proto_ff.E_FestivalMuban_severrank_data E_FestivalMuban_severrank_data_List = 1;
inline int Sheet_FestivalMuban_severrank_data::e_festivalmuban_severrank_data_list_size() const {
  return e_festivalmuban_severrank_data_list_.size();
}
inline void Sheet_FestivalMuban_severrank_data::clear_e_festivalmuban_severrank_data_list() {
  e_festivalmuban_severrank_data_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_severrank_data& Sheet_FestivalMuban_severrank_data::e_festivalmuban_severrank_data_list(int index) const {
  return e_festivalmuban_severrank_data_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_severrank_data* Sheet_FestivalMuban_severrank_data::mutable_e_festivalmuban_severrank_data_list(int index) {
  return e_festivalmuban_severrank_data_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_severrank_data* Sheet_FestivalMuban_severrank_data::add_e_festivalmuban_severrank_data_list() {
  return e_festivalmuban_severrank_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank_data >&
Sheet_FestivalMuban_severrank_data::e_festivalmuban_severrank_data_list() const {
  return e_festivalmuban_severrank_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_severrank_data >*
Sheet_FestivalMuban_severrank_data::mutable_e_festivalmuban_severrank_data_list() {
  return &e_festivalmuban_severrank_data_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_collectwordCostDesc

// optional int32 m_num = 1;
inline bool E_FestivalMuban_collectwordCostDesc::has_m_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_collectwordCostDesc::set_has_m_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_collectwordCostDesc::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_collectwordCostDesc::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_FestivalMuban_collectwordCostDesc::m_num() const {
  return m_num_;
}
inline void E_FestivalMuban_collectwordCostDesc::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// optional int32 m_id = 2;
inline bool E_FestivalMuban_collectwordCostDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_collectwordCostDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_collectwordCostDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_collectwordCostDesc::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_collectwordCostDesc::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_collectwordCostDesc::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_FestivalMuban_collectword

// optional int32 m_id = 1;
inline bool E_FestivalMuban_collectword::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_collectword::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_collectword::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_collectword::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_collectword::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_collectword::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_collectword::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_collectword::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_collectword::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_collectword::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_collectword::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_collectword::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_exchange_id = 3;
inline bool E_FestivalMuban_collectword::has_m_exchange_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_collectword::set_has_m_exchange_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_collectword::clear_has_m_exchange_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_collectword::clear_m_exchange_id() {
  m_exchange_id_ = 0;
  clear_has_m_exchange_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_collectword::m_exchange_id() const {
  return m_exchange_id_;
}
inline void E_FestivalMuban_collectword::set_m_exchange_id(::google::protobuf::int32 value) {
  set_has_m_exchange_id();
  m_exchange_id_ = value;
}

// optional int32 m_exchange_num = 4;
inline bool E_FestivalMuban_collectword::has_m_exchange_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_collectword::set_has_m_exchange_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_collectword::clear_has_m_exchange_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_collectword::clear_m_exchange_num() {
  m_exchange_num_ = 0;
  clear_has_m_exchange_num();
}
inline ::google::protobuf::int32 E_FestivalMuban_collectword::m_exchange_num() const {
  return m_exchange_num_;
}
inline void E_FestivalMuban_collectword::set_m_exchange_num(::google::protobuf::int32 value) {
  set_has_m_exchange_num();
  m_exchange_num_ = value;
}

// optional int32 m_times = 5;
inline bool E_FestivalMuban_collectword::has_m_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_collectword::set_has_m_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_collectword::clear_has_m_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_collectword::clear_m_times() {
  m_times_ = 0;
  clear_has_m_times();
}
inline ::google::protobuf::int32 E_FestivalMuban_collectword::m_times() const {
  return m_times_;
}
inline void E_FestivalMuban_collectword::set_m_times(::google::protobuf::int32 value) {
  set_has_m_times();
  m_times_ = value;
}

// repeated .proto_ff.E_FestivalMuban_collectwordCostDesc m_cost = 6;
inline int E_FestivalMuban_collectword::m_cost_size() const {
  return m_cost_.size();
}
inline void E_FestivalMuban_collectword::clear_m_cost() {
  m_cost_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_collectwordCostDesc& E_FestivalMuban_collectword::m_cost(int index) const {
  return m_cost_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_collectwordCostDesc* E_FestivalMuban_collectword::mutable_m_cost(int index) {
  return m_cost_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_collectwordCostDesc* E_FestivalMuban_collectword::add_m_cost() {
  return m_cost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectwordCostDesc >&
E_FestivalMuban_collectword::m_cost() const {
  return m_cost_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectwordCostDesc >*
E_FestivalMuban_collectword::mutable_m_cost() {
  return &m_cost_;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_collectword

// repeated .proto_ff.E_FestivalMuban_collectword E_FestivalMuban_collectword_List = 1;
inline int Sheet_FestivalMuban_collectword::e_festivalmuban_collectword_list_size() const {
  return e_festivalmuban_collectword_list_.size();
}
inline void Sheet_FestivalMuban_collectword::clear_e_festivalmuban_collectword_list() {
  e_festivalmuban_collectword_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_collectword& Sheet_FestivalMuban_collectword::e_festivalmuban_collectword_list(int index) const {
  return e_festivalmuban_collectword_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_collectword* Sheet_FestivalMuban_collectword::mutable_e_festivalmuban_collectword_list(int index) {
  return e_festivalmuban_collectword_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_collectword* Sheet_FestivalMuban_collectword::add_e_festivalmuban_collectword_list() {
  return e_festivalmuban_collectword_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectword >&
Sheet_FestivalMuban_collectword::e_festivalmuban_collectword_list() const {
  return e_festivalmuban_collectword_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_collectword >*
Sheet_FestivalMuban_collectword::mutable_e_festivalmuban_collectword_list() {
  return &e_festivalmuban_collectword_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_sign

// optional int32 m_id = 1;
inline bool E_FestivalMuban_sign::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_sign::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_sign::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_sign::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_sign::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_sign::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_sign::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_sign::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_sign::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_sign::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_sign::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_sign::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_boxID = 3;
inline bool E_FestivalMuban_sign::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_sign::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_sign::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_sign::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_sign::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_sign::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_sign

// repeated .proto_ff.E_FestivalMuban_sign E_FestivalMuban_sign_List = 1;
inline int Sheet_FestivalMuban_sign::e_festivalmuban_sign_list_size() const {
  return e_festivalmuban_sign_list_.size();
}
inline void Sheet_FestivalMuban_sign::clear_e_festivalmuban_sign_list() {
  e_festivalmuban_sign_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_sign& Sheet_FestivalMuban_sign::e_festivalmuban_sign_list(int index) const {
  return e_festivalmuban_sign_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_sign* Sheet_FestivalMuban_sign::mutable_e_festivalmuban_sign_list(int index) {
  return e_festivalmuban_sign_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_sign* Sheet_FestivalMuban_sign::add_e_festivalmuban_sign_list() {
  return e_festivalmuban_sign_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_sign >&
Sheet_FestivalMuban_sign::e_festivalmuban_sign_list() const {
  return e_festivalmuban_sign_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_sign >*
Sheet_FestivalMuban_sign::mutable_e_festivalmuban_sign_list() {
  return &e_festivalmuban_sign_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_shop

// optional int32 m_id = 1;
inline bool E_FestivalMuban_shop::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_shop::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_shop::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_shop::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_shop::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_shop::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_shop::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_shop::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_vipLevel = 3;
inline bool E_FestivalMuban_shop::has_m_viplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_viplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_shop::clear_has_m_viplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_shop::clear_m_viplevel() {
  m_viplevel_ = 0;
  clear_has_m_viplevel();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_viplevel() const {
  return m_viplevel_;
}
inline void E_FestivalMuban_shop::set_m_viplevel(::google::protobuf::int32 value) {
  set_has_m_viplevel();
  m_viplevel_ = value;
}

// optional int32 m_box = 4;
inline bool E_FestivalMuban_shop::has_m_box() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_box() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_shop::clear_has_m_box() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_shop::clear_m_box() {
  m_box_ = 0;
  clear_has_m_box();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_box() const {
  return m_box_;
}
inline void E_FestivalMuban_shop::set_m_box(::google::protobuf::int32 value) {
  set_has_m_box();
  m_box_ = value;
}

// optional int32 m_timeLimit = 5;
inline bool E_FestivalMuban_shop::has_m_timelimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_timelimit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_shop::clear_has_m_timelimit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_shop::clear_m_timelimit() {
  m_timelimit_ = 0;
  clear_has_m_timelimit();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_timelimit() const {
  return m_timelimit_;
}
inline void E_FestivalMuban_shop::set_m_timelimit(::google::protobuf::int32 value) {
  set_has_m_timelimit();
  m_timelimit_ = value;
}

// optional int32 m_price = 6;
inline bool E_FestivalMuban_shop::has_m_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_shop::clear_has_m_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_shop::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_price() const {
  return m_price_;
}
inline void E_FestivalMuban_shop::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_priceType = 7;
inline bool E_FestivalMuban_shop::has_m_pricetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_pricetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_shop::clear_has_m_pricetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_shop::clear_m_pricetype() {
  m_pricetype_ = 0;
  clear_has_m_pricetype();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_pricetype() const {
  return m_pricetype_;
}
inline void E_FestivalMuban_shop::set_m_pricetype(::google::protobuf::int32 value) {
  set_has_m_pricetype();
  m_pricetype_ = value;
}

// optional int32 m_starTime = 8;
inline bool E_FestivalMuban_shop::has_m_startime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_startime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_FestivalMuban_shop::clear_has_m_startime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_FestivalMuban_shop::clear_m_startime() {
  m_startime_ = 0;
  clear_has_m_startime();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_startime() const {
  return m_startime_;
}
inline void E_FestivalMuban_shop::set_m_startime(::google::protobuf::int32 value) {
  set_has_m_startime();
  m_startime_ = value;
}

// optional int32 m_durTime = 9;
inline bool E_FestivalMuban_shop::has_m_durtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_FestivalMuban_shop::set_has_m_durtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_FestivalMuban_shop::clear_has_m_durtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_FestivalMuban_shop::clear_m_durtime() {
  m_durtime_ = 0;
  clear_has_m_durtime();
}
inline ::google::protobuf::int32 E_FestivalMuban_shop::m_durtime() const {
  return m_durtime_;
}
inline void E_FestivalMuban_shop::set_m_durtime(::google::protobuf::int32 value) {
  set_has_m_durtime();
  m_durtime_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_shop

// repeated .proto_ff.E_FestivalMuban_shop E_FestivalMuban_shop_List = 1;
inline int Sheet_FestivalMuban_shop::e_festivalmuban_shop_list_size() const {
  return e_festivalmuban_shop_list_.size();
}
inline void Sheet_FestivalMuban_shop::clear_e_festivalmuban_shop_list() {
  e_festivalmuban_shop_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_shop& Sheet_FestivalMuban_shop::e_festivalmuban_shop_list(int index) const {
  return e_festivalmuban_shop_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_shop* Sheet_FestivalMuban_shop::mutable_e_festivalmuban_shop_list(int index) {
  return e_festivalmuban_shop_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_shop* Sheet_FestivalMuban_shop::add_e_festivalmuban_shop_list() {
  return e_festivalmuban_shop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_shop >&
Sheet_FestivalMuban_shop::e_festivalmuban_shop_list() const {
  return e_festivalmuban_shop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_shop >*
Sheet_FestivalMuban_shop::mutable_e_festivalmuban_shop_list() {
  return &e_festivalmuban_shop_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_rechange

// optional int32 m_id = 1;
inline bool E_FestivalMuban_rechange::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_rechange::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_rechange::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_rechange::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_rechange::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_rechange::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_rechange::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_rechange::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_rechange::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_rechange::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_rechange::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_rechange::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_rebate = 3;
inline bool E_FestivalMuban_rechange::has_m_rebate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_rechange::set_has_m_rebate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_rechange::clear_has_m_rebate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_rechange::clear_m_rebate() {
  m_rebate_ = 0;
  clear_has_m_rebate();
}
inline ::google::protobuf::int32 E_FestivalMuban_rechange::m_rebate() const {
  return m_rebate_;
}
inline void E_FestivalMuban_rechange::set_m_rebate(::google::protobuf::int32 value) {
  set_has_m_rebate();
  m_rebate_ = value;
}

// optional int32 m_timeLimit = 4;
inline bool E_FestivalMuban_rechange::has_m_timelimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_rechange::set_has_m_timelimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_rechange::clear_has_m_timelimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_rechange::clear_m_timelimit() {
  m_timelimit_ = 0;
  clear_has_m_timelimit();
}
inline ::google::protobuf::int32 E_FestivalMuban_rechange::m_timelimit() const {
  return m_timelimit_;
}
inline void E_FestivalMuban_rechange::set_m_timelimit(::google::protobuf::int32 value) {
  set_has_m_timelimit();
  m_timelimit_ = value;
}

// optional int32 m_price = 5;
inline bool E_FestivalMuban_rechange::has_m_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_rechange::set_has_m_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_rechange::clear_has_m_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_rechange::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 E_FestivalMuban_rechange::m_price() const {
  return m_price_;
}
inline void E_FestivalMuban_rechange::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_typer = 6;
inline bool E_FestivalMuban_rechange::has_m_typer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_rechange::set_has_m_typer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_rechange::clear_has_m_typer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_rechange::clear_m_typer() {
  m_typer_ = 0;
  clear_has_m_typer();
}
inline ::google::protobuf::int32 E_FestivalMuban_rechange::m_typer() const {
  return m_typer_;
}
inline void E_FestivalMuban_rechange::set_m_typer(::google::protobuf::int32 value) {
  set_has_m_typer();
  m_typer_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_rechange

// repeated .proto_ff.E_FestivalMuban_rechange E_FestivalMuban_rechange_List = 1;
inline int Sheet_FestivalMuban_rechange::e_festivalmuban_rechange_list_size() const {
  return e_festivalmuban_rechange_list_.size();
}
inline void Sheet_FestivalMuban_rechange::clear_e_festivalmuban_rechange_list() {
  e_festivalmuban_rechange_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_rechange& Sheet_FestivalMuban_rechange::e_festivalmuban_rechange_list(int index) const {
  return e_festivalmuban_rechange_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_rechange* Sheet_FestivalMuban_rechange::mutable_e_festivalmuban_rechange_list(int index) {
  return e_festivalmuban_rechange_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_rechange* Sheet_FestivalMuban_rechange::add_e_festivalmuban_rechange_list() {
  return e_festivalmuban_rechange_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rechange >&
Sheet_FestivalMuban_rechange::e_festivalmuban_rechange_list() const {
  return e_festivalmuban_rechange_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rechange >*
Sheet_FestivalMuban_rechange::mutable_e_festivalmuban_rechange_list() {
  return &e_festivalmuban_rechange_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_leiji

// optional int32 m_id = 1;
inline bool E_FestivalMuban_leiji::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_leiji::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_leiji::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_leiji::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_leiji::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_leiji::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_leiji::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_leiji::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_leiji::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_leiji::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_leiji::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_leiji::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_leiji = 3;
inline bool E_FestivalMuban_leiji::has_m_leiji() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_leiji::set_has_m_leiji() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_leiji::clear_has_m_leiji() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_leiji::clear_m_leiji() {
  m_leiji_ = 0;
  clear_has_m_leiji();
}
inline ::google::protobuf::int32 E_FestivalMuban_leiji::m_leiji() const {
  return m_leiji_;
}
inline void E_FestivalMuban_leiji::set_m_leiji(::google::protobuf::int32 value) {
  set_has_m_leiji();
  m_leiji_ = value;
}

// optional int32 m_boxID = 4;
inline bool E_FestivalMuban_leiji::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_leiji::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_leiji::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_leiji::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_leiji::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_leiji::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_leiji

// repeated .proto_ff.E_FestivalMuban_leiji E_FestivalMuban_leiji_List = 1;
inline int Sheet_FestivalMuban_leiji::e_festivalmuban_leiji_list_size() const {
  return e_festivalmuban_leiji_list_.size();
}
inline void Sheet_FestivalMuban_leiji::clear_e_festivalmuban_leiji_list() {
  e_festivalmuban_leiji_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_leiji& Sheet_FestivalMuban_leiji::e_festivalmuban_leiji_list(int index) const {
  return e_festivalmuban_leiji_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_leiji* Sheet_FestivalMuban_leiji::mutable_e_festivalmuban_leiji_list(int index) {
  return e_festivalmuban_leiji_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_leiji* Sheet_FestivalMuban_leiji::add_e_festivalmuban_leiji_list() {
  return e_festivalmuban_leiji_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_leiji >&
Sheet_FestivalMuban_leiji::e_festivalmuban_leiji_list() const {
  return e_festivalmuban_leiji_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_leiji >*
Sheet_FestivalMuban_leiji::mutable_e_festivalmuban_leiji_list() {
  return &e_festivalmuban_leiji_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_zadan

// optional int32 m_id = 1;
inline bool E_FestivalMuban_zadan::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_zadan::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_zadan::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_zadan::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_zadan::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_zadan::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_zadan::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_zadan::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_zadan::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_zadan::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_zadan::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_zadan::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int64 m_itemid = 3;
inline bool E_FestivalMuban_zadan::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_zadan::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_zadan::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_zadan::clear_m_itemid() {
  m_itemid_ = GOOGLE_LONGLONG(0);
  clear_has_m_itemid();
}
inline ::google::protobuf::int64 E_FestivalMuban_zadan::m_itemid() const {
  return m_itemid_;
}
inline void E_FestivalMuban_zadan::set_m_itemid(::google::protobuf::int64 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_num = 4;
inline bool E_FestivalMuban_zadan::has_m_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_zadan::set_has_m_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_zadan::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_zadan::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_FestivalMuban_zadan::m_num() const {
  return m_num_;
}
inline void E_FestivalMuban_zadan::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// optional int32 m_type = 5;
inline bool E_FestivalMuban_zadan::has_m_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_zadan::set_has_m_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_zadan::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_zadan::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_FestivalMuban_zadan::m_type() const {
  return m_type_;
}
inline void E_FestivalMuban_zadan::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_probability = 6;
inline bool E_FestivalMuban_zadan::has_m_probability() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_zadan::set_has_m_probability() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_zadan::clear_has_m_probability() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_zadan::clear_m_probability() {
  m_probability_ = 0;
  clear_has_m_probability();
}
inline ::google::protobuf::int32 E_FestivalMuban_zadan::m_probability() const {
  return m_probability_;
}
inline void E_FestivalMuban_zadan::set_m_probability(::google::protobuf::int32 value) {
  set_has_m_probability();
  m_probability_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_zadan

// repeated .proto_ff.E_FestivalMuban_zadan E_FestivalMuban_zadan_List = 1;
inline int Sheet_FestivalMuban_zadan::e_festivalmuban_zadan_list_size() const {
  return e_festivalmuban_zadan_list_.size();
}
inline void Sheet_FestivalMuban_zadan::clear_e_festivalmuban_zadan_list() {
  e_festivalmuban_zadan_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_zadan& Sheet_FestivalMuban_zadan::e_festivalmuban_zadan_list(int index) const {
  return e_festivalmuban_zadan_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_zadan* Sheet_FestivalMuban_zadan::mutable_e_festivalmuban_zadan_list(int index) {
  return e_festivalmuban_zadan_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_zadan* Sheet_FestivalMuban_zadan::add_e_festivalmuban_zadan_list() {
  return e_festivalmuban_zadan_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_zadan >&
Sheet_FestivalMuban_zadan::e_festivalmuban_zadan_list() const {
  return e_festivalmuban_zadan_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_zadan >*
Sheet_FestivalMuban_zadan::mutable_e_festivalmuban_zadan_list() {
  return &e_festivalmuban_zadan_list_;
}

// -------------------------------------------------------------------

// E_FestivalZadanconstant

// optional int32 m_period = 1;
inline bool E_FestivalZadanconstant::has_m_period() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalZadanconstant::set_has_m_period() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalZadanconstant::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalZadanconstant::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalZadanconstant::m_period() const {
  return m_period_;
}
inline void E_FestivalZadanconstant::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int64 m_costItem = 2;
inline bool E_FestivalZadanconstant::has_m_costitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalZadanconstant::set_has_m_costitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalZadanconstant::clear_has_m_costitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalZadanconstant::clear_m_costitem() {
  m_costitem_ = GOOGLE_LONGLONG(0);
  clear_has_m_costitem();
}
inline ::google::protobuf::int64 E_FestivalZadanconstant::m_costitem() const {
  return m_costitem_;
}
inline void E_FestivalZadanconstant::set_m_costitem(::google::protobuf::int64 value) {
  set_has_m_costitem();
  m_costitem_ = value;
}

// optional int32 m_number = 3;
inline bool E_FestivalZadanconstant::has_m_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalZadanconstant::set_has_m_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalZadanconstant::clear_has_m_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalZadanconstant::clear_m_number() {
  m_number_ = 0;
  clear_has_m_number();
}
inline ::google::protobuf::int32 E_FestivalZadanconstant::m_number() const {
  return m_number_;
}
inline void E_FestivalZadanconstant::set_m_number(::google::protobuf::int32 value) {
  set_has_m_number();
  m_number_ = value;
}

// optional int32 m_free = 4;
inline bool E_FestivalZadanconstant::has_m_free() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalZadanconstant::set_has_m_free() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalZadanconstant::clear_has_m_free() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalZadanconstant::clear_m_free() {
  m_free_ = 0;
  clear_has_m_free();
}
inline ::google::protobuf::int32 E_FestivalZadanconstant::m_free() const {
  return m_free_;
}
inline void E_FestivalZadanconstant::set_m_free(::google::protobuf::int32 value) {
  set_has_m_free();
  m_free_ = value;
}

// optional int32 m_currency = 5;
inline bool E_FestivalZadanconstant::has_m_currency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalZadanconstant::set_has_m_currency() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalZadanconstant::clear_has_m_currency() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalZadanconstant::clear_m_currency() {
  m_currency_ = 0;
  clear_has_m_currency();
}
inline ::google::protobuf::int32 E_FestivalZadanconstant::m_currency() const {
  return m_currency_;
}
inline void E_FestivalZadanconstant::set_m_currency(::google::protobuf::int32 value) {
  set_has_m_currency();
  m_currency_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalZadanconstant

// repeated .proto_ff.E_FestivalZadanconstant E_FestivalZadanconstant_List = 1;
inline int Sheet_FestivalZadanconstant::e_festivalzadanconstant_list_size() const {
  return e_festivalzadanconstant_list_.size();
}
inline void Sheet_FestivalZadanconstant::clear_e_festivalzadanconstant_list() {
  e_festivalzadanconstant_list_.Clear();
}
inline const ::proto_ff::E_FestivalZadanconstant& Sheet_FestivalZadanconstant::e_festivalzadanconstant_list(int index) const {
  return e_festivalzadanconstant_list_.Get(index);
}
inline ::proto_ff::E_FestivalZadanconstant* Sheet_FestivalZadanconstant::mutable_e_festivalzadanconstant_list(int index) {
  return e_festivalzadanconstant_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalZadanconstant* Sheet_FestivalZadanconstant::add_e_festivalzadanconstant_list() {
  return e_festivalzadanconstant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalZadanconstant >&
Sheet_FestivalZadanconstant::e_festivalzadanconstant_list() const {
  return e_festivalzadanconstant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalZadanconstant >*
Sheet_FestivalZadanconstant::mutable_e_festivalzadanconstant_list() {
  return &e_festivalzadanconstant_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_turntable

// optional int32 m_id = 1;
inline bool E_FestivalMuban_turntable::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_turntable::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_turntable::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_turntable::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_turntable::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_turntable::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_turntable::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_turntable::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_turntable::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_turntable::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_poolGroup = 3;
inline bool E_FestivalMuban_turntable::has_m_poolgroup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_turntable::set_has_m_poolgroup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_turntable::clear_has_m_poolgroup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_turntable::clear_m_poolgroup() {
  m_poolgroup_ = 0;
  clear_has_m_poolgroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable::m_poolgroup() const {
  return m_poolgroup_;
}
inline void E_FestivalMuban_turntable::set_m_poolgroup(::google::protobuf::int32 value) {
  set_has_m_poolgroup();
  m_poolgroup_ = value;
}

// optional int32 m_taskGroup = 4;
inline bool E_FestivalMuban_turntable::has_m_taskgroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_turntable::set_has_m_taskgroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_turntable::clear_has_m_taskgroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_turntable::clear_m_taskgroup() {
  m_taskgroup_ = 0;
  clear_has_m_taskgroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable::m_taskgroup() const {
  return m_taskgroup_;
}
inline void E_FestivalMuban_turntable::set_m_taskgroup(::google::protobuf::int32 value) {
  set_has_m_taskgroup();
  m_taskgroup_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_turntable

// repeated .proto_ff.E_FestivalMuban_turntable E_FestivalMuban_turntable_List = 1;
inline int Sheet_FestivalMuban_turntable::e_festivalmuban_turntable_list_size() const {
  return e_festivalmuban_turntable_list_.size();
}
inline void Sheet_FestivalMuban_turntable::clear_e_festivalmuban_turntable_list() {
  e_festivalmuban_turntable_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_turntable& Sheet_FestivalMuban_turntable::e_festivalmuban_turntable_list(int index) const {
  return e_festivalmuban_turntable_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_turntable* Sheet_FestivalMuban_turntable::mutable_e_festivalmuban_turntable_list(int index) {
  return e_festivalmuban_turntable_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_turntable* Sheet_FestivalMuban_turntable::add_e_festivalmuban_turntable_list() {
  return e_festivalmuban_turntable_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable >&
Sheet_FestivalMuban_turntable::e_festivalmuban_turntable_list() const {
  return e_festivalmuban_turntable_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable >*
Sheet_FestivalMuban_turntable::mutable_e_festivalmuban_turntable_list() {
  return &e_festivalmuban_turntable_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_turntable_pool

// optional int32 m_id = 1;
inline bool E_FestivalMuban_turntable_pool::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_turntable_pool::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_turntable_pool::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_turntable_pool::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_pool::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_turntable_pool::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_turntable_pool::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_turntable_pool::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_turntable_pool::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_turntable_pool::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_pool::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_turntable_pool::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_itemID = 3;
inline bool E_FestivalMuban_turntable_pool::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_turntable_pool::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_turntable_pool::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_turntable_pool::clear_m_itemid() {
  m_itemid_ = 0;
  clear_has_m_itemid();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_pool::m_itemid() const {
  return m_itemid_;
}
inline void E_FestivalMuban_turntable_pool::set_m_itemid(::google::protobuf::int32 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_num = 4;
inline bool E_FestivalMuban_turntable_pool::has_m_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_turntable_pool::set_has_m_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_turntable_pool::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_turntable_pool::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_pool::m_num() const {
  return m_num_;
}
inline void E_FestivalMuban_turntable_pool::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// optional int32 m_weight = 5;
inline bool E_FestivalMuban_turntable_pool::has_m_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_turntable_pool::set_has_m_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_turntable_pool::clear_has_m_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_turntable_pool::clear_m_weight() {
  m_weight_ = 0;
  clear_has_m_weight();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_pool::m_weight() const {
  return m_weight_;
}
inline void E_FestivalMuban_turntable_pool::set_m_weight(::google::protobuf::int32 value) {
  set_has_m_weight();
  m_weight_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_turntable_pool

// repeated .proto_ff.E_FestivalMuban_turntable_pool E_FestivalMuban_turntable_pool_List = 1;
inline int Sheet_FestivalMuban_turntable_pool::e_festivalmuban_turntable_pool_list_size() const {
  return e_festivalmuban_turntable_pool_list_.size();
}
inline void Sheet_FestivalMuban_turntable_pool::clear_e_festivalmuban_turntable_pool_list() {
  e_festivalmuban_turntable_pool_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_turntable_pool& Sheet_FestivalMuban_turntable_pool::e_festivalmuban_turntable_pool_list(int index) const {
  return e_festivalmuban_turntable_pool_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_turntable_pool* Sheet_FestivalMuban_turntable_pool::mutable_e_festivalmuban_turntable_pool_list(int index) {
  return e_festivalmuban_turntable_pool_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_turntable_pool* Sheet_FestivalMuban_turntable_pool::add_e_festivalmuban_turntable_pool_list() {
  return e_festivalmuban_turntable_pool_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_pool >&
Sheet_FestivalMuban_turntable_pool::e_festivalmuban_turntable_pool_list() const {
  return e_festivalmuban_turntable_pool_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_pool >*
Sheet_FestivalMuban_turntable_pool::mutable_e_festivalmuban_turntable_pool_list() {
  return &e_festivalmuban_turntable_pool_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_turntable_task

// optional int32 m_id = 1;
inline bool E_FestivalMuban_turntable_task::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_turntable_task::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_turntable_task::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_turntable_task::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_task::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_turntable_task::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_turntable_task::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_turntable_task::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_turntable_task::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_turntable_task::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_task::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_turntable_task::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_eventType = 3;
inline bool E_FestivalMuban_turntable_task::has_m_eventtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_turntable_task::set_has_m_eventtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_turntable_task::clear_has_m_eventtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_turntable_task::clear_m_eventtype() {
  m_eventtype_ = 0;
  clear_has_m_eventtype();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_task::m_eventtype() const {
  return m_eventtype_;
}
inline void E_FestivalMuban_turntable_task::set_m_eventtype(::google::protobuf::int32 value) {
  set_has_m_eventtype();
  m_eventtype_ = value;
}

// optional int32 m_reachPrice = 4;
inline bool E_FestivalMuban_turntable_task::has_m_reachprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_turntable_task::set_has_m_reachprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_turntable_task::clear_has_m_reachprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_turntable_task::clear_m_reachprice() {
  m_reachprice_ = 0;
  clear_has_m_reachprice();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_task::m_reachprice() const {
  return m_reachprice_;
}
inline void E_FestivalMuban_turntable_task::set_m_reachprice(::google::protobuf::int32 value) {
  set_has_m_reachprice();
  m_reachprice_ = value;
}

// optional int32 m_link = 5;
inline bool E_FestivalMuban_turntable_task::has_m_link() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_turntable_task::set_has_m_link() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_turntable_task::clear_has_m_link() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_turntable_task::clear_m_link() {
  m_link_ = 0;
  clear_has_m_link();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_task::m_link() const {
  return m_link_;
}
inline void E_FestivalMuban_turntable_task::set_m_link(::google::protobuf::int32 value) {
  set_has_m_link();
  m_link_ = value;
}

// optional int32 m_rewardTimes = 6;
inline bool E_FestivalMuban_turntable_task::has_m_rewardtimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_turntable_task::set_has_m_rewardtimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_turntable_task::clear_has_m_rewardtimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_turntable_task::clear_m_rewardtimes() {
  m_rewardtimes_ = 0;
  clear_has_m_rewardtimes();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_task::m_rewardtimes() const {
  return m_rewardtimes_;
}
inline void E_FestivalMuban_turntable_task::set_m_rewardtimes(::google::protobuf::int32 value) {
  set_has_m_rewardtimes();
  m_rewardtimes_ = value;
}

// repeated int32 m_param = 7;
inline int E_FestivalMuban_turntable_task::m_param_size() const {
  return m_param_.size();
}
inline void E_FestivalMuban_turntable_task::clear_m_param() {
  m_param_.Clear();
}
inline ::google::protobuf::int32 E_FestivalMuban_turntable_task::m_param(int index) const {
  return m_param_.Get(index);
}
inline void E_FestivalMuban_turntable_task::set_m_param(int index, ::google::protobuf::int32 value) {
  m_param_.Set(index, value);
}
inline void E_FestivalMuban_turntable_task::add_m_param(::google::protobuf::int32 value) {
  m_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_FestivalMuban_turntable_task::m_param() const {
  return m_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_FestivalMuban_turntable_task::mutable_m_param() {
  return &m_param_;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_turntable_task

// repeated .proto_ff.E_FestivalMuban_turntable_task E_FestivalMuban_turntable_task_List = 1;
inline int Sheet_FestivalMuban_turntable_task::e_festivalmuban_turntable_task_list_size() const {
  return e_festivalmuban_turntable_task_list_.size();
}
inline void Sheet_FestivalMuban_turntable_task::clear_e_festivalmuban_turntable_task_list() {
  e_festivalmuban_turntable_task_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_turntable_task& Sheet_FestivalMuban_turntable_task::e_festivalmuban_turntable_task_list(int index) const {
  return e_festivalmuban_turntable_task_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_turntable_task* Sheet_FestivalMuban_turntable_task::mutable_e_festivalmuban_turntable_task_list(int index) {
  return e_festivalmuban_turntable_task_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_turntable_task* Sheet_FestivalMuban_turntable_task::add_e_festivalmuban_turntable_task_list() {
  return e_festivalmuban_turntable_task_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_task >&
Sheet_FestivalMuban_turntable_task::e_festivalmuban_turntable_task_list() const {
  return e_festivalmuban_turntable_task_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_turntable_task >*
Sheet_FestivalMuban_turntable_task::mutable_e_festivalmuban_turntable_task_list() {
  return &e_festivalmuban_turntable_task_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_donate

// optional int32 m_id = 1;
inline bool E_FestivalMuban_donate::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_donate::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_donate::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_donate::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_donate::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_donate::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_donate::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_donate::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_donate::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_donate::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_donateItem = 3;
inline bool E_FestivalMuban_donate::has_m_donateitem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_donate::set_has_m_donateitem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_donate::clear_has_m_donateitem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_donate::clear_m_donateitem() {
  m_donateitem_ = 0;
  clear_has_m_donateitem();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate::m_donateitem() const {
  return m_donateitem_;
}
inline void E_FestivalMuban_donate::set_m_donateitem(::google::protobuf::int32 value) {
  set_has_m_donateitem();
  m_donateitem_ = value;
}

// optional int32 m_donateReward = 4;
inline bool E_FestivalMuban_donate::has_m_donatereward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_donate::set_has_m_donatereward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_donate::clear_has_m_donatereward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_donate::clear_m_donatereward() {
  m_donatereward_ = 0;
  clear_has_m_donatereward();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate::m_donatereward() const {
  return m_donatereward_;
}
inline void E_FestivalMuban_donate::set_m_donatereward(::google::protobuf::int32 value) {
  set_has_m_donatereward();
  m_donatereward_ = value;
}

// optional int32 m_severReward = 5;
inline bool E_FestivalMuban_donate::has_m_severreward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_donate::set_has_m_severreward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_donate::clear_has_m_severreward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_donate::clear_m_severreward() {
  m_severreward_ = 0;
  clear_has_m_severreward();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate::m_severreward() const {
  return m_severreward_;
}
inline void E_FestivalMuban_donate::set_m_severreward(::google::protobuf::int32 value) {
  set_has_m_severreward();
  m_severreward_ = value;
}

// optional int32 m_singleReward = 6;
inline bool E_FestivalMuban_donate::has_m_singlereward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_donate::set_has_m_singlereward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_donate::clear_has_m_singlereward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_donate::clear_m_singlereward() {
  m_singlereward_ = 0;
  clear_has_m_singlereward();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate::m_singlereward() const {
  return m_singlereward_;
}
inline void E_FestivalMuban_donate::set_m_singlereward(::google::protobuf::int32 value) {
  set_has_m_singlereward();
  m_singlereward_ = value;
}

// optional int32 m_taskGroupID = 7;
inline bool E_FestivalMuban_donate::has_m_taskgroupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_donate::set_has_m_taskgroupid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_donate::clear_has_m_taskgroupid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_donate::clear_m_taskgroupid() {
  m_taskgroupid_ = 0;
  clear_has_m_taskgroupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate::m_taskgroupid() const {
  return m_taskgroupid_;
}
inline void E_FestivalMuban_donate::set_m_taskgroupid(::google::protobuf::int32 value) {
  set_has_m_taskgroupid();
  m_taskgroupid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_donate

// repeated .proto_ff.E_FestivalMuban_donate E_FestivalMuban_donate_List = 1;
inline int Sheet_FestivalMuban_donate::e_festivalmuban_donate_list_size() const {
  return e_festivalmuban_donate_list_.size();
}
inline void Sheet_FestivalMuban_donate::clear_e_festivalmuban_donate_list() {
  e_festivalmuban_donate_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_donate& Sheet_FestivalMuban_donate::e_festivalmuban_donate_list(int index) const {
  return e_festivalmuban_donate_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_donate* Sheet_FestivalMuban_donate::mutable_e_festivalmuban_donate_list(int index) {
  return e_festivalmuban_donate_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_donate* Sheet_FestivalMuban_donate::add_e_festivalmuban_donate_list() {
  return e_festivalmuban_donate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate >&
Sheet_FestivalMuban_donate::e_festivalmuban_donate_list() const {
  return e_festivalmuban_donate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate >*
Sheet_FestivalMuban_donate::mutable_e_festivalmuban_donate_list() {
  return &e_festivalmuban_donate_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_donate_sever

// optional int32 m_id = 1;
inline bool E_FestivalMuban_donate_sever::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_donate_sever::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_donate_sever::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_donate_sever::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_sever::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_donate_sever::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_donate_sever::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_donate_sever::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_donate_sever::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_donate_sever::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_sever::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_donate_sever::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_value = 3;
inline bool E_FestivalMuban_donate_sever::has_m_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_donate_sever::set_has_m_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_donate_sever::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_donate_sever::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_sever::m_value() const {
  return m_value_;
}
inline void E_FestivalMuban_donate_sever::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_type = 4;
inline bool E_FestivalMuban_donate_sever::has_m_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_donate_sever::set_has_m_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_donate_sever::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_donate_sever::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_sever::m_type() const {
  return m_type_;
}
inline void E_FestivalMuban_donate_sever::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional string m_typeArg = 5;
inline bool E_FestivalMuban_donate_sever::has_m_typearg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_donate_sever::set_has_m_typearg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_donate_sever::clear_has_m_typearg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_donate_sever::clear_m_typearg() {
  if (m_typearg_ != &::google::protobuf::internal::kEmptyString) {
    m_typearg_->clear();
  }
  clear_has_m_typearg();
}
inline const ::std::string& E_FestivalMuban_donate_sever::m_typearg() const {
  return *m_typearg_;
}
inline void E_FestivalMuban_donate_sever::set_m_typearg(const ::std::string& value) {
  set_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    m_typearg_ = new ::std::string;
  }
  m_typearg_->assign(value);
}
inline void E_FestivalMuban_donate_sever::set_m_typearg(const char* value) {
  set_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    m_typearg_ = new ::std::string;
  }
  m_typearg_->assign(value);
}
inline void E_FestivalMuban_donate_sever::set_m_typearg(const char* value, size_t size) {
  set_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    m_typearg_ = new ::std::string;
  }
  m_typearg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_donate_sever::mutable_m_typearg() {
  set_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    m_typearg_ = new ::std::string;
  }
  return m_typearg_;
}
inline ::std::string* E_FestivalMuban_donate_sever::release_m_typearg() {
  clear_has_m_typearg();
  if (m_typearg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_typearg_;
    m_typearg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_donate_sever::set_allocated_m_typearg(::std::string* m_typearg) {
  if (m_typearg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typearg_;
  }
  if (m_typearg) {
    set_has_m_typearg();
    m_typearg_ = m_typearg;
  } else {
    clear_has_m_typearg();
    m_typearg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_pro = 6;
inline bool E_FestivalMuban_donate_sever::has_m_pro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_donate_sever::set_has_m_pro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_donate_sever::clear_has_m_pro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_donate_sever::clear_m_pro() {
  if (m_pro_ != &::google::protobuf::internal::kEmptyString) {
    m_pro_->clear();
  }
  clear_has_m_pro();
}
inline const ::std::string& E_FestivalMuban_donate_sever::m_pro() const {
  return *m_pro_;
}
inline void E_FestivalMuban_donate_sever::set_m_pro(const ::std::string& value) {
  set_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    m_pro_ = new ::std::string;
  }
  m_pro_->assign(value);
}
inline void E_FestivalMuban_donate_sever::set_m_pro(const char* value) {
  set_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    m_pro_ = new ::std::string;
  }
  m_pro_->assign(value);
}
inline void E_FestivalMuban_donate_sever::set_m_pro(const char* value, size_t size) {
  set_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    m_pro_ = new ::std::string;
  }
  m_pro_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_donate_sever::mutable_m_pro() {
  set_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    m_pro_ = new ::std::string;
  }
  return m_pro_;
}
inline ::std::string* E_FestivalMuban_donate_sever::release_m_pro() {
  clear_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_pro_;
    m_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_donate_sever::set_allocated_m_pro(::std::string* m_pro) {
  if (m_pro_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pro_;
  }
  if (m_pro) {
    set_has_m_pro();
    m_pro_ = m_pro;
  } else {
    clear_has_m_pro();
    m_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_num = 7;
inline bool E_FestivalMuban_donate_sever::has_m_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_donate_sever::set_has_m_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_donate_sever::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_donate_sever::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_sever::m_num() const {
  return m_num_;
}
inline void E_FestivalMuban_donate_sever::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_donate_sever

// repeated .proto_ff.E_FestivalMuban_donate_sever E_FestivalMuban_donate_sever_List = 1;
inline int Sheet_FestivalMuban_donate_sever::e_festivalmuban_donate_sever_list_size() const {
  return e_festivalmuban_donate_sever_list_.size();
}
inline void Sheet_FestivalMuban_donate_sever::clear_e_festivalmuban_donate_sever_list() {
  e_festivalmuban_donate_sever_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_donate_sever& Sheet_FestivalMuban_donate_sever::e_festivalmuban_donate_sever_list(int index) const {
  return e_festivalmuban_donate_sever_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_donate_sever* Sheet_FestivalMuban_donate_sever::mutable_e_festivalmuban_donate_sever_list(int index) {
  return e_festivalmuban_donate_sever_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_donate_sever* Sheet_FestivalMuban_donate_sever::add_e_festivalmuban_donate_sever_list() {
  return e_festivalmuban_donate_sever_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_sever >&
Sheet_FestivalMuban_donate_sever::e_festivalmuban_donate_sever_list() const {
  return e_festivalmuban_donate_sever_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_sever >*
Sheet_FestivalMuban_donate_sever::mutable_e_festivalmuban_donate_sever_list() {
  return &e_festivalmuban_donate_sever_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_donate_single

// optional int32 m_id = 1;
inline bool E_FestivalMuban_donate_single::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_donate_single::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_donate_single::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_donate_single::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_single::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_donate_single::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_donate_single::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_donate_single::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_donate_single::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_donate_single::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_single::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_donate_single::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_value = 3;
inline bool E_FestivalMuban_donate_single::has_m_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_donate_single::set_has_m_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_donate_single::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_donate_single::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_single::m_value() const {
  return m_value_;
}
inline void E_FestivalMuban_donate_single::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional string m_itemID = 4;
inline bool E_FestivalMuban_donate_single::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_donate_single::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_donate_single::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_donate_single::clear_m_itemid() {
  if (m_itemid_ != &::google::protobuf::internal::kEmptyString) {
    m_itemid_->clear();
  }
  clear_has_m_itemid();
}
inline const ::std::string& E_FestivalMuban_donate_single::m_itemid() const {
  return *m_itemid_;
}
inline void E_FestivalMuban_donate_single::set_m_itemid(const ::std::string& value) {
  set_has_m_itemid();
  if (m_itemid_ == &::google::protobuf::internal::kEmptyString) {
    m_itemid_ = new ::std::string;
  }
  m_itemid_->assign(value);
}
inline void E_FestivalMuban_donate_single::set_m_itemid(const char* value) {
  set_has_m_itemid();
  if (m_itemid_ == &::google::protobuf::internal::kEmptyString) {
    m_itemid_ = new ::std::string;
  }
  m_itemid_->assign(value);
}
inline void E_FestivalMuban_donate_single::set_m_itemid(const char* value, size_t size) {
  set_has_m_itemid();
  if (m_itemid_ == &::google::protobuf::internal::kEmptyString) {
    m_itemid_ = new ::std::string;
  }
  m_itemid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_donate_single::mutable_m_itemid() {
  set_has_m_itemid();
  if (m_itemid_ == &::google::protobuf::internal::kEmptyString) {
    m_itemid_ = new ::std::string;
  }
  return m_itemid_;
}
inline ::std::string* E_FestivalMuban_donate_single::release_m_itemid() {
  clear_has_m_itemid();
  if (m_itemid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_itemid_;
    m_itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_donate_single::set_allocated_m_itemid(::std::string* m_itemid) {
  if (m_itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_itemid_;
  }
  if (m_itemid) {
    set_has_m_itemid();
    m_itemid_ = m_itemid;
  } else {
    clear_has_m_itemid();
    m_itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_pro = 5;
inline bool E_FestivalMuban_donate_single::has_m_pro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_donate_single::set_has_m_pro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_donate_single::clear_has_m_pro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_donate_single::clear_m_pro() {
  if (m_pro_ != &::google::protobuf::internal::kEmptyString) {
    m_pro_->clear();
  }
  clear_has_m_pro();
}
inline const ::std::string& E_FestivalMuban_donate_single::m_pro() const {
  return *m_pro_;
}
inline void E_FestivalMuban_donate_single::set_m_pro(const ::std::string& value) {
  set_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    m_pro_ = new ::std::string;
  }
  m_pro_->assign(value);
}
inline void E_FestivalMuban_donate_single::set_m_pro(const char* value) {
  set_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    m_pro_ = new ::std::string;
  }
  m_pro_->assign(value);
}
inline void E_FestivalMuban_donate_single::set_m_pro(const char* value, size_t size) {
  set_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    m_pro_ = new ::std::string;
  }
  m_pro_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_donate_single::mutable_m_pro() {
  set_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    m_pro_ = new ::std::string;
  }
  return m_pro_;
}
inline ::std::string* E_FestivalMuban_donate_single::release_m_pro() {
  clear_has_m_pro();
  if (m_pro_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_pro_;
    m_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_donate_single::set_allocated_m_pro(::std::string* m_pro) {
  if (m_pro_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pro_;
  }
  if (m_pro) {
    set_has_m_pro();
    m_pro_ = m_pro;
  } else {
    clear_has_m_pro();
    m_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_num = 6;
inline bool E_FestivalMuban_donate_single::has_m_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_donate_single::set_has_m_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_donate_single::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_donate_single::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_single::m_num() const {
  return m_num_;
}
inline void E_FestivalMuban_donate_single::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_donate_single

// repeated .proto_ff.E_FestivalMuban_donate_single E_FestivalMuban_donate_single_List = 1;
inline int Sheet_FestivalMuban_donate_single::e_festivalmuban_donate_single_list_size() const {
  return e_festivalmuban_donate_single_list_.size();
}
inline void Sheet_FestivalMuban_donate_single::clear_e_festivalmuban_donate_single_list() {
  e_festivalmuban_donate_single_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_donate_single& Sheet_FestivalMuban_donate_single::e_festivalmuban_donate_single_list(int index) const {
  return e_festivalmuban_donate_single_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_donate_single* Sheet_FestivalMuban_donate_single::mutable_e_festivalmuban_donate_single_list(int index) {
  return e_festivalmuban_donate_single_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_donate_single* Sheet_FestivalMuban_donate_single::add_e_festivalmuban_donate_single_list() {
  return e_festivalmuban_donate_single_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_single >&
Sheet_FestivalMuban_donate_single::e_festivalmuban_donate_single_list() const {
  return e_festivalmuban_donate_single_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_single >*
Sheet_FestivalMuban_donate_single::mutable_e_festivalmuban_donate_single_list() {
  return &e_festivalmuban_donate_single_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_donate_task

// optional int32 m_id = 1;
inline bool E_FestivalMuban_donate_task::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_donate_task::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_donate_task::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_donate_task::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_task::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_donate_task::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_donate_task::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_donate_task::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_donate_task::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_donate_task::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_task::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_donate_task::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_eventType = 3;
inline bool E_FestivalMuban_donate_task::has_m_eventtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_donate_task::set_has_m_eventtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_donate_task::clear_has_m_eventtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_donate_task::clear_m_eventtype() {
  m_eventtype_ = 0;
  clear_has_m_eventtype();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_task::m_eventtype() const {
  return m_eventtype_;
}
inline void E_FestivalMuban_donate_task::set_m_eventtype(::google::protobuf::int32 value) {
  set_has_m_eventtype();
  m_eventtype_ = value;
}

// optional int32 m_reachPrice = 4;
inline bool E_FestivalMuban_donate_task::has_m_reachprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_donate_task::set_has_m_reachprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_donate_task::clear_has_m_reachprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_donate_task::clear_m_reachprice() {
  m_reachprice_ = 0;
  clear_has_m_reachprice();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_task::m_reachprice() const {
  return m_reachprice_;
}
inline void E_FestivalMuban_donate_task::set_m_reachprice(::google::protobuf::int32 value) {
  set_has_m_reachprice();
  m_reachprice_ = value;
}

// optional int32 m_itemID = 5;
inline bool E_FestivalMuban_donate_task::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_donate_task::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_donate_task::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_donate_task::clear_m_itemid() {
  m_itemid_ = 0;
  clear_has_m_itemid();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_task::m_itemid() const {
  return m_itemid_;
}
inline void E_FestivalMuban_donate_task::set_m_itemid(::google::protobuf::int32 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_itemNum = 6;
inline bool E_FestivalMuban_donate_task::has_m_itemnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_donate_task::set_has_m_itemnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_donate_task::clear_has_m_itemnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_donate_task::clear_m_itemnum() {
  m_itemnum_ = 0;
  clear_has_m_itemnum();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_task::m_itemnum() const {
  return m_itemnum_;
}
inline void E_FestivalMuban_donate_task::set_m_itemnum(::google::protobuf::int32 value) {
  set_has_m_itemnum();
  m_itemnum_ = value;
}

// repeated int32 m_param = 7;
inline int E_FestivalMuban_donate_task::m_param_size() const {
  return m_param_.size();
}
inline void E_FestivalMuban_donate_task::clear_m_param() {
  m_param_.Clear();
}
inline ::google::protobuf::int32 E_FestivalMuban_donate_task::m_param(int index) const {
  return m_param_.Get(index);
}
inline void E_FestivalMuban_donate_task::set_m_param(int index, ::google::protobuf::int32 value) {
  m_param_.Set(index, value);
}
inline void E_FestivalMuban_donate_task::add_m_param(::google::protobuf::int32 value) {
  m_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_FestivalMuban_donate_task::m_param() const {
  return m_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_FestivalMuban_donate_task::mutable_m_param() {
  return &m_param_;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_donate_task

// repeated .proto_ff.E_FestivalMuban_donate_task E_FestivalMuban_donate_task_List = 1;
inline int Sheet_FestivalMuban_donate_task::e_festivalmuban_donate_task_list_size() const {
  return e_festivalmuban_donate_task_list_.size();
}
inline void Sheet_FestivalMuban_donate_task::clear_e_festivalmuban_donate_task_list() {
  e_festivalmuban_donate_task_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_donate_task& Sheet_FestivalMuban_donate_task::e_festivalmuban_donate_task_list(int index) const {
  return e_festivalmuban_donate_task_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_donate_task* Sheet_FestivalMuban_donate_task::mutable_e_festivalmuban_donate_task_list(int index) {
  return e_festivalmuban_donate_task_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_donate_task* Sheet_FestivalMuban_donate_task::add_e_festivalmuban_donate_task_list() {
  return e_festivalmuban_donate_task_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_task >&
Sheet_FestivalMuban_donate_task::e_festivalmuban_donate_task_list() const {
  return e_festivalmuban_donate_task_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_donate_task >*
Sheet_FestivalMuban_donate_task::mutable_e_festivalmuban_donate_task_list() {
  return &e_festivalmuban_donate_task_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_online

// optional int32 m_id = 1;
inline bool E_FestivalMuban_online::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_online::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_online::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_online::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_online::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_online::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_online::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_online::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_online::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_online::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_online::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_online::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional string m_timeStart = 3;
inline bool E_FestivalMuban_online::has_m_timestart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_online::set_has_m_timestart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_online::clear_has_m_timestart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_online::clear_m_timestart() {
  if (m_timestart_ != &::google::protobuf::internal::kEmptyString) {
    m_timestart_->clear();
  }
  clear_has_m_timestart();
}
inline const ::std::string& E_FestivalMuban_online::m_timestart() const {
  return *m_timestart_;
}
inline void E_FestivalMuban_online::set_m_timestart(const ::std::string& value) {
  set_has_m_timestart();
  if (m_timestart_ == &::google::protobuf::internal::kEmptyString) {
    m_timestart_ = new ::std::string;
  }
  m_timestart_->assign(value);
}
inline void E_FestivalMuban_online::set_m_timestart(const char* value) {
  set_has_m_timestart();
  if (m_timestart_ == &::google::protobuf::internal::kEmptyString) {
    m_timestart_ = new ::std::string;
  }
  m_timestart_->assign(value);
}
inline void E_FestivalMuban_online::set_m_timestart(const char* value, size_t size) {
  set_has_m_timestart();
  if (m_timestart_ == &::google::protobuf::internal::kEmptyString) {
    m_timestart_ = new ::std::string;
  }
  m_timestart_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_online::mutable_m_timestart() {
  set_has_m_timestart();
  if (m_timestart_ == &::google::protobuf::internal::kEmptyString) {
    m_timestart_ = new ::std::string;
  }
  return m_timestart_;
}
inline ::std::string* E_FestivalMuban_online::release_m_timestart() {
  clear_has_m_timestart();
  if (m_timestart_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_timestart_;
    m_timestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_online::set_allocated_m_timestart(::std::string* m_timestart) {
  if (m_timestart_ != &::google::protobuf::internal::kEmptyString) {
    delete m_timestart_;
  }
  if (m_timestart) {
    set_has_m_timestart();
    m_timestart_ = m_timestart;
  } else {
    clear_has_m_timestart();
    m_timestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_timeEnd = 4;
inline bool E_FestivalMuban_online::has_m_timeend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_online::set_has_m_timeend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_online::clear_has_m_timeend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_online::clear_m_timeend() {
  if (m_timeend_ != &::google::protobuf::internal::kEmptyString) {
    m_timeend_->clear();
  }
  clear_has_m_timeend();
}
inline const ::std::string& E_FestivalMuban_online::m_timeend() const {
  return *m_timeend_;
}
inline void E_FestivalMuban_online::set_m_timeend(const ::std::string& value) {
  set_has_m_timeend();
  if (m_timeend_ == &::google::protobuf::internal::kEmptyString) {
    m_timeend_ = new ::std::string;
  }
  m_timeend_->assign(value);
}
inline void E_FestivalMuban_online::set_m_timeend(const char* value) {
  set_has_m_timeend();
  if (m_timeend_ == &::google::protobuf::internal::kEmptyString) {
    m_timeend_ = new ::std::string;
  }
  m_timeend_->assign(value);
}
inline void E_FestivalMuban_online::set_m_timeend(const char* value, size_t size) {
  set_has_m_timeend();
  if (m_timeend_ == &::google::protobuf::internal::kEmptyString) {
    m_timeend_ = new ::std::string;
  }
  m_timeend_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_online::mutable_m_timeend() {
  set_has_m_timeend();
  if (m_timeend_ == &::google::protobuf::internal::kEmptyString) {
    m_timeend_ = new ::std::string;
  }
  return m_timeend_;
}
inline ::std::string* E_FestivalMuban_online::release_m_timeend() {
  clear_has_m_timeend();
  if (m_timeend_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_timeend_;
    m_timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_online::set_allocated_m_timeend(::std::string* m_timeend) {
  if (m_timeend_ != &::google::protobuf::internal::kEmptyString) {
    delete m_timeend_;
  }
  if (m_timeend) {
    set_has_m_timeend();
    m_timeend_ = m_timeend;
  } else {
    clear_has_m_timeend();
    m_timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_itemID = 5;
inline bool E_FestivalMuban_online::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_online::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_online::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_online::clear_m_itemid() {
  m_itemid_ = 0;
  clear_has_m_itemid();
}
inline ::google::protobuf::int32 E_FestivalMuban_online::m_itemid() const {
  return m_itemid_;
}
inline void E_FestivalMuban_online::set_m_itemid(::google::protobuf::int32 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_itemNum = 6;
inline bool E_FestivalMuban_online::has_m_itemnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_online::set_has_m_itemnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_online::clear_has_m_itemnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_online::clear_m_itemnum() {
  m_itemnum_ = 0;
  clear_has_m_itemnum();
}
inline ::google::protobuf::int32 E_FestivalMuban_online::m_itemnum() const {
  return m_itemnum_;
}
inline void E_FestivalMuban_online::set_m_itemnum(::google::protobuf::int32 value) {
  set_has_m_itemnum();
  m_itemnum_ = value;
}

// optional int32 m_vip = 7;
inline bool E_FestivalMuban_online::has_m_vip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_online::set_has_m_vip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_online::clear_has_m_vip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_online::clear_m_vip() {
  m_vip_ = 0;
  clear_has_m_vip();
}
inline ::google::protobuf::int32 E_FestivalMuban_online::m_vip() const {
  return m_vip_;
}
inline void E_FestivalMuban_online::set_m_vip(::google::protobuf::int32 value) {
  set_has_m_vip();
  m_vip_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_online

// repeated .proto_ff.E_FestivalMuban_online E_FestivalMuban_online_List = 1;
inline int Sheet_FestivalMuban_online::e_festivalmuban_online_list_size() const {
  return e_festivalmuban_online_list_.size();
}
inline void Sheet_FestivalMuban_online::clear_e_festivalmuban_online_list() {
  e_festivalmuban_online_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_online& Sheet_FestivalMuban_online::e_festivalmuban_online_list(int index) const {
  return e_festivalmuban_online_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_online* Sheet_FestivalMuban_online::mutable_e_festivalmuban_online_list(int index) {
  return e_festivalmuban_online_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_online* Sheet_FestivalMuban_online::add_e_festivalmuban_online_list() {
  return e_festivalmuban_online_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_online >&
Sheet_FestivalMuban_online::e_festivalmuban_online_list() const {
  return e_festivalmuban_online_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_online >*
Sheet_FestivalMuban_online::mutable_e_festivalmuban_online_list() {
  return &e_festivalmuban_online_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_rturntable

// optional int32 m_id = 1;
inline bool E_FestivalMuban_rturntable::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_rturntable::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_rturntable::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_rturntable::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_rturntable::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_rturntable::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_rturntable::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_rturntable::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_rturntable::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_rturntable::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_rechargeGroupID = 3;
inline bool E_FestivalMuban_rturntable::has_m_rechargegroupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_rturntable::set_has_m_rechargegroupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_rturntable::clear_has_m_rechargegroupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_rturntable::clear_m_rechargegroupid() {
  m_rechargegroupid_ = 0;
  clear_has_m_rechargegroupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable::m_rechargegroupid() const {
  return m_rechargegroupid_;
}
inline void E_FestivalMuban_rturntable::set_m_rechargegroupid(::google::protobuf::int32 value) {
  set_has_m_rechargegroupid();
  m_rechargegroupid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_rturntable

// repeated .proto_ff.E_FestivalMuban_rturntable E_FestivalMuban_rturntable_List = 1;
inline int Sheet_FestivalMuban_rturntable::e_festivalmuban_rturntable_list_size() const {
  return e_festivalmuban_rturntable_list_.size();
}
inline void Sheet_FestivalMuban_rturntable::clear_e_festivalmuban_rturntable_list() {
  e_festivalmuban_rturntable_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_rturntable& Sheet_FestivalMuban_rturntable::e_festivalmuban_rturntable_list(int index) const {
  return e_festivalmuban_rturntable_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_rturntable* Sheet_FestivalMuban_rturntable::mutable_e_festivalmuban_rturntable_list(int index) {
  return e_festivalmuban_rturntable_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_rturntable* Sheet_FestivalMuban_rturntable::add_e_festivalmuban_rturntable_list() {
  return e_festivalmuban_rturntable_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable >&
Sheet_FestivalMuban_rturntable::e_festivalmuban_rturntable_list() const {
  return e_festivalmuban_rturntable_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable >*
Sheet_FestivalMuban_rturntable::mutable_e_festivalmuban_rturntable_list() {
  return &e_festivalmuban_rturntable_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_rturntable_recharge

// optional int32 m_id = 1;
inline bool E_FestivalMuban_rturntable_recharge::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_rturntable_recharge::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_rturntable_recharge::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_rturntable_recharge::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_rechargeID = 3;
inline bool E_FestivalMuban_rturntable_recharge::has_m_rechargeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge::set_has_m_rechargeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_has_m_rechargeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_m_rechargeid() {
  m_rechargeid_ = 0;
  clear_has_m_rechargeid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge::m_rechargeid() const {
  return m_rechargeid_;
}
inline void E_FestivalMuban_rturntable_recharge::set_m_rechargeid(::google::protobuf::int32 value) {
  set_has_m_rechargeid();
  m_rechargeid_ = value;
}

// optional int32 m_limit = 4;
inline bool E_FestivalMuban_rturntable_recharge::has_m_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge::set_has_m_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_has_m_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_m_limit() {
  m_limit_ = 0;
  clear_has_m_limit();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge::m_limit() const {
  return m_limit_;
}
inline void E_FestivalMuban_rturntable_recharge::set_m_limit(::google::protobuf::int32 value) {
  set_has_m_limit();
  m_limit_ = value;
}

// optional int32 m_ratioGroupID = 5;
inline bool E_FestivalMuban_rturntable_recharge::has_m_ratiogroupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge::set_has_m_ratiogroupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_has_m_ratiogroupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_rturntable_recharge::clear_m_ratiogroupid() {
  m_ratiogroupid_ = 0;
  clear_has_m_ratiogroupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge::m_ratiogroupid() const {
  return m_ratiogroupid_;
}
inline void E_FestivalMuban_rturntable_recharge::set_m_ratiogroupid(::google::protobuf::int32 value) {
  set_has_m_ratiogroupid();
  m_ratiogroupid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_rturntable_recharge

// repeated .proto_ff.E_FestivalMuban_rturntable_recharge E_FestivalMuban_rturntable_recharge_List = 1;
inline int Sheet_FestivalMuban_rturntable_recharge::e_festivalmuban_rturntable_recharge_list_size() const {
  return e_festivalmuban_rturntable_recharge_list_.size();
}
inline void Sheet_FestivalMuban_rturntable_recharge::clear_e_festivalmuban_rturntable_recharge_list() {
  e_festivalmuban_rturntable_recharge_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_rturntable_recharge& Sheet_FestivalMuban_rturntable_recharge::e_festivalmuban_rturntable_recharge_list(int index) const {
  return e_festivalmuban_rturntable_recharge_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_rturntable_recharge* Sheet_FestivalMuban_rturntable_recharge::mutable_e_festivalmuban_rturntable_recharge_list(int index) {
  return e_festivalmuban_rturntable_recharge_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_rturntable_recharge* Sheet_FestivalMuban_rturntable_recharge::add_e_festivalmuban_rturntable_recharge_list() {
  return e_festivalmuban_rturntable_recharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge >&
Sheet_FestivalMuban_rturntable_recharge::e_festivalmuban_rturntable_recharge_list() const {
  return e_festivalmuban_rturntable_recharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge >*
Sheet_FestivalMuban_rturntable_recharge::mutable_e_festivalmuban_rturntable_recharge_list() {
  return &e_festivalmuban_rturntable_recharge_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_rturntable_recharge_ratio

// optional int32 m_id = 1;
inline bool E_FestivalMuban_rturntable_recharge_ratio::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge_ratio::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_rturntable_recharge_ratio::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge_ratio::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_ratio = 3;
inline bool E_FestivalMuban_rturntable_recharge_ratio::has_m_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::set_has_m_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::clear_has_m_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::clear_m_ratio() {
  m_ratio_ = 0;
  clear_has_m_ratio();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge_ratio::m_ratio() const {
  return m_ratio_;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::set_m_ratio(::google::protobuf::int32 value) {
  set_has_m_ratio();
  m_ratio_ = value;
}

// optional int32 m_weight = 4;
inline bool E_FestivalMuban_rturntable_recharge_ratio::has_m_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::set_has_m_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::clear_has_m_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::clear_m_weight() {
  m_weight_ = 0;
  clear_has_m_weight();
}
inline ::google::protobuf::int32 E_FestivalMuban_rturntable_recharge_ratio::m_weight() const {
  return m_weight_;
}
inline void E_FestivalMuban_rturntable_recharge_ratio::set_m_weight(::google::protobuf::int32 value) {
  set_has_m_weight();
  m_weight_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_rturntable_recharge_ratio

// repeated .proto_ff.E_FestivalMuban_rturntable_recharge_ratio E_FestivalMuban_rturntable_recharge_ratio_List = 1;
inline int Sheet_FestivalMuban_rturntable_recharge_ratio::e_festivalmuban_rturntable_recharge_ratio_list_size() const {
  return e_festivalmuban_rturntable_recharge_ratio_list_.size();
}
inline void Sheet_FestivalMuban_rturntable_recharge_ratio::clear_e_festivalmuban_rturntable_recharge_ratio_list() {
  e_festivalmuban_rturntable_recharge_ratio_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio& Sheet_FestivalMuban_rturntable_recharge_ratio::e_festivalmuban_rturntable_recharge_ratio_list(int index) const {
  return e_festivalmuban_rturntable_recharge_ratio_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio* Sheet_FestivalMuban_rturntable_recharge_ratio::mutable_e_festivalmuban_rturntable_recharge_ratio_list(int index) {
  return e_festivalmuban_rturntable_recharge_ratio_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio* Sheet_FestivalMuban_rturntable_recharge_ratio::add_e_festivalmuban_rturntable_recharge_ratio_list() {
  return e_festivalmuban_rturntable_recharge_ratio_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio >&
Sheet_FestivalMuban_rturntable_recharge_ratio::e_festivalmuban_rturntable_recharge_ratio_list() const {
  return e_festivalmuban_rturntable_recharge_ratio_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_rturntable_recharge_ratio >*
Sheet_FestivalMuban_rturntable_recharge_ratio::mutable_e_festivalmuban_rturntable_recharge_ratio_list() {
  return &e_festivalmuban_rturntable_recharge_ratio_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_drawpize

// optional int32 m_id = 1;
inline bool E_FestivalMuban_drawpize::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_drawpize::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_drawpize::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_drawpize::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_drawpize::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_drawpize::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_drawpize::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_drawpize::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_drawpize::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_drawpize::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int64 m_costID = 3;
inline bool E_FestivalMuban_drawpize::has_m_costid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_drawpize::set_has_m_costid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_drawpize::clear_has_m_costid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_drawpize::clear_m_costid() {
  m_costid_ = GOOGLE_LONGLONG(0);
  clear_has_m_costid();
}
inline ::google::protobuf::int64 E_FestivalMuban_drawpize::m_costid() const {
  return m_costid_;
}
inline void E_FestivalMuban_drawpize::set_m_costid(::google::protobuf::int64 value) {
  set_has_m_costid();
  m_costid_ = value;
}

// optional string m_costNum = 4;
inline bool E_FestivalMuban_drawpize::has_m_costnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_drawpize::set_has_m_costnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_drawpize::clear_has_m_costnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_drawpize::clear_m_costnum() {
  if (m_costnum_ != &::google::protobuf::internal::kEmptyString) {
    m_costnum_->clear();
  }
  clear_has_m_costnum();
}
inline const ::std::string& E_FestivalMuban_drawpize::m_costnum() const {
  return *m_costnum_;
}
inline void E_FestivalMuban_drawpize::set_m_costnum(const ::std::string& value) {
  set_has_m_costnum();
  if (m_costnum_ == &::google::protobuf::internal::kEmptyString) {
    m_costnum_ = new ::std::string;
  }
  m_costnum_->assign(value);
}
inline void E_FestivalMuban_drawpize::set_m_costnum(const char* value) {
  set_has_m_costnum();
  if (m_costnum_ == &::google::protobuf::internal::kEmptyString) {
    m_costnum_ = new ::std::string;
  }
  m_costnum_->assign(value);
}
inline void E_FestivalMuban_drawpize::set_m_costnum(const char* value, size_t size) {
  set_has_m_costnum();
  if (m_costnum_ == &::google::protobuf::internal::kEmptyString) {
    m_costnum_ = new ::std::string;
  }
  m_costnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_drawpize::mutable_m_costnum() {
  set_has_m_costnum();
  if (m_costnum_ == &::google::protobuf::internal::kEmptyString) {
    m_costnum_ = new ::std::string;
  }
  return m_costnum_;
}
inline ::std::string* E_FestivalMuban_drawpize::release_m_costnum() {
  clear_has_m_costnum();
  if (m_costnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_costnum_;
    m_costnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_drawpize::set_allocated_m_costnum(::std::string* m_costnum) {
  if (m_costnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_costnum_;
  }
  if (m_costnum) {
    set_has_m_costnum();
    m_costnum_ = m_costnum;
  } else {
    clear_has_m_costnum();
    m_costnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_poolGroupId = 5;
inline bool E_FestivalMuban_drawpize::has_m_poolgroupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_drawpize::set_has_m_poolgroupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_drawpize::clear_has_m_poolgroupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_drawpize::clear_m_poolgroupid() {
  m_poolgroupid_ = 0;
  clear_has_m_poolgroupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize::m_poolgroupid() const {
  return m_poolgroupid_;
}
inline void E_FestivalMuban_drawpize::set_m_poolgroupid(::google::protobuf::int32 value) {
  set_has_m_poolgroupid();
  m_poolgroupid_ = value;
}

// optional int32 m_totalGroupID = 6;
inline bool E_FestivalMuban_drawpize::has_m_totalgroupid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_drawpize::set_has_m_totalgroupid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_drawpize::clear_has_m_totalgroupid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_drawpize::clear_m_totalgroupid() {
  m_totalgroupid_ = 0;
  clear_has_m_totalgroupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize::m_totalgroupid() const {
  return m_totalgroupid_;
}
inline void E_FestivalMuban_drawpize::set_m_totalgroupid(::google::protobuf::int32 value) {
  set_has_m_totalgroupid();
  m_totalgroupid_ = value;
}

// optional int32 m_severLimit = 7;
inline bool E_FestivalMuban_drawpize::has_m_severlimit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_drawpize::set_has_m_severlimit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_drawpize::clear_has_m_severlimit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_drawpize::clear_m_severlimit() {
  m_severlimit_ = 0;
  clear_has_m_severlimit();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize::m_severlimit() const {
  return m_severlimit_;
}
inline void E_FestivalMuban_drawpize::set_m_severlimit(::google::protobuf::int32 value) {
  set_has_m_severlimit();
  m_severlimit_ = value;
}

// optional int32 m_protectTime = 8;
inline bool E_FestivalMuban_drawpize::has_m_protecttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_FestivalMuban_drawpize::set_has_m_protecttime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_FestivalMuban_drawpize::clear_has_m_protecttime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_FestivalMuban_drawpize::clear_m_protecttime() {
  m_protecttime_ = 0;
  clear_has_m_protecttime();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize::m_protecttime() const {
  return m_protecttime_;
}
inline void E_FestivalMuban_drawpize::set_m_protecttime(::google::protobuf::int32 value) {
  set_has_m_protecttime();
  m_protecttime_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_drawpize

// repeated .proto_ff.E_FestivalMuban_drawpize E_FestivalMuban_drawpize_List = 1;
inline int Sheet_FestivalMuban_drawpize::e_festivalmuban_drawpize_list_size() const {
  return e_festivalmuban_drawpize_list_.size();
}
inline void Sheet_FestivalMuban_drawpize::clear_e_festivalmuban_drawpize_list() {
  e_festivalmuban_drawpize_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_drawpize& Sheet_FestivalMuban_drawpize::e_festivalmuban_drawpize_list(int index) const {
  return e_festivalmuban_drawpize_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_drawpize* Sheet_FestivalMuban_drawpize::mutable_e_festivalmuban_drawpize_list(int index) {
  return e_festivalmuban_drawpize_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_drawpize* Sheet_FestivalMuban_drawpize::add_e_festivalmuban_drawpize_list() {
  return e_festivalmuban_drawpize_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize >&
Sheet_FestivalMuban_drawpize::e_festivalmuban_drawpize_list() const {
  return e_festivalmuban_drawpize_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize >*
Sheet_FestivalMuban_drawpize::mutable_e_festivalmuban_drawpize_list() {
  return &e_festivalmuban_drawpize_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_drawpize_pool

// optional int32 m_id = 1;
inline bool E_FestivalMuban_drawpize_pool::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_pool::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_drawpize_pool::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_pool::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int64 m_itemid = 3;
inline bool E_FestivalMuban_drawpize_pool::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_itemid() {
  m_itemid_ = GOOGLE_LONGLONG(0);
  clear_has_m_itemid();
}
inline ::google::protobuf::int64 E_FestivalMuban_drawpize_pool::m_itemid() const {
  return m_itemid_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_itemid(::google::protobuf::int64 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_num = 4;
inline bool E_FestivalMuban_drawpize_pool::has_m_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_pool::m_num() const {
  return m_num_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// optional int32 m_prof = 5;
inline bool E_FestivalMuban_drawpize_pool::has_m_prof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_prof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_prof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_prof() {
  m_prof_ = 0;
  clear_has_m_prof();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_pool::m_prof() const {
  return m_prof_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_prof(::google::protobuf::int32 value) {
  set_has_m_prof();
  m_prof_ = value;
}

// optional int32 m_weights = 6;
inline bool E_FestivalMuban_drawpize_pool::has_m_weights() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_weights() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_weights() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_weights() {
  m_weights_ = 0;
  clear_has_m_weights();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_pool::m_weights() const {
  return m_weights_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_weights(::google::protobuf::int32 value) {
  set_has_m_weights();
  m_weights_ = value;
}

// optional int32 m_proWeights = 7;
inline bool E_FestivalMuban_drawpize_pool::has_m_proweights() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_proweights() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_proweights() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_proweights() {
  m_proweights_ = 0;
  clear_has_m_proweights();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_pool::m_proweights() const {
  return m_proweights_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_proweights(::google::protobuf::int32 value) {
  set_has_m_proweights();
  m_proweights_ = value;
}

// optional int32 m_timeLimit = 8;
inline bool E_FestivalMuban_drawpize_pool::has_m_timelimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_timelimit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_timelimit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_timelimit() {
  m_timelimit_ = 0;
  clear_has_m_timelimit();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_pool::m_timelimit() const {
  return m_timelimit_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_timelimit(::google::protobuf::int32 value) {
  set_has_m_timelimit();
  m_timelimit_ = value;
}

// optional int32 m_Record = 9;
inline bool E_FestivalMuban_drawpize_pool::has_m_record() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_FestivalMuban_drawpize_pool::set_has_m_record() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_FestivalMuban_drawpize_pool::clear_has_m_record() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_FestivalMuban_drawpize_pool::clear_m_record() {
  m_record_ = 0;
  clear_has_m_record();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_pool::m_record() const {
  return m_record_;
}
inline void E_FestivalMuban_drawpize_pool::set_m_record(::google::protobuf::int32 value) {
  set_has_m_record();
  m_record_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_drawpize_pool

// repeated .proto_ff.E_FestivalMuban_drawpize_pool E_FestivalMuban_drawpize_pool_List = 1;
inline int Sheet_FestivalMuban_drawpize_pool::e_festivalmuban_drawpize_pool_list_size() const {
  return e_festivalmuban_drawpize_pool_list_.size();
}
inline void Sheet_FestivalMuban_drawpize_pool::clear_e_festivalmuban_drawpize_pool_list() {
  e_festivalmuban_drawpize_pool_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_drawpize_pool& Sheet_FestivalMuban_drawpize_pool::e_festivalmuban_drawpize_pool_list(int index) const {
  return e_festivalmuban_drawpize_pool_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_drawpize_pool* Sheet_FestivalMuban_drawpize_pool::mutable_e_festivalmuban_drawpize_pool_list(int index) {
  return e_festivalmuban_drawpize_pool_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_drawpize_pool* Sheet_FestivalMuban_drawpize_pool::add_e_festivalmuban_drawpize_pool_list() {
  return e_festivalmuban_drawpize_pool_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_pool >&
Sheet_FestivalMuban_drawpize_pool::e_festivalmuban_drawpize_pool_list() const {
  return e_festivalmuban_drawpize_pool_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_pool >*
Sheet_FestivalMuban_drawpize_pool::mutable_e_festivalmuban_drawpize_pool_list() {
  return &e_festivalmuban_drawpize_pool_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_drawpize_total

// optional int32 m_id = 1;
inline bool E_FestivalMuban_drawpize_total::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_drawpize_total::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_drawpize_total::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_drawpize_total::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_total::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_drawpize_total::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupid = 2;
inline bool E_FestivalMuban_drawpize_total::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_drawpize_total::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_drawpize_total::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_drawpize_total::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_total::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_drawpize_total::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_value = 3;
inline bool E_FestivalMuban_drawpize_total::has_m_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_drawpize_total::set_has_m_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_drawpize_total::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_drawpize_total::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_total::m_value() const {
  return m_value_;
}
inline void E_FestivalMuban_drawpize_total::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_itemID = 4;
inline bool E_FestivalMuban_drawpize_total::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_drawpize_total::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_drawpize_total::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_drawpize_total::clear_m_itemid() {
  m_itemid_ = 0;
  clear_has_m_itemid();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_total::m_itemid() const {
  return m_itemid_;
}
inline void E_FestivalMuban_drawpize_total::set_m_itemid(::google::protobuf::int32 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional int32 m_num = 5;
inline bool E_FestivalMuban_drawpize_total::has_m_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_drawpize_total::set_has_m_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_drawpize_total::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_drawpize_total::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_FestivalMuban_drawpize_total::m_num() const {
  return m_num_;
}
inline void E_FestivalMuban_drawpize_total::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_drawpize_total

// repeated .proto_ff.E_FestivalMuban_drawpize_total E_FestivalMuban_drawpize_total_List = 1;
inline int Sheet_FestivalMuban_drawpize_total::e_festivalmuban_drawpize_total_list_size() const {
  return e_festivalmuban_drawpize_total_list_.size();
}
inline void Sheet_FestivalMuban_drawpize_total::clear_e_festivalmuban_drawpize_total_list() {
  e_festivalmuban_drawpize_total_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_drawpize_total& Sheet_FestivalMuban_drawpize_total::e_festivalmuban_drawpize_total_list(int index) const {
  return e_festivalmuban_drawpize_total_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_drawpize_total* Sheet_FestivalMuban_drawpize_total::mutable_e_festivalmuban_drawpize_total_list(int index) {
  return e_festivalmuban_drawpize_total_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_drawpize_total* Sheet_FestivalMuban_drawpize_total::add_e_festivalmuban_drawpize_total_list() {
  return e_festivalmuban_drawpize_total_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_total >&
Sheet_FestivalMuban_drawpize_total::e_festivalmuban_drawpize_total_list() const {
  return e_festivalmuban_drawpize_total_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_drawpize_total >*
Sheet_FestivalMuban_drawpize_total::mutable_e_festivalmuban_drawpize_total_list() {
  return &e_festivalmuban_drawpize_total_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_totalrecharge

// optional int32 m_id = 1;
inline bool E_FestivalMuban_totalrecharge::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_totalrecharge::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_totalrecharge::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_totalrecharge::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_totalrecharge::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_totalrecharge::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_totalrecharge::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_totalrecharge::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_totalrecharge::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_totalrecharge::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_totalrecharge::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_totalrecharge::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_value = 3;
inline bool E_FestivalMuban_totalrecharge::has_m_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_totalrecharge::set_has_m_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_totalrecharge::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_totalrecharge::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_FestivalMuban_totalrecharge::m_value() const {
  return m_value_;
}
inline void E_FestivalMuban_totalrecharge::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_boxid = 4;
inline bool E_FestivalMuban_totalrecharge::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_totalrecharge::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_totalrecharge::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_totalrecharge::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_totalrecharge::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_totalrecharge::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_totalrecharge

// repeated .proto_ff.E_FestivalMuban_totalrecharge E_FestivalMuban_totalrecharge_List = 1;
inline int Sheet_FestivalMuban_totalrecharge::e_festivalmuban_totalrecharge_list_size() const {
  return e_festivalmuban_totalrecharge_list_.size();
}
inline void Sheet_FestivalMuban_totalrecharge::clear_e_festivalmuban_totalrecharge_list() {
  e_festivalmuban_totalrecharge_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_totalrecharge& Sheet_FestivalMuban_totalrecharge::e_festivalmuban_totalrecharge_list(int index) const {
  return e_festivalmuban_totalrecharge_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_totalrecharge* Sheet_FestivalMuban_totalrecharge::mutable_e_festivalmuban_totalrecharge_list(int index) {
  return e_festivalmuban_totalrecharge_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_totalrecharge* Sheet_FestivalMuban_totalrecharge::add_e_festivalmuban_totalrecharge_list() {
  return e_festivalmuban_totalrecharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_totalrecharge >&
Sheet_FestivalMuban_totalrecharge::e_festivalmuban_totalrecharge_list() const {
  return e_festivalmuban_totalrecharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_totalrecharge >*
Sheet_FestivalMuban_totalrecharge::mutable_e_festivalmuban_totalrecharge_list() {
  return &e_festivalmuban_totalrecharge_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_dailytotalrecharge

// optional int32 m_id = 1;
inline bool E_FestivalMuban_dailytotalrecharge::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_dailytotalrecharge::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_dailytotalrecharge::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_dailytotalrecharge::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_dailytotalrecharge::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_dailytotalrecharge::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_dailytotalrecharge::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_dailytotalrecharge::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_dailytotalrecharge::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_dailytotalrecharge::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_dailytotalrecharge::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_dailytotalrecharge::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_value = 3;
inline bool E_FestivalMuban_dailytotalrecharge::has_m_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_dailytotalrecharge::set_has_m_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_dailytotalrecharge::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_dailytotalrecharge::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_FestivalMuban_dailytotalrecharge::m_value() const {
  return m_value_;
}
inline void E_FestivalMuban_dailytotalrecharge::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_boxid = 4;
inline bool E_FestivalMuban_dailytotalrecharge::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_dailytotalrecharge::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_dailytotalrecharge::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_dailytotalrecharge::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_dailytotalrecharge::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_dailytotalrecharge::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_dailytotalrecharge

// repeated .proto_ff.E_FestivalMuban_dailytotalrecharge E_FestivalMuban_dailytotalrecharge_List = 1;
inline int Sheet_FestivalMuban_dailytotalrecharge::e_festivalmuban_dailytotalrecharge_list_size() const {
  return e_festivalmuban_dailytotalrecharge_list_.size();
}
inline void Sheet_FestivalMuban_dailytotalrecharge::clear_e_festivalmuban_dailytotalrecharge_list() {
  e_festivalmuban_dailytotalrecharge_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_dailytotalrecharge& Sheet_FestivalMuban_dailytotalrecharge::e_festivalmuban_dailytotalrecharge_list(int index) const {
  return e_festivalmuban_dailytotalrecharge_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_dailytotalrecharge* Sheet_FestivalMuban_dailytotalrecharge::mutable_e_festivalmuban_dailytotalrecharge_list(int index) {
  return e_festivalmuban_dailytotalrecharge_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_dailytotalrecharge* Sheet_FestivalMuban_dailytotalrecharge::add_e_festivalmuban_dailytotalrecharge_list() {
  return e_festivalmuban_dailytotalrecharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_dailytotalrecharge >&
Sheet_FestivalMuban_dailytotalrecharge::e_festivalmuban_dailytotalrecharge_list() const {
  return e_festivalmuban_dailytotalrecharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_dailytotalrecharge >*
Sheet_FestivalMuban_dailytotalrecharge::mutable_e_festivalmuban_dailytotalrecharge_list() {
  return &e_festivalmuban_dailytotalrecharge_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_play

// optional int32 m_id = 1;
inline bool E_FestivalMuban_play::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_play::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_play::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_play::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_play::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_play::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_period = 2;
inline bool E_FestivalMuban_play::has_m_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_play::set_has_m_period() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_play::clear_has_m_period() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_play::clear_m_period() {
  m_period_ = 0;
  clear_has_m_period();
}
inline ::google::protobuf::int32 E_FestivalMuban_play::m_period() const {
  return m_period_;
}
inline void E_FestivalMuban_play::set_m_period(::google::protobuf::int32 value) {
  set_has_m_period();
  m_period_ = value;
}

// optional int32 m_rewardGroup = 3;
inline bool E_FestivalMuban_play::has_m_rewardgroup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_play::set_has_m_rewardgroup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_play::clear_has_m_rewardgroup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_play::clear_m_rewardgroup() {
  m_rewardgroup_ = 0;
  clear_has_m_rewardgroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_play::m_rewardgroup() const {
  return m_rewardgroup_;
}
inline void E_FestivalMuban_play::set_m_rewardgroup(::google::protobuf::int32 value) {
  set_has_m_rewardgroup();
  m_rewardgroup_ = value;
}

// optional int32 m_gameGroup = 4;
inline bool E_FestivalMuban_play::has_m_gamegroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_play::set_has_m_gamegroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_play::clear_has_m_gamegroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_play::clear_m_gamegroup() {
  m_gamegroup_ = 0;
  clear_has_m_gamegroup();
}
inline ::google::protobuf::int32 E_FestivalMuban_play::m_gamegroup() const {
  return m_gamegroup_;
}
inline void E_FestivalMuban_play::set_m_gamegroup(::google::protobuf::int32 value) {
  set_has_m_gamegroup();
  m_gamegroup_ = value;
}

// repeated string m_openTime = 5;
inline int E_FestivalMuban_play::m_opentime_size() const {
  return m_opentime_.size();
}
inline void E_FestivalMuban_play::clear_m_opentime() {
  m_opentime_.Clear();
}
inline const ::std::string& E_FestivalMuban_play::m_opentime(int index) const {
  return m_opentime_.Get(index);
}
inline ::std::string* E_FestivalMuban_play::mutable_m_opentime(int index) {
  return m_opentime_.Mutable(index);
}
inline void E_FestivalMuban_play::set_m_opentime(int index, const ::std::string& value) {
  m_opentime_.Mutable(index)->assign(value);
}
inline void E_FestivalMuban_play::set_m_opentime(int index, const char* value) {
  m_opentime_.Mutable(index)->assign(value);
}
inline void E_FestivalMuban_play::set_m_opentime(int index, const char* value, size_t size) {
  m_opentime_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_play::add_m_opentime() {
  return m_opentime_.Add();
}
inline void E_FestivalMuban_play::add_m_opentime(const ::std::string& value) {
  m_opentime_.Add()->assign(value);
}
inline void E_FestivalMuban_play::add_m_opentime(const char* value) {
  m_opentime_.Add()->assign(value);
}
inline void E_FestivalMuban_play::add_m_opentime(const char* value, size_t size) {
  m_opentime_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
E_FestivalMuban_play::m_opentime() const {
  return m_opentime_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
E_FestivalMuban_play::mutable_m_opentime() {
  return &m_opentime_;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_play

// repeated .proto_ff.E_FestivalMuban_play E_FestivalMuban_play_List = 1;
inline int Sheet_FestivalMuban_play::e_festivalmuban_play_list_size() const {
  return e_festivalmuban_play_list_.size();
}
inline void Sheet_FestivalMuban_play::clear_e_festivalmuban_play_list() {
  e_festivalmuban_play_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_play& Sheet_FestivalMuban_play::e_festivalmuban_play_list(int index) const {
  return e_festivalmuban_play_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_play* Sheet_FestivalMuban_play::mutable_e_festivalmuban_play_list(int index) {
  return e_festivalmuban_play_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_play* Sheet_FestivalMuban_play::add_e_festivalmuban_play_list() {
  return e_festivalmuban_play_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play >&
Sheet_FestivalMuban_play::e_festivalmuban_play_list() const {
  return e_festivalmuban_play_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play >*
Sheet_FestivalMuban_play::mutable_e_festivalmuban_play_list() {
  return &e_festivalmuban_play_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_play_reward

// optional int32 m_id = 1;
inline bool E_FestivalMuban_play_reward::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_play_reward::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_play_reward::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_play_reward::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_reward::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_play_reward::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_play_reward::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_play_reward::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_play_reward::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_play_reward::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_reward::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_play_reward::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_points = 3;
inline bool E_FestivalMuban_play_reward::has_m_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_play_reward::set_has_m_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_play_reward::clear_has_m_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_play_reward::clear_m_points() {
  m_points_ = 0;
  clear_has_m_points();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_reward::m_points() const {
  return m_points_;
}
inline void E_FestivalMuban_play_reward::set_m_points(::google::protobuf::int32 value) {
  set_has_m_points();
  m_points_ = value;
}

// optional int32 m_boxID = 4;
inline bool E_FestivalMuban_play_reward::has_m_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_play_reward::set_has_m_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_play_reward::clear_has_m_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_play_reward::clear_m_boxid() {
  m_boxid_ = 0;
  clear_has_m_boxid();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_reward::m_boxid() const {
  return m_boxid_;
}
inline void E_FestivalMuban_play_reward::set_m_boxid(::google::protobuf::int32 value) {
  set_has_m_boxid();
  m_boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_play_reward

// repeated .proto_ff.E_FestivalMuban_play_reward E_FestivalMuban_play_reward_List = 1;
inline int Sheet_FestivalMuban_play_reward::e_festivalmuban_play_reward_list_size() const {
  return e_festivalmuban_play_reward_list_.size();
}
inline void Sheet_FestivalMuban_play_reward::clear_e_festivalmuban_play_reward_list() {
  e_festivalmuban_play_reward_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_play_reward& Sheet_FestivalMuban_play_reward::e_festivalmuban_play_reward_list(int index) const {
  return e_festivalmuban_play_reward_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_play_reward* Sheet_FestivalMuban_play_reward::mutable_e_festivalmuban_play_reward_list(int index) {
  return e_festivalmuban_play_reward_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_play_reward* Sheet_FestivalMuban_play_reward::add_e_festivalmuban_play_reward_list() {
  return e_festivalmuban_play_reward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_reward >&
Sheet_FestivalMuban_play_reward::e_festivalmuban_play_reward_list() const {
  return e_festivalmuban_play_reward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_reward >*
Sheet_FestivalMuban_play_reward::mutable_e_festivalmuban_play_reward_list() {
  return &e_festivalmuban_play_reward_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_play_game

// optional int32 m_id = 1;
inline bool E_FestivalMuban_play_game::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_play_game::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_play_game::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_play_game::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_game::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_play_game::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_groupID = 2;
inline bool E_FestivalMuban_play_game::has_m_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_play_game::set_has_m_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_play_game::clear_has_m_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_play_game::clear_m_groupid() {
  m_groupid_ = 0;
  clear_has_m_groupid();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_game::m_groupid() const {
  return m_groupid_;
}
inline void E_FestivalMuban_play_game::set_m_groupid(::google::protobuf::int32 value) {
  set_has_m_groupid();
  m_groupid_ = value;
}

// optional int32 m_order = 3;
inline bool E_FestivalMuban_play_game::has_m_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_play_game::set_has_m_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_play_game::clear_has_m_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_play_game::clear_m_order() {
  m_order_ = 0;
  clear_has_m_order();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_game::m_order() const {
  return m_order_;
}
inline void E_FestivalMuban_play_game::set_m_order(::google::protobuf::int32 value) {
  set_has_m_order();
  m_order_ = value;
}

// optional int32 m_playType = 4;
inline bool E_FestivalMuban_play_game::has_m_playtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_play_game::set_has_m_playtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_play_game::clear_has_m_playtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_play_game::clear_m_playtype() {
  m_playtype_ = 0;
  clear_has_m_playtype();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_game::m_playtype() const {
  return m_playtype_;
}
inline void E_FestivalMuban_play_game::set_m_playtype(::google::protobuf::int32 value) {
  set_has_m_playtype();
  m_playtype_ = value;
}

// optional string m_arg = 5;
inline bool E_FestivalMuban_play_game::has_m_arg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_FestivalMuban_play_game::set_has_m_arg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_FestivalMuban_play_game::clear_has_m_arg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_FestivalMuban_play_game::clear_m_arg() {
  if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
    m_arg_->clear();
  }
  clear_has_m_arg();
}
inline const ::std::string& E_FestivalMuban_play_game::m_arg() const {
  return *m_arg_;
}
inline void E_FestivalMuban_play_game::set_m_arg(const ::std::string& value) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(value);
}
inline void E_FestivalMuban_play_game::set_m_arg(const char* value) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(value);
}
inline void E_FestivalMuban_play_game::set_m_arg(const char* value, size_t size) {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  m_arg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_play_game::mutable_m_arg() {
  set_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    m_arg_ = new ::std::string;
  }
  return m_arg_;
}
inline ::std::string* E_FestivalMuban_play_game::release_m_arg() {
  clear_has_m_arg();
  if (m_arg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_arg_;
    m_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_play_game::set_allocated_m_arg(::std::string* m_arg) {
  if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_arg_;
  }
  if (m_arg) {
    set_has_m_arg();
    m_arg_ = m_arg;
  } else {
    clear_has_m_arg();
    m_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_rewardBox = 6;
inline bool E_FestivalMuban_play_game::has_m_rewardbox() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_FestivalMuban_play_game::set_has_m_rewardbox() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_FestivalMuban_play_game::clear_has_m_rewardbox() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_FestivalMuban_play_game::clear_m_rewardbox() {
  m_rewardbox_ = 0;
  clear_has_m_rewardbox();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_game::m_rewardbox() const {
  return m_rewardbox_;
}
inline void E_FestivalMuban_play_game::set_m_rewardbox(::google::protobuf::int32 value) {
  set_has_m_rewardbox();
  m_rewardbox_ = value;
}

// optional int32 m_preTime = 7;
inline bool E_FestivalMuban_play_game::has_m_pretime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_FestivalMuban_play_game::set_has_m_pretime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_FestivalMuban_play_game::clear_has_m_pretime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_FestivalMuban_play_game::clear_m_pretime() {
  m_pretime_ = 0;
  clear_has_m_pretime();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_game::m_pretime() const {
  return m_pretime_;
}
inline void E_FestivalMuban_play_game::set_m_pretime(::google::protobuf::int32 value) {
  set_has_m_pretime();
  m_pretime_ = value;
}

// repeated string m_playArg = 8;
inline int E_FestivalMuban_play_game::m_playarg_size() const {
  return m_playarg_.size();
}
inline void E_FestivalMuban_play_game::clear_m_playarg() {
  m_playarg_.Clear();
}
inline const ::std::string& E_FestivalMuban_play_game::m_playarg(int index) const {
  return m_playarg_.Get(index);
}
inline ::std::string* E_FestivalMuban_play_game::mutable_m_playarg(int index) {
  return m_playarg_.Mutable(index);
}
inline void E_FestivalMuban_play_game::set_m_playarg(int index, const ::std::string& value) {
  m_playarg_.Mutable(index)->assign(value);
}
inline void E_FestivalMuban_play_game::set_m_playarg(int index, const char* value) {
  m_playarg_.Mutable(index)->assign(value);
}
inline void E_FestivalMuban_play_game::set_m_playarg(int index, const char* value, size_t size) {
  m_playarg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_play_game::add_m_playarg() {
  return m_playarg_.Add();
}
inline void E_FestivalMuban_play_game::add_m_playarg(const ::std::string& value) {
  m_playarg_.Add()->assign(value);
}
inline void E_FestivalMuban_play_game::add_m_playarg(const char* value) {
  m_playarg_.Add()->assign(value);
}
inline void E_FestivalMuban_play_game::add_m_playarg(const char* value, size_t size) {
  m_playarg_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
E_FestivalMuban_play_game::m_playarg() const {
  return m_playarg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
E_FestivalMuban_play_game::mutable_m_playarg() {
  return &m_playarg_;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_play_game

// repeated .proto_ff.E_FestivalMuban_play_game E_FestivalMuban_play_game_List = 1;
inline int Sheet_FestivalMuban_play_game::e_festivalmuban_play_game_list_size() const {
  return e_festivalmuban_play_game_list_.size();
}
inline void Sheet_FestivalMuban_play_game::clear_e_festivalmuban_play_game_list() {
  e_festivalmuban_play_game_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_play_game& Sheet_FestivalMuban_play_game::e_festivalmuban_play_game_list(int index) const {
  return e_festivalmuban_play_game_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_play_game* Sheet_FestivalMuban_play_game::mutable_e_festivalmuban_play_game_list(int index) {
  return e_festivalmuban_play_game_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_play_game* Sheet_FestivalMuban_play_game::add_e_festivalmuban_play_game_list() {
  return e_festivalmuban_play_game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_game >&
Sheet_FestivalMuban_play_game::e_festivalmuban_play_game_list() const {
  return e_festivalmuban_play_game_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_game >*
Sheet_FestivalMuban_play_game::mutable_e_festivalmuban_play_game_list() {
  return &e_festivalmuban_play_game_list_;
}

// -------------------------------------------------------------------

// E_FestivalMuban_play_score

// optional int32 m_id = 1;
inline bool E_FestivalMuban_play_score::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_FestivalMuban_play_score::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_FestivalMuban_play_score::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_FestivalMuban_play_score::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_score::m_id() const {
  return m_id_;
}
inline void E_FestivalMuban_play_score::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_score = 2;
inline bool E_FestivalMuban_play_score::has_m_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_FestivalMuban_play_score::set_has_m_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_FestivalMuban_play_score::clear_has_m_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_FestivalMuban_play_score::clear_m_score() {
  m_score_ = 0;
  clear_has_m_score();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_score::m_score() const {
  return m_score_;
}
inline void E_FestivalMuban_play_score::set_m_score(::google::protobuf::int32 value) {
  set_has_m_score();
  m_score_ = value;
}

// optional string m_image = 3;
inline bool E_FestivalMuban_play_score::has_m_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_FestivalMuban_play_score::set_has_m_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_FestivalMuban_play_score::clear_has_m_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_FestivalMuban_play_score::clear_m_image() {
  if (m_image_ != &::google::protobuf::internal::kEmptyString) {
    m_image_->clear();
  }
  clear_has_m_image();
}
inline const ::std::string& E_FestivalMuban_play_score::m_image() const {
  return *m_image_;
}
inline void E_FestivalMuban_play_score::set_m_image(const ::std::string& value) {
  set_has_m_image();
  if (m_image_ == &::google::protobuf::internal::kEmptyString) {
    m_image_ = new ::std::string;
  }
  m_image_->assign(value);
}
inline void E_FestivalMuban_play_score::set_m_image(const char* value) {
  set_has_m_image();
  if (m_image_ == &::google::protobuf::internal::kEmptyString) {
    m_image_ = new ::std::string;
  }
  m_image_->assign(value);
}
inline void E_FestivalMuban_play_score::set_m_image(const char* value, size_t size) {
  set_has_m_image();
  if (m_image_ == &::google::protobuf::internal::kEmptyString) {
    m_image_ = new ::std::string;
  }
  m_image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_FestivalMuban_play_score::mutable_m_image() {
  set_has_m_image();
  if (m_image_ == &::google::protobuf::internal::kEmptyString) {
    m_image_ = new ::std::string;
  }
  return m_image_;
}
inline ::std::string* E_FestivalMuban_play_score::release_m_image() {
  clear_has_m_image();
  if (m_image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_image_;
    m_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_FestivalMuban_play_score::set_allocated_m_image(::std::string* m_image) {
  if (m_image_ != &::google::protobuf::internal::kEmptyString) {
    delete m_image_;
  }
  if (m_image) {
    set_has_m_image();
    m_image_ = m_image;
  } else {
    clear_has_m_image();
    m_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_point = 4;
inline bool E_FestivalMuban_play_score::has_m_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_FestivalMuban_play_score::set_has_m_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_FestivalMuban_play_score::clear_has_m_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_FestivalMuban_play_score::clear_m_point() {
  m_point_ = 0;
  clear_has_m_point();
}
inline ::google::protobuf::int32 E_FestivalMuban_play_score::m_point() const {
  return m_point_;
}
inline void E_FestivalMuban_play_score::set_m_point(::google::protobuf::int32 value) {
  set_has_m_point();
  m_point_ = value;
}

// -------------------------------------------------------------------

// Sheet_FestivalMuban_play_score

// repeated .proto_ff.E_FestivalMuban_play_score E_FestivalMuban_play_score_List = 1;
inline int Sheet_FestivalMuban_play_score::e_festivalmuban_play_score_list_size() const {
  return e_festivalmuban_play_score_list_.size();
}
inline void Sheet_FestivalMuban_play_score::clear_e_festivalmuban_play_score_list() {
  e_festivalmuban_play_score_list_.Clear();
}
inline const ::proto_ff::E_FestivalMuban_play_score& Sheet_FestivalMuban_play_score::e_festivalmuban_play_score_list(int index) const {
  return e_festivalmuban_play_score_list_.Get(index);
}
inline ::proto_ff::E_FestivalMuban_play_score* Sheet_FestivalMuban_play_score::mutable_e_festivalmuban_play_score_list(int index) {
  return e_festivalmuban_play_score_list_.Mutable(index);
}
inline ::proto_ff::E_FestivalMuban_play_score* Sheet_FestivalMuban_play_score::add_e_festivalmuban_play_score_list() {
  return e_festivalmuban_play_score_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_score >&
Sheet_FestivalMuban_play_score::e_festivalmuban_play_score_list() const {
  return e_festivalmuban_play_score_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_FestivalMuban_play_score >*
Sheet_FestivalMuban_play_score::mutable_e_festivalmuban_play_score_list() {
  return &e_festivalmuban_play_score_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fFestival_2eproto__INCLUDED
