// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Battlepass.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Battlepass.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_BattlepassBattlepass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BattlepassBattlepass_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_BattlepassBattlepass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_BattlepassBattlepass_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BattlepassRewardItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BattlepassRewardItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BattlepassRewardProitemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BattlepassRewardProitemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BattlepassReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BattlepassReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_BattlepassReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_BattlepassReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BattlepassTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BattlepassTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_BattlepassTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_BattlepassTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_BattlepassShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BattlepassShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_BattlepassShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_BattlepassShop_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fBattlepass_2eproto() {
  protobuf_AddDesc_E_5fBattlepass_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Battlepass.proto");
  GOOGLE_CHECK(file != NULL);
  E_BattlepassBattlepass_descriptor_ = file->message_type(0);
  static const int E_BattlepassBattlepass_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_tasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_freshcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_shopcurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_severopentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_openseverday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_closeseverday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_pricep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_presentexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_expcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_expprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, m_expitem_),
  };
  E_BattlepassBattlepass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BattlepassBattlepass_descriptor_,
      E_BattlepassBattlepass::default_instance_,
      E_BattlepassBattlepass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassBattlepass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BattlepassBattlepass));
  Sheet_BattlepassBattlepass_descriptor_ = file->message_type(1);
  static const int Sheet_BattlepassBattlepass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassBattlepass, e_battlepassbattlepass_list_),
  };
  Sheet_BattlepassBattlepass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_BattlepassBattlepass_descriptor_,
      Sheet_BattlepassBattlepass::default_instance_,
      Sheet_BattlepassBattlepass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassBattlepass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassBattlepass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_BattlepassBattlepass));
  E_BattlepassRewardItemDesc_descriptor_ = file->message_type(2);
  static const int E_BattlepassRewardItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassRewardItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassRewardItemDesc, m_id_),
  };
  E_BattlepassRewardItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BattlepassRewardItemDesc_descriptor_,
      E_BattlepassRewardItemDesc::default_instance_,
      E_BattlepassRewardItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassRewardItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassRewardItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BattlepassRewardItemDesc));
  E_BattlepassRewardProitemDesc_descriptor_ = file->message_type(3);
  static const int E_BattlepassRewardProitemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassRewardProitemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassRewardProitemDesc, m_id_),
  };
  E_BattlepassRewardProitemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BattlepassRewardProitemDesc_descriptor_,
      E_BattlepassRewardProitemDesc::default_instance_,
      E_BattlepassRewardProitemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassRewardProitemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassRewardProitemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BattlepassRewardProitemDesc));
  E_BattlepassReward_descriptor_ = file->message_type(4);
  static const int E_BattlepassReward_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_core_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_buylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_showitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, m_proitem_),
  };
  E_BattlepassReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BattlepassReward_descriptor_,
      E_BattlepassReward::default_instance_,
      E_BattlepassReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BattlepassReward));
  Sheet_BattlepassReward_descriptor_ = file->message_type(5);
  static const int Sheet_BattlepassReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassReward, e_battlepassreward_list_),
  };
  Sheet_BattlepassReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_BattlepassReward_descriptor_,
      Sheet_BattlepassReward::default_instance_,
      Sheet_BattlepassReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_BattlepassReward));
  E_BattlepassTask_descriptor_ = file->message_type(6);
  static const int E_BattlepassTask_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_taskrefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_reachprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, m_param_),
  };
  E_BattlepassTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BattlepassTask_descriptor_,
      E_BattlepassTask::default_instance_,
      E_BattlepassTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BattlepassTask));
  Sheet_BattlepassTask_descriptor_ = file->message_type(7);
  static const int Sheet_BattlepassTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassTask, e_battlepasstask_list_),
  };
  Sheet_BattlepassTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_BattlepassTask_descriptor_,
      Sheet_BattlepassTask::default_instance_,
      Sheet_BattlepassTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_BattlepassTask));
  E_BattlepassShop_descriptor_ = file->message_type(8);
  static const int E_BattlepassShop_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, m_costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, m_costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, m_numlimit_),
  };
  E_BattlepassShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BattlepassShop_descriptor_,
      E_BattlepassShop::default_instance_,
      E_BattlepassShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BattlepassShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BattlepassShop));
  Sheet_BattlepassShop_descriptor_ = file->message_type(9);
  static const int Sheet_BattlepassShop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassShop, e_battlepassshop_list_),
  };
  Sheet_BattlepassShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_BattlepassShop_descriptor_,
      Sheet_BattlepassShop::default_instance_,
      Sheet_BattlepassShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BattlepassShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_BattlepassShop));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fBattlepass_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BattlepassBattlepass_descriptor_, &E_BattlepassBattlepass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_BattlepassBattlepass_descriptor_, &Sheet_BattlepassBattlepass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BattlepassRewardItemDesc_descriptor_, &E_BattlepassRewardItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BattlepassRewardProitemDesc_descriptor_, &E_BattlepassRewardProitemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BattlepassReward_descriptor_, &E_BattlepassReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_BattlepassReward_descriptor_, &Sheet_BattlepassReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BattlepassTask_descriptor_, &E_BattlepassTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_BattlepassTask_descriptor_, &Sheet_BattlepassTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BattlepassShop_descriptor_, &E_BattlepassShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_BattlepassShop_descriptor_, &Sheet_BattlepassShop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fBattlepass_2eproto() {
  delete E_BattlepassBattlepass::default_instance_;
  delete E_BattlepassBattlepass_reflection_;
  delete Sheet_BattlepassBattlepass::default_instance_;
  delete Sheet_BattlepassBattlepass_reflection_;
  delete E_BattlepassRewardItemDesc::default_instance_;
  delete E_BattlepassRewardItemDesc_reflection_;
  delete E_BattlepassRewardProitemDesc::default_instance_;
  delete E_BattlepassRewardProitemDesc_reflection_;
  delete E_BattlepassReward::default_instance_;
  delete E_BattlepassReward_reflection_;
  delete Sheet_BattlepassReward::default_instance_;
  delete Sheet_BattlepassReward_reflection_;
  delete E_BattlepassTask::default_instance_;
  delete E_BattlepassTask_reflection_;
  delete Sheet_BattlepassTask::default_instance_;
  delete Sheet_BattlepassTask_reflection_;
  delete E_BattlepassShop::default_instance_;
  delete E_BattlepassShop_reflection_;
  delete Sheet_BattlepassShop::default_instance_;
  delete Sheet_BattlepassShop_reflection_;
}

void protobuf_AddDesc_E_5fBattlepass_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022E_Battlepass.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"\333\005\n\026E_BattlepassBattlepass"
    "\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\037\n\010m_reward\030\002 \001(\005"
    "B\r\302\377\024\t\345\245\226\345\212\261\347\273\204\022\035\n\006m_task\030\003 \001(\005B\r\302\377\024\t\344\273\273"
    "\345\212\241\347\273\204\022-\n\tm_tasknum\030\004 \001(\tB\032\302\377\024\022\346\212\275\345\217\226\344\273\273"
    "\345\212\241\346\225\260\351\207\217\220\301\024@\022%\n\013m_freshcost\030\005 \001(\005B\020\302\377\024\014"
    "\345\210\267\346\226\260\346\266\210\350\200\227\022\035\n\006m_shop\030\006 \001(\005B\r\302\377\024\t\345\272\227\351\223\272"
    "\347\273\204\022(\n\016m_shopcurrency\030\007 \001(\005B\020\302\377\024\014\345\225\206\345\272\227\350"
    "\264\247\345\270\201\0222\n\017m_severopentype\030\010 \001(\005B\031\302\377\024\025\346\234\215\345"
    "\212\241\345\231\250\345\274\200\346\224\276\347\261\273\345\236\213\022.\n\016m_openseverday\030\t \001("
    "\005B\026\302\377\024\022\345\274\200\345\247\213\345\274\200\346\234\215\346\227\266\351\227\264\022)\n\017m_closeseve"
    "rday\030\n \001(\005B\020\302\377\024\014\345\205\263\351\227\255\346\227\266\351\227\264\022%\n\013m_pricet"
    "ype\030\013 \001(\005B\020\302\377\024\014\344\273\267\346\240\274\347\261\273\345\236\213\022$\n\007m_price\030\014"
    " \001(\005B\023\302\377\024\017\346\231\256\351\200\232\347\211\210\344\273\267\346\240\274\022+\n\010m_pricep\030\r "
    "\001(\005B\031\302\377\024\025\351\253\230\347\272\247\347\211\210\351\242\235\345\244\226\344\273\267\346\240\274\0225\n\014m_pres"
    "entexp\030\016 \001(\005B\037\302\377\024\033\351\253\230\347\272\247\347\211\210\350\265\240\351\200\201\347\232\204\347\273\217\351"
    "\252\214\345\200\274\022#\n\tm_expcost\030\017 \001(\005B\020\302\377\024\014\347\273\217\351\252\214\350\264\247\345"
    "\270\201\0220\n\nm_expprice\030\020 \001(\005B\034\302\377\024\030\346\257\217\350\264\247\345\270\201\345\205\221"
    "\346\215\242\347\273\217\351\252\214\345\200\274\0225\n\tm_expitem\030\021 \001(\005B\"\302\377\024\036\350\216\267"
    "\345\276\227\351\201\223\345\205\267\350\207\252\345\212\250\350\216\267\345\276\227\347\273\217\351\252\214\"i\n\032Sheet_Bat"
    "tlepassBattlepass\022K\n\033E_BattlepassBattlep"
    "ass_List\030\001 \003(\0132 .proto_ff.E_BattlepassBa"
    "ttlepassB\004\210\301\024\020\"M\n\032E_BattlepassRewardItem"
    "Desc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030"
    "\002 \001(\005B\006\302\377\024\002ID\"P\n\035E_BattlepassRewardProit"
    "emDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_i"
    "d\030\002 \001(\005B\006\302\377\024\002ID\"\252\003\n\022E_BattlepassReward\022\024"
    "\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022 \n\tm_groupid\030\002 \001(\005B"
    "\r\302\377\024\t\347\273\204\347\261\273\345\236\213\022\030\n\004m_lv\030\003 \001(\005B\n\302\377\024\006\347\255\211\347\272\247"
    "\022%\n\005m_exp\030\004 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200\347\273\217\351\252\214\022"
    "&\n\006m_core\030\005 \001(\005B\026\302\377\024\022\346\240\270\345\277\203\350\212\202\347\202\271\346\240\207\350\257\206\022"
    "*\n\nm_buylevel\030\006 \001(\005B\026\302\377\024\022\350\264\255\344\271\260\350\212\202\347\202\271\346\240\207"
    "\350\257\206\022#\n\nm_showitem\030\007 \001(\005B\017\302\377\024\013\345\261\225\347\244\272\347\211\251id"
    "\022J\n\006m_item\030\010 \003(\0132$.proto_ff.E_Battlepass"
    "RewardItemDescB\024\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\210\301\024\001\022V\n\t"
    "m_proitem\030\t \003(\0132\'.proto_ff.E_BattlepassR"
    "ewardProitemDescB\032\302\377\024\022\345\212\240\345\274\272\345\245\226\345\212\261\347\211\251\345\223\201"
    "\210\301\024\002\"^\n\026Sheet_BattlepassReward\022D\n\027E_Batt"
    "lepassReward_List\030\001 \003(\0132\034.proto_ff.E_Bat"
    "tlepassRewardB\005\210\301\024\200\020\"\336\002\n\020E_BattlepassTas"
    "k\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\007m_group\030\002 \001(\005"
    "B\t\302\377\024\005\347\273\204id\022\'\n\rm_taskrefresh\030\003 \001(\005B\020\302\377\024\014"
    "\344\273\273\345\212\241\347\261\273\345\236\213\022\036\n\004m_lv\030\004 \001(\005B\020\302\377\024\014\345\274\200\346\224\276\347\255"
    "\211\347\272\247\022\037\n\005m_tag\030\005 \001(\005B\020\302\377\024\014\346\211\200\345\261\236\351\241\265\347\255\276\022%\n"
    "\013m_eventtype\030\006 \001(\005B\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213\022#\n\014"
    "m_reachprice\030\007 \001(\005B\r\302\377\024\t\350\276\276\346\210\220\345\200\274\022\032\n\006m_l"
    "ink\030\010 \001(\005B\n\302\377\024\006\351\223\276\346\216\245\022\031\n\005m_exp\030\t \001(\005B\n\302\377"
    "\024\006\347\273\217\351\252\214\022+\n\007m_param\030\n \003(\005B\032\302\377\024\022\344\272\213\344\273\266\345\256\214"
    "\346\210\220\345\217\202\346\225\260\210\301\024\002\"W\n\024Sheet_BattlepassTask\022\?\n"
    "\025E_BattlepassTask_List\030\001 \003(\0132\032.proto_ff."
    "E_BattlepassTaskB\004\210\301\024 \"\372\001\n\020E_BattlepassS"
    "hop\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\007m_group\030\002 \001"
    "(\005B\t\302\377\024\005\347\273\204id\022\036\n\010m_itemid\030\003 \001(\005B\014\302\377\024\010\347\211\251"
    "\345\223\201id\022#\n\tm_itemnum\030\004 \001(\005B\020\302\377\024\014\347\211\251\345\223\201\346\225\260\351"
    "\207\217\022$\n\nm_costitem\030\005 \001(\005B\020\302\377\024\014\350\212\261\350\264\271\351\201\223\345\205\267"
    "\022#\n\tm_costnum\030\006 \001(\005B\020\302\377\024\014\350\212\261\350\264\271\346\225\260\351\207\217\022$\n"
    "\nm_numlimit\030\007 \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\225\260\351\207\217\"W\n\024S"
    "heet_BattlepassShop\022\?\n\025E_BattlepassShop_"
    "List\030\001 \003(\0132\032.proto_ff.E_BattlepassShopB\004"
    "\210\301\024 ", 2364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Battlepass.proto", &protobuf_RegisterTypes);
  E_BattlepassBattlepass::default_instance_ = new E_BattlepassBattlepass();
  Sheet_BattlepassBattlepass::default_instance_ = new Sheet_BattlepassBattlepass();
  E_BattlepassRewardItemDesc::default_instance_ = new E_BattlepassRewardItemDesc();
  E_BattlepassRewardProitemDesc::default_instance_ = new E_BattlepassRewardProitemDesc();
  E_BattlepassReward::default_instance_ = new E_BattlepassReward();
  Sheet_BattlepassReward::default_instance_ = new Sheet_BattlepassReward();
  E_BattlepassTask::default_instance_ = new E_BattlepassTask();
  Sheet_BattlepassTask::default_instance_ = new Sheet_BattlepassTask();
  E_BattlepassShop::default_instance_ = new E_BattlepassShop();
  Sheet_BattlepassShop::default_instance_ = new Sheet_BattlepassShop();
  E_BattlepassBattlepass::default_instance_->InitAsDefaultInstance();
  Sheet_BattlepassBattlepass::default_instance_->InitAsDefaultInstance();
  E_BattlepassRewardItemDesc::default_instance_->InitAsDefaultInstance();
  E_BattlepassRewardProitemDesc::default_instance_->InitAsDefaultInstance();
  E_BattlepassReward::default_instance_->InitAsDefaultInstance();
  Sheet_BattlepassReward::default_instance_->InitAsDefaultInstance();
  E_BattlepassTask::default_instance_->InitAsDefaultInstance();
  Sheet_BattlepassTask::default_instance_->InitAsDefaultInstance();
  E_BattlepassShop::default_instance_->InitAsDefaultInstance();
  Sheet_BattlepassShop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fBattlepass_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fBattlepass_2eproto {
  StaticDescriptorInitializer_E_5fBattlepass_2eproto() {
    protobuf_AddDesc_E_5fBattlepass_2eproto();
  }
} static_descriptor_initializer_E_5fBattlepass_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_BattlepassBattlepass::kMIdFieldNumber;
const int E_BattlepassBattlepass::kMRewardFieldNumber;
const int E_BattlepassBattlepass::kMTaskFieldNumber;
const int E_BattlepassBattlepass::kMTasknumFieldNumber;
const int E_BattlepassBattlepass::kMFreshcostFieldNumber;
const int E_BattlepassBattlepass::kMShopFieldNumber;
const int E_BattlepassBattlepass::kMShopcurrencyFieldNumber;
const int E_BattlepassBattlepass::kMSeveropentypeFieldNumber;
const int E_BattlepassBattlepass::kMOpenseverdayFieldNumber;
const int E_BattlepassBattlepass::kMCloseseverdayFieldNumber;
const int E_BattlepassBattlepass::kMPricetypeFieldNumber;
const int E_BattlepassBattlepass::kMPriceFieldNumber;
const int E_BattlepassBattlepass::kMPricepFieldNumber;
const int E_BattlepassBattlepass::kMPresentexpFieldNumber;
const int E_BattlepassBattlepass::kMExpcostFieldNumber;
const int E_BattlepassBattlepass::kMExppriceFieldNumber;
const int E_BattlepassBattlepass::kMExpitemFieldNumber;
#endif  // !_MSC_VER

E_BattlepassBattlepass::E_BattlepassBattlepass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BattlepassBattlepass::InitAsDefaultInstance() {
}

E_BattlepassBattlepass::E_BattlepassBattlepass(const E_BattlepassBattlepass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BattlepassBattlepass::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_reward_ = 0;
  m_task_ = 0;
  m_tasknum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_freshcost_ = 0;
  m_shop_ = 0;
  m_shopcurrency_ = 0;
  m_severopentype_ = 0;
  m_openseverday_ = 0;
  m_closeseverday_ = 0;
  m_pricetype_ = 0;
  m_price_ = 0;
  m_pricep_ = 0;
  m_presentexp_ = 0;
  m_expcost_ = 0;
  m_expprice_ = 0;
  m_expitem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BattlepassBattlepass::~E_BattlepassBattlepass() {
  SharedDtor();
}

void E_BattlepassBattlepass::SharedDtor() {
  if (m_tasknum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_tasknum_;
  }
  if (this != default_instance_) {
  }
}

void E_BattlepassBattlepass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BattlepassBattlepass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BattlepassBattlepass_descriptor_;
}

const E_BattlepassBattlepass& E_BattlepassBattlepass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

E_BattlepassBattlepass* E_BattlepassBattlepass::default_instance_ = NULL;

E_BattlepassBattlepass* E_BattlepassBattlepass::New() const {
  return new E_BattlepassBattlepass;
}

void E_BattlepassBattlepass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_reward_ = 0;
    m_task_ = 0;
    if (has_m_tasknum()) {
      if (m_tasknum_ != &::google::protobuf::internal::kEmptyString) {
        m_tasknum_->clear();
      }
    }
    m_freshcost_ = 0;
    m_shop_ = 0;
    m_shopcurrency_ = 0;
    m_severopentype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_openseverday_ = 0;
    m_closeseverday_ = 0;
    m_pricetype_ = 0;
    m_price_ = 0;
    m_pricep_ = 0;
    m_presentexp_ = 0;
    m_expcost_ = 0;
    m_expprice_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_expitem_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BattlepassBattlepass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_task;
        break;
      }

      // optional int32 m_task = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_task_)));
          set_has_m_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_tasknum;
        break;
      }

      // optional string m_tasknum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tasknum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_tasknum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_tasknum().data(), this->m_tasknum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_freshcost;
        break;
      }

      // optional int32 m_freshcost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_freshcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_freshcost_)));
          set_has_m_freshcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_shop;
        break;
      }

      // optional int32 m_shop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shop_)));
          set_has_m_shop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_shopcurrency;
        break;
      }

      // optional int32 m_shopcurrency = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shopcurrency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shopcurrency_)));
          set_has_m_shopcurrency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_severopentype;
        break;
      }

      // optional int32 m_severopentype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_severopentype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_severopentype_)));
          set_has_m_severopentype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_openseverday;
        break;
      }

      // optional int32 m_openseverday = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openseverday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openseverday_)));
          set_has_m_openseverday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_closeseverday;
        break;
      }

      // optional int32 m_closeseverday = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_closeseverday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_closeseverday_)));
          set_has_m_closeseverday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_pricetype;
        break;
      }

      // optional int32 m_pricetype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pricetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pricetype_)));
          set_has_m_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_pricep;
        break;
      }

      // optional int32 m_pricep = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pricep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pricep_)));
          set_has_m_pricep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_presentexp;
        break;
      }

      // optional int32 m_presentexp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_presentexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_presentexp_)));
          set_has_m_presentexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_expcost;
        break;
      }

      // optional int32 m_expcost = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expcost_)));
          set_has_m_expcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_expprice;
        break;
      }

      // optional int32 m_expprice = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expprice_)));
          set_has_m_expprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_expitem;
        break;
      }

      // optional int32 m_expitem = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expitem_)));
          set_has_m_expitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BattlepassBattlepass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_reward = 2;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_reward(), output);
  }

  // optional int32 m_task = 3;
  if (has_m_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_task(), output);
  }

  // optional string m_tasknum = 4;
  if (has_m_tasknum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tasknum().data(), this->m_tasknum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_tasknum(), output);
  }

  // optional int32 m_freshcost = 5;
  if (has_m_freshcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_freshcost(), output);
  }

  // optional int32 m_shop = 6;
  if (has_m_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_shop(), output);
  }

  // optional int32 m_shopcurrency = 7;
  if (has_m_shopcurrency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_shopcurrency(), output);
  }

  // optional int32 m_severopentype = 8;
  if (has_m_severopentype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_severopentype(), output);
  }

  // optional int32 m_openseverday = 9;
  if (has_m_openseverday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_openseverday(), output);
  }

  // optional int32 m_closeseverday = 10;
  if (has_m_closeseverday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_closeseverday(), output);
  }

  // optional int32 m_pricetype = 11;
  if (has_m_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_pricetype(), output);
  }

  // optional int32 m_price = 12;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_price(), output);
  }

  // optional int32 m_pricep = 13;
  if (has_m_pricep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_pricep(), output);
  }

  // optional int32 m_presentexp = 14;
  if (has_m_presentexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_presentexp(), output);
  }

  // optional int32 m_expcost = 15;
  if (has_m_expcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_expcost(), output);
  }

  // optional int32 m_expprice = 16;
  if (has_m_expprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_expprice(), output);
  }

  // optional int32 m_expitem = 17;
  if (has_m_expitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_expitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BattlepassBattlepass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_reward = 2;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_reward(), target);
  }

  // optional int32 m_task = 3;
  if (has_m_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_task(), target);
  }

  // optional string m_tasknum = 4;
  if (has_m_tasknum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tasknum().data(), this->m_tasknum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_tasknum(), target);
  }

  // optional int32 m_freshcost = 5;
  if (has_m_freshcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_freshcost(), target);
  }

  // optional int32 m_shop = 6;
  if (has_m_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_shop(), target);
  }

  // optional int32 m_shopcurrency = 7;
  if (has_m_shopcurrency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_shopcurrency(), target);
  }

  // optional int32 m_severopentype = 8;
  if (has_m_severopentype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_severopentype(), target);
  }

  // optional int32 m_openseverday = 9;
  if (has_m_openseverday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_openseverday(), target);
  }

  // optional int32 m_closeseverday = 10;
  if (has_m_closeseverday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_closeseverday(), target);
  }

  // optional int32 m_pricetype = 11;
  if (has_m_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_pricetype(), target);
  }

  // optional int32 m_price = 12;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_price(), target);
  }

  // optional int32 m_pricep = 13;
  if (has_m_pricep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_pricep(), target);
  }

  // optional int32 m_presentexp = 14;
  if (has_m_presentexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_presentexp(), target);
  }

  // optional int32 m_expcost = 15;
  if (has_m_expcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_expcost(), target);
  }

  // optional int32 m_expprice = 16;
  if (has_m_expprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_expprice(), target);
  }

  // optional int32 m_expitem = 17;
  if (has_m_expitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_expitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BattlepassBattlepass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_reward = 2;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_task = 3;
    if (has_m_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_task());
    }

    // optional string m_tasknum = 4;
    if (has_m_tasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_tasknum());
    }

    // optional int32 m_freshcost = 5;
    if (has_m_freshcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_freshcost());
    }

    // optional int32 m_shop = 6;
    if (has_m_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shop());
    }

    // optional int32 m_shopcurrency = 7;
    if (has_m_shopcurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shopcurrency());
    }

    // optional int32 m_severopentype = 8;
    if (has_m_severopentype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_severopentype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_openseverday = 9;
    if (has_m_openseverday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openseverday());
    }

    // optional int32 m_closeseverday = 10;
    if (has_m_closeseverday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_closeseverday());
    }

    // optional int32 m_pricetype = 11;
    if (has_m_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pricetype());
    }

    // optional int32 m_price = 12;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_pricep = 13;
    if (has_m_pricep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pricep());
    }

    // optional int32 m_presentexp = 14;
    if (has_m_presentexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_presentexp());
    }

    // optional int32 m_expcost = 15;
    if (has_m_expcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expcost());
    }

    // optional int32 m_expprice = 16;
    if (has_m_expprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expprice());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_expitem = 17;
    if (has_m_expitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BattlepassBattlepass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BattlepassBattlepass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BattlepassBattlepass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BattlepassBattlepass::MergeFrom(const E_BattlepassBattlepass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_task()) {
      set_m_task(from.m_task());
    }
    if (from.has_m_tasknum()) {
      set_m_tasknum(from.m_tasknum());
    }
    if (from.has_m_freshcost()) {
      set_m_freshcost(from.m_freshcost());
    }
    if (from.has_m_shop()) {
      set_m_shop(from.m_shop());
    }
    if (from.has_m_shopcurrency()) {
      set_m_shopcurrency(from.m_shopcurrency());
    }
    if (from.has_m_severopentype()) {
      set_m_severopentype(from.m_severopentype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_openseverday()) {
      set_m_openseverday(from.m_openseverday());
    }
    if (from.has_m_closeseverday()) {
      set_m_closeseverday(from.m_closeseverday());
    }
    if (from.has_m_pricetype()) {
      set_m_pricetype(from.m_pricetype());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_pricep()) {
      set_m_pricep(from.m_pricep());
    }
    if (from.has_m_presentexp()) {
      set_m_presentexp(from.m_presentexp());
    }
    if (from.has_m_expcost()) {
      set_m_expcost(from.m_expcost());
    }
    if (from.has_m_expprice()) {
      set_m_expprice(from.m_expprice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_expitem()) {
      set_m_expitem(from.m_expitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BattlepassBattlepass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BattlepassBattlepass::CopyFrom(const E_BattlepassBattlepass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BattlepassBattlepass::IsInitialized() const {

  return true;
}

void E_BattlepassBattlepass::Swap(E_BattlepassBattlepass* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_task_, other->m_task_);
    std::swap(m_tasknum_, other->m_tasknum_);
    std::swap(m_freshcost_, other->m_freshcost_);
    std::swap(m_shop_, other->m_shop_);
    std::swap(m_shopcurrency_, other->m_shopcurrency_);
    std::swap(m_severopentype_, other->m_severopentype_);
    std::swap(m_openseverday_, other->m_openseverday_);
    std::swap(m_closeseverday_, other->m_closeseverday_);
    std::swap(m_pricetype_, other->m_pricetype_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_pricep_, other->m_pricep_);
    std::swap(m_presentexp_, other->m_presentexp_);
    std::swap(m_expcost_, other->m_expcost_);
    std::swap(m_expprice_, other->m_expprice_);
    std::swap(m_expitem_, other->m_expitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BattlepassBattlepass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BattlepassBattlepass_descriptor_;
  metadata.reflection = E_BattlepassBattlepass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_BattlepassBattlepass::kEBattlepassBattlepassListFieldNumber;
#endif  // !_MSC_VER

Sheet_BattlepassBattlepass::Sheet_BattlepassBattlepass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_BattlepassBattlepass::InitAsDefaultInstance() {
}

Sheet_BattlepassBattlepass::Sheet_BattlepassBattlepass(const Sheet_BattlepassBattlepass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_BattlepassBattlepass::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_BattlepassBattlepass::~Sheet_BattlepassBattlepass() {
  SharedDtor();
}

void Sheet_BattlepassBattlepass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_BattlepassBattlepass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_BattlepassBattlepass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_BattlepassBattlepass_descriptor_;
}

const Sheet_BattlepassBattlepass& Sheet_BattlepassBattlepass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

Sheet_BattlepassBattlepass* Sheet_BattlepassBattlepass::default_instance_ = NULL;

Sheet_BattlepassBattlepass* Sheet_BattlepassBattlepass::New() const {
  return new Sheet_BattlepassBattlepass;
}

void Sheet_BattlepassBattlepass::Clear() {
  e_battlepassbattlepass_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_BattlepassBattlepass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_BattlepassBattlepass E_BattlepassBattlepass_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_BattlepassBattlepass_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_battlepassbattlepass_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_BattlepassBattlepass_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_BattlepassBattlepass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_BattlepassBattlepass E_BattlepassBattlepass_List = 1;
  for (int i = 0; i < this->e_battlepassbattlepass_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_battlepassbattlepass_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_BattlepassBattlepass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_BattlepassBattlepass E_BattlepassBattlepass_List = 1;
  for (int i = 0; i < this->e_battlepassbattlepass_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_battlepassbattlepass_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_BattlepassBattlepass::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_BattlepassBattlepass E_BattlepassBattlepass_List = 1;
  total_size += 1 * this->e_battlepassbattlepass_list_size();
  for (int i = 0; i < this->e_battlepassbattlepass_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_battlepassbattlepass_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_BattlepassBattlepass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_BattlepassBattlepass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_BattlepassBattlepass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_BattlepassBattlepass::MergeFrom(const Sheet_BattlepassBattlepass& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_battlepassbattlepass_list_.MergeFrom(from.e_battlepassbattlepass_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_BattlepassBattlepass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_BattlepassBattlepass::CopyFrom(const Sheet_BattlepassBattlepass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_BattlepassBattlepass::IsInitialized() const {

  return true;
}

void Sheet_BattlepassBattlepass::Swap(Sheet_BattlepassBattlepass* other) {
  if (other != this) {
    e_battlepassbattlepass_list_.Swap(&other->e_battlepassbattlepass_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_BattlepassBattlepass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_BattlepassBattlepass_descriptor_;
  metadata.reflection = Sheet_BattlepassBattlepass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BattlepassRewardItemDesc::kMNumFieldNumber;
const int E_BattlepassRewardItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_BattlepassRewardItemDesc::E_BattlepassRewardItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BattlepassRewardItemDesc::InitAsDefaultInstance() {
}

E_BattlepassRewardItemDesc::E_BattlepassRewardItemDesc(const E_BattlepassRewardItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BattlepassRewardItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BattlepassRewardItemDesc::~E_BattlepassRewardItemDesc() {
  SharedDtor();
}

void E_BattlepassRewardItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_BattlepassRewardItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BattlepassRewardItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BattlepassRewardItemDesc_descriptor_;
}

const E_BattlepassRewardItemDesc& E_BattlepassRewardItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

E_BattlepassRewardItemDesc* E_BattlepassRewardItemDesc::default_instance_ = NULL;

E_BattlepassRewardItemDesc* E_BattlepassRewardItemDesc::New() const {
  return new E_BattlepassRewardItemDesc;
}

void E_BattlepassRewardItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BattlepassRewardItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BattlepassRewardItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BattlepassRewardItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BattlepassRewardItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BattlepassRewardItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BattlepassRewardItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BattlepassRewardItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BattlepassRewardItemDesc::MergeFrom(const E_BattlepassRewardItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BattlepassRewardItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BattlepassRewardItemDesc::CopyFrom(const E_BattlepassRewardItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BattlepassRewardItemDesc::IsInitialized() const {

  return true;
}

void E_BattlepassRewardItemDesc::Swap(E_BattlepassRewardItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BattlepassRewardItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BattlepassRewardItemDesc_descriptor_;
  metadata.reflection = E_BattlepassRewardItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BattlepassRewardProitemDesc::kMNumFieldNumber;
const int E_BattlepassRewardProitemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_BattlepassRewardProitemDesc::E_BattlepassRewardProitemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BattlepassRewardProitemDesc::InitAsDefaultInstance() {
}

E_BattlepassRewardProitemDesc::E_BattlepassRewardProitemDesc(const E_BattlepassRewardProitemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BattlepassRewardProitemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BattlepassRewardProitemDesc::~E_BattlepassRewardProitemDesc() {
  SharedDtor();
}

void E_BattlepassRewardProitemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_BattlepassRewardProitemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BattlepassRewardProitemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BattlepassRewardProitemDesc_descriptor_;
}

const E_BattlepassRewardProitemDesc& E_BattlepassRewardProitemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

E_BattlepassRewardProitemDesc* E_BattlepassRewardProitemDesc::default_instance_ = NULL;

E_BattlepassRewardProitemDesc* E_BattlepassRewardProitemDesc::New() const {
  return new E_BattlepassRewardProitemDesc;
}

void E_BattlepassRewardProitemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BattlepassRewardProitemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BattlepassRewardProitemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BattlepassRewardProitemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BattlepassRewardProitemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BattlepassRewardProitemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BattlepassRewardProitemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BattlepassRewardProitemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BattlepassRewardProitemDesc::MergeFrom(const E_BattlepassRewardProitemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BattlepassRewardProitemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BattlepassRewardProitemDesc::CopyFrom(const E_BattlepassRewardProitemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BattlepassRewardProitemDesc::IsInitialized() const {

  return true;
}

void E_BattlepassRewardProitemDesc::Swap(E_BattlepassRewardProitemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BattlepassRewardProitemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BattlepassRewardProitemDesc_descriptor_;
  metadata.reflection = E_BattlepassRewardProitemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BattlepassReward::kMIdFieldNumber;
const int E_BattlepassReward::kMGroupidFieldNumber;
const int E_BattlepassReward::kMLvFieldNumber;
const int E_BattlepassReward::kMExpFieldNumber;
const int E_BattlepassReward::kMCoreFieldNumber;
const int E_BattlepassReward::kMBuylevelFieldNumber;
const int E_BattlepassReward::kMShowitemFieldNumber;
const int E_BattlepassReward::kMItemFieldNumber;
const int E_BattlepassReward::kMProitemFieldNumber;
#endif  // !_MSC_VER

E_BattlepassReward::E_BattlepassReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BattlepassReward::InitAsDefaultInstance() {
}

E_BattlepassReward::E_BattlepassReward(const E_BattlepassReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BattlepassReward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  m_core_ = 0;
  m_buylevel_ = 0;
  m_showitem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BattlepassReward::~E_BattlepassReward() {
  SharedDtor();
}

void E_BattlepassReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_BattlepassReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BattlepassReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BattlepassReward_descriptor_;
}

const E_BattlepassReward& E_BattlepassReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

E_BattlepassReward* E_BattlepassReward::default_instance_ = NULL;

E_BattlepassReward* E_BattlepassReward::New() const {
  return new E_BattlepassReward;
}

void E_BattlepassReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_lv_ = 0;
    m_exp_ = 0;
    m_core_ = 0;
    m_buylevel_ = 0;
    m_showitem_ = 0;
  }
  m_item_.Clear();
  m_proitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BattlepassReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_core;
        break;
      }

      // optional int32 m_core = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_core:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_core_)));
          set_has_m_core();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_buylevel;
        break;
      }

      // optional int32 m_buylevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buylevel_)));
          set_has_m_buylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_showitem;
        break;
      }

      // optional int32 m_showitem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_showitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_showitem_)));
          set_has_m_showitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_BattlepassRewardItemDesc m_item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_item;
        if (input->ExpectTag(74)) goto parse_m_proitem;
        break;
      }

      // repeated .proto_ff.E_BattlepassRewardProitemDesc m_proitem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_proitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_proitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_proitem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BattlepassReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // optional int32 m_exp = 4;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_exp(), output);
  }

  // optional int32 m_core = 5;
  if (has_m_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_core(), output);
  }

  // optional int32 m_buylevel = 6;
  if (has_m_buylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_buylevel(), output);
  }

  // optional int32 m_showitem = 7;
  if (has_m_showitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_showitem(), output);
  }

  // repeated .proto_ff.E_BattlepassRewardItemDesc m_item = 8;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_item(i), output);
  }

  // repeated .proto_ff.E_BattlepassRewardProitemDesc m_proitem = 9;
  for (int i = 0; i < this->m_proitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_proitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BattlepassReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // optional int32 m_exp = 4;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_exp(), target);
  }

  // optional int32 m_core = 5;
  if (has_m_core()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_core(), target);
  }

  // optional int32 m_buylevel = 6;
  if (has_m_buylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_buylevel(), target);
  }

  // optional int32 m_showitem = 7;
  if (has_m_showitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_showitem(), target);
  }

  // repeated .proto_ff.E_BattlepassRewardItemDesc m_item = 8;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_item(i), target);
  }

  // repeated .proto_ff.E_BattlepassRewardProitemDesc m_proitem = 9;
  for (int i = 0; i < this->m_proitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_proitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BattlepassReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 4;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_core = 5;
    if (has_m_core()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_core());
    }

    // optional int32 m_buylevel = 6;
    if (has_m_buylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buylevel());
    }

    // optional int32 m_showitem = 7;
    if (has_m_showitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_showitem());
    }

  }
  // repeated .proto_ff.E_BattlepassRewardItemDesc m_item = 8;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  // repeated .proto_ff.E_BattlepassRewardProitemDesc m_proitem = 9;
  total_size += 1 * this->m_proitem_size();
  for (int i = 0; i < this->m_proitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_proitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BattlepassReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BattlepassReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BattlepassReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BattlepassReward::MergeFrom(const E_BattlepassReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  m_proitem_.MergeFrom(from.m_proitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_core()) {
      set_m_core(from.m_core());
    }
    if (from.has_m_buylevel()) {
      set_m_buylevel(from.m_buylevel());
    }
    if (from.has_m_showitem()) {
      set_m_showitem(from.m_showitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BattlepassReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BattlepassReward::CopyFrom(const E_BattlepassReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BattlepassReward::IsInitialized() const {

  return true;
}

void E_BattlepassReward::Swap(E_BattlepassReward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_core_, other->m_core_);
    std::swap(m_buylevel_, other->m_buylevel_);
    std::swap(m_showitem_, other->m_showitem_);
    m_item_.Swap(&other->m_item_);
    m_proitem_.Swap(&other->m_proitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BattlepassReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BattlepassReward_descriptor_;
  metadata.reflection = E_BattlepassReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_BattlepassReward::kEBattlepassRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_BattlepassReward::Sheet_BattlepassReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_BattlepassReward::InitAsDefaultInstance() {
}

Sheet_BattlepassReward::Sheet_BattlepassReward(const Sheet_BattlepassReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_BattlepassReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_BattlepassReward::~Sheet_BattlepassReward() {
  SharedDtor();
}

void Sheet_BattlepassReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_BattlepassReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_BattlepassReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_BattlepassReward_descriptor_;
}

const Sheet_BattlepassReward& Sheet_BattlepassReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

Sheet_BattlepassReward* Sheet_BattlepassReward::default_instance_ = NULL;

Sheet_BattlepassReward* Sheet_BattlepassReward::New() const {
  return new Sheet_BattlepassReward;
}

void Sheet_BattlepassReward::Clear() {
  e_battlepassreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_BattlepassReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_BattlepassReward E_BattlepassReward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_BattlepassReward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_battlepassreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_BattlepassReward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_BattlepassReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_BattlepassReward E_BattlepassReward_List = 1;
  for (int i = 0; i < this->e_battlepassreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_battlepassreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_BattlepassReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_BattlepassReward E_BattlepassReward_List = 1;
  for (int i = 0; i < this->e_battlepassreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_battlepassreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_BattlepassReward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_BattlepassReward E_BattlepassReward_List = 1;
  total_size += 1 * this->e_battlepassreward_list_size();
  for (int i = 0; i < this->e_battlepassreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_battlepassreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_BattlepassReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_BattlepassReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_BattlepassReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_BattlepassReward::MergeFrom(const Sheet_BattlepassReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_battlepassreward_list_.MergeFrom(from.e_battlepassreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_BattlepassReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_BattlepassReward::CopyFrom(const Sheet_BattlepassReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_BattlepassReward::IsInitialized() const {

  return true;
}

void Sheet_BattlepassReward::Swap(Sheet_BattlepassReward* other) {
  if (other != this) {
    e_battlepassreward_list_.Swap(&other->e_battlepassreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_BattlepassReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_BattlepassReward_descriptor_;
  metadata.reflection = Sheet_BattlepassReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BattlepassTask::kMIdFieldNumber;
const int E_BattlepassTask::kMGroupFieldNumber;
const int E_BattlepassTask::kMTaskrefreshFieldNumber;
const int E_BattlepassTask::kMLvFieldNumber;
const int E_BattlepassTask::kMTagFieldNumber;
const int E_BattlepassTask::kMEventtypeFieldNumber;
const int E_BattlepassTask::kMReachpriceFieldNumber;
const int E_BattlepassTask::kMLinkFieldNumber;
const int E_BattlepassTask::kMExpFieldNumber;
const int E_BattlepassTask::kMParamFieldNumber;
#endif  // !_MSC_VER

E_BattlepassTask::E_BattlepassTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BattlepassTask::InitAsDefaultInstance() {
}

E_BattlepassTask::E_BattlepassTask(const E_BattlepassTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BattlepassTask::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_group_ = 0;
  m_taskrefresh_ = 0;
  m_lv_ = 0;
  m_tag_ = 0;
  m_eventtype_ = 0;
  m_reachprice_ = 0;
  m_link_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BattlepassTask::~E_BattlepassTask() {
  SharedDtor();
}

void E_BattlepassTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_BattlepassTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BattlepassTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BattlepassTask_descriptor_;
}

const E_BattlepassTask& E_BattlepassTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

E_BattlepassTask* E_BattlepassTask::default_instance_ = NULL;

E_BattlepassTask* E_BattlepassTask::New() const {
  return new E_BattlepassTask;
}

void E_BattlepassTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_group_ = 0;
    m_taskrefresh_ = 0;
    m_lv_ = 0;
    m_tag_ = 0;
    m_eventtype_ = 0;
    m_reachprice_ = 0;
    m_link_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_exp_ = 0;
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BattlepassTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_taskrefresh;
        break;
      }

      // optional int32 m_taskrefresh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskrefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taskrefresh_)));
          set_has_m_taskrefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_tag;
        break;
      }

      // optional int32 m_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tag_)));
          set_has_m_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_eventtype;
        break;
      }

      // optional int32 m_eventtype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_eventtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_eventtype_)));
          set_has_m_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_reachprice;
        break;
      }

      // optional int32 m_reachprice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reachprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reachprice_)));
          set_has_m_reachprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_link;
        break;
      }

      // optional int32 m_link = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_link_)));
          set_has_m_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BattlepassTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_group(), output);
  }

  // optional int32 m_taskrefresh = 3;
  if (has_m_taskrefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_taskrefresh(), output);
  }

  // optional int32 m_lv = 4;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lv(), output);
  }

  // optional int32 m_tag = 5;
  if (has_m_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_tag(), output);
  }

  // optional int32 m_eventtype = 6;
  if (has_m_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_eventtype(), output);
  }

  // optional int32 m_reachprice = 7;
  if (has_m_reachprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_reachprice(), output);
  }

  // optional int32 m_link = 8;
  if (has_m_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_link(), output);
  }

  // optional int32 m_exp = 9;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_exp(), output);
  }

  // repeated int32 m_param = 10;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BattlepassTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_group(), target);
  }

  // optional int32 m_taskrefresh = 3;
  if (has_m_taskrefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_taskrefresh(), target);
  }

  // optional int32 m_lv = 4;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lv(), target);
  }

  // optional int32 m_tag = 5;
  if (has_m_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_tag(), target);
  }

  // optional int32 m_eventtype = 6;
  if (has_m_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_eventtype(), target);
  }

  // optional int32 m_reachprice = 7;
  if (has_m_reachprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_reachprice(), target);
  }

  // optional int32 m_link = 8;
  if (has_m_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_link(), target);
  }

  // optional int32 m_exp = 9;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_exp(), target);
  }

  // repeated int32 m_param = 10;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BattlepassTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_group = 2;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional int32 m_taskrefresh = 3;
    if (has_m_taskrefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taskrefresh());
    }

    // optional int32 m_lv = 4;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_tag = 5;
    if (has_m_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tag());
    }

    // optional int32 m_eventtype = 6;
    if (has_m_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_eventtype());
    }

    // optional int32 m_reachprice = 7;
    if (has_m_reachprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reachprice());
    }

    // optional int32 m_link = 8;
    if (has_m_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_link());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_exp = 9;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  // repeated int32 m_param = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BattlepassTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BattlepassTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BattlepassTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BattlepassTask::MergeFrom(const E_BattlepassTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_taskrefresh()) {
      set_m_taskrefresh(from.m_taskrefresh());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_tag()) {
      set_m_tag(from.m_tag());
    }
    if (from.has_m_eventtype()) {
      set_m_eventtype(from.m_eventtype());
    }
    if (from.has_m_reachprice()) {
      set_m_reachprice(from.m_reachprice());
    }
    if (from.has_m_link()) {
      set_m_link(from.m_link());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BattlepassTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BattlepassTask::CopyFrom(const E_BattlepassTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BattlepassTask::IsInitialized() const {

  return true;
}

void E_BattlepassTask::Swap(E_BattlepassTask* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_taskrefresh_, other->m_taskrefresh_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_tag_, other->m_tag_);
    std::swap(m_eventtype_, other->m_eventtype_);
    std::swap(m_reachprice_, other->m_reachprice_);
    std::swap(m_link_, other->m_link_);
    std::swap(m_exp_, other->m_exp_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BattlepassTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BattlepassTask_descriptor_;
  metadata.reflection = E_BattlepassTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_BattlepassTask::kEBattlepassTaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_BattlepassTask::Sheet_BattlepassTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_BattlepassTask::InitAsDefaultInstance() {
}

Sheet_BattlepassTask::Sheet_BattlepassTask(const Sheet_BattlepassTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_BattlepassTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_BattlepassTask::~Sheet_BattlepassTask() {
  SharedDtor();
}

void Sheet_BattlepassTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_BattlepassTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_BattlepassTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_BattlepassTask_descriptor_;
}

const Sheet_BattlepassTask& Sheet_BattlepassTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

Sheet_BattlepassTask* Sheet_BattlepassTask::default_instance_ = NULL;

Sheet_BattlepassTask* Sheet_BattlepassTask::New() const {
  return new Sheet_BattlepassTask;
}

void Sheet_BattlepassTask::Clear() {
  e_battlepasstask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_BattlepassTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_BattlepassTask E_BattlepassTask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_BattlepassTask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_battlepasstask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_BattlepassTask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_BattlepassTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_BattlepassTask E_BattlepassTask_List = 1;
  for (int i = 0; i < this->e_battlepasstask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_battlepasstask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_BattlepassTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_BattlepassTask E_BattlepassTask_List = 1;
  for (int i = 0; i < this->e_battlepasstask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_battlepasstask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_BattlepassTask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_BattlepassTask E_BattlepassTask_List = 1;
  total_size += 1 * this->e_battlepasstask_list_size();
  for (int i = 0; i < this->e_battlepasstask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_battlepasstask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_BattlepassTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_BattlepassTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_BattlepassTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_BattlepassTask::MergeFrom(const Sheet_BattlepassTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_battlepasstask_list_.MergeFrom(from.e_battlepasstask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_BattlepassTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_BattlepassTask::CopyFrom(const Sheet_BattlepassTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_BattlepassTask::IsInitialized() const {

  return true;
}

void Sheet_BattlepassTask::Swap(Sheet_BattlepassTask* other) {
  if (other != this) {
    e_battlepasstask_list_.Swap(&other->e_battlepasstask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_BattlepassTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_BattlepassTask_descriptor_;
  metadata.reflection = Sheet_BattlepassTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_BattlepassShop::kMIdFieldNumber;
const int E_BattlepassShop::kMGroupFieldNumber;
const int E_BattlepassShop::kMItemidFieldNumber;
const int E_BattlepassShop::kMItemnumFieldNumber;
const int E_BattlepassShop::kMCostitemFieldNumber;
const int E_BattlepassShop::kMCostnumFieldNumber;
const int E_BattlepassShop::kMNumlimitFieldNumber;
#endif  // !_MSC_VER

E_BattlepassShop::E_BattlepassShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BattlepassShop::InitAsDefaultInstance() {
}

E_BattlepassShop::E_BattlepassShop(const E_BattlepassShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BattlepassShop::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_group_ = 0;
  m_itemid_ = 0;
  m_itemnum_ = 0;
  m_costitem_ = 0;
  m_costnum_ = 0;
  m_numlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BattlepassShop::~E_BattlepassShop() {
  SharedDtor();
}

void E_BattlepassShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_BattlepassShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BattlepassShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BattlepassShop_descriptor_;
}

const E_BattlepassShop& E_BattlepassShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

E_BattlepassShop* E_BattlepassShop::default_instance_ = NULL;

E_BattlepassShop* E_BattlepassShop::New() const {
  return new E_BattlepassShop;
}

void E_BattlepassShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_group_ = 0;
    m_itemid_ = 0;
    m_itemnum_ = 0;
    m_costitem_ = 0;
    m_costnum_ = 0;
    m_numlimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BattlepassShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemnum;
        break;
      }

      // optional int32 m_itemnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_costitem;
        break;
      }

      // optional int32 m_costitem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costitem_)));
          set_has_m_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_costnum;
        break;
      }

      // optional int32 m_costnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnum_)));
          set_has_m_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_numlimit;
        break;
      }

      // optional int32 m_numlimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_numlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_numlimit_)));
          set_has_m_numlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BattlepassShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_group(), output);
  }

  // optional int32 m_itemid = 3;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_itemid(), output);
  }

  // optional int32 m_itemnum = 4;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itemnum(), output);
  }

  // optional int32 m_costitem = 5;
  if (has_m_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_costitem(), output);
  }

  // optional int32 m_costnum = 6;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_costnum(), output);
  }

  // optional int32 m_numlimit = 7;
  if (has_m_numlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_numlimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BattlepassShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_group(), target);
  }

  // optional int32 m_itemid = 3;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_itemid(), target);
  }

  // optional int32 m_itemnum = 4;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itemnum(), target);
  }

  // optional int32 m_costitem = 5;
  if (has_m_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_costitem(), target);
  }

  // optional int32 m_costnum = 6;
  if (has_m_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_costnum(), target);
  }

  // optional int32 m_numlimit = 7;
  if (has_m_numlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_numlimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BattlepassShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_group = 2;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional int32 m_itemid = 3;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_itemnum = 4;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

    // optional int32 m_costitem = 5;
    if (has_m_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costitem());
    }

    // optional int32 m_costnum = 6;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnum());
    }

    // optional int32 m_numlimit = 7;
    if (has_m_numlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_numlimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BattlepassShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BattlepassShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BattlepassShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BattlepassShop::MergeFrom(const E_BattlepassShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
    if (from.has_m_costitem()) {
      set_m_costitem(from.m_costitem());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
    if (from.has_m_numlimit()) {
      set_m_numlimit(from.m_numlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BattlepassShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BattlepassShop::CopyFrom(const E_BattlepassShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BattlepassShop::IsInitialized() const {

  return true;
}

void E_BattlepassShop::Swap(E_BattlepassShop* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_itemnum_, other->m_itemnum_);
    std::swap(m_costitem_, other->m_costitem_);
    std::swap(m_costnum_, other->m_costnum_);
    std::swap(m_numlimit_, other->m_numlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BattlepassShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BattlepassShop_descriptor_;
  metadata.reflection = E_BattlepassShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_BattlepassShop::kEBattlepassShopListFieldNumber;
#endif  // !_MSC_VER

Sheet_BattlepassShop::Sheet_BattlepassShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_BattlepassShop::InitAsDefaultInstance() {
}

Sheet_BattlepassShop::Sheet_BattlepassShop(const Sheet_BattlepassShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_BattlepassShop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_BattlepassShop::~Sheet_BattlepassShop() {
  SharedDtor();
}

void Sheet_BattlepassShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_BattlepassShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_BattlepassShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_BattlepassShop_descriptor_;
}

const Sheet_BattlepassShop& Sheet_BattlepassShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBattlepass_2eproto();
  return *default_instance_;
}

Sheet_BattlepassShop* Sheet_BattlepassShop::default_instance_ = NULL;

Sheet_BattlepassShop* Sheet_BattlepassShop::New() const {
  return new Sheet_BattlepassShop;
}

void Sheet_BattlepassShop::Clear() {
  e_battlepassshop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_BattlepassShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_BattlepassShop E_BattlepassShop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_BattlepassShop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_battlepassshop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_BattlepassShop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_BattlepassShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_BattlepassShop E_BattlepassShop_List = 1;
  for (int i = 0; i < this->e_battlepassshop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_battlepassshop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_BattlepassShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_BattlepassShop E_BattlepassShop_List = 1;
  for (int i = 0; i < this->e_battlepassshop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_battlepassshop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_BattlepassShop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_BattlepassShop E_BattlepassShop_List = 1;
  total_size += 1 * this->e_battlepassshop_list_size();
  for (int i = 0; i < this->e_battlepassshop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_battlepassshop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_BattlepassShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_BattlepassShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_BattlepassShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_BattlepassShop::MergeFrom(const Sheet_BattlepassShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_battlepassshop_list_.MergeFrom(from.e_battlepassshop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_BattlepassShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_BattlepassShop::CopyFrom(const Sheet_BattlepassShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_BattlepassShop::IsInitialized() const {

  return true;
}

void Sheet_BattlepassShop::Swap(Sheet_BattlepassShop* other) {
  if (other != this) {
    e_battlepassshop_list_.Swap(&other->e_battlepassshop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_BattlepassShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_BattlepassShop_descriptor_;
  metadata.reflection = Sheet_BattlepassShop_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
