// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Box.proto

#ifndef PROTOBUF_E_5fBox_2eproto__INCLUDED
#define PROTOBUF_E_5fBox_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fBox_2eproto();
void protobuf_AssignDesc_E_5fBox_2eproto();
void protobuf_ShutdownFile_E_5fBox_2eproto();

class E_BoxBoxBoxdataDesc;
class E_BoxBox;
class Sheet_BoxBox;
class E_BoxBoxdataEquipDesc;
class E_BoxBoxdataItemDesc;
class E_BoxBoxdata;
class Sheet_BoxBoxdata;

// ===================================================================

class E_BoxBoxBoxdataDesc : public ::google::protobuf::Message {
 public:
  E_BoxBoxBoxdataDesc();
  virtual ~E_BoxBoxBoxdataDesc();

  E_BoxBoxBoxdataDesc(const E_BoxBoxBoxdataDesc& from);

  inline E_BoxBoxBoxdataDesc& operator=(const E_BoxBoxBoxdataDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BoxBoxBoxdataDesc& default_instance();

  void Swap(E_BoxBoxBoxdataDesc* other);

  // implements Message ----------------------------------------------

  E_BoxBoxBoxdataDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BoxBoxBoxdataDesc& from);
  void MergeFrom(const E_BoxBoxBoxdataDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_minTimes = 1;
  inline bool has_m_mintimes() const;
  inline void clear_m_mintimes();
  static const int kMMinTimesFieldNumber = 1;
  inline ::google::protobuf::int32 m_mintimes() const;
  inline void set_m_mintimes(::google::protobuf::int32 value);

  // optional int64 m_id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // optional int32 m_maxTimes = 3;
  inline bool has_m_maxtimes() const;
  inline void clear_m_maxtimes();
  static const int kMMaxTimesFieldNumber = 3;
  inline ::google::protobuf::int32 m_maxtimes() const;
  inline void set_m_maxtimes(::google::protobuf::int32 value);

  // optional int32 m_weight = 4;
  inline bool has_m_weight() const;
  inline void clear_m_weight();
  static const int kMWeightFieldNumber = 4;
  inline ::google::protobuf::int32 m_weight() const;
  inline void set_m_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_BoxBoxBoxdataDesc)
 private:
  inline void set_has_m_mintimes();
  inline void clear_has_m_mintimes();
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_maxtimes();
  inline void clear_has_m_maxtimes();
  inline void set_has_m_weight();
  inline void clear_has_m_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;
  ::google::protobuf::int32 m_mintimes_;
  ::google::protobuf::int32 m_maxtimes_;
  ::google::protobuf::int32 m_weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBox_2eproto();
  friend void protobuf_AssignDesc_E_5fBox_2eproto();
  friend void protobuf_ShutdownFile_E_5fBox_2eproto();

  void InitAsDefaultInstance();
  static E_BoxBoxBoxdataDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_BoxBox : public ::google::protobuf::Message {
 public:
  E_BoxBox();
  virtual ~E_BoxBox();

  E_BoxBox(const E_BoxBox& from);

  inline E_BoxBox& operator=(const E_BoxBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BoxBox& default_instance();

  void Swap(E_BoxBox* other);

  // implements Message ----------------------------------------------

  E_BoxBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BoxBox& from);
  void MergeFrom(const E_BoxBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_Rate = 3;
  inline bool has_m_rate() const;
  inline void clear_m_rate();
  static const int kMRateFieldNumber = 3;
  inline ::google::protobuf::int32 m_rate() const;
  inline void set_m_rate(::google::protobuf::int32 value);

  // optional string m_Mask = 4;
  inline bool has_m_mask() const;
  inline void clear_m_mask();
  static const int kMMaskFieldNumber = 4;
  inline const ::std::string& m_mask() const;
  inline void set_m_mask(const ::std::string& value);
  inline void set_m_mask(const char* value);
  inline void set_m_mask(const char* value, size_t size);
  inline ::std::string* mutable_m_mask();
  inline ::std::string* release_m_mask();
  inline void set_allocated_m_mask(::std::string* m_mask);

  // optional int32 m_minTimes = 5;
  inline bool has_m_mintimes() const;
  inline void clear_m_mintimes();
  static const int kMMinTimesFieldNumber = 5;
  inline ::google::protobuf::int32 m_mintimes() const;
  inline void set_m_mintimes(::google::protobuf::int32 value);

  // optional int32 m_maxTimes = 6;
  inline bool has_m_maxtimes() const;
  inline void clear_m_maxtimes();
  static const int kMMaxTimesFieldNumber = 6;
  inline ::google::protobuf::int32 m_maxtimes() const;
  inline void set_m_maxtimes(::google::protobuf::int32 value);

  // repeated .proto_ff.E_BoxBoxBoxdataDesc m_boxdata = 7;
  inline int m_boxdata_size() const;
  inline void clear_m_boxdata();
  static const int kMBoxdataFieldNumber = 7;
  inline const ::proto_ff::E_BoxBoxBoxdataDesc& m_boxdata(int index) const;
  inline ::proto_ff::E_BoxBoxBoxdataDesc* mutable_m_boxdata(int index);
  inline ::proto_ff::E_BoxBoxBoxdataDesc* add_m_boxdata();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxBoxdataDesc >&
      m_boxdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxBoxdataDesc >*
      mutable_m_boxdata();

  // @@protoc_insertion_point(class_scope:proto_ff.E_BoxBox)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_rate();
  inline void clear_has_m_rate();
  inline void set_has_m_mask();
  inline void clear_has_m_mask();
  inline void set_has_m_mintimes();
  inline void clear_has_m_mintimes();
  inline void set_has_m_maxtimes();
  inline void clear_has_m_maxtimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_rate_;
  ::std::string* m_mask_;
  ::google::protobuf::int32 m_mintimes_;
  ::google::protobuf::int32 m_maxtimes_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxBoxdataDesc > m_boxdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBox_2eproto();
  friend void protobuf_AssignDesc_E_5fBox_2eproto();
  friend void protobuf_ShutdownFile_E_5fBox_2eproto();

  void InitAsDefaultInstance();
  static E_BoxBox* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_BoxBox : public ::google::protobuf::Message {
 public:
  Sheet_BoxBox();
  virtual ~Sheet_BoxBox();

  Sheet_BoxBox(const Sheet_BoxBox& from);

  inline Sheet_BoxBox& operator=(const Sheet_BoxBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_BoxBox& default_instance();

  void Swap(Sheet_BoxBox* other);

  // implements Message ----------------------------------------------

  Sheet_BoxBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_BoxBox& from);
  void MergeFrom(const Sheet_BoxBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_BoxBox E_BoxBox_List = 1;
  inline int e_boxbox_list_size() const;
  inline void clear_e_boxbox_list();
  static const int kEBoxBoxListFieldNumber = 1;
  inline const ::proto_ff::E_BoxBox& e_boxbox_list(int index) const;
  inline ::proto_ff::E_BoxBox* mutable_e_boxbox_list(int index);
  inline ::proto_ff::E_BoxBox* add_e_boxbox_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBox >&
      e_boxbox_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBox >*
      mutable_e_boxbox_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_BoxBox)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBox > e_boxbox_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBox_2eproto();
  friend void protobuf_AssignDesc_E_5fBox_2eproto();
  friend void protobuf_ShutdownFile_E_5fBox_2eproto();

  void InitAsDefaultInstance();
  static Sheet_BoxBox* default_instance_;
};
// -------------------------------------------------------------------

class E_BoxBoxdataEquipDesc : public ::google::protobuf::Message {
 public:
  E_BoxBoxdataEquipDesc();
  virtual ~E_BoxBoxdataEquipDesc();

  E_BoxBoxdataEquipDesc(const E_BoxBoxdataEquipDesc& from);

  inline E_BoxBoxdataEquipDesc& operator=(const E_BoxBoxdataEquipDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BoxBoxdataEquipDesc& default_instance();

  void Swap(E_BoxBoxdataEquipDesc* other);

  // implements Message ----------------------------------------------

  E_BoxBoxdataEquipDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BoxBoxdataEquipDesc& from);
  void MergeFrom(const E_BoxBoxdataEquipDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_maxNum = 1;
  inline bool has_m_maxnum() const;
  inline void clear_m_maxnum();
  static const int kMMaxNumFieldNumber = 1;
  inline ::google::protobuf::int32 m_maxnum() const;
  inline void set_m_maxnum(::google::protobuf::int32 value);

  // optional int32 m_minNum = 2;
  inline bool has_m_minnum() const;
  inline void clear_m_minnum();
  static const int kMMinNumFieldNumber = 2;
  inline ::google::protobuf::int32 m_minnum() const;
  inline void set_m_minnum(::google::protobuf::int32 value);

  // optional int32 m_isbind = 3;
  inline bool has_m_isbind() const;
  inline void clear_m_isbind();
  static const int kMIsbindFieldNumber = 3;
  inline ::google::protobuf::int32 m_isbind() const;
  inline void set_m_isbind(::google::protobuf::int32 value);

  // optional string m_id = 4;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 4;
  inline const ::std::string& m_id() const;
  inline void set_m_id(const ::std::string& value);
  inline void set_m_id(const char* value);
  inline void set_m_id(const char* value, size_t size);
  inline ::std::string* mutable_m_id();
  inline ::std::string* release_m_id();
  inline void set_allocated_m_id(::std::string* m_id);

  // optional int32 m_rand = 5;
  inline bool has_m_rand() const;
  inline void clear_m_rand();
  static const int kMRandFieldNumber = 5;
  inline ::google::protobuf::int32 m_rand() const;
  inline void set_m_rand(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_BoxBoxdataEquipDesc)
 private:
  inline void set_has_m_maxnum();
  inline void clear_has_m_maxnum();
  inline void set_has_m_minnum();
  inline void clear_has_m_minnum();
  inline void set_has_m_isbind();
  inline void clear_has_m_isbind();
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_rand();
  inline void clear_has_m_rand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_maxnum_;
  ::google::protobuf::int32 m_minnum_;
  ::std::string* m_id_;
  ::google::protobuf::int32 m_isbind_;
  ::google::protobuf::int32 m_rand_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBox_2eproto();
  friend void protobuf_AssignDesc_E_5fBox_2eproto();
  friend void protobuf_ShutdownFile_E_5fBox_2eproto();

  void InitAsDefaultInstance();
  static E_BoxBoxdataEquipDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_BoxBoxdataItemDesc : public ::google::protobuf::Message {
 public:
  E_BoxBoxdataItemDesc();
  virtual ~E_BoxBoxdataItemDesc();

  E_BoxBoxdataItemDesc(const E_BoxBoxdataItemDesc& from);

  inline E_BoxBoxdataItemDesc& operator=(const E_BoxBoxdataItemDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BoxBoxdataItemDesc& default_instance();

  void Swap(E_BoxBoxdataItemDesc* other);

  // implements Message ----------------------------------------------

  E_BoxBoxdataItemDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BoxBoxdataItemDesc& from);
  void MergeFrom(const E_BoxBoxdataItemDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string m_rand = 1;
  inline bool has_m_rand() const;
  inline void clear_m_rand();
  static const int kMRandFieldNumber = 1;
  inline const ::std::string& m_rand() const;
  inline void set_m_rand(const ::std::string& value);
  inline void set_m_rand(const char* value);
  inline void set_m_rand(const char* value, size_t size);
  inline ::std::string* mutable_m_rand();
  inline ::std::string* release_m_rand();
  inline void set_allocated_m_rand(::std::string* m_rand);

  // optional int32 m_maxNum = 2;
  inline bool has_m_maxnum() const;
  inline void clear_m_maxnum();
  static const int kMMaxNumFieldNumber = 2;
  inline ::google::protobuf::int32 m_maxnum() const;
  inline void set_m_maxnum(::google::protobuf::int32 value);

  // optional int32 m_minNum = 3;
  inline bool has_m_minnum() const;
  inline void clear_m_minnum();
  static const int kMMinNumFieldNumber = 3;
  inline ::google::protobuf::int32 m_minnum() const;
  inline void set_m_minnum(::google::protobuf::int32 value);

  // optional string m_isbind = 4;
  inline bool has_m_isbind() const;
  inline void clear_m_isbind();
  static const int kMIsbindFieldNumber = 4;
  inline const ::std::string& m_isbind() const;
  inline void set_m_isbind(const ::std::string& value);
  inline void set_m_isbind(const char* value);
  inline void set_m_isbind(const char* value, size_t size);
  inline ::std::string* mutable_m_isbind();
  inline ::std::string* release_m_isbind();
  inline void set_allocated_m_isbind(::std::string* m_isbind);

  // optional string m_id = 5;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 5;
  inline const ::std::string& m_id() const;
  inline void set_m_id(const ::std::string& value);
  inline void set_m_id(const char* value);
  inline void set_m_id(const char* value, size_t size);
  inline ::std::string* mutable_m_id();
  inline ::std::string* release_m_id();
  inline void set_allocated_m_id(::std::string* m_id);

  // optional int32 m_rarerand = 6;
  inline bool has_m_rarerand() const;
  inline void clear_m_rarerand();
  static const int kMRarerandFieldNumber = 6;
  inline ::google::protobuf::int32 m_rarerand() const;
  inline void set_m_rarerand(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_BoxBoxdataItemDesc)
 private:
  inline void set_has_m_rand();
  inline void clear_has_m_rand();
  inline void set_has_m_maxnum();
  inline void clear_has_m_maxnum();
  inline void set_has_m_minnum();
  inline void clear_has_m_minnum();
  inline void set_has_m_isbind();
  inline void clear_has_m_isbind();
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_rarerand();
  inline void clear_has_m_rarerand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_rand_;
  ::google::protobuf::int32 m_maxnum_;
  ::google::protobuf::int32 m_minnum_;
  ::std::string* m_isbind_;
  ::std::string* m_id_;
  ::google::protobuf::int32 m_rarerand_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBox_2eproto();
  friend void protobuf_AssignDesc_E_5fBox_2eproto();
  friend void protobuf_ShutdownFile_E_5fBox_2eproto();

  void InitAsDefaultInstance();
  static E_BoxBoxdataItemDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_BoxBoxdata : public ::google::protobuf::Message {
 public:
  E_BoxBoxdata();
  virtual ~E_BoxBoxdata();

  E_BoxBoxdata(const E_BoxBoxdata& from);

  inline E_BoxBoxdata& operator=(const E_BoxBoxdata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_BoxBoxdata& default_instance();

  void Swap(E_BoxBoxdata* other);

  // implements Message ----------------------------------------------

  E_BoxBoxdata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_BoxBoxdata& from);
  void MergeFrom(const E_BoxBoxdata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // optional int32 m_drop_type = 2;
  inline bool has_m_drop_type() const;
  inline void clear_m_drop_type();
  static const int kMDropTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_drop_type() const;
  inline void set_m_drop_type(::google::protobuf::int32 value);

  // optional int32 m_goldminNum = 3;
  inline bool has_m_goldminnum() const;
  inline void clear_m_goldminnum();
  static const int kMGoldminNumFieldNumber = 3;
  inline ::google::protobuf::int32 m_goldminnum() const;
  inline void set_m_goldminnum(::google::protobuf::int32 value);

  // optional int32 m_goldmaxNum = 4;
  inline bool has_m_goldmaxnum() const;
  inline void clear_m_goldmaxnum();
  static const int kMGoldmaxNumFieldNumber = 4;
  inline ::google::protobuf::int32 m_goldmaxnum() const;
  inline void set_m_goldmaxnum(::google::protobuf::int32 value);

  // optional int32 m_goldrand = 5;
  inline bool has_m_goldrand() const;
  inline void clear_m_goldrand();
  static const int kMGoldrandFieldNumber = 5;
  inline ::google::protobuf::int32 m_goldrand() const;
  inline void set_m_goldrand(::google::protobuf::int32 value);

  // optional int32 m_bindjewelminNum = 6;
  inline bool has_m_bindjewelminnum() const;
  inline void clear_m_bindjewelminnum();
  static const int kMBindjewelminNumFieldNumber = 6;
  inline ::google::protobuf::int32 m_bindjewelminnum() const;
  inline void set_m_bindjewelminnum(::google::protobuf::int32 value);

  // optional int32 m_bindjewelmaxNum = 7;
  inline bool has_m_bindjewelmaxnum() const;
  inline void clear_m_bindjewelmaxnum();
  static const int kMBindjewelmaxNumFieldNumber = 7;
  inline ::google::protobuf::int32 m_bindjewelmaxnum() const;
  inline void set_m_bindjewelmaxnum(::google::protobuf::int32 value);

  // optional int32 m_bindjewelrand = 8;
  inline bool has_m_bindjewelrand() const;
  inline void clear_m_bindjewelrand();
  static const int kMBindjewelrandFieldNumber = 8;
  inline ::google::protobuf::int32 m_bindjewelrand() const;
  inline void set_m_bindjewelrand(::google::protobuf::int32 value);

  // optional int32 m_jewelminNum = 9;
  inline bool has_m_jewelminnum() const;
  inline void clear_m_jewelminnum();
  static const int kMJewelminNumFieldNumber = 9;
  inline ::google::protobuf::int32 m_jewelminnum() const;
  inline void set_m_jewelminnum(::google::protobuf::int32 value);

  // optional int32 m_jewelmaxNum = 10;
  inline bool has_m_jewelmaxnum() const;
  inline void clear_m_jewelmaxnum();
  static const int kMJewelmaxNumFieldNumber = 10;
  inline ::google::protobuf::int32 m_jewelmaxnum() const;
  inline void set_m_jewelmaxnum(::google::protobuf::int32 value);

  // optional int32 m_jewelrand = 11;
  inline bool has_m_jewelrand() const;
  inline void clear_m_jewelrand();
  static const int kMJewelrandFieldNumber = 11;
  inline ::google::protobuf::int32 m_jewelrand() const;
  inline void set_m_jewelrand(::google::protobuf::int32 value);

  // optional string m_eq_profession = 12;
  inline bool has_m_eq_profession() const;
  inline void clear_m_eq_profession();
  static const int kMEqProfessionFieldNumber = 12;
  inline const ::std::string& m_eq_profession() const;
  inline void set_m_eq_profession(const ::std::string& value);
  inline void set_m_eq_profession(const char* value);
  inline void set_m_eq_profession(const char* value, size_t size);
  inline ::std::string* mutable_m_eq_profession();
  inline ::std::string* release_m_eq_profession();
  inline void set_allocated_m_eq_profession(::std::string* m_eq_profession);

  // repeated .proto_ff.E_BoxBoxdataEquipDesc m_equip = 13;
  inline int m_equip_size() const;
  inline void clear_m_equip();
  static const int kMEquipFieldNumber = 13;
  inline const ::proto_ff::E_BoxBoxdataEquipDesc& m_equip(int index) const;
  inline ::proto_ff::E_BoxBoxdataEquipDesc* mutable_m_equip(int index);
  inline ::proto_ff::E_BoxBoxdataEquipDesc* add_m_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataEquipDesc >&
      m_equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataEquipDesc >*
      mutable_m_equip();

  // repeated .proto_ff.E_BoxBoxdataItemDesc m_item = 14;
  inline int m_item_size() const;
  inline void clear_m_item();
  static const int kMItemFieldNumber = 14;
  inline const ::proto_ff::E_BoxBoxdataItemDesc& m_item(int index) const;
  inline ::proto_ff::E_BoxBoxdataItemDesc* mutable_m_item(int index);
  inline ::proto_ff::E_BoxBoxdataItemDesc* add_m_item();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataItemDesc >&
      m_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataItemDesc >*
      mutable_m_item();

  // @@protoc_insertion_point(class_scope:proto_ff.E_BoxBoxdata)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_drop_type();
  inline void clear_has_m_drop_type();
  inline void set_has_m_goldminnum();
  inline void clear_has_m_goldminnum();
  inline void set_has_m_goldmaxnum();
  inline void clear_has_m_goldmaxnum();
  inline void set_has_m_goldrand();
  inline void clear_has_m_goldrand();
  inline void set_has_m_bindjewelminnum();
  inline void clear_has_m_bindjewelminnum();
  inline void set_has_m_bindjewelmaxnum();
  inline void clear_has_m_bindjewelmaxnum();
  inline void set_has_m_bindjewelrand();
  inline void clear_has_m_bindjewelrand();
  inline void set_has_m_jewelminnum();
  inline void clear_has_m_jewelminnum();
  inline void set_has_m_jewelmaxnum();
  inline void clear_has_m_jewelmaxnum();
  inline void set_has_m_jewelrand();
  inline void clear_has_m_jewelrand();
  inline void set_has_m_eq_profession();
  inline void clear_has_m_eq_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;
  ::google::protobuf::int32 m_drop_type_;
  ::google::protobuf::int32 m_goldminnum_;
  ::google::protobuf::int32 m_goldmaxnum_;
  ::google::protobuf::int32 m_goldrand_;
  ::google::protobuf::int32 m_bindjewelminnum_;
  ::google::protobuf::int32 m_bindjewelmaxnum_;
  ::google::protobuf::int32 m_bindjewelrand_;
  ::google::protobuf::int32 m_jewelminnum_;
  ::google::protobuf::int32 m_jewelmaxnum_;
  ::google::protobuf::int32 m_jewelrand_;
  ::std::string* m_eq_profession_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataEquipDesc > m_equip_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataItemDesc > m_item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBox_2eproto();
  friend void protobuf_AssignDesc_E_5fBox_2eproto();
  friend void protobuf_ShutdownFile_E_5fBox_2eproto();

  void InitAsDefaultInstance();
  static E_BoxBoxdata* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_BoxBoxdata : public ::google::protobuf::Message {
 public:
  Sheet_BoxBoxdata();
  virtual ~Sheet_BoxBoxdata();

  Sheet_BoxBoxdata(const Sheet_BoxBoxdata& from);

  inline Sheet_BoxBoxdata& operator=(const Sheet_BoxBoxdata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_BoxBoxdata& default_instance();

  void Swap(Sheet_BoxBoxdata* other);

  // implements Message ----------------------------------------------

  Sheet_BoxBoxdata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_BoxBoxdata& from);
  void MergeFrom(const Sheet_BoxBoxdata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_BoxBoxdata E_BoxBoxdata_List = 1;
  inline int e_boxboxdata_list_size() const;
  inline void clear_e_boxboxdata_list();
  static const int kEBoxBoxdataListFieldNumber = 1;
  inline const ::proto_ff::E_BoxBoxdata& e_boxboxdata_list(int index) const;
  inline ::proto_ff::E_BoxBoxdata* mutable_e_boxboxdata_list(int index);
  inline ::proto_ff::E_BoxBoxdata* add_e_boxboxdata_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdata >&
      e_boxboxdata_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdata >*
      mutable_e_boxboxdata_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_BoxBoxdata)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdata > e_boxboxdata_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fBox_2eproto();
  friend void protobuf_AssignDesc_E_5fBox_2eproto();
  friend void protobuf_ShutdownFile_E_5fBox_2eproto();

  void InitAsDefaultInstance();
  static Sheet_BoxBoxdata* default_instance_;
};
// ===================================================================


// ===================================================================

// E_BoxBoxBoxdataDesc

// optional int32 m_minTimes = 1;
inline bool E_BoxBoxBoxdataDesc::has_m_mintimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BoxBoxBoxdataDesc::set_has_m_mintimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BoxBoxBoxdataDesc::clear_has_m_mintimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BoxBoxBoxdataDesc::clear_m_mintimes() {
  m_mintimes_ = 0;
  clear_has_m_mintimes();
}
inline ::google::protobuf::int32 E_BoxBoxBoxdataDesc::m_mintimes() const {
  return m_mintimes_;
}
inline void E_BoxBoxBoxdataDesc::set_m_mintimes(::google::protobuf::int32 value) {
  set_has_m_mintimes();
  m_mintimes_ = value;
}

// optional int64 m_id = 2;
inline bool E_BoxBoxBoxdataDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BoxBoxBoxdataDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BoxBoxBoxdataDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BoxBoxBoxdataDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_BoxBoxBoxdataDesc::m_id() const {
  return m_id_;
}
inline void E_BoxBoxBoxdataDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_maxTimes = 3;
inline bool E_BoxBoxBoxdataDesc::has_m_maxtimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BoxBoxBoxdataDesc::set_has_m_maxtimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BoxBoxBoxdataDesc::clear_has_m_maxtimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BoxBoxBoxdataDesc::clear_m_maxtimes() {
  m_maxtimes_ = 0;
  clear_has_m_maxtimes();
}
inline ::google::protobuf::int32 E_BoxBoxBoxdataDesc::m_maxtimes() const {
  return m_maxtimes_;
}
inline void E_BoxBoxBoxdataDesc::set_m_maxtimes(::google::protobuf::int32 value) {
  set_has_m_maxtimes();
  m_maxtimes_ = value;
}

// optional int32 m_weight = 4;
inline bool E_BoxBoxBoxdataDesc::has_m_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BoxBoxBoxdataDesc::set_has_m_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BoxBoxBoxdataDesc::clear_has_m_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BoxBoxBoxdataDesc::clear_m_weight() {
  m_weight_ = 0;
  clear_has_m_weight();
}
inline ::google::protobuf::int32 E_BoxBoxBoxdataDesc::m_weight() const {
  return m_weight_;
}
inline void E_BoxBoxBoxdataDesc::set_m_weight(::google::protobuf::int32 value) {
  set_has_m_weight();
  m_weight_ = value;
}

// -------------------------------------------------------------------

// E_BoxBox

// optional int64 m_id = 1;
inline bool E_BoxBox::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BoxBox::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BoxBox::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BoxBox::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_BoxBox::m_id() const {
  return m_id_;
}
inline void E_BoxBox::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_type = 2;
inline bool E_BoxBox::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BoxBox::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BoxBox::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BoxBox::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_BoxBox::m_type() const {
  return m_type_;
}
inline void E_BoxBox::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_Rate = 3;
inline bool E_BoxBox::has_m_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BoxBox::set_has_m_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BoxBox::clear_has_m_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BoxBox::clear_m_rate() {
  m_rate_ = 0;
  clear_has_m_rate();
}
inline ::google::protobuf::int32 E_BoxBox::m_rate() const {
  return m_rate_;
}
inline void E_BoxBox::set_m_rate(::google::protobuf::int32 value) {
  set_has_m_rate();
  m_rate_ = value;
}

// optional string m_Mask = 4;
inline bool E_BoxBox::has_m_mask() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BoxBox::set_has_m_mask() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BoxBox::clear_has_m_mask() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BoxBox::clear_m_mask() {
  if (m_mask_ != &::google::protobuf::internal::kEmptyString) {
    m_mask_->clear();
  }
  clear_has_m_mask();
}
inline const ::std::string& E_BoxBox::m_mask() const {
  return *m_mask_;
}
inline void E_BoxBox::set_m_mask(const ::std::string& value) {
  set_has_m_mask();
  if (m_mask_ == &::google::protobuf::internal::kEmptyString) {
    m_mask_ = new ::std::string;
  }
  m_mask_->assign(value);
}
inline void E_BoxBox::set_m_mask(const char* value) {
  set_has_m_mask();
  if (m_mask_ == &::google::protobuf::internal::kEmptyString) {
    m_mask_ = new ::std::string;
  }
  m_mask_->assign(value);
}
inline void E_BoxBox::set_m_mask(const char* value, size_t size) {
  set_has_m_mask();
  if (m_mask_ == &::google::protobuf::internal::kEmptyString) {
    m_mask_ = new ::std::string;
  }
  m_mask_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_BoxBox::mutable_m_mask() {
  set_has_m_mask();
  if (m_mask_ == &::google::protobuf::internal::kEmptyString) {
    m_mask_ = new ::std::string;
  }
  return m_mask_;
}
inline ::std::string* E_BoxBox::release_m_mask() {
  clear_has_m_mask();
  if (m_mask_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_mask_;
    m_mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_BoxBox::set_allocated_m_mask(::std::string* m_mask) {
  if (m_mask_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mask_;
  }
  if (m_mask) {
    set_has_m_mask();
    m_mask_ = m_mask;
  } else {
    clear_has_m_mask();
    m_mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_minTimes = 5;
inline bool E_BoxBox::has_m_mintimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_BoxBox::set_has_m_mintimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_BoxBox::clear_has_m_mintimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_BoxBox::clear_m_mintimes() {
  m_mintimes_ = 0;
  clear_has_m_mintimes();
}
inline ::google::protobuf::int32 E_BoxBox::m_mintimes() const {
  return m_mintimes_;
}
inline void E_BoxBox::set_m_mintimes(::google::protobuf::int32 value) {
  set_has_m_mintimes();
  m_mintimes_ = value;
}

// optional int32 m_maxTimes = 6;
inline bool E_BoxBox::has_m_maxtimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_BoxBox::set_has_m_maxtimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_BoxBox::clear_has_m_maxtimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_BoxBox::clear_m_maxtimes() {
  m_maxtimes_ = 0;
  clear_has_m_maxtimes();
}
inline ::google::protobuf::int32 E_BoxBox::m_maxtimes() const {
  return m_maxtimes_;
}
inline void E_BoxBox::set_m_maxtimes(::google::protobuf::int32 value) {
  set_has_m_maxtimes();
  m_maxtimes_ = value;
}

// repeated .proto_ff.E_BoxBoxBoxdataDesc m_boxdata = 7;
inline int E_BoxBox::m_boxdata_size() const {
  return m_boxdata_.size();
}
inline void E_BoxBox::clear_m_boxdata() {
  m_boxdata_.Clear();
}
inline const ::proto_ff::E_BoxBoxBoxdataDesc& E_BoxBox::m_boxdata(int index) const {
  return m_boxdata_.Get(index);
}
inline ::proto_ff::E_BoxBoxBoxdataDesc* E_BoxBox::mutable_m_boxdata(int index) {
  return m_boxdata_.Mutable(index);
}
inline ::proto_ff::E_BoxBoxBoxdataDesc* E_BoxBox::add_m_boxdata() {
  return m_boxdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxBoxdataDesc >&
E_BoxBox::m_boxdata() const {
  return m_boxdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxBoxdataDesc >*
E_BoxBox::mutable_m_boxdata() {
  return &m_boxdata_;
}

// -------------------------------------------------------------------

// Sheet_BoxBox

// repeated .proto_ff.E_BoxBox E_BoxBox_List = 1;
inline int Sheet_BoxBox::e_boxbox_list_size() const {
  return e_boxbox_list_.size();
}
inline void Sheet_BoxBox::clear_e_boxbox_list() {
  e_boxbox_list_.Clear();
}
inline const ::proto_ff::E_BoxBox& Sheet_BoxBox::e_boxbox_list(int index) const {
  return e_boxbox_list_.Get(index);
}
inline ::proto_ff::E_BoxBox* Sheet_BoxBox::mutable_e_boxbox_list(int index) {
  return e_boxbox_list_.Mutable(index);
}
inline ::proto_ff::E_BoxBox* Sheet_BoxBox::add_e_boxbox_list() {
  return e_boxbox_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBox >&
Sheet_BoxBox::e_boxbox_list() const {
  return e_boxbox_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBox >*
Sheet_BoxBox::mutable_e_boxbox_list() {
  return &e_boxbox_list_;
}

// -------------------------------------------------------------------

// E_BoxBoxdataEquipDesc

// optional int32 m_maxNum = 1;
inline bool E_BoxBoxdataEquipDesc::has_m_maxnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BoxBoxdataEquipDesc::set_has_m_maxnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BoxBoxdataEquipDesc::clear_has_m_maxnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BoxBoxdataEquipDesc::clear_m_maxnum() {
  m_maxnum_ = 0;
  clear_has_m_maxnum();
}
inline ::google::protobuf::int32 E_BoxBoxdataEquipDesc::m_maxnum() const {
  return m_maxnum_;
}
inline void E_BoxBoxdataEquipDesc::set_m_maxnum(::google::protobuf::int32 value) {
  set_has_m_maxnum();
  m_maxnum_ = value;
}

// optional int32 m_minNum = 2;
inline bool E_BoxBoxdataEquipDesc::has_m_minnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BoxBoxdataEquipDesc::set_has_m_minnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BoxBoxdataEquipDesc::clear_has_m_minnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BoxBoxdataEquipDesc::clear_m_minnum() {
  m_minnum_ = 0;
  clear_has_m_minnum();
}
inline ::google::protobuf::int32 E_BoxBoxdataEquipDesc::m_minnum() const {
  return m_minnum_;
}
inline void E_BoxBoxdataEquipDesc::set_m_minnum(::google::protobuf::int32 value) {
  set_has_m_minnum();
  m_minnum_ = value;
}

// optional int32 m_isbind = 3;
inline bool E_BoxBoxdataEquipDesc::has_m_isbind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BoxBoxdataEquipDesc::set_has_m_isbind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BoxBoxdataEquipDesc::clear_has_m_isbind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BoxBoxdataEquipDesc::clear_m_isbind() {
  m_isbind_ = 0;
  clear_has_m_isbind();
}
inline ::google::protobuf::int32 E_BoxBoxdataEquipDesc::m_isbind() const {
  return m_isbind_;
}
inline void E_BoxBoxdataEquipDesc::set_m_isbind(::google::protobuf::int32 value) {
  set_has_m_isbind();
  m_isbind_ = value;
}

// optional string m_id = 4;
inline bool E_BoxBoxdataEquipDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BoxBoxdataEquipDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BoxBoxdataEquipDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BoxBoxdataEquipDesc::clear_m_id() {
  if (m_id_ != &::google::protobuf::internal::kEmptyString) {
    m_id_->clear();
  }
  clear_has_m_id();
}
inline const ::std::string& E_BoxBoxdataEquipDesc::m_id() const {
  return *m_id_;
}
inline void E_BoxBoxdataEquipDesc::set_m_id(const ::std::string& value) {
  set_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    m_id_ = new ::std::string;
  }
  m_id_->assign(value);
}
inline void E_BoxBoxdataEquipDesc::set_m_id(const char* value) {
  set_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    m_id_ = new ::std::string;
  }
  m_id_->assign(value);
}
inline void E_BoxBoxdataEquipDesc::set_m_id(const char* value, size_t size) {
  set_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    m_id_ = new ::std::string;
  }
  m_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_BoxBoxdataEquipDesc::mutable_m_id() {
  set_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    m_id_ = new ::std::string;
  }
  return m_id_;
}
inline ::std::string* E_BoxBoxdataEquipDesc::release_m_id() {
  clear_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_id_;
    m_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_BoxBoxdataEquipDesc::set_allocated_m_id(::std::string* m_id) {
  if (m_id_ != &::google::protobuf::internal::kEmptyString) {
    delete m_id_;
  }
  if (m_id) {
    set_has_m_id();
    m_id_ = m_id;
  } else {
    clear_has_m_id();
    m_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_rand = 5;
inline bool E_BoxBoxdataEquipDesc::has_m_rand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_BoxBoxdataEquipDesc::set_has_m_rand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_BoxBoxdataEquipDesc::clear_has_m_rand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_BoxBoxdataEquipDesc::clear_m_rand() {
  m_rand_ = 0;
  clear_has_m_rand();
}
inline ::google::protobuf::int32 E_BoxBoxdataEquipDesc::m_rand() const {
  return m_rand_;
}
inline void E_BoxBoxdataEquipDesc::set_m_rand(::google::protobuf::int32 value) {
  set_has_m_rand();
  m_rand_ = value;
}

// -------------------------------------------------------------------

// E_BoxBoxdataItemDesc

// optional string m_rand = 1;
inline bool E_BoxBoxdataItemDesc::has_m_rand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BoxBoxdataItemDesc::set_has_m_rand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BoxBoxdataItemDesc::clear_has_m_rand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BoxBoxdataItemDesc::clear_m_rand() {
  if (m_rand_ != &::google::protobuf::internal::kEmptyString) {
    m_rand_->clear();
  }
  clear_has_m_rand();
}
inline const ::std::string& E_BoxBoxdataItemDesc::m_rand() const {
  return *m_rand_;
}
inline void E_BoxBoxdataItemDesc::set_m_rand(const ::std::string& value) {
  set_has_m_rand();
  if (m_rand_ == &::google::protobuf::internal::kEmptyString) {
    m_rand_ = new ::std::string;
  }
  m_rand_->assign(value);
}
inline void E_BoxBoxdataItemDesc::set_m_rand(const char* value) {
  set_has_m_rand();
  if (m_rand_ == &::google::protobuf::internal::kEmptyString) {
    m_rand_ = new ::std::string;
  }
  m_rand_->assign(value);
}
inline void E_BoxBoxdataItemDesc::set_m_rand(const char* value, size_t size) {
  set_has_m_rand();
  if (m_rand_ == &::google::protobuf::internal::kEmptyString) {
    m_rand_ = new ::std::string;
  }
  m_rand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_BoxBoxdataItemDesc::mutable_m_rand() {
  set_has_m_rand();
  if (m_rand_ == &::google::protobuf::internal::kEmptyString) {
    m_rand_ = new ::std::string;
  }
  return m_rand_;
}
inline ::std::string* E_BoxBoxdataItemDesc::release_m_rand() {
  clear_has_m_rand();
  if (m_rand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_rand_;
    m_rand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_BoxBoxdataItemDesc::set_allocated_m_rand(::std::string* m_rand) {
  if (m_rand_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rand_;
  }
  if (m_rand) {
    set_has_m_rand();
    m_rand_ = m_rand;
  } else {
    clear_has_m_rand();
    m_rand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_maxNum = 2;
inline bool E_BoxBoxdataItemDesc::has_m_maxnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BoxBoxdataItemDesc::set_has_m_maxnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BoxBoxdataItemDesc::clear_has_m_maxnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BoxBoxdataItemDesc::clear_m_maxnum() {
  m_maxnum_ = 0;
  clear_has_m_maxnum();
}
inline ::google::protobuf::int32 E_BoxBoxdataItemDesc::m_maxnum() const {
  return m_maxnum_;
}
inline void E_BoxBoxdataItemDesc::set_m_maxnum(::google::protobuf::int32 value) {
  set_has_m_maxnum();
  m_maxnum_ = value;
}

// optional int32 m_minNum = 3;
inline bool E_BoxBoxdataItemDesc::has_m_minnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BoxBoxdataItemDesc::set_has_m_minnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BoxBoxdataItemDesc::clear_has_m_minnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BoxBoxdataItemDesc::clear_m_minnum() {
  m_minnum_ = 0;
  clear_has_m_minnum();
}
inline ::google::protobuf::int32 E_BoxBoxdataItemDesc::m_minnum() const {
  return m_minnum_;
}
inline void E_BoxBoxdataItemDesc::set_m_minnum(::google::protobuf::int32 value) {
  set_has_m_minnum();
  m_minnum_ = value;
}

// optional string m_isbind = 4;
inline bool E_BoxBoxdataItemDesc::has_m_isbind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BoxBoxdataItemDesc::set_has_m_isbind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BoxBoxdataItemDesc::clear_has_m_isbind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BoxBoxdataItemDesc::clear_m_isbind() {
  if (m_isbind_ != &::google::protobuf::internal::kEmptyString) {
    m_isbind_->clear();
  }
  clear_has_m_isbind();
}
inline const ::std::string& E_BoxBoxdataItemDesc::m_isbind() const {
  return *m_isbind_;
}
inline void E_BoxBoxdataItemDesc::set_m_isbind(const ::std::string& value) {
  set_has_m_isbind();
  if (m_isbind_ == &::google::protobuf::internal::kEmptyString) {
    m_isbind_ = new ::std::string;
  }
  m_isbind_->assign(value);
}
inline void E_BoxBoxdataItemDesc::set_m_isbind(const char* value) {
  set_has_m_isbind();
  if (m_isbind_ == &::google::protobuf::internal::kEmptyString) {
    m_isbind_ = new ::std::string;
  }
  m_isbind_->assign(value);
}
inline void E_BoxBoxdataItemDesc::set_m_isbind(const char* value, size_t size) {
  set_has_m_isbind();
  if (m_isbind_ == &::google::protobuf::internal::kEmptyString) {
    m_isbind_ = new ::std::string;
  }
  m_isbind_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_BoxBoxdataItemDesc::mutable_m_isbind() {
  set_has_m_isbind();
  if (m_isbind_ == &::google::protobuf::internal::kEmptyString) {
    m_isbind_ = new ::std::string;
  }
  return m_isbind_;
}
inline ::std::string* E_BoxBoxdataItemDesc::release_m_isbind() {
  clear_has_m_isbind();
  if (m_isbind_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_isbind_;
    m_isbind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_BoxBoxdataItemDesc::set_allocated_m_isbind(::std::string* m_isbind) {
  if (m_isbind_ != &::google::protobuf::internal::kEmptyString) {
    delete m_isbind_;
  }
  if (m_isbind) {
    set_has_m_isbind();
    m_isbind_ = m_isbind;
  } else {
    clear_has_m_isbind();
    m_isbind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_id = 5;
inline bool E_BoxBoxdataItemDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_BoxBoxdataItemDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_BoxBoxdataItemDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_BoxBoxdataItemDesc::clear_m_id() {
  if (m_id_ != &::google::protobuf::internal::kEmptyString) {
    m_id_->clear();
  }
  clear_has_m_id();
}
inline const ::std::string& E_BoxBoxdataItemDesc::m_id() const {
  return *m_id_;
}
inline void E_BoxBoxdataItemDesc::set_m_id(const ::std::string& value) {
  set_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    m_id_ = new ::std::string;
  }
  m_id_->assign(value);
}
inline void E_BoxBoxdataItemDesc::set_m_id(const char* value) {
  set_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    m_id_ = new ::std::string;
  }
  m_id_->assign(value);
}
inline void E_BoxBoxdataItemDesc::set_m_id(const char* value, size_t size) {
  set_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    m_id_ = new ::std::string;
  }
  m_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_BoxBoxdataItemDesc::mutable_m_id() {
  set_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    m_id_ = new ::std::string;
  }
  return m_id_;
}
inline ::std::string* E_BoxBoxdataItemDesc::release_m_id() {
  clear_has_m_id();
  if (m_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_id_;
    m_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_BoxBoxdataItemDesc::set_allocated_m_id(::std::string* m_id) {
  if (m_id_ != &::google::protobuf::internal::kEmptyString) {
    delete m_id_;
  }
  if (m_id) {
    set_has_m_id();
    m_id_ = m_id;
  } else {
    clear_has_m_id();
    m_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_rarerand = 6;
inline bool E_BoxBoxdataItemDesc::has_m_rarerand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_BoxBoxdataItemDesc::set_has_m_rarerand() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_BoxBoxdataItemDesc::clear_has_m_rarerand() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_BoxBoxdataItemDesc::clear_m_rarerand() {
  m_rarerand_ = 0;
  clear_has_m_rarerand();
}
inline ::google::protobuf::int32 E_BoxBoxdataItemDesc::m_rarerand() const {
  return m_rarerand_;
}
inline void E_BoxBoxdataItemDesc::set_m_rarerand(::google::protobuf::int32 value) {
  set_has_m_rarerand();
  m_rarerand_ = value;
}

// -------------------------------------------------------------------

// E_BoxBoxdata

// optional int64 m_id = 1;
inline bool E_BoxBoxdata::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_BoxBoxdata::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_BoxBoxdata::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_BoxBoxdata::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_BoxBoxdata::m_id() const {
  return m_id_;
}
inline void E_BoxBoxdata::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_drop_type = 2;
inline bool E_BoxBoxdata::has_m_drop_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_BoxBoxdata::set_has_m_drop_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_BoxBoxdata::clear_has_m_drop_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_BoxBoxdata::clear_m_drop_type() {
  m_drop_type_ = 0;
  clear_has_m_drop_type();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_drop_type() const {
  return m_drop_type_;
}
inline void E_BoxBoxdata::set_m_drop_type(::google::protobuf::int32 value) {
  set_has_m_drop_type();
  m_drop_type_ = value;
}

// optional int32 m_goldminNum = 3;
inline bool E_BoxBoxdata::has_m_goldminnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_BoxBoxdata::set_has_m_goldminnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_BoxBoxdata::clear_has_m_goldminnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_BoxBoxdata::clear_m_goldminnum() {
  m_goldminnum_ = 0;
  clear_has_m_goldminnum();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_goldminnum() const {
  return m_goldminnum_;
}
inline void E_BoxBoxdata::set_m_goldminnum(::google::protobuf::int32 value) {
  set_has_m_goldminnum();
  m_goldminnum_ = value;
}

// optional int32 m_goldmaxNum = 4;
inline bool E_BoxBoxdata::has_m_goldmaxnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_BoxBoxdata::set_has_m_goldmaxnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_BoxBoxdata::clear_has_m_goldmaxnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_BoxBoxdata::clear_m_goldmaxnum() {
  m_goldmaxnum_ = 0;
  clear_has_m_goldmaxnum();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_goldmaxnum() const {
  return m_goldmaxnum_;
}
inline void E_BoxBoxdata::set_m_goldmaxnum(::google::protobuf::int32 value) {
  set_has_m_goldmaxnum();
  m_goldmaxnum_ = value;
}

// optional int32 m_goldrand = 5;
inline bool E_BoxBoxdata::has_m_goldrand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_BoxBoxdata::set_has_m_goldrand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_BoxBoxdata::clear_has_m_goldrand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_BoxBoxdata::clear_m_goldrand() {
  m_goldrand_ = 0;
  clear_has_m_goldrand();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_goldrand() const {
  return m_goldrand_;
}
inline void E_BoxBoxdata::set_m_goldrand(::google::protobuf::int32 value) {
  set_has_m_goldrand();
  m_goldrand_ = value;
}

// optional int32 m_bindjewelminNum = 6;
inline bool E_BoxBoxdata::has_m_bindjewelminnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_BoxBoxdata::set_has_m_bindjewelminnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_BoxBoxdata::clear_has_m_bindjewelminnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_BoxBoxdata::clear_m_bindjewelminnum() {
  m_bindjewelminnum_ = 0;
  clear_has_m_bindjewelminnum();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_bindjewelminnum() const {
  return m_bindjewelminnum_;
}
inline void E_BoxBoxdata::set_m_bindjewelminnum(::google::protobuf::int32 value) {
  set_has_m_bindjewelminnum();
  m_bindjewelminnum_ = value;
}

// optional int32 m_bindjewelmaxNum = 7;
inline bool E_BoxBoxdata::has_m_bindjewelmaxnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_BoxBoxdata::set_has_m_bindjewelmaxnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_BoxBoxdata::clear_has_m_bindjewelmaxnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_BoxBoxdata::clear_m_bindjewelmaxnum() {
  m_bindjewelmaxnum_ = 0;
  clear_has_m_bindjewelmaxnum();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_bindjewelmaxnum() const {
  return m_bindjewelmaxnum_;
}
inline void E_BoxBoxdata::set_m_bindjewelmaxnum(::google::protobuf::int32 value) {
  set_has_m_bindjewelmaxnum();
  m_bindjewelmaxnum_ = value;
}

// optional int32 m_bindjewelrand = 8;
inline bool E_BoxBoxdata::has_m_bindjewelrand() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_BoxBoxdata::set_has_m_bindjewelrand() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_BoxBoxdata::clear_has_m_bindjewelrand() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_BoxBoxdata::clear_m_bindjewelrand() {
  m_bindjewelrand_ = 0;
  clear_has_m_bindjewelrand();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_bindjewelrand() const {
  return m_bindjewelrand_;
}
inline void E_BoxBoxdata::set_m_bindjewelrand(::google::protobuf::int32 value) {
  set_has_m_bindjewelrand();
  m_bindjewelrand_ = value;
}

// optional int32 m_jewelminNum = 9;
inline bool E_BoxBoxdata::has_m_jewelminnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_BoxBoxdata::set_has_m_jewelminnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_BoxBoxdata::clear_has_m_jewelminnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_BoxBoxdata::clear_m_jewelminnum() {
  m_jewelminnum_ = 0;
  clear_has_m_jewelminnum();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_jewelminnum() const {
  return m_jewelminnum_;
}
inline void E_BoxBoxdata::set_m_jewelminnum(::google::protobuf::int32 value) {
  set_has_m_jewelminnum();
  m_jewelminnum_ = value;
}

// optional int32 m_jewelmaxNum = 10;
inline bool E_BoxBoxdata::has_m_jewelmaxnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_BoxBoxdata::set_has_m_jewelmaxnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_BoxBoxdata::clear_has_m_jewelmaxnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_BoxBoxdata::clear_m_jewelmaxnum() {
  m_jewelmaxnum_ = 0;
  clear_has_m_jewelmaxnum();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_jewelmaxnum() const {
  return m_jewelmaxnum_;
}
inline void E_BoxBoxdata::set_m_jewelmaxnum(::google::protobuf::int32 value) {
  set_has_m_jewelmaxnum();
  m_jewelmaxnum_ = value;
}

// optional int32 m_jewelrand = 11;
inline bool E_BoxBoxdata::has_m_jewelrand() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_BoxBoxdata::set_has_m_jewelrand() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_BoxBoxdata::clear_has_m_jewelrand() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_BoxBoxdata::clear_m_jewelrand() {
  m_jewelrand_ = 0;
  clear_has_m_jewelrand();
}
inline ::google::protobuf::int32 E_BoxBoxdata::m_jewelrand() const {
  return m_jewelrand_;
}
inline void E_BoxBoxdata::set_m_jewelrand(::google::protobuf::int32 value) {
  set_has_m_jewelrand();
  m_jewelrand_ = value;
}

// optional string m_eq_profession = 12;
inline bool E_BoxBoxdata::has_m_eq_profession() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_BoxBoxdata::set_has_m_eq_profession() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_BoxBoxdata::clear_has_m_eq_profession() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_BoxBoxdata::clear_m_eq_profession() {
  if (m_eq_profession_ != &::google::protobuf::internal::kEmptyString) {
    m_eq_profession_->clear();
  }
  clear_has_m_eq_profession();
}
inline const ::std::string& E_BoxBoxdata::m_eq_profession() const {
  return *m_eq_profession_;
}
inline void E_BoxBoxdata::set_m_eq_profession(const ::std::string& value) {
  set_has_m_eq_profession();
  if (m_eq_profession_ == &::google::protobuf::internal::kEmptyString) {
    m_eq_profession_ = new ::std::string;
  }
  m_eq_profession_->assign(value);
}
inline void E_BoxBoxdata::set_m_eq_profession(const char* value) {
  set_has_m_eq_profession();
  if (m_eq_profession_ == &::google::protobuf::internal::kEmptyString) {
    m_eq_profession_ = new ::std::string;
  }
  m_eq_profession_->assign(value);
}
inline void E_BoxBoxdata::set_m_eq_profession(const char* value, size_t size) {
  set_has_m_eq_profession();
  if (m_eq_profession_ == &::google::protobuf::internal::kEmptyString) {
    m_eq_profession_ = new ::std::string;
  }
  m_eq_profession_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_BoxBoxdata::mutable_m_eq_profession() {
  set_has_m_eq_profession();
  if (m_eq_profession_ == &::google::protobuf::internal::kEmptyString) {
    m_eq_profession_ = new ::std::string;
  }
  return m_eq_profession_;
}
inline ::std::string* E_BoxBoxdata::release_m_eq_profession() {
  clear_has_m_eq_profession();
  if (m_eq_profession_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_eq_profession_;
    m_eq_profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_BoxBoxdata::set_allocated_m_eq_profession(::std::string* m_eq_profession) {
  if (m_eq_profession_ != &::google::protobuf::internal::kEmptyString) {
    delete m_eq_profession_;
  }
  if (m_eq_profession) {
    set_has_m_eq_profession();
    m_eq_profession_ = m_eq_profession;
  } else {
    clear_has_m_eq_profession();
    m_eq_profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.E_BoxBoxdataEquipDesc m_equip = 13;
inline int E_BoxBoxdata::m_equip_size() const {
  return m_equip_.size();
}
inline void E_BoxBoxdata::clear_m_equip() {
  m_equip_.Clear();
}
inline const ::proto_ff::E_BoxBoxdataEquipDesc& E_BoxBoxdata::m_equip(int index) const {
  return m_equip_.Get(index);
}
inline ::proto_ff::E_BoxBoxdataEquipDesc* E_BoxBoxdata::mutable_m_equip(int index) {
  return m_equip_.Mutable(index);
}
inline ::proto_ff::E_BoxBoxdataEquipDesc* E_BoxBoxdata::add_m_equip() {
  return m_equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataEquipDesc >&
E_BoxBoxdata::m_equip() const {
  return m_equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataEquipDesc >*
E_BoxBoxdata::mutable_m_equip() {
  return &m_equip_;
}

// repeated .proto_ff.E_BoxBoxdataItemDesc m_item = 14;
inline int E_BoxBoxdata::m_item_size() const {
  return m_item_.size();
}
inline void E_BoxBoxdata::clear_m_item() {
  m_item_.Clear();
}
inline const ::proto_ff::E_BoxBoxdataItemDesc& E_BoxBoxdata::m_item(int index) const {
  return m_item_.Get(index);
}
inline ::proto_ff::E_BoxBoxdataItemDesc* E_BoxBoxdata::mutable_m_item(int index) {
  return m_item_.Mutable(index);
}
inline ::proto_ff::E_BoxBoxdataItemDesc* E_BoxBoxdata::add_m_item() {
  return m_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataItemDesc >&
E_BoxBoxdata::m_item() const {
  return m_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdataItemDesc >*
E_BoxBoxdata::mutable_m_item() {
  return &m_item_;
}

// -------------------------------------------------------------------

// Sheet_BoxBoxdata

// repeated .proto_ff.E_BoxBoxdata E_BoxBoxdata_List = 1;
inline int Sheet_BoxBoxdata::e_boxboxdata_list_size() const {
  return e_boxboxdata_list_.size();
}
inline void Sheet_BoxBoxdata::clear_e_boxboxdata_list() {
  e_boxboxdata_list_.Clear();
}
inline const ::proto_ff::E_BoxBoxdata& Sheet_BoxBoxdata::e_boxboxdata_list(int index) const {
  return e_boxboxdata_list_.Get(index);
}
inline ::proto_ff::E_BoxBoxdata* Sheet_BoxBoxdata::mutable_e_boxboxdata_list(int index) {
  return e_boxboxdata_list_.Mutable(index);
}
inline ::proto_ff::E_BoxBoxdata* Sheet_BoxBoxdata::add_e_boxboxdata_list() {
  return e_boxboxdata_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdata >&
Sheet_BoxBoxdata::e_boxboxdata_list() const {
  return e_boxboxdata_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_BoxBoxdata >*
Sheet_BoxBoxdata::mutable_e_boxboxdata_list() {
  return &e_boxboxdata_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fBox_2eproto__INCLUDED
