// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Recharge.proto

#ifndef PROTOBUF_E_5fRecharge_2eproto__INCLUDED
#define PROTOBUF_E_5fRecharge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fRecharge_2eproto();
void protobuf_AssignDesc_E_5fRecharge_2eproto();
void protobuf_ShutdownFile_E_5fRecharge_2eproto();

class E_RechargeRechargeChannelDesc;
class E_RechargeRechargeItemDesc;
class E_RechargeRecharge;
class Sheet_RechargeRecharge;
class E_RechargeOneclickbuyAllbuyDesc;
class E_RechargeOneclickbuy;
class Sheet_RechargeOneclickbuy;

// ===================================================================

class E_RechargeRechargeChannelDesc : public ::google::protobuf::Message {
 public:
  E_RechargeRechargeChannelDesc();
  virtual ~E_RechargeRechargeChannelDesc();

  E_RechargeRechargeChannelDesc(const E_RechargeRechargeChannelDesc& from);

  inline E_RechargeRechargeChannelDesc& operator=(const E_RechargeRechargeChannelDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_RechargeRechargeChannelDesc& default_instance();

  void Swap(E_RechargeRechargeChannelDesc* other);

  // implements Message ----------------------------------------------

  E_RechargeRechargeChannelDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_RechargeRechargeChannelDesc& from);
  void MergeFrom(const E_RechargeRechargeChannelDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string m_point = 1;
  inline bool has_m_point() const;
  inline void clear_m_point();
  static const int kMPointFieldNumber = 1;
  inline const ::std::string& m_point() const;
  inline void set_m_point(const ::std::string& value);
  inline void set_m_point(const char* value);
  inline void set_m_point(const char* value, size_t size);
  inline ::std::string* mutable_m_point();
  inline ::std::string* release_m_point();
  inline void set_allocated_m_point(::std::string* m_point);

  // optional int32 m_id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_RechargeRechargeChannelDesc)
 private:
  inline void set_has_m_point();
  inline void clear_has_m_point();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_point_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_E_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_E_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static E_RechargeRechargeChannelDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_RechargeRechargeItemDesc : public ::google::protobuf::Message {
 public:
  E_RechargeRechargeItemDesc();
  virtual ~E_RechargeRechargeItemDesc();

  E_RechargeRechargeItemDesc(const E_RechargeRechargeItemDesc& from);

  inline E_RechargeRechargeItemDesc& operator=(const E_RechargeRechargeItemDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_RechargeRechargeItemDesc& default_instance();

  void Swap(E_RechargeRechargeItemDesc* other);

  // implements Message ----------------------------------------------

  E_RechargeRechargeItemDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_RechargeRechargeItemDesc& from);
  void MergeFrom(const E_RechargeRechargeItemDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_Num = 1;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 1;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // optional int64 m_Id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_RechargeRechargeItemDesc)
 private:
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;
  ::google::protobuf::int32 m_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_E_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_E_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static E_RechargeRechargeItemDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_RechargeRecharge : public ::google::protobuf::Message {
 public:
  E_RechargeRecharge();
  virtual ~E_RechargeRecharge();

  E_RechargeRecharge(const E_RechargeRecharge& from);

  inline E_RechargeRecharge& operator=(const E_RechargeRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_RechargeRecharge& default_instance();

  void Swap(E_RechargeRecharge* other);

  // implements Message ----------------------------------------------

  E_RechargeRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_RechargeRecharge& from);
  void MergeFrom(const E_RechargeRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional string m_defaultPoint = 3;
  inline bool has_m_defaultpoint() const;
  inline void clear_m_defaultpoint();
  static const int kMDefaultPointFieldNumber = 3;
  inline const ::std::string& m_defaultpoint() const;
  inline void set_m_defaultpoint(const ::std::string& value);
  inline void set_m_defaultpoint(const char* value);
  inline void set_m_defaultpoint(const char* value, size_t size);
  inline ::std::string* mutable_m_defaultpoint();
  inline ::std::string* release_m_defaultpoint();
  inline void set_allocated_m_defaultpoint(::std::string* m_defaultpoint);

  // optional int32 m_type = 4;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional string m_unit = 5;
  inline bool has_m_unit() const;
  inline void clear_m_unit();
  static const int kMUnitFieldNumber = 5;
  inline const ::std::string& m_unit() const;
  inline void set_m_unit(const ::std::string& value);
  inline void set_m_unit(const char* value);
  inline void set_m_unit(const char* value, size_t size);
  inline ::std::string* mutable_m_unit();
  inline ::std::string* release_m_unit();
  inline void set_allocated_m_unit(::std::string* m_unit);

  // optional string m_beizhu = 6;
  inline bool has_m_beizhu() const;
  inline void clear_m_beizhu();
  static const int kMBeizhuFieldNumber = 6;
  inline const ::std::string& m_beizhu() const;
  inline void set_m_beizhu(const ::std::string& value);
  inline void set_m_beizhu(const char* value);
  inline void set_m_beizhu(const char* value, size_t size);
  inline ::std::string* mutable_m_beizhu();
  inline ::std::string* release_m_beizhu();
  inline void set_allocated_m_beizhu(::std::string* m_beizhu);

  // optional int64 m_quantity = 7;
  inline bool has_m_quantity() const;
  inline void clear_m_quantity();
  static const int kMQuantityFieldNumber = 7;
  inline ::google::protobuf::int64 m_quantity() const;
  inline void set_m_quantity(::google::protobuf::int64 value);

  // optional int32 m_itemNum = 8;
  inline bool has_m_itemnum() const;
  inline void clear_m_itemnum();
  static const int kMItemNumFieldNumber = 8;
  inline ::google::protobuf::int32 m_itemnum() const;
  inline void set_m_itemnum(::google::protobuf::int32 value);

  // optional int64 m_multipleTimes = 9;
  inline bool has_m_multipletimes() const;
  inline void clear_m_multipletimes();
  static const int kMMultipleTimesFieldNumber = 9;
  inline ::google::protobuf::int64 m_multipletimes() const;
  inline void set_m_multipletimes(::google::protobuf::int64 value);

  // optional int64 m_multipleReward = 10;
  inline bool has_m_multiplereward() const;
  inline void clear_m_multiplereward();
  static const int kMMultipleRewardFieldNumber = 10;
  inline ::google::protobuf::int64 m_multiplereward() const;
  inline void set_m_multiplereward(::google::protobuf::int64 value);

  // optional int32 m_zuanshitype = 11;
  inline bool has_m_zuanshitype() const;
  inline void clear_m_zuanshitype();
  static const int kMZuanshitypeFieldNumber = 11;
  inline ::google::protobuf::int32 m_zuanshitype() const;
  inline void set_m_zuanshitype(::google::protobuf::int32 value);

  // optional int32 m_vipExp = 12;
  inline bool has_m_vipexp() const;
  inline void clear_m_vipexp();
  static const int kMVipExpFieldNumber = 12;
  inline ::google::protobuf::int32 m_vipexp() const;
  inline void set_m_vipexp(::google::protobuf::int32 value);

  // optional int32 m_vipExpLimit = 13;
  inline bool has_m_vipexplimit() const;
  inline void clear_m_vipexplimit();
  static const int kMVipExpLimitFieldNumber = 13;
  inline ::google::protobuf::int32 m_vipexplimit() const;
  inline void set_m_vipexplimit(::google::protobuf::int32 value);

  // optional int32 m_activityCount = 14;
  inline bool has_m_activitycount() const;
  inline void clear_m_activitycount();
  static const int kMActivityCountFieldNumber = 14;
  inline ::google::protobuf::int32 m_activitycount() const;
  inline void set_m_activitycount(::google::protobuf::int32 value);

  // optional int32 m_price = 15;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 15;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 m_presentID = 16;
  inline bool has_m_presentid() const;
  inline void clear_m_presentid();
  static const int kMPresentIDFieldNumber = 16;
  inline ::google::protobuf::int32 m_presentid() const;
  inline void set_m_presentid(::google::protobuf::int32 value);

  // optional int32 m_fristpresent = 17;
  inline bool has_m_fristpresent() const;
  inline void clear_m_fristpresent();
  static const int kMFristpresentFieldNumber = 17;
  inline ::google::protobuf::int32 m_fristpresent() const;
  inline void set_m_fristpresent(::google::protobuf::int32 value);

  // optional string m_icon = 18;
  inline bool has_m_icon() const;
  inline void clear_m_icon();
  static const int kMIconFieldNumber = 18;
  inline const ::std::string& m_icon() const;
  inline void set_m_icon(const ::std::string& value);
  inline void set_m_icon(const char* value);
  inline void set_m_icon(const char* value, size_t size);
  inline ::std::string* mutable_m_icon();
  inline ::std::string* release_m_icon();
  inline void set_allocated_m_icon(::std::string* m_icon);

  // repeated .proto_ff.E_RechargeRechargeChannelDesc m_channel = 19;
  inline int m_channel_size() const;
  inline void clear_m_channel();
  static const int kMChannelFieldNumber = 19;
  inline const ::proto_ff::E_RechargeRechargeChannelDesc& m_channel(int index) const;
  inline ::proto_ff::E_RechargeRechargeChannelDesc* mutable_m_channel(int index);
  inline ::proto_ff::E_RechargeRechargeChannelDesc* add_m_channel();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeChannelDesc >&
      m_channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeChannelDesc >*
      mutable_m_channel();

  // repeated .proto_ff.E_RechargeRechargeItemDesc m_item = 20;
  inline int m_item_size() const;
  inline void clear_m_item();
  static const int kMItemFieldNumber = 20;
  inline const ::proto_ff::E_RechargeRechargeItemDesc& m_item(int index) const;
  inline ::proto_ff::E_RechargeRechargeItemDesc* mutable_m_item(int index);
  inline ::proto_ff::E_RechargeRechargeItemDesc* add_m_item();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeItemDesc >&
      m_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeItemDesc >*
      mutable_m_item();

  // @@protoc_insertion_point(class_scope:proto_ff.E_RechargeRecharge)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_defaultpoint();
  inline void clear_has_m_defaultpoint();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_unit();
  inline void clear_has_m_unit();
  inline void set_has_m_beizhu();
  inline void clear_has_m_beizhu();
  inline void set_has_m_quantity();
  inline void clear_has_m_quantity();
  inline void set_has_m_itemnum();
  inline void clear_has_m_itemnum();
  inline void set_has_m_multipletimes();
  inline void clear_has_m_multipletimes();
  inline void set_has_m_multiplereward();
  inline void clear_has_m_multiplereward();
  inline void set_has_m_zuanshitype();
  inline void clear_has_m_zuanshitype();
  inline void set_has_m_vipexp();
  inline void clear_has_m_vipexp();
  inline void set_has_m_vipexplimit();
  inline void clear_has_m_vipexplimit();
  inline void set_has_m_activitycount();
  inline void clear_has_m_activitycount();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_presentid();
  inline void clear_has_m_presentid();
  inline void set_has_m_fristpresent();
  inline void clear_has_m_fristpresent();
  inline void set_has_m_icon();
  inline void clear_has_m_icon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_name_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_type_;
  ::std::string* m_defaultpoint_;
  ::std::string* m_unit_;
  ::std::string* m_beizhu_;
  ::google::protobuf::int64 m_quantity_;
  ::google::protobuf::int64 m_multipletimes_;
  ::google::protobuf::int32 m_itemnum_;
  ::google::protobuf::int32 m_zuanshitype_;
  ::google::protobuf::int64 m_multiplereward_;
  ::google::protobuf::int32 m_vipexp_;
  ::google::protobuf::int32 m_vipexplimit_;
  ::google::protobuf::int32 m_activitycount_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 m_presentid_;
  ::google::protobuf::int32 m_fristpresent_;
  ::std::string* m_icon_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeChannelDesc > m_channel_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeItemDesc > m_item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_E_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_E_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static E_RechargeRecharge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_RechargeRecharge : public ::google::protobuf::Message {
 public:
  Sheet_RechargeRecharge();
  virtual ~Sheet_RechargeRecharge();

  Sheet_RechargeRecharge(const Sheet_RechargeRecharge& from);

  inline Sheet_RechargeRecharge& operator=(const Sheet_RechargeRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_RechargeRecharge& default_instance();

  void Swap(Sheet_RechargeRecharge* other);

  // implements Message ----------------------------------------------

  Sheet_RechargeRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_RechargeRecharge& from);
  void MergeFrom(const Sheet_RechargeRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_RechargeRecharge E_RechargeRecharge_List = 1;
  inline int e_rechargerecharge_list_size() const;
  inline void clear_e_rechargerecharge_list();
  static const int kERechargeRechargeListFieldNumber = 1;
  inline const ::proto_ff::E_RechargeRecharge& e_rechargerecharge_list(int index) const;
  inline ::proto_ff::E_RechargeRecharge* mutable_e_rechargerecharge_list(int index);
  inline ::proto_ff::E_RechargeRecharge* add_e_rechargerecharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRecharge >&
      e_rechargerecharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRecharge >*
      mutable_e_rechargerecharge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_RechargeRecharge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRecharge > e_rechargerecharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_E_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_E_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static Sheet_RechargeRecharge* default_instance_;
};
// -------------------------------------------------------------------

class E_RechargeOneclickbuyAllbuyDesc : public ::google::protobuf::Message {
 public:
  E_RechargeOneclickbuyAllbuyDesc();
  virtual ~E_RechargeOneclickbuyAllbuyDesc();

  E_RechargeOneclickbuyAllbuyDesc(const E_RechargeOneclickbuyAllbuyDesc& from);

  inline E_RechargeOneclickbuyAllbuyDesc& operator=(const E_RechargeOneclickbuyAllbuyDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_RechargeOneclickbuyAllbuyDesc& default_instance();

  void Swap(E_RechargeOneclickbuyAllbuyDesc* other);

  // implements Message ----------------------------------------------

  E_RechargeOneclickbuyAllbuyDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_RechargeOneclickbuyAllbuyDesc& from);
  void MergeFrom(const E_RechargeOneclickbuyAllbuyDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_RechargeOneclickbuyAllbuyDesc)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_E_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_E_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static E_RechargeOneclickbuyAllbuyDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_RechargeOneclickbuy : public ::google::protobuf::Message {
 public:
  E_RechargeOneclickbuy();
  virtual ~E_RechargeOneclickbuy();

  E_RechargeOneclickbuy(const E_RechargeOneclickbuy& from);

  inline E_RechargeOneclickbuy& operator=(const E_RechargeOneclickbuy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_RechargeOneclickbuy& default_instance();

  void Swap(E_RechargeOneclickbuy* other);

  // implements Message ----------------------------------------------

  E_RechargeOneclickbuy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_RechargeOneclickbuy& from);
  void MergeFrom(const E_RechargeOneclickbuy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional string m_allowid = 3;
  inline bool has_m_allowid() const;
  inline void clear_m_allowid();
  static const int kMAllowidFieldNumber = 3;
  inline const ::std::string& m_allowid() const;
  inline void set_m_allowid(const ::std::string& value);
  inline void set_m_allowid(const char* value);
  inline void set_m_allowid(const char* value, size_t size);
  inline ::std::string* mutable_m_allowid();
  inline ::std::string* release_m_allowid();
  inline void set_allocated_m_allowid(::std::string* m_allowid);

  // optional string m_num_limit = 4;
  inline bool has_m_num_limit() const;
  inline void clear_m_num_limit();
  static const int kMNumLimitFieldNumber = 4;
  inline const ::std::string& m_num_limit() const;
  inline void set_m_num_limit(const ::std::string& value);
  inline void set_m_num_limit(const char* value);
  inline void set_m_num_limit(const char* value, size_t size);
  inline ::std::string* mutable_m_num_limit();
  inline ::std::string* release_m_num_limit();
  inline void set_allocated_m_num_limit(::std::string* m_num_limit);

  // optional int32 m_discount = 5;
  inline bool has_m_discount() const;
  inline void clear_m_discount();
  static const int kMDiscountFieldNumber = 5;
  inline ::google::protobuf::int32 m_discount() const;
  inline void set_m_discount(::google::protobuf::int32 value);

  // optional int32 m_rechargeid = 6;
  inline bool has_m_rechargeid() const;
  inline void clear_m_rechargeid();
  static const int kMRechargeidFieldNumber = 6;
  inline ::google::protobuf::int32 m_rechargeid() const;
  inline void set_m_rechargeid(::google::protobuf::int32 value);

  // repeated .proto_ff.E_RechargeOneclickbuyAllbuyDesc m_allbuy = 7;
  inline int m_allbuy_size() const;
  inline void clear_m_allbuy();
  static const int kMAllbuyFieldNumber = 7;
  inline const ::proto_ff::E_RechargeOneclickbuyAllbuyDesc& m_allbuy(int index) const;
  inline ::proto_ff::E_RechargeOneclickbuyAllbuyDesc* mutable_m_allbuy(int index);
  inline ::proto_ff::E_RechargeOneclickbuyAllbuyDesc* add_m_allbuy();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuyAllbuyDesc >&
      m_allbuy() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuyAllbuyDesc >*
      mutable_m_allbuy();

  // @@protoc_insertion_point(class_scope:proto_ff.E_RechargeOneclickbuy)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_allowid();
  inline void clear_has_m_allowid();
  inline void set_has_m_num_limit();
  inline void clear_has_m_num_limit();
  inline void set_has_m_discount();
  inline void clear_has_m_discount();
  inline void set_has_m_rechargeid();
  inline void clear_has_m_rechargeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_name_;
  ::std::string* m_allowid_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_discount_;
  ::std::string* m_num_limit_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuyAllbuyDesc > m_allbuy_;
  ::google::protobuf::int32 m_rechargeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_E_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_E_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static E_RechargeOneclickbuy* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_RechargeOneclickbuy : public ::google::protobuf::Message {
 public:
  Sheet_RechargeOneclickbuy();
  virtual ~Sheet_RechargeOneclickbuy();

  Sheet_RechargeOneclickbuy(const Sheet_RechargeOneclickbuy& from);

  inline Sheet_RechargeOneclickbuy& operator=(const Sheet_RechargeOneclickbuy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_RechargeOneclickbuy& default_instance();

  void Swap(Sheet_RechargeOneclickbuy* other);

  // implements Message ----------------------------------------------

  Sheet_RechargeOneclickbuy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_RechargeOneclickbuy& from);
  void MergeFrom(const Sheet_RechargeOneclickbuy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_RechargeOneclickbuy E_RechargeOneclickbuy_List = 1;
  inline int e_rechargeoneclickbuy_list_size() const;
  inline void clear_e_rechargeoneclickbuy_list();
  static const int kERechargeOneclickbuyListFieldNumber = 1;
  inline const ::proto_ff::E_RechargeOneclickbuy& e_rechargeoneclickbuy_list(int index) const;
  inline ::proto_ff::E_RechargeOneclickbuy* mutable_e_rechargeoneclickbuy_list(int index);
  inline ::proto_ff::E_RechargeOneclickbuy* add_e_rechargeoneclickbuy_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuy >&
      e_rechargeoneclickbuy_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuy >*
      mutable_e_rechargeoneclickbuy_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_RechargeOneclickbuy)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuy > e_rechargeoneclickbuy_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_E_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_E_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static Sheet_RechargeOneclickbuy* default_instance_;
};
// ===================================================================


// ===================================================================

// E_RechargeRechargeChannelDesc

// optional string m_point = 1;
inline bool E_RechargeRechargeChannelDesc::has_m_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_RechargeRechargeChannelDesc::set_has_m_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_RechargeRechargeChannelDesc::clear_has_m_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_RechargeRechargeChannelDesc::clear_m_point() {
  if (m_point_ != &::google::protobuf::internal::kEmptyString) {
    m_point_->clear();
  }
  clear_has_m_point();
}
inline const ::std::string& E_RechargeRechargeChannelDesc::m_point() const {
  return *m_point_;
}
inline void E_RechargeRechargeChannelDesc::set_m_point(const ::std::string& value) {
  set_has_m_point();
  if (m_point_ == &::google::protobuf::internal::kEmptyString) {
    m_point_ = new ::std::string;
  }
  m_point_->assign(value);
}
inline void E_RechargeRechargeChannelDesc::set_m_point(const char* value) {
  set_has_m_point();
  if (m_point_ == &::google::protobuf::internal::kEmptyString) {
    m_point_ = new ::std::string;
  }
  m_point_->assign(value);
}
inline void E_RechargeRechargeChannelDesc::set_m_point(const char* value, size_t size) {
  set_has_m_point();
  if (m_point_ == &::google::protobuf::internal::kEmptyString) {
    m_point_ = new ::std::string;
  }
  m_point_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeRechargeChannelDesc::mutable_m_point() {
  set_has_m_point();
  if (m_point_ == &::google::protobuf::internal::kEmptyString) {
    m_point_ = new ::std::string;
  }
  return m_point_;
}
inline ::std::string* E_RechargeRechargeChannelDesc::release_m_point() {
  clear_has_m_point();
  if (m_point_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_point_;
    m_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeRechargeChannelDesc::set_allocated_m_point(::std::string* m_point) {
  if (m_point_ != &::google::protobuf::internal::kEmptyString) {
    delete m_point_;
  }
  if (m_point) {
    set_has_m_point();
    m_point_ = m_point;
  } else {
    clear_has_m_point();
    m_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_id = 2;
inline bool E_RechargeRechargeChannelDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_RechargeRechargeChannelDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_RechargeRechargeChannelDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_RechargeRechargeChannelDesc::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_RechargeRechargeChannelDesc::m_id() const {
  return m_id_;
}
inline void E_RechargeRechargeChannelDesc::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_RechargeRechargeItemDesc

// optional int32 m_Num = 1;
inline bool E_RechargeRechargeItemDesc::has_m_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_RechargeRechargeItemDesc::set_has_m_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_RechargeRechargeItemDesc::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_RechargeRechargeItemDesc::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_RechargeRechargeItemDesc::m_num() const {
  return m_num_;
}
inline void E_RechargeRechargeItemDesc::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// optional int64 m_Id = 2;
inline bool E_RechargeRechargeItemDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_RechargeRechargeItemDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_RechargeRechargeItemDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_RechargeRechargeItemDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_RechargeRechargeItemDesc::m_id() const {
  return m_id_;
}
inline void E_RechargeRechargeItemDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_RechargeRecharge

// optional int32 m_id = 1;
inline bool E_RechargeRecharge::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_RechargeRecharge::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_RechargeRecharge::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_RechargeRecharge::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_id() const {
  return m_id_;
}
inline void E_RechargeRecharge::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_name = 2;
inline bool E_RechargeRecharge::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_RechargeRecharge::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_RechargeRecharge::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_RechargeRecharge::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_RechargeRecharge::m_name() const {
  return *m_name_;
}
inline void E_RechargeRecharge::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_RechargeRecharge::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_RechargeRecharge::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeRecharge::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_RechargeRecharge::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeRecharge::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_defaultPoint = 3;
inline bool E_RechargeRecharge::has_m_defaultpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_RechargeRecharge::set_has_m_defaultpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_RechargeRecharge::clear_has_m_defaultpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_RechargeRecharge::clear_m_defaultpoint() {
  if (m_defaultpoint_ != &::google::protobuf::internal::kEmptyString) {
    m_defaultpoint_->clear();
  }
  clear_has_m_defaultpoint();
}
inline const ::std::string& E_RechargeRecharge::m_defaultpoint() const {
  return *m_defaultpoint_;
}
inline void E_RechargeRecharge::set_m_defaultpoint(const ::std::string& value) {
  set_has_m_defaultpoint();
  if (m_defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    m_defaultpoint_ = new ::std::string;
  }
  m_defaultpoint_->assign(value);
}
inline void E_RechargeRecharge::set_m_defaultpoint(const char* value) {
  set_has_m_defaultpoint();
  if (m_defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    m_defaultpoint_ = new ::std::string;
  }
  m_defaultpoint_->assign(value);
}
inline void E_RechargeRecharge::set_m_defaultpoint(const char* value, size_t size) {
  set_has_m_defaultpoint();
  if (m_defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    m_defaultpoint_ = new ::std::string;
  }
  m_defaultpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeRecharge::mutable_m_defaultpoint() {
  set_has_m_defaultpoint();
  if (m_defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    m_defaultpoint_ = new ::std::string;
  }
  return m_defaultpoint_;
}
inline ::std::string* E_RechargeRecharge::release_m_defaultpoint() {
  clear_has_m_defaultpoint();
  if (m_defaultpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_defaultpoint_;
    m_defaultpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeRecharge::set_allocated_m_defaultpoint(::std::string* m_defaultpoint) {
  if (m_defaultpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete m_defaultpoint_;
  }
  if (m_defaultpoint) {
    set_has_m_defaultpoint();
    m_defaultpoint_ = m_defaultpoint;
  } else {
    clear_has_m_defaultpoint();
    m_defaultpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_type = 4;
inline bool E_RechargeRecharge::has_m_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_RechargeRecharge::set_has_m_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_RechargeRecharge::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_RechargeRecharge::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_type() const {
  return m_type_;
}
inline void E_RechargeRecharge::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional string m_unit = 5;
inline bool E_RechargeRecharge::has_m_unit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_RechargeRecharge::set_has_m_unit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_RechargeRecharge::clear_has_m_unit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_RechargeRecharge::clear_m_unit() {
  if (m_unit_ != &::google::protobuf::internal::kEmptyString) {
    m_unit_->clear();
  }
  clear_has_m_unit();
}
inline const ::std::string& E_RechargeRecharge::m_unit() const {
  return *m_unit_;
}
inline void E_RechargeRecharge::set_m_unit(const ::std::string& value) {
  set_has_m_unit();
  if (m_unit_ == &::google::protobuf::internal::kEmptyString) {
    m_unit_ = new ::std::string;
  }
  m_unit_->assign(value);
}
inline void E_RechargeRecharge::set_m_unit(const char* value) {
  set_has_m_unit();
  if (m_unit_ == &::google::protobuf::internal::kEmptyString) {
    m_unit_ = new ::std::string;
  }
  m_unit_->assign(value);
}
inline void E_RechargeRecharge::set_m_unit(const char* value, size_t size) {
  set_has_m_unit();
  if (m_unit_ == &::google::protobuf::internal::kEmptyString) {
    m_unit_ = new ::std::string;
  }
  m_unit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeRecharge::mutable_m_unit() {
  set_has_m_unit();
  if (m_unit_ == &::google::protobuf::internal::kEmptyString) {
    m_unit_ = new ::std::string;
  }
  return m_unit_;
}
inline ::std::string* E_RechargeRecharge::release_m_unit() {
  clear_has_m_unit();
  if (m_unit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_unit_;
    m_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeRecharge::set_allocated_m_unit(::std::string* m_unit) {
  if (m_unit_ != &::google::protobuf::internal::kEmptyString) {
    delete m_unit_;
  }
  if (m_unit) {
    set_has_m_unit();
    m_unit_ = m_unit;
  } else {
    clear_has_m_unit();
    m_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_beizhu = 6;
inline bool E_RechargeRecharge::has_m_beizhu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_RechargeRecharge::set_has_m_beizhu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_RechargeRecharge::clear_has_m_beizhu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_RechargeRecharge::clear_m_beizhu() {
  if (m_beizhu_ != &::google::protobuf::internal::kEmptyString) {
    m_beizhu_->clear();
  }
  clear_has_m_beizhu();
}
inline const ::std::string& E_RechargeRecharge::m_beizhu() const {
  return *m_beizhu_;
}
inline void E_RechargeRecharge::set_m_beizhu(const ::std::string& value) {
  set_has_m_beizhu();
  if (m_beizhu_ == &::google::protobuf::internal::kEmptyString) {
    m_beizhu_ = new ::std::string;
  }
  m_beizhu_->assign(value);
}
inline void E_RechargeRecharge::set_m_beizhu(const char* value) {
  set_has_m_beizhu();
  if (m_beizhu_ == &::google::protobuf::internal::kEmptyString) {
    m_beizhu_ = new ::std::string;
  }
  m_beizhu_->assign(value);
}
inline void E_RechargeRecharge::set_m_beizhu(const char* value, size_t size) {
  set_has_m_beizhu();
  if (m_beizhu_ == &::google::protobuf::internal::kEmptyString) {
    m_beizhu_ = new ::std::string;
  }
  m_beizhu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeRecharge::mutable_m_beizhu() {
  set_has_m_beizhu();
  if (m_beizhu_ == &::google::protobuf::internal::kEmptyString) {
    m_beizhu_ = new ::std::string;
  }
  return m_beizhu_;
}
inline ::std::string* E_RechargeRecharge::release_m_beizhu() {
  clear_has_m_beizhu();
  if (m_beizhu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_beizhu_;
    m_beizhu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeRecharge::set_allocated_m_beizhu(::std::string* m_beizhu) {
  if (m_beizhu_ != &::google::protobuf::internal::kEmptyString) {
    delete m_beizhu_;
  }
  if (m_beizhu) {
    set_has_m_beizhu();
    m_beizhu_ = m_beizhu;
  } else {
    clear_has_m_beizhu();
    m_beizhu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 m_quantity = 7;
inline bool E_RechargeRecharge::has_m_quantity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_RechargeRecharge::set_has_m_quantity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_RechargeRecharge::clear_has_m_quantity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_RechargeRecharge::clear_m_quantity() {
  m_quantity_ = GOOGLE_LONGLONG(0);
  clear_has_m_quantity();
}
inline ::google::protobuf::int64 E_RechargeRecharge::m_quantity() const {
  return m_quantity_;
}
inline void E_RechargeRecharge::set_m_quantity(::google::protobuf::int64 value) {
  set_has_m_quantity();
  m_quantity_ = value;
}

// optional int32 m_itemNum = 8;
inline bool E_RechargeRecharge::has_m_itemnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_RechargeRecharge::set_has_m_itemnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_RechargeRecharge::clear_has_m_itemnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_RechargeRecharge::clear_m_itemnum() {
  m_itemnum_ = 0;
  clear_has_m_itemnum();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_itemnum() const {
  return m_itemnum_;
}
inline void E_RechargeRecharge::set_m_itemnum(::google::protobuf::int32 value) {
  set_has_m_itemnum();
  m_itemnum_ = value;
}

// optional int64 m_multipleTimes = 9;
inline bool E_RechargeRecharge::has_m_multipletimes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_RechargeRecharge::set_has_m_multipletimes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_RechargeRecharge::clear_has_m_multipletimes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_RechargeRecharge::clear_m_multipletimes() {
  m_multipletimes_ = GOOGLE_LONGLONG(0);
  clear_has_m_multipletimes();
}
inline ::google::protobuf::int64 E_RechargeRecharge::m_multipletimes() const {
  return m_multipletimes_;
}
inline void E_RechargeRecharge::set_m_multipletimes(::google::protobuf::int64 value) {
  set_has_m_multipletimes();
  m_multipletimes_ = value;
}

// optional int64 m_multipleReward = 10;
inline bool E_RechargeRecharge::has_m_multiplereward() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_RechargeRecharge::set_has_m_multiplereward() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_RechargeRecharge::clear_has_m_multiplereward() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_RechargeRecharge::clear_m_multiplereward() {
  m_multiplereward_ = GOOGLE_LONGLONG(0);
  clear_has_m_multiplereward();
}
inline ::google::protobuf::int64 E_RechargeRecharge::m_multiplereward() const {
  return m_multiplereward_;
}
inline void E_RechargeRecharge::set_m_multiplereward(::google::protobuf::int64 value) {
  set_has_m_multiplereward();
  m_multiplereward_ = value;
}

// optional int32 m_zuanshitype = 11;
inline bool E_RechargeRecharge::has_m_zuanshitype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_RechargeRecharge::set_has_m_zuanshitype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_RechargeRecharge::clear_has_m_zuanshitype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_RechargeRecharge::clear_m_zuanshitype() {
  m_zuanshitype_ = 0;
  clear_has_m_zuanshitype();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_zuanshitype() const {
  return m_zuanshitype_;
}
inline void E_RechargeRecharge::set_m_zuanshitype(::google::protobuf::int32 value) {
  set_has_m_zuanshitype();
  m_zuanshitype_ = value;
}

// optional int32 m_vipExp = 12;
inline bool E_RechargeRecharge::has_m_vipexp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_RechargeRecharge::set_has_m_vipexp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_RechargeRecharge::clear_has_m_vipexp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_RechargeRecharge::clear_m_vipexp() {
  m_vipexp_ = 0;
  clear_has_m_vipexp();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_vipexp() const {
  return m_vipexp_;
}
inline void E_RechargeRecharge::set_m_vipexp(::google::protobuf::int32 value) {
  set_has_m_vipexp();
  m_vipexp_ = value;
}

// optional int32 m_vipExpLimit = 13;
inline bool E_RechargeRecharge::has_m_vipexplimit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_RechargeRecharge::set_has_m_vipexplimit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_RechargeRecharge::clear_has_m_vipexplimit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_RechargeRecharge::clear_m_vipexplimit() {
  m_vipexplimit_ = 0;
  clear_has_m_vipexplimit();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_vipexplimit() const {
  return m_vipexplimit_;
}
inline void E_RechargeRecharge::set_m_vipexplimit(::google::protobuf::int32 value) {
  set_has_m_vipexplimit();
  m_vipexplimit_ = value;
}

// optional int32 m_activityCount = 14;
inline bool E_RechargeRecharge::has_m_activitycount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_RechargeRecharge::set_has_m_activitycount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_RechargeRecharge::clear_has_m_activitycount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_RechargeRecharge::clear_m_activitycount() {
  m_activitycount_ = 0;
  clear_has_m_activitycount();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_activitycount() const {
  return m_activitycount_;
}
inline void E_RechargeRecharge::set_m_activitycount(::google::protobuf::int32 value) {
  set_has_m_activitycount();
  m_activitycount_ = value;
}

// optional int32 m_price = 15;
inline bool E_RechargeRecharge::has_m_price() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_RechargeRecharge::set_has_m_price() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_RechargeRecharge::clear_has_m_price() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_RechargeRecharge::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_price() const {
  return m_price_;
}
inline void E_RechargeRecharge::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_presentID = 16;
inline bool E_RechargeRecharge::has_m_presentid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_RechargeRecharge::set_has_m_presentid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_RechargeRecharge::clear_has_m_presentid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_RechargeRecharge::clear_m_presentid() {
  m_presentid_ = 0;
  clear_has_m_presentid();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_presentid() const {
  return m_presentid_;
}
inline void E_RechargeRecharge::set_m_presentid(::google::protobuf::int32 value) {
  set_has_m_presentid();
  m_presentid_ = value;
}

// optional int32 m_fristpresent = 17;
inline bool E_RechargeRecharge::has_m_fristpresent() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_RechargeRecharge::set_has_m_fristpresent() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_RechargeRecharge::clear_has_m_fristpresent() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_RechargeRecharge::clear_m_fristpresent() {
  m_fristpresent_ = 0;
  clear_has_m_fristpresent();
}
inline ::google::protobuf::int32 E_RechargeRecharge::m_fristpresent() const {
  return m_fristpresent_;
}
inline void E_RechargeRecharge::set_m_fristpresent(::google::protobuf::int32 value) {
  set_has_m_fristpresent();
  m_fristpresent_ = value;
}

// optional string m_icon = 18;
inline bool E_RechargeRecharge::has_m_icon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_RechargeRecharge::set_has_m_icon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_RechargeRecharge::clear_has_m_icon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_RechargeRecharge::clear_m_icon() {
  if (m_icon_ != &::google::protobuf::internal::kEmptyString) {
    m_icon_->clear();
  }
  clear_has_m_icon();
}
inline const ::std::string& E_RechargeRecharge::m_icon() const {
  return *m_icon_;
}
inline void E_RechargeRecharge::set_m_icon(const ::std::string& value) {
  set_has_m_icon();
  if (m_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_icon_ = new ::std::string;
  }
  m_icon_->assign(value);
}
inline void E_RechargeRecharge::set_m_icon(const char* value) {
  set_has_m_icon();
  if (m_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_icon_ = new ::std::string;
  }
  m_icon_->assign(value);
}
inline void E_RechargeRecharge::set_m_icon(const char* value, size_t size) {
  set_has_m_icon();
  if (m_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_icon_ = new ::std::string;
  }
  m_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeRecharge::mutable_m_icon() {
  set_has_m_icon();
  if (m_icon_ == &::google::protobuf::internal::kEmptyString) {
    m_icon_ = new ::std::string;
  }
  return m_icon_;
}
inline ::std::string* E_RechargeRecharge::release_m_icon() {
  clear_has_m_icon();
  if (m_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_icon_;
    m_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeRecharge::set_allocated_m_icon(::std::string* m_icon) {
  if (m_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_icon_;
  }
  if (m_icon) {
    set_has_m_icon();
    m_icon_ = m_icon;
  } else {
    clear_has_m_icon();
    m_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.E_RechargeRechargeChannelDesc m_channel = 19;
inline int E_RechargeRecharge::m_channel_size() const {
  return m_channel_.size();
}
inline void E_RechargeRecharge::clear_m_channel() {
  m_channel_.Clear();
}
inline const ::proto_ff::E_RechargeRechargeChannelDesc& E_RechargeRecharge::m_channel(int index) const {
  return m_channel_.Get(index);
}
inline ::proto_ff::E_RechargeRechargeChannelDesc* E_RechargeRecharge::mutable_m_channel(int index) {
  return m_channel_.Mutable(index);
}
inline ::proto_ff::E_RechargeRechargeChannelDesc* E_RechargeRecharge::add_m_channel() {
  return m_channel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeChannelDesc >&
E_RechargeRecharge::m_channel() const {
  return m_channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeChannelDesc >*
E_RechargeRecharge::mutable_m_channel() {
  return &m_channel_;
}

// repeated .proto_ff.E_RechargeRechargeItemDesc m_item = 20;
inline int E_RechargeRecharge::m_item_size() const {
  return m_item_.size();
}
inline void E_RechargeRecharge::clear_m_item() {
  m_item_.Clear();
}
inline const ::proto_ff::E_RechargeRechargeItemDesc& E_RechargeRecharge::m_item(int index) const {
  return m_item_.Get(index);
}
inline ::proto_ff::E_RechargeRechargeItemDesc* E_RechargeRecharge::mutable_m_item(int index) {
  return m_item_.Mutable(index);
}
inline ::proto_ff::E_RechargeRechargeItemDesc* E_RechargeRecharge::add_m_item() {
  return m_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeItemDesc >&
E_RechargeRecharge::m_item() const {
  return m_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRechargeItemDesc >*
E_RechargeRecharge::mutable_m_item() {
  return &m_item_;
}

// -------------------------------------------------------------------

// Sheet_RechargeRecharge

// repeated .proto_ff.E_RechargeRecharge E_RechargeRecharge_List = 1;
inline int Sheet_RechargeRecharge::e_rechargerecharge_list_size() const {
  return e_rechargerecharge_list_.size();
}
inline void Sheet_RechargeRecharge::clear_e_rechargerecharge_list() {
  e_rechargerecharge_list_.Clear();
}
inline const ::proto_ff::E_RechargeRecharge& Sheet_RechargeRecharge::e_rechargerecharge_list(int index) const {
  return e_rechargerecharge_list_.Get(index);
}
inline ::proto_ff::E_RechargeRecharge* Sheet_RechargeRecharge::mutable_e_rechargerecharge_list(int index) {
  return e_rechargerecharge_list_.Mutable(index);
}
inline ::proto_ff::E_RechargeRecharge* Sheet_RechargeRecharge::add_e_rechargerecharge_list() {
  return e_rechargerecharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRecharge >&
Sheet_RechargeRecharge::e_rechargerecharge_list() const {
  return e_rechargerecharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeRecharge >*
Sheet_RechargeRecharge::mutable_e_rechargerecharge_list() {
  return &e_rechargerecharge_list_;
}

// -------------------------------------------------------------------

// E_RechargeOneclickbuyAllbuyDesc

// optional int32 m_id = 1;
inline bool E_RechargeOneclickbuyAllbuyDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_RechargeOneclickbuyAllbuyDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_RechargeOneclickbuyAllbuyDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_RechargeOneclickbuyAllbuyDesc::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_RechargeOneclickbuyAllbuyDesc::m_id() const {
  return m_id_;
}
inline void E_RechargeOneclickbuyAllbuyDesc::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_RechargeOneclickbuy

// optional int32 m_id = 1;
inline bool E_RechargeOneclickbuy::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_RechargeOneclickbuy::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_RechargeOneclickbuy::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_RechargeOneclickbuy::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_RechargeOneclickbuy::m_id() const {
  return m_id_;
}
inline void E_RechargeOneclickbuy::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_name = 2;
inline bool E_RechargeOneclickbuy::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_RechargeOneclickbuy::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_RechargeOneclickbuy::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_RechargeOneclickbuy::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_RechargeOneclickbuy::m_name() const {
  return *m_name_;
}
inline void E_RechargeOneclickbuy::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_RechargeOneclickbuy::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_RechargeOneclickbuy::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeOneclickbuy::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_RechargeOneclickbuy::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeOneclickbuy::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_allowid = 3;
inline bool E_RechargeOneclickbuy::has_m_allowid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_RechargeOneclickbuy::set_has_m_allowid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_RechargeOneclickbuy::clear_has_m_allowid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_RechargeOneclickbuy::clear_m_allowid() {
  if (m_allowid_ != &::google::protobuf::internal::kEmptyString) {
    m_allowid_->clear();
  }
  clear_has_m_allowid();
}
inline const ::std::string& E_RechargeOneclickbuy::m_allowid() const {
  return *m_allowid_;
}
inline void E_RechargeOneclickbuy::set_m_allowid(const ::std::string& value) {
  set_has_m_allowid();
  if (m_allowid_ == &::google::protobuf::internal::kEmptyString) {
    m_allowid_ = new ::std::string;
  }
  m_allowid_->assign(value);
}
inline void E_RechargeOneclickbuy::set_m_allowid(const char* value) {
  set_has_m_allowid();
  if (m_allowid_ == &::google::protobuf::internal::kEmptyString) {
    m_allowid_ = new ::std::string;
  }
  m_allowid_->assign(value);
}
inline void E_RechargeOneclickbuy::set_m_allowid(const char* value, size_t size) {
  set_has_m_allowid();
  if (m_allowid_ == &::google::protobuf::internal::kEmptyString) {
    m_allowid_ = new ::std::string;
  }
  m_allowid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeOneclickbuy::mutable_m_allowid() {
  set_has_m_allowid();
  if (m_allowid_ == &::google::protobuf::internal::kEmptyString) {
    m_allowid_ = new ::std::string;
  }
  return m_allowid_;
}
inline ::std::string* E_RechargeOneclickbuy::release_m_allowid() {
  clear_has_m_allowid();
  if (m_allowid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_allowid_;
    m_allowid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeOneclickbuy::set_allocated_m_allowid(::std::string* m_allowid) {
  if (m_allowid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_allowid_;
  }
  if (m_allowid) {
    set_has_m_allowid();
    m_allowid_ = m_allowid;
  } else {
    clear_has_m_allowid();
    m_allowid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_num_limit = 4;
inline bool E_RechargeOneclickbuy::has_m_num_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_RechargeOneclickbuy::set_has_m_num_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_RechargeOneclickbuy::clear_has_m_num_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_RechargeOneclickbuy::clear_m_num_limit() {
  if (m_num_limit_ != &::google::protobuf::internal::kEmptyString) {
    m_num_limit_->clear();
  }
  clear_has_m_num_limit();
}
inline const ::std::string& E_RechargeOneclickbuy::m_num_limit() const {
  return *m_num_limit_;
}
inline void E_RechargeOneclickbuy::set_m_num_limit(const ::std::string& value) {
  set_has_m_num_limit();
  if (m_num_limit_ == &::google::protobuf::internal::kEmptyString) {
    m_num_limit_ = new ::std::string;
  }
  m_num_limit_->assign(value);
}
inline void E_RechargeOneclickbuy::set_m_num_limit(const char* value) {
  set_has_m_num_limit();
  if (m_num_limit_ == &::google::protobuf::internal::kEmptyString) {
    m_num_limit_ = new ::std::string;
  }
  m_num_limit_->assign(value);
}
inline void E_RechargeOneclickbuy::set_m_num_limit(const char* value, size_t size) {
  set_has_m_num_limit();
  if (m_num_limit_ == &::google::protobuf::internal::kEmptyString) {
    m_num_limit_ = new ::std::string;
  }
  m_num_limit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_RechargeOneclickbuy::mutable_m_num_limit() {
  set_has_m_num_limit();
  if (m_num_limit_ == &::google::protobuf::internal::kEmptyString) {
    m_num_limit_ = new ::std::string;
  }
  return m_num_limit_;
}
inline ::std::string* E_RechargeOneclickbuy::release_m_num_limit() {
  clear_has_m_num_limit();
  if (m_num_limit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_num_limit_;
    m_num_limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_RechargeOneclickbuy::set_allocated_m_num_limit(::std::string* m_num_limit) {
  if (m_num_limit_ != &::google::protobuf::internal::kEmptyString) {
    delete m_num_limit_;
  }
  if (m_num_limit) {
    set_has_m_num_limit();
    m_num_limit_ = m_num_limit;
  } else {
    clear_has_m_num_limit();
    m_num_limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_discount = 5;
inline bool E_RechargeOneclickbuy::has_m_discount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_RechargeOneclickbuy::set_has_m_discount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_RechargeOneclickbuy::clear_has_m_discount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_RechargeOneclickbuy::clear_m_discount() {
  m_discount_ = 0;
  clear_has_m_discount();
}
inline ::google::protobuf::int32 E_RechargeOneclickbuy::m_discount() const {
  return m_discount_;
}
inline void E_RechargeOneclickbuy::set_m_discount(::google::protobuf::int32 value) {
  set_has_m_discount();
  m_discount_ = value;
}

// optional int32 m_rechargeid = 6;
inline bool E_RechargeOneclickbuy::has_m_rechargeid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_RechargeOneclickbuy::set_has_m_rechargeid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_RechargeOneclickbuy::clear_has_m_rechargeid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_RechargeOneclickbuy::clear_m_rechargeid() {
  m_rechargeid_ = 0;
  clear_has_m_rechargeid();
}
inline ::google::protobuf::int32 E_RechargeOneclickbuy::m_rechargeid() const {
  return m_rechargeid_;
}
inline void E_RechargeOneclickbuy::set_m_rechargeid(::google::protobuf::int32 value) {
  set_has_m_rechargeid();
  m_rechargeid_ = value;
}

// repeated .proto_ff.E_RechargeOneclickbuyAllbuyDesc m_allbuy = 7;
inline int E_RechargeOneclickbuy::m_allbuy_size() const {
  return m_allbuy_.size();
}
inline void E_RechargeOneclickbuy::clear_m_allbuy() {
  m_allbuy_.Clear();
}
inline const ::proto_ff::E_RechargeOneclickbuyAllbuyDesc& E_RechargeOneclickbuy::m_allbuy(int index) const {
  return m_allbuy_.Get(index);
}
inline ::proto_ff::E_RechargeOneclickbuyAllbuyDesc* E_RechargeOneclickbuy::mutable_m_allbuy(int index) {
  return m_allbuy_.Mutable(index);
}
inline ::proto_ff::E_RechargeOneclickbuyAllbuyDesc* E_RechargeOneclickbuy::add_m_allbuy() {
  return m_allbuy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuyAllbuyDesc >&
E_RechargeOneclickbuy::m_allbuy() const {
  return m_allbuy_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuyAllbuyDesc >*
E_RechargeOneclickbuy::mutable_m_allbuy() {
  return &m_allbuy_;
}

// -------------------------------------------------------------------

// Sheet_RechargeOneclickbuy

// repeated .proto_ff.E_RechargeOneclickbuy E_RechargeOneclickbuy_List = 1;
inline int Sheet_RechargeOneclickbuy::e_rechargeoneclickbuy_list_size() const {
  return e_rechargeoneclickbuy_list_.size();
}
inline void Sheet_RechargeOneclickbuy::clear_e_rechargeoneclickbuy_list() {
  e_rechargeoneclickbuy_list_.Clear();
}
inline const ::proto_ff::E_RechargeOneclickbuy& Sheet_RechargeOneclickbuy::e_rechargeoneclickbuy_list(int index) const {
  return e_rechargeoneclickbuy_list_.Get(index);
}
inline ::proto_ff::E_RechargeOneclickbuy* Sheet_RechargeOneclickbuy::mutable_e_rechargeoneclickbuy_list(int index) {
  return e_rechargeoneclickbuy_list_.Mutable(index);
}
inline ::proto_ff::E_RechargeOneclickbuy* Sheet_RechargeOneclickbuy::add_e_rechargeoneclickbuy_list() {
  return e_rechargeoneclickbuy_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuy >&
Sheet_RechargeOneclickbuy::e_rechargeoneclickbuy_list() const {
  return e_rechargeoneclickbuy_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_RechargeOneclickbuy >*
Sheet_RechargeOneclickbuy::mutable_e_rechargeoneclickbuy_list() {
  return &e_rechargeoneclickbuy_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fRecharge_2eproto__INCLUDED
