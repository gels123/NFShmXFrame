// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daily.proto

#ifndef PROTOBUF_daily_2eproto__INCLUDED
#define PROTOBUF_daily_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_daily_2eproto();
void protobuf_AssignDesc_daily_2eproto();
void protobuf_ShutdownFile_daily_2eproto();

class dailydaily;
class Sheet_dailydaily;
class dailyreward;
class Sheet_dailyreward;
class dailycultivateattributeDesc;
class dailycultivate;
class Sheet_dailycultivate;

// ===================================================================

class dailydaily : public ::google::protobuf::Message {
 public:
  dailydaily();
  virtual ~dailydaily();

  dailydaily(const dailydaily& from);

  inline dailydaily& operator=(const dailydaily& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dailydaily& default_instance();

  void Swap(dailydaily* other);

  // implements Message ----------------------------------------------

  dailydaily* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dailydaily& from);
  void MergeFrom(const dailydaily& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 args = 4;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 4;
  inline ::google::protobuf::int32 args() const;
  inline void set_args(::google::protobuf::int32 value);

  // optional int32 playType = 5;
  inline bool has_playtype() const;
  inline void clear_playtype();
  static const int kPlayTypeFieldNumber = 5;
  inline ::google::protobuf::int32 playtype() const;
  inline void set_playtype(::google::protobuf::int32 value);

  // optional int32 playArgs = 6;
  inline bool has_playargs() const;
  inline void clear_playargs();
  static const int kPlayArgsFieldNumber = 6;
  inline ::google::protobuf::int32 playargs() const;
  inline void set_playargs(::google::protobuf::int32 value);

  // optional int64 funciontID = 7;
  inline bool has_funciontid() const;
  inline void clear_funciontid();
  static const int kFunciontIDFieldNumber = 7;
  inline ::google::protobuf::int64 funciontid() const;
  inline void set_funciontid(::google::protobuf::int64 value);

  // optional int32 number = 8;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 8;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // optional int32 viptype = 9;
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kViptypeFieldNumber = 9;
  inline ::google::protobuf::int32 viptype() const;
  inline void set_viptype(::google::protobuf::int32 value);

  // optional int32 otherNum = 10;
  inline bool has_othernum() const;
  inline void clear_othernum();
  static const int kOtherNumFieldNumber = 10;
  inline ::google::protobuf::int32 othernum() const;
  inline void set_othernum(::google::protobuf::int32 value);

  // optional int32 eachScore = 11;
  inline bool has_eachscore() const;
  inline void clear_eachscore();
  static const int kEachScoreFieldNumber = 11;
  inline ::google::protobuf::int32 eachscore() const;
  inline void set_eachscore(::google::protobuf::int32 value);

  // optional int32 cycle = 12;
  inline bool has_cycle() const;
  inline void clear_cycle();
  static const int kCycleFieldNumber = 12;
  inline ::google::protobuf::int32 cycle() const;
  inline void set_cycle(::google::protobuf::int32 value);

  // optional int32 regReward = 13;
  inline bool has_regreward() const;
  inline void clear_regreward();
  static const int kRegRewardFieldNumber = 13;
  inline ::google::protobuf::int32 regreward() const;
  inline void set_regreward(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.dailydaily)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_args();
  inline void clear_has_args();
  inline void set_has_playtype();
  inline void clear_has_playtype();
  inline void set_has_playargs();
  inline void clear_has_playargs();
  inline void set_has_funciontid();
  inline void clear_has_funciontid();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_viptype();
  inline void clear_has_viptype();
  inline void set_has_othernum();
  inline void clear_has_othernum();
  inline void set_has_eachscore();
  inline void clear_has_eachscore();
  inline void set_has_cycle();
  inline void clear_has_cycle();
  inline void set_has_regreward();
  inline void clear_has_regreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 args_;
  ::google::protobuf::int32 playtype_;
  ::google::protobuf::int32 playargs_;
  ::google::protobuf::int64 funciontid_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 viptype_;
  ::google::protobuf::int32 othernum_;
  ::google::protobuf::int32 eachscore_;
  ::google::protobuf::int32 cycle_;
  ::google::protobuf::int32 regreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_daily_2eproto();
  friend void protobuf_AssignDesc_daily_2eproto();
  friend void protobuf_ShutdownFile_daily_2eproto();

  void InitAsDefaultInstance();
  static dailydaily* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_dailydaily : public ::google::protobuf::Message {
 public:
  Sheet_dailydaily();
  virtual ~Sheet_dailydaily();

  Sheet_dailydaily(const Sheet_dailydaily& from);

  inline Sheet_dailydaily& operator=(const Sheet_dailydaily& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_dailydaily& default_instance();

  void Swap(Sheet_dailydaily* other);

  // implements Message ----------------------------------------------

  Sheet_dailydaily* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_dailydaily& from);
  void MergeFrom(const Sheet_dailydaily& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.dailydaily dailydaily_List = 1;
  inline int dailydaily_list_size() const;
  inline void clear_dailydaily_list();
  static const int kDailydailyListFieldNumber = 1;
  inline const ::proto_ff::dailydaily& dailydaily_list(int index) const;
  inline ::proto_ff::dailydaily* mutable_dailydaily_list(int index);
  inline ::proto_ff::dailydaily* add_dailydaily_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dailydaily >&
      dailydaily_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dailydaily >*
      mutable_dailydaily_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_dailydaily)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::dailydaily > dailydaily_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_daily_2eproto();
  friend void protobuf_AssignDesc_daily_2eproto();
  friend void protobuf_ShutdownFile_daily_2eproto();

  void InitAsDefaultInstance();
  static Sheet_dailydaily* default_instance_;
};
// -------------------------------------------------------------------

class dailyreward : public ::google::protobuf::Message {
 public:
  dailyreward();
  virtual ~dailyreward();

  dailyreward(const dailyreward& from);

  inline dailyreward& operator=(const dailyreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dailyreward& default_instance();

  void Swap(dailyreward* other);

  // implements Message ----------------------------------------------

  dailyreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dailyreward& from);
  void MergeFrom(const dailyreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 activeScore = 3;
  inline bool has_activescore() const;
  inline void clear_activescore();
  static const int kActiveScoreFieldNumber = 3;
  inline ::google::protobuf::int32 activescore() const;
  inline void set_activescore(::google::protobuf::int32 value);

  // optional int64 rewardId = 4;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 4;
  inline ::google::protobuf::int64 rewardid() const;
  inline void set_rewardid(::google::protobuf::int64 value);

  // optional int32 rewardNum = 5;
  inline bool has_rewardnum() const;
  inline void clear_rewardnum();
  static const int kRewardNumFieldNumber = 5;
  inline ::google::protobuf::int32 rewardnum() const;
  inline void set_rewardnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.dailyreward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_activescore();
  inline void clear_has_activescore();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_rewardnum();
  inline void clear_has_rewardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 rewardid_;
  ::google::protobuf::int32 activescore_;
  ::google::protobuf::int32 rewardnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_daily_2eproto();
  friend void protobuf_AssignDesc_daily_2eproto();
  friend void protobuf_ShutdownFile_daily_2eproto();

  void InitAsDefaultInstance();
  static dailyreward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_dailyreward : public ::google::protobuf::Message {
 public:
  Sheet_dailyreward();
  virtual ~Sheet_dailyreward();

  Sheet_dailyreward(const Sheet_dailyreward& from);

  inline Sheet_dailyreward& operator=(const Sheet_dailyreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_dailyreward& default_instance();

  void Swap(Sheet_dailyreward* other);

  // implements Message ----------------------------------------------

  Sheet_dailyreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_dailyreward& from);
  void MergeFrom(const Sheet_dailyreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.dailyreward dailyreward_List = 1;
  inline int dailyreward_list_size() const;
  inline void clear_dailyreward_list();
  static const int kDailyrewardListFieldNumber = 1;
  inline const ::proto_ff::dailyreward& dailyreward_list(int index) const;
  inline ::proto_ff::dailyreward* mutable_dailyreward_list(int index);
  inline ::proto_ff::dailyreward* add_dailyreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dailyreward >&
      dailyreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dailyreward >*
      mutable_dailyreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_dailyreward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::dailyreward > dailyreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_daily_2eproto();
  friend void protobuf_AssignDesc_daily_2eproto();
  friend void protobuf_ShutdownFile_daily_2eproto();

  void InitAsDefaultInstance();
  static Sheet_dailyreward* default_instance_;
};
// -------------------------------------------------------------------

class dailycultivateattributeDesc : public ::google::protobuf::Message {
 public:
  dailycultivateattributeDesc();
  virtual ~dailycultivateattributeDesc();

  dailycultivateattributeDesc(const dailycultivateattributeDesc& from);

  inline dailycultivateattributeDesc& operator=(const dailycultivateattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dailycultivateattributeDesc& default_instance();

  void Swap(dailycultivateattributeDesc* other);

  // implements Message ----------------------------------------------

  dailycultivateattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dailycultivateattributeDesc& from);
  void MergeFrom(const dailycultivateattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.dailycultivateattributeDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_daily_2eproto();
  friend void protobuf_AssignDesc_daily_2eproto();
  friend void protobuf_ShutdownFile_daily_2eproto();

  void InitAsDefaultInstance();
  static dailycultivateattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class dailycultivate : public ::google::protobuf::Message {
 public:
  dailycultivate();
  virtual ~dailycultivate();

  dailycultivate(const dailycultivate& from);

  inline dailycultivate& operator=(const dailycultivate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dailycultivate& default_instance();

  void Swap(dailycultivate* other);

  // implements Message ----------------------------------------------

  dailycultivate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dailycultivate& from);
  void MergeFrom(const dailycultivate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // repeated .proto_ff.dailycultivateattributeDesc attribute = 4;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 4;
  inline const ::proto_ff::dailycultivateattributeDesc& attribute(int index) const;
  inline ::proto_ff::dailycultivateattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::dailycultivateattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivateattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivateattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.dailycultivate)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivateattributeDesc > attribute_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_daily_2eproto();
  friend void protobuf_AssignDesc_daily_2eproto();
  friend void protobuf_ShutdownFile_daily_2eproto();

  void InitAsDefaultInstance();
  static dailycultivate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_dailycultivate : public ::google::protobuf::Message {
 public:
  Sheet_dailycultivate();
  virtual ~Sheet_dailycultivate();

  Sheet_dailycultivate(const Sheet_dailycultivate& from);

  inline Sheet_dailycultivate& operator=(const Sheet_dailycultivate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_dailycultivate& default_instance();

  void Swap(Sheet_dailycultivate* other);

  // implements Message ----------------------------------------------

  Sheet_dailycultivate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_dailycultivate& from);
  void MergeFrom(const Sheet_dailycultivate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.dailycultivate dailycultivate_List = 1;
  inline int dailycultivate_list_size() const;
  inline void clear_dailycultivate_list();
  static const int kDailycultivateListFieldNumber = 1;
  inline const ::proto_ff::dailycultivate& dailycultivate_list(int index) const;
  inline ::proto_ff::dailycultivate* mutable_dailycultivate_list(int index);
  inline ::proto_ff::dailycultivate* add_dailycultivate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivate >&
      dailycultivate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivate >*
      mutable_dailycultivate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_dailycultivate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivate > dailycultivate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_daily_2eproto();
  friend void protobuf_AssignDesc_daily_2eproto();
  friend void protobuf_ShutdownFile_daily_2eproto();

  void InitAsDefaultInstance();
  static Sheet_dailycultivate* default_instance_;
};
// ===================================================================


// ===================================================================

// dailydaily

// optional int64 id = 1;
inline bool dailydaily::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dailydaily::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dailydaily::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dailydaily::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 dailydaily::id() const {
  return id_;
}
inline void dailydaily::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool dailydaily::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dailydaily::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dailydaily::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dailydaily::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& dailydaily::name() const {
  return *name_;
}
inline void dailydaily::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void dailydaily::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void dailydaily::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dailydaily::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* dailydaily::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dailydaily::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 3;
inline bool dailydaily::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dailydaily::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dailydaily::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dailydaily::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 dailydaily::type() const {
  return type_;
}
inline void dailydaily::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 args = 4;
inline bool dailydaily::has_args() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dailydaily::set_has_args() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dailydaily::clear_has_args() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dailydaily::clear_args() {
  args_ = 0;
  clear_has_args();
}
inline ::google::protobuf::int32 dailydaily::args() const {
  return args_;
}
inline void dailydaily::set_args(::google::protobuf::int32 value) {
  set_has_args();
  args_ = value;
}

// optional int32 playType = 5;
inline bool dailydaily::has_playtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dailydaily::set_has_playtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dailydaily::clear_has_playtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dailydaily::clear_playtype() {
  playtype_ = 0;
  clear_has_playtype();
}
inline ::google::protobuf::int32 dailydaily::playtype() const {
  return playtype_;
}
inline void dailydaily::set_playtype(::google::protobuf::int32 value) {
  set_has_playtype();
  playtype_ = value;
}

// optional int32 playArgs = 6;
inline bool dailydaily::has_playargs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dailydaily::set_has_playargs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dailydaily::clear_has_playargs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dailydaily::clear_playargs() {
  playargs_ = 0;
  clear_has_playargs();
}
inline ::google::protobuf::int32 dailydaily::playargs() const {
  return playargs_;
}
inline void dailydaily::set_playargs(::google::protobuf::int32 value) {
  set_has_playargs();
  playargs_ = value;
}

// optional int64 funciontID = 7;
inline bool dailydaily::has_funciontid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dailydaily::set_has_funciontid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dailydaily::clear_has_funciontid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dailydaily::clear_funciontid() {
  funciontid_ = GOOGLE_LONGLONG(0);
  clear_has_funciontid();
}
inline ::google::protobuf::int64 dailydaily::funciontid() const {
  return funciontid_;
}
inline void dailydaily::set_funciontid(::google::protobuf::int64 value) {
  set_has_funciontid();
  funciontid_ = value;
}

// optional int32 number = 8;
inline bool dailydaily::has_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dailydaily::set_has_number() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dailydaily::clear_has_number() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dailydaily::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 dailydaily::number() const {
  return number_;
}
inline void dailydaily::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// optional int32 viptype = 9;
inline bool dailydaily::has_viptype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dailydaily::set_has_viptype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dailydaily::clear_has_viptype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dailydaily::clear_viptype() {
  viptype_ = 0;
  clear_has_viptype();
}
inline ::google::protobuf::int32 dailydaily::viptype() const {
  return viptype_;
}
inline void dailydaily::set_viptype(::google::protobuf::int32 value) {
  set_has_viptype();
  viptype_ = value;
}

// optional int32 otherNum = 10;
inline bool dailydaily::has_othernum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void dailydaily::set_has_othernum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void dailydaily::clear_has_othernum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void dailydaily::clear_othernum() {
  othernum_ = 0;
  clear_has_othernum();
}
inline ::google::protobuf::int32 dailydaily::othernum() const {
  return othernum_;
}
inline void dailydaily::set_othernum(::google::protobuf::int32 value) {
  set_has_othernum();
  othernum_ = value;
}

// optional int32 eachScore = 11;
inline bool dailydaily::has_eachscore() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void dailydaily::set_has_eachscore() {
  _has_bits_[0] |= 0x00000400u;
}
inline void dailydaily::clear_has_eachscore() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void dailydaily::clear_eachscore() {
  eachscore_ = 0;
  clear_has_eachscore();
}
inline ::google::protobuf::int32 dailydaily::eachscore() const {
  return eachscore_;
}
inline void dailydaily::set_eachscore(::google::protobuf::int32 value) {
  set_has_eachscore();
  eachscore_ = value;
}

// optional int32 cycle = 12;
inline bool dailydaily::has_cycle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void dailydaily::set_has_cycle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void dailydaily::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void dailydaily::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
inline ::google::protobuf::int32 dailydaily::cycle() const {
  return cycle_;
}
inline void dailydaily::set_cycle(::google::protobuf::int32 value) {
  set_has_cycle();
  cycle_ = value;
}

// optional int32 regReward = 13;
inline bool dailydaily::has_regreward() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void dailydaily::set_has_regreward() {
  _has_bits_[0] |= 0x00001000u;
}
inline void dailydaily::clear_has_regreward() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void dailydaily::clear_regreward() {
  regreward_ = 0;
  clear_has_regreward();
}
inline ::google::protobuf::int32 dailydaily::regreward() const {
  return regreward_;
}
inline void dailydaily::set_regreward(::google::protobuf::int32 value) {
  set_has_regreward();
  regreward_ = value;
}

// -------------------------------------------------------------------

// Sheet_dailydaily

// repeated .proto_ff.dailydaily dailydaily_List = 1;
inline int Sheet_dailydaily::dailydaily_list_size() const {
  return dailydaily_list_.size();
}
inline void Sheet_dailydaily::clear_dailydaily_list() {
  dailydaily_list_.Clear();
}
inline const ::proto_ff::dailydaily& Sheet_dailydaily::dailydaily_list(int index) const {
  return dailydaily_list_.Get(index);
}
inline ::proto_ff::dailydaily* Sheet_dailydaily::mutable_dailydaily_list(int index) {
  return dailydaily_list_.Mutable(index);
}
inline ::proto_ff::dailydaily* Sheet_dailydaily::add_dailydaily_list() {
  return dailydaily_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dailydaily >&
Sheet_dailydaily::dailydaily_list() const {
  return dailydaily_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dailydaily >*
Sheet_dailydaily::mutable_dailydaily_list() {
  return &dailydaily_list_;
}

// -------------------------------------------------------------------

// dailyreward

// optional int32 id = 1;
inline bool dailyreward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dailyreward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dailyreward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dailyreward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 dailyreward::id() const {
  return id_;
}
inline void dailyreward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool dailyreward::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dailyreward::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dailyreward::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dailyreward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 dailyreward::type() const {
  return type_;
}
inline void dailyreward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 activeScore = 3;
inline bool dailyreward::has_activescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dailyreward::set_has_activescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dailyreward::clear_has_activescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dailyreward::clear_activescore() {
  activescore_ = 0;
  clear_has_activescore();
}
inline ::google::protobuf::int32 dailyreward::activescore() const {
  return activescore_;
}
inline void dailyreward::set_activescore(::google::protobuf::int32 value) {
  set_has_activescore();
  activescore_ = value;
}

// optional int64 rewardId = 4;
inline bool dailyreward::has_rewardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dailyreward::set_has_rewardid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dailyreward::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dailyreward::clear_rewardid() {
  rewardid_ = GOOGLE_LONGLONG(0);
  clear_has_rewardid();
}
inline ::google::protobuf::int64 dailyreward::rewardid() const {
  return rewardid_;
}
inline void dailyreward::set_rewardid(::google::protobuf::int64 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// optional int32 rewardNum = 5;
inline bool dailyreward::has_rewardnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dailyreward::set_has_rewardnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dailyreward::clear_has_rewardnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dailyreward::clear_rewardnum() {
  rewardnum_ = 0;
  clear_has_rewardnum();
}
inline ::google::protobuf::int32 dailyreward::rewardnum() const {
  return rewardnum_;
}
inline void dailyreward::set_rewardnum(::google::protobuf::int32 value) {
  set_has_rewardnum();
  rewardnum_ = value;
}

// -------------------------------------------------------------------

// Sheet_dailyreward

// repeated .proto_ff.dailyreward dailyreward_List = 1;
inline int Sheet_dailyreward::dailyreward_list_size() const {
  return dailyreward_list_.size();
}
inline void Sheet_dailyreward::clear_dailyreward_list() {
  dailyreward_list_.Clear();
}
inline const ::proto_ff::dailyreward& Sheet_dailyreward::dailyreward_list(int index) const {
  return dailyreward_list_.Get(index);
}
inline ::proto_ff::dailyreward* Sheet_dailyreward::mutable_dailyreward_list(int index) {
  return dailyreward_list_.Mutable(index);
}
inline ::proto_ff::dailyreward* Sheet_dailyreward::add_dailyreward_list() {
  return dailyreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dailyreward >&
Sheet_dailyreward::dailyreward_list() const {
  return dailyreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dailyreward >*
Sheet_dailyreward::mutable_dailyreward_list() {
  return &dailyreward_list_;
}

// -------------------------------------------------------------------

// dailycultivateattributeDesc

// optional int32 ID = 1;
inline bool dailycultivateattributeDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dailycultivateattributeDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dailycultivateattributeDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dailycultivateattributeDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 dailycultivateattributeDesc::id() const {
  return id_;
}
inline void dailycultivateattributeDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 Value = 2;
inline bool dailycultivateattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dailycultivateattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dailycultivateattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dailycultivateattributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 dailycultivateattributeDesc::value() const {
  return value_;
}
inline void dailycultivateattributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// dailycultivate

// optional int32 ID = 1;
inline bool dailycultivate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dailycultivate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dailycultivate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dailycultivate::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 dailycultivate::id() const {
  return id_;
}
inline void dailycultivate::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 lv = 2;
inline bool dailycultivate::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dailycultivate::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dailycultivate::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dailycultivate::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 dailycultivate::lv() const {
  return lv_;
}
inline void dailycultivate::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 exp = 3;
inline bool dailycultivate::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dailycultivate::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dailycultivate::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dailycultivate::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 dailycultivate::exp() const {
  return exp_;
}
inline void dailycultivate::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .proto_ff.dailycultivateattributeDesc attribute = 4;
inline int dailycultivate::attribute_size() const {
  return attribute_.size();
}
inline void dailycultivate::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::dailycultivateattributeDesc& dailycultivate::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::dailycultivateattributeDesc* dailycultivate::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::dailycultivateattributeDesc* dailycultivate::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivateattributeDesc >&
dailycultivate::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivateattributeDesc >*
dailycultivate::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_dailycultivate

// repeated .proto_ff.dailycultivate dailycultivate_List = 1;
inline int Sheet_dailycultivate::dailycultivate_list_size() const {
  return dailycultivate_list_.size();
}
inline void Sheet_dailycultivate::clear_dailycultivate_list() {
  dailycultivate_list_.Clear();
}
inline const ::proto_ff::dailycultivate& Sheet_dailycultivate::dailycultivate_list(int index) const {
  return dailycultivate_list_.Get(index);
}
inline ::proto_ff::dailycultivate* Sheet_dailycultivate::mutable_dailycultivate_list(int index) {
  return dailycultivate_list_.Mutable(index);
}
inline ::proto_ff::dailycultivate* Sheet_dailycultivate::add_dailycultivate_list() {
  return dailycultivate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivate >&
Sheet_dailycultivate::dailycultivate_list() const {
  return dailycultivate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dailycultivate >*
Sheet_dailycultivate::mutable_dailycultivate_list() {
  return &dailycultivate_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_daily_2eproto__INCLUDED
