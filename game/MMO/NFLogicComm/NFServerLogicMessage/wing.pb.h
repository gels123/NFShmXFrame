// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wing.proto

#ifndef PROTOBUF_wing_2eproto__INCLUDED
#define PROTOBUF_wing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wing_2eproto();
void protobuf_AssignDesc_wing_2eproto();
void protobuf_ShutdownFile_wing_2eproto();

class wingwingattributeDesc;
class wingwing;
class Sheet_wingwing;
class wingchangeattributeDesc;
class wingchange;
class Sheet_wingchange;
class wingfragmentattributeDesc;
class wingfragment;
class Sheet_wingfragment;
class wingstarUpupAttributeDesc;
class wingstarUp;
class Sheet_wingstarUp;

// ===================================================================

class wingwingattributeDesc : public ::google::protobuf::Message {
 public:
  wingwingattributeDesc();
  virtual ~wingwingattributeDesc();

  wingwingattributeDesc(const wingwingattributeDesc& from);

  inline wingwingattributeDesc& operator=(const wingwingattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wingwingattributeDesc& default_instance();

  void Swap(wingwingattributeDesc* other);

  // implements Message ----------------------------------------------

  wingwingattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wingwingattributeDesc& from);
  void MergeFrom(const wingwingattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.wingwingattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static wingwingattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class wingwing : public ::google::protobuf::Message {
 public:
  wingwing();
  virtual ~wingwing();

  wingwing(const wingwing& from);

  inline wingwing& operator=(const wingwing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wingwing& default_instance();

  void Swap(wingwing* other);

  // implements Message ----------------------------------------------

  wingwing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wingwing& from);
  void MergeFrom(const wingwing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string resource = 2;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 2;
  inline const ::std::string& resource() const;
  inline void set_resource(const ::std::string& value);
  inline void set_resource(const char* value);
  inline void set_resource(const char* value, size_t size);
  inline ::std::string* mutable_resource();
  inline ::std::string* release_resource();
  inline void set_allocated_resource(::std::string* resource);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string activeDesc = 4;
  inline bool has_activedesc() const;
  inline void clear_activedesc();
  static const int kActiveDescFieldNumber = 4;
  inline const ::std::string& activedesc() const;
  inline void set_activedesc(const ::std::string& value);
  inline void set_activedesc(const char* value);
  inline void set_activedesc(const char* value, size_t size);
  inline ::std::string* mutable_activedesc();
  inline ::std::string* release_activedesc();
  inline void set_allocated_activedesc(::std::string* activedesc);

  // optional int32 realLevel = 5;
  inline bool has_reallevel() const;
  inline void clear_reallevel();
  static const int kRealLevelFieldNumber = 5;
  inline ::google::protobuf::int32 reallevel() const;
  inline void set_reallevel(::google::protobuf::int32 value);

  // optional int64 materialID = 6;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 6;
  inline ::google::protobuf::int64 materialid() const;
  inline void set_materialid(::google::protobuf::int64 value);

  // optional int32 materialEXP = 7;
  inline bool has_materialexp() const;
  inline void clear_materialexp();
  static const int kMaterialEXPFieldNumber = 7;
  inline ::google::protobuf::int32 materialexp() const;
  inline void set_materialexp(::google::protobuf::int32 value);

  // optional int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int64 skillID = 9;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 9;
  inline ::google::protobuf::int64 skillid() const;
  inline void set_skillid(::google::protobuf::int64 value);

  // optional int64 BreakMaterialID = 10;
  inline bool has_breakmaterialid() const;
  inline void clear_breakmaterialid();
  static const int kBreakMaterialIDFieldNumber = 10;
  inline ::google::protobuf::int64 breakmaterialid() const;
  inline void set_breakmaterialid(::google::protobuf::int64 value);

  // optional int32 BreakMaterialCost = 11;
  inline bool has_breakmaterialcost() const;
  inline void clear_breakmaterialcost();
  static const int kBreakMaterialCostFieldNumber = 11;
  inline ::google::protobuf::int32 breakmaterialcost() const;
  inline void set_breakmaterialcost(::google::protobuf::int32 value);

  // repeated .proto_ff.wingwingattributeDesc attribute = 12;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 12;
  inline const ::proto_ff::wingwingattributeDesc& attribute(int index) const;
  inline ::proto_ff::wingwingattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::wingwingattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwingattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwingattributeDesc >*
      mutable_attribute();

  // repeated int64 fragmentID = 13;
  inline int fragmentid_size() const;
  inline void clear_fragmentid();
  static const int kFragmentIDFieldNumber = 13;
  inline ::google::protobuf::int64 fragmentid(int index) const;
  inline void set_fragmentid(int index, ::google::protobuf::int64 value);
  inline void add_fragmentid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      fragmentid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_fragmentid();

  // @@protoc_insertion_point(class_scope:proto_ff.wingwing)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_activedesc();
  inline void clear_has_activedesc();
  inline void set_has_reallevel();
  inline void clear_has_reallevel();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_materialexp();
  inline void clear_has_materialexp();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_breakmaterialid();
  inline void clear_has_breakmaterialid();
  inline void set_has_breakmaterialcost();
  inline void clear_has_breakmaterialcost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* resource_;
  ::std::string* name_;
  ::std::string* activedesc_;
  ::google::protobuf::int64 materialid_;
  ::google::protobuf::int32 reallevel_;
  ::google::protobuf::int32 materialexp_;
  ::google::protobuf::int64 skillid_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 breakmaterialcost_;
  ::google::protobuf::int64 breakmaterialid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwingattributeDesc > attribute_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > fragmentid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static wingwing* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_wingwing : public ::google::protobuf::Message {
 public:
  Sheet_wingwing();
  virtual ~Sheet_wingwing();

  Sheet_wingwing(const Sheet_wingwing& from);

  inline Sheet_wingwing& operator=(const Sheet_wingwing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_wingwing& default_instance();

  void Swap(Sheet_wingwing* other);

  // implements Message ----------------------------------------------

  Sheet_wingwing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_wingwing& from);
  void MergeFrom(const Sheet_wingwing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.wingwing wingwing_List = 1;
  inline int wingwing_list_size() const;
  inline void clear_wingwing_list();
  static const int kWingwingListFieldNumber = 1;
  inline const ::proto_ff::wingwing& wingwing_list(int index) const;
  inline ::proto_ff::wingwing* mutable_wingwing_list(int index);
  inline ::proto_ff::wingwing* add_wingwing_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwing >&
      wingwing_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwing >*
      mutable_wingwing_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_wingwing)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwing > wingwing_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static Sheet_wingwing* default_instance_;
};
// -------------------------------------------------------------------

class wingchangeattributeDesc : public ::google::protobuf::Message {
 public:
  wingchangeattributeDesc();
  virtual ~wingchangeattributeDesc();

  wingchangeattributeDesc(const wingchangeattributeDesc& from);

  inline wingchangeattributeDesc& operator=(const wingchangeattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wingchangeattributeDesc& default_instance();

  void Swap(wingchangeattributeDesc* other);

  // implements Message ----------------------------------------------

  wingchangeattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wingchangeattributeDesc& from);
  void MergeFrom(const wingchangeattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.wingchangeattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static wingchangeattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class wingchange : public ::google::protobuf::Message {
 public:
  wingchange();
  virtual ~wingchange();

  wingchange(const wingchange& from);

  inline wingchange& operator=(const wingchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wingchange& default_instance();

  void Swap(wingchange* other);

  // implements Message ----------------------------------------------

  wingchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wingchange& from);
  void MergeFrom(const wingchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string resource = 2;
  inline bool has_resource() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 2;
  inline const ::std::string& resource() const;
  inline void set_resource(const ::std::string& value);
  inline void set_resource(const char* value);
  inline void set_resource(const char* value, size_t size);
  inline ::std::string* mutable_resource();
  inline ::std::string* release_resource();
  inline void set_allocated_resource(::std::string* resource);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string activeDesc = 4;
  inline bool has_activedesc() const;
  inline void clear_activedesc();
  static const int kActiveDescFieldNumber = 4;
  inline const ::std::string& activedesc() const;
  inline void set_activedesc(const ::std::string& value);
  inline void set_activedesc(const char* value);
  inline void set_activedesc(const char* value, size_t size);
  inline ::std::string* mutable_activedesc();
  inline ::std::string* release_activedesc();
  inline void set_allocated_activedesc(::std::string* activedesc);

  // optional int32 quality = 5;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int64 starId = 6;
  inline bool has_starid() const;
  inline void clear_starid();
  static const int kStarIdFieldNumber = 6;
  inline ::google::protobuf::int64 starid() const;
  inline void set_starid(::google::protobuf::int64 value);

  // optional string starNum = 7;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 7;
  inline const ::std::string& starnum() const;
  inline void set_starnum(const ::std::string& value);
  inline void set_starnum(const char* value);
  inline void set_starnum(const char* value, size_t size);
  inline ::std::string* mutable_starnum();
  inline ::std::string* release_starnum();
  inline void set_allocated_starnum(::std::string* starnum);

  // optional int32 starUp = 8;
  inline bool has_starup() const;
  inline void clear_starup();
  static const int kStarUpFieldNumber = 8;
  inline ::google::protobuf::int32 starup() const;
  inline void set_starup(::google::protobuf::int32 value);

  // optional int32 starBer = 9;
  inline bool has_starber() const;
  inline void clear_starber();
  static const int kStarBerFieldNumber = 9;
  inline ::google::protobuf::int32 starber() const;
  inline void set_starber(::google::protobuf::int32 value);

  // optional int64 upAttributeId = 10;
  inline bool has_upattributeid() const;
  inline void clear_upattributeid();
  static const int kUpAttributeIdFieldNumber = 10;
  inline ::google::protobuf::int64 upattributeid() const;
  inline void set_upattributeid(::google::protobuf::int64 value);

  // repeated .proto_ff.wingchangeattributeDesc attribute = 11;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 11;
  inline const ::proto_ff::wingchangeattributeDesc& attribute(int index) const;
  inline ::proto_ff::wingchangeattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::wingchangeattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchangeattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchangeattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.wingchange)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_activedesc();
  inline void clear_has_activedesc();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_starid();
  inline void clear_has_starid();
  inline void set_has_starnum();
  inline void clear_has_starnum();
  inline void set_has_starup();
  inline void clear_has_starup();
  inline void set_has_starber();
  inline void clear_has_starber();
  inline void set_has_upattributeid();
  inline void clear_has_upattributeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* resource_;
  ::std::string* name_;
  ::std::string* activedesc_;
  ::google::protobuf::int64 starid_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 starup_;
  ::std::string* starnum_;
  ::google::protobuf::int64 upattributeid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchangeattributeDesc > attribute_;
  ::google::protobuf::int32 starber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static wingchange* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_wingchange : public ::google::protobuf::Message {
 public:
  Sheet_wingchange();
  virtual ~Sheet_wingchange();

  Sheet_wingchange(const Sheet_wingchange& from);

  inline Sheet_wingchange& operator=(const Sheet_wingchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_wingchange& default_instance();

  void Swap(Sheet_wingchange* other);

  // implements Message ----------------------------------------------

  Sheet_wingchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_wingchange& from);
  void MergeFrom(const Sheet_wingchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.wingchange wingchange_List = 1;
  inline int wingchange_list_size() const;
  inline void clear_wingchange_list();
  static const int kWingchangeListFieldNumber = 1;
  inline const ::proto_ff::wingchange& wingchange_list(int index) const;
  inline ::proto_ff::wingchange* mutable_wingchange_list(int index);
  inline ::proto_ff::wingchange* add_wingchange_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchange >&
      wingchange_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchange >*
      mutable_wingchange_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_wingchange)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchange > wingchange_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static Sheet_wingchange* default_instance_;
};
// -------------------------------------------------------------------

class wingfragmentattributeDesc : public ::google::protobuf::Message {
 public:
  wingfragmentattributeDesc();
  virtual ~wingfragmentattributeDesc();

  wingfragmentattributeDesc(const wingfragmentattributeDesc& from);

  inline wingfragmentattributeDesc& operator=(const wingfragmentattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wingfragmentattributeDesc& default_instance();

  void Swap(wingfragmentattributeDesc* other);

  // implements Message ----------------------------------------------

  wingfragmentattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wingfragmentattributeDesc& from);
  void MergeFrom(const wingfragmentattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.wingfragmentattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static wingfragmentattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class wingfragment : public ::google::protobuf::Message {
 public:
  wingfragment();
  virtual ~wingfragment();

  wingfragment(const wingfragment& from);

  inline wingfragment& operator=(const wingfragment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wingfragment& default_instance();

  void Swap(wingfragment* other);

  // implements Message ----------------------------------------------

  wingfragment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wingfragment& from);
  void MergeFrom(const wingfragment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 fragmentID = 1;
  inline bool has_fragmentid() const;
  inline void clear_fragmentid();
  static const int kFragmentIDFieldNumber = 1;
  inline ::google::protobuf::int64 fragmentid() const;
  inline void set_fragmentid(::google::protobuf::int64 value);

  // optional int64 item = 2;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline ::google::protobuf::int64 item() const;
  inline void set_item(::google::protobuf::int64 value);

  // optional int32 itemNum = 3;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 3;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);

  // repeated .proto_ff.wingfragmentattributeDesc attribute = 4;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 4;
  inline const ::proto_ff::wingfragmentattributeDesc& attribute(int index) const;
  inline ::proto_ff::wingfragmentattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::wingfragmentattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragmentattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragmentattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.wingfragment)
 private:
  inline void set_has_fragmentid();
  inline void clear_has_fragmentid();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 fragmentid_;
  ::google::protobuf::int64 item_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragmentattributeDesc > attribute_;
  ::google::protobuf::int32 itemnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static wingfragment* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_wingfragment : public ::google::protobuf::Message {
 public:
  Sheet_wingfragment();
  virtual ~Sheet_wingfragment();

  Sheet_wingfragment(const Sheet_wingfragment& from);

  inline Sheet_wingfragment& operator=(const Sheet_wingfragment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_wingfragment& default_instance();

  void Swap(Sheet_wingfragment* other);

  // implements Message ----------------------------------------------

  Sheet_wingfragment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_wingfragment& from);
  void MergeFrom(const Sheet_wingfragment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.wingfragment wingfragment_List = 1;
  inline int wingfragment_list_size() const;
  inline void clear_wingfragment_list();
  static const int kWingfragmentListFieldNumber = 1;
  inline const ::proto_ff::wingfragment& wingfragment_list(int index) const;
  inline ::proto_ff::wingfragment* mutable_wingfragment_list(int index);
  inline ::proto_ff::wingfragment* add_wingfragment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragment >&
      wingfragment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragment >*
      mutable_wingfragment_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_wingfragment)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragment > wingfragment_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static Sheet_wingfragment* default_instance_;
};
// -------------------------------------------------------------------

class wingstarUpupAttributeDesc : public ::google::protobuf::Message {
 public:
  wingstarUpupAttributeDesc();
  virtual ~wingstarUpupAttributeDesc();

  wingstarUpupAttributeDesc(const wingstarUpupAttributeDesc& from);

  inline wingstarUpupAttributeDesc& operator=(const wingstarUpupAttributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wingstarUpupAttributeDesc& default_instance();

  void Swap(wingstarUpupAttributeDesc* other);

  // implements Message ----------------------------------------------

  wingstarUpupAttributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wingstarUpupAttributeDesc& from);
  void MergeFrom(const wingstarUpupAttributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.wingstarUpupAttributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static wingstarUpupAttributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class wingstarUp : public ::google::protobuf::Message {
 public:
  wingstarUp();
  virtual ~wingstarUp();

  wingstarUp(const wingstarUp& from);

  inline wingstarUp& operator=(const wingstarUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wingstarUp& default_instance();

  void Swap(wingstarUp* other);

  // implements Message ----------------------------------------------

  wingstarUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wingstarUp& from);
  void MergeFrom(const wingstarUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 upAttributeId = 2;
  inline bool has_upattributeid() const;
  inline void clear_upattributeid();
  static const int kUpAttributeIdFieldNumber = 2;
  inline ::google::protobuf::int64 upattributeid() const;
  inline void set_upattributeid(::google::protobuf::int64 value);

  // optional int32 starID = 3;
  inline bool has_starid() const;
  inline void clear_starid();
  static const int kStarIDFieldNumber = 3;
  inline ::google::protobuf::int32 starid() const;
  inline void set_starid(::google::protobuf::int32 value);

  // repeated .proto_ff.wingstarUpupAttributeDesc upAttribute = 4;
  inline int upattribute_size() const;
  inline void clear_upattribute();
  static const int kUpAttributeFieldNumber = 4;
  inline const ::proto_ff::wingstarUpupAttributeDesc& upattribute(int index) const;
  inline ::proto_ff::wingstarUpupAttributeDesc* mutable_upattribute(int index);
  inline ::proto_ff::wingstarUpupAttributeDesc* add_upattribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUpupAttributeDesc >&
      upattribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUpupAttributeDesc >*
      mutable_upattribute();

  // @@protoc_insertion_point(class_scope:proto_ff.wingstarUp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_upattributeid();
  inline void clear_has_upattributeid();
  inline void set_has_starid();
  inline void clear_has_starid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 upattributeid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 starid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUpupAttributeDesc > upattribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static wingstarUp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_wingstarUp : public ::google::protobuf::Message {
 public:
  Sheet_wingstarUp();
  virtual ~Sheet_wingstarUp();

  Sheet_wingstarUp(const Sheet_wingstarUp& from);

  inline Sheet_wingstarUp& operator=(const Sheet_wingstarUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_wingstarUp& default_instance();

  void Swap(Sheet_wingstarUp* other);

  // implements Message ----------------------------------------------

  Sheet_wingstarUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_wingstarUp& from);
  void MergeFrom(const Sheet_wingstarUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.wingstarUp wingstarUp_List = 1;
  inline int wingstarup_list_size() const;
  inline void clear_wingstarup_list();
  static const int kWingstarUpListFieldNumber = 1;
  inline const ::proto_ff::wingstarUp& wingstarup_list(int index) const;
  inline ::proto_ff::wingstarUp* mutable_wingstarup_list(int index);
  inline ::proto_ff::wingstarUp* add_wingstarup_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUp >&
      wingstarup_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUp >*
      mutable_wingstarup_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_wingstarUp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUp > wingstarup_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wing_2eproto();
  friend void protobuf_AssignDesc_wing_2eproto();
  friend void protobuf_ShutdownFile_wing_2eproto();

  void InitAsDefaultInstance();
  static Sheet_wingstarUp* default_instance_;
};
// ===================================================================


// ===================================================================

// wingwingattributeDesc

// optional int32 type = 1;
inline bool wingwingattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wingwingattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wingwingattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wingwingattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 wingwingattributeDesc::type() const {
  return type_;
}
inline void wingwingattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool wingwingattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wingwingattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wingwingattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wingwingattributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 wingwingattributeDesc::value() const {
  return value_;
}
inline void wingwingattributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// wingwing

// optional int64 id = 1;
inline bool wingwing::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wingwing::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wingwing::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wingwing::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 wingwing::id() const {
  return id_;
}
inline void wingwing::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string resource = 2;
inline bool wingwing::has_resource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wingwing::set_has_resource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wingwing::clear_has_resource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wingwing::clear_resource() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    resource_->clear();
  }
  clear_has_resource();
}
inline const ::std::string& wingwing::resource() const {
  return *resource_;
}
inline void wingwing::set_resource(const ::std::string& value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void wingwing::set_resource(const char* value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void wingwing::set_resource(const char* value, size_t size) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wingwing::mutable_resource() {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  return resource_;
}
inline ::std::string* wingwing::release_resource() {
  clear_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_;
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wingwing::set_allocated_resource(::std::string* resource) {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (resource) {
    set_has_resource();
    resource_ = resource;
  } else {
    clear_has_resource();
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool wingwing::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wingwing::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wingwing::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wingwing::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& wingwing::name() const {
  return *name_;
}
inline void wingwing::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void wingwing::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void wingwing::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wingwing::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* wingwing::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wingwing::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string activeDesc = 4;
inline bool wingwing::has_activedesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wingwing::set_has_activedesc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wingwing::clear_has_activedesc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wingwing::clear_activedesc() {
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    activedesc_->clear();
  }
  clear_has_activedesc();
}
inline const ::std::string& wingwing::activedesc() const {
  return *activedesc_;
}
inline void wingwing::set_activedesc(const ::std::string& value) {
  set_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    activedesc_ = new ::std::string;
  }
  activedesc_->assign(value);
}
inline void wingwing::set_activedesc(const char* value) {
  set_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    activedesc_ = new ::std::string;
  }
  activedesc_->assign(value);
}
inline void wingwing::set_activedesc(const char* value, size_t size) {
  set_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    activedesc_ = new ::std::string;
  }
  activedesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wingwing::mutable_activedesc() {
  set_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    activedesc_ = new ::std::string;
  }
  return activedesc_;
}
inline ::std::string* wingwing::release_activedesc() {
  clear_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activedesc_;
    activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wingwing::set_allocated_activedesc(::std::string* activedesc) {
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (activedesc) {
    set_has_activedesc();
    activedesc_ = activedesc;
  } else {
    clear_has_activedesc();
    activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 realLevel = 5;
inline bool wingwing::has_reallevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wingwing::set_has_reallevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wingwing::clear_has_reallevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wingwing::clear_reallevel() {
  reallevel_ = 0;
  clear_has_reallevel();
}
inline ::google::protobuf::int32 wingwing::reallevel() const {
  return reallevel_;
}
inline void wingwing::set_reallevel(::google::protobuf::int32 value) {
  set_has_reallevel();
  reallevel_ = value;
}

// optional int64 materialID = 6;
inline bool wingwing::has_materialid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wingwing::set_has_materialid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wingwing::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wingwing::clear_materialid() {
  materialid_ = GOOGLE_LONGLONG(0);
  clear_has_materialid();
}
inline ::google::protobuf::int64 wingwing::materialid() const {
  return materialid_;
}
inline void wingwing::set_materialid(::google::protobuf::int64 value) {
  set_has_materialid();
  materialid_ = value;
}

// optional int32 materialEXP = 7;
inline bool wingwing::has_materialexp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wingwing::set_has_materialexp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wingwing::clear_has_materialexp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wingwing::clear_materialexp() {
  materialexp_ = 0;
  clear_has_materialexp();
}
inline ::google::protobuf::int32 wingwing::materialexp() const {
  return materialexp_;
}
inline void wingwing::set_materialexp(::google::protobuf::int32 value) {
  set_has_materialexp();
  materialexp_ = value;
}

// optional int32 exp = 8;
inline bool wingwing::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wingwing::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void wingwing::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void wingwing::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 wingwing::exp() const {
  return exp_;
}
inline void wingwing::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 skillID = 9;
inline bool wingwing::has_skillid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void wingwing::set_has_skillid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void wingwing::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void wingwing::clear_skillid() {
  skillid_ = GOOGLE_LONGLONG(0);
  clear_has_skillid();
}
inline ::google::protobuf::int64 wingwing::skillid() const {
  return skillid_;
}
inline void wingwing::set_skillid(::google::protobuf::int64 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int64 BreakMaterialID = 10;
inline bool wingwing::has_breakmaterialid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void wingwing::set_has_breakmaterialid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void wingwing::clear_has_breakmaterialid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void wingwing::clear_breakmaterialid() {
  breakmaterialid_ = GOOGLE_LONGLONG(0);
  clear_has_breakmaterialid();
}
inline ::google::protobuf::int64 wingwing::breakmaterialid() const {
  return breakmaterialid_;
}
inline void wingwing::set_breakmaterialid(::google::protobuf::int64 value) {
  set_has_breakmaterialid();
  breakmaterialid_ = value;
}

// optional int32 BreakMaterialCost = 11;
inline bool wingwing::has_breakmaterialcost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void wingwing::set_has_breakmaterialcost() {
  _has_bits_[0] |= 0x00000400u;
}
inline void wingwing::clear_has_breakmaterialcost() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void wingwing::clear_breakmaterialcost() {
  breakmaterialcost_ = 0;
  clear_has_breakmaterialcost();
}
inline ::google::protobuf::int32 wingwing::breakmaterialcost() const {
  return breakmaterialcost_;
}
inline void wingwing::set_breakmaterialcost(::google::protobuf::int32 value) {
  set_has_breakmaterialcost();
  breakmaterialcost_ = value;
}

// repeated .proto_ff.wingwingattributeDesc attribute = 12;
inline int wingwing::attribute_size() const {
  return attribute_.size();
}
inline void wingwing::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::wingwingattributeDesc& wingwing::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::wingwingattributeDesc* wingwing::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::wingwingattributeDesc* wingwing::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwingattributeDesc >&
wingwing::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwingattributeDesc >*
wingwing::mutable_attribute() {
  return &attribute_;
}

// repeated int64 fragmentID = 13;
inline int wingwing::fragmentid_size() const {
  return fragmentid_.size();
}
inline void wingwing::clear_fragmentid() {
  fragmentid_.Clear();
}
inline ::google::protobuf::int64 wingwing::fragmentid(int index) const {
  return fragmentid_.Get(index);
}
inline void wingwing::set_fragmentid(int index, ::google::protobuf::int64 value) {
  fragmentid_.Set(index, value);
}
inline void wingwing::add_fragmentid(::google::protobuf::int64 value) {
  fragmentid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
wingwing::fragmentid() const {
  return fragmentid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
wingwing::mutable_fragmentid() {
  return &fragmentid_;
}

// -------------------------------------------------------------------

// Sheet_wingwing

// repeated .proto_ff.wingwing wingwing_List = 1;
inline int Sheet_wingwing::wingwing_list_size() const {
  return wingwing_list_.size();
}
inline void Sheet_wingwing::clear_wingwing_list() {
  wingwing_list_.Clear();
}
inline const ::proto_ff::wingwing& Sheet_wingwing::wingwing_list(int index) const {
  return wingwing_list_.Get(index);
}
inline ::proto_ff::wingwing* Sheet_wingwing::mutable_wingwing_list(int index) {
  return wingwing_list_.Mutable(index);
}
inline ::proto_ff::wingwing* Sheet_wingwing::add_wingwing_list() {
  return wingwing_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwing >&
Sheet_wingwing::wingwing_list() const {
  return wingwing_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingwing >*
Sheet_wingwing::mutable_wingwing_list() {
  return &wingwing_list_;
}

// -------------------------------------------------------------------

// wingchangeattributeDesc

// optional int32 type = 1;
inline bool wingchangeattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wingchangeattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wingchangeattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wingchangeattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 wingchangeattributeDesc::type() const {
  return type_;
}
inline void wingchangeattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool wingchangeattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wingchangeattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wingchangeattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wingchangeattributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 wingchangeattributeDesc::value() const {
  return value_;
}
inline void wingchangeattributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// wingchange

// optional int64 id = 1;
inline bool wingchange::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wingchange::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wingchange::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wingchange::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 wingchange::id() const {
  return id_;
}
inline void wingchange::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string resource = 2;
inline bool wingchange::has_resource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wingchange::set_has_resource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wingchange::clear_has_resource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wingchange::clear_resource() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    resource_->clear();
  }
  clear_has_resource();
}
inline const ::std::string& wingchange::resource() const {
  return *resource_;
}
inline void wingchange::set_resource(const ::std::string& value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void wingchange::set_resource(const char* value) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(value);
}
inline void wingchange::set_resource(const char* value, size_t size) {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  resource_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wingchange::mutable_resource() {
  set_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    resource_ = new ::std::string;
  }
  return resource_;
}
inline ::std::string* wingchange::release_resource() {
  clear_has_resource();
  if (resource_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resource_;
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wingchange::set_allocated_resource(::std::string* resource) {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (resource) {
    set_has_resource();
    resource_ = resource;
  } else {
    clear_has_resource();
    resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool wingchange::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wingchange::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wingchange::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wingchange::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& wingchange::name() const {
  return *name_;
}
inline void wingchange::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void wingchange::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void wingchange::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wingchange::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* wingchange::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wingchange::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string activeDesc = 4;
inline bool wingchange::has_activedesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wingchange::set_has_activedesc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wingchange::clear_has_activedesc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wingchange::clear_activedesc() {
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    activedesc_->clear();
  }
  clear_has_activedesc();
}
inline const ::std::string& wingchange::activedesc() const {
  return *activedesc_;
}
inline void wingchange::set_activedesc(const ::std::string& value) {
  set_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    activedesc_ = new ::std::string;
  }
  activedesc_->assign(value);
}
inline void wingchange::set_activedesc(const char* value) {
  set_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    activedesc_ = new ::std::string;
  }
  activedesc_->assign(value);
}
inline void wingchange::set_activedesc(const char* value, size_t size) {
  set_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    activedesc_ = new ::std::string;
  }
  activedesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wingchange::mutable_activedesc() {
  set_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    activedesc_ = new ::std::string;
  }
  return activedesc_;
}
inline ::std::string* wingchange::release_activedesc() {
  clear_has_activedesc();
  if (activedesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activedesc_;
    activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wingchange::set_allocated_activedesc(::std::string* activedesc) {
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (activedesc) {
    set_has_activedesc();
    activedesc_ = activedesc;
  } else {
    clear_has_activedesc();
    activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 quality = 5;
inline bool wingchange::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wingchange::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wingchange::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wingchange::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 wingchange::quality() const {
  return quality_;
}
inline void wingchange::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int64 starId = 6;
inline bool wingchange::has_starid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wingchange::set_has_starid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wingchange::clear_has_starid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wingchange::clear_starid() {
  starid_ = GOOGLE_LONGLONG(0);
  clear_has_starid();
}
inline ::google::protobuf::int64 wingchange::starid() const {
  return starid_;
}
inline void wingchange::set_starid(::google::protobuf::int64 value) {
  set_has_starid();
  starid_ = value;
}

// optional string starNum = 7;
inline bool wingchange::has_starnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wingchange::set_has_starnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wingchange::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wingchange::clear_starnum() {
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    starnum_->clear();
  }
  clear_has_starnum();
}
inline const ::std::string& wingchange::starnum() const {
  return *starnum_;
}
inline void wingchange::set_starnum(const ::std::string& value) {
  set_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    starnum_ = new ::std::string;
  }
  starnum_->assign(value);
}
inline void wingchange::set_starnum(const char* value) {
  set_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    starnum_ = new ::std::string;
  }
  starnum_->assign(value);
}
inline void wingchange::set_starnum(const char* value, size_t size) {
  set_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    starnum_ = new ::std::string;
  }
  starnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wingchange::mutable_starnum() {
  set_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    starnum_ = new ::std::string;
  }
  return starnum_;
}
inline ::std::string* wingchange::release_starnum() {
  clear_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starnum_;
    starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wingchange::set_allocated_starnum(::std::string* starnum) {
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (starnum) {
    set_has_starnum();
    starnum_ = starnum;
  } else {
    clear_has_starnum();
    starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 starUp = 8;
inline bool wingchange::has_starup() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wingchange::set_has_starup() {
  _has_bits_[0] |= 0x00000080u;
}
inline void wingchange::clear_has_starup() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void wingchange::clear_starup() {
  starup_ = 0;
  clear_has_starup();
}
inline ::google::protobuf::int32 wingchange::starup() const {
  return starup_;
}
inline void wingchange::set_starup(::google::protobuf::int32 value) {
  set_has_starup();
  starup_ = value;
}

// optional int32 starBer = 9;
inline bool wingchange::has_starber() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void wingchange::set_has_starber() {
  _has_bits_[0] |= 0x00000100u;
}
inline void wingchange::clear_has_starber() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void wingchange::clear_starber() {
  starber_ = 0;
  clear_has_starber();
}
inline ::google::protobuf::int32 wingchange::starber() const {
  return starber_;
}
inline void wingchange::set_starber(::google::protobuf::int32 value) {
  set_has_starber();
  starber_ = value;
}

// optional int64 upAttributeId = 10;
inline bool wingchange::has_upattributeid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void wingchange::set_has_upattributeid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void wingchange::clear_has_upattributeid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void wingchange::clear_upattributeid() {
  upattributeid_ = GOOGLE_LONGLONG(0);
  clear_has_upattributeid();
}
inline ::google::protobuf::int64 wingchange::upattributeid() const {
  return upattributeid_;
}
inline void wingchange::set_upattributeid(::google::protobuf::int64 value) {
  set_has_upattributeid();
  upattributeid_ = value;
}

// repeated .proto_ff.wingchangeattributeDesc attribute = 11;
inline int wingchange::attribute_size() const {
  return attribute_.size();
}
inline void wingchange::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::wingchangeattributeDesc& wingchange::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::wingchangeattributeDesc* wingchange::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::wingchangeattributeDesc* wingchange::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchangeattributeDesc >&
wingchange::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchangeattributeDesc >*
wingchange::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_wingchange

// repeated .proto_ff.wingchange wingchange_List = 1;
inline int Sheet_wingchange::wingchange_list_size() const {
  return wingchange_list_.size();
}
inline void Sheet_wingchange::clear_wingchange_list() {
  wingchange_list_.Clear();
}
inline const ::proto_ff::wingchange& Sheet_wingchange::wingchange_list(int index) const {
  return wingchange_list_.Get(index);
}
inline ::proto_ff::wingchange* Sheet_wingchange::mutable_wingchange_list(int index) {
  return wingchange_list_.Mutable(index);
}
inline ::proto_ff::wingchange* Sheet_wingchange::add_wingchange_list() {
  return wingchange_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchange >&
Sheet_wingchange::wingchange_list() const {
  return wingchange_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingchange >*
Sheet_wingchange::mutable_wingchange_list() {
  return &wingchange_list_;
}

// -------------------------------------------------------------------

// wingfragmentattributeDesc

// optional int32 type = 1;
inline bool wingfragmentattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wingfragmentattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wingfragmentattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wingfragmentattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 wingfragmentattributeDesc::type() const {
  return type_;
}
inline void wingfragmentattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool wingfragmentattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wingfragmentattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wingfragmentattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wingfragmentattributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 wingfragmentattributeDesc::value() const {
  return value_;
}
inline void wingfragmentattributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// wingfragment

// optional int64 fragmentID = 1;
inline bool wingfragment::has_fragmentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wingfragment::set_has_fragmentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wingfragment::clear_has_fragmentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wingfragment::clear_fragmentid() {
  fragmentid_ = GOOGLE_LONGLONG(0);
  clear_has_fragmentid();
}
inline ::google::protobuf::int64 wingfragment::fragmentid() const {
  return fragmentid_;
}
inline void wingfragment::set_fragmentid(::google::protobuf::int64 value) {
  set_has_fragmentid();
  fragmentid_ = value;
}

// optional int64 item = 2;
inline bool wingfragment::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wingfragment::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wingfragment::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wingfragment::clear_item() {
  item_ = GOOGLE_LONGLONG(0);
  clear_has_item();
}
inline ::google::protobuf::int64 wingfragment::item() const {
  return item_;
}
inline void wingfragment::set_item(::google::protobuf::int64 value) {
  set_has_item();
  item_ = value;
}

// optional int32 itemNum = 3;
inline bool wingfragment::has_itemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wingfragment::set_has_itemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wingfragment::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wingfragment::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 wingfragment::itemnum() const {
  return itemnum_;
}
inline void wingfragment::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// repeated .proto_ff.wingfragmentattributeDesc attribute = 4;
inline int wingfragment::attribute_size() const {
  return attribute_.size();
}
inline void wingfragment::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::wingfragmentattributeDesc& wingfragment::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::wingfragmentattributeDesc* wingfragment::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::wingfragmentattributeDesc* wingfragment::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragmentattributeDesc >&
wingfragment::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragmentattributeDesc >*
wingfragment::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_wingfragment

// repeated .proto_ff.wingfragment wingfragment_List = 1;
inline int Sheet_wingfragment::wingfragment_list_size() const {
  return wingfragment_list_.size();
}
inline void Sheet_wingfragment::clear_wingfragment_list() {
  wingfragment_list_.Clear();
}
inline const ::proto_ff::wingfragment& Sheet_wingfragment::wingfragment_list(int index) const {
  return wingfragment_list_.Get(index);
}
inline ::proto_ff::wingfragment* Sheet_wingfragment::mutable_wingfragment_list(int index) {
  return wingfragment_list_.Mutable(index);
}
inline ::proto_ff::wingfragment* Sheet_wingfragment::add_wingfragment_list() {
  return wingfragment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragment >&
Sheet_wingfragment::wingfragment_list() const {
  return wingfragment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingfragment >*
Sheet_wingfragment::mutable_wingfragment_list() {
  return &wingfragment_list_;
}

// -------------------------------------------------------------------

// wingstarUpupAttributeDesc

// optional int32 type = 1;
inline bool wingstarUpupAttributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wingstarUpupAttributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wingstarUpupAttributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wingstarUpupAttributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 wingstarUpupAttributeDesc::type() const {
  return type_;
}
inline void wingstarUpupAttributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 value = 2;
inline bool wingstarUpupAttributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wingstarUpupAttributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wingstarUpupAttributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wingstarUpupAttributeDesc::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 wingstarUpupAttributeDesc::value() const {
  return value_;
}
inline void wingstarUpupAttributeDesc::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// wingstarUp

// optional int32 ID = 1;
inline bool wingstarUp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wingstarUp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wingstarUp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wingstarUp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 wingstarUp::id() const {
  return id_;
}
inline void wingstarUp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 upAttributeId = 2;
inline bool wingstarUp::has_upattributeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wingstarUp::set_has_upattributeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wingstarUp::clear_has_upattributeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wingstarUp::clear_upattributeid() {
  upattributeid_ = GOOGLE_LONGLONG(0);
  clear_has_upattributeid();
}
inline ::google::protobuf::int64 wingstarUp::upattributeid() const {
  return upattributeid_;
}
inline void wingstarUp::set_upattributeid(::google::protobuf::int64 value) {
  set_has_upattributeid();
  upattributeid_ = value;
}

// optional int32 starID = 3;
inline bool wingstarUp::has_starid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wingstarUp::set_has_starid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wingstarUp::clear_has_starid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wingstarUp::clear_starid() {
  starid_ = 0;
  clear_has_starid();
}
inline ::google::protobuf::int32 wingstarUp::starid() const {
  return starid_;
}
inline void wingstarUp::set_starid(::google::protobuf::int32 value) {
  set_has_starid();
  starid_ = value;
}

// repeated .proto_ff.wingstarUpupAttributeDesc upAttribute = 4;
inline int wingstarUp::upattribute_size() const {
  return upattribute_.size();
}
inline void wingstarUp::clear_upattribute() {
  upattribute_.Clear();
}
inline const ::proto_ff::wingstarUpupAttributeDesc& wingstarUp::upattribute(int index) const {
  return upattribute_.Get(index);
}
inline ::proto_ff::wingstarUpupAttributeDesc* wingstarUp::mutable_upattribute(int index) {
  return upattribute_.Mutable(index);
}
inline ::proto_ff::wingstarUpupAttributeDesc* wingstarUp::add_upattribute() {
  return upattribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUpupAttributeDesc >&
wingstarUp::upattribute() const {
  return upattribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUpupAttributeDesc >*
wingstarUp::mutable_upattribute() {
  return &upattribute_;
}

// -------------------------------------------------------------------

// Sheet_wingstarUp

// repeated .proto_ff.wingstarUp wingstarUp_List = 1;
inline int Sheet_wingstarUp::wingstarup_list_size() const {
  return wingstarup_list_.size();
}
inline void Sheet_wingstarUp::clear_wingstarup_list() {
  wingstarup_list_.Clear();
}
inline const ::proto_ff::wingstarUp& Sheet_wingstarUp::wingstarup_list(int index) const {
  return wingstarup_list_.Get(index);
}
inline ::proto_ff::wingstarUp* Sheet_wingstarUp::mutable_wingstarup_list(int index) {
  return wingstarup_list_.Mutable(index);
}
inline ::proto_ff::wingstarUp* Sheet_wingstarUp::add_wingstarup_list() {
  return wingstarup_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUp >&
Sheet_wingstarUp::wingstarup_list() const {
  return wingstarup_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::wingstarUp >*
Sheet_wingstarUp::mutable_wingstarup_list() {
  return &wingstarup_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wing_2eproto__INCLUDED
