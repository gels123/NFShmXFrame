// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Star.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Star.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CLStarInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarSetupActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarSetupActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarSetupActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarSetupActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarHoleDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarHoleDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarHoleDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarHoleDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarHoleUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarHoleUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarHoleUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarHoleUnDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarHoleStrongReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarHoleStrongReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarHoleStrongRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarHoleStrongRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarHoleStrongQualityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarHoleStrongQualityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarHoleStrongQualityRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarHoleStrongQualityRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarHoleWakeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarHoleWakeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarHoleWakeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarHoleWakeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarFantasyActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarFantasyActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarFantasyActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarFantasyActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarFantasyLevelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarFantasyLevelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarFantasyLevelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarFantasyLevelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarAttrActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarAttrActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarAttrActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarAttrActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarAttrGuiZhenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarAttrGuiZhenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarAttrGuiZhenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarAttrGuiZhenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarFantasyFantasyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarFantasyFantasyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarFantasyFantasyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarFantasyFantasyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarFantasyFantasyCancelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarFantasyFantasyCancelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarFantasyFantasyCancelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarFantasyFantasyCancelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarActiveStarAttrInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarActiveStarAttrInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarActiveStarAttrInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarActiveStarAttrInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarActiveStarAttrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarActiveStarAttrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarActiveStarAttrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarActiveStarAttrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarFantasyAdvanceLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarFantasyAdvanceLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarFantasyAdvanceLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarFantasyAdvanceLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarGetSkillInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarGetSkillInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarGetSkillInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarGetSkillInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarUnlockSkillSlotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarUnlockSkillSlotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarUnlockSkillSlotRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarUnlockSkillSlotRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarFinishSkillLevelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarFinishSkillLevelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarFinishSkillLevelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarFinishSkillLevelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarYanJiuSkillLevelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarYanJiuSkillLevelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarYanJiuSkillLevelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarYanJiuSkillLevelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarGetShopInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarGetShopInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarGetShopInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarGetShopInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLStarBuyShopReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLStarBuyShopReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCStarBuyShopRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCStarBuyShopRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Star_2eproto() {
  protobuf_AddDesc_Star_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Star.proto");
  GOOGLE_CHECK(file != NULL);
  CLStarInfoReq_descriptor_ = file->message_type(0);
  static const int CLStarInfoReq_offsets_[1] = {
  };
  CLStarInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarInfoReq_descriptor_,
      CLStarInfoReq::default_instance_,
      CLStarInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarInfoReq));
  LCStarInfoRsp_descriptor_ = file->message_type(1);
  static const int LCStarInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarInfoRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarInfoRsp, all_data_),
  };
  LCStarInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarInfoRsp_descriptor_,
      LCStarInfoRsp::default_instance_,
      LCStarInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarInfoRsp));
  LCStarSetupActiveReq_descriptor_ = file->message_type(2);
  static const int LCStarSetupActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarSetupActiveReq, id_),
  };
  LCStarSetupActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarSetupActiveReq_descriptor_,
      LCStarSetupActiveReq::default_instance_,
      LCStarSetupActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarSetupActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarSetupActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarSetupActiveReq));
  CLStarSetupActiveRsp_descriptor_ = file->message_type(3);
  static const int CLStarSetupActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarSetupActiveRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarSetupActiveRsp, data_),
  };
  CLStarSetupActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarSetupActiveRsp_descriptor_,
      CLStarSetupActiveRsp::default_instance_,
      CLStarSetupActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarSetupActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarSetupActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarSetupActiveRsp));
  CLStarHoleDressReq_descriptor_ = file->message_type(4);
  static const int CLStarHoleDressReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleDressReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleDressReq, hole_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleDressReq, bag_pos_),
  };
  CLStarHoleDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarHoleDressReq_descriptor_,
      CLStarHoleDressReq::default_instance_,
      CLStarHoleDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarHoleDressReq));
  LCStarHoleDressRsp_descriptor_ = file->message_type(5);
  static const int LCStarHoleDressRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleDressRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleDressRsp, hole_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleDressRsp, bag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleDressRsp, data_),
  };
  LCStarHoleDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarHoleDressRsp_descriptor_,
      LCStarHoleDressRsp::default_instance_,
      LCStarHoleDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarHoleDressRsp));
  CLStarHoleUnDressReq_descriptor_ = file->message_type(6);
  static const int CLStarHoleUnDressReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleUnDressReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleUnDressReq, hole_pos_),
  };
  CLStarHoleUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarHoleUnDressReq_descriptor_,
      CLStarHoleUnDressReq::default_instance_,
      CLStarHoleUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarHoleUnDressReq));
  LCStarHoleUnDressRsp_descriptor_ = file->message_type(7);
  static const int LCStarHoleUnDressRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleUnDressRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleUnDressRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleUnDressRsp, hole_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleUnDressRsp, data_),
  };
  LCStarHoleUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarHoleUnDressRsp_descriptor_,
      LCStarHoleUnDressRsp::default_instance_,
      LCStarHoleUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarHoleUnDressRsp));
  CLStarHoleStrongReq_descriptor_ = file->message_type(8);
  static const int CLStarHoleStrongReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongReq, hole_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongReq, gridlist_),
  };
  CLStarHoleStrongReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarHoleStrongReq_descriptor_,
      CLStarHoleStrongReq::default_instance_,
      CLStarHoleStrongReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarHoleStrongReq));
  LCStarHoleStrongRsp_descriptor_ = file->message_type(9);
  static const int LCStarHoleStrongRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongRsp, hole_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongRsp, data_),
  };
  LCStarHoleStrongRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarHoleStrongRsp_descriptor_,
      LCStarHoleStrongRsp::default_instance_,
      LCStarHoleStrongRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarHoleStrongRsp));
  CLStarHoleStrongQualityReq_descriptor_ = file->message_type(10);
  static const int CLStarHoleStrongQualityReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongQualityReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongQualityReq, hole_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongQualityReq, gridlist_),
  };
  CLStarHoleStrongQualityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarHoleStrongQualityReq_descriptor_,
      CLStarHoleStrongQualityReq::default_instance_,
      CLStarHoleStrongQualityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongQualityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleStrongQualityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarHoleStrongQualityReq));
  LCStarHoleStrongQualityRsp_descriptor_ = file->message_type(11);
  static const int LCStarHoleStrongQualityRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongQualityRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongQualityRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongQualityRsp, hole_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongQualityRsp, data_),
  };
  LCStarHoleStrongQualityRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarHoleStrongQualityRsp_descriptor_,
      LCStarHoleStrongQualityRsp::default_instance_,
      LCStarHoleStrongQualityRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongQualityRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleStrongQualityRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarHoleStrongQualityRsp));
  CLStarHoleWakeReq_descriptor_ = file->message_type(12);
  static const int CLStarHoleWakeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleWakeReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleWakeReq, hole_pos_),
  };
  CLStarHoleWakeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarHoleWakeReq_descriptor_,
      CLStarHoleWakeReq::default_instance_,
      CLStarHoleWakeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleWakeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarHoleWakeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarHoleWakeReq));
  LCStarHoleWakeRsp_descriptor_ = file->message_type(13);
  static const int LCStarHoleWakeRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleWakeRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleWakeRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleWakeRsp, hole_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleWakeRsp, data_),
  };
  LCStarHoleWakeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarHoleWakeRsp_descriptor_,
      LCStarHoleWakeRsp::default_instance_,
      LCStarHoleWakeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleWakeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarHoleWakeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarHoleWakeRsp));
  CLStarFantasyActiveReq_descriptor_ = file->message_type(14);
  static const int CLStarFantasyActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyActiveReq, id_),
  };
  CLStarFantasyActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarFantasyActiveReq_descriptor_,
      CLStarFantasyActiveReq::default_instance_,
      CLStarFantasyActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarFantasyActiveReq));
  LCStarFantasyActiveRsp_descriptor_ = file->message_type(15);
  static const int LCStarFantasyActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyActiveRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyActiveRsp, data_),
  };
  LCStarFantasyActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarFantasyActiveRsp_descriptor_,
      LCStarFantasyActiveRsp::default_instance_,
      LCStarFantasyActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarFantasyActiveRsp));
  CLStarFantasyLevelReq_descriptor_ = file->message_type(16);
  static const int CLStarFantasyLevelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyLevelReq, id_),
  };
  CLStarFantasyLevelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarFantasyLevelReq_descriptor_,
      CLStarFantasyLevelReq::default_instance_,
      CLStarFantasyLevelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyLevelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyLevelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarFantasyLevelReq));
  LCStarFantasyLevelRsp_descriptor_ = file->message_type(17);
  static const int LCStarFantasyLevelRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyLevelRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyLevelRsp, data_),
  };
  LCStarFantasyLevelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarFantasyLevelRsp_descriptor_,
      LCStarFantasyLevelRsp::default_instance_,
      LCStarFantasyLevelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyLevelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyLevelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarFantasyLevelRsp));
  CLStarAttrActiveReq_descriptor_ = file->message_type(18);
  static const int CLStarAttrActiveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarAttrActiveReq, star_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarAttrActiveReq, guizhen_id_),
  };
  CLStarAttrActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarAttrActiveReq_descriptor_,
      CLStarAttrActiveReq::default_instance_,
      CLStarAttrActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarAttrActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarAttrActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarAttrActiveReq));
  LCStarAttrActiveRsp_descriptor_ = file->message_type(19);
  static const int LCStarAttrActiveRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrActiveRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrActiveRsp, star_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrActiveRsp, guizhen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrActiveRsp, guizhen_status_),
  };
  LCStarAttrActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarAttrActiveRsp_descriptor_,
      LCStarAttrActiveRsp::default_instance_,
      LCStarAttrActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarAttrActiveRsp));
  CLStarAttrGuiZhenReq_descriptor_ = file->message_type(20);
  static const int CLStarAttrGuiZhenReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarAttrGuiZhenReq, star_id_),
  };
  CLStarAttrGuiZhenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarAttrGuiZhenReq_descriptor_,
      CLStarAttrGuiZhenReq::default_instance_,
      CLStarAttrGuiZhenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarAttrGuiZhenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarAttrGuiZhenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarAttrGuiZhenReq));
  LCStarAttrGuiZhenRsp_descriptor_ = file->message_type(21);
  static const int LCStarAttrGuiZhenRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrGuiZhenRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrGuiZhenRsp, star_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrGuiZhenRsp, guizhen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrGuiZhenRsp, guizhen_status_),
  };
  LCStarAttrGuiZhenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarAttrGuiZhenRsp_descriptor_,
      LCStarAttrGuiZhenRsp::default_instance_,
      LCStarAttrGuiZhenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrGuiZhenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarAttrGuiZhenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarAttrGuiZhenRsp));
  CLStarFantasyFantasyReq_descriptor_ = file->message_type(22);
  static const int CLStarFantasyFantasyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyFantasyReq, id_),
  };
  CLStarFantasyFantasyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarFantasyFantasyReq_descriptor_,
      CLStarFantasyFantasyReq::default_instance_,
      CLStarFantasyFantasyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyFantasyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyFantasyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarFantasyFantasyReq));
  LCStarFantasyFantasyRsp_descriptor_ = file->message_type(23);
  static const int LCStarFantasyFantasyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyFantasyRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyFantasyRsp, cur_fantasy_id_),
  };
  LCStarFantasyFantasyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarFantasyFantasyRsp_descriptor_,
      LCStarFantasyFantasyRsp::default_instance_,
      LCStarFantasyFantasyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyFantasyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyFantasyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarFantasyFantasyRsp));
  CLStarFantasyFantasyCancelReq_descriptor_ = file->message_type(24);
  static const int CLStarFantasyFantasyCancelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyFantasyCancelReq, id_),
  };
  CLStarFantasyFantasyCancelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarFantasyFantasyCancelReq_descriptor_,
      CLStarFantasyFantasyCancelReq::default_instance_,
      CLStarFantasyFantasyCancelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyFantasyCancelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyFantasyCancelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarFantasyFantasyCancelReq));
  LCStarFantasyFantasyCancelRsp_descriptor_ = file->message_type(25);
  static const int LCStarFantasyFantasyCancelRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyFantasyCancelRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyFantasyCancelRsp, cur_fantasy_id_),
  };
  LCStarFantasyFantasyCancelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarFantasyFantasyCancelRsp_descriptor_,
      LCStarFantasyFantasyCancelRsp::default_instance_,
      LCStarFantasyFantasyCancelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyFantasyCancelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyFantasyCancelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarFantasyFantasyCancelRsp));
  CLStarActiveStarAttrInfoReq_descriptor_ = file->message_type(26);
  static const int CLStarActiveStarAttrInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarActiveStarAttrInfoReq, star_id_),
  };
  CLStarActiveStarAttrInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarActiveStarAttrInfoReq_descriptor_,
      CLStarActiveStarAttrInfoReq::default_instance_,
      CLStarActiveStarAttrInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarActiveStarAttrInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarActiveStarAttrInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarActiveStarAttrInfoReq));
  LCStarActiveStarAttrInfoRsp_descriptor_ = file->message_type(27);
  static const int LCStarActiveStarAttrInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrInfoRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrInfoRsp, star_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrInfoRsp, star_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrInfoRsp, star_attr_),
  };
  LCStarActiveStarAttrInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarActiveStarAttrInfoRsp_descriptor_,
      LCStarActiveStarAttrInfoRsp::default_instance_,
      LCStarActiveStarAttrInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarActiveStarAttrInfoRsp));
  CLStarActiveStarAttrReq_descriptor_ = file->message_type(28);
  static const int CLStarActiveStarAttrReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarActiveStarAttrReq, star_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarActiveStarAttrReq, star_attr_id_),
  };
  CLStarActiveStarAttrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarActiveStarAttrReq_descriptor_,
      CLStarActiveStarAttrReq::default_instance_,
      CLStarActiveStarAttrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarActiveStarAttrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarActiveStarAttrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarActiveStarAttrReq));
  LCStarActiveStarAttrRsp_descriptor_ = file->message_type(29);
  static const int LCStarActiveStarAttrRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrRsp, star_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrRsp, star_attr_id_),
  };
  LCStarActiveStarAttrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarActiveStarAttrRsp_descriptor_,
      LCStarActiveStarAttrRsp::default_instance_,
      LCStarActiveStarAttrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarActiveStarAttrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarActiveStarAttrRsp));
  CLStarFantasyAdvanceLvReq_descriptor_ = file->message_type(30);
  static const int CLStarFantasyAdvanceLvReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyAdvanceLvReq, id_),
  };
  CLStarFantasyAdvanceLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarFantasyAdvanceLvReq_descriptor_,
      CLStarFantasyAdvanceLvReq::default_instance_,
      CLStarFantasyAdvanceLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyAdvanceLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFantasyAdvanceLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarFantasyAdvanceLvReq));
  LCStarFantasyAdvanceLvRsp_descriptor_ = file->message_type(31);
  static const int LCStarFantasyAdvanceLvRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyAdvanceLvRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyAdvanceLvRsp, data_),
  };
  LCStarFantasyAdvanceLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarFantasyAdvanceLvRsp_descriptor_,
      LCStarFantasyAdvanceLvRsp::default_instance_,
      LCStarFantasyAdvanceLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyAdvanceLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFantasyAdvanceLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarFantasyAdvanceLvRsp));
  CLStarGetSkillInfoReq_descriptor_ = file->message_type(32);
  static const int CLStarGetSkillInfoReq_offsets_[1] = {
  };
  CLStarGetSkillInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarGetSkillInfoReq_descriptor_,
      CLStarGetSkillInfoReq::default_instance_,
      CLStarGetSkillInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarGetSkillInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarGetSkillInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarGetSkillInfoReq));
  LCStarGetSkillInfoRsp_descriptor_ = file->message_type(33);
  static const int LCStarGetSkillInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarGetSkillInfoRsp, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarGetSkillInfoRsp, skill_slot_data_),
  };
  LCStarGetSkillInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarGetSkillInfoRsp_descriptor_,
      LCStarGetSkillInfoRsp::default_instance_,
      LCStarGetSkillInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarGetSkillInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarGetSkillInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarGetSkillInfoRsp));
  CLStarUnlockSkillSlotReq_descriptor_ = file->message_type(34);
  static const int CLStarUnlockSkillSlotReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarUnlockSkillSlotReq, slot_id_),
  };
  CLStarUnlockSkillSlotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarUnlockSkillSlotReq_descriptor_,
      CLStarUnlockSkillSlotReq::default_instance_,
      CLStarUnlockSkillSlotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarUnlockSkillSlotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarUnlockSkillSlotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarUnlockSkillSlotReq));
  LCStarUnlockSkillSlotRsp_descriptor_ = file->message_type(35);
  static const int LCStarUnlockSkillSlotRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarUnlockSkillSlotRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarUnlockSkillSlotRsp, skill_slot_data_),
  };
  LCStarUnlockSkillSlotRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarUnlockSkillSlotRsp_descriptor_,
      LCStarUnlockSkillSlotRsp::default_instance_,
      LCStarUnlockSkillSlotRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarUnlockSkillSlotRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarUnlockSkillSlotRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarUnlockSkillSlotRsp));
  CLStarFinishSkillLevelReq_descriptor_ = file->message_type(36);
  static const int CLStarFinishSkillLevelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFinishSkillLevelReq, id_),
  };
  CLStarFinishSkillLevelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarFinishSkillLevelReq_descriptor_,
      CLStarFinishSkillLevelReq::default_instance_,
      CLStarFinishSkillLevelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFinishSkillLevelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarFinishSkillLevelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarFinishSkillLevelReq));
  LCStarFinishSkillLevelRsp_descriptor_ = file->message_type(37);
  static const int LCStarFinishSkillLevelRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFinishSkillLevelRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFinishSkillLevelRsp, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFinishSkillLevelRsp, skill_slot_data_),
  };
  LCStarFinishSkillLevelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarFinishSkillLevelRsp_descriptor_,
      LCStarFinishSkillLevelRsp::default_instance_,
      LCStarFinishSkillLevelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFinishSkillLevelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarFinishSkillLevelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarFinishSkillLevelRsp));
  CLStarYanJiuSkillLevelReq_descriptor_ = file->message_type(38);
  static const int CLStarYanJiuSkillLevelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarYanJiuSkillLevelReq, id_),
  };
  CLStarYanJiuSkillLevelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarYanJiuSkillLevelReq_descriptor_,
      CLStarYanJiuSkillLevelReq::default_instance_,
      CLStarYanJiuSkillLevelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarYanJiuSkillLevelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarYanJiuSkillLevelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarYanJiuSkillLevelReq));
  LCStarYanJiuSkillLevelRsp_descriptor_ = file->message_type(39);
  static const int LCStarYanJiuSkillLevelRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarYanJiuSkillLevelRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarYanJiuSkillLevelRsp, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarYanJiuSkillLevelRsp, skill_slot_data_),
  };
  LCStarYanJiuSkillLevelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarYanJiuSkillLevelRsp_descriptor_,
      LCStarYanJiuSkillLevelRsp::default_instance_,
      LCStarYanJiuSkillLevelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarYanJiuSkillLevelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarYanJiuSkillLevelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarYanJiuSkillLevelRsp));
  CLStarGetShopInfoReq_descriptor_ = file->message_type(40);
  static const int CLStarGetShopInfoReq_offsets_[1] = {
  };
  CLStarGetShopInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarGetShopInfoReq_descriptor_,
      CLStarGetShopInfoReq::default_instance_,
      CLStarGetShopInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarGetShopInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarGetShopInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarGetShopInfoReq));
  LCStarGetShopInfoRsp_descriptor_ = file->message_type(41);
  static const int LCStarGetShopInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarGetShopInfoRsp, shop_data_),
  };
  LCStarGetShopInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarGetShopInfoRsp_descriptor_,
      LCStarGetShopInfoRsp::default_instance_,
      LCStarGetShopInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarGetShopInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarGetShopInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarGetShopInfoRsp));
  CLStarBuyShopReq_descriptor_ = file->message_type(42);
  static const int CLStarBuyShopReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarBuyShopReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarBuyShopReq, num_),
  };
  CLStarBuyShopReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLStarBuyShopReq_descriptor_,
      CLStarBuyShopReq::default_instance_,
      CLStarBuyShopReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarBuyShopReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLStarBuyShopReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLStarBuyShopReq));
  LCStarBuyShopRsp_descriptor_ = file->message_type(43);
  static const int LCStarBuyShopRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarBuyShopRsp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarBuyShopRsp, shop_data_),
  };
  LCStarBuyShopRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCStarBuyShopRsp_descriptor_,
      LCStarBuyShopRsp::default_instance_,
      LCStarBuyShopRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarBuyShopRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCStarBuyShopRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCStarBuyShopRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Star_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarInfoReq_descriptor_, &CLStarInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarInfoRsp_descriptor_, &LCStarInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarSetupActiveReq_descriptor_, &LCStarSetupActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarSetupActiveRsp_descriptor_, &CLStarSetupActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarHoleDressReq_descriptor_, &CLStarHoleDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarHoleDressRsp_descriptor_, &LCStarHoleDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarHoleUnDressReq_descriptor_, &CLStarHoleUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarHoleUnDressRsp_descriptor_, &LCStarHoleUnDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarHoleStrongReq_descriptor_, &CLStarHoleStrongReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarHoleStrongRsp_descriptor_, &LCStarHoleStrongRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarHoleStrongQualityReq_descriptor_, &CLStarHoleStrongQualityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarHoleStrongQualityRsp_descriptor_, &LCStarHoleStrongQualityRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarHoleWakeReq_descriptor_, &CLStarHoleWakeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarHoleWakeRsp_descriptor_, &LCStarHoleWakeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarFantasyActiveReq_descriptor_, &CLStarFantasyActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarFantasyActiveRsp_descriptor_, &LCStarFantasyActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarFantasyLevelReq_descriptor_, &CLStarFantasyLevelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarFantasyLevelRsp_descriptor_, &LCStarFantasyLevelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarAttrActiveReq_descriptor_, &CLStarAttrActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarAttrActiveRsp_descriptor_, &LCStarAttrActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarAttrGuiZhenReq_descriptor_, &CLStarAttrGuiZhenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarAttrGuiZhenRsp_descriptor_, &LCStarAttrGuiZhenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarFantasyFantasyReq_descriptor_, &CLStarFantasyFantasyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarFantasyFantasyRsp_descriptor_, &LCStarFantasyFantasyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarFantasyFantasyCancelReq_descriptor_, &CLStarFantasyFantasyCancelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarFantasyFantasyCancelRsp_descriptor_, &LCStarFantasyFantasyCancelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarActiveStarAttrInfoReq_descriptor_, &CLStarActiveStarAttrInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarActiveStarAttrInfoRsp_descriptor_, &LCStarActiveStarAttrInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarActiveStarAttrReq_descriptor_, &CLStarActiveStarAttrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarActiveStarAttrRsp_descriptor_, &LCStarActiveStarAttrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarFantasyAdvanceLvReq_descriptor_, &CLStarFantasyAdvanceLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarFantasyAdvanceLvRsp_descriptor_, &LCStarFantasyAdvanceLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarGetSkillInfoReq_descriptor_, &CLStarGetSkillInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarGetSkillInfoRsp_descriptor_, &LCStarGetSkillInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarUnlockSkillSlotReq_descriptor_, &CLStarUnlockSkillSlotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarUnlockSkillSlotRsp_descriptor_, &LCStarUnlockSkillSlotRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarFinishSkillLevelReq_descriptor_, &CLStarFinishSkillLevelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarFinishSkillLevelRsp_descriptor_, &LCStarFinishSkillLevelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarYanJiuSkillLevelReq_descriptor_, &CLStarYanJiuSkillLevelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarYanJiuSkillLevelRsp_descriptor_, &LCStarYanJiuSkillLevelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarGetShopInfoReq_descriptor_, &CLStarGetShopInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarGetShopInfoRsp_descriptor_, &LCStarGetShopInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLStarBuyShopReq_descriptor_, &CLStarBuyShopReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCStarBuyShopRsp_descriptor_, &LCStarBuyShopRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Star_2eproto() {
  delete CLStarInfoReq::default_instance_;
  delete CLStarInfoReq_reflection_;
  delete LCStarInfoRsp::default_instance_;
  delete LCStarInfoRsp_reflection_;
  delete LCStarSetupActiveReq::default_instance_;
  delete LCStarSetupActiveReq_reflection_;
  delete CLStarSetupActiveRsp::default_instance_;
  delete CLStarSetupActiveRsp_reflection_;
  delete CLStarHoleDressReq::default_instance_;
  delete CLStarHoleDressReq_reflection_;
  delete LCStarHoleDressRsp::default_instance_;
  delete LCStarHoleDressRsp_reflection_;
  delete CLStarHoleUnDressReq::default_instance_;
  delete CLStarHoleUnDressReq_reflection_;
  delete LCStarHoleUnDressRsp::default_instance_;
  delete LCStarHoleUnDressRsp_reflection_;
  delete CLStarHoleStrongReq::default_instance_;
  delete CLStarHoleStrongReq_reflection_;
  delete LCStarHoleStrongRsp::default_instance_;
  delete LCStarHoleStrongRsp_reflection_;
  delete CLStarHoleStrongQualityReq::default_instance_;
  delete CLStarHoleStrongQualityReq_reflection_;
  delete LCStarHoleStrongQualityRsp::default_instance_;
  delete LCStarHoleStrongQualityRsp_reflection_;
  delete CLStarHoleWakeReq::default_instance_;
  delete CLStarHoleWakeReq_reflection_;
  delete LCStarHoleWakeRsp::default_instance_;
  delete LCStarHoleWakeRsp_reflection_;
  delete CLStarFantasyActiveReq::default_instance_;
  delete CLStarFantasyActiveReq_reflection_;
  delete LCStarFantasyActiveRsp::default_instance_;
  delete LCStarFantasyActiveRsp_reflection_;
  delete CLStarFantasyLevelReq::default_instance_;
  delete CLStarFantasyLevelReq_reflection_;
  delete LCStarFantasyLevelRsp::default_instance_;
  delete LCStarFantasyLevelRsp_reflection_;
  delete CLStarAttrActiveReq::default_instance_;
  delete CLStarAttrActiveReq_reflection_;
  delete LCStarAttrActiveRsp::default_instance_;
  delete LCStarAttrActiveRsp_reflection_;
  delete CLStarAttrGuiZhenReq::default_instance_;
  delete CLStarAttrGuiZhenReq_reflection_;
  delete LCStarAttrGuiZhenRsp::default_instance_;
  delete LCStarAttrGuiZhenRsp_reflection_;
  delete CLStarFantasyFantasyReq::default_instance_;
  delete CLStarFantasyFantasyReq_reflection_;
  delete LCStarFantasyFantasyRsp::default_instance_;
  delete LCStarFantasyFantasyRsp_reflection_;
  delete CLStarFantasyFantasyCancelReq::default_instance_;
  delete CLStarFantasyFantasyCancelReq_reflection_;
  delete LCStarFantasyFantasyCancelRsp::default_instance_;
  delete LCStarFantasyFantasyCancelRsp_reflection_;
  delete CLStarActiveStarAttrInfoReq::default_instance_;
  delete CLStarActiveStarAttrInfoReq_reflection_;
  delete LCStarActiveStarAttrInfoRsp::default_instance_;
  delete LCStarActiveStarAttrInfoRsp_reflection_;
  delete CLStarActiveStarAttrReq::default_instance_;
  delete CLStarActiveStarAttrReq_reflection_;
  delete LCStarActiveStarAttrRsp::default_instance_;
  delete LCStarActiveStarAttrRsp_reflection_;
  delete CLStarFantasyAdvanceLvReq::default_instance_;
  delete CLStarFantasyAdvanceLvReq_reflection_;
  delete LCStarFantasyAdvanceLvRsp::default_instance_;
  delete LCStarFantasyAdvanceLvRsp_reflection_;
  delete CLStarGetSkillInfoReq::default_instance_;
  delete CLStarGetSkillInfoReq_reflection_;
  delete LCStarGetSkillInfoRsp::default_instance_;
  delete LCStarGetSkillInfoRsp_reflection_;
  delete CLStarUnlockSkillSlotReq::default_instance_;
  delete CLStarUnlockSkillSlotReq_reflection_;
  delete LCStarUnlockSkillSlotRsp::default_instance_;
  delete LCStarUnlockSkillSlotRsp_reflection_;
  delete CLStarFinishSkillLevelReq::default_instance_;
  delete CLStarFinishSkillLevelReq_reflection_;
  delete LCStarFinishSkillLevelRsp::default_instance_;
  delete LCStarFinishSkillLevelRsp_reflection_;
  delete CLStarYanJiuSkillLevelReq::default_instance_;
  delete CLStarYanJiuSkillLevelReq_reflection_;
  delete LCStarYanJiuSkillLevelRsp::default_instance_;
  delete LCStarYanJiuSkillLevelRsp_reflection_;
  delete CLStarGetShopInfoReq::default_instance_;
  delete CLStarGetShopInfoReq_reflection_;
  delete LCStarGetShopInfoRsp::default_instance_;
  delete LCStarGetShopInfoRsp_reflection_;
  delete CLStarBuyShopReq::default_instance_;
  delete CLStarBuyShopReq_reflection_;
  delete LCStarBuyShopRsp::default_instance_;
  delete LCStarBuyShopRsp_reflection_;
}

void protobuf_AddDesc_Star_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nStar.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"\017\n\rCLStarInfoReq\"G\n\rLCStarInf"
    "oRsp\022\020\n\010ret_code\030\001 \001(\005\022$\n\010all_data\030\002 \001(\013"
    "2\022.proto_ff.StarData\"\"\n\024LCStarSetupActiv"
    "eReq\022\n\n\002id\030\001 \001(\005\"O\n\024CLStarSetupActiveRsp"
    "\022\020\n\010ret_code\030\001 \001(\005\022%\n\004data\030\002 \001(\0132\027.proto"
    "_ff.StarSetupData\"C\n\022CLStarHoleDressReq\022"
    "\n\n\002id\030\001 \001(\005\022\020\n\010hole_pos\030\002 \001(\005\022\017\n\007bag_pos"
    "\030\003 \001(\005\"\200\001\n\022LCStarHoleDressRsp\022\020\n\010ret_cod"
    "e\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\020\n\010hole_pos\030\003 \001(\005\022\017\n"
    "\007bag_pos\030\004 \001(\005\022)\n\004data\030\005 \001(\0132\033.proto_ff."
    "StarSetupHoleData\"4\n\024CLStarHoleUnDressRe"
    "q\022\n\n\002id\030\001 \001(\005\022\020\n\010hole_pos\030\002 \001(\005\"q\n\024LCSta"
    "rHoleUnDressRsp\022\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030"
    "\002 \001(\005\022\020\n\010hole_pos\030\003 \001(\005\022)\n\004data\030\004 \001(\0132\033."
    "proto_ff.StarSetupHoleData\"E\n\023CLStarHole"
    "StrongReq\022\n\n\002id\030\001 \001(\005\022\020\n\010hole_pos\030\002 \001(\005\022"
    "\020\n\010gridlist\030\003 \003(\r\"p\n\023LCStarHoleStrongRsp"
    "\022\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\020\n\010hole_p"
    "os\030\003 \001(\005\022)\n\004data\030\004 \001(\0132\033.proto_ff.StarSe"
    "tupHoleData\"L\n\032CLStarHoleStrongQualityRe"
    "q\022\n\n\002id\030\001 \001(\005\022\020\n\010hole_pos\030\002 \001(\005\022\020\n\010gridl"
    "ist\030\003 \003(\r\"w\n\032LCStarHoleStrongQualityRsp\022"
    "\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\020\n\010hole_po"
    "s\030\003 \001(\005\022)\n\004data\030\004 \001(\0132\033.proto_ff.StarSet"
    "upHoleData\"1\n\021CLStarHoleWakeReq\022\n\n\002id\030\001 "
    "\001(\005\022\020\n\010hole_pos\030\002 \001(\005\"n\n\021LCStarHoleWakeR"
    "sp\022\020\n\010ret_code\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\020\n\010hole"
    "_pos\030\003 \001(\005\022)\n\004data\030\004 \001(\0132\033.proto_ff.Star"
    "SetupHoleData\"$\n\026CLStarFantasyActiveReq\022"
    "\n\n\002id\030\001 \001(\r\"S\n\026LCStarFantasyActiveRsp\022\020\n"
    "\010ret_code\030\001 \001(\005\022\'\n\004data\030\002 \001(\0132\031.proto_ff"
    ".StarFantasyData\"#\n\025CLStarFantasyLevelRe"
    "q\022\n\n\002id\030\001 \001(\r\"R\n\025LCStarFantasyLevelRsp\022\020"
    "\n\010ret_code\030\001 \001(\005\022\'\n\004data\030\002 \001(\0132\031.proto_f"
    "f.StarFantasyData\":\n\023CLStarAttrActiveReq"
    "\022\017\n\007star_id\030\001 \001(\r\022\022\n\nguizhen_id\030\002 \001(\r\"d\n"
    "\023LCStarAttrActiveRsp\022\020\n\010ret_code\030\001 \001(\005\022\017"
    "\n\007star_id\030\002 \001(\r\022\022\n\nguizhen_id\030\003 \001(\r\022\026\n\016g"
    "uizhen_status\030\004 \001(\r\"\'\n\024CLStarAttrGuiZhen"
    "Req\022\017\n\007star_id\030\001 \001(\r\"e\n\024LCStarAttrGuiZhe"
    "nRsp\022\020\n\010ret_code\030\001 \001(\005\022\017\n\007star_id\030\002 \001(\r\022"
    "\022\n\nguizhen_id\030\003 \001(\r\022\026\n\016guizhen_status\030\004 "
    "\001(\r\"%\n\027CLStarFantasyFantasyReq\022\n\n\002id\030\001 \001"
    "(\r\"C\n\027LCStarFantasyFantasyRsp\022\020\n\010ret_cod"
    "e\030\001 \001(\005\022\026\n\016cur_fantasy_id\030\002 \001(\r\"+\n\035CLSta"
    "rFantasyFantasyCancelReq\022\n\n\002id\030\001 \001(\r\"I\n\035"
    "LCStarFantasyFantasyCancelRsp\022\020\n\010ret_cod"
    "e\030\001 \001(\005\022\026\n\016cur_fantasy_id\030\002 \001(\r\".\n\033CLSta"
    "rActiveStarAttrInfoReq\022\017\n\007star_id\030\001 \001(\r\""
    "\206\001\n\033LCStarActiveStarAttrInfoRsp\022\020\n\010ret_c"
    "ode\030\001 \001(\r\022\017\n\007star_id\030\002 \001(\r\022\020\n\010star_num\030\003"
    " \001(\r\0222\n\tstar_attr\030\004 \003(\0132\037.proto_ff.StarS"
    "etupStarAttrData\"@\n\027CLStarActiveStarAttr"
    "Req\022\017\n\007star_id\030\001 \001(\r\022\024\n\014star_attr_id\030\002 \001"
    "(\r\"R\n\027LCStarActiveStarAttrRsp\022\020\n\010ret_cod"
    "e\030\001 \001(\r\022\017\n\007star_id\030\002 \001(\r\022\024\n\014star_attr_id"
    "\030\003 \001(\r\"\'\n\031CLStarFantasyAdvanceLvReq\022\n\n\002i"
    "d\030\001 \001(\r\"V\n\031LCStarFantasyAdvanceLvRsp\022\020\n\010"
    "ret_code\030\001 \001(\005\022\'\n\004data\030\002 \001(\0132\031.proto_ff."
    "StarFantasyData\"\027\n\025CLStarGetSkillInfoReq"
    "\"z\n\025LCStarGetSkillInfoRsp\022+\n\nskill_data\030"
    "\001 \003(\0132\027.proto_ff.StarSkillData\0224\n\017skill_"
    "slot_data\030\002 \003(\0132\033.proto_ff.StarSkillSlot"
    "Data\"+\n\030CLStarUnlockSkillSlotReq\022\017\n\007slot"
    "_id\030\001 \001(\r\"b\n\030LCStarUnlockSkillSlotRsp\022\020\n"
    "\010ret_code\030\001 \001(\005\0224\n\017skill_slot_data\030\002 \001(\013"
    "2\033.proto_ff.StarSkillSlotData\"\'\n\031CLStarF"
    "inishSkillLevelReq\022\n\n\002id\030\001 \001(\r\"\220\001\n\031LCSta"
    "rFinishSkillLevelRsp\022\020\n\010ret_code\030\001 \001(\005\022+"
    "\n\nskill_data\030\002 \001(\0132\027.proto_ff.StarSkillD"
    "ata\0224\n\017skill_slot_data\030\003 \001(\0132\033.proto_ff."
    "StarSkillSlotData\"\'\n\031CLStarYanJiuSkillLe"
    "velReq\022\n\n\002id\030\001 \001(\r\"\220\001\n\031LCStarYanJiuSkill"
    "LevelRsp\022\020\n\010ret_code\030\001 \001(\005\022+\n\nskill_data"
    "\030\002 \001(\0132\027.proto_ff.StarSkillData\0224\n\017skill"
    "_slot_data\030\003 \001(\0132\033.proto_ff.StarSkillSlo"
    "tData\"\026\n\024CLStarGetShopInfoReq\"A\n\024LCStarG"
    "etShopInfoRsp\022)\n\tshop_data\030\001 \003(\0132\026.proto"
    "_ff.StarShopData\"+\n\020CLStarBuyShopReq\022\n\n\002"
    "id\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"O\n\020LCStarBuyShopRs"
    "p\022\020\n\010ret_code\030\001 \001(\005\022)\n\tshop_data\030\002 \001(\0132\026"
    ".proto_ff.StarShopData", 3302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Star.proto", &protobuf_RegisterTypes);
  CLStarInfoReq::default_instance_ = new CLStarInfoReq();
  LCStarInfoRsp::default_instance_ = new LCStarInfoRsp();
  LCStarSetupActiveReq::default_instance_ = new LCStarSetupActiveReq();
  CLStarSetupActiveRsp::default_instance_ = new CLStarSetupActiveRsp();
  CLStarHoleDressReq::default_instance_ = new CLStarHoleDressReq();
  LCStarHoleDressRsp::default_instance_ = new LCStarHoleDressRsp();
  CLStarHoleUnDressReq::default_instance_ = new CLStarHoleUnDressReq();
  LCStarHoleUnDressRsp::default_instance_ = new LCStarHoleUnDressRsp();
  CLStarHoleStrongReq::default_instance_ = new CLStarHoleStrongReq();
  LCStarHoleStrongRsp::default_instance_ = new LCStarHoleStrongRsp();
  CLStarHoleStrongQualityReq::default_instance_ = new CLStarHoleStrongQualityReq();
  LCStarHoleStrongQualityRsp::default_instance_ = new LCStarHoleStrongQualityRsp();
  CLStarHoleWakeReq::default_instance_ = new CLStarHoleWakeReq();
  LCStarHoleWakeRsp::default_instance_ = new LCStarHoleWakeRsp();
  CLStarFantasyActiveReq::default_instance_ = new CLStarFantasyActiveReq();
  LCStarFantasyActiveRsp::default_instance_ = new LCStarFantasyActiveRsp();
  CLStarFantasyLevelReq::default_instance_ = new CLStarFantasyLevelReq();
  LCStarFantasyLevelRsp::default_instance_ = new LCStarFantasyLevelRsp();
  CLStarAttrActiveReq::default_instance_ = new CLStarAttrActiveReq();
  LCStarAttrActiveRsp::default_instance_ = new LCStarAttrActiveRsp();
  CLStarAttrGuiZhenReq::default_instance_ = new CLStarAttrGuiZhenReq();
  LCStarAttrGuiZhenRsp::default_instance_ = new LCStarAttrGuiZhenRsp();
  CLStarFantasyFantasyReq::default_instance_ = new CLStarFantasyFantasyReq();
  LCStarFantasyFantasyRsp::default_instance_ = new LCStarFantasyFantasyRsp();
  CLStarFantasyFantasyCancelReq::default_instance_ = new CLStarFantasyFantasyCancelReq();
  LCStarFantasyFantasyCancelRsp::default_instance_ = new LCStarFantasyFantasyCancelRsp();
  CLStarActiveStarAttrInfoReq::default_instance_ = new CLStarActiveStarAttrInfoReq();
  LCStarActiveStarAttrInfoRsp::default_instance_ = new LCStarActiveStarAttrInfoRsp();
  CLStarActiveStarAttrReq::default_instance_ = new CLStarActiveStarAttrReq();
  LCStarActiveStarAttrRsp::default_instance_ = new LCStarActiveStarAttrRsp();
  CLStarFantasyAdvanceLvReq::default_instance_ = new CLStarFantasyAdvanceLvReq();
  LCStarFantasyAdvanceLvRsp::default_instance_ = new LCStarFantasyAdvanceLvRsp();
  CLStarGetSkillInfoReq::default_instance_ = new CLStarGetSkillInfoReq();
  LCStarGetSkillInfoRsp::default_instance_ = new LCStarGetSkillInfoRsp();
  CLStarUnlockSkillSlotReq::default_instance_ = new CLStarUnlockSkillSlotReq();
  LCStarUnlockSkillSlotRsp::default_instance_ = new LCStarUnlockSkillSlotRsp();
  CLStarFinishSkillLevelReq::default_instance_ = new CLStarFinishSkillLevelReq();
  LCStarFinishSkillLevelRsp::default_instance_ = new LCStarFinishSkillLevelRsp();
  CLStarYanJiuSkillLevelReq::default_instance_ = new CLStarYanJiuSkillLevelReq();
  LCStarYanJiuSkillLevelRsp::default_instance_ = new LCStarYanJiuSkillLevelRsp();
  CLStarGetShopInfoReq::default_instance_ = new CLStarGetShopInfoReq();
  LCStarGetShopInfoRsp::default_instance_ = new LCStarGetShopInfoRsp();
  CLStarBuyShopReq::default_instance_ = new CLStarBuyShopReq();
  LCStarBuyShopRsp::default_instance_ = new LCStarBuyShopRsp();
  CLStarInfoReq::default_instance_->InitAsDefaultInstance();
  LCStarInfoRsp::default_instance_->InitAsDefaultInstance();
  LCStarSetupActiveReq::default_instance_->InitAsDefaultInstance();
  CLStarSetupActiveRsp::default_instance_->InitAsDefaultInstance();
  CLStarHoleDressReq::default_instance_->InitAsDefaultInstance();
  LCStarHoleDressRsp::default_instance_->InitAsDefaultInstance();
  CLStarHoleUnDressReq::default_instance_->InitAsDefaultInstance();
  LCStarHoleUnDressRsp::default_instance_->InitAsDefaultInstance();
  CLStarHoleStrongReq::default_instance_->InitAsDefaultInstance();
  LCStarHoleStrongRsp::default_instance_->InitAsDefaultInstance();
  CLStarHoleStrongQualityReq::default_instance_->InitAsDefaultInstance();
  LCStarHoleStrongQualityRsp::default_instance_->InitAsDefaultInstance();
  CLStarHoleWakeReq::default_instance_->InitAsDefaultInstance();
  LCStarHoleWakeRsp::default_instance_->InitAsDefaultInstance();
  CLStarFantasyActiveReq::default_instance_->InitAsDefaultInstance();
  LCStarFantasyActiveRsp::default_instance_->InitAsDefaultInstance();
  CLStarFantasyLevelReq::default_instance_->InitAsDefaultInstance();
  LCStarFantasyLevelRsp::default_instance_->InitAsDefaultInstance();
  CLStarAttrActiveReq::default_instance_->InitAsDefaultInstance();
  LCStarAttrActiveRsp::default_instance_->InitAsDefaultInstance();
  CLStarAttrGuiZhenReq::default_instance_->InitAsDefaultInstance();
  LCStarAttrGuiZhenRsp::default_instance_->InitAsDefaultInstance();
  CLStarFantasyFantasyReq::default_instance_->InitAsDefaultInstance();
  LCStarFantasyFantasyRsp::default_instance_->InitAsDefaultInstance();
  CLStarFantasyFantasyCancelReq::default_instance_->InitAsDefaultInstance();
  LCStarFantasyFantasyCancelRsp::default_instance_->InitAsDefaultInstance();
  CLStarActiveStarAttrInfoReq::default_instance_->InitAsDefaultInstance();
  LCStarActiveStarAttrInfoRsp::default_instance_->InitAsDefaultInstance();
  CLStarActiveStarAttrReq::default_instance_->InitAsDefaultInstance();
  LCStarActiveStarAttrRsp::default_instance_->InitAsDefaultInstance();
  CLStarFantasyAdvanceLvReq::default_instance_->InitAsDefaultInstance();
  LCStarFantasyAdvanceLvRsp::default_instance_->InitAsDefaultInstance();
  CLStarGetSkillInfoReq::default_instance_->InitAsDefaultInstance();
  LCStarGetSkillInfoRsp::default_instance_->InitAsDefaultInstance();
  CLStarUnlockSkillSlotReq::default_instance_->InitAsDefaultInstance();
  LCStarUnlockSkillSlotRsp::default_instance_->InitAsDefaultInstance();
  CLStarFinishSkillLevelReq::default_instance_->InitAsDefaultInstance();
  LCStarFinishSkillLevelRsp::default_instance_->InitAsDefaultInstance();
  CLStarYanJiuSkillLevelReq::default_instance_->InitAsDefaultInstance();
  LCStarYanJiuSkillLevelRsp::default_instance_->InitAsDefaultInstance();
  CLStarGetShopInfoReq::default_instance_->InitAsDefaultInstance();
  LCStarGetShopInfoRsp::default_instance_->InitAsDefaultInstance();
  CLStarBuyShopReq::default_instance_->InitAsDefaultInstance();
  LCStarBuyShopRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Star_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Star_2eproto {
  StaticDescriptorInitializer_Star_2eproto() {
    protobuf_AddDesc_Star_2eproto();
  }
} static_descriptor_initializer_Star_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLStarInfoReq::CLStarInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarInfoReq::InitAsDefaultInstance() {
}

CLStarInfoReq::CLStarInfoReq(const CLStarInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarInfoReq::~CLStarInfoReq() {
  SharedDtor();
}

void CLStarInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarInfoReq_descriptor_;
}

const CLStarInfoReq& CLStarInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarInfoReq* CLStarInfoReq::default_instance_ = NULL;

CLStarInfoReq* CLStarInfoReq::New() const {
  return new CLStarInfoReq;
}

void CLStarInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLStarInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarInfoReq::MergeFrom(const CLStarInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarInfoReq::CopyFrom(const CLStarInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarInfoReq::IsInitialized() const {

  return true;
}

void CLStarInfoReq::Swap(CLStarInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarInfoReq_descriptor_;
  metadata.reflection = CLStarInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarInfoRsp::kRetCodeFieldNumber;
const int LCStarInfoRsp::kAllDataFieldNumber;
#endif  // !_MSC_VER

LCStarInfoRsp::LCStarInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarInfoRsp::InitAsDefaultInstance() {
  all_data_ = const_cast< ::proto_ff::StarData*>(&::proto_ff::StarData::default_instance());
}

LCStarInfoRsp::LCStarInfoRsp(const LCStarInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  all_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarInfoRsp::~LCStarInfoRsp() {
  SharedDtor();
}

void LCStarInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete all_data_;
  }
}

void LCStarInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarInfoRsp_descriptor_;
}

const LCStarInfoRsp& LCStarInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarInfoRsp* LCStarInfoRsp::default_instance_ = NULL;

LCStarInfoRsp* LCStarInfoRsp::New() const {
  return new LCStarInfoRsp;
}

void LCStarInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_all_data()) {
      if (all_data_ != NULL) all_data_->::proto_ff::StarData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_data;
        break;
      }

      // optional .proto_ff.StarData all_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarData all_data = 2;
  if (has_all_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarData all_data = 2;
  if (has_all_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarData all_data = 2;
    if (has_all_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarInfoRsp::MergeFrom(const LCStarInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_all_data()) {
      mutable_all_data()->::proto_ff::StarData::MergeFrom(from.all_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarInfoRsp::CopyFrom(const LCStarInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarInfoRsp::IsInitialized() const {

  if (has_all_data()) {
    if (!this->all_data().IsInitialized()) return false;
  }
  return true;
}

void LCStarInfoRsp::Swap(LCStarInfoRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(all_data_, other->all_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarInfoRsp_descriptor_;
  metadata.reflection = LCStarInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarSetupActiveReq::kIdFieldNumber;
#endif  // !_MSC_VER

LCStarSetupActiveReq::LCStarSetupActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarSetupActiveReq::InitAsDefaultInstance() {
}

LCStarSetupActiveReq::LCStarSetupActiveReq(const LCStarSetupActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarSetupActiveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarSetupActiveReq::~LCStarSetupActiveReq() {
  SharedDtor();
}

void LCStarSetupActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarSetupActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarSetupActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarSetupActiveReq_descriptor_;
}

const LCStarSetupActiveReq& LCStarSetupActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarSetupActiveReq* LCStarSetupActiveReq::default_instance_ = NULL;

LCStarSetupActiveReq* LCStarSetupActiveReq::New() const {
  return new LCStarSetupActiveReq;
}

void LCStarSetupActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarSetupActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarSetupActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarSetupActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarSetupActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarSetupActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarSetupActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarSetupActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarSetupActiveReq::MergeFrom(const LCStarSetupActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarSetupActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarSetupActiveReq::CopyFrom(const LCStarSetupActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarSetupActiveReq::IsInitialized() const {

  return true;
}

void LCStarSetupActiveReq::Swap(LCStarSetupActiveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarSetupActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarSetupActiveReq_descriptor_;
  metadata.reflection = LCStarSetupActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarSetupActiveRsp::kRetCodeFieldNumber;
const int CLStarSetupActiveRsp::kDataFieldNumber;
#endif  // !_MSC_VER

CLStarSetupActiveRsp::CLStarSetupActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarSetupActiveRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarSetupData*>(&::proto_ff::StarSetupData::default_instance());
}

CLStarSetupActiveRsp::CLStarSetupActiveRsp(const CLStarSetupActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarSetupActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarSetupActiveRsp::~CLStarSetupActiveRsp() {
  SharedDtor();
}

void CLStarSetupActiveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CLStarSetupActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarSetupActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarSetupActiveRsp_descriptor_;
}

const CLStarSetupActiveRsp& CLStarSetupActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarSetupActiveRsp* CLStarSetupActiveRsp::default_instance_ = NULL;

CLStarSetupActiveRsp* CLStarSetupActiveRsp::New() const {
  return new CLStarSetupActiveRsp;
}

void CLStarSetupActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarSetupData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarSetupActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarSetupData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarSetupActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarSetupData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarSetupActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarSetupData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarSetupActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarSetupData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarSetupActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarSetupActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarSetupActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarSetupActiveRsp::MergeFrom(const CLStarSetupActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarSetupData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarSetupActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarSetupActiveRsp::CopyFrom(const CLStarSetupActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarSetupActiveRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void CLStarSetupActiveRsp::Swap(CLStarSetupActiveRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarSetupActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarSetupActiveRsp_descriptor_;
  metadata.reflection = CLStarSetupActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarHoleDressReq::kIdFieldNumber;
const int CLStarHoleDressReq::kHolePosFieldNumber;
const int CLStarHoleDressReq::kBagPosFieldNumber;
#endif  // !_MSC_VER

CLStarHoleDressReq::CLStarHoleDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarHoleDressReq::InitAsDefaultInstance() {
}

CLStarHoleDressReq::CLStarHoleDressReq(const CLStarHoleDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarHoleDressReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  bag_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarHoleDressReq::~CLStarHoleDressReq() {
  SharedDtor();
}

void CLStarHoleDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarHoleDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarHoleDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarHoleDressReq_descriptor_;
}

const CLStarHoleDressReq& CLStarHoleDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarHoleDressReq* CLStarHoleDressReq::default_instance_ = NULL;

CLStarHoleDressReq* CLStarHoleDressReq::New() const {
  return new CLStarHoleDressReq;
}

void CLStarHoleDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hole_pos_ = 0;
    bag_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarHoleDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bag_pos;
        break;
      }

      // optional int32 bag_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarHoleDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hole_pos(), output);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarHoleDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hole_pos(), target);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarHoleDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 2;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

    // optional int32 bag_pos = 3;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarHoleDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarHoleDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarHoleDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarHoleDressReq::MergeFrom(const CLStarHoleDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarHoleDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarHoleDressReq::CopyFrom(const CLStarHoleDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarHoleDressReq::IsInitialized() const {

  return true;
}

void CLStarHoleDressReq::Swap(CLStarHoleDressReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarHoleDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarHoleDressReq_descriptor_;
  metadata.reflection = CLStarHoleDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarHoleDressRsp::kRetCodeFieldNumber;
const int LCStarHoleDressRsp::kIdFieldNumber;
const int LCStarHoleDressRsp::kHolePosFieldNumber;
const int LCStarHoleDressRsp::kBagPosFieldNumber;
const int LCStarHoleDressRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCStarHoleDressRsp::LCStarHoleDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarHoleDressRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarSetupHoleData*>(&::proto_ff::StarSetupHoleData::default_instance());
}

LCStarHoleDressRsp::LCStarHoleDressRsp(const LCStarHoleDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarHoleDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  bag_pos_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarHoleDressRsp::~LCStarHoleDressRsp() {
  SharedDtor();
}

void LCStarHoleDressRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCStarHoleDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarHoleDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarHoleDressRsp_descriptor_;
}

const LCStarHoleDressRsp& LCStarHoleDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarHoleDressRsp* LCStarHoleDressRsp::default_instance_ = NULL;

LCStarHoleDressRsp* LCStarHoleDressRsp::New() const {
  return new LCStarHoleDressRsp;
}

void LCStarHoleDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    hole_pos_ = 0;
    bag_pos_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarSetupHoleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarHoleDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bag_pos;
        break;
      }

      // optional int32 bag_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarSetupHoleData data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarHoleDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hole_pos(), output);
  }

  // optional int32 bag_pos = 4;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bag_pos(), output);
  }

  // optional .proto_ff.StarSetupHoleData data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarHoleDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hole_pos(), target);
  }

  // optional int32 bag_pos = 4;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bag_pos(), target);
  }

  // optional .proto_ff.StarSetupHoleData data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarHoleDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 3;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

    // optional int32 bag_pos = 4;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

    // optional .proto_ff.StarSetupHoleData data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarHoleDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarHoleDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarHoleDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarHoleDressRsp::MergeFrom(const LCStarHoleDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarSetupHoleData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarHoleDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarHoleDressRsp::CopyFrom(const LCStarHoleDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarHoleDressRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCStarHoleDressRsp::Swap(LCStarHoleDressRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarHoleDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarHoleDressRsp_descriptor_;
  metadata.reflection = LCStarHoleDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarHoleUnDressReq::kIdFieldNumber;
const int CLStarHoleUnDressReq::kHolePosFieldNumber;
#endif  // !_MSC_VER

CLStarHoleUnDressReq::CLStarHoleUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarHoleUnDressReq::InitAsDefaultInstance() {
}

CLStarHoleUnDressReq::CLStarHoleUnDressReq(const CLStarHoleUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarHoleUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarHoleUnDressReq::~CLStarHoleUnDressReq() {
  SharedDtor();
}

void CLStarHoleUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarHoleUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarHoleUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarHoleUnDressReq_descriptor_;
}

const CLStarHoleUnDressReq& CLStarHoleUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarHoleUnDressReq* CLStarHoleUnDressReq::default_instance_ = NULL;

CLStarHoleUnDressReq* CLStarHoleUnDressReq::New() const {
  return new CLStarHoleUnDressReq;
}

void CLStarHoleUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hole_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarHoleUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarHoleUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hole_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarHoleUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hole_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarHoleUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 2;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarHoleUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarHoleUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarHoleUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarHoleUnDressReq::MergeFrom(const CLStarHoleUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarHoleUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarHoleUnDressReq::CopyFrom(const CLStarHoleUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarHoleUnDressReq::IsInitialized() const {

  return true;
}

void CLStarHoleUnDressReq::Swap(CLStarHoleUnDressReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarHoleUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarHoleUnDressReq_descriptor_;
  metadata.reflection = CLStarHoleUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarHoleUnDressRsp::kRetCodeFieldNumber;
const int LCStarHoleUnDressRsp::kIdFieldNumber;
const int LCStarHoleUnDressRsp::kHolePosFieldNumber;
const int LCStarHoleUnDressRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCStarHoleUnDressRsp::LCStarHoleUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarHoleUnDressRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarSetupHoleData*>(&::proto_ff::StarSetupHoleData::default_instance());
}

LCStarHoleUnDressRsp::LCStarHoleUnDressRsp(const LCStarHoleUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarHoleUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarHoleUnDressRsp::~LCStarHoleUnDressRsp() {
  SharedDtor();
}

void LCStarHoleUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCStarHoleUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarHoleUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarHoleUnDressRsp_descriptor_;
}

const LCStarHoleUnDressRsp& LCStarHoleUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarHoleUnDressRsp* LCStarHoleUnDressRsp::default_instance_ = NULL;

LCStarHoleUnDressRsp* LCStarHoleUnDressRsp::New() const {
  return new LCStarHoleUnDressRsp;
}

void LCStarHoleUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    hole_pos_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarSetupHoleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarHoleUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarSetupHoleData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarHoleUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hole_pos(), output);
  }

  // optional .proto_ff.StarSetupHoleData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarHoleUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hole_pos(), target);
  }

  // optional .proto_ff.StarSetupHoleData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarHoleUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 3;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

    // optional .proto_ff.StarSetupHoleData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarHoleUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarHoleUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarHoleUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarHoleUnDressRsp::MergeFrom(const LCStarHoleUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarSetupHoleData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarHoleUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarHoleUnDressRsp::CopyFrom(const LCStarHoleUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarHoleUnDressRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCStarHoleUnDressRsp::Swap(LCStarHoleUnDressRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarHoleUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarHoleUnDressRsp_descriptor_;
  metadata.reflection = LCStarHoleUnDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarHoleStrongReq::kIdFieldNumber;
const int CLStarHoleStrongReq::kHolePosFieldNumber;
const int CLStarHoleStrongReq::kGridlistFieldNumber;
#endif  // !_MSC_VER

CLStarHoleStrongReq::CLStarHoleStrongReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarHoleStrongReq::InitAsDefaultInstance() {
}

CLStarHoleStrongReq::CLStarHoleStrongReq(const CLStarHoleStrongReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarHoleStrongReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarHoleStrongReq::~CLStarHoleStrongReq() {
  SharedDtor();
}

void CLStarHoleStrongReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarHoleStrongReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarHoleStrongReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarHoleStrongReq_descriptor_;
}

const CLStarHoleStrongReq& CLStarHoleStrongReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarHoleStrongReq* CLStarHoleStrongReq::default_instance_ = NULL;

CLStarHoleStrongReq* CLStarHoleStrongReq::New() const {
  return new CLStarHoleStrongReq;
}

void CLStarHoleStrongReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hole_pos_ = 0;
  }
  gridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarHoleStrongReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gridlist;
        break;
      }

      // repeated uint32 gridlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_gridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gridlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarHoleStrongReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hole_pos(), output);
  }

  // repeated uint32 gridlist = 3;
  for (int i = 0; i < this->gridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->gridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarHoleStrongReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hole_pos(), target);
  }

  // repeated uint32 gridlist = 3;
  for (int i = 0; i < this->gridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->gridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarHoleStrongReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 2;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

  }
  // repeated uint32 gridlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gridlist(i));
    }
    total_size += 1 * this->gridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarHoleStrongReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarHoleStrongReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarHoleStrongReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarHoleStrongReq::MergeFrom(const CLStarHoleStrongReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridlist_.MergeFrom(from.gridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarHoleStrongReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarHoleStrongReq::CopyFrom(const CLStarHoleStrongReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarHoleStrongReq::IsInitialized() const {

  return true;
}

void CLStarHoleStrongReq::Swap(CLStarHoleStrongReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    gridlist_.Swap(&other->gridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarHoleStrongReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarHoleStrongReq_descriptor_;
  metadata.reflection = CLStarHoleStrongReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarHoleStrongRsp::kRetCodeFieldNumber;
const int LCStarHoleStrongRsp::kIdFieldNumber;
const int LCStarHoleStrongRsp::kHolePosFieldNumber;
const int LCStarHoleStrongRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCStarHoleStrongRsp::LCStarHoleStrongRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarHoleStrongRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarSetupHoleData*>(&::proto_ff::StarSetupHoleData::default_instance());
}

LCStarHoleStrongRsp::LCStarHoleStrongRsp(const LCStarHoleStrongRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarHoleStrongRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarHoleStrongRsp::~LCStarHoleStrongRsp() {
  SharedDtor();
}

void LCStarHoleStrongRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCStarHoleStrongRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarHoleStrongRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarHoleStrongRsp_descriptor_;
}

const LCStarHoleStrongRsp& LCStarHoleStrongRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarHoleStrongRsp* LCStarHoleStrongRsp::default_instance_ = NULL;

LCStarHoleStrongRsp* LCStarHoleStrongRsp::New() const {
  return new LCStarHoleStrongRsp;
}

void LCStarHoleStrongRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    hole_pos_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarSetupHoleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarHoleStrongRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarSetupHoleData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarHoleStrongRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hole_pos(), output);
  }

  // optional .proto_ff.StarSetupHoleData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarHoleStrongRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hole_pos(), target);
  }

  // optional .proto_ff.StarSetupHoleData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarHoleStrongRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 3;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

    // optional .proto_ff.StarSetupHoleData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarHoleStrongRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarHoleStrongRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarHoleStrongRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarHoleStrongRsp::MergeFrom(const LCStarHoleStrongRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarSetupHoleData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarHoleStrongRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarHoleStrongRsp::CopyFrom(const LCStarHoleStrongRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarHoleStrongRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCStarHoleStrongRsp::Swap(LCStarHoleStrongRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarHoleStrongRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarHoleStrongRsp_descriptor_;
  metadata.reflection = LCStarHoleStrongRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarHoleStrongQualityReq::kIdFieldNumber;
const int CLStarHoleStrongQualityReq::kHolePosFieldNumber;
const int CLStarHoleStrongQualityReq::kGridlistFieldNumber;
#endif  // !_MSC_VER

CLStarHoleStrongQualityReq::CLStarHoleStrongQualityReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarHoleStrongQualityReq::InitAsDefaultInstance() {
}

CLStarHoleStrongQualityReq::CLStarHoleStrongQualityReq(const CLStarHoleStrongQualityReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarHoleStrongQualityReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarHoleStrongQualityReq::~CLStarHoleStrongQualityReq() {
  SharedDtor();
}

void CLStarHoleStrongQualityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarHoleStrongQualityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarHoleStrongQualityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarHoleStrongQualityReq_descriptor_;
}

const CLStarHoleStrongQualityReq& CLStarHoleStrongQualityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarHoleStrongQualityReq* CLStarHoleStrongQualityReq::default_instance_ = NULL;

CLStarHoleStrongQualityReq* CLStarHoleStrongQualityReq::New() const {
  return new CLStarHoleStrongQualityReq;
}

void CLStarHoleStrongQualityReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hole_pos_ = 0;
  }
  gridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarHoleStrongQualityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gridlist;
        break;
      }

      // repeated uint32 gridlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_gridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gridlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarHoleStrongQualityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hole_pos(), output);
  }

  // repeated uint32 gridlist = 3;
  for (int i = 0; i < this->gridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->gridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarHoleStrongQualityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hole_pos(), target);
  }

  // repeated uint32 gridlist = 3;
  for (int i = 0; i < this->gridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->gridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarHoleStrongQualityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 2;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

  }
  // repeated uint32 gridlist = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gridlist(i));
    }
    total_size += 1 * this->gridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarHoleStrongQualityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarHoleStrongQualityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarHoleStrongQualityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarHoleStrongQualityReq::MergeFrom(const CLStarHoleStrongQualityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridlist_.MergeFrom(from.gridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarHoleStrongQualityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarHoleStrongQualityReq::CopyFrom(const CLStarHoleStrongQualityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarHoleStrongQualityReq::IsInitialized() const {

  return true;
}

void CLStarHoleStrongQualityReq::Swap(CLStarHoleStrongQualityReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    gridlist_.Swap(&other->gridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarHoleStrongQualityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarHoleStrongQualityReq_descriptor_;
  metadata.reflection = CLStarHoleStrongQualityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarHoleStrongQualityRsp::kRetCodeFieldNumber;
const int LCStarHoleStrongQualityRsp::kIdFieldNumber;
const int LCStarHoleStrongQualityRsp::kHolePosFieldNumber;
const int LCStarHoleStrongQualityRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCStarHoleStrongQualityRsp::LCStarHoleStrongQualityRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarHoleStrongQualityRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarSetupHoleData*>(&::proto_ff::StarSetupHoleData::default_instance());
}

LCStarHoleStrongQualityRsp::LCStarHoleStrongQualityRsp(const LCStarHoleStrongQualityRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarHoleStrongQualityRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarHoleStrongQualityRsp::~LCStarHoleStrongQualityRsp() {
  SharedDtor();
}

void LCStarHoleStrongQualityRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCStarHoleStrongQualityRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarHoleStrongQualityRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarHoleStrongQualityRsp_descriptor_;
}

const LCStarHoleStrongQualityRsp& LCStarHoleStrongQualityRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarHoleStrongQualityRsp* LCStarHoleStrongQualityRsp::default_instance_ = NULL;

LCStarHoleStrongQualityRsp* LCStarHoleStrongQualityRsp::New() const {
  return new LCStarHoleStrongQualityRsp;
}

void LCStarHoleStrongQualityRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    hole_pos_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarSetupHoleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarHoleStrongQualityRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarSetupHoleData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarHoleStrongQualityRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hole_pos(), output);
  }

  // optional .proto_ff.StarSetupHoleData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarHoleStrongQualityRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hole_pos(), target);
  }

  // optional .proto_ff.StarSetupHoleData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarHoleStrongQualityRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 3;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

    // optional .proto_ff.StarSetupHoleData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarHoleStrongQualityRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarHoleStrongQualityRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarHoleStrongQualityRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarHoleStrongQualityRsp::MergeFrom(const LCStarHoleStrongQualityRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarSetupHoleData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarHoleStrongQualityRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarHoleStrongQualityRsp::CopyFrom(const LCStarHoleStrongQualityRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarHoleStrongQualityRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCStarHoleStrongQualityRsp::Swap(LCStarHoleStrongQualityRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarHoleStrongQualityRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarHoleStrongQualityRsp_descriptor_;
  metadata.reflection = LCStarHoleStrongQualityRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarHoleWakeReq::kIdFieldNumber;
const int CLStarHoleWakeReq::kHolePosFieldNumber;
#endif  // !_MSC_VER

CLStarHoleWakeReq::CLStarHoleWakeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarHoleWakeReq::InitAsDefaultInstance() {
}

CLStarHoleWakeReq::CLStarHoleWakeReq(const CLStarHoleWakeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarHoleWakeReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarHoleWakeReq::~CLStarHoleWakeReq() {
  SharedDtor();
}

void CLStarHoleWakeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarHoleWakeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarHoleWakeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarHoleWakeReq_descriptor_;
}

const CLStarHoleWakeReq& CLStarHoleWakeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarHoleWakeReq* CLStarHoleWakeReq::default_instance_ = NULL;

CLStarHoleWakeReq* CLStarHoleWakeReq::New() const {
  return new CLStarHoleWakeReq;
}

void CLStarHoleWakeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hole_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarHoleWakeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarHoleWakeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hole_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarHoleWakeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 hole_pos = 2;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hole_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarHoleWakeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 2;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarHoleWakeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarHoleWakeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarHoleWakeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarHoleWakeReq::MergeFrom(const CLStarHoleWakeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarHoleWakeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarHoleWakeReq::CopyFrom(const CLStarHoleWakeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarHoleWakeReq::IsInitialized() const {

  return true;
}

void CLStarHoleWakeReq::Swap(CLStarHoleWakeReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarHoleWakeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarHoleWakeReq_descriptor_;
  metadata.reflection = CLStarHoleWakeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarHoleWakeRsp::kRetCodeFieldNumber;
const int LCStarHoleWakeRsp::kIdFieldNumber;
const int LCStarHoleWakeRsp::kHolePosFieldNumber;
const int LCStarHoleWakeRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCStarHoleWakeRsp::LCStarHoleWakeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarHoleWakeRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarSetupHoleData*>(&::proto_ff::StarSetupHoleData::default_instance());
}

LCStarHoleWakeRsp::LCStarHoleWakeRsp(const LCStarHoleWakeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarHoleWakeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  id_ = 0;
  hole_pos_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarHoleWakeRsp::~LCStarHoleWakeRsp() {
  SharedDtor();
}

void LCStarHoleWakeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCStarHoleWakeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarHoleWakeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarHoleWakeRsp_descriptor_;
}

const LCStarHoleWakeRsp& LCStarHoleWakeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarHoleWakeRsp* LCStarHoleWakeRsp::default_instance_ = NULL;

LCStarHoleWakeRsp* LCStarHoleWakeRsp::New() const {
  return new LCStarHoleWakeRsp;
}

void LCStarHoleWakeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    id_ = 0;
    hole_pos_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarSetupHoleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarHoleWakeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hole_pos;
        break;
      }

      // optional int32 hole_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_pos_)));
          set_has_hole_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarSetupHoleData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarHoleWakeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hole_pos(), output);
  }

  // optional .proto_ff.StarSetupHoleData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarHoleWakeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 hole_pos = 3;
  if (has_hole_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hole_pos(), target);
  }

  // optional .proto_ff.StarSetupHoleData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarHoleWakeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hole_pos = 3;
    if (has_hole_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hole_pos());
    }

    // optional .proto_ff.StarSetupHoleData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarHoleWakeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarHoleWakeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarHoleWakeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarHoleWakeRsp::MergeFrom(const LCStarHoleWakeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hole_pos()) {
      set_hole_pos(from.hole_pos());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarSetupHoleData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarHoleWakeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarHoleWakeRsp::CopyFrom(const LCStarHoleWakeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarHoleWakeRsp::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void LCStarHoleWakeRsp::Swap(LCStarHoleWakeRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(id_, other->id_);
    std::swap(hole_pos_, other->hole_pos_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarHoleWakeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarHoleWakeRsp_descriptor_;
  metadata.reflection = LCStarHoleWakeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarFantasyActiveReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLStarFantasyActiveReq::CLStarFantasyActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarFantasyActiveReq::InitAsDefaultInstance() {
}

CLStarFantasyActiveReq::CLStarFantasyActiveReq(const CLStarFantasyActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarFantasyActiveReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarFantasyActiveReq::~CLStarFantasyActiveReq() {
  SharedDtor();
}

void CLStarFantasyActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarFantasyActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarFantasyActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarFantasyActiveReq_descriptor_;
}

const CLStarFantasyActiveReq& CLStarFantasyActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarFantasyActiveReq* CLStarFantasyActiveReq::default_instance_ = NULL;

CLStarFantasyActiveReq* CLStarFantasyActiveReq::New() const {
  return new CLStarFantasyActiveReq;
}

void CLStarFantasyActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarFantasyActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarFantasyActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarFantasyActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarFantasyActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarFantasyActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarFantasyActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarFantasyActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarFantasyActiveReq::MergeFrom(const CLStarFantasyActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarFantasyActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarFantasyActiveReq::CopyFrom(const CLStarFantasyActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarFantasyActiveReq::IsInitialized() const {

  return true;
}

void CLStarFantasyActiveReq::Swap(CLStarFantasyActiveReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarFantasyActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarFantasyActiveReq_descriptor_;
  metadata.reflection = CLStarFantasyActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarFantasyActiveRsp::kRetCodeFieldNumber;
const int LCStarFantasyActiveRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCStarFantasyActiveRsp::LCStarFantasyActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarFantasyActiveRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarFantasyData*>(&::proto_ff::StarFantasyData::default_instance());
}

LCStarFantasyActiveRsp::LCStarFantasyActiveRsp(const LCStarFantasyActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarFantasyActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarFantasyActiveRsp::~LCStarFantasyActiveRsp() {
  SharedDtor();
}

void LCStarFantasyActiveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCStarFantasyActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarFantasyActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarFantasyActiveRsp_descriptor_;
}

const LCStarFantasyActiveRsp& LCStarFantasyActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarFantasyActiveRsp* LCStarFantasyActiveRsp::default_instance_ = NULL;

LCStarFantasyActiveRsp* LCStarFantasyActiveRsp::New() const {
  return new LCStarFantasyActiveRsp;
}

void LCStarFantasyActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarFantasyData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarFantasyActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarFantasyData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarFantasyActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarFantasyData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarFantasyActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarFantasyData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarFantasyActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarFantasyData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarFantasyActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarFantasyActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarFantasyActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarFantasyActiveRsp::MergeFrom(const LCStarFantasyActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarFantasyData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarFantasyActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarFantasyActiveRsp::CopyFrom(const LCStarFantasyActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarFantasyActiveRsp::IsInitialized() const {

  return true;
}

void LCStarFantasyActiveRsp::Swap(LCStarFantasyActiveRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarFantasyActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarFantasyActiveRsp_descriptor_;
  metadata.reflection = LCStarFantasyActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarFantasyLevelReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLStarFantasyLevelReq::CLStarFantasyLevelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarFantasyLevelReq::InitAsDefaultInstance() {
}

CLStarFantasyLevelReq::CLStarFantasyLevelReq(const CLStarFantasyLevelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarFantasyLevelReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarFantasyLevelReq::~CLStarFantasyLevelReq() {
  SharedDtor();
}

void CLStarFantasyLevelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarFantasyLevelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarFantasyLevelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarFantasyLevelReq_descriptor_;
}

const CLStarFantasyLevelReq& CLStarFantasyLevelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarFantasyLevelReq* CLStarFantasyLevelReq::default_instance_ = NULL;

CLStarFantasyLevelReq* CLStarFantasyLevelReq::New() const {
  return new CLStarFantasyLevelReq;
}

void CLStarFantasyLevelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarFantasyLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarFantasyLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarFantasyLevelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarFantasyLevelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarFantasyLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarFantasyLevelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarFantasyLevelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarFantasyLevelReq::MergeFrom(const CLStarFantasyLevelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarFantasyLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarFantasyLevelReq::CopyFrom(const CLStarFantasyLevelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarFantasyLevelReq::IsInitialized() const {

  return true;
}

void CLStarFantasyLevelReq::Swap(CLStarFantasyLevelReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarFantasyLevelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarFantasyLevelReq_descriptor_;
  metadata.reflection = CLStarFantasyLevelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarFantasyLevelRsp::kRetCodeFieldNumber;
const int LCStarFantasyLevelRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCStarFantasyLevelRsp::LCStarFantasyLevelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarFantasyLevelRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarFantasyData*>(&::proto_ff::StarFantasyData::default_instance());
}

LCStarFantasyLevelRsp::LCStarFantasyLevelRsp(const LCStarFantasyLevelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarFantasyLevelRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarFantasyLevelRsp::~LCStarFantasyLevelRsp() {
  SharedDtor();
}

void LCStarFantasyLevelRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCStarFantasyLevelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarFantasyLevelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarFantasyLevelRsp_descriptor_;
}

const LCStarFantasyLevelRsp& LCStarFantasyLevelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarFantasyLevelRsp* LCStarFantasyLevelRsp::default_instance_ = NULL;

LCStarFantasyLevelRsp* LCStarFantasyLevelRsp::New() const {
  return new LCStarFantasyLevelRsp;
}

void LCStarFantasyLevelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarFantasyData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarFantasyLevelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarFantasyData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarFantasyLevelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarFantasyData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarFantasyLevelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarFantasyData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarFantasyLevelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarFantasyData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarFantasyLevelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarFantasyLevelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarFantasyLevelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarFantasyLevelRsp::MergeFrom(const LCStarFantasyLevelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarFantasyData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarFantasyLevelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarFantasyLevelRsp::CopyFrom(const LCStarFantasyLevelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarFantasyLevelRsp::IsInitialized() const {

  return true;
}

void LCStarFantasyLevelRsp::Swap(LCStarFantasyLevelRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarFantasyLevelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarFantasyLevelRsp_descriptor_;
  metadata.reflection = LCStarFantasyLevelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarAttrActiveReq::kStarIdFieldNumber;
const int CLStarAttrActiveReq::kGuizhenIdFieldNumber;
#endif  // !_MSC_VER

CLStarAttrActiveReq::CLStarAttrActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarAttrActiveReq::InitAsDefaultInstance() {
}

CLStarAttrActiveReq::CLStarAttrActiveReq(const CLStarAttrActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarAttrActiveReq::SharedCtor() {
  _cached_size_ = 0;
  star_id_ = 0u;
  guizhen_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarAttrActiveReq::~CLStarAttrActiveReq() {
  SharedDtor();
}

void CLStarAttrActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarAttrActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarAttrActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarAttrActiveReq_descriptor_;
}

const CLStarAttrActiveReq& CLStarAttrActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarAttrActiveReq* CLStarAttrActiveReq::default_instance_ = NULL;

CLStarAttrActiveReq* CLStarAttrActiveReq::New() const {
  return new CLStarAttrActiveReq;
}

void CLStarAttrActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_id_ = 0u;
    guizhen_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarAttrActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 star_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_id_)));
          set_has_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guizhen_id;
        break;
      }

      // optional uint32 guizhen_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guizhen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guizhen_id_)));
          set_has_guizhen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarAttrActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 star_id = 1;
  if (has_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star_id(), output);
  }

  // optional uint32 guizhen_id = 2;
  if (has_guizhen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guizhen_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarAttrActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 star_id = 1;
  if (has_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star_id(), target);
  }

  // optional uint32 guizhen_id = 2;
  if (has_guizhen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guizhen_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarAttrActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 star_id = 1;
    if (has_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_id());
    }

    // optional uint32 guizhen_id = 2;
    if (has_guizhen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guizhen_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarAttrActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarAttrActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarAttrActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarAttrActiveReq::MergeFrom(const CLStarAttrActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star_id()) {
      set_star_id(from.star_id());
    }
    if (from.has_guizhen_id()) {
      set_guizhen_id(from.guizhen_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarAttrActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarAttrActiveReq::CopyFrom(const CLStarAttrActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarAttrActiveReq::IsInitialized() const {

  return true;
}

void CLStarAttrActiveReq::Swap(CLStarAttrActiveReq* other) {
  if (other != this) {
    std::swap(star_id_, other->star_id_);
    std::swap(guizhen_id_, other->guizhen_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarAttrActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarAttrActiveReq_descriptor_;
  metadata.reflection = CLStarAttrActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarAttrActiveRsp::kRetCodeFieldNumber;
const int LCStarAttrActiveRsp::kStarIdFieldNumber;
const int LCStarAttrActiveRsp::kGuizhenIdFieldNumber;
const int LCStarAttrActiveRsp::kGuizhenStatusFieldNumber;
#endif  // !_MSC_VER

LCStarAttrActiveRsp::LCStarAttrActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarAttrActiveRsp::InitAsDefaultInstance() {
}

LCStarAttrActiveRsp::LCStarAttrActiveRsp(const LCStarAttrActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarAttrActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  star_id_ = 0u;
  guizhen_id_ = 0u;
  guizhen_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarAttrActiveRsp::~LCStarAttrActiveRsp() {
  SharedDtor();
}

void LCStarAttrActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarAttrActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarAttrActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarAttrActiveRsp_descriptor_;
}

const LCStarAttrActiveRsp& LCStarAttrActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarAttrActiveRsp* LCStarAttrActiveRsp::default_instance_ = NULL;

LCStarAttrActiveRsp* LCStarAttrActiveRsp::New() const {
  return new LCStarAttrActiveRsp;
}

void LCStarAttrActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    star_id_ = 0u;
    guizhen_id_ = 0u;
    guizhen_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarAttrActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_id;
        break;
      }

      // optional uint32 star_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_id_)));
          set_has_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guizhen_id;
        break;
      }

      // optional uint32 guizhen_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guizhen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guizhen_id_)));
          set_has_guizhen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guizhen_status;
        break;
      }

      // optional uint32 guizhen_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guizhen_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guizhen_status_)));
          set_has_guizhen_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarAttrActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint32 star_id = 2;
  if (has_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_id(), output);
  }

  // optional uint32 guizhen_id = 3;
  if (has_guizhen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guizhen_id(), output);
  }

  // optional uint32 guizhen_status = 4;
  if (has_guizhen_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guizhen_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarAttrActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint32 star_id = 2;
  if (has_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_id(), target);
  }

  // optional uint32 guizhen_id = 3;
  if (has_guizhen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guizhen_id(), target);
  }

  // optional uint32 guizhen_status = 4;
  if (has_guizhen_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guizhen_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarAttrActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint32 star_id = 2;
    if (has_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_id());
    }

    // optional uint32 guizhen_id = 3;
    if (has_guizhen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guizhen_id());
    }

    // optional uint32 guizhen_status = 4;
    if (has_guizhen_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guizhen_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarAttrActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarAttrActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarAttrActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarAttrActiveRsp::MergeFrom(const LCStarAttrActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_star_id()) {
      set_star_id(from.star_id());
    }
    if (from.has_guizhen_id()) {
      set_guizhen_id(from.guizhen_id());
    }
    if (from.has_guizhen_status()) {
      set_guizhen_status(from.guizhen_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarAttrActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarAttrActiveRsp::CopyFrom(const LCStarAttrActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarAttrActiveRsp::IsInitialized() const {

  return true;
}

void LCStarAttrActiveRsp::Swap(LCStarAttrActiveRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(star_id_, other->star_id_);
    std::swap(guizhen_id_, other->guizhen_id_);
    std::swap(guizhen_status_, other->guizhen_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarAttrActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarAttrActiveRsp_descriptor_;
  metadata.reflection = LCStarAttrActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarAttrGuiZhenReq::kStarIdFieldNumber;
#endif  // !_MSC_VER

CLStarAttrGuiZhenReq::CLStarAttrGuiZhenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarAttrGuiZhenReq::InitAsDefaultInstance() {
}

CLStarAttrGuiZhenReq::CLStarAttrGuiZhenReq(const CLStarAttrGuiZhenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarAttrGuiZhenReq::SharedCtor() {
  _cached_size_ = 0;
  star_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarAttrGuiZhenReq::~CLStarAttrGuiZhenReq() {
  SharedDtor();
}

void CLStarAttrGuiZhenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarAttrGuiZhenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarAttrGuiZhenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarAttrGuiZhenReq_descriptor_;
}

const CLStarAttrGuiZhenReq& CLStarAttrGuiZhenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarAttrGuiZhenReq* CLStarAttrGuiZhenReq::default_instance_ = NULL;

CLStarAttrGuiZhenReq* CLStarAttrGuiZhenReq::New() const {
  return new CLStarAttrGuiZhenReq;
}

void CLStarAttrGuiZhenReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarAttrGuiZhenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 star_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_id_)));
          set_has_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarAttrGuiZhenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 star_id = 1;
  if (has_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarAttrGuiZhenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 star_id = 1;
  if (has_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarAttrGuiZhenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 star_id = 1;
    if (has_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarAttrGuiZhenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarAttrGuiZhenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarAttrGuiZhenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarAttrGuiZhenReq::MergeFrom(const CLStarAttrGuiZhenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star_id()) {
      set_star_id(from.star_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarAttrGuiZhenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarAttrGuiZhenReq::CopyFrom(const CLStarAttrGuiZhenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarAttrGuiZhenReq::IsInitialized() const {

  return true;
}

void CLStarAttrGuiZhenReq::Swap(CLStarAttrGuiZhenReq* other) {
  if (other != this) {
    std::swap(star_id_, other->star_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarAttrGuiZhenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarAttrGuiZhenReq_descriptor_;
  metadata.reflection = CLStarAttrGuiZhenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarAttrGuiZhenRsp::kRetCodeFieldNumber;
const int LCStarAttrGuiZhenRsp::kStarIdFieldNumber;
const int LCStarAttrGuiZhenRsp::kGuizhenIdFieldNumber;
const int LCStarAttrGuiZhenRsp::kGuizhenStatusFieldNumber;
#endif  // !_MSC_VER

LCStarAttrGuiZhenRsp::LCStarAttrGuiZhenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarAttrGuiZhenRsp::InitAsDefaultInstance() {
}

LCStarAttrGuiZhenRsp::LCStarAttrGuiZhenRsp(const LCStarAttrGuiZhenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarAttrGuiZhenRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  star_id_ = 0u;
  guizhen_id_ = 0u;
  guizhen_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarAttrGuiZhenRsp::~LCStarAttrGuiZhenRsp() {
  SharedDtor();
}

void LCStarAttrGuiZhenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarAttrGuiZhenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarAttrGuiZhenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarAttrGuiZhenRsp_descriptor_;
}

const LCStarAttrGuiZhenRsp& LCStarAttrGuiZhenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarAttrGuiZhenRsp* LCStarAttrGuiZhenRsp::default_instance_ = NULL;

LCStarAttrGuiZhenRsp* LCStarAttrGuiZhenRsp::New() const {
  return new LCStarAttrGuiZhenRsp;
}

void LCStarAttrGuiZhenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    star_id_ = 0u;
    guizhen_id_ = 0u;
    guizhen_status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarAttrGuiZhenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_id;
        break;
      }

      // optional uint32 star_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_id_)));
          set_has_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guizhen_id;
        break;
      }

      // optional uint32 guizhen_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guizhen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guizhen_id_)));
          set_has_guizhen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guizhen_status;
        break;
      }

      // optional uint32 guizhen_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guizhen_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guizhen_status_)));
          set_has_guizhen_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarAttrGuiZhenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint32 star_id = 2;
  if (has_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_id(), output);
  }

  // optional uint32 guizhen_id = 3;
  if (has_guizhen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guizhen_id(), output);
  }

  // optional uint32 guizhen_status = 4;
  if (has_guizhen_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guizhen_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarAttrGuiZhenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint32 star_id = 2;
  if (has_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_id(), target);
  }

  // optional uint32 guizhen_id = 3;
  if (has_guizhen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guizhen_id(), target);
  }

  // optional uint32 guizhen_status = 4;
  if (has_guizhen_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guizhen_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarAttrGuiZhenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint32 star_id = 2;
    if (has_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_id());
    }

    // optional uint32 guizhen_id = 3;
    if (has_guizhen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guizhen_id());
    }

    // optional uint32 guizhen_status = 4;
    if (has_guizhen_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guizhen_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarAttrGuiZhenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarAttrGuiZhenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarAttrGuiZhenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarAttrGuiZhenRsp::MergeFrom(const LCStarAttrGuiZhenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_star_id()) {
      set_star_id(from.star_id());
    }
    if (from.has_guizhen_id()) {
      set_guizhen_id(from.guizhen_id());
    }
    if (from.has_guizhen_status()) {
      set_guizhen_status(from.guizhen_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarAttrGuiZhenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarAttrGuiZhenRsp::CopyFrom(const LCStarAttrGuiZhenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarAttrGuiZhenRsp::IsInitialized() const {

  return true;
}

void LCStarAttrGuiZhenRsp::Swap(LCStarAttrGuiZhenRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(star_id_, other->star_id_);
    std::swap(guizhen_id_, other->guizhen_id_);
    std::swap(guizhen_status_, other->guizhen_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarAttrGuiZhenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarAttrGuiZhenRsp_descriptor_;
  metadata.reflection = LCStarAttrGuiZhenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarFantasyFantasyReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLStarFantasyFantasyReq::CLStarFantasyFantasyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarFantasyFantasyReq::InitAsDefaultInstance() {
}

CLStarFantasyFantasyReq::CLStarFantasyFantasyReq(const CLStarFantasyFantasyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarFantasyFantasyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarFantasyFantasyReq::~CLStarFantasyFantasyReq() {
  SharedDtor();
}

void CLStarFantasyFantasyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarFantasyFantasyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarFantasyFantasyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarFantasyFantasyReq_descriptor_;
}

const CLStarFantasyFantasyReq& CLStarFantasyFantasyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarFantasyFantasyReq* CLStarFantasyFantasyReq::default_instance_ = NULL;

CLStarFantasyFantasyReq* CLStarFantasyFantasyReq::New() const {
  return new CLStarFantasyFantasyReq;
}

void CLStarFantasyFantasyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarFantasyFantasyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarFantasyFantasyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarFantasyFantasyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarFantasyFantasyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarFantasyFantasyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarFantasyFantasyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarFantasyFantasyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarFantasyFantasyReq::MergeFrom(const CLStarFantasyFantasyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarFantasyFantasyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarFantasyFantasyReq::CopyFrom(const CLStarFantasyFantasyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarFantasyFantasyReq::IsInitialized() const {

  return true;
}

void CLStarFantasyFantasyReq::Swap(CLStarFantasyFantasyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarFantasyFantasyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarFantasyFantasyReq_descriptor_;
  metadata.reflection = CLStarFantasyFantasyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarFantasyFantasyRsp::kRetCodeFieldNumber;
const int LCStarFantasyFantasyRsp::kCurFantasyIdFieldNumber;
#endif  // !_MSC_VER

LCStarFantasyFantasyRsp::LCStarFantasyFantasyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarFantasyFantasyRsp::InitAsDefaultInstance() {
}

LCStarFantasyFantasyRsp::LCStarFantasyFantasyRsp(const LCStarFantasyFantasyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarFantasyFantasyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  cur_fantasy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarFantasyFantasyRsp::~LCStarFantasyFantasyRsp() {
  SharedDtor();
}

void LCStarFantasyFantasyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarFantasyFantasyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarFantasyFantasyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarFantasyFantasyRsp_descriptor_;
}

const LCStarFantasyFantasyRsp& LCStarFantasyFantasyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarFantasyFantasyRsp* LCStarFantasyFantasyRsp::default_instance_ = NULL;

LCStarFantasyFantasyRsp* LCStarFantasyFantasyRsp::New() const {
  return new LCStarFantasyFantasyRsp;
}

void LCStarFantasyFantasyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    cur_fantasy_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarFantasyFantasyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_fantasy_id;
        break;
      }

      // optional uint32 cur_fantasy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_fantasy_id_)));
          set_has_cur_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarFantasyFantasyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint32 cur_fantasy_id = 2;
  if (has_cur_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_fantasy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarFantasyFantasyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint32 cur_fantasy_id = 2;
  if (has_cur_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_fantasy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarFantasyFantasyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint32 cur_fantasy_id = 2;
    if (has_cur_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_fantasy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarFantasyFantasyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarFantasyFantasyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarFantasyFantasyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarFantasyFantasyRsp::MergeFrom(const LCStarFantasyFantasyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_cur_fantasy_id()) {
      set_cur_fantasy_id(from.cur_fantasy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarFantasyFantasyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarFantasyFantasyRsp::CopyFrom(const LCStarFantasyFantasyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarFantasyFantasyRsp::IsInitialized() const {

  return true;
}

void LCStarFantasyFantasyRsp::Swap(LCStarFantasyFantasyRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(cur_fantasy_id_, other->cur_fantasy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarFantasyFantasyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarFantasyFantasyRsp_descriptor_;
  metadata.reflection = LCStarFantasyFantasyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarFantasyFantasyCancelReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLStarFantasyFantasyCancelReq::CLStarFantasyFantasyCancelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarFantasyFantasyCancelReq::InitAsDefaultInstance() {
}

CLStarFantasyFantasyCancelReq::CLStarFantasyFantasyCancelReq(const CLStarFantasyFantasyCancelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarFantasyFantasyCancelReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarFantasyFantasyCancelReq::~CLStarFantasyFantasyCancelReq() {
  SharedDtor();
}

void CLStarFantasyFantasyCancelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarFantasyFantasyCancelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarFantasyFantasyCancelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarFantasyFantasyCancelReq_descriptor_;
}

const CLStarFantasyFantasyCancelReq& CLStarFantasyFantasyCancelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarFantasyFantasyCancelReq* CLStarFantasyFantasyCancelReq::default_instance_ = NULL;

CLStarFantasyFantasyCancelReq* CLStarFantasyFantasyCancelReq::New() const {
  return new CLStarFantasyFantasyCancelReq;
}

void CLStarFantasyFantasyCancelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarFantasyFantasyCancelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarFantasyFantasyCancelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarFantasyFantasyCancelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarFantasyFantasyCancelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarFantasyFantasyCancelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarFantasyFantasyCancelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarFantasyFantasyCancelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarFantasyFantasyCancelReq::MergeFrom(const CLStarFantasyFantasyCancelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarFantasyFantasyCancelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarFantasyFantasyCancelReq::CopyFrom(const CLStarFantasyFantasyCancelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarFantasyFantasyCancelReq::IsInitialized() const {

  return true;
}

void CLStarFantasyFantasyCancelReq::Swap(CLStarFantasyFantasyCancelReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarFantasyFantasyCancelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarFantasyFantasyCancelReq_descriptor_;
  metadata.reflection = CLStarFantasyFantasyCancelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarFantasyFantasyCancelRsp::kRetCodeFieldNumber;
const int LCStarFantasyFantasyCancelRsp::kCurFantasyIdFieldNumber;
#endif  // !_MSC_VER

LCStarFantasyFantasyCancelRsp::LCStarFantasyFantasyCancelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarFantasyFantasyCancelRsp::InitAsDefaultInstance() {
}

LCStarFantasyFantasyCancelRsp::LCStarFantasyFantasyCancelRsp(const LCStarFantasyFantasyCancelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarFantasyFantasyCancelRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  cur_fantasy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarFantasyFantasyCancelRsp::~LCStarFantasyFantasyCancelRsp() {
  SharedDtor();
}

void LCStarFantasyFantasyCancelRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarFantasyFantasyCancelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarFantasyFantasyCancelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarFantasyFantasyCancelRsp_descriptor_;
}

const LCStarFantasyFantasyCancelRsp& LCStarFantasyFantasyCancelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarFantasyFantasyCancelRsp* LCStarFantasyFantasyCancelRsp::default_instance_ = NULL;

LCStarFantasyFantasyCancelRsp* LCStarFantasyFantasyCancelRsp::New() const {
  return new LCStarFantasyFantasyCancelRsp;
}

void LCStarFantasyFantasyCancelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    cur_fantasy_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarFantasyFantasyCancelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_fantasy_id;
        break;
      }

      // optional uint32 cur_fantasy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_fantasy_id_)));
          set_has_cur_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarFantasyFantasyCancelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional uint32 cur_fantasy_id = 2;
  if (has_cur_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_fantasy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarFantasyFantasyCancelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint32 cur_fantasy_id = 2;
  if (has_cur_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_fantasy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarFantasyFantasyCancelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional uint32 cur_fantasy_id = 2;
    if (has_cur_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_fantasy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarFantasyFantasyCancelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarFantasyFantasyCancelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarFantasyFantasyCancelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarFantasyFantasyCancelRsp::MergeFrom(const LCStarFantasyFantasyCancelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_cur_fantasy_id()) {
      set_cur_fantasy_id(from.cur_fantasy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarFantasyFantasyCancelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarFantasyFantasyCancelRsp::CopyFrom(const LCStarFantasyFantasyCancelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarFantasyFantasyCancelRsp::IsInitialized() const {

  return true;
}

void LCStarFantasyFantasyCancelRsp::Swap(LCStarFantasyFantasyCancelRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(cur_fantasy_id_, other->cur_fantasy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarFantasyFantasyCancelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarFantasyFantasyCancelRsp_descriptor_;
  metadata.reflection = LCStarFantasyFantasyCancelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarActiveStarAttrInfoReq::kStarIdFieldNumber;
#endif  // !_MSC_VER

CLStarActiveStarAttrInfoReq::CLStarActiveStarAttrInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarActiveStarAttrInfoReq::InitAsDefaultInstance() {
}

CLStarActiveStarAttrInfoReq::CLStarActiveStarAttrInfoReq(const CLStarActiveStarAttrInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarActiveStarAttrInfoReq::SharedCtor() {
  _cached_size_ = 0;
  star_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarActiveStarAttrInfoReq::~CLStarActiveStarAttrInfoReq() {
  SharedDtor();
}

void CLStarActiveStarAttrInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarActiveStarAttrInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarActiveStarAttrInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarActiveStarAttrInfoReq_descriptor_;
}

const CLStarActiveStarAttrInfoReq& CLStarActiveStarAttrInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarActiveStarAttrInfoReq* CLStarActiveStarAttrInfoReq::default_instance_ = NULL;

CLStarActiveStarAttrInfoReq* CLStarActiveStarAttrInfoReq::New() const {
  return new CLStarActiveStarAttrInfoReq;
}

void CLStarActiveStarAttrInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarActiveStarAttrInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 star_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_id_)));
          set_has_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarActiveStarAttrInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 star_id = 1;
  if (has_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarActiveStarAttrInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 star_id = 1;
  if (has_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarActiveStarAttrInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 star_id = 1;
    if (has_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarActiveStarAttrInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarActiveStarAttrInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarActiveStarAttrInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarActiveStarAttrInfoReq::MergeFrom(const CLStarActiveStarAttrInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star_id()) {
      set_star_id(from.star_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarActiveStarAttrInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarActiveStarAttrInfoReq::CopyFrom(const CLStarActiveStarAttrInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarActiveStarAttrInfoReq::IsInitialized() const {

  return true;
}

void CLStarActiveStarAttrInfoReq::Swap(CLStarActiveStarAttrInfoReq* other) {
  if (other != this) {
    std::swap(star_id_, other->star_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarActiveStarAttrInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarActiveStarAttrInfoReq_descriptor_;
  metadata.reflection = CLStarActiveStarAttrInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarActiveStarAttrInfoRsp::kRetCodeFieldNumber;
const int LCStarActiveStarAttrInfoRsp::kStarIdFieldNumber;
const int LCStarActiveStarAttrInfoRsp::kStarNumFieldNumber;
const int LCStarActiveStarAttrInfoRsp::kStarAttrFieldNumber;
#endif  // !_MSC_VER

LCStarActiveStarAttrInfoRsp::LCStarActiveStarAttrInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarActiveStarAttrInfoRsp::InitAsDefaultInstance() {
}

LCStarActiveStarAttrInfoRsp::LCStarActiveStarAttrInfoRsp(const LCStarActiveStarAttrInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarActiveStarAttrInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0u;
  star_id_ = 0u;
  star_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarActiveStarAttrInfoRsp::~LCStarActiveStarAttrInfoRsp() {
  SharedDtor();
}

void LCStarActiveStarAttrInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarActiveStarAttrInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarActiveStarAttrInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarActiveStarAttrInfoRsp_descriptor_;
}

const LCStarActiveStarAttrInfoRsp& LCStarActiveStarAttrInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarActiveStarAttrInfoRsp* LCStarActiveStarAttrInfoRsp::default_instance_ = NULL;

LCStarActiveStarAttrInfoRsp* LCStarActiveStarAttrInfoRsp::New() const {
  return new LCStarActiveStarAttrInfoRsp;
}

void LCStarActiveStarAttrInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0u;
    star_id_ = 0u;
    star_num_ = 0u;
  }
  star_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarActiveStarAttrInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_id;
        break;
      }

      // optional uint32 star_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_id_)));
          set_has_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star_num;
        break;
      }

      // optional uint32 star_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_num_)));
          set_has_star_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_star_attr;
        break;
      }

      // repeated .proto_ff.StarSetupStarAttrData star_attr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_star_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_star_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarActiveStarAttrInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret_code(), output);
  }

  // optional uint32 star_id = 2;
  if (has_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_id(), output);
  }

  // optional uint32 star_num = 3;
  if (has_star_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star_num(), output);
  }

  // repeated .proto_ff.StarSetupStarAttrData star_attr = 4;
  for (int i = 0; i < this->star_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->star_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarActiveStarAttrInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint32 star_id = 2;
  if (has_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_id(), target);
  }

  // optional uint32 star_num = 3;
  if (has_star_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star_num(), target);
  }

  // repeated .proto_ff.StarSetupStarAttrData star_attr = 4;
  for (int i = 0; i < this->star_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->star_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarActiveStarAttrInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional uint32 star_id = 2;
    if (has_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_id());
    }

    // optional uint32 star_num = 3;
    if (has_star_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_num());
    }

  }
  // repeated .proto_ff.StarSetupStarAttrData star_attr = 4;
  total_size += 1 * this->star_attr_size();
  for (int i = 0; i < this->star_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarActiveStarAttrInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarActiveStarAttrInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarActiveStarAttrInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarActiveStarAttrInfoRsp::MergeFrom(const LCStarActiveStarAttrInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  star_attr_.MergeFrom(from.star_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_star_id()) {
      set_star_id(from.star_id());
    }
    if (from.has_star_num()) {
      set_star_num(from.star_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarActiveStarAttrInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarActiveStarAttrInfoRsp::CopyFrom(const LCStarActiveStarAttrInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarActiveStarAttrInfoRsp::IsInitialized() const {

  return true;
}

void LCStarActiveStarAttrInfoRsp::Swap(LCStarActiveStarAttrInfoRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(star_id_, other->star_id_);
    std::swap(star_num_, other->star_num_);
    star_attr_.Swap(&other->star_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarActiveStarAttrInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarActiveStarAttrInfoRsp_descriptor_;
  metadata.reflection = LCStarActiveStarAttrInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarActiveStarAttrReq::kStarIdFieldNumber;
const int CLStarActiveStarAttrReq::kStarAttrIdFieldNumber;
#endif  // !_MSC_VER

CLStarActiveStarAttrReq::CLStarActiveStarAttrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarActiveStarAttrReq::InitAsDefaultInstance() {
}

CLStarActiveStarAttrReq::CLStarActiveStarAttrReq(const CLStarActiveStarAttrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarActiveStarAttrReq::SharedCtor() {
  _cached_size_ = 0;
  star_id_ = 0u;
  star_attr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarActiveStarAttrReq::~CLStarActiveStarAttrReq() {
  SharedDtor();
}

void CLStarActiveStarAttrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarActiveStarAttrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarActiveStarAttrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarActiveStarAttrReq_descriptor_;
}

const CLStarActiveStarAttrReq& CLStarActiveStarAttrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarActiveStarAttrReq* CLStarActiveStarAttrReq::default_instance_ = NULL;

CLStarActiveStarAttrReq* CLStarActiveStarAttrReq::New() const {
  return new CLStarActiveStarAttrReq;
}

void CLStarActiveStarAttrReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_id_ = 0u;
    star_attr_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarActiveStarAttrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 star_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_id_)));
          set_has_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_attr_id;
        break;
      }

      // optional uint32 star_attr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_attr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_attr_id_)));
          set_has_star_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarActiveStarAttrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 star_id = 1;
  if (has_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star_id(), output);
  }

  // optional uint32 star_attr_id = 2;
  if (has_star_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_attr_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarActiveStarAttrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 star_id = 1;
  if (has_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star_id(), target);
  }

  // optional uint32 star_attr_id = 2;
  if (has_star_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_attr_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarActiveStarAttrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 star_id = 1;
    if (has_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_id());
    }

    // optional uint32 star_attr_id = 2;
    if (has_star_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_attr_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarActiveStarAttrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarActiveStarAttrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarActiveStarAttrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarActiveStarAttrReq::MergeFrom(const CLStarActiveStarAttrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star_id()) {
      set_star_id(from.star_id());
    }
    if (from.has_star_attr_id()) {
      set_star_attr_id(from.star_attr_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarActiveStarAttrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarActiveStarAttrReq::CopyFrom(const CLStarActiveStarAttrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarActiveStarAttrReq::IsInitialized() const {

  return true;
}

void CLStarActiveStarAttrReq::Swap(CLStarActiveStarAttrReq* other) {
  if (other != this) {
    std::swap(star_id_, other->star_id_);
    std::swap(star_attr_id_, other->star_attr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarActiveStarAttrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarActiveStarAttrReq_descriptor_;
  metadata.reflection = CLStarActiveStarAttrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarActiveStarAttrRsp::kRetCodeFieldNumber;
const int LCStarActiveStarAttrRsp::kStarIdFieldNumber;
const int LCStarActiveStarAttrRsp::kStarAttrIdFieldNumber;
#endif  // !_MSC_VER

LCStarActiveStarAttrRsp::LCStarActiveStarAttrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarActiveStarAttrRsp::InitAsDefaultInstance() {
}

LCStarActiveStarAttrRsp::LCStarActiveStarAttrRsp(const LCStarActiveStarAttrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarActiveStarAttrRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0u;
  star_id_ = 0u;
  star_attr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarActiveStarAttrRsp::~LCStarActiveStarAttrRsp() {
  SharedDtor();
}

void LCStarActiveStarAttrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarActiveStarAttrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarActiveStarAttrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarActiveStarAttrRsp_descriptor_;
}

const LCStarActiveStarAttrRsp& LCStarActiveStarAttrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarActiveStarAttrRsp* LCStarActiveStarAttrRsp::default_instance_ = NULL;

LCStarActiveStarAttrRsp* LCStarActiveStarAttrRsp::New() const {
  return new LCStarActiveStarAttrRsp;
}

void LCStarActiveStarAttrRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0u;
    star_id_ = 0u;
    star_attr_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarActiveStarAttrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_id;
        break;
      }

      // optional uint32 star_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_id_)));
          set_has_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star_attr_id;
        break;
      }

      // optional uint32 star_attr_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_attr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_attr_id_)));
          set_has_star_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarActiveStarAttrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret_code(), output);
  }

  // optional uint32 star_id = 2;
  if (has_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_id(), output);
  }

  // optional uint32 star_attr_id = 3;
  if (has_star_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star_attr_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarActiveStarAttrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret_code(), target);
  }

  // optional uint32 star_id = 2;
  if (has_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_id(), target);
  }

  // optional uint32 star_attr_id = 3;
  if (has_star_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star_attr_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarActiveStarAttrRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret_code());
    }

    // optional uint32 star_id = 2;
    if (has_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_id());
    }

    // optional uint32 star_attr_id = 3;
    if (has_star_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_attr_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarActiveStarAttrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarActiveStarAttrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarActiveStarAttrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarActiveStarAttrRsp::MergeFrom(const LCStarActiveStarAttrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_star_id()) {
      set_star_id(from.star_id());
    }
    if (from.has_star_attr_id()) {
      set_star_attr_id(from.star_attr_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarActiveStarAttrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarActiveStarAttrRsp::CopyFrom(const LCStarActiveStarAttrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarActiveStarAttrRsp::IsInitialized() const {

  return true;
}

void LCStarActiveStarAttrRsp::Swap(LCStarActiveStarAttrRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(star_id_, other->star_id_);
    std::swap(star_attr_id_, other->star_attr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarActiveStarAttrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarActiveStarAttrRsp_descriptor_;
  metadata.reflection = LCStarActiveStarAttrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarFantasyAdvanceLvReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLStarFantasyAdvanceLvReq::CLStarFantasyAdvanceLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarFantasyAdvanceLvReq::InitAsDefaultInstance() {
}

CLStarFantasyAdvanceLvReq::CLStarFantasyAdvanceLvReq(const CLStarFantasyAdvanceLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarFantasyAdvanceLvReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarFantasyAdvanceLvReq::~CLStarFantasyAdvanceLvReq() {
  SharedDtor();
}

void CLStarFantasyAdvanceLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarFantasyAdvanceLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarFantasyAdvanceLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarFantasyAdvanceLvReq_descriptor_;
}

const CLStarFantasyAdvanceLvReq& CLStarFantasyAdvanceLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarFantasyAdvanceLvReq* CLStarFantasyAdvanceLvReq::default_instance_ = NULL;

CLStarFantasyAdvanceLvReq* CLStarFantasyAdvanceLvReq::New() const {
  return new CLStarFantasyAdvanceLvReq;
}

void CLStarFantasyAdvanceLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarFantasyAdvanceLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarFantasyAdvanceLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarFantasyAdvanceLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarFantasyAdvanceLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarFantasyAdvanceLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarFantasyAdvanceLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarFantasyAdvanceLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarFantasyAdvanceLvReq::MergeFrom(const CLStarFantasyAdvanceLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarFantasyAdvanceLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarFantasyAdvanceLvReq::CopyFrom(const CLStarFantasyAdvanceLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarFantasyAdvanceLvReq::IsInitialized() const {

  return true;
}

void CLStarFantasyAdvanceLvReq::Swap(CLStarFantasyAdvanceLvReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarFantasyAdvanceLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarFantasyAdvanceLvReq_descriptor_;
  metadata.reflection = CLStarFantasyAdvanceLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarFantasyAdvanceLvRsp::kRetCodeFieldNumber;
const int LCStarFantasyAdvanceLvRsp::kDataFieldNumber;
#endif  // !_MSC_VER

LCStarFantasyAdvanceLvRsp::LCStarFantasyAdvanceLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarFantasyAdvanceLvRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::StarFantasyData*>(&::proto_ff::StarFantasyData::default_instance());
}

LCStarFantasyAdvanceLvRsp::LCStarFantasyAdvanceLvRsp(const LCStarFantasyAdvanceLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarFantasyAdvanceLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarFantasyAdvanceLvRsp::~LCStarFantasyAdvanceLvRsp() {
  SharedDtor();
}

void LCStarFantasyAdvanceLvRsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void LCStarFantasyAdvanceLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarFantasyAdvanceLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarFantasyAdvanceLvRsp_descriptor_;
}

const LCStarFantasyAdvanceLvRsp& LCStarFantasyAdvanceLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarFantasyAdvanceLvRsp* LCStarFantasyAdvanceLvRsp::default_instance_ = NULL;

LCStarFantasyAdvanceLvRsp* LCStarFantasyAdvanceLvRsp::New() const {
  return new LCStarFantasyAdvanceLvRsp;
}

void LCStarFantasyAdvanceLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::StarFantasyData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarFantasyAdvanceLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.StarFantasyData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarFantasyAdvanceLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarFantasyData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarFantasyAdvanceLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarFantasyData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarFantasyAdvanceLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarFantasyData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarFantasyAdvanceLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarFantasyAdvanceLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarFantasyAdvanceLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarFantasyAdvanceLvRsp::MergeFrom(const LCStarFantasyAdvanceLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::StarFantasyData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarFantasyAdvanceLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarFantasyAdvanceLvRsp::CopyFrom(const LCStarFantasyAdvanceLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarFantasyAdvanceLvRsp::IsInitialized() const {

  return true;
}

void LCStarFantasyAdvanceLvRsp::Swap(LCStarFantasyAdvanceLvRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarFantasyAdvanceLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarFantasyAdvanceLvRsp_descriptor_;
  metadata.reflection = LCStarFantasyAdvanceLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLStarGetSkillInfoReq::CLStarGetSkillInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarGetSkillInfoReq::InitAsDefaultInstance() {
}

CLStarGetSkillInfoReq::CLStarGetSkillInfoReq(const CLStarGetSkillInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarGetSkillInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarGetSkillInfoReq::~CLStarGetSkillInfoReq() {
  SharedDtor();
}

void CLStarGetSkillInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarGetSkillInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarGetSkillInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarGetSkillInfoReq_descriptor_;
}

const CLStarGetSkillInfoReq& CLStarGetSkillInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarGetSkillInfoReq* CLStarGetSkillInfoReq::default_instance_ = NULL;

CLStarGetSkillInfoReq* CLStarGetSkillInfoReq::New() const {
  return new CLStarGetSkillInfoReq;
}

void CLStarGetSkillInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarGetSkillInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLStarGetSkillInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarGetSkillInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarGetSkillInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarGetSkillInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarGetSkillInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarGetSkillInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarGetSkillInfoReq::MergeFrom(const CLStarGetSkillInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarGetSkillInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarGetSkillInfoReq::CopyFrom(const CLStarGetSkillInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarGetSkillInfoReq::IsInitialized() const {

  return true;
}

void CLStarGetSkillInfoReq::Swap(CLStarGetSkillInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarGetSkillInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarGetSkillInfoReq_descriptor_;
  metadata.reflection = CLStarGetSkillInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarGetSkillInfoRsp::kSkillDataFieldNumber;
const int LCStarGetSkillInfoRsp::kSkillSlotDataFieldNumber;
#endif  // !_MSC_VER

LCStarGetSkillInfoRsp::LCStarGetSkillInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarGetSkillInfoRsp::InitAsDefaultInstance() {
}

LCStarGetSkillInfoRsp::LCStarGetSkillInfoRsp(const LCStarGetSkillInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarGetSkillInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarGetSkillInfoRsp::~LCStarGetSkillInfoRsp() {
  SharedDtor();
}

void LCStarGetSkillInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarGetSkillInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarGetSkillInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarGetSkillInfoRsp_descriptor_;
}

const LCStarGetSkillInfoRsp& LCStarGetSkillInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarGetSkillInfoRsp* LCStarGetSkillInfoRsp::default_instance_ = NULL;

LCStarGetSkillInfoRsp* LCStarGetSkillInfoRsp::New() const {
  return new LCStarGetSkillInfoRsp;
}

void LCStarGetSkillInfoRsp::Clear() {
  skill_data_.Clear();
  skill_slot_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarGetSkillInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.StarSkillData skill_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skill_data;
        if (input->ExpectTag(18)) goto parse_skill_slot_data;
        break;
      }

      // repeated .proto_ff.StarSkillSlotData skill_slot_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_slot_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarGetSkillInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.StarSkillData skill_data = 1;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_data(i), output);
  }

  // repeated .proto_ff.StarSkillSlotData skill_slot_data = 2;
  for (int i = 0; i < this->skill_slot_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_slot_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarGetSkillInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.StarSkillData skill_data = 1;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_data(i), target);
  }

  // repeated .proto_ff.StarSkillSlotData skill_slot_data = 2;
  for (int i = 0; i < this->skill_slot_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_slot_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarGetSkillInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.StarSkillData skill_data = 1;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .proto_ff.StarSkillSlotData skill_slot_data = 2;
  total_size += 1 * this->skill_slot_data_size();
  for (int i = 0; i < this->skill_slot_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_slot_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarGetSkillInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarGetSkillInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarGetSkillInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarGetSkillInfoRsp::MergeFrom(const LCStarGetSkillInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_data_.MergeFrom(from.skill_data_);
  skill_slot_data_.MergeFrom(from.skill_slot_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarGetSkillInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarGetSkillInfoRsp::CopyFrom(const LCStarGetSkillInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarGetSkillInfoRsp::IsInitialized() const {

  return true;
}

void LCStarGetSkillInfoRsp::Swap(LCStarGetSkillInfoRsp* other) {
  if (other != this) {
    skill_data_.Swap(&other->skill_data_);
    skill_slot_data_.Swap(&other->skill_slot_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarGetSkillInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarGetSkillInfoRsp_descriptor_;
  metadata.reflection = LCStarGetSkillInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarUnlockSkillSlotReq::kSlotIdFieldNumber;
#endif  // !_MSC_VER

CLStarUnlockSkillSlotReq::CLStarUnlockSkillSlotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarUnlockSkillSlotReq::InitAsDefaultInstance() {
}

CLStarUnlockSkillSlotReq::CLStarUnlockSkillSlotReq(const CLStarUnlockSkillSlotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarUnlockSkillSlotReq::SharedCtor() {
  _cached_size_ = 0;
  slot_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarUnlockSkillSlotReq::~CLStarUnlockSkillSlotReq() {
  SharedDtor();
}

void CLStarUnlockSkillSlotReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarUnlockSkillSlotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarUnlockSkillSlotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarUnlockSkillSlotReq_descriptor_;
}

const CLStarUnlockSkillSlotReq& CLStarUnlockSkillSlotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarUnlockSkillSlotReq* CLStarUnlockSkillSlotReq::default_instance_ = NULL;

CLStarUnlockSkillSlotReq* CLStarUnlockSkillSlotReq::New() const {
  return new CLStarUnlockSkillSlotReq;
}

void CLStarUnlockSkillSlotReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarUnlockSkillSlotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarUnlockSkillSlotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot_id = 1;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarUnlockSkillSlotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot_id = 1;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarUnlockSkillSlotReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot_id = 1;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarUnlockSkillSlotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarUnlockSkillSlotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarUnlockSkillSlotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarUnlockSkillSlotReq::MergeFrom(const CLStarUnlockSkillSlotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarUnlockSkillSlotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarUnlockSkillSlotReq::CopyFrom(const CLStarUnlockSkillSlotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarUnlockSkillSlotReq::IsInitialized() const {

  return true;
}

void CLStarUnlockSkillSlotReq::Swap(CLStarUnlockSkillSlotReq* other) {
  if (other != this) {
    std::swap(slot_id_, other->slot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarUnlockSkillSlotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarUnlockSkillSlotReq_descriptor_;
  metadata.reflection = CLStarUnlockSkillSlotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarUnlockSkillSlotRsp::kRetCodeFieldNumber;
const int LCStarUnlockSkillSlotRsp::kSkillSlotDataFieldNumber;
#endif  // !_MSC_VER

LCStarUnlockSkillSlotRsp::LCStarUnlockSkillSlotRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarUnlockSkillSlotRsp::InitAsDefaultInstance() {
  skill_slot_data_ = const_cast< ::proto_ff::StarSkillSlotData*>(&::proto_ff::StarSkillSlotData::default_instance());
}

LCStarUnlockSkillSlotRsp::LCStarUnlockSkillSlotRsp(const LCStarUnlockSkillSlotRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarUnlockSkillSlotRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  skill_slot_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarUnlockSkillSlotRsp::~LCStarUnlockSkillSlotRsp() {
  SharedDtor();
}

void LCStarUnlockSkillSlotRsp::SharedDtor() {
  if (this != default_instance_) {
    delete skill_slot_data_;
  }
}

void LCStarUnlockSkillSlotRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarUnlockSkillSlotRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarUnlockSkillSlotRsp_descriptor_;
}

const LCStarUnlockSkillSlotRsp& LCStarUnlockSkillSlotRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarUnlockSkillSlotRsp* LCStarUnlockSkillSlotRsp::default_instance_ = NULL;

LCStarUnlockSkillSlotRsp* LCStarUnlockSkillSlotRsp::New() const {
  return new LCStarUnlockSkillSlotRsp;
}

void LCStarUnlockSkillSlotRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_skill_slot_data()) {
      if (skill_slot_data_ != NULL) skill_slot_data_->::proto_ff::StarSkillSlotData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarUnlockSkillSlotRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_slot_data;
        break;
      }

      // optional .proto_ff.StarSkillSlotData skill_slot_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarUnlockSkillSlotRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarSkillSlotData skill_slot_data = 2;
  if (has_skill_slot_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_slot_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarUnlockSkillSlotRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarSkillSlotData skill_slot_data = 2;
  if (has_skill_slot_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_slot_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarUnlockSkillSlotRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarSkillSlotData skill_slot_data = 2;
    if (has_skill_slot_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_slot_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarUnlockSkillSlotRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarUnlockSkillSlotRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarUnlockSkillSlotRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarUnlockSkillSlotRsp::MergeFrom(const LCStarUnlockSkillSlotRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_skill_slot_data()) {
      mutable_skill_slot_data()->::proto_ff::StarSkillSlotData::MergeFrom(from.skill_slot_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarUnlockSkillSlotRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarUnlockSkillSlotRsp::CopyFrom(const LCStarUnlockSkillSlotRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarUnlockSkillSlotRsp::IsInitialized() const {

  return true;
}

void LCStarUnlockSkillSlotRsp::Swap(LCStarUnlockSkillSlotRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(skill_slot_data_, other->skill_slot_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarUnlockSkillSlotRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarUnlockSkillSlotRsp_descriptor_;
  metadata.reflection = LCStarUnlockSkillSlotRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarFinishSkillLevelReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLStarFinishSkillLevelReq::CLStarFinishSkillLevelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarFinishSkillLevelReq::InitAsDefaultInstance() {
}

CLStarFinishSkillLevelReq::CLStarFinishSkillLevelReq(const CLStarFinishSkillLevelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarFinishSkillLevelReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarFinishSkillLevelReq::~CLStarFinishSkillLevelReq() {
  SharedDtor();
}

void CLStarFinishSkillLevelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarFinishSkillLevelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarFinishSkillLevelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarFinishSkillLevelReq_descriptor_;
}

const CLStarFinishSkillLevelReq& CLStarFinishSkillLevelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarFinishSkillLevelReq* CLStarFinishSkillLevelReq::default_instance_ = NULL;

CLStarFinishSkillLevelReq* CLStarFinishSkillLevelReq::New() const {
  return new CLStarFinishSkillLevelReq;
}

void CLStarFinishSkillLevelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarFinishSkillLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarFinishSkillLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarFinishSkillLevelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarFinishSkillLevelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarFinishSkillLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarFinishSkillLevelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarFinishSkillLevelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarFinishSkillLevelReq::MergeFrom(const CLStarFinishSkillLevelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarFinishSkillLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarFinishSkillLevelReq::CopyFrom(const CLStarFinishSkillLevelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarFinishSkillLevelReq::IsInitialized() const {

  return true;
}

void CLStarFinishSkillLevelReq::Swap(CLStarFinishSkillLevelReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarFinishSkillLevelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarFinishSkillLevelReq_descriptor_;
  metadata.reflection = CLStarFinishSkillLevelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarFinishSkillLevelRsp::kRetCodeFieldNumber;
const int LCStarFinishSkillLevelRsp::kSkillDataFieldNumber;
const int LCStarFinishSkillLevelRsp::kSkillSlotDataFieldNumber;
#endif  // !_MSC_VER

LCStarFinishSkillLevelRsp::LCStarFinishSkillLevelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarFinishSkillLevelRsp::InitAsDefaultInstance() {
  skill_data_ = const_cast< ::proto_ff::StarSkillData*>(&::proto_ff::StarSkillData::default_instance());
  skill_slot_data_ = const_cast< ::proto_ff::StarSkillSlotData*>(&::proto_ff::StarSkillSlotData::default_instance());
}

LCStarFinishSkillLevelRsp::LCStarFinishSkillLevelRsp(const LCStarFinishSkillLevelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarFinishSkillLevelRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  skill_data_ = NULL;
  skill_slot_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarFinishSkillLevelRsp::~LCStarFinishSkillLevelRsp() {
  SharedDtor();
}

void LCStarFinishSkillLevelRsp::SharedDtor() {
  if (this != default_instance_) {
    delete skill_data_;
    delete skill_slot_data_;
  }
}

void LCStarFinishSkillLevelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarFinishSkillLevelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarFinishSkillLevelRsp_descriptor_;
}

const LCStarFinishSkillLevelRsp& LCStarFinishSkillLevelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarFinishSkillLevelRsp* LCStarFinishSkillLevelRsp::default_instance_ = NULL;

LCStarFinishSkillLevelRsp* LCStarFinishSkillLevelRsp::New() const {
  return new LCStarFinishSkillLevelRsp;
}

void LCStarFinishSkillLevelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_skill_data()) {
      if (skill_data_ != NULL) skill_data_->::proto_ff::StarSkillData::Clear();
    }
    if (has_skill_slot_data()) {
      if (skill_slot_data_ != NULL) skill_slot_data_->::proto_ff::StarSkillSlotData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarFinishSkillLevelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_data;
        break;
      }

      // optional .proto_ff.StarSkillData skill_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_slot_data;
        break;
      }

      // optional .proto_ff.StarSkillSlotData skill_slot_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarFinishSkillLevelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarSkillData skill_data = 2;
  if (has_skill_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_data(), output);
  }

  // optional .proto_ff.StarSkillSlotData skill_slot_data = 3;
  if (has_skill_slot_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_slot_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarFinishSkillLevelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarSkillData skill_data = 2;
  if (has_skill_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_data(), target);
  }

  // optional .proto_ff.StarSkillSlotData skill_slot_data = 3;
  if (has_skill_slot_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_slot_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarFinishSkillLevelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarSkillData skill_data = 2;
    if (has_skill_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_data());
    }

    // optional .proto_ff.StarSkillSlotData skill_slot_data = 3;
    if (has_skill_slot_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_slot_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarFinishSkillLevelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarFinishSkillLevelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarFinishSkillLevelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarFinishSkillLevelRsp::MergeFrom(const LCStarFinishSkillLevelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_skill_data()) {
      mutable_skill_data()->::proto_ff::StarSkillData::MergeFrom(from.skill_data());
    }
    if (from.has_skill_slot_data()) {
      mutable_skill_slot_data()->::proto_ff::StarSkillSlotData::MergeFrom(from.skill_slot_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarFinishSkillLevelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarFinishSkillLevelRsp::CopyFrom(const LCStarFinishSkillLevelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarFinishSkillLevelRsp::IsInitialized() const {

  return true;
}

void LCStarFinishSkillLevelRsp::Swap(LCStarFinishSkillLevelRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(skill_data_, other->skill_data_);
    std::swap(skill_slot_data_, other->skill_slot_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarFinishSkillLevelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarFinishSkillLevelRsp_descriptor_;
  metadata.reflection = LCStarFinishSkillLevelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarYanJiuSkillLevelReq::kIdFieldNumber;
#endif  // !_MSC_VER

CLStarYanJiuSkillLevelReq::CLStarYanJiuSkillLevelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarYanJiuSkillLevelReq::InitAsDefaultInstance() {
}

CLStarYanJiuSkillLevelReq::CLStarYanJiuSkillLevelReq(const CLStarYanJiuSkillLevelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarYanJiuSkillLevelReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarYanJiuSkillLevelReq::~CLStarYanJiuSkillLevelReq() {
  SharedDtor();
}

void CLStarYanJiuSkillLevelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarYanJiuSkillLevelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarYanJiuSkillLevelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarYanJiuSkillLevelReq_descriptor_;
}

const CLStarYanJiuSkillLevelReq& CLStarYanJiuSkillLevelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarYanJiuSkillLevelReq* CLStarYanJiuSkillLevelReq::default_instance_ = NULL;

CLStarYanJiuSkillLevelReq* CLStarYanJiuSkillLevelReq::New() const {
  return new CLStarYanJiuSkillLevelReq;
}

void CLStarYanJiuSkillLevelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarYanJiuSkillLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarYanJiuSkillLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarYanJiuSkillLevelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarYanJiuSkillLevelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarYanJiuSkillLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarYanJiuSkillLevelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarYanJiuSkillLevelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarYanJiuSkillLevelReq::MergeFrom(const CLStarYanJiuSkillLevelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarYanJiuSkillLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarYanJiuSkillLevelReq::CopyFrom(const CLStarYanJiuSkillLevelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarYanJiuSkillLevelReq::IsInitialized() const {

  return true;
}

void CLStarYanJiuSkillLevelReq::Swap(CLStarYanJiuSkillLevelReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarYanJiuSkillLevelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarYanJiuSkillLevelReq_descriptor_;
  metadata.reflection = CLStarYanJiuSkillLevelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarYanJiuSkillLevelRsp::kRetCodeFieldNumber;
const int LCStarYanJiuSkillLevelRsp::kSkillDataFieldNumber;
const int LCStarYanJiuSkillLevelRsp::kSkillSlotDataFieldNumber;
#endif  // !_MSC_VER

LCStarYanJiuSkillLevelRsp::LCStarYanJiuSkillLevelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarYanJiuSkillLevelRsp::InitAsDefaultInstance() {
  skill_data_ = const_cast< ::proto_ff::StarSkillData*>(&::proto_ff::StarSkillData::default_instance());
  skill_slot_data_ = const_cast< ::proto_ff::StarSkillSlotData*>(&::proto_ff::StarSkillSlotData::default_instance());
}

LCStarYanJiuSkillLevelRsp::LCStarYanJiuSkillLevelRsp(const LCStarYanJiuSkillLevelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarYanJiuSkillLevelRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  skill_data_ = NULL;
  skill_slot_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarYanJiuSkillLevelRsp::~LCStarYanJiuSkillLevelRsp() {
  SharedDtor();
}

void LCStarYanJiuSkillLevelRsp::SharedDtor() {
  if (this != default_instance_) {
    delete skill_data_;
    delete skill_slot_data_;
  }
}

void LCStarYanJiuSkillLevelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarYanJiuSkillLevelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarYanJiuSkillLevelRsp_descriptor_;
}

const LCStarYanJiuSkillLevelRsp& LCStarYanJiuSkillLevelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarYanJiuSkillLevelRsp* LCStarYanJiuSkillLevelRsp::default_instance_ = NULL;

LCStarYanJiuSkillLevelRsp* LCStarYanJiuSkillLevelRsp::New() const {
  return new LCStarYanJiuSkillLevelRsp;
}

void LCStarYanJiuSkillLevelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_skill_data()) {
      if (skill_data_ != NULL) skill_data_->::proto_ff::StarSkillData::Clear();
    }
    if (has_skill_slot_data()) {
      if (skill_slot_data_ != NULL) skill_slot_data_->::proto_ff::StarSkillSlotData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarYanJiuSkillLevelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_data;
        break;
      }

      // optional .proto_ff.StarSkillData skill_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_slot_data;
        break;
      }

      // optional .proto_ff.StarSkillSlotData skill_slot_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarYanJiuSkillLevelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarSkillData skill_data = 2;
  if (has_skill_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill_data(), output);
  }

  // optional .proto_ff.StarSkillSlotData skill_slot_data = 3;
  if (has_skill_slot_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_slot_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarYanJiuSkillLevelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarSkillData skill_data = 2;
  if (has_skill_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill_data(), target);
  }

  // optional .proto_ff.StarSkillSlotData skill_slot_data = 3;
  if (has_skill_slot_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_slot_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarYanJiuSkillLevelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarSkillData skill_data = 2;
    if (has_skill_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_data());
    }

    // optional .proto_ff.StarSkillSlotData skill_slot_data = 3;
    if (has_skill_slot_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_slot_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarYanJiuSkillLevelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarYanJiuSkillLevelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarYanJiuSkillLevelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarYanJiuSkillLevelRsp::MergeFrom(const LCStarYanJiuSkillLevelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_skill_data()) {
      mutable_skill_data()->::proto_ff::StarSkillData::MergeFrom(from.skill_data());
    }
    if (from.has_skill_slot_data()) {
      mutable_skill_slot_data()->::proto_ff::StarSkillSlotData::MergeFrom(from.skill_slot_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarYanJiuSkillLevelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarYanJiuSkillLevelRsp::CopyFrom(const LCStarYanJiuSkillLevelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarYanJiuSkillLevelRsp::IsInitialized() const {

  return true;
}

void LCStarYanJiuSkillLevelRsp::Swap(LCStarYanJiuSkillLevelRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(skill_data_, other->skill_data_);
    std::swap(skill_slot_data_, other->skill_slot_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarYanJiuSkillLevelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarYanJiuSkillLevelRsp_descriptor_;
  metadata.reflection = LCStarYanJiuSkillLevelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLStarGetShopInfoReq::CLStarGetShopInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarGetShopInfoReq::InitAsDefaultInstance() {
}

CLStarGetShopInfoReq::CLStarGetShopInfoReq(const CLStarGetShopInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarGetShopInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarGetShopInfoReq::~CLStarGetShopInfoReq() {
  SharedDtor();
}

void CLStarGetShopInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarGetShopInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarGetShopInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarGetShopInfoReq_descriptor_;
}

const CLStarGetShopInfoReq& CLStarGetShopInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarGetShopInfoReq* CLStarGetShopInfoReq::default_instance_ = NULL;

CLStarGetShopInfoReq* CLStarGetShopInfoReq::New() const {
  return new CLStarGetShopInfoReq;
}

void CLStarGetShopInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarGetShopInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CLStarGetShopInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarGetShopInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarGetShopInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarGetShopInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarGetShopInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarGetShopInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarGetShopInfoReq::MergeFrom(const CLStarGetShopInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarGetShopInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarGetShopInfoReq::CopyFrom(const CLStarGetShopInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarGetShopInfoReq::IsInitialized() const {

  return true;
}

void CLStarGetShopInfoReq::Swap(CLStarGetShopInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarGetShopInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarGetShopInfoReq_descriptor_;
  metadata.reflection = CLStarGetShopInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarGetShopInfoRsp::kShopDataFieldNumber;
#endif  // !_MSC_VER

LCStarGetShopInfoRsp::LCStarGetShopInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarGetShopInfoRsp::InitAsDefaultInstance() {
}

LCStarGetShopInfoRsp::LCStarGetShopInfoRsp(const LCStarGetShopInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarGetShopInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarGetShopInfoRsp::~LCStarGetShopInfoRsp() {
  SharedDtor();
}

void LCStarGetShopInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCStarGetShopInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarGetShopInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarGetShopInfoRsp_descriptor_;
}

const LCStarGetShopInfoRsp& LCStarGetShopInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarGetShopInfoRsp* LCStarGetShopInfoRsp::default_instance_ = NULL;

LCStarGetShopInfoRsp* LCStarGetShopInfoRsp::New() const {
  return new LCStarGetShopInfoRsp;
}

void LCStarGetShopInfoRsp::Clear() {
  shop_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarGetShopInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.StarShopData shop_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shop_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarGetShopInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.StarShopData shop_data = 1;
  for (int i = 0; i < this->shop_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shop_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarGetShopInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.StarShopData shop_data = 1;
  for (int i = 0; i < this->shop_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shop_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarGetShopInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.StarShopData shop_data = 1;
  total_size += 1 * this->shop_data_size();
  for (int i = 0; i < this->shop_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarGetShopInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarGetShopInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarGetShopInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarGetShopInfoRsp::MergeFrom(const LCStarGetShopInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_data_.MergeFrom(from.shop_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarGetShopInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarGetShopInfoRsp::CopyFrom(const LCStarGetShopInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarGetShopInfoRsp::IsInitialized() const {

  return true;
}

void LCStarGetShopInfoRsp::Swap(LCStarGetShopInfoRsp* other) {
  if (other != this) {
    shop_data_.Swap(&other->shop_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarGetShopInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarGetShopInfoRsp_descriptor_;
  metadata.reflection = LCStarGetShopInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLStarBuyShopReq::kIdFieldNumber;
const int CLStarBuyShopReq::kNumFieldNumber;
#endif  // !_MSC_VER

CLStarBuyShopReq::CLStarBuyShopReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLStarBuyShopReq::InitAsDefaultInstance() {
}

CLStarBuyShopReq::CLStarBuyShopReq(const CLStarBuyShopReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLStarBuyShopReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLStarBuyShopReq::~CLStarBuyShopReq() {
  SharedDtor();
}

void CLStarBuyShopReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLStarBuyShopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLStarBuyShopReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLStarBuyShopReq_descriptor_;
}

const CLStarBuyShopReq& CLStarBuyShopReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

CLStarBuyShopReq* CLStarBuyShopReq::default_instance_ = NULL;

CLStarBuyShopReq* CLStarBuyShopReq::New() const {
  return new CLStarBuyShopReq;
}

void CLStarBuyShopReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLStarBuyShopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLStarBuyShopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLStarBuyShopReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLStarBuyShopReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLStarBuyShopReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLStarBuyShopReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLStarBuyShopReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLStarBuyShopReq::MergeFrom(const CLStarBuyShopReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLStarBuyShopReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLStarBuyShopReq::CopyFrom(const CLStarBuyShopReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLStarBuyShopReq::IsInitialized() const {

  return true;
}

void CLStarBuyShopReq::Swap(CLStarBuyShopReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLStarBuyShopReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLStarBuyShopReq_descriptor_;
  metadata.reflection = CLStarBuyShopReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCStarBuyShopRsp::kRetCodeFieldNumber;
const int LCStarBuyShopRsp::kShopDataFieldNumber;
#endif  // !_MSC_VER

LCStarBuyShopRsp::LCStarBuyShopRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LCStarBuyShopRsp::InitAsDefaultInstance() {
  shop_data_ = const_cast< ::proto_ff::StarShopData*>(&::proto_ff::StarShopData::default_instance());
}

LCStarBuyShopRsp::LCStarBuyShopRsp(const LCStarBuyShopRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LCStarBuyShopRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  shop_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCStarBuyShopRsp::~LCStarBuyShopRsp() {
  SharedDtor();
}

void LCStarBuyShopRsp::SharedDtor() {
  if (this != default_instance_) {
    delete shop_data_;
  }
}

void LCStarBuyShopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCStarBuyShopRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCStarBuyShopRsp_descriptor_;
}

const LCStarBuyShopRsp& LCStarBuyShopRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Star_2eproto();
  return *default_instance_;
}

LCStarBuyShopRsp* LCStarBuyShopRsp::default_instance_ = NULL;

LCStarBuyShopRsp* LCStarBuyShopRsp::New() const {
  return new LCStarBuyShopRsp;
}

void LCStarBuyShopRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_shop_data()) {
      if (shop_data_ != NULL) shop_data_->::proto_ff::StarShopData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCStarBuyShopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shop_data;
        break;
      }

      // optional .proto_ff.StarShopData shop_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LCStarBuyShopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional .proto_ff.StarShopData shop_data = 2;
  if (has_shop_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shop_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LCStarBuyShopRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional .proto_ff.StarShopData shop_data = 2;
  if (has_shop_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shop_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LCStarBuyShopRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional .proto_ff.StarShopData shop_data = 2;
    if (has_shop_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCStarBuyShopRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCStarBuyShopRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCStarBuyShopRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCStarBuyShopRsp::MergeFrom(const LCStarBuyShopRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_shop_data()) {
      mutable_shop_data()->::proto_ff::StarShopData::MergeFrom(from.shop_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCStarBuyShopRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCStarBuyShopRsp::CopyFrom(const LCStarBuyShopRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCStarBuyShopRsp::IsInitialized() const {

  return true;
}

void LCStarBuyShopRsp::Swap(LCStarBuyShopRsp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(shop_data_, other->shop_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCStarBuyShopRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCStarBuyShopRsp_descriptor_;
  metadata.reflection = LCStarBuyShopRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
