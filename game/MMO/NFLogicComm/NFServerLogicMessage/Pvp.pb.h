// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pvp.proto

#ifndef PROTOBUF_Pvp_2eproto__INCLUDED
#define PROTOBUF_Pvp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Com.pb.h"
#include "ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Pvp_2eproto();
void protobuf_AssignDesc_Pvp_2eproto();
void protobuf_ShutdownFile_Pvp_2eproto();

class WarEmblemProto;
class WarEmblemListProto;
class Pk1v1RankProto;
class Pk1v1RankSimpleProto;
class Pvp_ChgPkModeReq;
class Pvp_ChgPkModeRsp;
class Pvp_StrikeListNotify;
class Pvp_PkModeNotify;
class Pvp_WarEmblemReq;
class Pvp_WarEmblemRsp;
class Pvp_WarEmblemUpdateRsp;
class Pvp_WarEmblemSoulReq;
class Pvp_WarEmblemSoulRsp;
class Pvp_WarEmblemStarReq;
class Pvp_WarEmblemStarRsp;
class Pvp_1v1InfoReq;
class Pvp_1v1InfoRsp;
class Pvp_1v1InfoUpdateRsp;
class Pvp_1v1FetchRewardReq;
class Pvp_1v1FetchRewardRsp;
class Pvp_1v1RankReq;
class Pvp_1v1RankRsp;
class Pvp_1v1RankSimpleRsp;
class Pvp_1v1ResultRsp;
class Pvp_1v1MatchReq;
class Pvp_1v1MatchRsp;
class Pvp_L2S_1v1RankReq;
class Pvp_S2L_1v1RankNotify;
class Pvp_L2S_1v1ScoreChgReq;
class Pvp_L2S_1v1MatchReq;
class Pvp_L2S_1v1RaceInfoReq;
class Pvp_S2L_1v1RaceInfoRsp;

// ===================================================================

class WarEmblemProto : public ::google::protobuf::Message {
 public:
  WarEmblemProto();
  virtual ~WarEmblemProto();

  WarEmblemProto(const WarEmblemProto& from);

  inline WarEmblemProto& operator=(const WarEmblemProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarEmblemProto& default_instance();

  void Swap(WarEmblemProto* other);

  // implements Message ----------------------------------------------

  WarEmblemProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarEmblemProto& from);
  void MergeFrom(const WarEmblemProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.WarEmblemProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static WarEmblemProto* default_instance_;
};
// -------------------------------------------------------------------

class WarEmblemListProto : public ::google::protobuf::Message {
 public:
  WarEmblemListProto();
  virtual ~WarEmblemListProto();

  WarEmblemListProto(const WarEmblemListProto& from);

  inline WarEmblemListProto& operator=(const WarEmblemListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarEmblemListProto& default_instance();

  void Swap(WarEmblemListProto* other);

  // implements Message ----------------------------------------------

  WarEmblemListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarEmblemListProto& from);
  void MergeFrom(const WarEmblemListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.WarEmblemProto lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::proto_ff::WarEmblemProto& lst(int index) const;
  inline ::proto_ff::WarEmblemProto* mutable_lst(int index);
  inline ::proto_ff::WarEmblemProto* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarEmblemProto >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarEmblemProto >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.WarEmblemListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::WarEmblemProto > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static WarEmblemListProto* default_instance_;
};
// -------------------------------------------------------------------

class Pk1v1RankProto : public ::google::protobuf::Message {
 public:
  Pk1v1RankProto();
  virtual ~Pk1v1RankProto();

  Pk1v1RankProto(const Pk1v1RankProto& from);

  inline Pk1v1RankProto& operator=(const Pk1v1RankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pk1v1RankProto& default_instance();

  void Swap(Pk1v1RankProto* other);

  // implements Message ----------------------------------------------

  Pk1v1RankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pk1v1RankProto& from);
  void MergeFrom(const Pk1v1RankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional uint64 fight = 5;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 5;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional uint32 zid = 6;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 6;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional int32 score = 7;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pk1v1RankProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 prof_;
  ::std::string* name_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pk1v1RankProto* default_instance_;
};
// -------------------------------------------------------------------

class Pk1v1RankSimpleProto : public ::google::protobuf::Message {
 public:
  Pk1v1RankSimpleProto();
  virtual ~Pk1v1RankSimpleProto();

  Pk1v1RankSimpleProto(const Pk1v1RankSimpleProto& from);

  inline Pk1v1RankSimpleProto& operator=(const Pk1v1RankSimpleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pk1v1RankSimpleProto& default_instance();

  void Swap(Pk1v1RankSimpleProto* other);

  // implements Message ----------------------------------------------

  Pk1v1RankSimpleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pk1v1RankSimpleProto& from);
  void MergeFrom(const Pk1v1RankSimpleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional uint64 cid = 5;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 5;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pk1v1RankSimpleProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pk1v1RankSimpleProto* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_ChgPkModeReq : public ::google::protobuf::Message {
 public:
  Pvp_ChgPkModeReq();
  virtual ~Pvp_ChgPkModeReq();

  Pvp_ChgPkModeReq(const Pvp_ChgPkModeReq& from);

  inline Pvp_ChgPkModeReq& operator=(const Pvp_ChgPkModeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_ChgPkModeReq& default_instance();

  void Swap(Pvp_ChgPkModeReq* other);

  // implements Message ----------------------------------------------

  Pvp_ChgPkModeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_ChgPkModeReq& from);
  void MergeFrom(const Pvp_ChgPkModeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pkmode = 1;
  inline bool has_pkmode() const;
  inline void clear_pkmode();
  static const int kPkmodeFieldNumber = 1;
  inline ::google::protobuf::int32 pkmode() const;
  inline void set_pkmode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_ChgPkModeReq)
 private:
  inline void set_has_pkmode();
  inline void clear_has_pkmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pkmode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_ChgPkModeReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_ChgPkModeRsp : public ::google::protobuf::Message {
 public:
  Pvp_ChgPkModeRsp();
  virtual ~Pvp_ChgPkModeRsp();

  Pvp_ChgPkModeRsp(const Pvp_ChgPkModeRsp& from);

  inline Pvp_ChgPkModeRsp& operator=(const Pvp_ChgPkModeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_ChgPkModeRsp& default_instance();

  void Swap(Pvp_ChgPkModeRsp* other);

  // implements Message ----------------------------------------------

  Pvp_ChgPkModeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_ChgPkModeRsp& from);
  void MergeFrom(const Pvp_ChgPkModeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_ChgPkModeRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_ChgPkModeRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_StrikeListNotify : public ::google::protobuf::Message {
 public:
  Pvp_StrikeListNotify();
  virtual ~Pvp_StrikeListNotify();

  Pvp_StrikeListNotify(const Pvp_StrikeListNotify& from);

  inline Pvp_StrikeListNotify& operator=(const Pvp_StrikeListNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_StrikeListNotify& default_instance();

  void Swap(Pvp_StrikeListNotify* other);

  // implements Message ----------------------------------------------

  Pvp_StrikeListNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_StrikeListNotify& from);
  void MergeFrom(const Pvp_StrikeListNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 strike_lst = 1;
  inline int strike_lst_size() const;
  inline void clear_strike_lst();
  static const int kStrikeLstFieldNumber = 1;
  inline ::google::protobuf::uint64 strike_lst(int index) const;
  inline void set_strike_lst(int index, ::google::protobuf::uint64 value);
  inline void add_strike_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      strike_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_strike_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_StrikeListNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > strike_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_StrikeListNotify* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_PkModeNotify : public ::google::protobuf::Message {
 public:
  Pvp_PkModeNotify();
  virtual ~Pvp_PkModeNotify();

  Pvp_PkModeNotify(const Pvp_PkModeNotify& from);

  inline Pvp_PkModeNotify& operator=(const Pvp_PkModeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_PkModeNotify& default_instance();

  void Swap(Pvp_PkModeNotify* other);

  // implements Message ----------------------------------------------

  Pvp_PkModeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_PkModeNotify& from);
  void MergeFrom(const Pvp_PkModeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pkmode = 1;
  inline bool has_pkmode() const;
  inline void clear_pkmode();
  static const int kPkmodeFieldNumber = 1;
  inline ::google::protobuf::int32 pkmode() const;
  inline void set_pkmode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_PkModeNotify)
 private:
  inline void set_has_pkmode();
  inline void clear_has_pkmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pkmode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_PkModeNotify* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_WarEmblemReq : public ::google::protobuf::Message {
 public:
  Pvp_WarEmblemReq();
  virtual ~Pvp_WarEmblemReq();

  Pvp_WarEmblemReq(const Pvp_WarEmblemReq& from);

  inline Pvp_WarEmblemReq& operator=(const Pvp_WarEmblemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_WarEmblemReq& default_instance();

  void Swap(Pvp_WarEmblemReq* other);

  // implements Message ----------------------------------------------

  Pvp_WarEmblemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_WarEmblemReq& from);
  void MergeFrom(const Pvp_WarEmblemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_WarEmblemReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_WarEmblemReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_WarEmblemRsp : public ::google::protobuf::Message {
 public:
  Pvp_WarEmblemRsp();
  virtual ~Pvp_WarEmblemRsp();

  Pvp_WarEmblemRsp(const Pvp_WarEmblemRsp& from);

  inline Pvp_WarEmblemRsp& operator=(const Pvp_WarEmblemRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_WarEmblemRsp& default_instance();

  void Swap(Pvp_WarEmblemRsp* other);

  // implements Message ----------------------------------------------

  Pvp_WarEmblemRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_WarEmblemRsp& from);
  void MergeFrom(const Pvp_WarEmblemRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .proto_ff.WarEmblemListProto info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::WarEmblemListProto& info() const;
  inline ::proto_ff::WarEmblemListProto* mutable_info();
  inline ::proto_ff::WarEmblemListProto* release_info();
  inline void set_allocated_info(::proto_ff::WarEmblemListProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_WarEmblemRsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::WarEmblemListProto* info_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_WarEmblemRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_WarEmblemUpdateRsp : public ::google::protobuf::Message {
 public:
  Pvp_WarEmblemUpdateRsp();
  virtual ~Pvp_WarEmblemUpdateRsp();

  Pvp_WarEmblemUpdateRsp(const Pvp_WarEmblemUpdateRsp& from);

  inline Pvp_WarEmblemUpdateRsp& operator=(const Pvp_WarEmblemUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_WarEmblemUpdateRsp& default_instance();

  void Swap(Pvp_WarEmblemUpdateRsp* other);

  // implements Message ----------------------------------------------

  Pvp_WarEmblemUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_WarEmblemUpdateRsp& from);
  void MergeFrom(const Pvp_WarEmblemUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.WarEmblemListProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::WarEmblemListProto& info() const;
  inline ::proto_ff::WarEmblemListProto* mutable_info();
  inline ::proto_ff::WarEmblemListProto* release_info();
  inline void set_allocated_info(::proto_ff::WarEmblemListProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_WarEmblemUpdateRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::WarEmblemListProto* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_WarEmblemUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_WarEmblemSoulReq : public ::google::protobuf::Message {
 public:
  Pvp_WarEmblemSoulReq();
  virtual ~Pvp_WarEmblemSoulReq();

  Pvp_WarEmblemSoulReq(const Pvp_WarEmblemSoulReq& from);

  inline Pvp_WarEmblemSoulReq& operator=(const Pvp_WarEmblemSoulReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_WarEmblemSoulReq& default_instance();

  void Swap(Pvp_WarEmblemSoulReq* other);

  // implements Message ----------------------------------------------

  Pvp_WarEmblemSoulReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_WarEmblemSoulReq& from);
  void MergeFrom(const Pvp_WarEmblemSoulReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_WarEmblemSoulReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_WarEmblemSoulReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_WarEmblemSoulRsp : public ::google::protobuf::Message {
 public:
  Pvp_WarEmblemSoulRsp();
  virtual ~Pvp_WarEmblemSoulRsp();

  Pvp_WarEmblemSoulRsp(const Pvp_WarEmblemSoulRsp& from);

  inline Pvp_WarEmblemSoulRsp& operator=(const Pvp_WarEmblemSoulRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_WarEmblemSoulRsp& default_instance();

  void Swap(Pvp_WarEmblemSoulRsp* other);

  // implements Message ----------------------------------------------

  Pvp_WarEmblemSoulRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_WarEmblemSoulRsp& from);
  void MergeFrom(const Pvp_WarEmblemSoulRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_WarEmblemSoulRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_WarEmblemSoulRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_WarEmblemStarReq : public ::google::protobuf::Message {
 public:
  Pvp_WarEmblemStarReq();
  virtual ~Pvp_WarEmblemStarReq();

  Pvp_WarEmblemStarReq(const Pvp_WarEmblemStarReq& from);

  inline Pvp_WarEmblemStarReq& operator=(const Pvp_WarEmblemStarReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_WarEmblemStarReq& default_instance();

  void Swap(Pvp_WarEmblemStarReq* other);

  // implements Message ----------------------------------------------

  Pvp_WarEmblemStarReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_WarEmblemStarReq& from);
  void MergeFrom(const Pvp_WarEmblemStarReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_WarEmblemStarReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_WarEmblemStarReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_WarEmblemStarRsp : public ::google::protobuf::Message {
 public:
  Pvp_WarEmblemStarRsp();
  virtual ~Pvp_WarEmblemStarRsp();

  Pvp_WarEmblemStarRsp(const Pvp_WarEmblemStarRsp& from);

  inline Pvp_WarEmblemStarRsp& operator=(const Pvp_WarEmblemStarRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_WarEmblemStarRsp& default_instance();

  void Swap(Pvp_WarEmblemStarRsp* other);

  // implements Message ----------------------------------------------

  Pvp_WarEmblemStarRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_WarEmblemStarRsp& from);
  void MergeFrom(const Pvp_WarEmblemStarRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_WarEmblemStarRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_WarEmblemStarRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1InfoReq : public ::google::protobuf::Message {
 public:
  Pvp_1v1InfoReq();
  virtual ~Pvp_1v1InfoReq();

  Pvp_1v1InfoReq(const Pvp_1v1InfoReq& from);

  inline Pvp_1v1InfoReq& operator=(const Pvp_1v1InfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1InfoReq& default_instance();

  void Swap(Pvp_1v1InfoReq* other);

  // implements Message ----------------------------------------------

  Pvp_1v1InfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1InfoReq& from);
  void MergeFrom(const Pvp_1v1InfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1InfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1InfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1InfoRsp : public ::google::protobuf::Message {
 public:
  Pvp_1v1InfoRsp();
  virtual ~Pvp_1v1InfoRsp();

  Pvp_1v1InfoRsp(const Pvp_1v1InfoRsp& from);

  inline Pvp_1v1InfoRsp& operator=(const Pvp_1v1InfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1InfoRsp& default_instance();

  void Swap(Pvp_1v1InfoRsp* other);

  // implements Message ----------------------------------------------

  Pvp_1v1InfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1InfoRsp& from);
  void MergeFrom(const Pvp_1v1InfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 match_num = 2;
  inline bool has_match_num() const;
  inline void clear_match_num();
  static const int kMatchNumFieldNumber = 2;
  inline ::google::protobuf::int32 match_num() const;
  inline void set_match_num(::google::protobuf::int32 value);

  // optional int32 win_num = 3;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 3;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional int32 conti_num = 4;
  inline bool has_conti_num() const;
  inline void clear_conti_num();
  static const int kContiNumFieldNumber = 4;
  inline ::google::protobuf::int32 conti_num() const;
  inline void set_conti_num(::google::protobuf::int32 value);

  // optional int32 reward_num = 5;
  inline bool has_reward_num() const;
  inline void clear_reward_num();
  static const int kRewardNumFieldNumber = 5;
  inline ::google::protobuf::int32 reward_num() const;
  inline void set_reward_num(::google::protobuf::int32 value);

  // repeated int32 already_fetch = 6;
  inline int already_fetch_size() const;
  inline void clear_already_fetch();
  static const int kAlreadyFetchFieldNumber = 6;
  inline ::google::protobuf::int32 already_fetch(int index) const;
  inline void set_already_fetch(int index, ::google::protobuf::int32 value);
  inline void add_already_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      already_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_already_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1InfoRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_match_num();
  inline void clear_has_match_num();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_conti_num();
  inline void clear_has_conti_num();
  inline void set_has_reward_num();
  inline void clear_has_reward_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 match_num_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::int32 conti_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > already_fetch_;
  ::google::protobuf::int32 reward_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1InfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1InfoUpdateRsp : public ::google::protobuf::Message {
 public:
  Pvp_1v1InfoUpdateRsp();
  virtual ~Pvp_1v1InfoUpdateRsp();

  Pvp_1v1InfoUpdateRsp(const Pvp_1v1InfoUpdateRsp& from);

  inline Pvp_1v1InfoUpdateRsp& operator=(const Pvp_1v1InfoUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1InfoUpdateRsp& default_instance();

  void Swap(Pvp_1v1InfoUpdateRsp* other);

  // implements Message ----------------------------------------------

  Pvp_1v1InfoUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1InfoUpdateRsp& from);
  void MergeFrom(const Pvp_1v1InfoUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 match_num = 2;
  inline bool has_match_num() const;
  inline void clear_match_num();
  static const int kMatchNumFieldNumber = 2;
  inline ::google::protobuf::int32 match_num() const;
  inline void set_match_num(::google::protobuf::int32 value);

  // optional int32 win_num = 3;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 3;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional int32 conti_num = 4;
  inline bool has_conti_num() const;
  inline void clear_conti_num();
  static const int kContiNumFieldNumber = 4;
  inline ::google::protobuf::int32 conti_num() const;
  inline void set_conti_num(::google::protobuf::int32 value);

  // optional int32 reward_num = 5;
  inline bool has_reward_num() const;
  inline void clear_reward_num();
  static const int kRewardNumFieldNumber = 5;
  inline ::google::protobuf::int32 reward_num() const;
  inline void set_reward_num(::google::protobuf::int32 value);

  // repeated int32 already_fetch = 6;
  inline int already_fetch_size() const;
  inline void clear_already_fetch();
  static const int kAlreadyFetchFieldNumber = 6;
  inline ::google::protobuf::int32 already_fetch(int index) const;
  inline void set_already_fetch(int index, ::google::protobuf::int32 value);
  inline void add_already_fetch(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      already_fetch() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_already_fetch();

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1InfoUpdateRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_match_num();
  inline void clear_has_match_num();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_conti_num();
  inline void clear_has_conti_num();
  inline void set_has_reward_num();
  inline void clear_has_reward_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 match_num_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::int32 conti_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > already_fetch_;
  ::google::protobuf::int32 reward_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1InfoUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1FetchRewardReq : public ::google::protobuf::Message {
 public:
  Pvp_1v1FetchRewardReq();
  virtual ~Pvp_1v1FetchRewardReq();

  Pvp_1v1FetchRewardReq(const Pvp_1v1FetchRewardReq& from);

  inline Pvp_1v1FetchRewardReq& operator=(const Pvp_1v1FetchRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1FetchRewardReq& default_instance();

  void Swap(Pvp_1v1FetchRewardReq* other);

  // implements Message ----------------------------------------------

  Pvp_1v1FetchRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1FetchRewardReq& from);
  void MergeFrom(const Pvp_1v1FetchRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1FetchRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1FetchRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1FetchRewardRsp : public ::google::protobuf::Message {
 public:
  Pvp_1v1FetchRewardRsp();
  virtual ~Pvp_1v1FetchRewardRsp();

  Pvp_1v1FetchRewardRsp(const Pvp_1v1FetchRewardRsp& from);

  inline Pvp_1v1FetchRewardRsp& operator=(const Pvp_1v1FetchRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1FetchRewardRsp& default_instance();

  void Swap(Pvp_1v1FetchRewardRsp* other);

  // implements Message ----------------------------------------------

  Pvp_1v1FetchRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1FetchRewardRsp& from);
  void MergeFrom(const Pvp_1v1FetchRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1FetchRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1FetchRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1RankReq : public ::google::protobuf::Message {
 public:
  Pvp_1v1RankReq();
  virtual ~Pvp_1v1RankReq();

  Pvp_1v1RankReq(const Pvp_1v1RankReq& from);

  inline Pvp_1v1RankReq& operator=(const Pvp_1v1RankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1RankReq& default_instance();

  void Swap(Pvp_1v1RankReq* other);

  // implements Message ----------------------------------------------

  Pvp_1v1RankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1RankReq& from);
  void MergeFrom(const Pvp_1v1RankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1RankReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1RankReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1RankRsp : public ::google::protobuf::Message {
 public:
  Pvp_1v1RankRsp();
  virtual ~Pvp_1v1RankRsp();

  Pvp_1v1RankRsp(const Pvp_1v1RankRsp& from);

  inline Pvp_1v1RankRsp& operator=(const Pvp_1v1RankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1RankRsp& default_instance();

  void Swap(Pvp_1v1RankRsp* other);

  // implements Message ----------------------------------------------

  Pvp_1v1RankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1RankRsp& from);
  void MergeFrom(const Pvp_1v1RankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Pk1v1RankProto rank = 1;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::Pk1v1RankProto& rank(int index) const;
  inline ::proto_ff::Pk1v1RankProto* mutable_rank(int index);
  inline ::proto_ff::Pk1v1RankProto* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankProto >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankProto >*
      mutable_rank();

  // optional int32 myrank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyrankFieldNumber = 2;
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1RankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankProto > rank_;
  ::google::protobuf::int32 myrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1RankRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1RankSimpleRsp : public ::google::protobuf::Message {
 public:
  Pvp_1v1RankSimpleRsp();
  virtual ~Pvp_1v1RankSimpleRsp();

  Pvp_1v1RankSimpleRsp(const Pvp_1v1RankSimpleRsp& from);

  inline Pvp_1v1RankSimpleRsp& operator=(const Pvp_1v1RankSimpleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1RankSimpleRsp& default_instance();

  void Swap(Pvp_1v1RankSimpleRsp* other);

  // implements Message ----------------------------------------------

  Pvp_1v1RankSimpleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1RankSimpleRsp& from);
  void MergeFrom(const Pvp_1v1RankSimpleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Pk1v1RankSimpleProto rank_simple = 1;
  inline int rank_simple_size() const;
  inline void clear_rank_simple();
  static const int kRankSimpleFieldNumber = 1;
  inline const ::proto_ff::Pk1v1RankSimpleProto& rank_simple(int index) const;
  inline ::proto_ff::Pk1v1RankSimpleProto* mutable_rank_simple(int index);
  inline ::proto_ff::Pk1v1RankSimpleProto* add_rank_simple();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankSimpleProto >&
      rank_simple() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankSimpleProto >*
      mutable_rank_simple();

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 myrank = 3;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyrankFieldNumber = 3;
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1RankSimpleRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankSimpleProto > rank_simple_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 myrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1RankSimpleRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1ResultRsp : public ::google::protobuf::Message {
 public:
  Pvp_1v1ResultRsp();
  virtual ~Pvp_1v1ResultRsp();

  Pvp_1v1ResultRsp(const Pvp_1v1ResultRsp& from);

  inline Pvp_1v1ResultRsp& operator=(const Pvp_1v1ResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1ResultRsp& default_instance();

  void Swap(Pvp_1v1ResultRsp* other);

  // implements Message ----------------------------------------------

  Pvp_1v1ResultRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1ResultRsp& from);
  void MergeFrom(const Pvp_1v1ResultRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 old_score = 2;
  inline bool has_old_score() const;
  inline void clear_old_score();
  static const int kOldScoreFieldNumber = 2;
  inline ::google::protobuf::int32 old_score() const;
  inline void set_old_score(::google::protobuf::int32 value);

  // optional int32 new_score = 3;
  inline bool has_new_score() const;
  inline void clear_new_score();
  static const int kNewScoreFieldNumber = 3;
  inline ::google::protobuf::int32 new_score() const;
  inline void set_new_score(::google::protobuf::int32 value);

  // repeated .proto_ff.ComItem reward = 4;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::proto_ff::ComItem& reward(int index) const;
  inline ::proto_ff::ComItem* mutable_reward(int index);
  inline ::proto_ff::ComItem* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1ResultRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_old_score();
  inline void clear_has_old_score();
  inline void set_has_new_score();
  inline void clear_has_new_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 old_score_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem > reward_;
  ::google::protobuf::int32 new_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1ResultRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1MatchReq : public ::google::protobuf::Message {
 public:
  Pvp_1v1MatchReq();
  virtual ~Pvp_1v1MatchReq();

  Pvp_1v1MatchReq(const Pvp_1v1MatchReq& from);

  inline Pvp_1v1MatchReq& operator=(const Pvp_1v1MatchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1MatchReq& default_instance();

  void Swap(Pvp_1v1MatchReq* other);

  // implements Message ----------------------------------------------

  Pvp_1v1MatchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1MatchReq& from);
  void MergeFrom(const Pvp_1v1MatchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cancel = 1;
  inline bool has_cancel() const;
  inline void clear_cancel();
  static const int kCancelFieldNumber = 1;
  inline ::google::protobuf::int32 cancel() const;
  inline void set_cancel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1MatchReq)
 private:
  inline void set_has_cancel();
  inline void clear_has_cancel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cancel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1MatchReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_1v1MatchRsp : public ::google::protobuf::Message {
 public:
  Pvp_1v1MatchRsp();
  virtual ~Pvp_1v1MatchRsp();

  Pvp_1v1MatchRsp(const Pvp_1v1MatchRsp& from);

  inline Pvp_1v1MatchRsp& operator=(const Pvp_1v1MatchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_1v1MatchRsp& default_instance();

  void Swap(Pvp_1v1MatchRsp* other);

  // implements Message ----------------------------------------------

  Pvp_1v1MatchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_1v1MatchRsp& from);
  void MergeFrom(const Pvp_1v1MatchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 cancel = 2;
  inline bool has_cancel() const;
  inline void clear_cancel();
  static const int kCancelFieldNumber = 2;
  inline ::google::protobuf::int32 cancel() const;
  inline void set_cancel(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 prof = 5;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 5;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 fight = 7;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 7;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional int32 begintime = 8;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBegintimeFieldNumber = 8;
  inline ::google::protobuf::int32 begintime() const;
  inline void set_begintime(::google::protobuf::int32 value);

  // optional .proto_ff.RoleHeadPicProto head = 9;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 9;
  inline const ::proto_ff::RoleHeadPicProto& head() const;
  inline ::proto_ff::RoleHeadPicProto* mutable_head();
  inline ::proto_ff::RoleHeadPicProto* release_head();
  inline void set_allocated_head(::proto_ff::RoleHeadPicProto* head);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_1v1MatchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cancel();
  inline void clear_has_cancel();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 cancel_;
  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 fight_;
  ::proto_ff::RoleHeadPicProto* head_;
  ::google::protobuf::int32 begintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_1v1MatchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_L2S_1v1RankReq : public ::google::protobuf::Message {
 public:
  Pvp_L2S_1v1RankReq();
  virtual ~Pvp_L2S_1v1RankReq();

  Pvp_L2S_1v1RankReq(const Pvp_L2S_1v1RankReq& from);

  inline Pvp_L2S_1v1RankReq& operator=(const Pvp_L2S_1v1RankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_L2S_1v1RankReq& default_instance();

  void Swap(Pvp_L2S_1v1RankReq* other);

  // implements Message ----------------------------------------------

  Pvp_L2S_1v1RankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_L2S_1v1RankReq& from);
  void MergeFrom(const Pvp_L2S_1v1RankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 cid = 1;
  inline int cid_size() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid(int index) const;
  inline void set_cid(int index, ::google::protobuf::uint64 value);
  inline void add_cid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid();

  // repeated int32 score = 2;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_L2S_1v1RankReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_L2S_1v1RankReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_S2L_1v1RankNotify : public ::google::protobuf::Message {
 public:
  Pvp_S2L_1v1RankNotify();
  virtual ~Pvp_S2L_1v1RankNotify();

  Pvp_S2L_1v1RankNotify(const Pvp_S2L_1v1RankNotify& from);

  inline Pvp_S2L_1v1RankNotify& operator=(const Pvp_S2L_1v1RankNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_S2L_1v1RankNotify& default_instance();

  void Swap(Pvp_S2L_1v1RankNotify* other);

  // implements Message ----------------------------------------------

  Pvp_S2L_1v1RankNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_S2L_1v1RankNotify& from);
  void MergeFrom(const Pvp_S2L_1v1RankNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_S2L_1v1RankNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_S2L_1v1RankNotify* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_L2S_1v1ScoreChgReq : public ::google::protobuf::Message {
 public:
  Pvp_L2S_1v1ScoreChgReq();
  virtual ~Pvp_L2S_1v1ScoreChgReq();

  Pvp_L2S_1v1ScoreChgReq(const Pvp_L2S_1v1ScoreChgReq& from);

  inline Pvp_L2S_1v1ScoreChgReq& operator=(const Pvp_L2S_1v1ScoreChgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_L2S_1v1ScoreChgReq& default_instance();

  void Swap(Pvp_L2S_1v1ScoreChgReq* other);

  // implements Message ----------------------------------------------

  Pvp_L2S_1v1ScoreChgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_L2S_1v1ScoreChgReq& from);
  void MergeFrom(const Pvp_L2S_1v1ScoreChgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // required int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 match_num = 4;
  inline bool has_match_num() const;
  inline void clear_match_num();
  static const int kMatchNumFieldNumber = 4;
  inline ::google::protobuf::int32 match_num() const;
  inline void set_match_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_L2S_1v1ScoreChgReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_match_num();
  inline void clear_has_match_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 match_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_L2S_1v1ScoreChgReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_L2S_1v1MatchReq : public ::google::protobuf::Message {
 public:
  Pvp_L2S_1v1MatchReq();
  virtual ~Pvp_L2S_1v1MatchReq();

  Pvp_L2S_1v1MatchReq(const Pvp_L2S_1v1MatchReq& from);

  inline Pvp_L2S_1v1MatchReq& operator=(const Pvp_L2S_1v1MatchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_L2S_1v1MatchReq& default_instance();

  void Swap(Pvp_L2S_1v1MatchReq* other);

  // implements Message ----------------------------------------------

  Pvp_L2S_1v1MatchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_L2S_1v1MatchReq& from);
  void MergeFrom(const Pvp_L2S_1v1MatchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // required int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 cancel = 4;
  inline bool has_cancel() const;
  inline void clear_cancel();
  static const int kCancelFieldNumber = 4;
  inline ::google::protobuf::int32 cancel() const;
  inline void set_cancel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_L2S_1v1MatchReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_cancel();
  inline void clear_has_cancel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 cancel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_L2S_1v1MatchReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_L2S_1v1RaceInfoReq : public ::google::protobuf::Message {
 public:
  Pvp_L2S_1v1RaceInfoReq();
  virtual ~Pvp_L2S_1v1RaceInfoReq();

  Pvp_L2S_1v1RaceInfoReq(const Pvp_L2S_1v1RaceInfoReq& from);

  inline Pvp_L2S_1v1RaceInfoReq& operator=(const Pvp_L2S_1v1RaceInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_L2S_1v1RaceInfoReq& default_instance();

  void Swap(Pvp_L2S_1v1RaceInfoReq* other);

  // implements Message ----------------------------------------------

  Pvp_L2S_1v1RaceInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_L2S_1v1RaceInfoReq& from);
  void MergeFrom(const Pvp_L2S_1v1RaceInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zid = 1;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 1;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // required uint32 logicid = 2;
  inline bool has_logicid() const;
  inline void clear_logicid();
  static const int kLogicidFieldNumber = 2;
  inline ::google::protobuf::uint32 logicid() const;
  inline void set_logicid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_L2S_1v1RaceInfoReq)
 private:
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_logicid();
  inline void clear_has_logicid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 logicid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_L2S_1v1RaceInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Pvp_S2L_1v1RaceInfoRsp : public ::google::protobuf::Message {
 public:
  Pvp_S2L_1v1RaceInfoRsp();
  virtual ~Pvp_S2L_1v1RaceInfoRsp();

  Pvp_S2L_1v1RaceInfoRsp(const Pvp_S2L_1v1RaceInfoRsp& from);

  inline Pvp_S2L_1v1RaceInfoRsp& operator=(const Pvp_S2L_1v1RaceInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pvp_S2L_1v1RaceInfoRsp& default_instance();

  void Swap(Pvp_S2L_1v1RaceInfoRsp* other);

  // implements Message ----------------------------------------------

  Pvp_S2L_1v1RaceInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pvp_S2L_1v1RaceInfoRsp& from);
  void MergeFrom(const Pvp_S2L_1v1RaceInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Pvp_S2L_1v1RaceInfoRsp)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp_2eproto();
  friend void protobuf_AssignDesc_Pvp_2eproto();
  friend void protobuf_ShutdownFile_Pvp_2eproto();

  void InitAsDefaultInstance();
  static Pvp_S2L_1v1RaceInfoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// WarEmblemProto

// optional int32 id = 1;
inline bool WarEmblemProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarEmblemProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarEmblemProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarEmblemProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 WarEmblemProto::id() const {
  return id_;
}
inline void WarEmblemProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 lv = 2;
inline bool WarEmblemProto::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarEmblemProto::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarEmblemProto::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarEmblemProto::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 WarEmblemProto::lv() const {
  return lv_;
}
inline void WarEmblemProto::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 star = 3;
inline bool WarEmblemProto::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarEmblemProto::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarEmblemProto::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarEmblemProto::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 WarEmblemProto::star() const {
  return star_;
}
inline void WarEmblemProto::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// WarEmblemListProto

// repeated .proto_ff.WarEmblemProto lst = 1;
inline int WarEmblemListProto::lst_size() const {
  return lst_.size();
}
inline void WarEmblemListProto::clear_lst() {
  lst_.Clear();
}
inline const ::proto_ff::WarEmblemProto& WarEmblemListProto::lst(int index) const {
  return lst_.Get(index);
}
inline ::proto_ff::WarEmblemProto* WarEmblemListProto::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::proto_ff::WarEmblemProto* WarEmblemListProto::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarEmblemProto >&
WarEmblemListProto::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarEmblemProto >*
WarEmblemListProto::mutable_lst() {
  return &lst_;
}

// -------------------------------------------------------------------

// Pk1v1RankProto

// optional int32 rank = 1;
inline bool Pk1v1RankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pk1v1RankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pk1v1RankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pk1v1RankProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Pk1v1RankProto::rank() const {
  return rank_;
}
inline void Pk1v1RankProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 cid = 2;
inline bool Pk1v1RankProto::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pk1v1RankProto::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pk1v1RankProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pk1v1RankProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Pk1v1RankProto::cid() const {
  return cid_;
}
inline void Pk1v1RankProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 3;
inline bool Pk1v1RankProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pk1v1RankProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pk1v1RankProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pk1v1RankProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Pk1v1RankProto::name() const {
  return *name_;
}
inline void Pk1v1RankProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Pk1v1RankProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Pk1v1RankProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pk1v1RankProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Pk1v1RankProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pk1v1RankProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prof = 4;
inline bool Pk1v1RankProto::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pk1v1RankProto::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pk1v1RankProto::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pk1v1RankProto::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 Pk1v1RankProto::prof() const {
  return prof_;
}
inline void Pk1v1RankProto::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional uint64 fight = 5;
inline bool Pk1v1RankProto::has_fight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pk1v1RankProto::set_has_fight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pk1v1RankProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pk1v1RankProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 Pk1v1RankProto::fight() const {
  return fight_;
}
inline void Pk1v1RankProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional uint32 zid = 6;
inline bool Pk1v1RankProto::has_zid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pk1v1RankProto::set_has_zid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pk1v1RankProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pk1v1RankProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 Pk1v1RankProto::zid() const {
  return zid_;
}
inline void Pk1v1RankProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 score = 7;
inline bool Pk1v1RankProto::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pk1v1RankProto::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pk1v1RankProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pk1v1RankProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Pk1v1RankProto::score() const {
  return score_;
}
inline void Pk1v1RankProto::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// Pk1v1RankSimpleProto

// optional int32 rank = 1;
inline bool Pk1v1RankSimpleProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pk1v1RankSimpleProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pk1v1RankSimpleProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pk1v1RankSimpleProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Pk1v1RankSimpleProto::rank() const {
  return rank_;
}
inline void Pk1v1RankSimpleProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional bytes name = 2;
inline bool Pk1v1RankSimpleProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pk1v1RankSimpleProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pk1v1RankSimpleProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pk1v1RankSimpleProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Pk1v1RankSimpleProto::name() const {
  return *name_;
}
inline void Pk1v1RankSimpleProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Pk1v1RankSimpleProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Pk1v1RankSimpleProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pk1v1RankSimpleProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Pk1v1RankSimpleProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pk1v1RankSimpleProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 3;
inline bool Pk1v1RankSimpleProto::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pk1v1RankSimpleProto::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pk1v1RankSimpleProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pk1v1RankSimpleProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 Pk1v1RankSimpleProto::zid() const {
  return zid_;
}
inline void Pk1v1RankSimpleProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 score = 4;
inline bool Pk1v1RankSimpleProto::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pk1v1RankSimpleProto::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pk1v1RankSimpleProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pk1v1RankSimpleProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Pk1v1RankSimpleProto::score() const {
  return score_;
}
inline void Pk1v1RankSimpleProto::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional uint64 cid = 5;
inline bool Pk1v1RankSimpleProto::has_cid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pk1v1RankSimpleProto::set_has_cid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pk1v1RankSimpleProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pk1v1RankSimpleProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Pk1v1RankSimpleProto::cid() const {
  return cid_;
}
inline void Pk1v1RankSimpleProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Pvp_ChgPkModeReq

// optional int32 pkmode = 1;
inline bool Pvp_ChgPkModeReq::has_pkmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_ChgPkModeReq::set_has_pkmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_ChgPkModeReq::clear_has_pkmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_ChgPkModeReq::clear_pkmode() {
  pkmode_ = 0;
  clear_has_pkmode();
}
inline ::google::protobuf::int32 Pvp_ChgPkModeReq::pkmode() const {
  return pkmode_;
}
inline void Pvp_ChgPkModeReq::set_pkmode(::google::protobuf::int32 value) {
  set_has_pkmode();
  pkmode_ = value;
}

// -------------------------------------------------------------------

// Pvp_ChgPkModeRsp

// required int32 ret = 1;
inline bool Pvp_ChgPkModeRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_ChgPkModeRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_ChgPkModeRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_ChgPkModeRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Pvp_ChgPkModeRsp::ret() const {
  return ret_;
}
inline void Pvp_ChgPkModeRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Pvp_StrikeListNotify

// repeated uint64 strike_lst = 1;
inline int Pvp_StrikeListNotify::strike_lst_size() const {
  return strike_lst_.size();
}
inline void Pvp_StrikeListNotify::clear_strike_lst() {
  strike_lst_.Clear();
}
inline ::google::protobuf::uint64 Pvp_StrikeListNotify::strike_lst(int index) const {
  return strike_lst_.Get(index);
}
inline void Pvp_StrikeListNotify::set_strike_lst(int index, ::google::protobuf::uint64 value) {
  strike_lst_.Set(index, value);
}
inline void Pvp_StrikeListNotify::add_strike_lst(::google::protobuf::uint64 value) {
  strike_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Pvp_StrikeListNotify::strike_lst() const {
  return strike_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Pvp_StrikeListNotify::mutable_strike_lst() {
  return &strike_lst_;
}

// -------------------------------------------------------------------

// Pvp_PkModeNotify

// optional int32 pkmode = 1;
inline bool Pvp_PkModeNotify::has_pkmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_PkModeNotify::set_has_pkmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_PkModeNotify::clear_has_pkmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_PkModeNotify::clear_pkmode() {
  pkmode_ = 0;
  clear_has_pkmode();
}
inline ::google::protobuf::int32 Pvp_PkModeNotify::pkmode() const {
  return pkmode_;
}
inline void Pvp_PkModeNotify::set_pkmode(::google::protobuf::int32 value) {
  set_has_pkmode();
  pkmode_ = value;
}

// -------------------------------------------------------------------

// Pvp_WarEmblemReq

// optional int32 type = 1;
inline bool Pvp_WarEmblemReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_WarEmblemReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_WarEmblemReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_WarEmblemReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Pvp_WarEmblemReq::type() const {
  return type_;
}
inline void Pvp_WarEmblemReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Pvp_WarEmblemRsp

// required int32 type = 1;
inline bool Pvp_WarEmblemRsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_WarEmblemRsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_WarEmblemRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_WarEmblemRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Pvp_WarEmblemRsp::type() const {
  return type_;
}
inline void Pvp_WarEmblemRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .proto_ff.WarEmblemListProto info = 2;
inline bool Pvp_WarEmblemRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_WarEmblemRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_WarEmblemRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_WarEmblemRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::WarEmblemListProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::WarEmblemListProto& Pvp_WarEmblemRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::WarEmblemListProto* Pvp_WarEmblemRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::WarEmblemListProto;
  return info_;
}
inline ::proto_ff::WarEmblemListProto* Pvp_WarEmblemRsp::release_info() {
  clear_has_info();
  ::proto_ff::WarEmblemListProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Pvp_WarEmblemRsp::set_allocated_info(::proto_ff::WarEmblemListProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Pvp_WarEmblemUpdateRsp

// optional .proto_ff.WarEmblemListProto info = 1;
inline bool Pvp_WarEmblemUpdateRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_WarEmblemUpdateRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_WarEmblemUpdateRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_WarEmblemUpdateRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::WarEmblemListProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::WarEmblemListProto& Pvp_WarEmblemUpdateRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::WarEmblemListProto* Pvp_WarEmblemUpdateRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::WarEmblemListProto;
  return info_;
}
inline ::proto_ff::WarEmblemListProto* Pvp_WarEmblemUpdateRsp::release_info() {
  clear_has_info();
  ::proto_ff::WarEmblemListProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Pvp_WarEmblemUpdateRsp::set_allocated_info(::proto_ff::WarEmblemListProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Pvp_WarEmblemSoulReq

// required int32 id = 1;
inline bool Pvp_WarEmblemSoulReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_WarEmblemSoulReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_WarEmblemSoulReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_WarEmblemSoulReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Pvp_WarEmblemSoulReq::id() const {
  return id_;
}
inline void Pvp_WarEmblemSoulReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Pvp_WarEmblemSoulRsp

// required int32 ret = 1;
inline bool Pvp_WarEmblemSoulRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_WarEmblemSoulRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_WarEmblemSoulRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_WarEmblemSoulRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Pvp_WarEmblemSoulRsp::ret() const {
  return ret_;
}
inline void Pvp_WarEmblemSoulRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Pvp_WarEmblemStarReq

// required int32 id = 1;
inline bool Pvp_WarEmblemStarReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_WarEmblemStarReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_WarEmblemStarReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_WarEmblemStarReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Pvp_WarEmblemStarReq::id() const {
  return id_;
}
inline void Pvp_WarEmblemStarReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Pvp_WarEmblemStarRsp

// required int32 ret = 1;
inline bool Pvp_WarEmblemStarRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_WarEmblemStarRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_WarEmblemStarRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_WarEmblemStarRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Pvp_WarEmblemStarRsp::ret() const {
  return ret_;
}
inline void Pvp_WarEmblemStarRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 success = 2;
inline bool Pvp_WarEmblemStarRsp::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_WarEmblemStarRsp::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_WarEmblemStarRsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_WarEmblemStarRsp::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 Pvp_WarEmblemStarRsp::success() const {
  return success_;
}
inline void Pvp_WarEmblemStarRsp::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// Pvp_1v1InfoReq

// -------------------------------------------------------------------

// Pvp_1v1InfoRsp

// optional int32 score = 1;
inline bool Pvp_1v1InfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_1v1InfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_1v1InfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_1v1InfoRsp::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Pvp_1v1InfoRsp::score() const {
  return score_;
}
inline void Pvp_1v1InfoRsp::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 match_num = 2;
inline bool Pvp_1v1InfoRsp::has_match_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_1v1InfoRsp::set_has_match_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_1v1InfoRsp::clear_has_match_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_1v1InfoRsp::clear_match_num() {
  match_num_ = 0;
  clear_has_match_num();
}
inline ::google::protobuf::int32 Pvp_1v1InfoRsp::match_num() const {
  return match_num_;
}
inline void Pvp_1v1InfoRsp::set_match_num(::google::protobuf::int32 value) {
  set_has_match_num();
  match_num_ = value;
}

// optional int32 win_num = 3;
inline bool Pvp_1v1InfoRsp::has_win_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pvp_1v1InfoRsp::set_has_win_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pvp_1v1InfoRsp::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pvp_1v1InfoRsp::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 Pvp_1v1InfoRsp::win_num() const {
  return win_num_;
}
inline void Pvp_1v1InfoRsp::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional int32 conti_num = 4;
inline bool Pvp_1v1InfoRsp::has_conti_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pvp_1v1InfoRsp::set_has_conti_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pvp_1v1InfoRsp::clear_has_conti_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pvp_1v1InfoRsp::clear_conti_num() {
  conti_num_ = 0;
  clear_has_conti_num();
}
inline ::google::protobuf::int32 Pvp_1v1InfoRsp::conti_num() const {
  return conti_num_;
}
inline void Pvp_1v1InfoRsp::set_conti_num(::google::protobuf::int32 value) {
  set_has_conti_num();
  conti_num_ = value;
}

// optional int32 reward_num = 5;
inline bool Pvp_1v1InfoRsp::has_reward_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pvp_1v1InfoRsp::set_has_reward_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pvp_1v1InfoRsp::clear_has_reward_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pvp_1v1InfoRsp::clear_reward_num() {
  reward_num_ = 0;
  clear_has_reward_num();
}
inline ::google::protobuf::int32 Pvp_1v1InfoRsp::reward_num() const {
  return reward_num_;
}
inline void Pvp_1v1InfoRsp::set_reward_num(::google::protobuf::int32 value) {
  set_has_reward_num();
  reward_num_ = value;
}

// repeated int32 already_fetch = 6;
inline int Pvp_1v1InfoRsp::already_fetch_size() const {
  return already_fetch_.size();
}
inline void Pvp_1v1InfoRsp::clear_already_fetch() {
  already_fetch_.Clear();
}
inline ::google::protobuf::int32 Pvp_1v1InfoRsp::already_fetch(int index) const {
  return already_fetch_.Get(index);
}
inline void Pvp_1v1InfoRsp::set_already_fetch(int index, ::google::protobuf::int32 value) {
  already_fetch_.Set(index, value);
}
inline void Pvp_1v1InfoRsp::add_already_fetch(::google::protobuf::int32 value) {
  already_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pvp_1v1InfoRsp::already_fetch() const {
  return already_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pvp_1v1InfoRsp::mutable_already_fetch() {
  return &already_fetch_;
}

// -------------------------------------------------------------------

// Pvp_1v1InfoUpdateRsp

// optional int32 score = 1;
inline bool Pvp_1v1InfoUpdateRsp::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_1v1InfoUpdateRsp::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Pvp_1v1InfoUpdateRsp::score() const {
  return score_;
}
inline void Pvp_1v1InfoUpdateRsp::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 match_num = 2;
inline bool Pvp_1v1InfoUpdateRsp::has_match_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_1v1InfoUpdateRsp::set_has_match_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_has_match_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_match_num() {
  match_num_ = 0;
  clear_has_match_num();
}
inline ::google::protobuf::int32 Pvp_1v1InfoUpdateRsp::match_num() const {
  return match_num_;
}
inline void Pvp_1v1InfoUpdateRsp::set_match_num(::google::protobuf::int32 value) {
  set_has_match_num();
  match_num_ = value;
}

// optional int32 win_num = 3;
inline bool Pvp_1v1InfoUpdateRsp::has_win_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pvp_1v1InfoUpdateRsp::set_has_win_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 Pvp_1v1InfoUpdateRsp::win_num() const {
  return win_num_;
}
inline void Pvp_1v1InfoUpdateRsp::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional int32 conti_num = 4;
inline bool Pvp_1v1InfoUpdateRsp::has_conti_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pvp_1v1InfoUpdateRsp::set_has_conti_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_has_conti_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_conti_num() {
  conti_num_ = 0;
  clear_has_conti_num();
}
inline ::google::protobuf::int32 Pvp_1v1InfoUpdateRsp::conti_num() const {
  return conti_num_;
}
inline void Pvp_1v1InfoUpdateRsp::set_conti_num(::google::protobuf::int32 value) {
  set_has_conti_num();
  conti_num_ = value;
}

// optional int32 reward_num = 5;
inline bool Pvp_1v1InfoUpdateRsp::has_reward_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pvp_1v1InfoUpdateRsp::set_has_reward_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_has_reward_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pvp_1v1InfoUpdateRsp::clear_reward_num() {
  reward_num_ = 0;
  clear_has_reward_num();
}
inline ::google::protobuf::int32 Pvp_1v1InfoUpdateRsp::reward_num() const {
  return reward_num_;
}
inline void Pvp_1v1InfoUpdateRsp::set_reward_num(::google::protobuf::int32 value) {
  set_has_reward_num();
  reward_num_ = value;
}

// repeated int32 already_fetch = 6;
inline int Pvp_1v1InfoUpdateRsp::already_fetch_size() const {
  return already_fetch_.size();
}
inline void Pvp_1v1InfoUpdateRsp::clear_already_fetch() {
  already_fetch_.Clear();
}
inline ::google::protobuf::int32 Pvp_1v1InfoUpdateRsp::already_fetch(int index) const {
  return already_fetch_.Get(index);
}
inline void Pvp_1v1InfoUpdateRsp::set_already_fetch(int index, ::google::protobuf::int32 value) {
  already_fetch_.Set(index, value);
}
inline void Pvp_1v1InfoUpdateRsp::add_already_fetch(::google::protobuf::int32 value) {
  already_fetch_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pvp_1v1InfoUpdateRsp::already_fetch() const {
  return already_fetch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pvp_1v1InfoUpdateRsp::mutable_already_fetch() {
  return &already_fetch_;
}

// -------------------------------------------------------------------

// Pvp_1v1FetchRewardReq

// optional int32 id = 1;
inline bool Pvp_1v1FetchRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_1v1FetchRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_1v1FetchRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_1v1FetchRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Pvp_1v1FetchRewardReq::id() const {
  return id_;
}
inline void Pvp_1v1FetchRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Pvp_1v1FetchRewardRsp

// required int32 ret = 1;
inline bool Pvp_1v1FetchRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_1v1FetchRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_1v1FetchRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_1v1FetchRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Pvp_1v1FetchRewardRsp::ret() const {
  return ret_;
}
inline void Pvp_1v1FetchRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 id = 2;
inline bool Pvp_1v1FetchRewardRsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_1v1FetchRewardRsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_1v1FetchRewardRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_1v1FetchRewardRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Pvp_1v1FetchRewardRsp::id() const {
  return id_;
}
inline void Pvp_1v1FetchRewardRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Pvp_1v1RankReq

// -------------------------------------------------------------------

// Pvp_1v1RankRsp

// repeated .proto_ff.Pk1v1RankProto rank = 1;
inline int Pvp_1v1RankRsp::rank_size() const {
  return rank_.size();
}
inline void Pvp_1v1RankRsp::clear_rank() {
  rank_.Clear();
}
inline const ::proto_ff::Pk1v1RankProto& Pvp_1v1RankRsp::rank(int index) const {
  return rank_.Get(index);
}
inline ::proto_ff::Pk1v1RankProto* Pvp_1v1RankRsp::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::proto_ff::Pk1v1RankProto* Pvp_1v1RankRsp::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankProto >&
Pvp_1v1RankRsp::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankProto >*
Pvp_1v1RankRsp::mutable_rank() {
  return &rank_;
}

// optional int32 myrank = 2;
inline bool Pvp_1v1RankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_1v1RankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_1v1RankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_1v1RankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 Pvp_1v1RankRsp::myrank() const {
  return myrank_;
}
inline void Pvp_1v1RankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
}

// -------------------------------------------------------------------

// Pvp_1v1RankSimpleRsp

// repeated .proto_ff.Pk1v1RankSimpleProto rank_simple = 1;
inline int Pvp_1v1RankSimpleRsp::rank_simple_size() const {
  return rank_simple_.size();
}
inline void Pvp_1v1RankSimpleRsp::clear_rank_simple() {
  rank_simple_.Clear();
}
inline const ::proto_ff::Pk1v1RankSimpleProto& Pvp_1v1RankSimpleRsp::rank_simple(int index) const {
  return rank_simple_.Get(index);
}
inline ::proto_ff::Pk1v1RankSimpleProto* Pvp_1v1RankSimpleRsp::mutable_rank_simple(int index) {
  return rank_simple_.Mutable(index);
}
inline ::proto_ff::Pk1v1RankSimpleProto* Pvp_1v1RankSimpleRsp::add_rank_simple() {
  return rank_simple_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankSimpleProto >&
Pvp_1v1RankSimpleRsp::rank_simple() const {
  return rank_simple_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Pk1v1RankSimpleProto >*
Pvp_1v1RankSimpleRsp::mutable_rank_simple() {
  return &rank_simple_;
}

// optional int32 score = 2;
inline bool Pvp_1v1RankSimpleRsp::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_1v1RankSimpleRsp::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_1v1RankSimpleRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_1v1RankSimpleRsp::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Pvp_1v1RankSimpleRsp::score() const {
  return score_;
}
inline void Pvp_1v1RankSimpleRsp::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 myrank = 3;
inline bool Pvp_1v1RankSimpleRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pvp_1v1RankSimpleRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pvp_1v1RankSimpleRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pvp_1v1RankSimpleRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 Pvp_1v1RankSimpleRsp::myrank() const {
  return myrank_;
}
inline void Pvp_1v1RankSimpleRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
}

// -------------------------------------------------------------------

// Pvp_1v1ResultRsp

// optional int32 result = 1;
inline bool Pvp_1v1ResultRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_1v1ResultRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_1v1ResultRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_1v1ResultRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Pvp_1v1ResultRsp::result() const {
  return result_;
}
inline void Pvp_1v1ResultRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 old_score = 2;
inline bool Pvp_1v1ResultRsp::has_old_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_1v1ResultRsp::set_has_old_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_1v1ResultRsp::clear_has_old_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_1v1ResultRsp::clear_old_score() {
  old_score_ = 0;
  clear_has_old_score();
}
inline ::google::protobuf::int32 Pvp_1v1ResultRsp::old_score() const {
  return old_score_;
}
inline void Pvp_1v1ResultRsp::set_old_score(::google::protobuf::int32 value) {
  set_has_old_score();
  old_score_ = value;
}

// optional int32 new_score = 3;
inline bool Pvp_1v1ResultRsp::has_new_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pvp_1v1ResultRsp::set_has_new_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pvp_1v1ResultRsp::clear_has_new_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pvp_1v1ResultRsp::clear_new_score() {
  new_score_ = 0;
  clear_has_new_score();
}
inline ::google::protobuf::int32 Pvp_1v1ResultRsp::new_score() const {
  return new_score_;
}
inline void Pvp_1v1ResultRsp::set_new_score(::google::protobuf::int32 value) {
  set_has_new_score();
  new_score_ = value;
}

// repeated .proto_ff.ComItem reward = 4;
inline int Pvp_1v1ResultRsp::reward_size() const {
  return reward_.size();
}
inline void Pvp_1v1ResultRsp::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::ComItem& Pvp_1v1ResultRsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::ComItem* Pvp_1v1ResultRsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::ComItem* Pvp_1v1ResultRsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
Pvp_1v1ResultRsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
Pvp_1v1ResultRsp::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// Pvp_1v1MatchReq

// optional int32 cancel = 1;
inline bool Pvp_1v1MatchReq::has_cancel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_1v1MatchReq::set_has_cancel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_1v1MatchReq::clear_has_cancel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_1v1MatchReq::clear_cancel() {
  cancel_ = 0;
  clear_has_cancel();
}
inline ::google::protobuf::int32 Pvp_1v1MatchReq::cancel() const {
  return cancel_;
}
inline void Pvp_1v1MatchReq::set_cancel(::google::protobuf::int32 value) {
  set_has_cancel();
  cancel_ = value;
}

// -------------------------------------------------------------------

// Pvp_1v1MatchRsp

// required int32 ret = 1;
inline bool Pvp_1v1MatchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_1v1MatchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_1v1MatchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Pvp_1v1MatchRsp::ret() const {
  return ret_;
}
inline void Pvp_1v1MatchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 cancel = 2;
inline bool Pvp_1v1MatchRsp::has_cancel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_cancel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_1v1MatchRsp::clear_has_cancel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_1v1MatchRsp::clear_cancel() {
  cancel_ = 0;
  clear_has_cancel();
}
inline ::google::protobuf::int32 Pvp_1v1MatchRsp::cancel() const {
  return cancel_;
}
inline void Pvp_1v1MatchRsp::set_cancel(::google::protobuf::int32 value) {
  set_has_cancel();
  cancel_ = value;
}

// optional uint64 cid = 3;
inline bool Pvp_1v1MatchRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pvp_1v1MatchRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pvp_1v1MatchRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Pvp_1v1MatchRsp::cid() const {
  return cid_;
}
inline void Pvp_1v1MatchRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 4;
inline bool Pvp_1v1MatchRsp::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pvp_1v1MatchRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pvp_1v1MatchRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Pvp_1v1MatchRsp::name() const {
  return *name_;
}
inline void Pvp_1v1MatchRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Pvp_1v1MatchRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Pvp_1v1MatchRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pvp_1v1MatchRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Pvp_1v1MatchRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pvp_1v1MatchRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prof = 5;
inline bool Pvp_1v1MatchRsp::has_prof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_prof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pvp_1v1MatchRsp::clear_has_prof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pvp_1v1MatchRsp::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 Pvp_1v1MatchRsp::prof() const {
  return prof_;
}
inline void Pvp_1v1MatchRsp::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 level = 6;
inline bool Pvp_1v1MatchRsp::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pvp_1v1MatchRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pvp_1v1MatchRsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Pvp_1v1MatchRsp::level() const {
  return level_;
}
inline void Pvp_1v1MatchRsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 fight = 7;
inline bool Pvp_1v1MatchRsp::has_fight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_fight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pvp_1v1MatchRsp::clear_has_fight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pvp_1v1MatchRsp::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 Pvp_1v1MatchRsp::fight() const {
  return fight_;
}
inline void Pvp_1v1MatchRsp::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 begintime = 8;
inline bool Pvp_1v1MatchRsp::has_begintime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_begintime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Pvp_1v1MatchRsp::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Pvp_1v1MatchRsp::clear_begintime() {
  begintime_ = 0;
  clear_has_begintime();
}
inline ::google::protobuf::int32 Pvp_1v1MatchRsp::begintime() const {
  return begintime_;
}
inline void Pvp_1v1MatchRsp::set_begintime(::google::protobuf::int32 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional .proto_ff.RoleHeadPicProto head = 9;
inline bool Pvp_1v1MatchRsp::has_head() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Pvp_1v1MatchRsp::set_has_head() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Pvp_1v1MatchRsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Pvp_1v1MatchRsp::clear_head() {
  if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
  clear_has_head();
}
inline const ::proto_ff::RoleHeadPicProto& Pvp_1v1MatchRsp::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::proto_ff::RoleHeadPicProto* Pvp_1v1MatchRsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::proto_ff::RoleHeadPicProto;
  return head_;
}
inline ::proto_ff::RoleHeadPicProto* Pvp_1v1MatchRsp::release_head() {
  clear_has_head();
  ::proto_ff::RoleHeadPicProto* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Pvp_1v1MatchRsp::set_allocated_head(::proto_ff::RoleHeadPicProto* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// Pvp_L2S_1v1RankReq

// repeated uint64 cid = 1;
inline int Pvp_L2S_1v1RankReq::cid_size() const {
  return cid_.size();
}
inline void Pvp_L2S_1v1RankReq::clear_cid() {
  cid_.Clear();
}
inline ::google::protobuf::uint64 Pvp_L2S_1v1RankReq::cid(int index) const {
  return cid_.Get(index);
}
inline void Pvp_L2S_1v1RankReq::set_cid(int index, ::google::protobuf::uint64 value) {
  cid_.Set(index, value);
}
inline void Pvp_L2S_1v1RankReq::add_cid(::google::protobuf::uint64 value) {
  cid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Pvp_L2S_1v1RankReq::cid() const {
  return cid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Pvp_L2S_1v1RankReq::mutable_cid() {
  return &cid_;
}

// repeated int32 score = 2;
inline int Pvp_L2S_1v1RankReq::score_size() const {
  return score_.size();
}
inline void Pvp_L2S_1v1RankReq::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 Pvp_L2S_1v1RankReq::score(int index) const {
  return score_.Get(index);
}
inline void Pvp_L2S_1v1RankReq::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
}
inline void Pvp_L2S_1v1RankReq::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pvp_L2S_1v1RankReq::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pvp_L2S_1v1RankReq::mutable_score() {
  return &score_;
}

// -------------------------------------------------------------------

// Pvp_S2L_1v1RankNotify

// -------------------------------------------------------------------

// Pvp_L2S_1v1ScoreChgReq

// required uint64 cid = 1;
inline bool Pvp_L2S_1v1ScoreChgReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_L2S_1v1ScoreChgReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_L2S_1v1ScoreChgReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_L2S_1v1ScoreChgReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Pvp_L2S_1v1ScoreChgReq::cid() const {
  return cid_;
}
inline void Pvp_L2S_1v1ScoreChgReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint32 zid = 2;
inline bool Pvp_L2S_1v1ScoreChgReq::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_L2S_1v1ScoreChgReq::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_L2S_1v1ScoreChgReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_L2S_1v1ScoreChgReq::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 Pvp_L2S_1v1ScoreChgReq::zid() const {
  return zid_;
}
inline void Pvp_L2S_1v1ScoreChgReq::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// required int32 score = 3;
inline bool Pvp_L2S_1v1ScoreChgReq::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pvp_L2S_1v1ScoreChgReq::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pvp_L2S_1v1ScoreChgReq::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pvp_L2S_1v1ScoreChgReq::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Pvp_L2S_1v1ScoreChgReq::score() const {
  return score_;
}
inline void Pvp_L2S_1v1ScoreChgReq::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int32 match_num = 4;
inline bool Pvp_L2S_1v1ScoreChgReq::has_match_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pvp_L2S_1v1ScoreChgReq::set_has_match_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pvp_L2S_1v1ScoreChgReq::clear_has_match_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pvp_L2S_1v1ScoreChgReq::clear_match_num() {
  match_num_ = 0;
  clear_has_match_num();
}
inline ::google::protobuf::int32 Pvp_L2S_1v1ScoreChgReq::match_num() const {
  return match_num_;
}
inline void Pvp_L2S_1v1ScoreChgReq::set_match_num(::google::protobuf::int32 value) {
  set_has_match_num();
  match_num_ = value;
}

// -------------------------------------------------------------------

// Pvp_L2S_1v1MatchReq

// required uint64 cid = 1;
inline bool Pvp_L2S_1v1MatchReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_L2S_1v1MatchReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_L2S_1v1MatchReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_L2S_1v1MatchReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Pvp_L2S_1v1MatchReq::cid() const {
  return cid_;
}
inline void Pvp_L2S_1v1MatchReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint32 zid = 2;
inline bool Pvp_L2S_1v1MatchReq::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_L2S_1v1MatchReq::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_L2S_1v1MatchReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_L2S_1v1MatchReq::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 Pvp_L2S_1v1MatchReq::zid() const {
  return zid_;
}
inline void Pvp_L2S_1v1MatchReq::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// required int32 score = 3;
inline bool Pvp_L2S_1v1MatchReq::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pvp_L2S_1v1MatchReq::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pvp_L2S_1v1MatchReq::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pvp_L2S_1v1MatchReq::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Pvp_L2S_1v1MatchReq::score() const {
  return score_;
}
inline void Pvp_L2S_1v1MatchReq::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int32 cancel = 4;
inline bool Pvp_L2S_1v1MatchReq::has_cancel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pvp_L2S_1v1MatchReq::set_has_cancel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pvp_L2S_1v1MatchReq::clear_has_cancel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pvp_L2S_1v1MatchReq::clear_cancel() {
  cancel_ = 0;
  clear_has_cancel();
}
inline ::google::protobuf::int32 Pvp_L2S_1v1MatchReq::cancel() const {
  return cancel_;
}
inline void Pvp_L2S_1v1MatchReq::set_cancel(::google::protobuf::int32 value) {
  set_has_cancel();
  cancel_ = value;
}

// -------------------------------------------------------------------

// Pvp_L2S_1v1RaceInfoReq

// required uint32 zid = 1;
inline bool Pvp_L2S_1v1RaceInfoReq::has_zid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_L2S_1v1RaceInfoReq::set_has_zid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_L2S_1v1RaceInfoReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_L2S_1v1RaceInfoReq::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 Pvp_L2S_1v1RaceInfoReq::zid() const {
  return zid_;
}
inline void Pvp_L2S_1v1RaceInfoReq::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// required uint32 logicid = 2;
inline bool Pvp_L2S_1v1RaceInfoReq::has_logicid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pvp_L2S_1v1RaceInfoReq::set_has_logicid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pvp_L2S_1v1RaceInfoReq::clear_has_logicid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pvp_L2S_1v1RaceInfoReq::clear_logicid() {
  logicid_ = 0u;
  clear_has_logicid();
}
inline ::google::protobuf::uint32 Pvp_L2S_1v1RaceInfoReq::logicid() const {
  return logicid_;
}
inline void Pvp_L2S_1v1RaceInfoReq::set_logicid(::google::protobuf::uint32 value) {
  set_has_logicid();
  logicid_ = value;
}

// -------------------------------------------------------------------

// Pvp_S2L_1v1RaceInfoRsp

// required int32 num = 1;
inline bool Pvp_S2L_1v1RaceInfoRsp::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pvp_S2L_1v1RaceInfoRsp::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pvp_S2L_1v1RaceInfoRsp::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pvp_S2L_1v1RaceInfoRsp::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Pvp_S2L_1v1RaceInfoRsp::num() const {
  return num_;
}
inline void Pvp_S2L_1v1RaceInfoRsp::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Pvp_2eproto__INCLUDED
