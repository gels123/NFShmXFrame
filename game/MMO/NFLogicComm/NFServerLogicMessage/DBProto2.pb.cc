// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProto2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBProto2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GetRegisterNum_RoleDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegisterNum_RoleDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBSnsDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBSnsDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEnterSceneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEnterSceneData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DBProto2_2eproto() {
  protobuf_AddDesc_DBProto2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DBProto2.proto");
  GOOGLE_CHECK(file != NULL);
  GetRegisterNum_RoleDBData_descriptor_ = file->message_type(0);
  static const int GetRegisterNum_RoleDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegisterNum_RoleDBData, num_),
  };
  GetRegisterNum_RoleDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegisterNum_RoleDBData_descriptor_,
      GetRegisterNum_RoleDBData::default_instance_,
      GetRegisterNum_RoleDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegisterNum_RoleDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegisterNum_RoleDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegisterNum_RoleDBData));
  RoleDBSimpleData_descriptor_ = file->message_type(1);
  static const int RoleDBSimpleData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSimpleData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSimpleData, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSimpleData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSimpleData, base_),
  };
  RoleDBSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBSimpleData_descriptor_,
      RoleDBSimpleData::default_instance_,
      RoleDBSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBSimpleData));
  MyFriendInfo_descriptor_ = file->message_type(2);
  static const int MyFriendInfo_offsets_[1] = {
  };
  MyFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyFriendInfo_descriptor_,
      MyFriendInfo::default_instance_,
      MyFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyFriendInfo));
  RoleDBSnsDetail_descriptor_ = file->message_type(3);
  static const int RoleDBSnsDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsDetail, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsDetail, friend_info_),
  };
  RoleDBSnsDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBSnsDetail_descriptor_,
      RoleDBSnsDetail::default_instance_,
      RoleDBSnsDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBSnsDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBSnsDetail));
  RoleEnterSceneData_descriptor_ = file->message_type(4);
  static const int RoleEnterSceneData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, attr_),
  };
  RoleEnterSceneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEnterSceneData_descriptor_,
      RoleEnterSceneData::default_instance_,
      RoleEnterSceneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEnterSceneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEnterSceneData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DBProto2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegisterNum_RoleDBData_descriptor_, &GetRegisterNum_RoleDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBSimpleData_descriptor_, &RoleDBSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyFriendInfo_descriptor_, &MyFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBSnsDetail_descriptor_, &RoleDBSnsDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEnterSceneData_descriptor_, &RoleEnterSceneData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DBProto2_2eproto() {
  delete GetRegisterNum_RoleDBData::default_instance_;
  delete GetRegisterNum_RoleDBData_reflection_;
  delete RoleDBSimpleData::default_instance_;
  delete RoleDBSimpleData_reflection_;
  delete MyFriendInfo::default_instance_;
  delete MyFriendInfo_reflection_;
  delete RoleDBSnsDetail::default_instance_;
  delete RoleDBSnsDetail_reflection_;
  delete RoleEnterSceneData::default_instance_;
  delete RoleEnterSceneData_reflection_;
}

void protobuf_AddDesc_DBProto2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::proto_ff::protobuf_AddDesc_DBProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016DBProto2.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\032\tCom.proto\032\017ComDefine.proto\032\rD"
    "BProto.proto\"(\n\031GetRegisterNum_RoleDBDat"
    "a\022\013\n\003num\030\001 \001(\r\"a\n\020RoleDBSimpleData\022\013\n\003ci"
    "d\030\001 \001(\004\022\013\n\003zid\030\002 \001(\r\022\013\n\003uid\030\003 \001(\r\022&\n\004bas"
    "e\030\004 \001(\0132\030.proto_ff.RoleDBBaseData\"\016\n\014MyF"
    "riendInfo\"Q\n\017RoleDBSnsDetail\022\021\n\003cid\030\001 \001("
    "\004B\004\300\202\024\002\022+\n\013friend_info\030\002 \001(\0132\026.proto_ff."
    "MyFriendInfo\"\207\001\n\022RoleEnterSceneData\022\013\n\003c"
    "id\030\001 \001(\004\022\013\n\003zid\030\002 \001(\r\022\013\n\003uid\030\003 \001(\r\022&\n\004ba"
    "se\030\n \001(\0132\030.proto_ff.RoleDBBaseData\022\"\n\004at"
    "tr\030\013 \001(\0132\024.proto_ff.AttrDBData", 470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBProto2.proto", &protobuf_RegisterTypes);
  GetRegisterNum_RoleDBData::default_instance_ = new GetRegisterNum_RoleDBData();
  RoleDBSimpleData::default_instance_ = new RoleDBSimpleData();
  MyFriendInfo::default_instance_ = new MyFriendInfo();
  RoleDBSnsDetail::default_instance_ = new RoleDBSnsDetail();
  RoleEnterSceneData::default_instance_ = new RoleEnterSceneData();
  GetRegisterNum_RoleDBData::default_instance_->InitAsDefaultInstance();
  RoleDBSimpleData::default_instance_->InitAsDefaultInstance();
  MyFriendInfo::default_instance_->InitAsDefaultInstance();
  RoleDBSnsDetail::default_instance_->InitAsDefaultInstance();
  RoleEnterSceneData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DBProto2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DBProto2_2eproto {
  StaticDescriptorInitializer_DBProto2_2eproto() {
    protobuf_AddDesc_DBProto2_2eproto();
  }
} static_descriptor_initializer_DBProto2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetRegisterNum_RoleDBData::kNumFieldNumber;
#endif  // !_MSC_VER

GetRegisterNum_RoleDBData::GetRegisterNum_RoleDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRegisterNum_RoleDBData::InitAsDefaultInstance() {
}

GetRegisterNum_RoleDBData::GetRegisterNum_RoleDBData(const GetRegisterNum_RoleDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRegisterNum_RoleDBData::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegisterNum_RoleDBData::~GetRegisterNum_RoleDBData() {
  SharedDtor();
}

void GetRegisterNum_RoleDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRegisterNum_RoleDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegisterNum_RoleDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegisterNum_RoleDBData_descriptor_;
}

const GetRegisterNum_RoleDBData& GetRegisterNum_RoleDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto2_2eproto();
  return *default_instance_;
}

GetRegisterNum_RoleDBData* GetRegisterNum_RoleDBData::default_instance_ = NULL;

GetRegisterNum_RoleDBData* GetRegisterNum_RoleDBData::New() const {
  return new GetRegisterNum_RoleDBData;
}

void GetRegisterNum_RoleDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegisterNum_RoleDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRegisterNum_RoleDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRegisterNum_RoleDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRegisterNum_RoleDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegisterNum_RoleDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegisterNum_RoleDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegisterNum_RoleDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegisterNum_RoleDBData::MergeFrom(const GetRegisterNum_RoleDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegisterNum_RoleDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegisterNum_RoleDBData::CopyFrom(const GetRegisterNum_RoleDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegisterNum_RoleDBData::IsInitialized() const {

  return true;
}

void GetRegisterNum_RoleDBData::Swap(GetRegisterNum_RoleDBData* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegisterNum_RoleDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegisterNum_RoleDBData_descriptor_;
  metadata.reflection = GetRegisterNum_RoleDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBSimpleData::kCidFieldNumber;
const int RoleDBSimpleData::kZidFieldNumber;
const int RoleDBSimpleData::kUidFieldNumber;
const int RoleDBSimpleData::kBaseFieldNumber;
#endif  // !_MSC_VER

RoleDBSimpleData::RoleDBSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBSimpleData::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
}

RoleDBSimpleData::RoleDBSimpleData(const RoleDBSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBSimpleData::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  uid_ = 0u;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBSimpleData::~RoleDBSimpleData() {
  SharedDtor();
}

void RoleDBSimpleData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void RoleDBSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBSimpleData_descriptor_;
}

const RoleDBSimpleData& RoleDBSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto2_2eproto();
  return *default_instance_;
}

RoleDBSimpleData* RoleDBSimpleData::default_instance_ = NULL;

RoleDBSimpleData* RoleDBSimpleData::New() const {
  return new RoleDBSimpleData;
}

void RoleDBSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    uid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBBaseData base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBSimpleData::MergeFrom(const RoleDBSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBSimpleData::CopyFrom(const RoleDBSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBSimpleData::IsInitialized() const {

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void RoleDBSimpleData::Swap(RoleDBSimpleData* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(uid_, other->uid_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBSimpleData_descriptor_;
  metadata.reflection = RoleDBSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MyFriendInfo::MyFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyFriendInfo::InitAsDefaultInstance() {
}

MyFriendInfo::MyFriendInfo(const MyFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyFriendInfo::~MyFriendInfo() {
  SharedDtor();
}

void MyFriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyFriendInfo_descriptor_;
}

const MyFriendInfo& MyFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto2_2eproto();
  return *default_instance_;
}

MyFriendInfo* MyFriendInfo::default_instance_ = NULL;

MyFriendInfo* MyFriendInfo::New() const {
  return new MyFriendInfo;
}

void MyFriendInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MyFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyFriendInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyFriendInfo::MergeFrom(const MyFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyFriendInfo::CopyFrom(const MyFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyFriendInfo::IsInitialized() const {

  return true;
}

void MyFriendInfo::Swap(MyFriendInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyFriendInfo_descriptor_;
  metadata.reflection = MyFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBSnsDetail::kCidFieldNumber;
const int RoleDBSnsDetail::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

RoleDBSnsDetail::RoleDBSnsDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBSnsDetail::InitAsDefaultInstance() {
  friend_info_ = const_cast< ::proto_ff::MyFriendInfo*>(&::proto_ff::MyFriendInfo::default_instance());
}

RoleDBSnsDetail::RoleDBSnsDetail(const RoleDBSnsDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBSnsDetail::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  friend_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBSnsDetail::~RoleDBSnsDetail() {
  SharedDtor();
}

void RoleDBSnsDetail::SharedDtor() {
  if (this != default_instance_) {
    delete friend_info_;
  }
}

void RoleDBSnsDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBSnsDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBSnsDetail_descriptor_;
}

const RoleDBSnsDetail& RoleDBSnsDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto2_2eproto();
  return *default_instance_;
}

RoleDBSnsDetail* RoleDBSnsDetail::default_instance_ = NULL;

RoleDBSnsDetail* RoleDBSnsDetail::New() const {
  return new RoleDBSnsDetail;
}

void RoleDBSnsDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_friend_info()) {
      if (friend_info_ != NULL) friend_info_->::proto_ff::MyFriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBSnsDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend_info;
        break;
      }

      // optional .proto_ff.MyFriendInfo friend_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBSnsDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional .proto_ff.MyFriendInfo friend_info = 2;
  if (has_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBSnsDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional .proto_ff.MyFriendInfo friend_info = 2;
  if (has_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friend_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBSnsDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.MyFriendInfo friend_info = 2;
    if (has_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBSnsDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBSnsDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBSnsDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBSnsDetail::MergeFrom(const RoleDBSnsDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_friend_info()) {
      mutable_friend_info()->::proto_ff::MyFriendInfo::MergeFrom(from.friend_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBSnsDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBSnsDetail::CopyFrom(const RoleDBSnsDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBSnsDetail::IsInitialized() const {

  return true;
}

void RoleDBSnsDetail::Swap(RoleDBSnsDetail* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(friend_info_, other->friend_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBSnsDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBSnsDetail_descriptor_;
  metadata.reflection = RoleDBSnsDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEnterSceneData::kCidFieldNumber;
const int RoleEnterSceneData::kZidFieldNumber;
const int RoleEnterSceneData::kUidFieldNumber;
const int RoleEnterSceneData::kBaseFieldNumber;
const int RoleEnterSceneData::kAttrFieldNumber;
#endif  // !_MSC_VER

RoleEnterSceneData::RoleEnterSceneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEnterSceneData::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
  attr_ = const_cast< ::proto_ff::AttrDBData*>(&::proto_ff::AttrDBData::default_instance());
}

RoleEnterSceneData::RoleEnterSceneData(const RoleEnterSceneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEnterSceneData::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  uid_ = 0u;
  base_ = NULL;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEnterSceneData::~RoleEnterSceneData() {
  SharedDtor();
}

void RoleEnterSceneData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete attr_;
  }
}

void RoleEnterSceneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEnterSceneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEnterSceneData_descriptor_;
}

const RoleEnterSceneData& RoleEnterSceneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProto2_2eproto();
  return *default_instance_;
}

RoleEnterSceneData* RoleEnterSceneData::default_instance_ = NULL;

RoleEnterSceneData* RoleEnterSceneData::New() const {
  return new RoleEnterSceneData;
}

void RoleEnterSceneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    uid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEnterSceneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attr;
        break;
      }

      // optional .proto_ff.AttrDBData attr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEnterSceneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 10;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->base(), output);
  }

  // optional .proto_ff.AttrDBData attr = 11;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEnterSceneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 10;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->base(), target);
  }

  // optional .proto_ff.AttrDBData attr = 11;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEnterSceneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBBaseData base = 10;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto_ff.AttrDBData attr = 11;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEnterSceneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEnterSceneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEnterSceneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEnterSceneData::MergeFrom(const RoleEnterSceneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
    if (from.has_attr()) {
      mutable_attr()->::proto_ff::AttrDBData::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEnterSceneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEnterSceneData::CopyFrom(const RoleEnterSceneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEnterSceneData::IsInitialized() const {

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void RoleEnterSceneData::Swap(RoleEnterSceneData* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(uid_, other->uid_);
    std::swap(base_, other->base_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEnterSceneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEnterSceneData_descriptor_;
  metadata.reflection = RoleEnterSceneData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
