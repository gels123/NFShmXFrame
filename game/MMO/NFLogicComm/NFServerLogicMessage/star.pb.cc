// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: star.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "star.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* starpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  starpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_starpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_starpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* starstarstarDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  starstarstarDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* starstar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  starstar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_starstar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_starstar_reflection_ = NULL;
const ::google::protobuf::Descriptor* starexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  starexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_starexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_starexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* starastrology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  starastrology_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_starastrology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_starastrology_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_star_2eproto() {
  protobuf_AddDesc_star_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "star.proto");
  GOOGLE_CHECK(file != NULL);
  starpoint_descriptor_ = file->message_type(0);
  static const int starpoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starpoint, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starpoint, starnum_),
  };
  starpoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      starpoint_descriptor_,
      starpoint::default_instance_,
      starpoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starpoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starpoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(starpoint));
  Sheet_starpoint_descriptor_ = file->message_type(1);
  static const int Sheet_starpoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starpoint, starpoint_list_),
  };
  Sheet_starpoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_starpoint_descriptor_,
      Sheet_starpoint::default_instance_,
      Sheet_starpoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starpoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starpoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_starpoint));
  starstarstarDesc_descriptor_ = file->message_type(2);
  static const int starstarstarDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstarstarDesc, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstarstarDesc, attnum_),
  };
  starstarstarDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      starstarstarDesc_descriptor_,
      starstarstarDesc::default_instance_,
      starstarstarDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstarstarDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstarstarDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(starstarstarDesc));
  starstar_descriptor_ = file->message_type(3);
  static const int starstar_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, starname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, starquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, lvup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, starsq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, stards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, rock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, startype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, lvadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, star_),
  };
  starstar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      starstar_descriptor_,
      starstar::default_instance_,
      starstar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starstar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(starstar));
  Sheet_starstar_descriptor_ = file->message_type(4);
  static const int Sheet_starstar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starstar, starstar_list_),
  };
  Sheet_starstar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_starstar_descriptor_,
      Sheet_starstar::default_instance_,
      Sheet_starstar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starstar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starstar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_starstar));
  starexp_descriptor_ = file->message_type(5);
  static const int starexp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starexp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starexp, stards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starexp, starquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starexp, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starexp, exp_),
  };
  starexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      starexp_descriptor_,
      starexp::default_instance_,
      starexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(starexp));
  Sheet_starexp_descriptor_ = file->message_type(6);
  static const int Sheet_starexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starexp, starexp_list_),
  };
  Sheet_starexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_starexp_descriptor_,
      Sheet_starexp::default_instance_,
      Sheet_starexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_starexp));
  starastrology_descriptor_ = file->message_type(7);
  static const int starastrology_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, astrology_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, essence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, cointye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, gailv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, probability_),
  };
  starastrology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      starastrology_descriptor_,
      starastrology::default_instance_,
      starastrology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(starastrology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(starastrology));
  Sheet_starastrology_descriptor_ = file->message_type(8);
  static const int Sheet_starastrology_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starastrology, starastrology_list_),
  };
  Sheet_starastrology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_starastrology_descriptor_,
      Sheet_starastrology::default_instance_,
      Sheet_starastrology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starastrology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_starastrology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_starastrology));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_star_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    starpoint_descriptor_, &starpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_starpoint_descriptor_, &Sheet_starpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    starstarstarDesc_descriptor_, &starstarstarDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    starstar_descriptor_, &starstar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_starstar_descriptor_, &Sheet_starstar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    starexp_descriptor_, &starexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_starexp_descriptor_, &Sheet_starexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    starastrology_descriptor_, &starastrology::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_starastrology_descriptor_, &Sheet_starastrology::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_star_2eproto() {
  delete starpoint::default_instance_;
  delete starpoint_reflection_;
  delete Sheet_starpoint::default_instance_;
  delete Sheet_starpoint_reflection_;
  delete starstarstarDesc::default_instance_;
  delete starstarstarDesc_reflection_;
  delete starstar::default_instance_;
  delete starstar_reflection_;
  delete Sheet_starstar::default_instance_;
  delete Sheet_starstar_reflection_;
  delete starexp::default_instance_;
  delete starexp_reflection_;
  delete Sheet_starexp::default_instance_;
  delete Sheet_starexp_reflection_;
  delete starastrology::default_instance_;
  delete starastrology_reflection_;
  delete Sheet_starastrology::default_instance_;
  delete Sheet_starastrology_reflection_;
}

void protobuf_AddDesc_star_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nstar.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"[\n\tstarpoint\022\"\n\006starID\030\001 \001(\005B\022\302\377\024\016"
    "\345\221\275\346\230\237\346\247\275\344\275\215ID\022*\n\007starNum\030\002 \001(\005B\031\302\377\024\025\345\221\275"
    "\346\230\237\345\241\224\350\247\243\351\224\201\345\261\202\347\272\247\"D\n\017Sheet_starpoint\0221\n"
    "\016starpoint_List\030\001 \003(\0132\023.proto_ff.starpoi"
    "ntB\004\210\301\024\024\"D\n\020starstarstarDesc\022\027\n\003Att\030\001 \001("
    "\005B\n\302\377\024\006\347\261\273\345\236\213\022\027\n\006Attnum\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\376"
    "\003\n\010starstar\022\034\n\006starID\030\001 \001(\003B\014\302\377\024\010\345\221\275\346\230\237I"
    "D\022&\n\010starName\030\002 \001(\tB\024\302\377\024\014\345\221\275\346\230\237\345\220\215\347\247\260\220\301\024"
    "<\022%\n\013starQuality\030\003 \001(\005B\020\302\377\024\014\345\221\275\346\230\237\345\223\201\350\264\250"
    "\022*\n\007starNum\030\004 \001(\005B\031\302\377\024\025\345\221\275\346\230\237\345\241\224\350\247\243\351\224\201\345\261"
    "\202\347\272\247\022&\n\006change\030\005 \001(\005B\026\302\377\024\022\345\205\221\346\215\242\346\211\200\351\234\200\347\242"
    "\216\347\211\207\022$\n\004LvUp\030\006 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\344\270\212\351\231\220\347\255\211\347"
    "\272\247\022#\n\006starSq\030\007 \001(\005B\023\302\377\024\017\346\230\257\345\220\246\345\217\257\351\225\266\345\265\214\022"
    " \n\006starDs\030\010 \001(\005B\020\302\377\024\014\345\215\225\345\217\214\345\221\275\346\230\237\022\036\n\004roc"
    "k\030\t \001(\005B\020\302\377\024\014\345\210\206\350\247\243\347\245\236\347\237\263\022\035\n\003exp\030\n \001(\005B\020"
    "\302\377\024\014\345\210\235\345\247\213\347\273\217\351\252\214\022\"\n\010starType\030\013 \001(\005B\020\302\377\024\014"
    "\347\272\271\347\253\240\347\261\273\345\236\213\022!\n\005LvAdd\030\014 \003(\tB\022\302\377\024\006\345\261\236\346\200\247\210"
    "\301\024\002\220\301\024<\022>\n\004star\030\r \003(\0132\032.proto_ff.starsta"
    "rstarDescB\024\302\377\024\014\345\221\275\346\230\237\345\261\236\346\200\247\210\301\024\002\"B\n\016Sheet"
    "_starstar\0220\n\rstarstar_List\030\001 \003(\0132\022.proto"
    "_ff.starstarB\005\210\301\024\310\001\"\255\001\n\007starexp\022\030\n\002id\030\001 "
    "\001(\003B\014\302\377\024\010\346\216\222\345\272\217ID\022 \n\006starDs\030\002 \001(\005B\020\302\377\024\014\345"
    "\215\225\345\217\214\345\221\275\346\230\237\022%\n\013starQuality\030\003 \001(\005B\020\302\377\024\014\345\221"
    "\275\346\230\237\345\223\201\350\264\250\022 \n\006starLv\030\004 \001(\005B\020\302\377\024\014\345\221\275\346\230\237\347\255"
    "\211\347\272\247\022\035\n\003exp\030\005 \001(\005B\020\302\377\024\014\345\215\207\347\272\247\347\273\217\351\252\214\"\?\n\rS"
    "heet_starexp\022.\n\014starexp_List\030\001 \003(\0132\021.pro"
    "to_ff.starexpB\005\210\301\024\320\017\"\271\003\n\rstarastrology\022#"
    "\n\tastrology\030\001 \001(\005B\020\302\377\024\014\345\215\240\346\230\237\346\254\241\346\225\260\022\"\n\006i"
    "temId\030\002 \001(\003B\022\302\377\024\016\346\266\210\350\200\227\351\201\223\345\205\267id\022\'\n\007itemN"
    "um\030\003 \001(\005B\026\302\377\024\022\346\266\210\350\200\227\351\201\223\345\205\267\346\225\260\351\207\217\022+\n\010frag"
    "ment\030\004 \001(\005B\031\302\377\024\025\345\245\226\345\212\261\345\221\275\346\230\237\347\242\216\347\211\207\346\225\260\022*\n"
    "\007essence\030\005 \001(\005B\031\302\377\024\025\345\245\226\345\212\261\345\221\275\346\230\237\347\262\276\345\215\216\346\225"
    "\260\0226\n\004time\030\006 \001(\005B(\302\377\024$\345\205\215\350\264\271\345\215\240\346\230\237\345\206\267\345\215\264\346"
    "\227\266\351\227\264\357\274\210\345\260\217\346\227\266\357\274\211\022\'\n\007coinTye\030\007 \001(\005B\026\302\377\024\022"
    "\346\266\210\350\200\227\350\264\247\345\270\201\347\261\273\345\236\213\022 \n\006number\030\010 \001(\005B\020\302\377\024\014"
    "\350\264\247\345\270\201\346\225\260\351\207\217\022)\n\005gailv\030\t \003(\005B\032\302\377\024\022\345\215\225\346\254\241\346"
    "\235\203\351\207\215\345\223\201\350\264\250\210\301\024\005\022/\n\013probability\030\n \003(\005B\032\302\377"
    "\024\022\345\215\201\346\254\241\346\235\203\351\207\215\345\223\201\350\264\250\210\301\024\005\"P\n\023Sheet_staras"
    "trology\0229\n\022starastrology_List\030\001 \003(\0132\027.pr"
    "oto_ff.starastrologyB\004\210\301\024\024", 1626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "star.proto", &protobuf_RegisterTypes);
  starpoint::default_instance_ = new starpoint();
  Sheet_starpoint::default_instance_ = new Sheet_starpoint();
  starstarstarDesc::default_instance_ = new starstarstarDesc();
  starstar::default_instance_ = new starstar();
  Sheet_starstar::default_instance_ = new Sheet_starstar();
  starexp::default_instance_ = new starexp();
  Sheet_starexp::default_instance_ = new Sheet_starexp();
  starastrology::default_instance_ = new starastrology();
  Sheet_starastrology::default_instance_ = new Sheet_starastrology();
  starpoint::default_instance_->InitAsDefaultInstance();
  Sheet_starpoint::default_instance_->InitAsDefaultInstance();
  starstarstarDesc::default_instance_->InitAsDefaultInstance();
  starstar::default_instance_->InitAsDefaultInstance();
  Sheet_starstar::default_instance_->InitAsDefaultInstance();
  starexp::default_instance_->InitAsDefaultInstance();
  Sheet_starexp::default_instance_->InitAsDefaultInstance();
  starastrology::default_instance_->InitAsDefaultInstance();
  Sheet_starastrology::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_star_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_star_2eproto {
  StaticDescriptorInitializer_star_2eproto() {
    protobuf_AddDesc_star_2eproto();
  }
} static_descriptor_initializer_star_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int starpoint::kStarIDFieldNumber;
const int starpoint::kStarNumFieldNumber;
#endif  // !_MSC_VER

starpoint::starpoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void starpoint::InitAsDefaultInstance() {
}

starpoint::starpoint(const starpoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void starpoint::SharedCtor() {
  _cached_size_ = 0;
  starid_ = 0;
  starnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

starpoint::~starpoint() {
  SharedDtor();
}

void starpoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void starpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* starpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return starpoint_descriptor_;
}

const starpoint& starpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

starpoint* starpoint::default_instance_ = NULL;

starpoint* starpoint::New() const {
  return new starpoint;
}

void starpoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starid_ = 0;
    starnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool starpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 starID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starNum;
        break;
      }

      // optional int32 starNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void starpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 starID = 1;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starid(), output);
  }

  // optional int32 starNum = 2;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* starpoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 starID = 1;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starid(), target);
  }

  // optional int32 starNum = 2;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int starpoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 starID = 1;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }

    // optional int32 starNum = 2;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void starpoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const starpoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const starpoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void starpoint::MergeFrom(const starpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void starpoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starpoint::CopyFrom(const starpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starpoint::IsInitialized() const {

  return true;
}

void starpoint::Swap(starpoint* other) {
  if (other != this) {
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata starpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = starpoint_descriptor_;
  metadata.reflection = starpoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_starpoint::kStarpointListFieldNumber;
#endif  // !_MSC_VER

Sheet_starpoint::Sheet_starpoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_starpoint::InitAsDefaultInstance() {
}

Sheet_starpoint::Sheet_starpoint(const Sheet_starpoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_starpoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_starpoint::~Sheet_starpoint() {
  SharedDtor();
}

void Sheet_starpoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_starpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_starpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_starpoint_descriptor_;
}

const Sheet_starpoint& Sheet_starpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

Sheet_starpoint* Sheet_starpoint::default_instance_ = NULL;

Sheet_starpoint* Sheet_starpoint::New() const {
  return new Sheet_starpoint;
}

void Sheet_starpoint::Clear() {
  starpoint_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_starpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.starpoint starpoint_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starpoint_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starpoint_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_starpoint_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_starpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.starpoint starpoint_List = 1;
  for (int i = 0; i < this->starpoint_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->starpoint_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_starpoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.starpoint starpoint_List = 1;
  for (int i = 0; i < this->starpoint_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->starpoint_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_starpoint::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.starpoint starpoint_List = 1;
  total_size += 1 * this->starpoint_list_size();
  for (int i = 0; i < this->starpoint_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starpoint_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_starpoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_starpoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_starpoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_starpoint::MergeFrom(const Sheet_starpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  starpoint_list_.MergeFrom(from.starpoint_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_starpoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_starpoint::CopyFrom(const Sheet_starpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_starpoint::IsInitialized() const {

  return true;
}

void Sheet_starpoint::Swap(Sheet_starpoint* other) {
  if (other != this) {
    starpoint_list_.Swap(&other->starpoint_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_starpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_starpoint_descriptor_;
  metadata.reflection = Sheet_starpoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int starstarstarDesc::kAttFieldNumber;
const int starstarstarDesc::kAttnumFieldNumber;
#endif  // !_MSC_VER

starstarstarDesc::starstarstarDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void starstarstarDesc::InitAsDefaultInstance() {
}

starstarstarDesc::starstarstarDesc(const starstarstarDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void starstarstarDesc::SharedCtor() {
  _cached_size_ = 0;
  att_ = 0;
  attnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

starstarstarDesc::~starstarstarDesc() {
  SharedDtor();
}

void starstarstarDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void starstarstarDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* starstarstarDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return starstarstarDesc_descriptor_;
}

const starstarstarDesc& starstarstarDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

starstarstarDesc* starstarstarDesc::default_instance_ = NULL;

starstarstarDesc* starstarstarDesc::New() const {
  return new starstarstarDesc;
}

void starstarstarDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    att_ = 0;
    attnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool starstarstarDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Att = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &att_)));
          set_has_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Attnum;
        break;
      }

      // optional int32 Attnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Attnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attnum_)));
          set_has_attnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void starstarstarDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Att = 1;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->att(), output);
  }

  // optional int32 Attnum = 2;
  if (has_attnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* starstarstarDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Att = 1;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->att(), target);
  }

  // optional int32 Attnum = 2;
  if (has_attnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int starstarstarDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Att = 1;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->att());
    }

    // optional int32 Attnum = 2;
    if (has_attnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void starstarstarDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const starstarstarDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const starstarstarDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void starstarstarDesc::MergeFrom(const starstarstarDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_att()) {
      set_att(from.att());
    }
    if (from.has_attnum()) {
      set_attnum(from.attnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void starstarstarDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starstarstarDesc::CopyFrom(const starstarstarDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starstarstarDesc::IsInitialized() const {

  return true;
}

void starstarstarDesc::Swap(starstarstarDesc* other) {
  if (other != this) {
    std::swap(att_, other->att_);
    std::swap(attnum_, other->attnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata starstarstarDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = starstarstarDesc_descriptor_;
  metadata.reflection = starstarstarDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int starstar::kStarIDFieldNumber;
const int starstar::kStarNameFieldNumber;
const int starstar::kStarQualityFieldNumber;
const int starstar::kStarNumFieldNumber;
const int starstar::kChangeFieldNumber;
const int starstar::kLvUpFieldNumber;
const int starstar::kStarSqFieldNumber;
const int starstar::kStarDsFieldNumber;
const int starstar::kRockFieldNumber;
const int starstar::kExpFieldNumber;
const int starstar::kStarTypeFieldNumber;
const int starstar::kLvAddFieldNumber;
const int starstar::kStarFieldNumber;
#endif  // !_MSC_VER

starstar::starstar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void starstar::InitAsDefaultInstance() {
}

starstar::starstar(const starstar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void starstar::SharedCtor() {
  _cached_size_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starquality_ = 0;
  starnum_ = 0;
  change_ = 0;
  lvup_ = 0;
  starsq_ = 0;
  stards_ = 0;
  rock_ = 0;
  exp_ = 0;
  startype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

starstar::~starstar() {
  SharedDtor();
}

void starstar::SharedDtor() {
  if (starname_ != &::google::protobuf::internal::kEmptyString) {
    delete starname_;
  }
  if (this != default_instance_) {
  }
}

void starstar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* starstar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return starstar_descriptor_;
}

const starstar& starstar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

starstar* starstar::default_instance_ = NULL;

starstar* starstar::New() const {
  return new starstar;
}

void starstar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starid_ = GOOGLE_LONGLONG(0);
    if (has_starname()) {
      if (starname_ != &::google::protobuf::internal::kEmptyString) {
        starname_->clear();
      }
    }
    starquality_ = 0;
    starnum_ = 0;
    change_ = 0;
    lvup_ = 0;
    starsq_ = 0;
    stards_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rock_ = 0;
    exp_ = 0;
    startype_ = 0;
  }
  lvadd_.Clear();
  star_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool starstar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 starID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_starName;
        break;
      }

      // optional string starName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starname().data(), this->starname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starQuality;
        break;
      }

      // optional int32 starQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starquality_)));
          set_has_starquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_starNum;
        break;
      }

      // optional int32 starNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_change;
        break;
      }

      // optional int32 change = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LvUp;
        break;
      }

      // optional int32 LvUp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LvUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvup_)));
          set_has_lvup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_starSq;
        break;
      }

      // optional int32 starSq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starSq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starsq_)));
          set_has_starsq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_starDs;
        break;
      }

      // optional int32 starDs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stards_)));
          set_has_stards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rock;
        break;
      }

      // optional int32 rock = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rock_)));
          set_has_rock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_exp;
        break;
      }

      // optional int32 exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_starType;
        break;
      }

      // optional int32 starType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startype_)));
          set_has_startype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_LvAdd;
        break;
      }

      // repeated string LvAdd = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LvAdd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lvadd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvadd(this->lvadd_size() - 1).data(),
            this->lvadd(this->lvadd_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_LvAdd;
        if (input->ExpectTag(106)) goto parse_star;
        break;
      }

      // repeated .proto_ff.starstarstarDesc star = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_star:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_star;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void starstar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 starID = 1;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->starid(), output);
  }

  // optional string starName = 2;
  if (has_starname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starname().data(), this->starname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->starname(), output);
  }

  // optional int32 starQuality = 3;
  if (has_starquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starquality(), output);
  }

  // optional int32 starNum = 4;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starnum(), output);
  }

  // optional int32 change = 5;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->change(), output);
  }

  // optional int32 LvUp = 6;
  if (has_lvup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lvup(), output);
  }

  // optional int32 starSq = 7;
  if (has_starsq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->starsq(), output);
  }

  // optional int32 starDs = 8;
  if (has_stards()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->stards(), output);
  }

  // optional int32 rock = 9;
  if (has_rock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rock(), output);
  }

  // optional int32 exp = 10;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->exp(), output);
  }

  // optional int32 starType = 11;
  if (has_startype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->startype(), output);
  }

  // repeated string LvAdd = 12;
  for (int i = 0; i < this->lvadd_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lvadd(i).data(), this->lvadd(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->lvadd(i), output);
  }

  // repeated .proto_ff.starstarstarDesc star = 13;
  for (int i = 0; i < this->star_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->star(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* starstar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 starID = 1;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->starid(), target);
  }

  // optional string starName = 2;
  if (has_starname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starname().data(), this->starname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->starname(), target);
  }

  // optional int32 starQuality = 3;
  if (has_starquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starquality(), target);
  }

  // optional int32 starNum = 4;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starnum(), target);
  }

  // optional int32 change = 5;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->change(), target);
  }

  // optional int32 LvUp = 6;
  if (has_lvup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lvup(), target);
  }

  // optional int32 starSq = 7;
  if (has_starsq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->starsq(), target);
  }

  // optional int32 starDs = 8;
  if (has_stards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->stards(), target);
  }

  // optional int32 rock = 9;
  if (has_rock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rock(), target);
  }

  // optional int32 exp = 10;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->exp(), target);
  }

  // optional int32 starType = 11;
  if (has_startype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->startype(), target);
  }

  // repeated string LvAdd = 12;
  for (int i = 0; i < this->lvadd_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvadd(i).data(), this->lvadd(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->lvadd(i), target);
  }

  // repeated .proto_ff.starstarstarDesc star = 13;
  for (int i = 0; i < this->star_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->star(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int starstar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 starID = 1;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

    // optional string starName = 2;
    if (has_starname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starname());
    }

    // optional int32 starQuality = 3;
    if (has_starquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starquality());
    }

    // optional int32 starNum = 4;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starnum());
    }

    // optional int32 change = 5;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

    // optional int32 LvUp = 6;
    if (has_lvup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvup());
    }

    // optional int32 starSq = 7;
    if (has_starsq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starsq());
    }

    // optional int32 starDs = 8;
    if (has_stards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stards());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rock = 9;
    if (has_rock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rock());
    }

    // optional int32 exp = 10;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 starType = 11;
    if (has_startype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startype());
    }

  }
  // repeated string LvAdd = 12;
  total_size += 1 * this->lvadd_size();
  for (int i = 0; i < this->lvadd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lvadd(i));
  }

  // repeated .proto_ff.starstarstarDesc star = 13;
  total_size += 1 * this->star_size();
  for (int i = 0; i < this->star_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void starstar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const starstar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const starstar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void starstar::MergeFrom(const starstar& from) {
  GOOGLE_CHECK_NE(&from, this);
  lvadd_.MergeFrom(from.lvadd_);
  star_.MergeFrom(from.star_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starname()) {
      set_starname(from.starname());
    }
    if (from.has_starquality()) {
      set_starquality(from.starquality());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_lvup()) {
      set_lvup(from.lvup());
    }
    if (from.has_starsq()) {
      set_starsq(from.starsq());
    }
    if (from.has_stards()) {
      set_stards(from.stards());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rock()) {
      set_rock(from.rock());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_startype()) {
      set_startype(from.startype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void starstar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starstar::CopyFrom(const starstar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starstar::IsInitialized() const {

  return true;
}

void starstar::Swap(starstar* other) {
  if (other != this) {
    std::swap(starid_, other->starid_);
    std::swap(starname_, other->starname_);
    std::swap(starquality_, other->starquality_);
    std::swap(starnum_, other->starnum_);
    std::swap(change_, other->change_);
    std::swap(lvup_, other->lvup_);
    std::swap(starsq_, other->starsq_);
    std::swap(stards_, other->stards_);
    std::swap(rock_, other->rock_);
    std::swap(exp_, other->exp_);
    std::swap(startype_, other->startype_);
    lvadd_.Swap(&other->lvadd_);
    star_.Swap(&other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata starstar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = starstar_descriptor_;
  metadata.reflection = starstar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_starstar::kStarstarListFieldNumber;
#endif  // !_MSC_VER

Sheet_starstar::Sheet_starstar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_starstar::InitAsDefaultInstance() {
}

Sheet_starstar::Sheet_starstar(const Sheet_starstar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_starstar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_starstar::~Sheet_starstar() {
  SharedDtor();
}

void Sheet_starstar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_starstar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_starstar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_starstar_descriptor_;
}

const Sheet_starstar& Sheet_starstar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

Sheet_starstar* Sheet_starstar::default_instance_ = NULL;

Sheet_starstar* Sheet_starstar::New() const {
  return new Sheet_starstar;
}

void Sheet_starstar::Clear() {
  starstar_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_starstar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.starstar starstar_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starstar_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starstar_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_starstar_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_starstar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.starstar starstar_List = 1;
  for (int i = 0; i < this->starstar_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->starstar_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_starstar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.starstar starstar_List = 1;
  for (int i = 0; i < this->starstar_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->starstar_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_starstar::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.starstar starstar_List = 1;
  total_size += 1 * this->starstar_list_size();
  for (int i = 0; i < this->starstar_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starstar_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_starstar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_starstar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_starstar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_starstar::MergeFrom(const Sheet_starstar& from) {
  GOOGLE_CHECK_NE(&from, this);
  starstar_list_.MergeFrom(from.starstar_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_starstar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_starstar::CopyFrom(const Sheet_starstar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_starstar::IsInitialized() const {

  return true;
}

void Sheet_starstar::Swap(Sheet_starstar* other) {
  if (other != this) {
    starstar_list_.Swap(&other->starstar_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_starstar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_starstar_descriptor_;
  metadata.reflection = Sheet_starstar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int starexp::kIdFieldNumber;
const int starexp::kStarDsFieldNumber;
const int starexp::kStarQualityFieldNumber;
const int starexp::kStarLvFieldNumber;
const int starexp::kExpFieldNumber;
#endif  // !_MSC_VER

starexp::starexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void starexp::InitAsDefaultInstance() {
}

starexp::starexp(const starexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void starexp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  stards_ = 0;
  starquality_ = 0;
  starlv_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

starexp::~starexp() {
  SharedDtor();
}

void starexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void starexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* starexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return starexp_descriptor_;
}

const starexp& starexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

starexp* starexp::default_instance_ = NULL;

starexp* starexp::New() const {
  return new starexp;
}

void starexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    stards_ = 0;
    starquality_ = 0;
    starlv_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool starexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starDs;
        break;
      }

      // optional int32 starDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stards_)));
          set_has_stards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starQuality;
        break;
      }

      // optional int32 starQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starquality_)));
          set_has_starquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_starLv;
        break;
      }

      // optional int32 starLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void starexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 starDs = 2;
  if (has_stards()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stards(), output);
  }

  // optional int32 starQuality = 3;
  if (has_starquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starquality(), output);
  }

  // optional int32 starLv = 4;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starlv(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* starexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 starDs = 2;
  if (has_stards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stards(), target);
  }

  // optional int32 starQuality = 3;
  if (has_starquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starquality(), target);
  }

  // optional int32 starLv = 4;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starlv(), target);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int starexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 starDs = 2;
    if (has_stards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stards());
    }

    // optional int32 starQuality = 3;
    if (has_starquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starquality());
    }

    // optional int32 starLv = 4;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void starexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const starexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const starexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void starexp::MergeFrom(const starexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stards()) {
      set_stards(from.stards());
    }
    if (from.has_starquality()) {
      set_starquality(from.starquality());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void starexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starexp::CopyFrom(const starexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starexp::IsInitialized() const {

  return true;
}

void starexp::Swap(starexp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stards_, other->stards_);
    std::swap(starquality_, other->starquality_);
    std::swap(starlv_, other->starlv_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata starexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = starexp_descriptor_;
  metadata.reflection = starexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_starexp::kStarexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_starexp::Sheet_starexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_starexp::InitAsDefaultInstance() {
}

Sheet_starexp::Sheet_starexp(const Sheet_starexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_starexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_starexp::~Sheet_starexp() {
  SharedDtor();
}

void Sheet_starexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_starexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_starexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_starexp_descriptor_;
}

const Sheet_starexp& Sheet_starexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

Sheet_starexp* Sheet_starexp::default_instance_ = NULL;

Sheet_starexp* Sheet_starexp::New() const {
  return new Sheet_starexp;
}

void Sheet_starexp::Clear() {
  starexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_starexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.starexp starexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_starexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_starexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.starexp starexp_List = 1;
  for (int i = 0; i < this->starexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->starexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_starexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.starexp starexp_List = 1;
  for (int i = 0; i < this->starexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->starexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_starexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.starexp starexp_List = 1;
  total_size += 1 * this->starexp_list_size();
  for (int i = 0; i < this->starexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_starexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_starexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_starexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_starexp::MergeFrom(const Sheet_starexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  starexp_list_.MergeFrom(from.starexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_starexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_starexp::CopyFrom(const Sheet_starexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_starexp::IsInitialized() const {

  return true;
}

void Sheet_starexp::Swap(Sheet_starexp* other) {
  if (other != this) {
    starexp_list_.Swap(&other->starexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_starexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_starexp_descriptor_;
  metadata.reflection = Sheet_starexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int starastrology::kAstrologyFieldNumber;
const int starastrology::kItemIdFieldNumber;
const int starastrology::kItemNumFieldNumber;
const int starastrology::kFragmentFieldNumber;
const int starastrology::kEssenceFieldNumber;
const int starastrology::kTimeFieldNumber;
const int starastrology::kCoinTyeFieldNumber;
const int starastrology::kNumberFieldNumber;
const int starastrology::kGailvFieldNumber;
const int starastrology::kProbabilityFieldNumber;
#endif  // !_MSC_VER

starastrology::starastrology()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void starastrology::InitAsDefaultInstance() {
}

starastrology::starastrology(const starastrology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void starastrology::SharedCtor() {
  _cached_size_ = 0;
  astrology_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  fragment_ = 0;
  essence_ = 0;
  time_ = 0;
  cointye_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

starastrology::~starastrology() {
  SharedDtor();
}

void starastrology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void starastrology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* starastrology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return starastrology_descriptor_;
}

const starastrology& starastrology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

starastrology* starastrology::default_instance_ = NULL;

starastrology* starastrology::New() const {
  return new starastrology;
}

void starastrology::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    astrology_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
    fragment_ = 0;
    essence_ = 0;
    time_ = 0;
    cointye_ = 0;
    number_ = 0;
  }
  gailv_.Clear();
  probability_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool starastrology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 astrology = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &astrology_)));
          set_has_astrology();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fragment;
        break;
      }

      // optional int32 fragment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragment_)));
          set_has_fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_essence;
        break;
      }

      // optional int32 essence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_essence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &essence_)));
          set_has_essence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_coinTye;
        break;
      }

      // optional int32 coinTye = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coinTye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cointye_)));
          set_has_cointye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_number;
        break;
      }

      // optional int32 number = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gailv;
        break;
      }

      // repeated int32 gailv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gailv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_gailv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gailv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gailv;
        if (input->ExpectTag(80)) goto parse_probability;
        break;
      }

      // repeated int32 probability = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_probability())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_probability())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_probability;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void starastrology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 astrology = 1;
  if (has_astrology()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->astrology(), output);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // optional int32 fragment = 4;
  if (has_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fragment(), output);
  }

  // optional int32 essence = 5;
  if (has_essence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->essence(), output);
  }

  // optional int32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }

  // optional int32 coinTye = 7;
  if (has_cointye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cointye(), output);
  }

  // optional int32 number = 8;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->number(), output);
  }

  // repeated int32 gailv = 9;
  for (int i = 0; i < this->gailv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->gailv(i), output);
  }

  // repeated int32 probability = 10;
  for (int i = 0; i < this->probability_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->probability(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* starastrology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 astrology = 1;
  if (has_astrology()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->astrology(), target);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // optional int32 fragment = 4;
  if (has_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fragment(), target);
  }

  // optional int32 essence = 5;
  if (has_essence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->essence(), target);
  }

  // optional int32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }

  // optional int32 coinTye = 7;
  if (has_cointye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cointye(), target);
  }

  // optional int32 number = 8;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->number(), target);
  }

  // repeated int32 gailv = 9;
  for (int i = 0; i < this->gailv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->gailv(i), target);
  }

  // repeated int32 probability = 10;
  for (int i = 0; i < this->probability_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->probability(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int starastrology::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 astrology = 1;
    if (has_astrology()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->astrology());
    }

    // optional int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 fragment = 4;
    if (has_fragment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragment());
    }

    // optional int32 essence = 5;
    if (has_essence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->essence());
    }

    // optional int32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 coinTye = 7;
    if (has_cointye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cointye());
    }

    // optional int32 number = 8;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  // repeated int32 gailv = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->gailv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gailv(i));
    }
    total_size += 1 * this->gailv_size() + data_size;
  }

  // repeated int32 probability = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->probability_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->probability(i));
    }
    total_size += 1 * this->probability_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void starastrology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const starastrology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const starastrology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void starastrology::MergeFrom(const starastrology& from) {
  GOOGLE_CHECK_NE(&from, this);
  gailv_.MergeFrom(from.gailv_);
  probability_.MergeFrom(from.probability_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_astrology()) {
      set_astrology(from.astrology());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_fragment()) {
      set_fragment(from.fragment());
    }
    if (from.has_essence()) {
      set_essence(from.essence());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cointye()) {
      set_cointye(from.cointye());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void starastrology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void starastrology::CopyFrom(const starastrology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool starastrology::IsInitialized() const {

  return true;
}

void starastrology::Swap(starastrology* other) {
  if (other != this) {
    std::swap(astrology_, other->astrology_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(fragment_, other->fragment_);
    std::swap(essence_, other->essence_);
    std::swap(time_, other->time_);
    std::swap(cointye_, other->cointye_);
    std::swap(number_, other->number_);
    gailv_.Swap(&other->gailv_);
    probability_.Swap(&other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata starastrology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = starastrology_descriptor_;
  metadata.reflection = starastrology_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_starastrology::kStarastrologyListFieldNumber;
#endif  // !_MSC_VER

Sheet_starastrology::Sheet_starastrology()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_starastrology::InitAsDefaultInstance() {
}

Sheet_starastrology::Sheet_starastrology(const Sheet_starastrology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_starastrology::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_starastrology::~Sheet_starastrology() {
  SharedDtor();
}

void Sheet_starastrology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_starastrology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_starastrology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_starastrology_descriptor_;
}

const Sheet_starastrology& Sheet_starastrology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_star_2eproto();
  return *default_instance_;
}

Sheet_starastrology* Sheet_starastrology::default_instance_ = NULL;

Sheet_starastrology* Sheet_starastrology::New() const {
  return new Sheet_starastrology;
}

void Sheet_starastrology::Clear() {
  starastrology_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_starastrology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.starastrology starastrology_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starastrology_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starastrology_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_starastrology_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_starastrology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.starastrology starastrology_List = 1;
  for (int i = 0; i < this->starastrology_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->starastrology_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_starastrology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.starastrology starastrology_List = 1;
  for (int i = 0; i < this->starastrology_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->starastrology_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_starastrology::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.starastrology starastrology_List = 1;
  total_size += 1 * this->starastrology_list_size();
  for (int i = 0; i < this->starastrology_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starastrology_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_starastrology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_starastrology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_starastrology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_starastrology::MergeFrom(const Sheet_starastrology& from) {
  GOOGLE_CHECK_NE(&from, this);
  starastrology_list_.MergeFrom(from.starastrology_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_starastrology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_starastrology::CopyFrom(const Sheet_starastrology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_starastrology::IsInitialized() const {

  return true;
}

void Sheet_starastrology::Swap(Sheet_starastrology* other) {
  if (other != this) {
    starastrology_list_.Swap(&other->starastrology_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_starastrology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_starastrology_descriptor_;
  metadata.reflection = Sheet_starastrology_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
