// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Arena.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Arena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CWArenaRankInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWArenaRankInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCArenaRankInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCArenaRankInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCArenaBuyChallengeTimesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCArenaBuyChallengeTimesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCArenaBuyChallengeTimesRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCArenaBuyChallengeTimesRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWArenaUpdateOpponentInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWArenaUpdateOpponentInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCArenaUpdateOpponentInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCArenaUpdateOpponentInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWArenaTopListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWArenaTopListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCArenaTopListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCArenaTopListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWArenaChallReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWArenaChallReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCArenaChallRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCArenaChallRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaAbandonReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaAbandonReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaSweepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaSweepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaSweepRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaSweepRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCArenaChallResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCArenaChallResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCArenaCampChallResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCArenaCampChallResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGArenaConfirmChall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGArenaConfirmChall_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWArenaConfirmChall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWArenaConfirmChall_reflection_ = NULL;
const ::google::protobuf::Descriptor* AreanLoadMirrorDataCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreanLoadMirrorDataCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWArenaChallResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWArenaChallResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWArenaCampChallResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWArenaCampChallResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWArenaRankChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWArenaRankChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWArenaChallReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWArenaChallReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LSendArenaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LSendArenaReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LArenaGetChallResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LArenaGetChallResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CArenaGetChallResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CArenaGetChallResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LArenaGetChallRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LArenaGetChallRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CArenaGetChallRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CArenaGetChallRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CArenaChallRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CArenaChallRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LArenaReceiveChallRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LArenaReceiveChallRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CArenaReceiveChallRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CArenaReceiveChallRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LArenaDupBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LArenaDupBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LArenaSkipBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LArenaSkipBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CArenaSkipBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CArenaSkipBattleRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ARENA_CHALL_RESULT_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Arena_2eproto() {
  protobuf_AddDesc_Arena_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Arena.proto");
  GOOGLE_CHECK(file != NULL);
  CWArenaRankInfoReq_descriptor_ = file->message_type(0);
  static const int CWArenaRankInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaRankInfoReq, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaRankInfoReq, can_miao_sha_),
  };
  CWArenaRankInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWArenaRankInfoReq_descriptor_,
      CWArenaRankInfoReq::default_instance_,
      CWArenaRankInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaRankInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaRankInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWArenaRankInfoReq));
  ArenaRankInfo_descriptor_ = file->message_type(1);
  static const int ArenaRankInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, dstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, chall_type_),
  };
  ArenaRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRankInfo_descriptor_,
      ArenaRankInfo::default_instance_,
      ArenaRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRankInfo));
  WCArenaRankInfoRsp_descriptor_ = file->message_type(2);
  static const int WCArenaRankInfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, arenarankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, all_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, buychallengetimes_),
  };
  WCArenaRankInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCArenaRankInfoRsp_descriptor_,
      WCArenaRankInfoRsp::default_instance_,
      WCArenaRankInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaRankInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCArenaRankInfoRsp));
  WCArenaBuyChallengeTimesReq_descriptor_ = file->message_type(3);
  static const int WCArenaBuyChallengeTimesReq_offsets_[1] = {
  };
  WCArenaBuyChallengeTimesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCArenaBuyChallengeTimesReq_descriptor_,
      WCArenaBuyChallengeTimesReq::default_instance_,
      WCArenaBuyChallengeTimesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaBuyChallengeTimesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaBuyChallengeTimesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCArenaBuyChallengeTimesReq));
  WCArenaBuyChallengeTimesRsp_descriptor_ = file->message_type(4);
  static const int WCArenaBuyChallengeTimesRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaBuyChallengeTimesRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaBuyChallengeTimesRsp, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaBuyChallengeTimesRsp, all_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaBuyChallengeTimesRsp, buychallengetimes_),
  };
  WCArenaBuyChallengeTimesRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCArenaBuyChallengeTimesRsp_descriptor_,
      WCArenaBuyChallengeTimesRsp::default_instance_,
      WCArenaBuyChallengeTimesRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaBuyChallengeTimesRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaBuyChallengeTimesRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCArenaBuyChallengeTimesRsp));
  CWArenaUpdateOpponentInfoReq_descriptor_ = file->message_type(5);
  static const int CWArenaUpdateOpponentInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaUpdateOpponentInfoReq, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaUpdateOpponentInfoReq, can_miao_sha_),
  };
  CWArenaUpdateOpponentInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWArenaUpdateOpponentInfoReq_descriptor_,
      CWArenaUpdateOpponentInfoReq::default_instance_,
      CWArenaUpdateOpponentInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaUpdateOpponentInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaUpdateOpponentInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWArenaUpdateOpponentInfoReq));
  WCArenaUpdateOpponentInfoRsp_descriptor_ = file->message_type(6);
  static const int WCArenaUpdateOpponentInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaUpdateOpponentInfoRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaUpdateOpponentInfoRsp, arenarankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaUpdateOpponentInfoRsp, rank_),
  };
  WCArenaUpdateOpponentInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCArenaUpdateOpponentInfoRsp_descriptor_,
      WCArenaUpdateOpponentInfoRsp::default_instance_,
      WCArenaUpdateOpponentInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaUpdateOpponentInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaUpdateOpponentInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCArenaUpdateOpponentInfoRsp));
  CWArenaTopListReq_descriptor_ = file->message_type(7);
  static const int CWArenaTopListReq_offsets_[1] = {
  };
  CWArenaTopListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWArenaTopListReq_descriptor_,
      CWArenaTopListReq::default_instance_,
      CWArenaTopListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaTopListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaTopListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWArenaTopListReq));
  WCArenaTopListRsp_descriptor_ = file->message_type(8);
  static const int WCArenaTopListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaTopListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaTopListRsp, arenarankinfo_),
  };
  WCArenaTopListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCArenaTopListRsp_descriptor_,
      WCArenaTopListRsp::default_instance_,
      WCArenaTopListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaTopListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaTopListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCArenaTopListRsp));
  CWArenaChallReq_descriptor_ = file->message_type(9);
  static const int CWArenaChallReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaChallReq, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaChallReq, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaChallReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaChallReq, chall_type_),
  };
  CWArenaChallReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWArenaChallReq_descriptor_,
      CWArenaChallReq::default_instance_,
      CWArenaChallReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaChallReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWArenaChallReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWArenaChallReq));
  WCArenaChallRsp_descriptor_ = file->message_type(10);
  static const int WCArenaChallRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallRsp, ret_),
  };
  WCArenaChallRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCArenaChallRsp_descriptor_,
      WCArenaChallRsp::default_instance_,
      WCArenaChallRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCArenaChallRsp));
  ArenaAbandonReq_descriptor_ = file->message_type(11);
  static const int ArenaAbandonReq_offsets_[1] = {
  };
  ArenaAbandonReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaAbandonReq_descriptor_,
      ArenaAbandonReq::default_instance_,
      ArenaAbandonReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAbandonReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAbandonReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaAbandonReq));
  ArenaSweepReq_descriptor_ = file->message_type(12);
  static const int ArenaSweepReq_offsets_[1] = {
  };
  ArenaSweepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaSweepReq_descriptor_,
      ArenaSweepReq::default_instance_,
      ArenaSweepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSweepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSweepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaSweepReq));
  ArenaSweepRsp_descriptor_ = file->message_type(13);
  static const int ArenaSweepRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSweepRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSweepRsp, challengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSweepRsp, sweep_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSweepRsp, items_),
  };
  ArenaSweepRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaSweepRsp_descriptor_,
      ArenaSweepRsp::default_instance_,
      ArenaSweepRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSweepRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSweepRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaSweepRsp));
  WCArenaChallResult_descriptor_ = file->message_type(14);
  static const int WCArenaChallResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallResult, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallResult, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallResult, old_rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallResult, items_),
  };
  WCArenaChallResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCArenaChallResult_descriptor_,
      WCArenaChallResult::default_instance_,
      WCArenaChallResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaChallResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCArenaChallResult));
  WCArenaCampChallResult_descriptor_ = file->message_type(15);
  static const int WCArenaCampChallResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaCampChallResult, ret_),
  };
  WCArenaCampChallResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCArenaCampChallResult_descriptor_,
      WCArenaCampChallResult::default_instance_,
      WCArenaCampChallResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaCampChallResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCArenaCampChallResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCArenaCampChallResult));
  WGArenaConfirmChall_descriptor_ = file->message_type(16);
  static const int WGArenaConfirmChall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGArenaConfirmChall, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGArenaConfirmChall, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGArenaConfirmChall, type_),
  };
  WGArenaConfirmChall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGArenaConfirmChall_descriptor_,
      WGArenaConfirmChall::default_instance_,
      WGArenaConfirmChall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGArenaConfirmChall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGArenaConfirmChall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGArenaConfirmChall));
  GWArenaConfirmChall_descriptor_ = file->message_type(17);
  static const int GWArenaConfirmChall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaConfirmChall, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaConfirmChall, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaConfirmChall, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaConfirmChall, ret_),
  };
  GWArenaConfirmChall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWArenaConfirmChall_descriptor_,
      GWArenaConfirmChall::default_instance_,
      GWArenaConfirmChall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaConfirmChall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaConfirmChall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWArenaConfirmChall));
  AreanLoadMirrorDataCallBack_descriptor_ = file->message_type(18);
  static const int AreanLoadMirrorDataCallBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreanLoadMirrorDataCallBack, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreanLoadMirrorDataCallBack, dstid_),
  };
  AreanLoadMirrorDataCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreanLoadMirrorDataCallBack_descriptor_,
      AreanLoadMirrorDataCallBack::default_instance_,
      AreanLoadMirrorDataCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreanLoadMirrorDataCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreanLoadMirrorDataCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreanLoadMirrorDataCallBack));
  GWArenaChallResult_descriptor_ = file->message_type(19);
  static const int GWArenaChallResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, srcscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, dstcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, historyrankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, continue_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, playerlv_),
  };
  GWArenaChallResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWArenaChallResult_descriptor_,
      GWArenaChallResult::default_instance_,
      GWArenaChallResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWArenaChallResult));
  GWArenaCampChallResult_descriptor_ = file->message_type(20);
  static const int GWArenaCampChallResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaCampChallResult, srccharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaCampChallResult, ret_),
  };
  GWArenaCampChallResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWArenaCampChallResult_descriptor_,
      GWArenaCampChallResult::default_instance_,
      GWArenaCampChallResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaCampChallResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaCampChallResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWArenaCampChallResult));
  GWArenaRankChangeNotify_descriptor_ = file->message_type(21);
  static const int GWArenaRankChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaRankChangeNotify, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaRankChangeNotify, rank_),
  };
  GWArenaRankChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWArenaRankChangeNotify_descriptor_,
      GWArenaRankChangeNotify::default_instance_,
      GWArenaRankChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaRankChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaRankChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWArenaRankChangeNotify));
  GWArenaChallReq_descriptor_ = file->message_type(22);
  static const int GWArenaChallReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, chall_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, can_miaosha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, mult_),
  };
  GWArenaChallReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWArenaChallReq_descriptor_,
      GWArenaChallReq::default_instance_,
      GWArenaChallReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWArenaChallReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWArenaChallReq));
  C2LSendArenaReward_descriptor_ = file->message_type(23);
  static const int C2LSendArenaReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LSendArenaReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LSendArenaReward, items_),
  };
  C2LSendArenaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LSendArenaReward_descriptor_,
      C2LSendArenaReward::default_instance_,
      C2LSendArenaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LSendArenaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LSendArenaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LSendArenaReward));
  C2LArenaGetChallResultReq_descriptor_ = file->message_type(24);
  static const int C2LArenaGetChallResultReq_offsets_[1] = {
  };
  C2LArenaGetChallResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LArenaGetChallResultReq_descriptor_,
      C2LArenaGetChallResultReq::default_instance_,
      C2LArenaGetChallResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaGetChallResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaGetChallResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LArenaGetChallResultReq));
  L2CArenaGetChallResultRsp_descriptor_ = file->message_type(25);
  static const int L2CArenaGetChallResultRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaGetChallResultRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaGetChallResultRsp, chall_result_),
  };
  L2CArenaGetChallResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CArenaGetChallResultRsp_descriptor_,
      L2CArenaGetChallResultRsp::default_instance_,
      L2CArenaGetChallResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaGetChallResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaGetChallResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CArenaGetChallResultRsp));
  C2LArenaGetChallRewardReq_descriptor_ = file->message_type(26);
  static const int C2LArenaGetChallRewardReq_offsets_[1] = {
  };
  C2LArenaGetChallRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LArenaGetChallRewardReq_descriptor_,
      C2LArenaGetChallRewardReq::default_instance_,
      C2LArenaGetChallRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaGetChallRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaGetChallRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LArenaGetChallRewardReq));
  L2CArenaGetChallRewardRsp_descriptor_ = file->message_type(27);
  static const int L2CArenaGetChallRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaGetChallRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaGetChallRewardRsp, reward_),
  };
  L2CArenaGetChallRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CArenaGetChallRewardRsp_descriptor_,
      L2CArenaGetChallRewardRsp::default_instance_,
      L2CArenaGetChallRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaGetChallRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaGetChallRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CArenaGetChallRewardRsp));
  L2CArenaChallRewardNotify_descriptor_ = file->message_type(28);
  static const int L2CArenaChallRewardNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaChallRewardNotify, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaChallRewardNotify, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaChallRewardNotify, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaChallRewardNotify, history_rank_id_),
  };
  L2CArenaChallRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CArenaChallRewardNotify_descriptor_,
      L2CArenaChallRewardNotify::default_instance_,
      L2CArenaChallRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaChallRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaChallRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CArenaChallRewardNotify));
  C2LArenaReceiveChallRewardReq_descriptor_ = file->message_type(29);
  static const int C2LArenaReceiveChallRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaReceiveChallRewardReq, id_),
  };
  C2LArenaReceiveChallRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LArenaReceiveChallRewardReq_descriptor_,
      C2LArenaReceiveChallRewardReq::default_instance_,
      C2LArenaReceiveChallRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaReceiveChallRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaReceiveChallRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LArenaReceiveChallRewardReq));
  L2CArenaReceiveChallRewardRsp_descriptor_ = file->message_type(30);
  static const int L2CArenaReceiveChallRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaReceiveChallRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaReceiveChallRewardRsp, reward_),
  };
  L2CArenaReceiveChallRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CArenaReceiveChallRewardRsp_descriptor_,
      L2CArenaReceiveChallRewardRsp::default_instance_,
      L2CArenaReceiveChallRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaReceiveChallRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaReceiveChallRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CArenaReceiveChallRewardRsp));
  C2LArenaDupBattleResult_descriptor_ = file->message_type(31);
  static const int C2LArenaDupBattleResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaDupBattleResult, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaDupBattleResult, char_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaDupBattleResult, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaDupBattleResult, dst_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaDupBattleResult, result_),
  };
  C2LArenaDupBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LArenaDupBattleResult_descriptor_,
      C2LArenaDupBattleResult::default_instance_,
      C2LArenaDupBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaDupBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaDupBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LArenaDupBattleResult));
  C2LArenaSkipBattleReq_descriptor_ = file->message_type(32);
  static const int C2LArenaSkipBattleReq_offsets_[1] = {
  };
  C2LArenaSkipBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LArenaSkipBattleReq_descriptor_,
      C2LArenaSkipBattleReq::default_instance_,
      C2LArenaSkipBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaSkipBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LArenaSkipBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LArenaSkipBattleReq));
  L2CArenaSkipBattleRsp_descriptor_ = file->message_type(33);
  static const int L2CArenaSkipBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaSkipBattleRsp, ret_),
  };
  L2CArenaSkipBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CArenaSkipBattleRsp_descriptor_,
      L2CArenaSkipBattleRsp::default_instance_,
      L2CArenaSkipBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaSkipBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CArenaSkipBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CArenaSkipBattleRsp));
  ARENA_CHALL_RESULT_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Arena_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWArenaRankInfoReq_descriptor_, &CWArenaRankInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRankInfo_descriptor_, &ArenaRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCArenaRankInfoRsp_descriptor_, &WCArenaRankInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCArenaBuyChallengeTimesReq_descriptor_, &WCArenaBuyChallengeTimesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCArenaBuyChallengeTimesRsp_descriptor_, &WCArenaBuyChallengeTimesRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWArenaUpdateOpponentInfoReq_descriptor_, &CWArenaUpdateOpponentInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCArenaUpdateOpponentInfoRsp_descriptor_, &WCArenaUpdateOpponentInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWArenaTopListReq_descriptor_, &CWArenaTopListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCArenaTopListRsp_descriptor_, &WCArenaTopListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWArenaChallReq_descriptor_, &CWArenaChallReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCArenaChallRsp_descriptor_, &WCArenaChallRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaAbandonReq_descriptor_, &ArenaAbandonReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaSweepReq_descriptor_, &ArenaSweepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaSweepRsp_descriptor_, &ArenaSweepRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCArenaChallResult_descriptor_, &WCArenaChallResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCArenaCampChallResult_descriptor_, &WCArenaCampChallResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGArenaConfirmChall_descriptor_, &WGArenaConfirmChall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWArenaConfirmChall_descriptor_, &GWArenaConfirmChall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreanLoadMirrorDataCallBack_descriptor_, &AreanLoadMirrorDataCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWArenaChallResult_descriptor_, &GWArenaChallResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWArenaCampChallResult_descriptor_, &GWArenaCampChallResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWArenaRankChangeNotify_descriptor_, &GWArenaRankChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWArenaChallReq_descriptor_, &GWArenaChallReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LSendArenaReward_descriptor_, &C2LSendArenaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LArenaGetChallResultReq_descriptor_, &C2LArenaGetChallResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CArenaGetChallResultRsp_descriptor_, &L2CArenaGetChallResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LArenaGetChallRewardReq_descriptor_, &C2LArenaGetChallRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CArenaGetChallRewardRsp_descriptor_, &L2CArenaGetChallRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CArenaChallRewardNotify_descriptor_, &L2CArenaChallRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LArenaReceiveChallRewardReq_descriptor_, &C2LArenaReceiveChallRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CArenaReceiveChallRewardRsp_descriptor_, &L2CArenaReceiveChallRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LArenaDupBattleResult_descriptor_, &C2LArenaDupBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LArenaSkipBattleReq_descriptor_, &C2LArenaSkipBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CArenaSkipBattleRsp_descriptor_, &L2CArenaSkipBattleRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Arena_2eproto() {
  delete CWArenaRankInfoReq::default_instance_;
  delete CWArenaRankInfoReq_reflection_;
  delete ArenaRankInfo::default_instance_;
  delete ArenaRankInfo_reflection_;
  delete WCArenaRankInfoRsp::default_instance_;
  delete WCArenaRankInfoRsp_reflection_;
  delete WCArenaBuyChallengeTimesReq::default_instance_;
  delete WCArenaBuyChallengeTimesReq_reflection_;
  delete WCArenaBuyChallengeTimesRsp::default_instance_;
  delete WCArenaBuyChallengeTimesRsp_reflection_;
  delete CWArenaUpdateOpponentInfoReq::default_instance_;
  delete CWArenaUpdateOpponentInfoReq_reflection_;
  delete WCArenaUpdateOpponentInfoRsp::default_instance_;
  delete WCArenaUpdateOpponentInfoRsp_reflection_;
  delete CWArenaTopListReq::default_instance_;
  delete CWArenaTopListReq_reflection_;
  delete WCArenaTopListRsp::default_instance_;
  delete WCArenaTopListRsp_reflection_;
  delete CWArenaChallReq::default_instance_;
  delete CWArenaChallReq_reflection_;
  delete WCArenaChallRsp::default_instance_;
  delete WCArenaChallRsp_reflection_;
  delete ArenaAbandonReq::default_instance_;
  delete ArenaAbandonReq_reflection_;
  delete ArenaSweepReq::default_instance_;
  delete ArenaSweepReq_reflection_;
  delete ArenaSweepRsp::default_instance_;
  delete ArenaSweepRsp_reflection_;
  delete WCArenaChallResult::default_instance_;
  delete WCArenaChallResult_reflection_;
  delete WCArenaCampChallResult::default_instance_;
  delete WCArenaCampChallResult_reflection_;
  delete WGArenaConfirmChall::default_instance_;
  delete WGArenaConfirmChall_reflection_;
  delete GWArenaConfirmChall::default_instance_;
  delete GWArenaConfirmChall_reflection_;
  delete AreanLoadMirrorDataCallBack::default_instance_;
  delete AreanLoadMirrorDataCallBack_reflection_;
  delete GWArenaChallResult::default_instance_;
  delete GWArenaChallResult_reflection_;
  delete GWArenaCampChallResult::default_instance_;
  delete GWArenaCampChallResult_reflection_;
  delete GWArenaRankChangeNotify::default_instance_;
  delete GWArenaRankChangeNotify_reflection_;
  delete GWArenaChallReq::default_instance_;
  delete GWArenaChallReq_reflection_;
  delete C2LSendArenaReward::default_instance_;
  delete C2LSendArenaReward_reflection_;
  delete C2LArenaGetChallResultReq::default_instance_;
  delete C2LArenaGetChallResultReq_reflection_;
  delete L2CArenaGetChallResultRsp::default_instance_;
  delete L2CArenaGetChallResultRsp_reflection_;
  delete C2LArenaGetChallRewardReq::default_instance_;
  delete C2LArenaGetChallRewardReq_reflection_;
  delete L2CArenaGetChallRewardRsp::default_instance_;
  delete L2CArenaGetChallRewardRsp_reflection_;
  delete L2CArenaChallRewardNotify::default_instance_;
  delete L2CArenaChallRewardNotify_reflection_;
  delete C2LArenaReceiveChallRewardReq::default_instance_;
  delete C2LArenaReceiveChallRewardReq_reflection_;
  delete L2CArenaReceiveChallRewardRsp::default_instance_;
  delete L2CArenaReceiveChallRewardRsp_reflection_;
  delete C2LArenaDupBattleResult::default_instance_;
  delete C2LArenaDupBattleResult_reflection_;
  delete C2LArenaSkipBattleReq::default_instance_;
  delete C2LArenaSkipBattleReq_reflection_;
  delete L2CArenaSkipBattleRsp::default_instance_;
  delete L2CArenaSkipBattleRsp_reflection_;
}

void protobuf_AddDesc_Arena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Arena.proto\022\010proto_ff\032\tCom.proto\032\017ComD"
    "efine.proto\";\n\022CWArenaRankInfoReq\022\017\n\007cha"
    "r_id\030\001 \001(\004\022\024\n\014can_miao_sha\030\002 \001(\010\"\304\001\n\rAre"
    "naRankInfo\022\r\n\005dstId\030\001 \001(\004\022\014\n\004type\030\002 \001(\r\022"
    "\017\n\007dstName\030\003 \001(\t\022\016\n\006rankId\030\004 \001(\r\022\n\n\002lv\030\005"
    " \001(\r\022\r\n\005fight\030\006 \001(\r\022\014\n\004prof\030\010 \001(\r\022)\n\006fac"
    "ade\030\t \001(\0132\031.proto_ff.RoleFacadeProto\022\r\n\005"
    "vipLv\030\n \001(\005\022\022\n\nchall_type\030\013 \001(\005\"\256\001\n\022WCAr"
    "enaRankInfoRsp\022\013\n\003ret\030\001 \001(\r\022\016\n\006charId\030\002 "
    "\001(\004\022\016\n\006rankId\030\003 \001(\r\022.\n\rarenaRankInfo\030\004 \003"
    "(\0132\027.proto_ff.ArenaRankInfo\022\r\n\005times\030\005 \001"
    "(\r\022\021\n\tall_times\030\006 \001(\r\022\031\n\021buyChallengeTim"
    "es\030\007 \001(\005\"\035\n\033WCArenaBuyChallengeTimesReq\""
    "k\n\033WCArenaBuyChallengeTimesRsp\022\017\n\007retCod"
    "e\030\001 \001(\005\022\r\n\005times\030\002 \001(\r\022\021\n\tall_times\030\003 \001("
    "\r\022\031\n\021buyChallengeTimes\030\004 \001(\005\"E\n\034CWArenaU"
    "pdateOpponentInfoReq\022\017\n\007char_id\030\001 \001(\004\022\024\n"
    "\014can_miao_sha\030\002 \001(\010\"i\n\034WCArenaUpdateOppo"
    "nentInfoRsp\022\013\n\003ret\030\001 \001(\r\022.\n\rarenaRankInf"
    "o\030\002 \003(\0132\027.proto_ff.ArenaRankInfo\022\014\n\004rank"
    "\030\003 \001(\r\"\023\n\021CWArenaTopListReq\"P\n\021WCArenaTo"
    "pListRsp\022\013\n\003ret\030\001 \001(\r\022.\n\rarenaRankInfo\030\002"
    " \003(\0132\027.proto_ff.ArenaRankInfo\"R\n\017CWArena"
    "ChallReq\022\r\n\005dstId\030\001 \001(\004\022\016\n\006rankId\030\002 \001(\r\022"
    "\014\n\004type\030\003 \001(\r\022\022\n\nchall_type\030\004 \001(\r\"\036\n\017WCA"
    "renaChallRsp\022\013\n\003ret\030\001 \001(\r\"\021\n\017ArenaAbando"
    "nReq\"\017\n\rArenaSweepReq\"i\n\rArenaSweepRsp\022\013"
    "\n\003ret\030\001 \001(\r\022\026\n\016challengeTimes\030\002 \001(\005\022\021\n\ts"
    "weep_num\030\003 \001(\005\022 \n\005items\030\004 \003(\0132\021.proto_ff"
    ".ComItem\"g\n\022WCArenaChallResult\022\013\n\003ret\030\001 "
    "\002(\r\022\016\n\006rankId\030\002 \001(\r\022\022\n\nold_rankId\030\003 \001(\r\022"
    " \n\005items\030\004 \003(\0132\021.proto_ff.ComItem\"%\n\026WCA"
    "renaCampChallResult\022\013\n\003ret\030\001 \001(\r\"B\n\023WGAr"
    "enaConfirmChall\022\016\n\006charId\030\001 \001(\004\022\r\n\005dstId"
    "\030\002 \001(\004\022\014\n\004type\030\003 \001(\r\"O\n\023GWArenaConfirmCh"
    "all\022\016\n\006charId\030\001 \001(\004\022\r\n\005dstId\030\002 \001(\004\022\014\n\004ty"
    "pe\030\004 \001(\r\022\013\n\003ret\030\005 \001(\r\"<\n\033AreanLoadMirror"
    "DataCallBack\022\016\n\006charId\030\001 \001(\004\022\r\n\005dstId\030\002 "
    "\001(\004\"\321\001\n\022GWArenaChallResult\022\021\n\tsrcCharId\030"
    "\001 \001(\004\022\020\n\010srcScore\030\002 \001(\r\022\021\n\tdstCharId\030\003 \001"
    "(\004\022\014\n\004type\030\004 \001(\r\022\013\n\003ret\030\005 \001(\r\022\025\n\rhistory"
    "RankId\030\006 \001(\r\022\024\n\014continue_win\030\007 \001(\r\022\022\n\nbe"
    "gin_time\030\010 \001(\004\022\025\n\rchallenge_num\030\t \001(\005\022\020\n"
    "\010playerLv\030\n \001(\005\"8\n\026GWArenaCampChallResul"
    "t\022\021\n\tsrcCharId\030\001 \001(\004\022\013\n\003ret\030\002 \001(\r\"7\n\027GWA"
    "renaRankChangeNotify\022\016\n\006charid\030\001 \001(\004\022\014\n\004"
    "rank\030\002 \001(\005\"\204\001\n\017GWArenaChallReq\022\r\n\005srcId\030"
    "\001 \001(\004\022\r\n\005dstId\030\002 \001(\004\022\016\n\006rankId\030\003 \001(\r\022\014\n\004"
    "type\030\004 \001(\r\022\022\n\nchall_type\030\005 \001(\r\022\023\n\013can_mi"
    "aosha\030\006 \001(\r\022\014\n\004mult\030\007 \001(\005\"F\n\022C2LSendAren"
    "aReward\022\016\n\006charId\030\001 \001(\004\022 \n\005items\030\002 \003(\0132\021"
    ".proto_ff.ComItem\"\033\n\031C2LArenaGetChallRes"
    "ultReq\"Z\n\031L2CArenaGetChallResultRsp\022\013\n\003r"
    "et\030\001 \001(\005\0220\n\014chall_result\030\002 \003(\0132\032.proto_f"
    "f.ArenaChallResult\"\033\n\031C2LArenaGetChallRe"
    "wardReq\"T\n\031L2CArenaGetChallRewardRsp\022\013\n\003"
    "ret\030\001 \001(\005\022*\n\006reward\030\002 \003(\0132\032.proto_ff.Cha"
    "llArenaReward\"~\n\031L2CArenaChallRewardNoti"
    "fy\022\013\n\003ret\030\001 \001(\005\022*\n\006reward\030\002 \003(\0132\032.proto_"
    "ff.ChallArenaReward\022\017\n\007rank_id\030\003 \001(\005\022\027\n\017"
    "history_rank_id\030\004 \001(\005\"+\n\035C2LArenaReceive"
    "ChallRewardReq\022\n\n\002id\030\001 \001(\004\"X\n\035L2CArenaRe"
    "ceiveChallRewardRsp\022\013\n\003ret\030\001 \001(\005\022*\n\006rewa"
    "rd\030\002 \003(\0132\032.proto_ff.ChallArenaReward\"o\n\027"
    "C2LArenaDupBattleResult\022\017\n\007char_id\030\001 \001(\004"
    "\022\021\n\tchar_rank\030\002 \001(\004\022\016\n\006dst_id\030\003 \001(\004\022\020\n\010d"
    "st_rank\030\004 \001(\004\022\016\n\006result\030\010 \001(\r\"\027\n\025C2LAren"
    "aSkipBattleReq\"$\n\025L2CArenaSkipBattleRsp\022"
    "\013\n\003ret\030\001 \001(\005*3\n\024ARENA_CHALL_RESULT_E\022\014\n\010"
    "ACRE_WIN\020\000\022\r\n\tACRE_LOSE\020\001", 2785);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Arena.proto", &protobuf_RegisterTypes);
  CWArenaRankInfoReq::default_instance_ = new CWArenaRankInfoReq();
  ArenaRankInfo::default_instance_ = new ArenaRankInfo();
  WCArenaRankInfoRsp::default_instance_ = new WCArenaRankInfoRsp();
  WCArenaBuyChallengeTimesReq::default_instance_ = new WCArenaBuyChallengeTimesReq();
  WCArenaBuyChallengeTimesRsp::default_instance_ = new WCArenaBuyChallengeTimesRsp();
  CWArenaUpdateOpponentInfoReq::default_instance_ = new CWArenaUpdateOpponentInfoReq();
  WCArenaUpdateOpponentInfoRsp::default_instance_ = new WCArenaUpdateOpponentInfoRsp();
  CWArenaTopListReq::default_instance_ = new CWArenaTopListReq();
  WCArenaTopListRsp::default_instance_ = new WCArenaTopListRsp();
  CWArenaChallReq::default_instance_ = new CWArenaChallReq();
  WCArenaChallRsp::default_instance_ = new WCArenaChallRsp();
  ArenaAbandonReq::default_instance_ = new ArenaAbandonReq();
  ArenaSweepReq::default_instance_ = new ArenaSweepReq();
  ArenaSweepRsp::default_instance_ = new ArenaSweepRsp();
  WCArenaChallResult::default_instance_ = new WCArenaChallResult();
  WCArenaCampChallResult::default_instance_ = new WCArenaCampChallResult();
  WGArenaConfirmChall::default_instance_ = new WGArenaConfirmChall();
  GWArenaConfirmChall::default_instance_ = new GWArenaConfirmChall();
  AreanLoadMirrorDataCallBack::default_instance_ = new AreanLoadMirrorDataCallBack();
  GWArenaChallResult::default_instance_ = new GWArenaChallResult();
  GWArenaCampChallResult::default_instance_ = new GWArenaCampChallResult();
  GWArenaRankChangeNotify::default_instance_ = new GWArenaRankChangeNotify();
  GWArenaChallReq::default_instance_ = new GWArenaChallReq();
  C2LSendArenaReward::default_instance_ = new C2LSendArenaReward();
  C2LArenaGetChallResultReq::default_instance_ = new C2LArenaGetChallResultReq();
  L2CArenaGetChallResultRsp::default_instance_ = new L2CArenaGetChallResultRsp();
  C2LArenaGetChallRewardReq::default_instance_ = new C2LArenaGetChallRewardReq();
  L2CArenaGetChallRewardRsp::default_instance_ = new L2CArenaGetChallRewardRsp();
  L2CArenaChallRewardNotify::default_instance_ = new L2CArenaChallRewardNotify();
  C2LArenaReceiveChallRewardReq::default_instance_ = new C2LArenaReceiveChallRewardReq();
  L2CArenaReceiveChallRewardRsp::default_instance_ = new L2CArenaReceiveChallRewardRsp();
  C2LArenaDupBattleResult::default_instance_ = new C2LArenaDupBattleResult();
  C2LArenaSkipBattleReq::default_instance_ = new C2LArenaSkipBattleReq();
  L2CArenaSkipBattleRsp::default_instance_ = new L2CArenaSkipBattleRsp();
  CWArenaRankInfoReq::default_instance_->InitAsDefaultInstance();
  ArenaRankInfo::default_instance_->InitAsDefaultInstance();
  WCArenaRankInfoRsp::default_instance_->InitAsDefaultInstance();
  WCArenaBuyChallengeTimesReq::default_instance_->InitAsDefaultInstance();
  WCArenaBuyChallengeTimesRsp::default_instance_->InitAsDefaultInstance();
  CWArenaUpdateOpponentInfoReq::default_instance_->InitAsDefaultInstance();
  WCArenaUpdateOpponentInfoRsp::default_instance_->InitAsDefaultInstance();
  CWArenaTopListReq::default_instance_->InitAsDefaultInstance();
  WCArenaTopListRsp::default_instance_->InitAsDefaultInstance();
  CWArenaChallReq::default_instance_->InitAsDefaultInstance();
  WCArenaChallRsp::default_instance_->InitAsDefaultInstance();
  ArenaAbandonReq::default_instance_->InitAsDefaultInstance();
  ArenaSweepReq::default_instance_->InitAsDefaultInstance();
  ArenaSweepRsp::default_instance_->InitAsDefaultInstance();
  WCArenaChallResult::default_instance_->InitAsDefaultInstance();
  WCArenaCampChallResult::default_instance_->InitAsDefaultInstance();
  WGArenaConfirmChall::default_instance_->InitAsDefaultInstance();
  GWArenaConfirmChall::default_instance_->InitAsDefaultInstance();
  AreanLoadMirrorDataCallBack::default_instance_->InitAsDefaultInstance();
  GWArenaChallResult::default_instance_->InitAsDefaultInstance();
  GWArenaCampChallResult::default_instance_->InitAsDefaultInstance();
  GWArenaRankChangeNotify::default_instance_->InitAsDefaultInstance();
  GWArenaChallReq::default_instance_->InitAsDefaultInstance();
  C2LSendArenaReward::default_instance_->InitAsDefaultInstance();
  C2LArenaGetChallResultReq::default_instance_->InitAsDefaultInstance();
  L2CArenaGetChallResultRsp::default_instance_->InitAsDefaultInstance();
  C2LArenaGetChallRewardReq::default_instance_->InitAsDefaultInstance();
  L2CArenaGetChallRewardRsp::default_instance_->InitAsDefaultInstance();
  L2CArenaChallRewardNotify::default_instance_->InitAsDefaultInstance();
  C2LArenaReceiveChallRewardReq::default_instance_->InitAsDefaultInstance();
  L2CArenaReceiveChallRewardRsp::default_instance_->InitAsDefaultInstance();
  C2LArenaDupBattleResult::default_instance_->InitAsDefaultInstance();
  C2LArenaSkipBattleReq::default_instance_->InitAsDefaultInstance();
  L2CArenaSkipBattleRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Arena_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Arena_2eproto {
  StaticDescriptorInitializer_Arena_2eproto() {
    protobuf_AddDesc_Arena_2eproto();
  }
} static_descriptor_initializer_Arena_2eproto_;
const ::google::protobuf::EnumDescriptor* ARENA_CHALL_RESULT_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENA_CHALL_RESULT_E_descriptor_;
}
bool ARENA_CHALL_RESULT_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CWArenaRankInfoReq::kCharIdFieldNumber;
const int CWArenaRankInfoReq::kCanMiaoShaFieldNumber;
#endif  // !_MSC_VER

CWArenaRankInfoReq::CWArenaRankInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWArenaRankInfoReq::InitAsDefaultInstance() {
}

CWArenaRankInfoReq::CWArenaRankInfoReq(const CWArenaRankInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWArenaRankInfoReq::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = GOOGLE_ULONGLONG(0);
  can_miao_sha_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWArenaRankInfoReq::~CWArenaRankInfoReq() {
  SharedDtor();
}

void CWArenaRankInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWArenaRankInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWArenaRankInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWArenaRankInfoReq_descriptor_;
}

const CWArenaRankInfoReq& CWArenaRankInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

CWArenaRankInfoReq* CWArenaRankInfoReq::default_instance_ = NULL;

CWArenaRankInfoReq* CWArenaRankInfoReq::New() const {
  return new CWArenaRankInfoReq;
}

void CWArenaRankInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = GOOGLE_ULONGLONG(0);
    can_miao_sha_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWArenaRankInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_miao_sha;
        break;
      }

      // optional bool can_miao_sha = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_miao_sha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_miao_sha_)));
          set_has_can_miao_sha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWArenaRankInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->char_id(), output);
  }

  // optional bool can_miao_sha = 2;
  if (has_can_miao_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_miao_sha(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWArenaRankInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->char_id(), target);
  }

  // optional bool can_miao_sha = 2;
  if (has_can_miao_sha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_miao_sha(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWArenaRankInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->char_id());
    }

    // optional bool can_miao_sha = 2;
    if (has_can_miao_sha()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWArenaRankInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWArenaRankInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWArenaRankInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWArenaRankInfoReq::MergeFrom(const CWArenaRankInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_can_miao_sha()) {
      set_can_miao_sha(from.can_miao_sha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWArenaRankInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWArenaRankInfoReq::CopyFrom(const CWArenaRankInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWArenaRankInfoReq::IsInitialized() const {

  return true;
}

void CWArenaRankInfoReq::Swap(CWArenaRankInfoReq* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(can_miao_sha_, other->can_miao_sha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWArenaRankInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWArenaRankInfoReq_descriptor_;
  metadata.reflection = CWArenaRankInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRankInfo::kDstIdFieldNumber;
const int ArenaRankInfo::kTypeFieldNumber;
const int ArenaRankInfo::kDstNameFieldNumber;
const int ArenaRankInfo::kRankIdFieldNumber;
const int ArenaRankInfo::kLvFieldNumber;
const int ArenaRankInfo::kFightFieldNumber;
const int ArenaRankInfo::kProfFieldNumber;
const int ArenaRankInfo::kFacadeFieldNumber;
const int ArenaRankInfo::kVipLvFieldNumber;
const int ArenaRankInfo::kChallTypeFieldNumber;
#endif  // !_MSC_VER

ArenaRankInfo::ArenaRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRankInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

ArenaRankInfo::ArenaRankInfo(const ArenaRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRankInfo::SharedCtor() {
  _cached_size_ = 0;
  dstid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  dstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rankid_ = 0u;
  lv_ = 0u;
  fight_ = 0u;
  prof_ = 0u;
  facade_ = NULL;
  viplv_ = 0;
  chall_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRankInfo::~ArenaRankInfo() {
  SharedDtor();
}

void ArenaRankInfo::SharedDtor() {
  if (dstname_ != &::google::protobuf::internal::kEmptyString) {
    delete dstname_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void ArenaRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRankInfo_descriptor_;
}

const ArenaRankInfo& ArenaRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

ArenaRankInfo* ArenaRankInfo::default_instance_ = NULL;

ArenaRankInfo* ArenaRankInfo::New() const {
  return new ArenaRankInfo;
}

void ArenaRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dstid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    if (has_dstname()) {
      if (dstname_ != &::google::protobuf::internal::kEmptyString) {
        dstname_->clear();
      }
    }
    rankid_ = 0u;
    lv_ = 0u;
    fight_ = 0u;
    prof_ = 0u;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    viplv_ = 0;
    chall_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dstId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dstName;
        break;
      }

      // optional string dstName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dstname().data(), this->dstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rankId;
        break;
      }

      // optional uint32 rankId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // optional uint32 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vipLv;
        break;
      }

      // optional int32 vipLv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_chall_type;
        break;
      }

      // optional int32 chall_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chall_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chall_type_)));
          set_has_chall_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dstId = 1;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dstid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string dstName = 3;
  if (has_dstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstname().data(), this->dstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dstname(), output);
  }

  // optional uint32 rankId = 4;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rankid(), output);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // optional uint32 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fight(), output);
  }

  // optional uint32 prof = 8;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->prof(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 9;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->facade(), output);
  }

  // optional int32 vipLv = 10;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->viplv(), output);
  }

  // optional int32 chall_type = 11;
  if (has_chall_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->chall_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dstId = 1;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dstid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string dstName = 3;
  if (has_dstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dstname().data(), this->dstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dstname(), target);
  }

  // optional uint32 rankId = 4;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rankid(), target);
  }

  // optional uint32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lv(), target);
  }

  // optional uint32 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fight(), target);
  }

  // optional uint32 prof = 8;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->prof(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 9;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->facade(), target);
  }

  // optional int32 vipLv = 10;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->viplv(), target);
  }

  // optional int32 chall_type = 11;
  if (has_chall_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->chall_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dstId = 1;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string dstName = 3;
    if (has_dstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dstname());
    }

    // optional uint32 rankId = 4;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight());
    }

    // optional uint32 prof = 8;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional .proto_ff.RoleFacadeProto facade = 9;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vipLv = 10;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // optional int32 chall_type = 11;
    if (has_chall_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chall_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRankInfo::MergeFrom(const ArenaRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dstname()) {
      set_dstname(from.dstname());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_chall_type()) {
      set_chall_type(from.chall_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRankInfo::CopyFrom(const ArenaRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRankInfo::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void ArenaRankInfo::Swap(ArenaRankInfo* other) {
  if (other != this) {
    std::swap(dstid_, other->dstid_);
    std::swap(type_, other->type_);
    std::swap(dstname_, other->dstname_);
    std::swap(rankid_, other->rankid_);
    std::swap(lv_, other->lv_);
    std::swap(fight_, other->fight_);
    std::swap(prof_, other->prof_);
    std::swap(facade_, other->facade_);
    std::swap(viplv_, other->viplv_);
    std::swap(chall_type_, other->chall_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRankInfo_descriptor_;
  metadata.reflection = ArenaRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCArenaRankInfoRsp::kRetFieldNumber;
const int WCArenaRankInfoRsp::kCharIdFieldNumber;
const int WCArenaRankInfoRsp::kRankIdFieldNumber;
const int WCArenaRankInfoRsp::kArenaRankInfoFieldNumber;
const int WCArenaRankInfoRsp::kTimesFieldNumber;
const int WCArenaRankInfoRsp::kAllTimesFieldNumber;
const int WCArenaRankInfoRsp::kBuyChallengeTimesFieldNumber;
#endif  // !_MSC_VER

WCArenaRankInfoRsp::WCArenaRankInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCArenaRankInfoRsp::InitAsDefaultInstance() {
}

WCArenaRankInfoRsp::WCArenaRankInfoRsp(const WCArenaRankInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCArenaRankInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  rankid_ = 0u;
  times_ = 0u;
  all_times_ = 0u;
  buychallengetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCArenaRankInfoRsp::~WCArenaRankInfoRsp() {
  SharedDtor();
}

void WCArenaRankInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCArenaRankInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCArenaRankInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCArenaRankInfoRsp_descriptor_;
}

const WCArenaRankInfoRsp& WCArenaRankInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WCArenaRankInfoRsp* WCArenaRankInfoRsp::default_instance_ = NULL;

WCArenaRankInfoRsp* WCArenaRankInfoRsp::New() const {
  return new WCArenaRankInfoRsp;
}

void WCArenaRankInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    charid_ = GOOGLE_ULONGLONG(0);
    rankid_ = 0u;
    times_ = 0u;
    all_times_ = 0u;
    buychallengetimes_ = 0;
  }
  arenarankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCArenaRankInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankId;
        break;
      }

      // optional uint32 rankId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arenaRankInfo;
        break;
      }

      // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenarankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_arenaRankInfo;
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional uint32 times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_all_times;
        break;
      }

      // optional uint32 all_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_times_)));
          set_has_all_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buyChallengeTimes;
        break;
      }

      // optional int32 buyChallengeTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyChallengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buychallengetimes_)));
          set_has_buychallengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCArenaRankInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 rankId = 3;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rankid(), output);
  }

  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 4;
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arenarankinfo(i), output);
  }

  // optional uint32 times = 5;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->times(), output);
  }

  // optional uint32 all_times = 6;
  if (has_all_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->all_times(), output);
  }

  // optional int32 buyChallengeTimes = 7;
  if (has_buychallengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buychallengetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCArenaRankInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 rankId = 3;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rankid(), target);
  }

  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 4;
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arenarankinfo(i), target);
  }

  // optional uint32 times = 5;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->times(), target);
  }

  // optional uint32 all_times = 6;
  if (has_all_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->all_times(), target);
  }

  // optional int32 buyChallengeTimes = 7;
  if (has_buychallengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buychallengetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCArenaRankInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 rankId = 3;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 times = 5;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 all_times = 6;
    if (has_all_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_times());
    }

    // optional int32 buyChallengeTimes = 7;
    if (has_buychallengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buychallengetimes());
    }

  }
  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 4;
  total_size += 1 * this->arenarankinfo_size();
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenarankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCArenaRankInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCArenaRankInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCArenaRankInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCArenaRankInfoRsp::MergeFrom(const WCArenaRankInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenarankinfo_.MergeFrom(from.arenarankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_all_times()) {
      set_all_times(from.all_times());
    }
    if (from.has_buychallengetimes()) {
      set_buychallengetimes(from.buychallengetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCArenaRankInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCArenaRankInfoRsp::CopyFrom(const WCArenaRankInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCArenaRankInfoRsp::IsInitialized() const {

  for (int i = 0; i < arenarankinfo_size(); i++) {
    if (!this->arenarankinfo(i).IsInitialized()) return false;
  }
  return true;
}

void WCArenaRankInfoRsp::Swap(WCArenaRankInfoRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(rankid_, other->rankid_);
    arenarankinfo_.Swap(&other->arenarankinfo_);
    std::swap(times_, other->times_);
    std::swap(all_times_, other->all_times_);
    std::swap(buychallengetimes_, other->buychallengetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCArenaRankInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCArenaRankInfoRsp_descriptor_;
  metadata.reflection = WCArenaRankInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WCArenaBuyChallengeTimesReq::WCArenaBuyChallengeTimesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCArenaBuyChallengeTimesReq::InitAsDefaultInstance() {
}

WCArenaBuyChallengeTimesReq::WCArenaBuyChallengeTimesReq(const WCArenaBuyChallengeTimesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCArenaBuyChallengeTimesReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCArenaBuyChallengeTimesReq::~WCArenaBuyChallengeTimesReq() {
  SharedDtor();
}

void WCArenaBuyChallengeTimesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCArenaBuyChallengeTimesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCArenaBuyChallengeTimesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCArenaBuyChallengeTimesReq_descriptor_;
}

const WCArenaBuyChallengeTimesReq& WCArenaBuyChallengeTimesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WCArenaBuyChallengeTimesReq* WCArenaBuyChallengeTimesReq::default_instance_ = NULL;

WCArenaBuyChallengeTimesReq* WCArenaBuyChallengeTimesReq::New() const {
  return new WCArenaBuyChallengeTimesReq;
}

void WCArenaBuyChallengeTimesReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCArenaBuyChallengeTimesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WCArenaBuyChallengeTimesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCArenaBuyChallengeTimesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCArenaBuyChallengeTimesReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCArenaBuyChallengeTimesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCArenaBuyChallengeTimesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCArenaBuyChallengeTimesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCArenaBuyChallengeTimesReq::MergeFrom(const WCArenaBuyChallengeTimesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCArenaBuyChallengeTimesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCArenaBuyChallengeTimesReq::CopyFrom(const WCArenaBuyChallengeTimesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCArenaBuyChallengeTimesReq::IsInitialized() const {

  return true;
}

void WCArenaBuyChallengeTimesReq::Swap(WCArenaBuyChallengeTimesReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCArenaBuyChallengeTimesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCArenaBuyChallengeTimesReq_descriptor_;
  metadata.reflection = WCArenaBuyChallengeTimesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCArenaBuyChallengeTimesRsp::kRetCodeFieldNumber;
const int WCArenaBuyChallengeTimesRsp::kTimesFieldNumber;
const int WCArenaBuyChallengeTimesRsp::kAllTimesFieldNumber;
const int WCArenaBuyChallengeTimesRsp::kBuyChallengeTimesFieldNumber;
#endif  // !_MSC_VER

WCArenaBuyChallengeTimesRsp::WCArenaBuyChallengeTimesRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCArenaBuyChallengeTimesRsp::InitAsDefaultInstance() {
}

WCArenaBuyChallengeTimesRsp::WCArenaBuyChallengeTimesRsp(const WCArenaBuyChallengeTimesRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCArenaBuyChallengeTimesRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  times_ = 0u;
  all_times_ = 0u;
  buychallengetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCArenaBuyChallengeTimesRsp::~WCArenaBuyChallengeTimesRsp() {
  SharedDtor();
}

void WCArenaBuyChallengeTimesRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCArenaBuyChallengeTimesRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCArenaBuyChallengeTimesRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCArenaBuyChallengeTimesRsp_descriptor_;
}

const WCArenaBuyChallengeTimesRsp& WCArenaBuyChallengeTimesRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WCArenaBuyChallengeTimesRsp* WCArenaBuyChallengeTimesRsp::default_instance_ = NULL;

WCArenaBuyChallengeTimesRsp* WCArenaBuyChallengeTimesRsp::New() const {
  return new WCArenaBuyChallengeTimesRsp;
}

void WCArenaBuyChallengeTimesRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    times_ = 0u;
    all_times_ = 0u;
    buychallengetimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCArenaBuyChallengeTimesRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_all_times;
        break;
      }

      // optional uint32 all_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_times_)));
          set_has_all_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyChallengeTimes;
        break;
      }

      // optional int32 buyChallengeTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyChallengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buychallengetimes_)));
          set_has_buychallengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCArenaBuyChallengeTimesRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  // optional uint32 all_times = 3;
  if (has_all_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->all_times(), output);
  }

  // optional int32 buyChallengeTimes = 4;
  if (has_buychallengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buychallengetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCArenaBuyChallengeTimesRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  // optional uint32 all_times = 3;
  if (has_all_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->all_times(), target);
  }

  // optional int32 buyChallengeTimes = 4;
  if (has_buychallengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buychallengetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCArenaBuyChallengeTimesRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 all_times = 3;
    if (has_all_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_times());
    }

    // optional int32 buyChallengeTimes = 4;
    if (has_buychallengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buychallengetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCArenaBuyChallengeTimesRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCArenaBuyChallengeTimesRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCArenaBuyChallengeTimesRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCArenaBuyChallengeTimesRsp::MergeFrom(const WCArenaBuyChallengeTimesRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_all_times()) {
      set_all_times(from.all_times());
    }
    if (from.has_buychallengetimes()) {
      set_buychallengetimes(from.buychallengetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCArenaBuyChallengeTimesRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCArenaBuyChallengeTimesRsp::CopyFrom(const WCArenaBuyChallengeTimesRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCArenaBuyChallengeTimesRsp::IsInitialized() const {

  return true;
}

void WCArenaBuyChallengeTimesRsp::Swap(WCArenaBuyChallengeTimesRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(times_, other->times_);
    std::swap(all_times_, other->all_times_);
    std::swap(buychallengetimes_, other->buychallengetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCArenaBuyChallengeTimesRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCArenaBuyChallengeTimesRsp_descriptor_;
  metadata.reflection = WCArenaBuyChallengeTimesRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWArenaUpdateOpponentInfoReq::kCharIdFieldNumber;
const int CWArenaUpdateOpponentInfoReq::kCanMiaoShaFieldNumber;
#endif  // !_MSC_VER

CWArenaUpdateOpponentInfoReq::CWArenaUpdateOpponentInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWArenaUpdateOpponentInfoReq::InitAsDefaultInstance() {
}

CWArenaUpdateOpponentInfoReq::CWArenaUpdateOpponentInfoReq(const CWArenaUpdateOpponentInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWArenaUpdateOpponentInfoReq::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = GOOGLE_ULONGLONG(0);
  can_miao_sha_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWArenaUpdateOpponentInfoReq::~CWArenaUpdateOpponentInfoReq() {
  SharedDtor();
}

void CWArenaUpdateOpponentInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWArenaUpdateOpponentInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWArenaUpdateOpponentInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWArenaUpdateOpponentInfoReq_descriptor_;
}

const CWArenaUpdateOpponentInfoReq& CWArenaUpdateOpponentInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

CWArenaUpdateOpponentInfoReq* CWArenaUpdateOpponentInfoReq::default_instance_ = NULL;

CWArenaUpdateOpponentInfoReq* CWArenaUpdateOpponentInfoReq::New() const {
  return new CWArenaUpdateOpponentInfoReq;
}

void CWArenaUpdateOpponentInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = GOOGLE_ULONGLONG(0);
    can_miao_sha_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWArenaUpdateOpponentInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_miao_sha;
        break;
      }

      // optional bool can_miao_sha = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_miao_sha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_miao_sha_)));
          set_has_can_miao_sha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWArenaUpdateOpponentInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->char_id(), output);
  }

  // optional bool can_miao_sha = 2;
  if (has_can_miao_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_miao_sha(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWArenaUpdateOpponentInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->char_id(), target);
  }

  // optional bool can_miao_sha = 2;
  if (has_can_miao_sha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_miao_sha(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWArenaUpdateOpponentInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->char_id());
    }

    // optional bool can_miao_sha = 2;
    if (has_can_miao_sha()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWArenaUpdateOpponentInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWArenaUpdateOpponentInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWArenaUpdateOpponentInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWArenaUpdateOpponentInfoReq::MergeFrom(const CWArenaUpdateOpponentInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_can_miao_sha()) {
      set_can_miao_sha(from.can_miao_sha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWArenaUpdateOpponentInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWArenaUpdateOpponentInfoReq::CopyFrom(const CWArenaUpdateOpponentInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWArenaUpdateOpponentInfoReq::IsInitialized() const {

  return true;
}

void CWArenaUpdateOpponentInfoReq::Swap(CWArenaUpdateOpponentInfoReq* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(can_miao_sha_, other->can_miao_sha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWArenaUpdateOpponentInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWArenaUpdateOpponentInfoReq_descriptor_;
  metadata.reflection = CWArenaUpdateOpponentInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCArenaUpdateOpponentInfoRsp::kRetFieldNumber;
const int WCArenaUpdateOpponentInfoRsp::kArenaRankInfoFieldNumber;
const int WCArenaUpdateOpponentInfoRsp::kRankFieldNumber;
#endif  // !_MSC_VER

WCArenaUpdateOpponentInfoRsp::WCArenaUpdateOpponentInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCArenaUpdateOpponentInfoRsp::InitAsDefaultInstance() {
}

WCArenaUpdateOpponentInfoRsp::WCArenaUpdateOpponentInfoRsp(const WCArenaUpdateOpponentInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCArenaUpdateOpponentInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCArenaUpdateOpponentInfoRsp::~WCArenaUpdateOpponentInfoRsp() {
  SharedDtor();
}

void WCArenaUpdateOpponentInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCArenaUpdateOpponentInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCArenaUpdateOpponentInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCArenaUpdateOpponentInfoRsp_descriptor_;
}

const WCArenaUpdateOpponentInfoRsp& WCArenaUpdateOpponentInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WCArenaUpdateOpponentInfoRsp* WCArenaUpdateOpponentInfoRsp::default_instance_ = NULL;

WCArenaUpdateOpponentInfoRsp* WCArenaUpdateOpponentInfoRsp::New() const {
  return new WCArenaUpdateOpponentInfoRsp;
}

void WCArenaUpdateOpponentInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    rank_ = 0u;
  }
  arenarankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCArenaUpdateOpponentInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arenaRankInfo;
        break;
      }

      // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenarankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arenaRankInfo;
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCArenaUpdateOpponentInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 2;
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arenarankinfo(i), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCArenaUpdateOpponentInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 2;
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arenarankinfo(i), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCArenaUpdateOpponentInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 2;
  total_size += 1 * this->arenarankinfo_size();
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenarankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCArenaUpdateOpponentInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCArenaUpdateOpponentInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCArenaUpdateOpponentInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCArenaUpdateOpponentInfoRsp::MergeFrom(const WCArenaUpdateOpponentInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenarankinfo_.MergeFrom(from.arenarankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCArenaUpdateOpponentInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCArenaUpdateOpponentInfoRsp::CopyFrom(const WCArenaUpdateOpponentInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCArenaUpdateOpponentInfoRsp::IsInitialized() const {

  for (int i = 0; i < arenarankinfo_size(); i++) {
    if (!this->arenarankinfo(i).IsInitialized()) return false;
  }
  return true;
}

void WCArenaUpdateOpponentInfoRsp::Swap(WCArenaUpdateOpponentInfoRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    arenarankinfo_.Swap(&other->arenarankinfo_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCArenaUpdateOpponentInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCArenaUpdateOpponentInfoRsp_descriptor_;
  metadata.reflection = WCArenaUpdateOpponentInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWArenaTopListReq::CWArenaTopListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWArenaTopListReq::InitAsDefaultInstance() {
}

CWArenaTopListReq::CWArenaTopListReq(const CWArenaTopListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWArenaTopListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWArenaTopListReq::~CWArenaTopListReq() {
  SharedDtor();
}

void CWArenaTopListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWArenaTopListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWArenaTopListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWArenaTopListReq_descriptor_;
}

const CWArenaTopListReq& CWArenaTopListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

CWArenaTopListReq* CWArenaTopListReq::default_instance_ = NULL;

CWArenaTopListReq* CWArenaTopListReq::New() const {
  return new CWArenaTopListReq;
}

void CWArenaTopListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWArenaTopListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWArenaTopListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWArenaTopListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWArenaTopListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWArenaTopListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWArenaTopListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWArenaTopListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWArenaTopListReq::MergeFrom(const CWArenaTopListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWArenaTopListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWArenaTopListReq::CopyFrom(const CWArenaTopListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWArenaTopListReq::IsInitialized() const {

  return true;
}

void CWArenaTopListReq::Swap(CWArenaTopListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWArenaTopListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWArenaTopListReq_descriptor_;
  metadata.reflection = CWArenaTopListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCArenaTopListRsp::kRetFieldNumber;
const int WCArenaTopListRsp::kArenaRankInfoFieldNumber;
#endif  // !_MSC_VER

WCArenaTopListRsp::WCArenaTopListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCArenaTopListRsp::InitAsDefaultInstance() {
}

WCArenaTopListRsp::WCArenaTopListRsp(const WCArenaTopListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCArenaTopListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCArenaTopListRsp::~WCArenaTopListRsp() {
  SharedDtor();
}

void WCArenaTopListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCArenaTopListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCArenaTopListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCArenaTopListRsp_descriptor_;
}

const WCArenaTopListRsp& WCArenaTopListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WCArenaTopListRsp* WCArenaTopListRsp::default_instance_ = NULL;

WCArenaTopListRsp* WCArenaTopListRsp::New() const {
  return new WCArenaTopListRsp;
}

void WCArenaTopListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  arenarankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCArenaTopListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arenaRankInfo;
        break;
      }

      // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenarankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arenaRankInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCArenaTopListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 2;
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arenarankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCArenaTopListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 2;
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arenarankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCArenaTopListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .proto_ff.ArenaRankInfo arenaRankInfo = 2;
  total_size += 1 * this->arenarankinfo_size();
  for (int i = 0; i < this->arenarankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenarankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCArenaTopListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCArenaTopListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCArenaTopListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCArenaTopListRsp::MergeFrom(const WCArenaTopListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenarankinfo_.MergeFrom(from.arenarankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCArenaTopListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCArenaTopListRsp::CopyFrom(const WCArenaTopListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCArenaTopListRsp::IsInitialized() const {

  for (int i = 0; i < arenarankinfo_size(); i++) {
    if (!this->arenarankinfo(i).IsInitialized()) return false;
  }
  return true;
}

void WCArenaTopListRsp::Swap(WCArenaTopListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    arenarankinfo_.Swap(&other->arenarankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCArenaTopListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCArenaTopListRsp_descriptor_;
  metadata.reflection = WCArenaTopListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWArenaChallReq::kDstIdFieldNumber;
const int CWArenaChallReq::kRankIdFieldNumber;
const int CWArenaChallReq::kTypeFieldNumber;
const int CWArenaChallReq::kChallTypeFieldNumber;
#endif  // !_MSC_VER

CWArenaChallReq::CWArenaChallReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWArenaChallReq::InitAsDefaultInstance() {
}

CWArenaChallReq::CWArenaChallReq(const CWArenaChallReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWArenaChallReq::SharedCtor() {
  _cached_size_ = 0;
  dstid_ = GOOGLE_ULONGLONG(0);
  rankid_ = 0u;
  type_ = 0u;
  chall_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWArenaChallReq::~CWArenaChallReq() {
  SharedDtor();
}

void CWArenaChallReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWArenaChallReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWArenaChallReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWArenaChallReq_descriptor_;
}

const CWArenaChallReq& CWArenaChallReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

CWArenaChallReq* CWArenaChallReq::default_instance_ = NULL;

CWArenaChallReq* CWArenaChallReq::New() const {
  return new CWArenaChallReq;
}

void CWArenaChallReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dstid_ = GOOGLE_ULONGLONG(0);
    rankid_ = 0u;
    type_ = 0u;
    chall_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWArenaChallReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dstId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankId;
        break;
      }

      // optional uint32 rankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chall_type;
        break;
      }

      // optional uint32 chall_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chall_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chall_type_)));
          set_has_chall_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWArenaChallReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dstId = 1;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dstid(), output);
  }

  // optional uint32 rankId = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rankid(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 chall_type = 4;
  if (has_chall_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chall_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWArenaChallReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dstId = 1;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dstid(), target);
  }

  // optional uint32 rankId = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rankid(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 chall_type = 4;
  if (has_chall_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chall_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWArenaChallReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dstId = 1;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional uint32 rankId = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 chall_type = 4;
    if (has_chall_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chall_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWArenaChallReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWArenaChallReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWArenaChallReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWArenaChallReq::MergeFrom(const CWArenaChallReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_chall_type()) {
      set_chall_type(from.chall_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWArenaChallReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWArenaChallReq::CopyFrom(const CWArenaChallReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWArenaChallReq::IsInitialized() const {

  return true;
}

void CWArenaChallReq::Swap(CWArenaChallReq* other) {
  if (other != this) {
    std::swap(dstid_, other->dstid_);
    std::swap(rankid_, other->rankid_);
    std::swap(type_, other->type_);
    std::swap(chall_type_, other->chall_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWArenaChallReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWArenaChallReq_descriptor_;
  metadata.reflection = CWArenaChallReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCArenaChallRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WCArenaChallRsp::WCArenaChallRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCArenaChallRsp::InitAsDefaultInstance() {
}

WCArenaChallRsp::WCArenaChallRsp(const WCArenaChallRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCArenaChallRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCArenaChallRsp::~WCArenaChallRsp() {
  SharedDtor();
}

void WCArenaChallRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCArenaChallRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCArenaChallRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCArenaChallRsp_descriptor_;
}

const WCArenaChallRsp& WCArenaChallRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WCArenaChallRsp* WCArenaChallRsp::default_instance_ = NULL;

WCArenaChallRsp* WCArenaChallRsp::New() const {
  return new WCArenaChallRsp;
}

void WCArenaChallRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCArenaChallRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCArenaChallRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCArenaChallRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCArenaChallRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCArenaChallRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCArenaChallRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCArenaChallRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCArenaChallRsp::MergeFrom(const WCArenaChallRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCArenaChallRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCArenaChallRsp::CopyFrom(const WCArenaChallRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCArenaChallRsp::IsInitialized() const {

  return true;
}

void WCArenaChallRsp::Swap(WCArenaChallRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCArenaChallRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCArenaChallRsp_descriptor_;
  metadata.reflection = WCArenaChallRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaAbandonReq::ArenaAbandonReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaAbandonReq::InitAsDefaultInstance() {
}

ArenaAbandonReq::ArenaAbandonReq(const ArenaAbandonReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaAbandonReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaAbandonReq::~ArenaAbandonReq() {
  SharedDtor();
}

void ArenaAbandonReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaAbandonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaAbandonReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaAbandonReq_descriptor_;
}

const ArenaAbandonReq& ArenaAbandonReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

ArenaAbandonReq* ArenaAbandonReq::default_instance_ = NULL;

ArenaAbandonReq* ArenaAbandonReq::New() const {
  return new ArenaAbandonReq;
}

void ArenaAbandonReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaAbandonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ArenaAbandonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaAbandonReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaAbandonReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaAbandonReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaAbandonReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaAbandonReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaAbandonReq::MergeFrom(const ArenaAbandonReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaAbandonReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaAbandonReq::CopyFrom(const ArenaAbandonReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaAbandonReq::IsInitialized() const {

  return true;
}

void ArenaAbandonReq::Swap(ArenaAbandonReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaAbandonReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaAbandonReq_descriptor_;
  metadata.reflection = ArenaAbandonReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaSweepReq::ArenaSweepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaSweepReq::InitAsDefaultInstance() {
}

ArenaSweepReq::ArenaSweepReq(const ArenaSweepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaSweepReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaSweepReq::~ArenaSweepReq() {
  SharedDtor();
}

void ArenaSweepReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaSweepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaSweepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaSweepReq_descriptor_;
}

const ArenaSweepReq& ArenaSweepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

ArenaSweepReq* ArenaSweepReq::default_instance_ = NULL;

ArenaSweepReq* ArenaSweepReq::New() const {
  return new ArenaSweepReq;
}

void ArenaSweepReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaSweepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ArenaSweepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaSweepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaSweepReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaSweepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaSweepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaSweepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaSweepReq::MergeFrom(const ArenaSweepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaSweepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaSweepReq::CopyFrom(const ArenaSweepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaSweepReq::IsInitialized() const {

  return true;
}

void ArenaSweepReq::Swap(ArenaSweepReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaSweepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaSweepReq_descriptor_;
  metadata.reflection = ArenaSweepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaSweepRsp::kRetFieldNumber;
const int ArenaSweepRsp::kChallengeTimesFieldNumber;
const int ArenaSweepRsp::kSweepNumFieldNumber;
const int ArenaSweepRsp::kItemsFieldNumber;
#endif  // !_MSC_VER

ArenaSweepRsp::ArenaSweepRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaSweepRsp::InitAsDefaultInstance() {
}

ArenaSweepRsp::ArenaSweepRsp(const ArenaSweepRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaSweepRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  challengetimes_ = 0;
  sweep_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaSweepRsp::~ArenaSweepRsp() {
  SharedDtor();
}

void ArenaSweepRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaSweepRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaSweepRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaSweepRsp_descriptor_;
}

const ArenaSweepRsp& ArenaSweepRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

ArenaSweepRsp* ArenaSweepRsp::default_instance_ = NULL;

ArenaSweepRsp* ArenaSweepRsp::New() const {
  return new ArenaSweepRsp;
}

void ArenaSweepRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    challengetimes_ = 0;
    sweep_num_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaSweepRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_challengeTimes;
        break;
      }

      // optional int32 challengeTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengetimes_)));
          set_has_challengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sweep_num;
        break;
      }

      // optional int32 sweep_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweep_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweep_num_)));
          set_has_sweep_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComItem items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaSweepRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional int32 challengeTimes = 2;
  if (has_challengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->challengetimes(), output);
  }

  // optional int32 sweep_num = 3;
  if (has_sweep_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sweep_num(), output);
  }

  // repeated .proto_ff.ComItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaSweepRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional int32 challengeTimes = 2;
  if (has_challengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->challengetimes(), target);
  }

  // optional int32 sweep_num = 3;
  if (has_sweep_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sweep_num(), target);
  }

  // repeated .proto_ff.ComItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaSweepRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 challengeTimes = 2;
    if (has_challengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengetimes());
    }

    // optional int32 sweep_num = 3;
    if (has_sweep_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweep_num());
    }

  }
  // repeated .proto_ff.ComItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaSweepRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaSweepRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaSweepRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaSweepRsp::MergeFrom(const ArenaSweepRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_challengetimes()) {
      set_challengetimes(from.challengetimes());
    }
    if (from.has_sweep_num()) {
      set_sweep_num(from.sweep_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaSweepRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaSweepRsp::CopyFrom(const ArenaSweepRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaSweepRsp::IsInitialized() const {

  return true;
}

void ArenaSweepRsp::Swap(ArenaSweepRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(challengetimes_, other->challengetimes_);
    std::swap(sweep_num_, other->sweep_num_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaSweepRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaSweepRsp_descriptor_;
  metadata.reflection = ArenaSweepRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCArenaChallResult::kRetFieldNumber;
const int WCArenaChallResult::kRankIdFieldNumber;
const int WCArenaChallResult::kOldRankIdFieldNumber;
const int WCArenaChallResult::kItemsFieldNumber;
#endif  // !_MSC_VER

WCArenaChallResult::WCArenaChallResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCArenaChallResult::InitAsDefaultInstance() {
}

WCArenaChallResult::WCArenaChallResult(const WCArenaChallResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCArenaChallResult::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  rankid_ = 0u;
  old_rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCArenaChallResult::~WCArenaChallResult() {
  SharedDtor();
}

void WCArenaChallResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCArenaChallResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCArenaChallResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCArenaChallResult_descriptor_;
}

const WCArenaChallResult& WCArenaChallResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WCArenaChallResult* WCArenaChallResult::default_instance_ = NULL;

WCArenaChallResult* WCArenaChallResult::New() const {
  return new WCArenaChallResult;
}

void WCArenaChallResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    rankid_ = 0u;
    old_rankid_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCArenaChallResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankId;
        break;
      }

      // optional uint32 rankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_old_rankId;
        break;
      }

      // optional uint32 old_rankId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_rankid_)));
          set_has_old_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComItem items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCArenaChallResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint32 rankId = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rankid(), output);
  }

  // optional uint32 old_rankId = 3;
  if (has_old_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_rankid(), output);
  }

  // repeated .proto_ff.ComItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCArenaChallResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 rankId = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rankid(), target);
  }

  // optional uint32 old_rankId = 3;
  if (has_old_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_rankid(), target);
  }

  // repeated .proto_ff.ComItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCArenaChallResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 rankId = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 old_rankId = 3;
    if (has_old_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_rankid());
    }

  }
  // repeated .proto_ff.ComItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCArenaChallResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCArenaChallResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCArenaChallResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCArenaChallResult::MergeFrom(const WCArenaChallResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_old_rankid()) {
      set_old_rankid(from.old_rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCArenaChallResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCArenaChallResult::CopyFrom(const WCArenaChallResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCArenaChallResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WCArenaChallResult::Swap(WCArenaChallResult* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(rankid_, other->rankid_);
    std::swap(old_rankid_, other->old_rankid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCArenaChallResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCArenaChallResult_descriptor_;
  metadata.reflection = WCArenaChallResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCArenaCampChallResult::kRetFieldNumber;
#endif  // !_MSC_VER

WCArenaCampChallResult::WCArenaCampChallResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCArenaCampChallResult::InitAsDefaultInstance() {
}

WCArenaCampChallResult::WCArenaCampChallResult(const WCArenaCampChallResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCArenaCampChallResult::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCArenaCampChallResult::~WCArenaCampChallResult() {
  SharedDtor();
}

void WCArenaCampChallResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCArenaCampChallResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCArenaCampChallResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCArenaCampChallResult_descriptor_;
}

const WCArenaCampChallResult& WCArenaCampChallResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WCArenaCampChallResult* WCArenaCampChallResult::default_instance_ = NULL;

WCArenaCampChallResult* WCArenaCampChallResult::New() const {
  return new WCArenaCampChallResult;
}

void WCArenaCampChallResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCArenaCampChallResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCArenaCampChallResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCArenaCampChallResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCArenaCampChallResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCArenaCampChallResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCArenaCampChallResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCArenaCampChallResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCArenaCampChallResult::MergeFrom(const WCArenaCampChallResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCArenaCampChallResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCArenaCampChallResult::CopyFrom(const WCArenaCampChallResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCArenaCampChallResult::IsInitialized() const {

  return true;
}

void WCArenaCampChallResult::Swap(WCArenaCampChallResult* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCArenaCampChallResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCArenaCampChallResult_descriptor_;
  metadata.reflection = WCArenaCampChallResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGArenaConfirmChall::kCharIdFieldNumber;
const int WGArenaConfirmChall::kDstIdFieldNumber;
const int WGArenaConfirmChall::kTypeFieldNumber;
#endif  // !_MSC_VER

WGArenaConfirmChall::WGArenaConfirmChall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGArenaConfirmChall::InitAsDefaultInstance() {
}

WGArenaConfirmChall::WGArenaConfirmChall(const WGArenaConfirmChall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGArenaConfirmChall::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGArenaConfirmChall::~WGArenaConfirmChall() {
  SharedDtor();
}

void WGArenaConfirmChall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGArenaConfirmChall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGArenaConfirmChall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGArenaConfirmChall_descriptor_;
}

const WGArenaConfirmChall& WGArenaConfirmChall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

WGArenaConfirmChall* WGArenaConfirmChall::default_instance_ = NULL;

WGArenaConfirmChall* WGArenaConfirmChall::New() const {
  return new WGArenaConfirmChall;
}

void WGArenaConfirmChall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGArenaConfirmChall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstId;
        break;
      }

      // optional uint64 dstId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGArenaConfirmChall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint64 dstId = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGArenaConfirmChall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint64 dstId = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGArenaConfirmChall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 dstId = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGArenaConfirmChall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGArenaConfirmChall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGArenaConfirmChall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGArenaConfirmChall::MergeFrom(const WGArenaConfirmChall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGArenaConfirmChall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGArenaConfirmChall::CopyFrom(const WGArenaConfirmChall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGArenaConfirmChall::IsInitialized() const {

  return true;
}

void WGArenaConfirmChall::Swap(WGArenaConfirmChall* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dstid_, other->dstid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGArenaConfirmChall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGArenaConfirmChall_descriptor_;
  metadata.reflection = WGArenaConfirmChall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWArenaConfirmChall::kCharIdFieldNumber;
const int GWArenaConfirmChall::kDstIdFieldNumber;
const int GWArenaConfirmChall::kTypeFieldNumber;
const int GWArenaConfirmChall::kRetFieldNumber;
#endif  // !_MSC_VER

GWArenaConfirmChall::GWArenaConfirmChall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWArenaConfirmChall::InitAsDefaultInstance() {
}

GWArenaConfirmChall::GWArenaConfirmChall(const GWArenaConfirmChall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWArenaConfirmChall::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWArenaConfirmChall::~GWArenaConfirmChall() {
  SharedDtor();
}

void GWArenaConfirmChall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWArenaConfirmChall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWArenaConfirmChall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWArenaConfirmChall_descriptor_;
}

const GWArenaConfirmChall& GWArenaConfirmChall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

GWArenaConfirmChall* GWArenaConfirmChall::default_instance_ = NULL;

GWArenaConfirmChall* GWArenaConfirmChall::New() const {
  return new GWArenaConfirmChall;
}

void GWArenaConfirmChall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWArenaConfirmChall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstId;
        break;
      }

      // optional uint64 dstId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWArenaConfirmChall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint64 dstId = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWArenaConfirmChall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint64 dstId = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWArenaConfirmChall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 dstId = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWArenaConfirmChall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWArenaConfirmChall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWArenaConfirmChall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWArenaConfirmChall::MergeFrom(const GWArenaConfirmChall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWArenaConfirmChall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWArenaConfirmChall::CopyFrom(const GWArenaConfirmChall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWArenaConfirmChall::IsInitialized() const {

  return true;
}

void GWArenaConfirmChall::Swap(GWArenaConfirmChall* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dstid_, other->dstid_);
    std::swap(type_, other->type_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWArenaConfirmChall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWArenaConfirmChall_descriptor_;
  metadata.reflection = GWArenaConfirmChall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AreanLoadMirrorDataCallBack::kCharIdFieldNumber;
const int AreanLoadMirrorDataCallBack::kDstIdFieldNumber;
#endif  // !_MSC_VER

AreanLoadMirrorDataCallBack::AreanLoadMirrorDataCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AreanLoadMirrorDataCallBack::InitAsDefaultInstance() {
}

AreanLoadMirrorDataCallBack::AreanLoadMirrorDataCallBack(const AreanLoadMirrorDataCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AreanLoadMirrorDataCallBack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreanLoadMirrorDataCallBack::~AreanLoadMirrorDataCallBack() {
  SharedDtor();
}

void AreanLoadMirrorDataCallBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AreanLoadMirrorDataCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreanLoadMirrorDataCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreanLoadMirrorDataCallBack_descriptor_;
}

const AreanLoadMirrorDataCallBack& AreanLoadMirrorDataCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

AreanLoadMirrorDataCallBack* AreanLoadMirrorDataCallBack::default_instance_ = NULL;

AreanLoadMirrorDataCallBack* AreanLoadMirrorDataCallBack::New() const {
  return new AreanLoadMirrorDataCallBack;
}

void AreanLoadMirrorDataCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreanLoadMirrorDataCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstId;
        break;
      }

      // optional uint64 dstId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AreanLoadMirrorDataCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint64 dstId = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AreanLoadMirrorDataCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint64 dstId = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AreanLoadMirrorDataCallBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 dstId = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreanLoadMirrorDataCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreanLoadMirrorDataCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreanLoadMirrorDataCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreanLoadMirrorDataCallBack::MergeFrom(const AreanLoadMirrorDataCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreanLoadMirrorDataCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreanLoadMirrorDataCallBack::CopyFrom(const AreanLoadMirrorDataCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreanLoadMirrorDataCallBack::IsInitialized() const {

  return true;
}

void AreanLoadMirrorDataCallBack::Swap(AreanLoadMirrorDataCallBack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dstid_, other->dstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreanLoadMirrorDataCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreanLoadMirrorDataCallBack_descriptor_;
  metadata.reflection = AreanLoadMirrorDataCallBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWArenaChallResult::kSrcCharIdFieldNumber;
const int GWArenaChallResult::kSrcScoreFieldNumber;
const int GWArenaChallResult::kDstCharIdFieldNumber;
const int GWArenaChallResult::kTypeFieldNumber;
const int GWArenaChallResult::kRetFieldNumber;
const int GWArenaChallResult::kHistoryRankIdFieldNumber;
const int GWArenaChallResult::kContinueWinFieldNumber;
const int GWArenaChallResult::kBeginTimeFieldNumber;
const int GWArenaChallResult::kChallengeNumFieldNumber;
const int GWArenaChallResult::kPlayerLvFieldNumber;
#endif  // !_MSC_VER

GWArenaChallResult::GWArenaChallResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWArenaChallResult::InitAsDefaultInstance() {
}

GWArenaChallResult::GWArenaChallResult(const GWArenaChallResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWArenaChallResult::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = GOOGLE_ULONGLONG(0);
  srcscore_ = 0u;
  dstcharid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ret_ = 0u;
  historyrankid_ = 0u;
  continue_win_ = 0u;
  begin_time_ = GOOGLE_ULONGLONG(0);
  challenge_num_ = 0;
  playerlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWArenaChallResult::~GWArenaChallResult() {
  SharedDtor();
}

void GWArenaChallResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWArenaChallResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWArenaChallResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWArenaChallResult_descriptor_;
}

const GWArenaChallResult& GWArenaChallResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

GWArenaChallResult* GWArenaChallResult::default_instance_ = NULL;

GWArenaChallResult* GWArenaChallResult::New() const {
  return new GWArenaChallResult;
}

void GWArenaChallResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = GOOGLE_ULONGLONG(0);
    srcscore_ = 0u;
    dstcharid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    ret_ = 0u;
    historyrankid_ = 0u;
    continue_win_ = 0u;
    begin_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    challenge_num_ = 0;
    playerlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWArenaChallResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcCharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srccharid_)));
          set_has_srccharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcScore;
        break;
      }

      // optional uint32 srcScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcscore_)));
          set_has_srcscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dstCharId;
        break;
      }

      // optional uint64 dstCharId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstCharId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstcharid_)));
          set_has_dstcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_historyRankId;
        break;
      }

      // optional uint32 historyRankId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyRankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historyrankid_)));
          set_has_historyrankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_continue_win;
        break;
      }

      // optional uint32 continue_win = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continue_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continue_win_)));
          set_has_continue_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_begin_time;
        break;
      }

      // optional uint64 begin_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_challenge_num;
        break;
      }

      // optional int32 challenge_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_num_)));
          set_has_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_playerLv;
        break;
      }

      // optional int32 playerLv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlv_)));
          set_has_playerlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWArenaChallResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcCharId = 1;
  if (has_srccharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srccharid(), output);
  }

  // optional uint32 srcScore = 2;
  if (has_srcscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcscore(), output);
  }

  // optional uint64 dstCharId = 3;
  if (has_dstcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dstcharid(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  // optional uint32 historyRankId = 6;
  if (has_historyrankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->historyrankid(), output);
  }

  // optional uint32 continue_win = 7;
  if (has_continue_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->continue_win(), output);
  }

  // optional uint64 begin_time = 8;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->begin_time(), output);
  }

  // optional int32 challenge_num = 9;
  if (has_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->challenge_num(), output);
  }

  // optional int32 playerLv = 10;
  if (has_playerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->playerlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWArenaChallResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcCharId = 1;
  if (has_srccharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srccharid(), target);
  }

  // optional uint32 srcScore = 2;
  if (has_srcscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcscore(), target);
  }

  // optional uint64 dstCharId = 3;
  if (has_dstcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dstcharid(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  // optional uint32 historyRankId = 6;
  if (has_historyrankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->historyrankid(), target);
  }

  // optional uint32 continue_win = 7;
  if (has_continue_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->continue_win(), target);
  }

  // optional uint64 begin_time = 8;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->begin_time(), target);
  }

  // optional int32 challenge_num = 9;
  if (has_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->challenge_num(), target);
  }

  // optional int32 playerLv = 10;
  if (has_playerlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->playerlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWArenaChallResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcCharId = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srccharid());
    }

    // optional uint32 srcScore = 2;
    if (has_srcscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcscore());
    }

    // optional uint64 dstCharId = 3;
    if (has_dstcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstcharid());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 historyRankId = 6;
    if (has_historyrankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->historyrankid());
    }

    // optional uint32 continue_win = 7;
    if (has_continue_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->continue_win());
    }

    // optional uint64 begin_time = 8;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 challenge_num = 9;
    if (has_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_num());
    }

    // optional int32 playerLv = 10;
    if (has_playerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWArenaChallResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWArenaChallResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWArenaChallResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWArenaChallResult::MergeFrom(const GWArenaChallResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srccharid()) {
      set_srccharid(from.srccharid());
    }
    if (from.has_srcscore()) {
      set_srcscore(from.srcscore());
    }
    if (from.has_dstcharid()) {
      set_dstcharid(from.dstcharid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_historyrankid()) {
      set_historyrankid(from.historyrankid());
    }
    if (from.has_continue_win()) {
      set_continue_win(from.continue_win());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_challenge_num()) {
      set_challenge_num(from.challenge_num());
    }
    if (from.has_playerlv()) {
      set_playerlv(from.playerlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWArenaChallResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWArenaChallResult::CopyFrom(const GWArenaChallResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWArenaChallResult::IsInitialized() const {

  return true;
}

void GWArenaChallResult::Swap(GWArenaChallResult* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(srcscore_, other->srcscore_);
    std::swap(dstcharid_, other->dstcharid_);
    std::swap(type_, other->type_);
    std::swap(ret_, other->ret_);
    std::swap(historyrankid_, other->historyrankid_);
    std::swap(continue_win_, other->continue_win_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(challenge_num_, other->challenge_num_);
    std::swap(playerlv_, other->playerlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWArenaChallResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWArenaChallResult_descriptor_;
  metadata.reflection = GWArenaChallResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWArenaCampChallResult::kSrcCharIdFieldNumber;
const int GWArenaCampChallResult::kRetFieldNumber;
#endif  // !_MSC_VER

GWArenaCampChallResult::GWArenaCampChallResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWArenaCampChallResult::InitAsDefaultInstance() {
}

GWArenaCampChallResult::GWArenaCampChallResult(const GWArenaCampChallResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWArenaCampChallResult::SharedCtor() {
  _cached_size_ = 0;
  srccharid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWArenaCampChallResult::~GWArenaCampChallResult() {
  SharedDtor();
}

void GWArenaCampChallResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWArenaCampChallResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWArenaCampChallResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWArenaCampChallResult_descriptor_;
}

const GWArenaCampChallResult& GWArenaCampChallResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

GWArenaCampChallResult* GWArenaCampChallResult::default_instance_ = NULL;

GWArenaCampChallResult* GWArenaCampChallResult::New() const {
  return new GWArenaCampChallResult;
}

void GWArenaCampChallResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srccharid_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWArenaCampChallResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcCharId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srccharid_)));
          set_has_srccharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWArenaCampChallResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcCharId = 1;
  if (has_srccharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srccharid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWArenaCampChallResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcCharId = 1;
  if (has_srccharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srccharid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWArenaCampChallResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcCharId = 1;
    if (has_srccharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srccharid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWArenaCampChallResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWArenaCampChallResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWArenaCampChallResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWArenaCampChallResult::MergeFrom(const GWArenaCampChallResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srccharid()) {
      set_srccharid(from.srccharid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWArenaCampChallResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWArenaCampChallResult::CopyFrom(const GWArenaCampChallResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWArenaCampChallResult::IsInitialized() const {

  return true;
}

void GWArenaCampChallResult::Swap(GWArenaCampChallResult* other) {
  if (other != this) {
    std::swap(srccharid_, other->srccharid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWArenaCampChallResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWArenaCampChallResult_descriptor_;
  metadata.reflection = GWArenaCampChallResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWArenaRankChangeNotify::kCharidFieldNumber;
const int GWArenaRankChangeNotify::kRankFieldNumber;
#endif  // !_MSC_VER

GWArenaRankChangeNotify::GWArenaRankChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWArenaRankChangeNotify::InitAsDefaultInstance() {
}

GWArenaRankChangeNotify::GWArenaRankChangeNotify(const GWArenaRankChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWArenaRankChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWArenaRankChangeNotify::~GWArenaRankChangeNotify() {
  SharedDtor();
}

void GWArenaRankChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWArenaRankChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWArenaRankChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWArenaRankChangeNotify_descriptor_;
}

const GWArenaRankChangeNotify& GWArenaRankChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

GWArenaRankChangeNotify* GWArenaRankChangeNotify::default_instance_ = NULL;

GWArenaRankChangeNotify* GWArenaRankChangeNotify::New() const {
  return new GWArenaRankChangeNotify;
}

void GWArenaRankChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWArenaRankChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWArenaRankChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWArenaRankChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWArenaRankChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWArenaRankChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWArenaRankChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWArenaRankChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWArenaRankChangeNotify::MergeFrom(const GWArenaRankChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWArenaRankChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWArenaRankChangeNotify::CopyFrom(const GWArenaRankChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWArenaRankChangeNotify::IsInitialized() const {

  return true;
}

void GWArenaRankChangeNotify::Swap(GWArenaRankChangeNotify* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWArenaRankChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWArenaRankChangeNotify_descriptor_;
  metadata.reflection = GWArenaRankChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWArenaChallReq::kSrcIdFieldNumber;
const int GWArenaChallReq::kDstIdFieldNumber;
const int GWArenaChallReq::kRankIdFieldNumber;
const int GWArenaChallReq::kTypeFieldNumber;
const int GWArenaChallReq::kChallTypeFieldNumber;
const int GWArenaChallReq::kCanMiaoshaFieldNumber;
const int GWArenaChallReq::kMultFieldNumber;
#endif  // !_MSC_VER

GWArenaChallReq::GWArenaChallReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWArenaChallReq::InitAsDefaultInstance() {
}

GWArenaChallReq::GWArenaChallReq(const GWArenaChallReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWArenaChallReq::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  rankid_ = 0u;
  type_ = 0u;
  chall_type_ = 0u;
  can_miaosha_ = 0u;
  mult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWArenaChallReq::~GWArenaChallReq() {
  SharedDtor();
}

void GWArenaChallReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWArenaChallReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWArenaChallReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWArenaChallReq_descriptor_;
}

const GWArenaChallReq& GWArenaChallReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

GWArenaChallReq* GWArenaChallReq::default_instance_ = NULL;

GWArenaChallReq* GWArenaChallReq::New() const {
  return new GWArenaChallReq;
}

void GWArenaChallReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
    rankid_ = 0u;
    type_ = 0u;
    chall_type_ = 0u;
    can_miaosha_ = 0u;
    mult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWArenaChallReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 srcId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstId;
        break;
      }

      // optional uint64 dstId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankId;
        break;
      }

      // optional uint32 rankId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chall_type;
        break;
      }

      // optional uint32 chall_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chall_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chall_type_)));
          set_has_chall_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_can_miaosha;
        break;
      }

      // optional uint32 can_miaosha = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_miaosha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_miaosha_)));
          set_has_can_miaosha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mult;
        break;
      }

      // optional int32 mult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mult_)));
          set_has_mult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWArenaChallReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 srcId = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // optional uint64 dstId = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  // optional uint32 rankId = 3;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rankid(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 chall_type = 5;
  if (has_chall_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chall_type(), output);
  }

  // optional uint32 can_miaosha = 6;
  if (has_can_miaosha()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->can_miaosha(), output);
  }

  // optional int32 mult = 7;
  if (has_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWArenaChallReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 srcId = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // optional uint64 dstId = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  // optional uint32 rankId = 3;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rankid(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 chall_type = 5;
  if (has_chall_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chall_type(), target);
  }

  // optional uint32 can_miaosha = 6;
  if (has_can_miaosha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->can_miaosha(), target);
  }

  // optional int32 mult = 7;
  if (has_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWArenaChallReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 srcId = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // optional uint64 dstId = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional uint32 rankId = 3;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 chall_type = 5;
    if (has_chall_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chall_type());
    }

    // optional uint32 can_miaosha = 6;
    if (has_can_miaosha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_miaosha());
    }

    // optional int32 mult = 7;
    if (has_mult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWArenaChallReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWArenaChallReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWArenaChallReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWArenaChallReq::MergeFrom(const GWArenaChallReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_chall_type()) {
      set_chall_type(from.chall_type());
    }
    if (from.has_can_miaosha()) {
      set_can_miaosha(from.can_miaosha());
    }
    if (from.has_mult()) {
      set_mult(from.mult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWArenaChallReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWArenaChallReq::CopyFrom(const GWArenaChallReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWArenaChallReq::IsInitialized() const {

  return true;
}

void GWArenaChallReq::Swap(GWArenaChallReq* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(rankid_, other->rankid_);
    std::swap(type_, other->type_);
    std::swap(chall_type_, other->chall_type_);
    std::swap(can_miaosha_, other->can_miaosha_);
    std::swap(mult_, other->mult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWArenaChallReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWArenaChallReq_descriptor_;
  metadata.reflection = GWArenaChallReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LSendArenaReward::kCharIdFieldNumber;
const int C2LSendArenaReward::kItemsFieldNumber;
#endif  // !_MSC_VER

C2LSendArenaReward::C2LSendArenaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LSendArenaReward::InitAsDefaultInstance() {
}

C2LSendArenaReward::C2LSendArenaReward(const C2LSendArenaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LSendArenaReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LSendArenaReward::~C2LSendArenaReward() {
  SharedDtor();
}

void C2LSendArenaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LSendArenaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LSendArenaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LSendArenaReward_descriptor_;
}

const C2LSendArenaReward& C2LSendArenaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

C2LSendArenaReward* C2LSendArenaReward::default_instance_ = NULL;

C2LSendArenaReward* C2LSendArenaReward::New() const {
  return new C2LSendArenaReward;
}

void C2LSendArenaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LSendArenaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LSendArenaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated .proto_ff.ComItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LSendArenaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated .proto_ff.ComItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LSendArenaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .proto_ff.ComItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LSendArenaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LSendArenaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LSendArenaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LSendArenaReward::MergeFrom(const C2LSendArenaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LSendArenaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LSendArenaReward::CopyFrom(const C2LSendArenaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LSendArenaReward::IsInitialized() const {

  return true;
}

void C2LSendArenaReward::Swap(C2LSendArenaReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LSendArenaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LSendArenaReward_descriptor_;
  metadata.reflection = C2LSendArenaReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2LArenaGetChallResultReq::C2LArenaGetChallResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LArenaGetChallResultReq::InitAsDefaultInstance() {
}

C2LArenaGetChallResultReq::C2LArenaGetChallResultReq(const C2LArenaGetChallResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LArenaGetChallResultReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LArenaGetChallResultReq::~C2LArenaGetChallResultReq() {
  SharedDtor();
}

void C2LArenaGetChallResultReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LArenaGetChallResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LArenaGetChallResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LArenaGetChallResultReq_descriptor_;
}

const C2LArenaGetChallResultReq& C2LArenaGetChallResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

C2LArenaGetChallResultReq* C2LArenaGetChallResultReq::default_instance_ = NULL;

C2LArenaGetChallResultReq* C2LArenaGetChallResultReq::New() const {
  return new C2LArenaGetChallResultReq;
}

void C2LArenaGetChallResultReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LArenaGetChallResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2LArenaGetChallResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LArenaGetChallResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LArenaGetChallResultReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LArenaGetChallResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LArenaGetChallResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LArenaGetChallResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LArenaGetChallResultReq::MergeFrom(const C2LArenaGetChallResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LArenaGetChallResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LArenaGetChallResultReq::CopyFrom(const C2LArenaGetChallResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LArenaGetChallResultReq::IsInitialized() const {

  return true;
}

void C2LArenaGetChallResultReq::Swap(C2LArenaGetChallResultReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LArenaGetChallResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LArenaGetChallResultReq_descriptor_;
  metadata.reflection = C2LArenaGetChallResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CArenaGetChallResultRsp::kRetFieldNumber;
const int L2CArenaGetChallResultRsp::kChallResultFieldNumber;
#endif  // !_MSC_VER

L2CArenaGetChallResultRsp::L2CArenaGetChallResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CArenaGetChallResultRsp::InitAsDefaultInstance() {
}

L2CArenaGetChallResultRsp::L2CArenaGetChallResultRsp(const L2CArenaGetChallResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CArenaGetChallResultRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CArenaGetChallResultRsp::~L2CArenaGetChallResultRsp() {
  SharedDtor();
}

void L2CArenaGetChallResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CArenaGetChallResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CArenaGetChallResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CArenaGetChallResultRsp_descriptor_;
}

const L2CArenaGetChallResultRsp& L2CArenaGetChallResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

L2CArenaGetChallResultRsp* L2CArenaGetChallResultRsp::default_instance_ = NULL;

L2CArenaGetChallResultRsp* L2CArenaGetChallResultRsp::New() const {
  return new L2CArenaGetChallResultRsp;
}

void L2CArenaGetChallResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  chall_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CArenaGetChallResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chall_result;
        break;
      }

      // repeated .proto_ff.ArenaChallResult chall_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chall_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chall_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chall_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CArenaGetChallResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.ArenaChallResult chall_result = 2;
  for (int i = 0; i < this->chall_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chall_result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CArenaGetChallResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.ArenaChallResult chall_result = 2;
  for (int i = 0; i < this->chall_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chall_result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CArenaGetChallResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .proto_ff.ArenaChallResult chall_result = 2;
  total_size += 1 * this->chall_result_size();
  for (int i = 0; i < this->chall_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chall_result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CArenaGetChallResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CArenaGetChallResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CArenaGetChallResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CArenaGetChallResultRsp::MergeFrom(const L2CArenaGetChallResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  chall_result_.MergeFrom(from.chall_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CArenaGetChallResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CArenaGetChallResultRsp::CopyFrom(const L2CArenaGetChallResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CArenaGetChallResultRsp::IsInitialized() const {

  return true;
}

void L2CArenaGetChallResultRsp::Swap(L2CArenaGetChallResultRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    chall_result_.Swap(&other->chall_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CArenaGetChallResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CArenaGetChallResultRsp_descriptor_;
  metadata.reflection = L2CArenaGetChallResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2LArenaGetChallRewardReq::C2LArenaGetChallRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LArenaGetChallRewardReq::InitAsDefaultInstance() {
}

C2LArenaGetChallRewardReq::C2LArenaGetChallRewardReq(const C2LArenaGetChallRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LArenaGetChallRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LArenaGetChallRewardReq::~C2LArenaGetChallRewardReq() {
  SharedDtor();
}

void C2LArenaGetChallRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LArenaGetChallRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LArenaGetChallRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LArenaGetChallRewardReq_descriptor_;
}

const C2LArenaGetChallRewardReq& C2LArenaGetChallRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

C2LArenaGetChallRewardReq* C2LArenaGetChallRewardReq::default_instance_ = NULL;

C2LArenaGetChallRewardReq* C2LArenaGetChallRewardReq::New() const {
  return new C2LArenaGetChallRewardReq;
}

void C2LArenaGetChallRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LArenaGetChallRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2LArenaGetChallRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LArenaGetChallRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LArenaGetChallRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LArenaGetChallRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LArenaGetChallRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LArenaGetChallRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LArenaGetChallRewardReq::MergeFrom(const C2LArenaGetChallRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LArenaGetChallRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LArenaGetChallRewardReq::CopyFrom(const C2LArenaGetChallRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LArenaGetChallRewardReq::IsInitialized() const {

  return true;
}

void C2LArenaGetChallRewardReq::Swap(C2LArenaGetChallRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LArenaGetChallRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LArenaGetChallRewardReq_descriptor_;
  metadata.reflection = C2LArenaGetChallRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CArenaGetChallRewardRsp::kRetFieldNumber;
const int L2CArenaGetChallRewardRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

L2CArenaGetChallRewardRsp::L2CArenaGetChallRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CArenaGetChallRewardRsp::InitAsDefaultInstance() {
}

L2CArenaGetChallRewardRsp::L2CArenaGetChallRewardRsp(const L2CArenaGetChallRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CArenaGetChallRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CArenaGetChallRewardRsp::~L2CArenaGetChallRewardRsp() {
  SharedDtor();
}

void L2CArenaGetChallRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CArenaGetChallRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CArenaGetChallRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CArenaGetChallRewardRsp_descriptor_;
}

const L2CArenaGetChallRewardRsp& L2CArenaGetChallRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

L2CArenaGetChallRewardRsp* L2CArenaGetChallRewardRsp::default_instance_ = NULL;

L2CArenaGetChallRewardRsp* L2CArenaGetChallRewardRsp::New() const {
  return new L2CArenaGetChallRewardRsp;
}

void L2CArenaGetChallRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CArenaGetChallRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ChallArenaReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CArenaGetChallRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.ChallArenaReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CArenaGetChallRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.ChallArenaReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CArenaGetChallRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .proto_ff.ChallArenaReward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CArenaGetChallRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CArenaGetChallRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CArenaGetChallRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CArenaGetChallRewardRsp::MergeFrom(const L2CArenaGetChallRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CArenaGetChallRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CArenaGetChallRewardRsp::CopyFrom(const L2CArenaGetChallRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CArenaGetChallRewardRsp::IsInitialized() const {

  return true;
}

void L2CArenaGetChallRewardRsp::Swap(L2CArenaGetChallRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CArenaGetChallRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CArenaGetChallRewardRsp_descriptor_;
  metadata.reflection = L2CArenaGetChallRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CArenaChallRewardNotify::kRetFieldNumber;
const int L2CArenaChallRewardNotify::kRewardFieldNumber;
const int L2CArenaChallRewardNotify::kRankIdFieldNumber;
const int L2CArenaChallRewardNotify::kHistoryRankIdFieldNumber;
#endif  // !_MSC_VER

L2CArenaChallRewardNotify::L2CArenaChallRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CArenaChallRewardNotify::InitAsDefaultInstance() {
}

L2CArenaChallRewardNotify::L2CArenaChallRewardNotify(const L2CArenaChallRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CArenaChallRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  rank_id_ = 0;
  history_rank_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CArenaChallRewardNotify::~L2CArenaChallRewardNotify() {
  SharedDtor();
}

void L2CArenaChallRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CArenaChallRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CArenaChallRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CArenaChallRewardNotify_descriptor_;
}

const L2CArenaChallRewardNotify& L2CArenaChallRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

L2CArenaChallRewardNotify* L2CArenaChallRewardNotify::default_instance_ = NULL;

L2CArenaChallRewardNotify* L2CArenaChallRewardNotify::New() const {
  return new L2CArenaChallRewardNotify;
}

void L2CArenaChallRewardNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    rank_id_ = 0;
    history_rank_id_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CArenaChallRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ChallArenaReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(24)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_history_rank_id;
        break;
      }

      // optional int32 history_rank_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_rank_id_)));
          set_has_history_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CArenaChallRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.ChallArenaReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_id(), output);
  }

  // optional int32 history_rank_id = 4;
  if (has_history_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->history_rank_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CArenaChallRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.ChallArenaReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  // optional int32 rank_id = 3;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_id(), target);
  }

  // optional int32 history_rank_id = 4;
  if (has_history_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->history_rank_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CArenaChallRewardNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 rank_id = 3;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

    // optional int32 history_rank_id = 4;
    if (has_history_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->history_rank_id());
    }

  }
  // repeated .proto_ff.ChallArenaReward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CArenaChallRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CArenaChallRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CArenaChallRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CArenaChallRewardNotify::MergeFrom(const L2CArenaChallRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_history_rank_id()) {
      set_history_rank_id(from.history_rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CArenaChallRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CArenaChallRewardNotify::CopyFrom(const L2CArenaChallRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CArenaChallRewardNotify::IsInitialized() const {

  return true;
}

void L2CArenaChallRewardNotify::Swap(L2CArenaChallRewardNotify* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    reward_.Swap(&other->reward_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(history_rank_id_, other->history_rank_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CArenaChallRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CArenaChallRewardNotify_descriptor_;
  metadata.reflection = L2CArenaChallRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LArenaReceiveChallRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

C2LArenaReceiveChallRewardReq::C2LArenaReceiveChallRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LArenaReceiveChallRewardReq::InitAsDefaultInstance() {
}

C2LArenaReceiveChallRewardReq::C2LArenaReceiveChallRewardReq(const C2LArenaReceiveChallRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LArenaReceiveChallRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LArenaReceiveChallRewardReq::~C2LArenaReceiveChallRewardReq() {
  SharedDtor();
}

void C2LArenaReceiveChallRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LArenaReceiveChallRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LArenaReceiveChallRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LArenaReceiveChallRewardReq_descriptor_;
}

const C2LArenaReceiveChallRewardReq& C2LArenaReceiveChallRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

C2LArenaReceiveChallRewardReq* C2LArenaReceiveChallRewardReq::default_instance_ = NULL;

C2LArenaReceiveChallRewardReq* C2LArenaReceiveChallRewardReq::New() const {
  return new C2LArenaReceiveChallRewardReq;
}

void C2LArenaReceiveChallRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LArenaReceiveChallRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LArenaReceiveChallRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LArenaReceiveChallRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LArenaReceiveChallRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LArenaReceiveChallRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LArenaReceiveChallRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LArenaReceiveChallRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LArenaReceiveChallRewardReq::MergeFrom(const C2LArenaReceiveChallRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LArenaReceiveChallRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LArenaReceiveChallRewardReq::CopyFrom(const C2LArenaReceiveChallRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LArenaReceiveChallRewardReq::IsInitialized() const {

  return true;
}

void C2LArenaReceiveChallRewardReq::Swap(C2LArenaReceiveChallRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LArenaReceiveChallRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LArenaReceiveChallRewardReq_descriptor_;
  metadata.reflection = C2LArenaReceiveChallRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CArenaReceiveChallRewardRsp::kRetFieldNumber;
const int L2CArenaReceiveChallRewardRsp::kRewardFieldNumber;
#endif  // !_MSC_VER

L2CArenaReceiveChallRewardRsp::L2CArenaReceiveChallRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CArenaReceiveChallRewardRsp::InitAsDefaultInstance() {
}

L2CArenaReceiveChallRewardRsp::L2CArenaReceiveChallRewardRsp(const L2CArenaReceiveChallRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CArenaReceiveChallRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CArenaReceiveChallRewardRsp::~L2CArenaReceiveChallRewardRsp() {
  SharedDtor();
}

void L2CArenaReceiveChallRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CArenaReceiveChallRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CArenaReceiveChallRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CArenaReceiveChallRewardRsp_descriptor_;
}

const L2CArenaReceiveChallRewardRsp& L2CArenaReceiveChallRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

L2CArenaReceiveChallRewardRsp* L2CArenaReceiveChallRewardRsp::default_instance_ = NULL;

L2CArenaReceiveChallRewardRsp* L2CArenaReceiveChallRewardRsp::New() const {
  return new L2CArenaReceiveChallRewardRsp;
}

void L2CArenaReceiveChallRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CArenaReceiveChallRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ChallArenaReward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CArenaReceiveChallRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.ChallArenaReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CArenaReceiveChallRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.ChallArenaReward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CArenaReceiveChallRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .proto_ff.ChallArenaReward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CArenaReceiveChallRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CArenaReceiveChallRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CArenaReceiveChallRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CArenaReceiveChallRewardRsp::MergeFrom(const L2CArenaReceiveChallRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CArenaReceiveChallRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CArenaReceiveChallRewardRsp::CopyFrom(const L2CArenaReceiveChallRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CArenaReceiveChallRewardRsp::IsInitialized() const {

  return true;
}

void L2CArenaReceiveChallRewardRsp::Swap(L2CArenaReceiveChallRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CArenaReceiveChallRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CArenaReceiveChallRewardRsp_descriptor_;
  metadata.reflection = L2CArenaReceiveChallRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LArenaDupBattleResult::kCharIdFieldNumber;
const int C2LArenaDupBattleResult::kCharRankFieldNumber;
const int C2LArenaDupBattleResult::kDstIdFieldNumber;
const int C2LArenaDupBattleResult::kDstRankFieldNumber;
const int C2LArenaDupBattleResult::kResultFieldNumber;
#endif  // !_MSC_VER

C2LArenaDupBattleResult::C2LArenaDupBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LArenaDupBattleResult::InitAsDefaultInstance() {
}

C2LArenaDupBattleResult::C2LArenaDupBattleResult(const C2LArenaDupBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LArenaDupBattleResult::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = GOOGLE_ULONGLONG(0);
  char_rank_ = GOOGLE_ULONGLONG(0);
  dst_id_ = GOOGLE_ULONGLONG(0);
  dst_rank_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LArenaDupBattleResult::~C2LArenaDupBattleResult() {
  SharedDtor();
}

void C2LArenaDupBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LArenaDupBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LArenaDupBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LArenaDupBattleResult_descriptor_;
}

const C2LArenaDupBattleResult& C2LArenaDupBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

C2LArenaDupBattleResult* C2LArenaDupBattleResult::default_instance_ = NULL;

C2LArenaDupBattleResult* C2LArenaDupBattleResult::New() const {
  return new C2LArenaDupBattleResult;
}

void C2LArenaDupBattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = GOOGLE_ULONGLONG(0);
    char_rank_ = GOOGLE_ULONGLONG(0);
    dst_id_ = GOOGLE_ULONGLONG(0);
    dst_rank_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LArenaDupBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_rank;
        break;
      }

      // optional uint64 char_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &char_rank_)));
          set_has_char_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_id;
        break;
      }

      // optional uint64 dst_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_id_)));
          set_has_dst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_rank;
        break;
      }

      // optional uint64 dst_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_rank_)));
          set_has_dst_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // optional uint32 result = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LArenaDupBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->char_id(), output);
  }

  // optional uint64 char_rank = 2;
  if (has_char_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->char_rank(), output);
  }

  // optional uint64 dst_id = 3;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dst_id(), output);
  }

  // optional uint64 dst_rank = 4;
  if (has_dst_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dst_rank(), output);
  }

  // optional uint32 result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LArenaDupBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->char_id(), target);
  }

  // optional uint64 char_rank = 2;
  if (has_char_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->char_rank(), target);
  }

  // optional uint64 dst_id = 3;
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dst_id(), target);
  }

  // optional uint64 dst_rank = 4;
  if (has_dst_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dst_rank(), target);
  }

  // optional uint32 result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LArenaDupBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->char_id());
    }

    // optional uint64 char_rank = 2;
    if (has_char_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->char_rank());
    }

    // optional uint64 dst_id = 3;
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_id());
    }

    // optional uint64 dst_rank = 4;
    if (has_dst_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_rank());
    }

    // optional uint32 result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LArenaDupBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LArenaDupBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LArenaDupBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LArenaDupBattleResult::MergeFrom(const C2LArenaDupBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_char_rank()) {
      set_char_rank(from.char_rank());
    }
    if (from.has_dst_id()) {
      set_dst_id(from.dst_id());
    }
    if (from.has_dst_rank()) {
      set_dst_rank(from.dst_rank());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LArenaDupBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LArenaDupBattleResult::CopyFrom(const C2LArenaDupBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LArenaDupBattleResult::IsInitialized() const {

  return true;
}

void C2LArenaDupBattleResult::Swap(C2LArenaDupBattleResult* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(char_rank_, other->char_rank_);
    std::swap(dst_id_, other->dst_id_);
    std::swap(dst_rank_, other->dst_rank_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LArenaDupBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LArenaDupBattleResult_descriptor_;
  metadata.reflection = C2LArenaDupBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2LArenaSkipBattleReq::C2LArenaSkipBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LArenaSkipBattleReq::InitAsDefaultInstance() {
}

C2LArenaSkipBattleReq::C2LArenaSkipBattleReq(const C2LArenaSkipBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LArenaSkipBattleReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LArenaSkipBattleReq::~C2LArenaSkipBattleReq() {
  SharedDtor();
}

void C2LArenaSkipBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LArenaSkipBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LArenaSkipBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LArenaSkipBattleReq_descriptor_;
}

const C2LArenaSkipBattleReq& C2LArenaSkipBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

C2LArenaSkipBattleReq* C2LArenaSkipBattleReq::default_instance_ = NULL;

C2LArenaSkipBattleReq* C2LArenaSkipBattleReq::New() const {
  return new C2LArenaSkipBattleReq;
}

void C2LArenaSkipBattleReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LArenaSkipBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2LArenaSkipBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LArenaSkipBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LArenaSkipBattleReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LArenaSkipBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LArenaSkipBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LArenaSkipBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LArenaSkipBattleReq::MergeFrom(const C2LArenaSkipBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LArenaSkipBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LArenaSkipBattleReq::CopyFrom(const C2LArenaSkipBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LArenaSkipBattleReq::IsInitialized() const {

  return true;
}

void C2LArenaSkipBattleReq::Swap(C2LArenaSkipBattleReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LArenaSkipBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LArenaSkipBattleReq_descriptor_;
  metadata.reflection = C2LArenaSkipBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CArenaSkipBattleRsp::kRetFieldNumber;
#endif  // !_MSC_VER

L2CArenaSkipBattleRsp::L2CArenaSkipBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CArenaSkipBattleRsp::InitAsDefaultInstance() {
}

L2CArenaSkipBattleRsp::L2CArenaSkipBattleRsp(const L2CArenaSkipBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CArenaSkipBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CArenaSkipBattleRsp::~L2CArenaSkipBattleRsp() {
  SharedDtor();
}

void L2CArenaSkipBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CArenaSkipBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CArenaSkipBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CArenaSkipBattleRsp_descriptor_;
}

const L2CArenaSkipBattleRsp& L2CArenaSkipBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
  return *default_instance_;
}

L2CArenaSkipBattleRsp* L2CArenaSkipBattleRsp::default_instance_ = NULL;

L2CArenaSkipBattleRsp* L2CArenaSkipBattleRsp::New() const {
  return new L2CArenaSkipBattleRsp;
}

void L2CArenaSkipBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CArenaSkipBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CArenaSkipBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CArenaSkipBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CArenaSkipBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CArenaSkipBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CArenaSkipBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CArenaSkipBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CArenaSkipBattleRsp::MergeFrom(const L2CArenaSkipBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CArenaSkipBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CArenaSkipBattleRsp::CopyFrom(const L2CArenaSkipBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CArenaSkipBattleRsp::IsInitialized() const {

  return true;
}

void L2CArenaSkipBattleRsp::Swap(L2CArenaSkipBattleRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CArenaSkipBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CArenaSkipBattleRsp_descriptor_;
  metadata.reflection = L2CArenaSkipBattleRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
