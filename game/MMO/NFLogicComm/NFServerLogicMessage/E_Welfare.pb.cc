// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Welfare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Welfare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_WelfareSign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareSign_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareSign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareSign_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareAccruereward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareAccruereward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareAccruereward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareAccruereward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareLvreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareLvreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareLvreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareLvreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareOnline_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareOnline_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareFraud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareFraud_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareFraud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareFraud_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareWeekendgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareWeekendgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareWeekendgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareWeekendgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareQifu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareQifu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareQifu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareQifu_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareWish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareWish_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareWish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareWish_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareFirstcharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareFirstcharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareFirstcharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareFirstcharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareSctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareSctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareSctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareSctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareMibao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareMibao_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareMibao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareMibao_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareKfleichong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareKfleichong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareKfleichong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareKfleichong_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareDailygift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareDailygift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareDailygift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareDailygift_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareLcgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareLcgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareLcgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareLcgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareLcraffle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareLcraffle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareLcraffle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareLcraffle_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareLcturntableRaffleDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareLcturntableRaffleDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareLcturntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareLcturntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareLcturntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareLcturntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareJackpot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareJackpot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareJackpot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareJackpot_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareMonthlycard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareMonthlycard_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareMonthlycard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareMonthlycard_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareGoal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareGoal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareGoal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareGoal_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareGoaltask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareGoaltask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareGoaltask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareGoaltask_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareInvest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareInvest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareInvest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareInvest_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareInvestrewardItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareInvestrewardItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareInvestreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareInvestreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareInvestreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareInvestreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_WelfareYttlgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_WelfareYttlgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_WelfareYttlgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_WelfareYttlgift_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fWelfare_2eproto() {
  protobuf_AddDesc_E_5fWelfare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Welfare.proto");
  GOOGLE_CHECK(file != NULL);
  E_WelfareSign_descriptor_ = file->message_type(0);
  static const int E_WelfareSign_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, m_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, m_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, m_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, m_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, m_rewardnum_),
  };
  E_WelfareSign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareSign_descriptor_,
      E_WelfareSign::default_instance_,
      E_WelfareSign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareSign));
  Sheet_WelfareSign_descriptor_ = file->message_type(1);
  static const int Sheet_WelfareSign_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareSign, e_welfaresign_list_),
  };
  Sheet_WelfareSign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareSign_descriptor_,
      Sheet_WelfareSign::default_instance_,
      Sheet_WelfareSign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareSign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareSign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareSign));
  E_WelfareAccruereward_descriptor_ = file->message_type(2);
  static const int E_WelfareAccruereward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareAccruereward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareAccruereward, m_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareAccruereward, m_accruedays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareAccruereward, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareAccruereward, m_rewardnum_),
  };
  E_WelfareAccruereward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareAccruereward_descriptor_,
      E_WelfareAccruereward::default_instance_,
      E_WelfareAccruereward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareAccruereward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareAccruereward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareAccruereward));
  Sheet_WelfareAccruereward_descriptor_ = file->message_type(3);
  static const int Sheet_WelfareAccruereward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareAccruereward, e_welfareaccruereward_list_),
  };
  Sheet_WelfareAccruereward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareAccruereward_descriptor_,
      Sheet_WelfareAccruereward::default_instance_,
      Sheet_WelfareAccruereward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareAccruereward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareAccruereward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareAccruereward));
  E_WelfareLvreward_descriptor_ = file->message_type(4);
  static const int E_WelfareLvreward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLvreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLvreward, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLvreward, m_lvreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLvreward, m_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLvreward, m_vipreward_),
  };
  E_WelfareLvreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareLvreward_descriptor_,
      E_WelfareLvreward::default_instance_,
      E_WelfareLvreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLvreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLvreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareLvreward));
  Sheet_WelfareLvreward_descriptor_ = file->message_type(5);
  static const int Sheet_WelfareLvreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLvreward, e_welfarelvreward_list_),
  };
  Sheet_WelfareLvreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareLvreward_descriptor_,
      Sheet_WelfareLvreward::default_instance_,
      Sheet_WelfareLvreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLvreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLvreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareLvreward));
  E_WelfareOnline_descriptor_ = file->message_type(6);
  static const int E_WelfareOnline_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareOnline, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareOnline, m_onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareOnline, m_lvreward_),
  };
  E_WelfareOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareOnline_descriptor_,
      E_WelfareOnline::default_instance_,
      E_WelfareOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareOnline));
  Sheet_WelfareOnline_descriptor_ = file->message_type(7);
  static const int Sheet_WelfareOnline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareOnline, e_welfareonline_list_),
  };
  Sheet_WelfareOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareOnline_descriptor_,
      Sheet_WelfareOnline::default_instance_,
      Sheet_WelfareOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareOnline));
  E_WelfareFraud_descriptor_ = file->message_type(8);
  static const int E_WelfareFraud_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFraud, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFraud, m_picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFraud, m_correct_),
  };
  E_WelfareFraud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareFraud_descriptor_,
      E_WelfareFraud::default_instance_,
      E_WelfareFraud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFraud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFraud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareFraud));
  Sheet_WelfareFraud_descriptor_ = file->message_type(9);
  static const int Sheet_WelfareFraud_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareFraud, e_welfarefraud_list_),
  };
  Sheet_WelfareFraud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareFraud_descriptor_,
      Sheet_WelfareFraud::default_instance_,
      Sheet_WelfareFraud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareFraud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareFraud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareFraud));
  E_WelfareWeekendgift_descriptor_ = file->message_type(10);
  static const int E_WelfareWeekendgift_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWeekendgift, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWeekendgift, m_lvmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWeekendgift, m_lvmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWeekendgift, m_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWeekendgift, m_rewards_),
  };
  E_WelfareWeekendgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareWeekendgift_descriptor_,
      E_WelfareWeekendgift::default_instance_,
      E_WelfareWeekendgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWeekendgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWeekendgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareWeekendgift));
  Sheet_WelfareWeekendgift_descriptor_ = file->message_type(11);
  static const int Sheet_WelfareWeekendgift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareWeekendgift, e_welfareweekendgift_list_),
  };
  Sheet_WelfareWeekendgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareWeekendgift_descriptor_,
      Sheet_WelfareWeekendgift::default_instance_,
      Sheet_WelfareWeekendgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareWeekendgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareWeekendgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareWeekendgift));
  E_WelfareConstant_descriptor_ = file->message_type(12);
  static const int E_WelfareConstant_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_addsigncost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_addsignprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_noticereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_wrongmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_wrongmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_fraudreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_firstrcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_secondrcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_gemmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_starmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_kingmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, m_keyrebate_),
  };
  E_WelfareConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareConstant_descriptor_,
      E_WelfareConstant::default_instance_,
      E_WelfareConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareConstant));
  Sheet_WelfareConstant_descriptor_ = file->message_type(13);
  static const int Sheet_WelfareConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareConstant, e_welfareconstant_list_),
  };
  Sheet_WelfareConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareConstant_descriptor_,
      Sheet_WelfareConstant::default_instance_,
      Sheet_WelfareConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareConstant));
  E_WelfareQifu_descriptor_ = file->message_type(14);
  static const int E_WelfareQifu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareQifu, m_constantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareQifu, m_constantdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareQifu, m_stringdata_),
  };
  E_WelfareQifu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareQifu_descriptor_,
      E_WelfareQifu::default_instance_,
      E_WelfareQifu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareQifu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareQifu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareQifu));
  Sheet_WelfareQifu_descriptor_ = file->message_type(15);
  static const int Sheet_WelfareQifu_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareQifu, e_welfareqifu_list_),
  };
  Sheet_WelfareQifu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareQifu_descriptor_,
      Sheet_WelfareQifu::default_instance_,
      Sheet_WelfareQifu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareQifu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareQifu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareQifu));
  E_WelfareWish_descriptor_ = file->message_type(16);
  static const int E_WelfareWish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWish, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWish, m_exp_),
  };
  E_WelfareWish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareWish_descriptor_,
      E_WelfareWish::default_instance_,
      E_WelfareWish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareWish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareWish));
  Sheet_WelfareWish_descriptor_ = file->message_type(17);
  static const int Sheet_WelfareWish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareWish, e_welfarewish_list_),
  };
  Sheet_WelfareWish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareWish_descriptor_,
      Sheet_WelfareWish::default_instance_,
      Sheet_WelfareWish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareWish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareWish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareWish));
  E_WelfareLogon_descriptor_ = file->message_type(18);
  static const int E_WelfareLogon_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLogon, m_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLogon, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLogon, m_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLogon, m_showitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLogon, m_reward_),
  };
  E_WelfareLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareLogon_descriptor_,
      E_WelfareLogon::default_instance_,
      E_WelfareLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareLogon));
  Sheet_WelfareLogon_descriptor_ = file->message_type(19);
  static const int Sheet_WelfareLogon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLogon, e_welfarelogon_list_),
  };
  Sheet_WelfareLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareLogon_descriptor_,
      Sheet_WelfareLogon::default_instance_,
      Sheet_WelfareLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareLogon));
  E_WelfareFirstcharge_descriptor_ = file->message_type(20);
  static const int E_WelfareFirstcharge_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, m_constantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, m_openlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, m_opendays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, m_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, m_rewardshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, m_rewarddes_),
  };
  E_WelfareFirstcharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareFirstcharge_descriptor_,
      E_WelfareFirstcharge::default_instance_,
      E_WelfareFirstcharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareFirstcharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareFirstcharge));
  Sheet_WelfareFirstcharge_descriptor_ = file->message_type(21);
  static const int Sheet_WelfareFirstcharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareFirstcharge, e_welfarefirstcharge_list_),
  };
  Sheet_WelfareFirstcharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareFirstcharge_descriptor_,
      Sheet_WelfareFirstcharge::default_instance_,
      Sheet_WelfareFirstcharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareFirstcharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareFirstcharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareFirstcharge));
  E_WelfareSctype_descriptor_ = file->message_type(22);
  static const int E_WelfareSctype_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSctype, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSctype, m_functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSctype, m_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSctype, m_basemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSctype, m_rcharge_),
  };
  E_WelfareSctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareSctype_descriptor_,
      E_WelfareSctype::default_instance_,
      E_WelfareSctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareSctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareSctype));
  Sheet_WelfareSctype_descriptor_ = file->message_type(23);
  static const int Sheet_WelfareSctype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareSctype, e_welfaresctype_list_),
  };
  Sheet_WelfareSctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareSctype_descriptor_,
      Sheet_WelfareSctype::default_instance_,
      Sheet_WelfareSctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareSctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareSctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareSctype));
  E_WelfareMibao_descriptor_ = file->message_type(24);
  static const int E_WelfareMibao_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, m_openlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, m_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, m_opendays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, m_des_),
  };
  E_WelfareMibao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareMibao_descriptor_,
      E_WelfareMibao::default_instance_,
      E_WelfareMibao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMibao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareMibao));
  Sheet_WelfareMibao_descriptor_ = file->message_type(25);
  static const int Sheet_WelfareMibao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareMibao, e_welfaremibao_list_),
  };
  Sheet_WelfareMibao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareMibao_descriptor_,
      Sheet_WelfareMibao::default_instance_,
      Sheet_WelfareMibao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareMibao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareMibao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareMibao));
  E_WelfareKfleichong_descriptor_ = file->message_type(26);
  static const int E_WelfareKfleichong_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareKfleichong, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareKfleichong, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareKfleichong, m_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareKfleichong, m_reward_),
  };
  E_WelfareKfleichong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareKfleichong_descriptor_,
      E_WelfareKfleichong::default_instance_,
      E_WelfareKfleichong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareKfleichong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareKfleichong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareKfleichong));
  Sheet_WelfareKfleichong_descriptor_ = file->message_type(27);
  static const int Sheet_WelfareKfleichong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareKfleichong, e_welfarekfleichong_list_),
  };
  Sheet_WelfareKfleichong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareKfleichong_descriptor_,
      Sheet_WelfareKfleichong::default_instance_,
      Sheet_WelfareKfleichong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareKfleichong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareKfleichong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareKfleichong));
  E_WelfareDailygift_descriptor_ = file->message_type(28);
  static const int E_WelfareDailygift_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareDailygift, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareDailygift, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareDailygift, m_rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareDailygift, m_oneclickbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareDailygift, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareDailygift, m_quality_),
  };
  E_WelfareDailygift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareDailygift_descriptor_,
      E_WelfareDailygift::default_instance_,
      E_WelfareDailygift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareDailygift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareDailygift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareDailygift));
  Sheet_WelfareDailygift_descriptor_ = file->message_type(29);
  static const int Sheet_WelfareDailygift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareDailygift, e_welfaredailygift_list_),
  };
  Sheet_WelfareDailygift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareDailygift_descriptor_,
      Sheet_WelfareDailygift::default_instance_,
      Sheet_WelfareDailygift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareDailygift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareDailygift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareDailygift));
  E_WelfareLcgift_descriptor_ = file->message_type(30);
  static const int E_WelfareLcgift_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, m_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, m_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, m_showitem_),
  };
  E_WelfareLcgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareLcgift_descriptor_,
      E_WelfareLcgift::default_instance_,
      E_WelfareLcgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareLcgift));
  Sheet_WelfareLcgift_descriptor_ = file->message_type(31);
  static const int Sheet_WelfareLcgift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcgift, e_welfarelcgift_list_),
  };
  Sheet_WelfareLcgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareLcgift_descriptor_,
      Sheet_WelfareLcgift::default_instance_,
      Sheet_WelfareLcgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareLcgift));
  E_WelfareLcraffle_descriptor_ = file->message_type(32);
  static const int E_WelfareLcraffle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcraffle, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcraffle, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcraffle, m_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcraffle, m_reward_),
  };
  E_WelfareLcraffle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareLcraffle_descriptor_,
      E_WelfareLcraffle::default_instance_,
      E_WelfareLcraffle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcraffle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcraffle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareLcraffle));
  Sheet_WelfareLcraffle_descriptor_ = file->message_type(33);
  static const int Sheet_WelfareLcraffle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcraffle, e_welfarelcraffle_list_),
  };
  Sheet_WelfareLcraffle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareLcraffle_descriptor_,
      Sheet_WelfareLcraffle::default_instance_,
      Sheet_WelfareLcraffle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcraffle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcraffle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareLcraffle));
  E_WelfareLcturntableRaffleDesc_descriptor_ = file->message_type(34);
  static const int E_WelfareLcturntableRaffleDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntableRaffleDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntableRaffleDesc, m_item_),
  };
  E_WelfareLcturntableRaffleDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareLcturntableRaffleDesc_descriptor_,
      E_WelfareLcturntableRaffleDesc::default_instance_,
      E_WelfareLcturntableRaffleDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntableRaffleDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntableRaffleDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareLcturntableRaffleDesc));
  E_WelfareLcturntable_descriptor_ = file->message_type(35);
  static const int E_WelfareLcturntable_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntable, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntable, m_jackpottype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntable, m_raffletimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntable, m_ratimesrew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntable, m_raffle_),
  };
  E_WelfareLcturntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareLcturntable_descriptor_,
      E_WelfareLcturntable::default_instance_,
      E_WelfareLcturntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareLcturntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareLcturntable));
  Sheet_WelfareLcturntable_descriptor_ = file->message_type(36);
  static const int Sheet_WelfareLcturntable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcturntable, e_welfarelcturntable_list_),
  };
  Sheet_WelfareLcturntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareLcturntable_descriptor_,
      Sheet_WelfareLcturntable::default_instance_,
      Sheet_WelfareLcturntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcturntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareLcturntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareLcturntable));
  E_WelfareJackpot_descriptor_ = file->message_type(37);
  static const int E_WelfareJackpot_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareJackpot, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareJackpot, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareJackpot, m_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareJackpot, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareJackpot, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareJackpot, m_weight_),
  };
  E_WelfareJackpot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareJackpot_descriptor_,
      E_WelfareJackpot::default_instance_,
      E_WelfareJackpot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareJackpot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareJackpot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareJackpot));
  Sheet_WelfareJackpot_descriptor_ = file->message_type(38);
  static const int Sheet_WelfareJackpot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareJackpot, e_welfarejackpot_list_),
  };
  Sheet_WelfareJackpot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareJackpot_descriptor_,
      Sheet_WelfareJackpot::default_instance_,
      Sheet_WelfareJackpot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareJackpot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareJackpot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareJackpot));
  E_WelfareMonthlycard_descriptor_ = file->message_type(39);
  static const int E_WelfareMonthlycard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, m_cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, m_cardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, m_cardbuyitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, m_carddailyitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, m_cardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, m_flmultiple_),
  };
  E_WelfareMonthlycard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareMonthlycard_descriptor_,
      E_WelfareMonthlycard::default_instance_,
      E_WelfareMonthlycard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareMonthlycard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareMonthlycard));
  Sheet_WelfareMonthlycard_descriptor_ = file->message_type(40);
  static const int Sheet_WelfareMonthlycard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareMonthlycard, e_welfaremonthlycard_list_),
  };
  Sheet_WelfareMonthlycard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareMonthlycard_descriptor_,
      Sheet_WelfareMonthlycard::default_instance_,
      Sheet_WelfareMonthlycard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareMonthlycard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareMonthlycard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareMonthlycard));
  E_WelfareGoal_descriptor_ = file->message_type(41);
  static const int E_WelfareGoal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoal, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoal, m_functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoal, m_taskgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoal, m_tasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoal, m_rewrditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoal, m_time_),
  };
  E_WelfareGoal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareGoal_descriptor_,
      E_WelfareGoal::default_instance_,
      E_WelfareGoal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareGoal));
  Sheet_WelfareGoal_descriptor_ = file->message_type(42);
  static const int Sheet_WelfareGoal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareGoal, e_welfaregoal_list_),
  };
  Sheet_WelfareGoal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareGoal_descriptor_,
      Sheet_WelfareGoal::default_instance_,
      Sheet_WelfareGoal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareGoal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareGoal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareGoal));
  E_WelfareGoaltask_descriptor_ = file->message_type(43);
  static const int E_WelfareGoaltask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, m_eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, m_reachprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, m_param_),
  };
  E_WelfareGoaltask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareGoaltask_descriptor_,
      E_WelfareGoaltask::default_instance_,
      E_WelfareGoaltask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareGoaltask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareGoaltask));
  Sheet_WelfareGoaltask_descriptor_ = file->message_type(44);
  static const int Sheet_WelfareGoaltask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareGoaltask, e_welfaregoaltask_list_),
  };
  Sheet_WelfareGoaltask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareGoaltask_descriptor_,
      Sheet_WelfareGoaltask::default_instance_,
      Sheet_WelfareGoaltask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareGoaltask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareGoaltask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareGoaltask));
  E_WelfareInvest_descriptor_ = file->message_type(45);
  static const int E_WelfareInvest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvest, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvest, m_functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvest, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvest, m_rewarditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvest, m_rewardgroup_),
  };
  E_WelfareInvest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareInvest_descriptor_,
      E_WelfareInvest::default_instance_,
      E_WelfareInvest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareInvest));
  Sheet_WelfareInvest_descriptor_ = file->message_type(46);
  static const int Sheet_WelfareInvest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareInvest, e_welfareinvest_list_),
  };
  Sheet_WelfareInvest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareInvest_descriptor_,
      Sheet_WelfareInvest::default_instance_,
      Sheet_WelfareInvest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareInvest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareInvest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareInvest));
  E_WelfareInvestrewardItemDesc_descriptor_ = file->message_type(47);
  static const int E_WelfareInvestrewardItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestrewardItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestrewardItemDesc, m_id_),
  };
  E_WelfareInvestrewardItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareInvestrewardItemDesc_descriptor_,
      E_WelfareInvestrewardItemDesc::default_instance_,
      E_WelfareInvestrewardItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestrewardItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestrewardItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareInvestrewardItemDesc));
  E_WelfareInvestreward_descriptor_ = file->message_type(48);
  static const int E_WelfareInvestreward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestreward, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestreward, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestreward, m_item_),
  };
  E_WelfareInvestreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareInvestreward_descriptor_,
      E_WelfareInvestreward::default_instance_,
      E_WelfareInvestreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareInvestreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareInvestreward));
  Sheet_WelfareInvestreward_descriptor_ = file->message_type(49);
  static const int Sheet_WelfareInvestreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareInvestreward, e_welfareinvestreward_list_),
  };
  Sheet_WelfareInvestreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareInvestreward_descriptor_,
      Sheet_WelfareInvestreward::default_instance_,
      Sheet_WelfareInvestreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareInvestreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareInvestreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareInvestreward));
  E_WelfareYttlgift_descriptor_ = file->message_type(50);
  static const int E_WelfareYttlgift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareYttlgift, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareYttlgift, m_rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareYttlgift, m_reward_),
  };
  E_WelfareYttlgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_WelfareYttlgift_descriptor_,
      E_WelfareYttlgift::default_instance_,
      E_WelfareYttlgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareYttlgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_WelfareYttlgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_WelfareYttlgift));
  Sheet_WelfareYttlgift_descriptor_ = file->message_type(51);
  static const int Sheet_WelfareYttlgift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareYttlgift, e_welfareyttlgift_list_),
  };
  Sheet_WelfareYttlgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_WelfareYttlgift_descriptor_,
      Sheet_WelfareYttlgift::default_instance_,
      Sheet_WelfareYttlgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareYttlgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_WelfareYttlgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_WelfareYttlgift));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fWelfare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareSign_descriptor_, &E_WelfareSign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareSign_descriptor_, &Sheet_WelfareSign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareAccruereward_descriptor_, &E_WelfareAccruereward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareAccruereward_descriptor_, &Sheet_WelfareAccruereward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareLvreward_descriptor_, &E_WelfareLvreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareLvreward_descriptor_, &Sheet_WelfareLvreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareOnline_descriptor_, &E_WelfareOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareOnline_descriptor_, &Sheet_WelfareOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareFraud_descriptor_, &E_WelfareFraud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareFraud_descriptor_, &Sheet_WelfareFraud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareWeekendgift_descriptor_, &E_WelfareWeekendgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareWeekendgift_descriptor_, &Sheet_WelfareWeekendgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareConstant_descriptor_, &E_WelfareConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareConstant_descriptor_, &Sheet_WelfareConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareQifu_descriptor_, &E_WelfareQifu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareQifu_descriptor_, &Sheet_WelfareQifu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareWish_descriptor_, &E_WelfareWish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareWish_descriptor_, &Sheet_WelfareWish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareLogon_descriptor_, &E_WelfareLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareLogon_descriptor_, &Sheet_WelfareLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareFirstcharge_descriptor_, &E_WelfareFirstcharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareFirstcharge_descriptor_, &Sheet_WelfareFirstcharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareSctype_descriptor_, &E_WelfareSctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareSctype_descriptor_, &Sheet_WelfareSctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareMibao_descriptor_, &E_WelfareMibao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareMibao_descriptor_, &Sheet_WelfareMibao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareKfleichong_descriptor_, &E_WelfareKfleichong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareKfleichong_descriptor_, &Sheet_WelfareKfleichong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareDailygift_descriptor_, &E_WelfareDailygift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareDailygift_descriptor_, &Sheet_WelfareDailygift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareLcgift_descriptor_, &E_WelfareLcgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareLcgift_descriptor_, &Sheet_WelfareLcgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareLcraffle_descriptor_, &E_WelfareLcraffle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareLcraffle_descriptor_, &Sheet_WelfareLcraffle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareLcturntableRaffleDesc_descriptor_, &E_WelfareLcturntableRaffleDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareLcturntable_descriptor_, &E_WelfareLcturntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareLcturntable_descriptor_, &Sheet_WelfareLcturntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareJackpot_descriptor_, &E_WelfareJackpot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareJackpot_descriptor_, &Sheet_WelfareJackpot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareMonthlycard_descriptor_, &E_WelfareMonthlycard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareMonthlycard_descriptor_, &Sheet_WelfareMonthlycard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareGoal_descriptor_, &E_WelfareGoal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareGoal_descriptor_, &Sheet_WelfareGoal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareGoaltask_descriptor_, &E_WelfareGoaltask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareGoaltask_descriptor_, &Sheet_WelfareGoaltask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareInvest_descriptor_, &E_WelfareInvest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareInvest_descriptor_, &Sheet_WelfareInvest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareInvestrewardItemDesc_descriptor_, &E_WelfareInvestrewardItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareInvestreward_descriptor_, &E_WelfareInvestreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareInvestreward_descriptor_, &Sheet_WelfareInvestreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_WelfareYttlgift_descriptor_, &E_WelfareYttlgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_WelfareYttlgift_descriptor_, &Sheet_WelfareYttlgift::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fWelfare_2eproto() {
  delete E_WelfareSign::default_instance_;
  delete E_WelfareSign_reflection_;
  delete Sheet_WelfareSign::default_instance_;
  delete Sheet_WelfareSign_reflection_;
  delete E_WelfareAccruereward::default_instance_;
  delete E_WelfareAccruereward_reflection_;
  delete Sheet_WelfareAccruereward::default_instance_;
  delete Sheet_WelfareAccruereward_reflection_;
  delete E_WelfareLvreward::default_instance_;
  delete E_WelfareLvreward_reflection_;
  delete Sheet_WelfareLvreward::default_instance_;
  delete Sheet_WelfareLvreward_reflection_;
  delete E_WelfareOnline::default_instance_;
  delete E_WelfareOnline_reflection_;
  delete Sheet_WelfareOnline::default_instance_;
  delete Sheet_WelfareOnline_reflection_;
  delete E_WelfareFraud::default_instance_;
  delete E_WelfareFraud_reflection_;
  delete Sheet_WelfareFraud::default_instance_;
  delete Sheet_WelfareFraud_reflection_;
  delete E_WelfareWeekendgift::default_instance_;
  delete E_WelfareWeekendgift_reflection_;
  delete Sheet_WelfareWeekendgift::default_instance_;
  delete Sheet_WelfareWeekendgift_reflection_;
  delete E_WelfareConstant::default_instance_;
  delete E_WelfareConstant_reflection_;
  delete Sheet_WelfareConstant::default_instance_;
  delete Sheet_WelfareConstant_reflection_;
  delete E_WelfareQifu::default_instance_;
  delete E_WelfareQifu_reflection_;
  delete Sheet_WelfareQifu::default_instance_;
  delete Sheet_WelfareQifu_reflection_;
  delete E_WelfareWish::default_instance_;
  delete E_WelfareWish_reflection_;
  delete Sheet_WelfareWish::default_instance_;
  delete Sheet_WelfareWish_reflection_;
  delete E_WelfareLogon::default_instance_;
  delete E_WelfareLogon_reflection_;
  delete Sheet_WelfareLogon::default_instance_;
  delete Sheet_WelfareLogon_reflection_;
  delete E_WelfareFirstcharge::default_instance_;
  delete E_WelfareFirstcharge_reflection_;
  delete Sheet_WelfareFirstcharge::default_instance_;
  delete Sheet_WelfareFirstcharge_reflection_;
  delete E_WelfareSctype::default_instance_;
  delete E_WelfareSctype_reflection_;
  delete Sheet_WelfareSctype::default_instance_;
  delete Sheet_WelfareSctype_reflection_;
  delete E_WelfareMibao::default_instance_;
  delete E_WelfareMibao_reflection_;
  delete Sheet_WelfareMibao::default_instance_;
  delete Sheet_WelfareMibao_reflection_;
  delete E_WelfareKfleichong::default_instance_;
  delete E_WelfareKfleichong_reflection_;
  delete Sheet_WelfareKfleichong::default_instance_;
  delete Sheet_WelfareKfleichong_reflection_;
  delete E_WelfareDailygift::default_instance_;
  delete E_WelfareDailygift_reflection_;
  delete Sheet_WelfareDailygift::default_instance_;
  delete Sheet_WelfareDailygift_reflection_;
  delete E_WelfareLcgift::default_instance_;
  delete E_WelfareLcgift_reflection_;
  delete Sheet_WelfareLcgift::default_instance_;
  delete Sheet_WelfareLcgift_reflection_;
  delete E_WelfareLcraffle::default_instance_;
  delete E_WelfareLcraffle_reflection_;
  delete Sheet_WelfareLcraffle::default_instance_;
  delete Sheet_WelfareLcraffle_reflection_;
  delete E_WelfareLcturntableRaffleDesc::default_instance_;
  delete E_WelfareLcturntableRaffleDesc_reflection_;
  delete E_WelfareLcturntable::default_instance_;
  delete E_WelfareLcturntable_reflection_;
  delete Sheet_WelfareLcturntable::default_instance_;
  delete Sheet_WelfareLcturntable_reflection_;
  delete E_WelfareJackpot::default_instance_;
  delete E_WelfareJackpot_reflection_;
  delete Sheet_WelfareJackpot::default_instance_;
  delete Sheet_WelfareJackpot_reflection_;
  delete E_WelfareMonthlycard::default_instance_;
  delete E_WelfareMonthlycard_reflection_;
  delete Sheet_WelfareMonthlycard::default_instance_;
  delete Sheet_WelfareMonthlycard_reflection_;
  delete E_WelfareGoal::default_instance_;
  delete E_WelfareGoal_reflection_;
  delete Sheet_WelfareGoal::default_instance_;
  delete Sheet_WelfareGoal_reflection_;
  delete E_WelfareGoaltask::default_instance_;
  delete E_WelfareGoaltask_reflection_;
  delete Sheet_WelfareGoaltask::default_instance_;
  delete Sheet_WelfareGoaltask_reflection_;
  delete E_WelfareInvest::default_instance_;
  delete E_WelfareInvest_reflection_;
  delete Sheet_WelfareInvest::default_instance_;
  delete Sheet_WelfareInvest_reflection_;
  delete E_WelfareInvestrewardItemDesc::default_instance_;
  delete E_WelfareInvestrewardItemDesc_reflection_;
  delete E_WelfareInvestreward::default_instance_;
  delete E_WelfareInvestreward_reflection_;
  delete Sheet_WelfareInvestreward::default_instance_;
  delete Sheet_WelfareInvestreward_reflection_;
  delete E_WelfareYttlgift::default_instance_;
  delete E_WelfareYttlgift_reflection_;
  delete Sheet_WelfareYttlgift::default_instance_;
  delete Sheet_WelfareYttlgift_reflection_;
}

void protobuf_AddDesc_E_5fWelfare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017E_Welfare.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\355\001\n\rE_WelfareSign\022\024\n\004m_id\030\001 \001"
    "(\005B\006\302\377\024\002id\022\033\n\007m_month\030\002 \001(\005B\n\302\377\024\006\346\234\210\344\273\275\022"
    "\032\n\006m_days\030\003 \001(\005B\n\302\377\024\006\345\244\251\346\225\260\022\"\n\005m_vip\030\004 \001"
    "(\005B\023\302\377\024\017VIP\345\217\214\345\200\215\347\255\211\347\272\247\022\036\n\006m_icon\030\005 \001(\tB"
    "\016\302\377\024\006\345\233\276\346\240\207\220\301\024@\022\"\n\010m_reward\030\006 \001(\005B\020\302\377\024\014\351"
    "\201\223\345\205\267\345\245\226\345\212\261\022%\n\013m_rewardnum\030\007 \001(\005B\020\302\377\024\014\351\201"
    "\223\345\205\267\346\225\260\351\207\217\"O\n\021Sheet_WelfareSign\022:\n\022E_Wel"
    "fareSign_List\030\001 \003(\0132\027.proto_ff.E_Welfare"
    "SignB\005\210\301\024\200\001\"\325\001\n\025E_WelfareAccruereward\022\024\n"
    "\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\033\n\007m_month\030\002 \001(\005B\n\302\377"
    "\024\006\346\234\210\344\273\275\022,\n\014m_accruedays\030\003 \001(\005B\026\302\377\024\022\347\264\257\347"
    "\247\257\347\255\276\345\210\260\345\244\251\346\225\260\022(\n\010m_reward\030\004 \001(\005B\026\302\377\024\022\347\264"
    "\257\347\247\257\345\245\226\345\212\261\351\201\223\345\205\267\0221\n\013m_rewardnum\030\005 \001(\005B\034\302"
    "\377\024\030\347\264\257\347\247\257\345\245\226\345\212\261\351\201\223\345\205\267\346\225\260\351\207\217\"f\n\031Sheet_Wel"
    "fareAccruereward\022I\n\032E_WelfareAccruerewar"
    "d_List\030\001 \003(\0132\037.proto_ff.E_WelfareAccruer"
    "ewardB\004\210\301\024\020\"\245\001\n\021E_WelfareLvreward\022\024\n\004m_i"
    "d\030\001 \001(\005B\006\302\377\024\002id\022\030\n\004m_lv\030\002 \001(\005B\n\302\377\024\006\347\255\211\347\272"
    "\247\022\036\n\nm_lvreward\030\003 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\022\034\n\005m_v"
    "ip\030\004 \001(\005B\r\302\377\024\tVIP\347\255\211\347\272\247\022\"\n\013m_vipreward\030\005"
    " \001(\005B\r\302\377\024\tVIP\345\245\226\345\212\261\"Z\n\025Sheet_WelfareLvre"
    "ward\022A\n\026E_WelfareLvreward_List\030\001 \003(\0132\033.p"
    "roto_ff.E_WelfareLvrewardB\004\210\301\024@\"o\n\017E_Wel"
    "fareOnline\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022&\n\014m_on"
    "linetime\030\002 \001(\005B\020\302\377\024\014\345\234\250\347\272\277\346\227\266\351\227\264\022\036\n\nm_lv"
    "reward\030\003 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\"T\n\023Sheet_Welfar"
    "eOnline\022=\n\024E_WelfareOnline_List\030\001 \003(\0132\031."
    "proto_ff.E_WelfareOnlineB\004\210\301\024\010\"}\n\016E_Welf"
    "areFraud\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\'\n\tm_pict"
    "ure\030\002 \001(\tB\024\302\377\024\014\345\233\276\347\211\207\350\265\204\346\272\220\220\301\024@\022,\n\tm_cor"
    "rect\030\003 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\344\270\272\346\255\243\347\241\256\347\255\224\346\241\210\"Q\n"
    "\022Sheet_WelfareFraud\022;\n\023E_WelfareFraud_Li"
    "st\030\001 \003(\0132\030.proto_ff.E_WelfareFraudB\004\210\301\024\020"
    "\"\261\001\n\024E_WelfareWeekendgift\022\024\n\004m_id\030\001 \001(\005B"
    "\006\302\377\024\002id\022!\n\007m_lvmin\030\002 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\347\255\211\347"
    "\272\247\022!\n\007m_lvmax\030\003 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\347\255\211\347\272\247\022\032\n"
    "\006m_date\030\004 \001(\005B\n\302\377\024\006\346\227\245\346\234\237\022!\n\tm_rewards\030\005"
    " \003(\005B\016\302\377\024\006\345\245\226\345\212\261\210\301\024\003\"c\n\030Sheet_WelfareWee"
    "kendgift\022G\n\031E_WelfareWeekendgift_List\030\001 "
    "\003(\0132\036.proto_ff.E_WelfareWeekendgiftB\004\210\301\024"
    "\010\"\265\004\n\021E_WelfareConstant\022\024\n\004m_id\030\001 \001(\005B\006\302"
    "\377\024\002id\022-\n\rm_addsigncost\030\002 \001(\005B\026\302\377\024\022\350\241\245\347\255\276"
    "\350\212\261\350\264\271\350\264\247\345\270\201\022.\n\016m_addsignprice\030\003 \001(\005B\026\302\377"
    "\024\022\350\241\245\347\255\276\350\212\261\350\264\271\344\273\267\346\240\274\022(\n\016m_noticereward\030\004"
    " \001(\005B\020\302\377\024\014\345\205\254\345\221\212\345\245\226\345\212\261\022*\n\nm_wrongmin\030\005 \001"
    "(\005B\026\302\377\024\022\346\234\200\345\260\217\351\224\231\350\257\257\347\255\224\346\241\210\0220\n\nm_wrongmax"
    "\030\006 \001(\005B\034\302\377\024\030\346\234\200\345\244\247\351\224\231\350\257\257\347\255\224\346\241\210\346\225\260\351\207\217\022*\n\r"
    "m_fraudreward\030\007 \001(\005B\023\302\377\024\017\351\230\262\350\257\210\351\252\227\345\245\226\345\212\261"
    "\022(\n\016m_firstrcharge\030\010 \001(\005B\020\302\377\024\014\351\246\226\345\205\205\351\242\235\345"
    "\272\246\022)\n\017m_secondrcharge\030\t \001(\005B\020\302\377\024\014\347\273\255\345\205\205\351"
    "\242\235\345\272\246\022\'\n\007m_gemmb\030\n \001(\005B\026\302\377\024\022\351\222\273\347\237\263\347\247\230\345\256\235"
    "\351\242\235\345\272\246\022(\n\010m_starmb\030\013 \001(\005B\026\302\377\024\022\346\230\237\350\200\200\347\247\230\345"
    "\256\235\351\242\235\345\272\246\022(\n\010m_kingmb\030\014 \001(\005B\026\302\377\024\022\347\216\213\350\200\205\347\247"
    "\230\345\256\235\351\242\235\345\272\246\022%\n\013m_keyrebate\030\r \001(\005B\020\302\377\024\014\345\257\206"
    "\345\214\231\350\277\224\345\210\251\"Z\n\025Sheet_WelfareConstant\022A\n\026E_"
    "WelfareConstant_List\030\001 \003(\0132\033.proto_ff.E_"
    "WelfareConstantB\004\210\301\024\002\"\206\001\n\rE_WelfareQifu\022"
    "\"\n\014m_constantid\030\001 \001(\005B\014\302\377\024\010\351\205\215\347\275\256id\022\"\n\016m"
    "_constantdata\030\002 \001(\005B\n\302\377\024\006\346\225\260\346\215\256\022-\n\014m_str"
    "ingdata\030\003 \001(\tB\027\302\377\024\017\345\255\227\347\254\246\344\270\262\346\225\260\346\215\256\220\301\024@\"N"
    "\n\021Sheet_WelfareQifu\0229\n\022E_WelfareQifu_Lis"
    "t\030\001 \003(\0132\027.proto_ff.E_WelfareQifuB\004\210\301\024\020\"M"
    "\n\rE_WelfareWish\022\033\n\007m_level\030\001 \001(\005B\n\302\377\024\006\347\255"
    "\211\347\272\247\022\037\n\005m_exp\030\002 \001(\003B\020\302\377\024\014\347\273\217\351\252\214\347\245\210\346\204\277\"O\n"
    "\021Sheet_WelfareWish\022:\n\022E_WelfareWish_List"
    "\030\001 \003(\0132\027.proto_ff.E_WelfareWishB\005\210\301\024\200\020\"\270"
    "\001\n\016E_WelfareLogon\022 \n\006m_days\030\001 \001(\005B\020\302\377\024\014\347"
    "\231\273\345\275\225\345\244\251\346\225\260\022 \n\006m_type\030\002 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\347"
    "\261\273\345\236\213\022\036\n\006m_icon\030\003 \001(\005B\016\302\377\024\n\345\205\245\345\217\243icon\022$\n"
    "\nm_showitem\030\004 \001(\005B\020\302\377\024\014\345\261\225\347\244\272\347\211\251\345\223\201\022\034\n\010m"
    "_reward\030\005 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\"Q\n\022Sheet_Welfa"
    "reLogon\022;\n\023E_WelfareLogon_List\030\001 \003(\0132\030.p"
    "roto_ff.E_WelfareLogonB\004\210\301\024\020\"\312\002\n\024E_Welfa"
    "reFirstcharge\022\"\n\014m_constantid\030\001 \001(\005B\014\302\377\024"
    "\010\351\205\215\347\275\256id\022\"\n\010m_openlv\030\002 \001(\005B\020\302\377\024\014\345\274\200\345\220\257\347"
    "\255\211\347\272\247\022 \n\006m_type\030\003 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\347\261\273\345\236\213\022"
    "$\n\nm_opendays\030\004 \001(\005B\020\302\377\024\014\345\274\200\346\234\215\345\244\251\346\225\260\022\034\n"
    "\010m_reward\030\005 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\022)\n\007m_model\030\006"
    " \003(\tB\030\302\377\024\014\345\261\225\347\244\272\346\250\241\345\236\213\210\301\024\002\220\301\024@\022*\n\014m_rewa"
    "rdshow\030\007 \003(\005B\024\302\377\024\014\345\261\225\347\244\272\345\245\226\345\212\261\210\301\024\002\022-\n\013m_"
    "rewarddes\030\010 \003(\tB\030\302\377\024\014\345\245\226\345\212\261\346\217\217\350\277\260\210\301\024\003\220\301\024"
    "@\"c\n\030Sheet_WelfareFirstcharge\022G\n\031E_Welfa"
    "reFirstcharge_List\030\001 \003(\0132\036.proto_ff.E_We"
    "lfareFirstchargeB\004\210\301\024\010\"\300\001\n\017E_WelfareScty"
    "pe\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022(\n\014m_functionid"
    "\030\002 \001(\005B\022\302\377\024\016\345\212\237\350\203\275\345\274\200\346\224\276id\022%\n\007m_title\030\003 "
    "\001(\tB\024\302\377\024\014\346\240\207\351\242\230\345\233\276\347\211\207\220\301\024@\022!\n\tm_basemap\030\004"
    " \001(\tB\016\302\377\024\006\345\272\225\345\233\276\220\301\024@\022#\n\tm_rcharge\030\005 \001(\005B"
    "\020\302\377\024\014\345\205\205\345\200\274\351\242\235\345\272\246\"T\n\023Sheet_WelfareSctype"
    "\022=\n\024E_WelfareSctype_List\030\001 \003(\0132\031.proto_f"
    "f.E_WelfareSctypeB\004\210\301\024\010\"\361\001\n\016E_WelfareMib"
    "ao\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\010m_openlv\030\002 \001"
    "(\005B\020\302\377\024\014\345\274\200\345\220\257\347\255\211\347\272\247\022 \n\006m_type\030\003 \001(\005B\020\302\377"
    "\024\014\345\205\205\345\200\274\347\261\273\345\236\213\022\032\n\006m_rank\030\004 \001(\005B\n\302\377\024\006\346\216\222\345"
    "\272\217\022$\n\nm_opendays\030\005 \001(\005B\020\302\377\024\014\345\274\200\346\234\215\345\244\251\346\225\260"
    "\022\034\n\010m_reward\030\006 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\022#\n\005m_des\030"
    "\007 \001(\tB\024\302\377\024\014\345\200\215\346\225\260\346\217\217\350\277\260\220\301\024@\"Q\n\022Sheet_Wel"
    "fareMibao\022;\n\023E_WelfareMibao_List\030\001 \003(\0132\030"
    ".proto_ff.E_WelfareMibaoB\004\210\301\024 \"\223\001\n\023E_Wel"
    "fareKfleichong\022\030\n\004m_id\030\001 \001(\005B\n\302\377\024\006\346\241\243\346\254\241"
    "\022!\n\007m_money\030\002 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\350\264\247\345\270\201\022!\n\007m"
    "_limit\030\003 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\351\242\235\345\272\246\022\034\n\010m_rewa"
    "rd\030\004 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\"`\n\027Sheet_WelfareKfl"
    "eichong\022E\n\030E_WelfareKfleichong_List\030\001 \003("
    "\0132\035.proto_ff.E_WelfareKfleichongB\004\210\301\024\020\"\346"
    "\001\n\022E_WelfareDailygift\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002id\022 \n\006m_type\030\002 \001(\005B\020\302\377\024\014\347\244\274\345\214\205\347\261\273\345\236\213\022&\n"
    "\014m_rechargeid\030\003 \001(\005B\020\302\377\024\014\344\273\267\346\240\274\351\223\276\346\216\245\022-\n"
    "\rm_oneclickbuy\030\004 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\344\270\200\351\224\256\350\264"
    "\255\344\271\260\022\034\n\010m_reward\030\005 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\022#\n\tm_"
    "quality\030\006 \001(\005B\020\302\377\024\014\347\244\274\345\214\205\345\223\201\350\264\250\"]\n\026Sheet"
    "_WelfareDailygift\022C\n\027E_WelfareDailygift_"
    "List\030\001 \003(\0132\034.proto_ff.E_WelfareDailygift"
    "B\004\210\301\024\020\"\367\001\n\017E_WelfareLcgift\022\024\n\004m_id\030\001 \001(\005"
    "B\006\302\377\024\002id\022 \n\006m_type\030\002 \001(\005B\020\302\377\024\014\347\244\274\345\214\205\347\261\273\345"
    "\236\213\022!\n\007m_limit\030\003 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\351\242\235\345\272\246\022 \n"
    "\006m_days\030\004 \001(\005B\020\302\377\024\014\347\264\257\345\205\205\345\244\251\346\225\260\022#\n\tm_sta"
    "rnum\030\005 \001(\005B\020\302\377\024\014\346\230\237\346\230\237\346\225\260\351\207\217\022\034\n\010m_reward"
    "\030\006 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\022$\n\nm_showitem\030\007 \001(\005B\020"
    "\302\377\024\014\351\201\223\345\205\267\345\261\225\347\244\272\"T\n\023Sheet_WelfareLcgift\022"
    "=\n\024E_WelfareLcgift_List\030\001 \003(\0132\031.proto_ff"
    ".E_WelfareLcgiftB\004\210\301\024 \"\215\001\n\021E_WelfareLcra"
    "ffle\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022!\n\007m_money\030\002 "
    "\001(\005B\020\302\377\024\014\345\205\205\345\200\274\350\264\247\345\270\201\022!\n\007m_limit\030\003 \001(\005B\020"
    "\302\377\024\014\345\205\205\345\200\274\351\242\235\345\272\246\022\034\n\010m_reward\030\004 \001(\005B\n\302\377\024\006"
    "\345\245\226\345\212\261\"Z\n\025Sheet_WelfareLcraffle\022A\n\026E_Wel"
    "fareLcraffle_List\030\001 \003(\0132\033.proto_ff.E_Wel"
    "fareLcraffleB\004\210\301\024\010\"W\n\036E_WelfareLcturntab"
    "leRaffleDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022"
    "\032\n\006m_item\030\002 \001(\005B\n\302\377\024\006\351\201\223\345\205\267\"\376\001\n\024E_Welfar"
    "eLcturntable\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\'\n\rm_"
    "jackpottype\030\002 \001(\005B\020\302\377\024\014\345\245\226\346\261\240\347\261\273\345\236\213\022-\n\rm"
    "_raffletimes\030\003 \001(\005B\026\302\377\024\022\347\264\257\347\247\257\346\212\275\345\245\226\346\254\241\346"
    "\225\260\022,\n\014m_ratimesrew\030\004 \001(\005B\026\302\377\024\022\347\264\257\347\247\257\346\212\275\345"
    "\245\226\345\245\226\345\212\261\022J\n\010m_raffle\030\005 \003(\0132(.proto_ff.E_"
    "WelfareLcturntableRaffleDescB\016\302\377\024\006\346\212\275\345\245\226"
    "\210\301\024\002\"c\n\030Sheet_WelfareLcturntable\022G\n\031E_We"
    "lfareLcturntable_List\030\001 \003(\0132\036.proto_ff.E"
    "_WelfareLcturntableB\004\210\301\024\004\"\305\001\n\020E_WelfareJ"
    "ackpot\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022 \n\006m_type\030\002"
    " \001(\005B\020\302\377\024\014\345\245\226\346\261\240\347\261\273\345\236\213\022\032\n\006m_rank\030\003 \001(\005B\n"
    "\302\377\024\006\346\216\222\345\272\217\022\032\n\006m_item\030\004 \001(\005B\n\302\377\024\006\351\201\223\345\205\267\022\035"
    "\n\tm_itemnum\030\005 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\"\n\010m_weigh"
    "t\030\006 \001(\005B\020\302\377\024\014\346\212\275\345\217\226\346\235\203\351\207\215\"W\n\024Sheet_Welfa"
    "reJackpot\022\?\n\025E_WelfareJackpot_List\030\001 \003(\013"
    "2\032.proto_ff.E_WelfareJackpotB\004\210\301\024@\"\271\002\n\024E"
    "_WelfareMonthlycard\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002i"
    "d\022$\n\nm_cardtype\030\002 \001(\005B\020\302\377\024\014\346\234\210\345\215\241\347\261\273\345\236\213\022"
    "+\n\013m_cardmoney\030\003 \001(\005B\026\302\377\024\022\346\234\210\345\215\241\350\264\255\344\271\260\351\223"
    "\276\346\216\245\0223\n\rm_cardbuyitem\030\004 \001(\005B\034\302\377\024\030\346\234\210\345\215\241\350"
    "\264\255\344\271\260\347\253\213\345\276\227\346\235\220\346\226\231\022/\n\017m_carddailyitem\030\005 \001"
    "(\005B\026\302\377\024\022\346\234\210\345\215\241\346\257\217\346\227\245\346\235\220\346\226\231\022*\n\nm_cardtime"
    "\030\006 \001(\005B\026\302\377\024\022\346\234\210\345\215\241\346\214\201\347\273\255\346\227\266\351\227\264\022&\n\014m_flmu"
    "ltiple\030\007 \001(\005B\020\302\377\024\014\350\277\224\345\210\251\345\200\215\346\225\260\"c\n\030Sheet_"
    "WelfareMonthlycard\022G\n\031E_WelfareMonthlyca"
    "rd_List\030\001 \003(\0132\036.proto_ff.E_WelfareMonthl"
    "ycardB\004\210\301\024\020\"\364\001\n\rE_WelfareGoal\022\024\n\004m_id\030\001 "
    "\001(\005B\006\302\377\024\002id\022&\n\014m_functionid\030\002 \001(\005B\020\302\377\024\014\345"
    "\205\263\350\201\224\345\274\200\345\205\263\022(\n\013m_taskgroup\030\003 \001(\005B\023\302\377\024\017\344\273"
    "\273\345\212\241\345\210\227\350\241\250\347\273\204\0222\n\tm_tasknum\030\004 \001(\005B\037\302\377\024\033\351\234"
    "\200\350\246\201\345\256\214\346\210\220\347\232\204\344\273\273\345\212\241\346\225\260\351\207\217\022%\n\013m_rewrditem"
    "\030\005 \001(\005B\020\302\377\024\014\345\256\214\346\210\220\345\245\226\345\212\261\022 \n\006m_time\030\006 \001(\005"
    "B\020\302\377\024\014\346\214\201\347\273\255\346\227\266\351\227\264\"N\n\021Sheet_WelfareGoal\022"
    "9\n\022E_WelfareGoal_List\030\001 \003(\0132\027.proto_ff.E"
    "_WelfareGoalB\004\210\301\024\002\"\217\002\n\021E_WelfareGoaltask"
    "\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\tm_groupid\030\002 \001("
    "\005B\017\302\377\024\013\344\273\273\345\212\241\347\273\204id\022%\n\013m_eventtype\030\003 \001(\005B"
    "\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213\022#\n\014m_reachprice\030\004 \001(\005B"
    "\r\302\377\024\t\350\276\276\346\210\220\345\200\274\022\"\n\010m_itemid\030\005 \001(\005B\020\302\377\024\014\345\245"
    "\226\345\212\261\351\201\223\345\205\267\022#\n\tm_itemnum\030\006 \001(\005B\020\302\377\024\014\351\201\223\345\205"
    "\267\346\225\260\351\207\217\022+\n\007m_param\030\007 \003(\005B\032\302\377\024\022\344\272\213\344\273\266\345\256\214\346"
    "\210\220\345\217\202\346\225\260\210\301\024\003\"Z\n\025Sheet_WelfareGoaltask\022A\n"
    "\026E_WelfareGoaltask_List\030\001 \003(\0132\033.proto_ff"
    ".E_WelfareGoaltaskB\004\210\301\024\020\"\300\001\n\017E_WelfareIn"
    "vest\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022&\n\014m_function"
    "id\030\002 \001(\005B\020\302\377\024\014\345\274\200\346\224\276\346\235\241\344\273\266\022\033\n\007m_price\030\003 "
    "\001(\005B\n\302\377\024\006\344\273\267\346\240\274\022&\n\014m_rewarditem\030\004 \001(\005B\020\302"
    "\377\024\014\345\245\226\345\212\261\351\201\223\345\205\267\022*\n\rm_rewardgroup\030\005 \001(\005B\023"
    "\302\377\024\017\346\212\225\350\265\204\345\245\226\345\212\261\347\273\204\"T\n\023Sheet_WelfareInve"
    "st\022=\n\024E_WelfareInvest_List\030\001 \003(\0132\031.proto"
    "_ff.E_WelfareInvestB\004\210\301\024\010\"P\n\035E_WelfareIn"
    "vestrewardItemDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346"
    "\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\"\270\001\n\025E_Welfar"
    "eInvestreward\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\007m"
    "_group\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022\036\n\004m_lv\030\003 \001(\005B\020\302"
    "\377\024\014\351\242\206\345\217\226\347\255\211\347\272\247\022M\n\006m_item\030\004 \003(\0132\'.proto_"
    "ff.E_WelfareInvestrewardItemDescB\024\302\377\024\014\345\245"
    "\226\345\212\261\351\201\223\345\205\267\210\301\024\002\"f\n\031Sheet_WelfareInvestrew"
    "ard\022I\n\032E_WelfareInvestreward_List\030\001 \003(\0132"
    "\037.proto_ff.E_WelfareInvestrewardB\004\210\301\024@\"o"
    "\n\021E_WelfareYttlgift\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002i"
    "d\022&\n\014m_rechargeid\030\002 \001(\005B\020\302\377\024\014\344\273\267\346\240\274\351\223\276\346\216"
    "\245\022\034\n\010m_reward\030\003 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\"Z\n\025Sheet"
    "_WelfareYttlgift\022A\n\026E_WelfareYttlgift_Li"
    "st\030\001 \003(\0132\033.proto_ff.E_WelfareYttlgiftB\004\210"
    "\301\024\004", 7843);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Welfare.proto", &protobuf_RegisterTypes);
  E_WelfareSign::default_instance_ = new E_WelfareSign();
  Sheet_WelfareSign::default_instance_ = new Sheet_WelfareSign();
  E_WelfareAccruereward::default_instance_ = new E_WelfareAccruereward();
  Sheet_WelfareAccruereward::default_instance_ = new Sheet_WelfareAccruereward();
  E_WelfareLvreward::default_instance_ = new E_WelfareLvreward();
  Sheet_WelfareLvreward::default_instance_ = new Sheet_WelfareLvreward();
  E_WelfareOnline::default_instance_ = new E_WelfareOnline();
  Sheet_WelfareOnline::default_instance_ = new Sheet_WelfareOnline();
  E_WelfareFraud::default_instance_ = new E_WelfareFraud();
  Sheet_WelfareFraud::default_instance_ = new Sheet_WelfareFraud();
  E_WelfareWeekendgift::default_instance_ = new E_WelfareWeekendgift();
  Sheet_WelfareWeekendgift::default_instance_ = new Sheet_WelfareWeekendgift();
  E_WelfareConstant::default_instance_ = new E_WelfareConstant();
  Sheet_WelfareConstant::default_instance_ = new Sheet_WelfareConstant();
  E_WelfareQifu::default_instance_ = new E_WelfareQifu();
  Sheet_WelfareQifu::default_instance_ = new Sheet_WelfareQifu();
  E_WelfareWish::default_instance_ = new E_WelfareWish();
  Sheet_WelfareWish::default_instance_ = new Sheet_WelfareWish();
  E_WelfareLogon::default_instance_ = new E_WelfareLogon();
  Sheet_WelfareLogon::default_instance_ = new Sheet_WelfareLogon();
  E_WelfareFirstcharge::default_instance_ = new E_WelfareFirstcharge();
  Sheet_WelfareFirstcharge::default_instance_ = new Sheet_WelfareFirstcharge();
  E_WelfareSctype::default_instance_ = new E_WelfareSctype();
  Sheet_WelfareSctype::default_instance_ = new Sheet_WelfareSctype();
  E_WelfareMibao::default_instance_ = new E_WelfareMibao();
  Sheet_WelfareMibao::default_instance_ = new Sheet_WelfareMibao();
  E_WelfareKfleichong::default_instance_ = new E_WelfareKfleichong();
  Sheet_WelfareKfleichong::default_instance_ = new Sheet_WelfareKfleichong();
  E_WelfareDailygift::default_instance_ = new E_WelfareDailygift();
  Sheet_WelfareDailygift::default_instance_ = new Sheet_WelfareDailygift();
  E_WelfareLcgift::default_instance_ = new E_WelfareLcgift();
  Sheet_WelfareLcgift::default_instance_ = new Sheet_WelfareLcgift();
  E_WelfareLcraffle::default_instance_ = new E_WelfareLcraffle();
  Sheet_WelfareLcraffle::default_instance_ = new Sheet_WelfareLcraffle();
  E_WelfareLcturntableRaffleDesc::default_instance_ = new E_WelfareLcturntableRaffleDesc();
  E_WelfareLcturntable::default_instance_ = new E_WelfareLcturntable();
  Sheet_WelfareLcturntable::default_instance_ = new Sheet_WelfareLcturntable();
  E_WelfareJackpot::default_instance_ = new E_WelfareJackpot();
  Sheet_WelfareJackpot::default_instance_ = new Sheet_WelfareJackpot();
  E_WelfareMonthlycard::default_instance_ = new E_WelfareMonthlycard();
  Sheet_WelfareMonthlycard::default_instance_ = new Sheet_WelfareMonthlycard();
  E_WelfareGoal::default_instance_ = new E_WelfareGoal();
  Sheet_WelfareGoal::default_instance_ = new Sheet_WelfareGoal();
  E_WelfareGoaltask::default_instance_ = new E_WelfareGoaltask();
  Sheet_WelfareGoaltask::default_instance_ = new Sheet_WelfareGoaltask();
  E_WelfareInvest::default_instance_ = new E_WelfareInvest();
  Sheet_WelfareInvest::default_instance_ = new Sheet_WelfareInvest();
  E_WelfareInvestrewardItemDesc::default_instance_ = new E_WelfareInvestrewardItemDesc();
  E_WelfareInvestreward::default_instance_ = new E_WelfareInvestreward();
  Sheet_WelfareInvestreward::default_instance_ = new Sheet_WelfareInvestreward();
  E_WelfareYttlgift::default_instance_ = new E_WelfareYttlgift();
  Sheet_WelfareYttlgift::default_instance_ = new Sheet_WelfareYttlgift();
  E_WelfareSign::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareSign::default_instance_->InitAsDefaultInstance();
  E_WelfareAccruereward::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareAccruereward::default_instance_->InitAsDefaultInstance();
  E_WelfareLvreward::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareLvreward::default_instance_->InitAsDefaultInstance();
  E_WelfareOnline::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareOnline::default_instance_->InitAsDefaultInstance();
  E_WelfareFraud::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareFraud::default_instance_->InitAsDefaultInstance();
  E_WelfareWeekendgift::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareWeekendgift::default_instance_->InitAsDefaultInstance();
  E_WelfareConstant::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareConstant::default_instance_->InitAsDefaultInstance();
  E_WelfareQifu::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareQifu::default_instance_->InitAsDefaultInstance();
  E_WelfareWish::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareWish::default_instance_->InitAsDefaultInstance();
  E_WelfareLogon::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareLogon::default_instance_->InitAsDefaultInstance();
  E_WelfareFirstcharge::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareFirstcharge::default_instance_->InitAsDefaultInstance();
  E_WelfareSctype::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareSctype::default_instance_->InitAsDefaultInstance();
  E_WelfareMibao::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareMibao::default_instance_->InitAsDefaultInstance();
  E_WelfareKfleichong::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareKfleichong::default_instance_->InitAsDefaultInstance();
  E_WelfareDailygift::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareDailygift::default_instance_->InitAsDefaultInstance();
  E_WelfareLcgift::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareLcgift::default_instance_->InitAsDefaultInstance();
  E_WelfareLcraffle::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareLcraffle::default_instance_->InitAsDefaultInstance();
  E_WelfareLcturntableRaffleDesc::default_instance_->InitAsDefaultInstance();
  E_WelfareLcturntable::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareLcturntable::default_instance_->InitAsDefaultInstance();
  E_WelfareJackpot::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareJackpot::default_instance_->InitAsDefaultInstance();
  E_WelfareMonthlycard::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareMonthlycard::default_instance_->InitAsDefaultInstance();
  E_WelfareGoal::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareGoal::default_instance_->InitAsDefaultInstance();
  E_WelfareGoaltask::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareGoaltask::default_instance_->InitAsDefaultInstance();
  E_WelfareInvest::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareInvest::default_instance_->InitAsDefaultInstance();
  E_WelfareInvestrewardItemDesc::default_instance_->InitAsDefaultInstance();
  E_WelfareInvestreward::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareInvestreward::default_instance_->InitAsDefaultInstance();
  E_WelfareYttlgift::default_instance_->InitAsDefaultInstance();
  Sheet_WelfareYttlgift::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fWelfare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fWelfare_2eproto {
  StaticDescriptorInitializer_E_5fWelfare_2eproto() {
    protobuf_AddDesc_E_5fWelfare_2eproto();
  }
} static_descriptor_initializer_E_5fWelfare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_WelfareSign::kMIdFieldNumber;
const int E_WelfareSign::kMMonthFieldNumber;
const int E_WelfareSign::kMDaysFieldNumber;
const int E_WelfareSign::kMVipFieldNumber;
const int E_WelfareSign::kMIconFieldNumber;
const int E_WelfareSign::kMRewardFieldNumber;
const int E_WelfareSign::kMRewardnumFieldNumber;
#endif  // !_MSC_VER

E_WelfareSign::E_WelfareSign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareSign::InitAsDefaultInstance() {
}

E_WelfareSign::E_WelfareSign(const E_WelfareSign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareSign::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_month_ = 0;
  m_days_ = 0;
  m_vip_ = 0;
  m_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_reward_ = 0;
  m_rewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareSign::~E_WelfareSign() {
  SharedDtor();
}

void E_WelfareSign::SharedDtor() {
  if (m_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_icon_;
  }
  if (this != default_instance_) {
  }
}

void E_WelfareSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareSign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareSign_descriptor_;
}

const E_WelfareSign& E_WelfareSign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareSign* E_WelfareSign::default_instance_ = NULL;

E_WelfareSign* E_WelfareSign::New() const {
  return new E_WelfareSign;
}

void E_WelfareSign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_month_ = 0;
    m_days_ = 0;
    m_vip_ = 0;
    if (has_m_icon()) {
      if (m_icon_ != &::google::protobuf::internal::kEmptyString) {
        m_icon_->clear();
      }
    }
    m_reward_ = 0;
    m_rewardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_month;
        break;
      }

      // optional int32 m_month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_month_)));
          set_has_m_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_days;
        break;
      }

      // optional int32 m_days = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_days_)));
          set_has_m_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_vip;
        break;
      }

      // optional int32 m_vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vip_)));
          set_has_m_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_icon;
        break;
      }

      // optional string m_icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_icon().data(), this->m_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_rewardnum;
        break;
      }

      // optional int32 m_rewardnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardnum_)));
          set_has_m_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_month = 2;
  if (has_m_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_month(), output);
  }

  // optional int32 m_days = 3;
  if (has_m_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_days(), output);
  }

  // optional int32 m_vip = 4;
  if (has_m_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_vip(), output);
  }

  // optional string m_icon = 5;
  if (has_m_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_icon().data(), this->m_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_icon(), output);
  }

  // optional int32 m_reward = 6;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_reward(), output);
  }

  // optional int32 m_rewardnum = 7;
  if (has_m_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_rewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareSign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_month = 2;
  if (has_m_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_month(), target);
  }

  // optional int32 m_days = 3;
  if (has_m_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_days(), target);
  }

  // optional int32 m_vip = 4;
  if (has_m_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_vip(), target);
  }

  // optional string m_icon = 5;
  if (has_m_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_icon().data(), this->m_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_icon(), target);
  }

  // optional int32 m_reward = 6;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_reward(), target);
  }

  // optional int32 m_rewardnum = 7;
  if (has_m_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_rewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_month = 2;
    if (has_m_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_month());
    }

    // optional int32 m_days = 3;
    if (has_m_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_days());
    }

    // optional int32 m_vip = 4;
    if (has_m_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vip());
    }

    // optional string m_icon = 5;
    if (has_m_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_icon());
    }

    // optional int32 m_reward = 6;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_rewardnum = 7;
    if (has_m_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareSign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareSign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareSign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareSign::MergeFrom(const E_WelfareSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_month()) {
      set_m_month(from.m_month());
    }
    if (from.has_m_days()) {
      set_m_days(from.m_days());
    }
    if (from.has_m_vip()) {
      set_m_vip(from.m_vip());
    }
    if (from.has_m_icon()) {
      set_m_icon(from.m_icon());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_rewardnum()) {
      set_m_rewardnum(from.m_rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareSign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareSign::CopyFrom(const E_WelfareSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareSign::IsInitialized() const {

  return true;
}

void E_WelfareSign::Swap(E_WelfareSign* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_month_, other->m_month_);
    std::swap(m_days_, other->m_days_);
    std::swap(m_vip_, other->m_vip_);
    std::swap(m_icon_, other->m_icon_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_rewardnum_, other->m_rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareSign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareSign_descriptor_;
  metadata.reflection = E_WelfareSign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareSign::kEWelfareSignListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareSign::Sheet_WelfareSign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareSign::InitAsDefaultInstance() {
}

Sheet_WelfareSign::Sheet_WelfareSign(const Sheet_WelfareSign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareSign::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareSign::~Sheet_WelfareSign() {
  SharedDtor();
}

void Sheet_WelfareSign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareSign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareSign_descriptor_;
}

const Sheet_WelfareSign& Sheet_WelfareSign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareSign* Sheet_WelfareSign::default_instance_ = NULL;

Sheet_WelfareSign* Sheet_WelfareSign::New() const {
  return new Sheet_WelfareSign;
}

void Sheet_WelfareSign::Clear() {
  e_welfaresign_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareSign E_WelfareSign_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareSign_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfaresign_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareSign_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareSign E_WelfareSign_List = 1;
  for (int i = 0; i < this->e_welfaresign_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfaresign_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareSign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareSign E_WelfareSign_List = 1;
  for (int i = 0; i < this->e_welfaresign_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfaresign_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareSign::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareSign E_WelfareSign_List = 1;
  total_size += 1 * this->e_welfaresign_list_size();
  for (int i = 0; i < this->e_welfaresign_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfaresign_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareSign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareSign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareSign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareSign::MergeFrom(const Sheet_WelfareSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfaresign_list_.MergeFrom(from.e_welfaresign_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareSign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareSign::CopyFrom(const Sheet_WelfareSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareSign::IsInitialized() const {

  return true;
}

void Sheet_WelfareSign::Swap(Sheet_WelfareSign* other) {
  if (other != this) {
    e_welfaresign_list_.Swap(&other->e_welfaresign_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareSign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareSign_descriptor_;
  metadata.reflection = Sheet_WelfareSign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareAccruereward::kMIdFieldNumber;
const int E_WelfareAccruereward::kMMonthFieldNumber;
const int E_WelfareAccruereward::kMAccruedaysFieldNumber;
const int E_WelfareAccruereward::kMRewardFieldNumber;
const int E_WelfareAccruereward::kMRewardnumFieldNumber;
#endif  // !_MSC_VER

E_WelfareAccruereward::E_WelfareAccruereward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareAccruereward::InitAsDefaultInstance() {
}

E_WelfareAccruereward::E_WelfareAccruereward(const E_WelfareAccruereward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareAccruereward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_month_ = 0;
  m_accruedays_ = 0;
  m_reward_ = 0;
  m_rewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareAccruereward::~E_WelfareAccruereward() {
  SharedDtor();
}

void E_WelfareAccruereward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareAccruereward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareAccruereward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareAccruereward_descriptor_;
}

const E_WelfareAccruereward& E_WelfareAccruereward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareAccruereward* E_WelfareAccruereward::default_instance_ = NULL;

E_WelfareAccruereward* E_WelfareAccruereward::New() const {
  return new E_WelfareAccruereward;
}

void E_WelfareAccruereward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_month_ = 0;
    m_accruedays_ = 0;
    m_reward_ = 0;
    m_rewardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareAccruereward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_month;
        break;
      }

      // optional int32 m_month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_month_)));
          set_has_m_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_accruedays;
        break;
      }

      // optional int32 m_accruedays = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_accruedays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accruedays_)));
          set_has_m_accruedays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rewardnum;
        break;
      }

      // optional int32 m_rewardnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardnum_)));
          set_has_m_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareAccruereward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_month = 2;
  if (has_m_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_month(), output);
  }

  // optional int32 m_accruedays = 3;
  if (has_m_accruedays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_accruedays(), output);
  }

  // optional int32 m_reward = 4;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reward(), output);
  }

  // optional int32 m_rewardnum = 5;
  if (has_m_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareAccruereward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_month = 2;
  if (has_m_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_month(), target);
  }

  // optional int32 m_accruedays = 3;
  if (has_m_accruedays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_accruedays(), target);
  }

  // optional int32 m_reward = 4;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reward(), target);
  }

  // optional int32 m_rewardnum = 5;
  if (has_m_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareAccruereward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_month = 2;
    if (has_m_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_month());
    }

    // optional int32 m_accruedays = 3;
    if (has_m_accruedays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accruedays());
    }

    // optional int32 m_reward = 4;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_rewardnum = 5;
    if (has_m_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareAccruereward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareAccruereward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareAccruereward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareAccruereward::MergeFrom(const E_WelfareAccruereward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_month()) {
      set_m_month(from.m_month());
    }
    if (from.has_m_accruedays()) {
      set_m_accruedays(from.m_accruedays());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_rewardnum()) {
      set_m_rewardnum(from.m_rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareAccruereward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareAccruereward::CopyFrom(const E_WelfareAccruereward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareAccruereward::IsInitialized() const {

  return true;
}

void E_WelfareAccruereward::Swap(E_WelfareAccruereward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_month_, other->m_month_);
    std::swap(m_accruedays_, other->m_accruedays_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_rewardnum_, other->m_rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareAccruereward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareAccruereward_descriptor_;
  metadata.reflection = E_WelfareAccruereward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareAccruereward::kEWelfareAccruerewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareAccruereward::Sheet_WelfareAccruereward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareAccruereward::InitAsDefaultInstance() {
}

Sheet_WelfareAccruereward::Sheet_WelfareAccruereward(const Sheet_WelfareAccruereward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareAccruereward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareAccruereward::~Sheet_WelfareAccruereward() {
  SharedDtor();
}

void Sheet_WelfareAccruereward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareAccruereward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareAccruereward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareAccruereward_descriptor_;
}

const Sheet_WelfareAccruereward& Sheet_WelfareAccruereward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareAccruereward* Sheet_WelfareAccruereward::default_instance_ = NULL;

Sheet_WelfareAccruereward* Sheet_WelfareAccruereward::New() const {
  return new Sheet_WelfareAccruereward;
}

void Sheet_WelfareAccruereward::Clear() {
  e_welfareaccruereward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareAccruereward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareAccruereward E_WelfareAccruereward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareAccruereward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfareaccruereward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareAccruereward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareAccruereward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareAccruereward E_WelfareAccruereward_List = 1;
  for (int i = 0; i < this->e_welfareaccruereward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfareaccruereward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareAccruereward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareAccruereward E_WelfareAccruereward_List = 1;
  for (int i = 0; i < this->e_welfareaccruereward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfareaccruereward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareAccruereward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareAccruereward E_WelfareAccruereward_List = 1;
  total_size += 1 * this->e_welfareaccruereward_list_size();
  for (int i = 0; i < this->e_welfareaccruereward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfareaccruereward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareAccruereward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareAccruereward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareAccruereward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareAccruereward::MergeFrom(const Sheet_WelfareAccruereward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfareaccruereward_list_.MergeFrom(from.e_welfareaccruereward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareAccruereward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareAccruereward::CopyFrom(const Sheet_WelfareAccruereward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareAccruereward::IsInitialized() const {

  return true;
}

void Sheet_WelfareAccruereward::Swap(Sheet_WelfareAccruereward* other) {
  if (other != this) {
    e_welfareaccruereward_list_.Swap(&other->e_welfareaccruereward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareAccruereward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareAccruereward_descriptor_;
  metadata.reflection = Sheet_WelfareAccruereward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareLvreward::kMIdFieldNumber;
const int E_WelfareLvreward::kMLvFieldNumber;
const int E_WelfareLvreward::kMLvrewardFieldNumber;
const int E_WelfareLvreward::kMVipFieldNumber;
const int E_WelfareLvreward::kMViprewardFieldNumber;
#endif  // !_MSC_VER

E_WelfareLvreward::E_WelfareLvreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareLvreward::InitAsDefaultInstance() {
}

E_WelfareLvreward::E_WelfareLvreward(const E_WelfareLvreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareLvreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lv_ = 0;
  m_lvreward_ = 0;
  m_vip_ = 0;
  m_vipreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareLvreward::~E_WelfareLvreward() {
  SharedDtor();
}

void E_WelfareLvreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareLvreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareLvreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareLvreward_descriptor_;
}

const E_WelfareLvreward& E_WelfareLvreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareLvreward* E_WelfareLvreward::default_instance_ = NULL;

E_WelfareLvreward* E_WelfareLvreward::New() const {
  return new E_WelfareLvreward;
}

void E_WelfareLvreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lv_ = 0;
    m_lvreward_ = 0;
    m_vip_ = 0;
    m_vipreward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareLvreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lvreward;
        break;
      }

      // optional int32 m_lvreward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvreward_)));
          set_has_m_lvreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_vip;
        break;
      }

      // optional int32 m_vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vip_)));
          set_has_m_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_vipreward;
        break;
      }

      // optional int32 m_vipreward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vipreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vipreward_)));
          set_has_m_vipreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareLvreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  // optional int32 m_lvreward = 3;
  if (has_m_lvreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lvreward(), output);
  }

  // optional int32 m_vip = 4;
  if (has_m_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_vip(), output);
  }

  // optional int32 m_vipreward = 5;
  if (has_m_vipreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_vipreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareLvreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  // optional int32 m_lvreward = 3;
  if (has_m_lvreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lvreward(), target);
  }

  // optional int32 m_vip = 4;
  if (has_m_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_vip(), target);
  }

  // optional int32 m_vipreward = 5;
  if (has_m_vipreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_vipreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareLvreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_lvreward = 3;
    if (has_m_lvreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvreward());
    }

    // optional int32 m_vip = 4;
    if (has_m_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vip());
    }

    // optional int32 m_vipreward = 5;
    if (has_m_vipreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vipreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareLvreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareLvreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareLvreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareLvreward::MergeFrom(const E_WelfareLvreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_lvreward()) {
      set_m_lvreward(from.m_lvreward());
    }
    if (from.has_m_vip()) {
      set_m_vip(from.m_vip());
    }
    if (from.has_m_vipreward()) {
      set_m_vipreward(from.m_vipreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareLvreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareLvreward::CopyFrom(const E_WelfareLvreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareLvreward::IsInitialized() const {

  return true;
}

void E_WelfareLvreward::Swap(E_WelfareLvreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_lvreward_, other->m_lvreward_);
    std::swap(m_vip_, other->m_vip_);
    std::swap(m_vipreward_, other->m_vipreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareLvreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareLvreward_descriptor_;
  metadata.reflection = E_WelfareLvreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareLvreward::kEWelfareLvrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareLvreward::Sheet_WelfareLvreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareLvreward::InitAsDefaultInstance() {
}

Sheet_WelfareLvreward::Sheet_WelfareLvreward(const Sheet_WelfareLvreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareLvreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareLvreward::~Sheet_WelfareLvreward() {
  SharedDtor();
}

void Sheet_WelfareLvreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareLvreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareLvreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareLvreward_descriptor_;
}

const Sheet_WelfareLvreward& Sheet_WelfareLvreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareLvreward* Sheet_WelfareLvreward::default_instance_ = NULL;

Sheet_WelfareLvreward* Sheet_WelfareLvreward::New() const {
  return new Sheet_WelfareLvreward;
}

void Sheet_WelfareLvreward::Clear() {
  e_welfarelvreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareLvreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareLvreward E_WelfareLvreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareLvreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarelvreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareLvreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareLvreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareLvreward E_WelfareLvreward_List = 1;
  for (int i = 0; i < this->e_welfarelvreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarelvreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareLvreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareLvreward E_WelfareLvreward_List = 1;
  for (int i = 0; i < this->e_welfarelvreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarelvreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareLvreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareLvreward E_WelfareLvreward_List = 1;
  total_size += 1 * this->e_welfarelvreward_list_size();
  for (int i = 0; i < this->e_welfarelvreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarelvreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareLvreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareLvreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareLvreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareLvreward::MergeFrom(const Sheet_WelfareLvreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarelvreward_list_.MergeFrom(from.e_welfarelvreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareLvreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareLvreward::CopyFrom(const Sheet_WelfareLvreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareLvreward::IsInitialized() const {

  return true;
}

void Sheet_WelfareLvreward::Swap(Sheet_WelfareLvreward* other) {
  if (other != this) {
    e_welfarelvreward_list_.Swap(&other->e_welfarelvreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareLvreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareLvreward_descriptor_;
  metadata.reflection = Sheet_WelfareLvreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareOnline::kMIdFieldNumber;
const int E_WelfareOnline::kMOnlinetimeFieldNumber;
const int E_WelfareOnline::kMLvrewardFieldNumber;
#endif  // !_MSC_VER

E_WelfareOnline::E_WelfareOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareOnline::InitAsDefaultInstance() {
}

E_WelfareOnline::E_WelfareOnline(const E_WelfareOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareOnline::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_onlinetime_ = 0;
  m_lvreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareOnline::~E_WelfareOnline() {
  SharedDtor();
}

void E_WelfareOnline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareOnline_descriptor_;
}

const E_WelfareOnline& E_WelfareOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareOnline* E_WelfareOnline::default_instance_ = NULL;

E_WelfareOnline* E_WelfareOnline::New() const {
  return new E_WelfareOnline;
}

void E_WelfareOnline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_onlinetime_ = 0;
    m_lvreward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_onlinetime;
        break;
      }

      // optional int32 m_onlinetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_onlinetime_)));
          set_has_m_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lvreward;
        break;
      }

      // optional int32 m_lvreward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvreward_)));
          set_has_m_lvreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_onlinetime = 2;
  if (has_m_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_onlinetime(), output);
  }

  // optional int32 m_lvreward = 3;
  if (has_m_lvreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lvreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_onlinetime = 2;
  if (has_m_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_onlinetime(), target);
  }

  // optional int32 m_lvreward = 3;
  if (has_m_lvreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lvreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareOnline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_onlinetime = 2;
    if (has_m_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_onlinetime());
    }

    // optional int32 m_lvreward = 3;
    if (has_m_lvreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareOnline::MergeFrom(const E_WelfareOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_onlinetime()) {
      set_m_onlinetime(from.m_onlinetime());
    }
    if (from.has_m_lvreward()) {
      set_m_lvreward(from.m_lvreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareOnline::CopyFrom(const E_WelfareOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareOnline::IsInitialized() const {

  return true;
}

void E_WelfareOnline::Swap(E_WelfareOnline* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_onlinetime_, other->m_onlinetime_);
    std::swap(m_lvreward_, other->m_lvreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareOnline_descriptor_;
  metadata.reflection = E_WelfareOnline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareOnline::kEWelfareOnlineListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareOnline::Sheet_WelfareOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareOnline::InitAsDefaultInstance() {
}

Sheet_WelfareOnline::Sheet_WelfareOnline(const Sheet_WelfareOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareOnline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareOnline::~Sheet_WelfareOnline() {
  SharedDtor();
}

void Sheet_WelfareOnline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareOnline_descriptor_;
}

const Sheet_WelfareOnline& Sheet_WelfareOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareOnline* Sheet_WelfareOnline::default_instance_ = NULL;

Sheet_WelfareOnline* Sheet_WelfareOnline::New() const {
  return new Sheet_WelfareOnline;
}

void Sheet_WelfareOnline::Clear() {
  e_welfareonline_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareOnline E_WelfareOnline_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareOnline_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfareonline_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareOnline_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareOnline E_WelfareOnline_List = 1;
  for (int i = 0; i < this->e_welfareonline_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfareonline_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareOnline E_WelfareOnline_List = 1;
  for (int i = 0; i < this->e_welfareonline_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfareonline_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareOnline::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareOnline E_WelfareOnline_List = 1;
  total_size += 1 * this->e_welfareonline_list_size();
  for (int i = 0; i < this->e_welfareonline_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfareonline_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareOnline::MergeFrom(const Sheet_WelfareOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfareonline_list_.MergeFrom(from.e_welfareonline_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareOnline::CopyFrom(const Sheet_WelfareOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareOnline::IsInitialized() const {

  return true;
}

void Sheet_WelfareOnline::Swap(Sheet_WelfareOnline* other) {
  if (other != this) {
    e_welfareonline_list_.Swap(&other->e_welfareonline_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareOnline_descriptor_;
  metadata.reflection = Sheet_WelfareOnline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareFraud::kMIdFieldNumber;
const int E_WelfareFraud::kMPictureFieldNumber;
const int E_WelfareFraud::kMCorrectFieldNumber;
#endif  // !_MSC_VER

E_WelfareFraud::E_WelfareFraud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareFraud::InitAsDefaultInstance() {
}

E_WelfareFraud::E_WelfareFraud(const E_WelfareFraud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareFraud::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_correct_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareFraud::~E_WelfareFraud() {
  SharedDtor();
}

void E_WelfareFraud::SharedDtor() {
  if (m_picture_ != &::google::protobuf::internal::kEmptyString) {
    delete m_picture_;
  }
  if (this != default_instance_) {
  }
}

void E_WelfareFraud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareFraud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareFraud_descriptor_;
}

const E_WelfareFraud& E_WelfareFraud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareFraud* E_WelfareFraud::default_instance_ = NULL;

E_WelfareFraud* E_WelfareFraud::New() const {
  return new E_WelfareFraud;
}

void E_WelfareFraud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_picture()) {
      if (m_picture_ != &::google::protobuf::internal::kEmptyString) {
        m_picture_->clear();
      }
    }
    m_correct_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareFraud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_picture;
        break;
      }

      // optional string m_picture = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_picture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_picture().data(), this->m_picture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_correct;
        break;
      }

      // optional int32 m_correct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_correct_)));
          set_has_m_correct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareFraud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_picture = 2;
  if (has_m_picture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_picture().data(), this->m_picture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_picture(), output);
  }

  // optional int32 m_correct = 3;
  if (has_m_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_correct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareFraud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_picture = 2;
  if (has_m_picture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_picture().data(), this->m_picture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_picture(), target);
  }

  // optional int32 m_correct = 3;
  if (has_m_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_correct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareFraud::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_picture = 2;
    if (has_m_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_picture());
    }

    // optional int32 m_correct = 3;
    if (has_m_correct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_correct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareFraud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareFraud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareFraud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareFraud::MergeFrom(const E_WelfareFraud& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_picture()) {
      set_m_picture(from.m_picture());
    }
    if (from.has_m_correct()) {
      set_m_correct(from.m_correct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareFraud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareFraud::CopyFrom(const E_WelfareFraud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareFraud::IsInitialized() const {

  return true;
}

void E_WelfareFraud::Swap(E_WelfareFraud* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_picture_, other->m_picture_);
    std::swap(m_correct_, other->m_correct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareFraud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareFraud_descriptor_;
  metadata.reflection = E_WelfareFraud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareFraud::kEWelfareFraudListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareFraud::Sheet_WelfareFraud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareFraud::InitAsDefaultInstance() {
}

Sheet_WelfareFraud::Sheet_WelfareFraud(const Sheet_WelfareFraud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareFraud::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareFraud::~Sheet_WelfareFraud() {
  SharedDtor();
}

void Sheet_WelfareFraud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareFraud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareFraud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareFraud_descriptor_;
}

const Sheet_WelfareFraud& Sheet_WelfareFraud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareFraud* Sheet_WelfareFraud::default_instance_ = NULL;

Sheet_WelfareFraud* Sheet_WelfareFraud::New() const {
  return new Sheet_WelfareFraud;
}

void Sheet_WelfareFraud::Clear() {
  e_welfarefraud_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareFraud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareFraud E_WelfareFraud_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareFraud_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarefraud_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareFraud_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareFraud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareFraud E_WelfareFraud_List = 1;
  for (int i = 0; i < this->e_welfarefraud_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarefraud_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareFraud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareFraud E_WelfareFraud_List = 1;
  for (int i = 0; i < this->e_welfarefraud_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarefraud_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareFraud::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareFraud E_WelfareFraud_List = 1;
  total_size += 1 * this->e_welfarefraud_list_size();
  for (int i = 0; i < this->e_welfarefraud_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarefraud_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareFraud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareFraud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareFraud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareFraud::MergeFrom(const Sheet_WelfareFraud& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarefraud_list_.MergeFrom(from.e_welfarefraud_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareFraud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareFraud::CopyFrom(const Sheet_WelfareFraud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareFraud::IsInitialized() const {

  return true;
}

void Sheet_WelfareFraud::Swap(Sheet_WelfareFraud* other) {
  if (other != this) {
    e_welfarefraud_list_.Swap(&other->e_welfarefraud_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareFraud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareFraud_descriptor_;
  metadata.reflection = Sheet_WelfareFraud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareWeekendgift::kMIdFieldNumber;
const int E_WelfareWeekendgift::kMLvminFieldNumber;
const int E_WelfareWeekendgift::kMLvmaxFieldNumber;
const int E_WelfareWeekendgift::kMDateFieldNumber;
const int E_WelfareWeekendgift::kMRewardsFieldNumber;
#endif  // !_MSC_VER

E_WelfareWeekendgift::E_WelfareWeekendgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareWeekendgift::InitAsDefaultInstance() {
}

E_WelfareWeekendgift::E_WelfareWeekendgift(const E_WelfareWeekendgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareWeekendgift::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lvmin_ = 0;
  m_lvmax_ = 0;
  m_date_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareWeekendgift::~E_WelfareWeekendgift() {
  SharedDtor();
}

void E_WelfareWeekendgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareWeekendgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareWeekendgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareWeekendgift_descriptor_;
}

const E_WelfareWeekendgift& E_WelfareWeekendgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareWeekendgift* E_WelfareWeekendgift::default_instance_ = NULL;

E_WelfareWeekendgift* E_WelfareWeekendgift::New() const {
  return new E_WelfareWeekendgift;
}

void E_WelfareWeekendgift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lvmin_ = 0;
    m_lvmax_ = 0;
    m_date_ = 0;
  }
  m_rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareWeekendgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lvmin;
        break;
      }

      // optional int32 m_lvmin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmin_)));
          set_has_m_lvmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lvmax;
        break;
      }

      // optional int32 m_lvmax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmax_)));
          set_has_m_lvmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_date;
        break;
      }

      // optional int32 m_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_date_)));
          set_has_m_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rewards;
        break;
      }

      // repeated int32 m_rewards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_rewards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_rewards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareWeekendgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lvmin = 2;
  if (has_m_lvmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lvmin(), output);
  }

  // optional int32 m_lvmax = 3;
  if (has_m_lvmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lvmax(), output);
  }

  // optional int32 m_date = 4;
  if (has_m_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_date(), output);
  }

  // repeated int32 m_rewards = 5;
  for (int i = 0; i < this->m_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareWeekendgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lvmin = 2;
  if (has_m_lvmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lvmin(), target);
  }

  // optional int32 m_lvmax = 3;
  if (has_m_lvmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lvmax(), target);
  }

  // optional int32 m_date = 4;
  if (has_m_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_date(), target);
  }

  // repeated int32 m_rewards = 5;
  for (int i = 0; i < this->m_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareWeekendgift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lvmin = 2;
    if (has_m_lvmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmin());
    }

    // optional int32 m_lvmax = 3;
    if (has_m_lvmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmax());
    }

    // optional int32 m_date = 4;
    if (has_m_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_date());
    }

  }
  // repeated int32 m_rewards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_rewards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_rewards(i));
    }
    total_size += 1 * this->m_rewards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareWeekendgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareWeekendgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareWeekendgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareWeekendgift::MergeFrom(const E_WelfareWeekendgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_rewards_.MergeFrom(from.m_rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lvmin()) {
      set_m_lvmin(from.m_lvmin());
    }
    if (from.has_m_lvmax()) {
      set_m_lvmax(from.m_lvmax());
    }
    if (from.has_m_date()) {
      set_m_date(from.m_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareWeekendgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareWeekendgift::CopyFrom(const E_WelfareWeekendgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareWeekendgift::IsInitialized() const {

  return true;
}

void E_WelfareWeekendgift::Swap(E_WelfareWeekendgift* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lvmin_, other->m_lvmin_);
    std::swap(m_lvmax_, other->m_lvmax_);
    std::swap(m_date_, other->m_date_);
    m_rewards_.Swap(&other->m_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareWeekendgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareWeekendgift_descriptor_;
  metadata.reflection = E_WelfareWeekendgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareWeekendgift::kEWelfareWeekendgiftListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareWeekendgift::Sheet_WelfareWeekendgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareWeekendgift::InitAsDefaultInstance() {
}

Sheet_WelfareWeekendgift::Sheet_WelfareWeekendgift(const Sheet_WelfareWeekendgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareWeekendgift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareWeekendgift::~Sheet_WelfareWeekendgift() {
  SharedDtor();
}

void Sheet_WelfareWeekendgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareWeekendgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareWeekendgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareWeekendgift_descriptor_;
}

const Sheet_WelfareWeekendgift& Sheet_WelfareWeekendgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareWeekendgift* Sheet_WelfareWeekendgift::default_instance_ = NULL;

Sheet_WelfareWeekendgift* Sheet_WelfareWeekendgift::New() const {
  return new Sheet_WelfareWeekendgift;
}

void Sheet_WelfareWeekendgift::Clear() {
  e_welfareweekendgift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareWeekendgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareWeekendgift E_WelfareWeekendgift_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareWeekendgift_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfareweekendgift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareWeekendgift_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareWeekendgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareWeekendgift E_WelfareWeekendgift_List = 1;
  for (int i = 0; i < this->e_welfareweekendgift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfareweekendgift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareWeekendgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareWeekendgift E_WelfareWeekendgift_List = 1;
  for (int i = 0; i < this->e_welfareweekendgift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfareweekendgift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareWeekendgift::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareWeekendgift E_WelfareWeekendgift_List = 1;
  total_size += 1 * this->e_welfareweekendgift_list_size();
  for (int i = 0; i < this->e_welfareweekendgift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfareweekendgift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareWeekendgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareWeekendgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareWeekendgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareWeekendgift::MergeFrom(const Sheet_WelfareWeekendgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfareweekendgift_list_.MergeFrom(from.e_welfareweekendgift_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareWeekendgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareWeekendgift::CopyFrom(const Sheet_WelfareWeekendgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareWeekendgift::IsInitialized() const {

  return true;
}

void Sheet_WelfareWeekendgift::Swap(Sheet_WelfareWeekendgift* other) {
  if (other != this) {
    e_welfareweekendgift_list_.Swap(&other->e_welfareweekendgift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareWeekendgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareWeekendgift_descriptor_;
  metadata.reflection = Sheet_WelfareWeekendgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareConstant::kMIdFieldNumber;
const int E_WelfareConstant::kMAddsigncostFieldNumber;
const int E_WelfareConstant::kMAddsignpriceFieldNumber;
const int E_WelfareConstant::kMNoticerewardFieldNumber;
const int E_WelfareConstant::kMWrongminFieldNumber;
const int E_WelfareConstant::kMWrongmaxFieldNumber;
const int E_WelfareConstant::kMFraudrewardFieldNumber;
const int E_WelfareConstant::kMFirstrchargeFieldNumber;
const int E_WelfareConstant::kMSecondrchargeFieldNumber;
const int E_WelfareConstant::kMGemmbFieldNumber;
const int E_WelfareConstant::kMStarmbFieldNumber;
const int E_WelfareConstant::kMKingmbFieldNumber;
const int E_WelfareConstant::kMKeyrebateFieldNumber;
#endif  // !_MSC_VER

E_WelfareConstant::E_WelfareConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareConstant::InitAsDefaultInstance() {
}

E_WelfareConstant::E_WelfareConstant(const E_WelfareConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareConstant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_addsigncost_ = 0;
  m_addsignprice_ = 0;
  m_noticereward_ = 0;
  m_wrongmin_ = 0;
  m_wrongmax_ = 0;
  m_fraudreward_ = 0;
  m_firstrcharge_ = 0;
  m_secondrcharge_ = 0;
  m_gemmb_ = 0;
  m_starmb_ = 0;
  m_kingmb_ = 0;
  m_keyrebate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareConstant::~E_WelfareConstant() {
  SharedDtor();
}

void E_WelfareConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareConstant_descriptor_;
}

const E_WelfareConstant& E_WelfareConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareConstant* E_WelfareConstant::default_instance_ = NULL;

E_WelfareConstant* E_WelfareConstant::New() const {
  return new E_WelfareConstant;
}

void E_WelfareConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_addsigncost_ = 0;
    m_addsignprice_ = 0;
    m_noticereward_ = 0;
    m_wrongmin_ = 0;
    m_wrongmax_ = 0;
    m_fraudreward_ = 0;
    m_firstrcharge_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_secondrcharge_ = 0;
    m_gemmb_ = 0;
    m_starmb_ = 0;
    m_kingmb_ = 0;
    m_keyrebate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_addsigncost;
        break;
      }

      // optional int32 m_addsigncost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addsigncost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_addsigncost_)));
          set_has_m_addsigncost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_addsignprice;
        break;
      }

      // optional int32 m_addsignprice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addsignprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_addsignprice_)));
          set_has_m_addsignprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_noticereward;
        break;
      }

      // optional int32 m_noticereward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_noticereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_noticereward_)));
          set_has_m_noticereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_wrongmin;
        break;
      }

      // optional int32 m_wrongmin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wrongmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wrongmin_)));
          set_has_m_wrongmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_wrongmax;
        break;
      }

      // optional int32 m_wrongmax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wrongmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wrongmax_)));
          set_has_m_wrongmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_fraudreward;
        break;
      }

      // optional int32 m_fraudreward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fraudreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fraudreward_)));
          set_has_m_fraudreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_firstrcharge;
        break;
      }

      // optional int32 m_firstrcharge = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_firstrcharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_firstrcharge_)));
          set_has_m_firstrcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_secondrcharge;
        break;
      }

      // optional int32 m_secondrcharge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_secondrcharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_secondrcharge_)));
          set_has_m_secondrcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_gemmb;
        break;
      }

      // optional int32 m_gemmb = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gemmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gemmb_)));
          set_has_m_gemmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_starmb;
        break;
      }

      // optional int32 m_starmb = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starmb_)));
          set_has_m_starmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_kingmb;
        break;
      }

      // optional int32 m_kingmb = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_kingmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_kingmb_)));
          set_has_m_kingmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_keyrebate;
        break;
      }

      // optional int32 m_keyrebate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_keyrebate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_keyrebate_)));
          set_has_m_keyrebate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_addsigncost = 2;
  if (has_m_addsigncost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_addsigncost(), output);
  }

  // optional int32 m_addsignprice = 3;
  if (has_m_addsignprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_addsignprice(), output);
  }

  // optional int32 m_noticereward = 4;
  if (has_m_noticereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_noticereward(), output);
  }

  // optional int32 m_wrongmin = 5;
  if (has_m_wrongmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_wrongmin(), output);
  }

  // optional int32 m_wrongmax = 6;
  if (has_m_wrongmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_wrongmax(), output);
  }

  // optional int32 m_fraudreward = 7;
  if (has_m_fraudreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_fraudreward(), output);
  }

  // optional int32 m_firstrcharge = 8;
  if (has_m_firstrcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_firstrcharge(), output);
  }

  // optional int32 m_secondrcharge = 9;
  if (has_m_secondrcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_secondrcharge(), output);
  }

  // optional int32 m_gemmb = 10;
  if (has_m_gemmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_gemmb(), output);
  }

  // optional int32 m_starmb = 11;
  if (has_m_starmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_starmb(), output);
  }

  // optional int32 m_kingmb = 12;
  if (has_m_kingmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_kingmb(), output);
  }

  // optional int32 m_keyrebate = 13;
  if (has_m_keyrebate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_keyrebate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_addsigncost = 2;
  if (has_m_addsigncost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_addsigncost(), target);
  }

  // optional int32 m_addsignprice = 3;
  if (has_m_addsignprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_addsignprice(), target);
  }

  // optional int32 m_noticereward = 4;
  if (has_m_noticereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_noticereward(), target);
  }

  // optional int32 m_wrongmin = 5;
  if (has_m_wrongmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_wrongmin(), target);
  }

  // optional int32 m_wrongmax = 6;
  if (has_m_wrongmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_wrongmax(), target);
  }

  // optional int32 m_fraudreward = 7;
  if (has_m_fraudreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_fraudreward(), target);
  }

  // optional int32 m_firstrcharge = 8;
  if (has_m_firstrcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_firstrcharge(), target);
  }

  // optional int32 m_secondrcharge = 9;
  if (has_m_secondrcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_secondrcharge(), target);
  }

  // optional int32 m_gemmb = 10;
  if (has_m_gemmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_gemmb(), target);
  }

  // optional int32 m_starmb = 11;
  if (has_m_starmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_starmb(), target);
  }

  // optional int32 m_kingmb = 12;
  if (has_m_kingmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_kingmb(), target);
  }

  // optional int32 m_keyrebate = 13;
  if (has_m_keyrebate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_keyrebate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_addsigncost = 2;
    if (has_m_addsigncost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_addsigncost());
    }

    // optional int32 m_addsignprice = 3;
    if (has_m_addsignprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_addsignprice());
    }

    // optional int32 m_noticereward = 4;
    if (has_m_noticereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_noticereward());
    }

    // optional int32 m_wrongmin = 5;
    if (has_m_wrongmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wrongmin());
    }

    // optional int32 m_wrongmax = 6;
    if (has_m_wrongmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wrongmax());
    }

    // optional int32 m_fraudreward = 7;
    if (has_m_fraudreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fraudreward());
    }

    // optional int32 m_firstrcharge = 8;
    if (has_m_firstrcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_firstrcharge());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_secondrcharge = 9;
    if (has_m_secondrcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_secondrcharge());
    }

    // optional int32 m_gemmb = 10;
    if (has_m_gemmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gemmb());
    }

    // optional int32 m_starmb = 11;
    if (has_m_starmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starmb());
    }

    // optional int32 m_kingmb = 12;
    if (has_m_kingmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_kingmb());
    }

    // optional int32 m_keyrebate = 13;
    if (has_m_keyrebate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_keyrebate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareConstant::MergeFrom(const E_WelfareConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_addsigncost()) {
      set_m_addsigncost(from.m_addsigncost());
    }
    if (from.has_m_addsignprice()) {
      set_m_addsignprice(from.m_addsignprice());
    }
    if (from.has_m_noticereward()) {
      set_m_noticereward(from.m_noticereward());
    }
    if (from.has_m_wrongmin()) {
      set_m_wrongmin(from.m_wrongmin());
    }
    if (from.has_m_wrongmax()) {
      set_m_wrongmax(from.m_wrongmax());
    }
    if (from.has_m_fraudreward()) {
      set_m_fraudreward(from.m_fraudreward());
    }
    if (from.has_m_firstrcharge()) {
      set_m_firstrcharge(from.m_firstrcharge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_secondrcharge()) {
      set_m_secondrcharge(from.m_secondrcharge());
    }
    if (from.has_m_gemmb()) {
      set_m_gemmb(from.m_gemmb());
    }
    if (from.has_m_starmb()) {
      set_m_starmb(from.m_starmb());
    }
    if (from.has_m_kingmb()) {
      set_m_kingmb(from.m_kingmb());
    }
    if (from.has_m_keyrebate()) {
      set_m_keyrebate(from.m_keyrebate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareConstant::CopyFrom(const E_WelfareConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareConstant::IsInitialized() const {

  return true;
}

void E_WelfareConstant::Swap(E_WelfareConstant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_addsigncost_, other->m_addsigncost_);
    std::swap(m_addsignprice_, other->m_addsignprice_);
    std::swap(m_noticereward_, other->m_noticereward_);
    std::swap(m_wrongmin_, other->m_wrongmin_);
    std::swap(m_wrongmax_, other->m_wrongmax_);
    std::swap(m_fraudreward_, other->m_fraudreward_);
    std::swap(m_firstrcharge_, other->m_firstrcharge_);
    std::swap(m_secondrcharge_, other->m_secondrcharge_);
    std::swap(m_gemmb_, other->m_gemmb_);
    std::swap(m_starmb_, other->m_starmb_);
    std::swap(m_kingmb_, other->m_kingmb_);
    std::swap(m_keyrebate_, other->m_keyrebate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareConstant_descriptor_;
  metadata.reflection = E_WelfareConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareConstant::kEWelfareConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareConstant::Sheet_WelfareConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareConstant::InitAsDefaultInstance() {
}

Sheet_WelfareConstant::Sheet_WelfareConstant(const Sheet_WelfareConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareConstant::~Sheet_WelfareConstant() {
  SharedDtor();
}

void Sheet_WelfareConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareConstant_descriptor_;
}

const Sheet_WelfareConstant& Sheet_WelfareConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareConstant* Sheet_WelfareConstant::default_instance_ = NULL;

Sheet_WelfareConstant* Sheet_WelfareConstant::New() const {
  return new Sheet_WelfareConstant;
}

void Sheet_WelfareConstant::Clear() {
  e_welfareconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareConstant E_WelfareConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfareconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareConstant E_WelfareConstant_List = 1;
  for (int i = 0; i < this->e_welfareconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfareconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareConstant E_WelfareConstant_List = 1;
  for (int i = 0; i < this->e_welfareconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfareconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareConstant E_WelfareConstant_List = 1;
  total_size += 1 * this->e_welfareconstant_list_size();
  for (int i = 0; i < this->e_welfareconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfareconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareConstant::MergeFrom(const Sheet_WelfareConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfareconstant_list_.MergeFrom(from.e_welfareconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareConstant::CopyFrom(const Sheet_WelfareConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareConstant::IsInitialized() const {

  return true;
}

void Sheet_WelfareConstant::Swap(Sheet_WelfareConstant* other) {
  if (other != this) {
    e_welfareconstant_list_.Swap(&other->e_welfareconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareConstant_descriptor_;
  metadata.reflection = Sheet_WelfareConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareQifu::kMConstantidFieldNumber;
const int E_WelfareQifu::kMConstantdataFieldNumber;
const int E_WelfareQifu::kMStringdataFieldNumber;
#endif  // !_MSC_VER

E_WelfareQifu::E_WelfareQifu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareQifu::InitAsDefaultInstance() {
}

E_WelfareQifu::E_WelfareQifu(const E_WelfareQifu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareQifu::SharedCtor() {
  _cached_size_ = 0;
  m_constantid_ = 0;
  m_constantdata_ = 0;
  m_stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareQifu::~E_WelfareQifu() {
  SharedDtor();
}

void E_WelfareQifu::SharedDtor() {
  if (m_stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete m_stringdata_;
  }
  if (this != default_instance_) {
  }
}

void E_WelfareQifu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareQifu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareQifu_descriptor_;
}

const E_WelfareQifu& E_WelfareQifu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareQifu* E_WelfareQifu::default_instance_ = NULL;

E_WelfareQifu* E_WelfareQifu::New() const {
  return new E_WelfareQifu;
}

void E_WelfareQifu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_constantid_ = 0;
    m_constantdata_ = 0;
    if (has_m_stringdata()) {
      if (m_stringdata_ != &::google::protobuf::internal::kEmptyString) {
        m_stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareQifu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_constantid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_constantid_)));
          set_has_m_constantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_constantdata;
        break;
      }

      // optional int32 m_constantdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_constantdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_constantdata_)));
          set_has_m_constantdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_stringdata;
        break;
      }

      // optional string m_stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_stringdata().data(), this->m_stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareQifu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_constantid = 1;
  if (has_m_constantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_constantid(), output);
  }

  // optional int32 m_constantdata = 2;
  if (has_m_constantdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_constantdata(), output);
  }

  // optional string m_stringdata = 3;
  if (has_m_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_stringdata().data(), this->m_stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareQifu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_constantid = 1;
  if (has_m_constantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_constantid(), target);
  }

  // optional int32 m_constantdata = 2;
  if (has_m_constantdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_constantdata(), target);
  }

  // optional string m_stringdata = 3;
  if (has_m_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_stringdata().data(), this->m_stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareQifu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_constantid = 1;
    if (has_m_constantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_constantid());
    }

    // optional int32 m_constantdata = 2;
    if (has_m_constantdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_constantdata());
    }

    // optional string m_stringdata = 3;
    if (has_m_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareQifu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareQifu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareQifu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareQifu::MergeFrom(const E_WelfareQifu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_constantid()) {
      set_m_constantid(from.m_constantid());
    }
    if (from.has_m_constantdata()) {
      set_m_constantdata(from.m_constantdata());
    }
    if (from.has_m_stringdata()) {
      set_m_stringdata(from.m_stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareQifu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareQifu::CopyFrom(const E_WelfareQifu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareQifu::IsInitialized() const {

  return true;
}

void E_WelfareQifu::Swap(E_WelfareQifu* other) {
  if (other != this) {
    std::swap(m_constantid_, other->m_constantid_);
    std::swap(m_constantdata_, other->m_constantdata_);
    std::swap(m_stringdata_, other->m_stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareQifu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareQifu_descriptor_;
  metadata.reflection = E_WelfareQifu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareQifu::kEWelfareQifuListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareQifu::Sheet_WelfareQifu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareQifu::InitAsDefaultInstance() {
}

Sheet_WelfareQifu::Sheet_WelfareQifu(const Sheet_WelfareQifu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareQifu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareQifu::~Sheet_WelfareQifu() {
  SharedDtor();
}

void Sheet_WelfareQifu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareQifu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareQifu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareQifu_descriptor_;
}

const Sheet_WelfareQifu& Sheet_WelfareQifu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareQifu* Sheet_WelfareQifu::default_instance_ = NULL;

Sheet_WelfareQifu* Sheet_WelfareQifu::New() const {
  return new Sheet_WelfareQifu;
}

void Sheet_WelfareQifu::Clear() {
  e_welfareqifu_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareQifu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareQifu E_WelfareQifu_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareQifu_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfareqifu_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareQifu_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareQifu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareQifu E_WelfareQifu_List = 1;
  for (int i = 0; i < this->e_welfareqifu_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfareqifu_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareQifu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareQifu E_WelfareQifu_List = 1;
  for (int i = 0; i < this->e_welfareqifu_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfareqifu_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareQifu::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareQifu E_WelfareQifu_List = 1;
  total_size += 1 * this->e_welfareqifu_list_size();
  for (int i = 0; i < this->e_welfareqifu_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfareqifu_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareQifu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareQifu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareQifu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareQifu::MergeFrom(const Sheet_WelfareQifu& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfareqifu_list_.MergeFrom(from.e_welfareqifu_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareQifu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareQifu::CopyFrom(const Sheet_WelfareQifu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareQifu::IsInitialized() const {

  return true;
}

void Sheet_WelfareQifu::Swap(Sheet_WelfareQifu* other) {
  if (other != this) {
    e_welfareqifu_list_.Swap(&other->e_welfareqifu_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareQifu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareQifu_descriptor_;
  metadata.reflection = Sheet_WelfareQifu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareWish::kMLevelFieldNumber;
const int E_WelfareWish::kMExpFieldNumber;
#endif  // !_MSC_VER

E_WelfareWish::E_WelfareWish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareWish::InitAsDefaultInstance() {
}

E_WelfareWish::E_WelfareWish(const E_WelfareWish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareWish::SharedCtor() {
  _cached_size_ = 0;
  m_level_ = 0;
  m_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareWish::~E_WelfareWish() {
  SharedDtor();
}

void E_WelfareWish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareWish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareWish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareWish_descriptor_;
}

const E_WelfareWish& E_WelfareWish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareWish* E_WelfareWish::default_instance_ = NULL;

E_WelfareWish* E_WelfareWish::New() const {
  return new E_WelfareWish;
}

void E_WelfareWish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_level_ = 0;
    m_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareWish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int64 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareWish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_level = 1;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_level(), output);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareWish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_level = 1;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_level(), target);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareWish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_level = 1;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int64 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareWish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareWish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareWish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareWish::MergeFrom(const E_WelfareWish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareWish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareWish::CopyFrom(const E_WelfareWish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareWish::IsInitialized() const {

  return true;
}

void E_WelfareWish::Swap(E_WelfareWish* other) {
  if (other != this) {
    std::swap(m_level_, other->m_level_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareWish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareWish_descriptor_;
  metadata.reflection = E_WelfareWish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareWish::kEWelfareWishListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareWish::Sheet_WelfareWish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareWish::InitAsDefaultInstance() {
}

Sheet_WelfareWish::Sheet_WelfareWish(const Sheet_WelfareWish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareWish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareWish::~Sheet_WelfareWish() {
  SharedDtor();
}

void Sheet_WelfareWish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareWish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareWish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareWish_descriptor_;
}

const Sheet_WelfareWish& Sheet_WelfareWish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareWish* Sheet_WelfareWish::default_instance_ = NULL;

Sheet_WelfareWish* Sheet_WelfareWish::New() const {
  return new Sheet_WelfareWish;
}

void Sheet_WelfareWish::Clear() {
  e_welfarewish_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareWish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareWish E_WelfareWish_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareWish_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarewish_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareWish_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareWish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareWish E_WelfareWish_List = 1;
  for (int i = 0; i < this->e_welfarewish_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarewish_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareWish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareWish E_WelfareWish_List = 1;
  for (int i = 0; i < this->e_welfarewish_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarewish_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareWish::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareWish E_WelfareWish_List = 1;
  total_size += 1 * this->e_welfarewish_list_size();
  for (int i = 0; i < this->e_welfarewish_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarewish_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareWish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareWish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareWish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareWish::MergeFrom(const Sheet_WelfareWish& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarewish_list_.MergeFrom(from.e_welfarewish_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareWish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareWish::CopyFrom(const Sheet_WelfareWish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareWish::IsInitialized() const {

  return true;
}

void Sheet_WelfareWish::Swap(Sheet_WelfareWish* other) {
  if (other != this) {
    e_welfarewish_list_.Swap(&other->e_welfarewish_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareWish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareWish_descriptor_;
  metadata.reflection = Sheet_WelfareWish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareLogon::kMDaysFieldNumber;
const int E_WelfareLogon::kMTypeFieldNumber;
const int E_WelfareLogon::kMIconFieldNumber;
const int E_WelfareLogon::kMShowitemFieldNumber;
const int E_WelfareLogon::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_WelfareLogon::E_WelfareLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareLogon::InitAsDefaultInstance() {
}

E_WelfareLogon::E_WelfareLogon(const E_WelfareLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareLogon::SharedCtor() {
  _cached_size_ = 0;
  m_days_ = 0;
  m_type_ = 0;
  m_icon_ = 0;
  m_showitem_ = 0;
  m_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareLogon::~E_WelfareLogon() {
  SharedDtor();
}

void E_WelfareLogon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareLogon_descriptor_;
}

const E_WelfareLogon& E_WelfareLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareLogon* E_WelfareLogon::default_instance_ = NULL;

E_WelfareLogon* E_WelfareLogon::New() const {
  return new E_WelfareLogon;
}

void E_WelfareLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_days_ = 0;
    m_type_ = 0;
    m_icon_ = 0;
    m_showitem_ = 0;
    m_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_days = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_days_)));
          set_has_m_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_icon;
        break;
      }

      // optional int32 m_icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_icon_)));
          set_has_m_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_showitem;
        break;
      }

      // optional int32 m_showitem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_showitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_showitem_)));
          set_has_m_showitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_days = 1;
  if (has_m_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_days(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_icon = 3;
  if (has_m_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_icon(), output);
  }

  // optional int32 m_showitem = 4;
  if (has_m_showitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_showitem(), output);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_days = 1;
  if (has_m_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_days(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_icon = 3;
  if (has_m_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_icon(), target);
  }

  // optional int32 m_showitem = 4;
  if (has_m_showitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_showitem(), target);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareLogon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_days = 1;
    if (has_m_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_days());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_icon = 3;
    if (has_m_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_icon());
    }

    // optional int32 m_showitem = 4;
    if (has_m_showitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_showitem());
    }

    // optional int32 m_reward = 5;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareLogon::MergeFrom(const E_WelfareLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_days()) {
      set_m_days(from.m_days());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_icon()) {
      set_m_icon(from.m_icon());
    }
    if (from.has_m_showitem()) {
      set_m_showitem(from.m_showitem());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareLogon::CopyFrom(const E_WelfareLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareLogon::IsInitialized() const {

  return true;
}

void E_WelfareLogon::Swap(E_WelfareLogon* other) {
  if (other != this) {
    std::swap(m_days_, other->m_days_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_icon_, other->m_icon_);
    std::swap(m_showitem_, other->m_showitem_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareLogon_descriptor_;
  metadata.reflection = E_WelfareLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareLogon::kEWelfareLogonListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareLogon::Sheet_WelfareLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareLogon::InitAsDefaultInstance() {
}

Sheet_WelfareLogon::Sheet_WelfareLogon(const Sheet_WelfareLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareLogon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareLogon::~Sheet_WelfareLogon() {
  SharedDtor();
}

void Sheet_WelfareLogon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareLogon_descriptor_;
}

const Sheet_WelfareLogon& Sheet_WelfareLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareLogon* Sheet_WelfareLogon::default_instance_ = NULL;

Sheet_WelfareLogon* Sheet_WelfareLogon::New() const {
  return new Sheet_WelfareLogon;
}

void Sheet_WelfareLogon::Clear() {
  e_welfarelogon_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareLogon E_WelfareLogon_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareLogon_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarelogon_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareLogon_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareLogon E_WelfareLogon_List = 1;
  for (int i = 0; i < this->e_welfarelogon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarelogon_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareLogon E_WelfareLogon_List = 1;
  for (int i = 0; i < this->e_welfarelogon_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarelogon_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareLogon::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareLogon E_WelfareLogon_List = 1;
  total_size += 1 * this->e_welfarelogon_list_size();
  for (int i = 0; i < this->e_welfarelogon_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarelogon_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareLogon::MergeFrom(const Sheet_WelfareLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarelogon_list_.MergeFrom(from.e_welfarelogon_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareLogon::CopyFrom(const Sheet_WelfareLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareLogon::IsInitialized() const {

  return true;
}

void Sheet_WelfareLogon::Swap(Sheet_WelfareLogon* other) {
  if (other != this) {
    e_welfarelogon_list_.Swap(&other->e_welfarelogon_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareLogon_descriptor_;
  metadata.reflection = Sheet_WelfareLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareFirstcharge::kMConstantidFieldNumber;
const int E_WelfareFirstcharge::kMOpenlvFieldNumber;
const int E_WelfareFirstcharge::kMTypeFieldNumber;
const int E_WelfareFirstcharge::kMOpendaysFieldNumber;
const int E_WelfareFirstcharge::kMRewardFieldNumber;
const int E_WelfareFirstcharge::kMModelFieldNumber;
const int E_WelfareFirstcharge::kMRewardshowFieldNumber;
const int E_WelfareFirstcharge::kMRewarddesFieldNumber;
#endif  // !_MSC_VER

E_WelfareFirstcharge::E_WelfareFirstcharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareFirstcharge::InitAsDefaultInstance() {
}

E_WelfareFirstcharge::E_WelfareFirstcharge(const E_WelfareFirstcharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareFirstcharge::SharedCtor() {
  _cached_size_ = 0;
  m_constantid_ = 0;
  m_openlv_ = 0;
  m_type_ = 0;
  m_opendays_ = 0;
  m_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareFirstcharge::~E_WelfareFirstcharge() {
  SharedDtor();
}

void E_WelfareFirstcharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareFirstcharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareFirstcharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareFirstcharge_descriptor_;
}

const E_WelfareFirstcharge& E_WelfareFirstcharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareFirstcharge* E_WelfareFirstcharge::default_instance_ = NULL;

E_WelfareFirstcharge* E_WelfareFirstcharge::New() const {
  return new E_WelfareFirstcharge;
}

void E_WelfareFirstcharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_constantid_ = 0;
    m_openlv_ = 0;
    m_type_ = 0;
    m_opendays_ = 0;
    m_reward_ = 0;
  }
  m_model_.Clear();
  m_rewardshow_.Clear();
  m_rewarddes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareFirstcharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_constantid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_constantid_)));
          set_has_m_constantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_openlv;
        break;
      }

      // optional int32 m_openlv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openlv_)));
          set_has_m_openlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_opendays;
        break;
      }

      // optional int32 m_opendays = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_opendays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opendays_)));
          set_has_m_opendays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_model;
        break;
      }

      // repeated string m_model = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_model(this->m_model_size() - 1).data(),
            this->m_model(this->m_model_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_model;
        if (input->ExpectTag(56)) goto parse_m_rewardshow;
        break;
      }

      // repeated int32 m_rewardshow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_rewardshow())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_rewardshow())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_rewardshow;
        if (input->ExpectTag(66)) goto parse_m_rewarddes;
        break;
      }

      // repeated string m_rewarddes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rewarddes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_rewarddes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rewarddes(this->m_rewarddes_size() - 1).data(),
            this->m_rewarddes(this->m_rewarddes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_rewarddes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareFirstcharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_constantid = 1;
  if (has_m_constantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_constantid(), output);
  }

  // optional int32 m_openlv = 2;
  if (has_m_openlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_openlv(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_opendays = 4;
  if (has_m_opendays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_opendays(), output);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_reward(), output);
  }

  // repeated string m_model = 6;
  for (int i = 0; i < this->m_model_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_model(i).data(), this->m_model(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_model(i), output);
  }

  // repeated int32 m_rewardshow = 7;
  for (int i = 0; i < this->m_rewardshow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_rewardshow(i), output);
  }

  // repeated string m_rewarddes = 8;
  for (int i = 0; i < this->m_rewarddes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_rewarddes(i).data(), this->m_rewarddes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_rewarddes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareFirstcharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_constantid = 1;
  if (has_m_constantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_constantid(), target);
  }

  // optional int32 m_openlv = 2;
  if (has_m_openlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_openlv(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_opendays = 4;
  if (has_m_opendays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_opendays(), target);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_reward(), target);
  }

  // repeated string m_model = 6;
  for (int i = 0; i < this->m_model_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_model(i).data(), this->m_model(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->m_model(i), target);
  }

  // repeated int32 m_rewardshow = 7;
  for (int i = 0; i < this->m_rewardshow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_rewardshow(i), target);
  }

  // repeated string m_rewarddes = 8;
  for (int i = 0; i < this->m_rewarddes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rewarddes(i).data(), this->m_rewarddes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->m_rewarddes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareFirstcharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_constantid = 1;
    if (has_m_constantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_constantid());
    }

    // optional int32 m_openlv = 2;
    if (has_m_openlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openlv());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_opendays = 4;
    if (has_m_opendays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opendays());
    }

    // optional int32 m_reward = 5;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

  }
  // repeated string m_model = 6;
  total_size += 1 * this->m_model_size();
  for (int i = 0; i < this->m_model_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_model(i));
  }

  // repeated int32 m_rewardshow = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_rewardshow_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_rewardshow(i));
    }
    total_size += 1 * this->m_rewardshow_size() + data_size;
  }

  // repeated string m_rewarddes = 8;
  total_size += 1 * this->m_rewarddes_size();
  for (int i = 0; i < this->m_rewarddes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_rewarddes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareFirstcharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareFirstcharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareFirstcharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareFirstcharge::MergeFrom(const E_WelfareFirstcharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_model_.MergeFrom(from.m_model_);
  m_rewardshow_.MergeFrom(from.m_rewardshow_);
  m_rewarddes_.MergeFrom(from.m_rewarddes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_constantid()) {
      set_m_constantid(from.m_constantid());
    }
    if (from.has_m_openlv()) {
      set_m_openlv(from.m_openlv());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_opendays()) {
      set_m_opendays(from.m_opendays());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareFirstcharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareFirstcharge::CopyFrom(const E_WelfareFirstcharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareFirstcharge::IsInitialized() const {

  return true;
}

void E_WelfareFirstcharge::Swap(E_WelfareFirstcharge* other) {
  if (other != this) {
    std::swap(m_constantid_, other->m_constantid_);
    std::swap(m_openlv_, other->m_openlv_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_opendays_, other->m_opendays_);
    std::swap(m_reward_, other->m_reward_);
    m_model_.Swap(&other->m_model_);
    m_rewardshow_.Swap(&other->m_rewardshow_);
    m_rewarddes_.Swap(&other->m_rewarddes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareFirstcharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareFirstcharge_descriptor_;
  metadata.reflection = E_WelfareFirstcharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareFirstcharge::kEWelfareFirstchargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareFirstcharge::Sheet_WelfareFirstcharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareFirstcharge::InitAsDefaultInstance() {
}

Sheet_WelfareFirstcharge::Sheet_WelfareFirstcharge(const Sheet_WelfareFirstcharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareFirstcharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareFirstcharge::~Sheet_WelfareFirstcharge() {
  SharedDtor();
}

void Sheet_WelfareFirstcharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareFirstcharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareFirstcharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareFirstcharge_descriptor_;
}

const Sheet_WelfareFirstcharge& Sheet_WelfareFirstcharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareFirstcharge* Sheet_WelfareFirstcharge::default_instance_ = NULL;

Sheet_WelfareFirstcharge* Sheet_WelfareFirstcharge::New() const {
  return new Sheet_WelfareFirstcharge;
}

void Sheet_WelfareFirstcharge::Clear() {
  e_welfarefirstcharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareFirstcharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareFirstcharge E_WelfareFirstcharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareFirstcharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarefirstcharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareFirstcharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareFirstcharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareFirstcharge E_WelfareFirstcharge_List = 1;
  for (int i = 0; i < this->e_welfarefirstcharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarefirstcharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareFirstcharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareFirstcharge E_WelfareFirstcharge_List = 1;
  for (int i = 0; i < this->e_welfarefirstcharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarefirstcharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareFirstcharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareFirstcharge E_WelfareFirstcharge_List = 1;
  total_size += 1 * this->e_welfarefirstcharge_list_size();
  for (int i = 0; i < this->e_welfarefirstcharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarefirstcharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareFirstcharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareFirstcharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareFirstcharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareFirstcharge::MergeFrom(const Sheet_WelfareFirstcharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarefirstcharge_list_.MergeFrom(from.e_welfarefirstcharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareFirstcharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareFirstcharge::CopyFrom(const Sheet_WelfareFirstcharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareFirstcharge::IsInitialized() const {

  return true;
}

void Sheet_WelfareFirstcharge::Swap(Sheet_WelfareFirstcharge* other) {
  if (other != this) {
    e_welfarefirstcharge_list_.Swap(&other->e_welfarefirstcharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareFirstcharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareFirstcharge_descriptor_;
  metadata.reflection = Sheet_WelfareFirstcharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareSctype::kMIdFieldNumber;
const int E_WelfareSctype::kMFunctionidFieldNumber;
const int E_WelfareSctype::kMTitleFieldNumber;
const int E_WelfareSctype::kMBasemapFieldNumber;
const int E_WelfareSctype::kMRchargeFieldNumber;
#endif  // !_MSC_VER

E_WelfareSctype::E_WelfareSctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareSctype::InitAsDefaultInstance() {
}

E_WelfareSctype::E_WelfareSctype(const E_WelfareSctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareSctype::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_functionid_ = 0;
  m_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_basemap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rcharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareSctype::~E_WelfareSctype() {
  SharedDtor();
}

void E_WelfareSctype::SharedDtor() {
  if (m_title_ != &::google::protobuf::internal::kEmptyString) {
    delete m_title_;
  }
  if (m_basemap_ != &::google::protobuf::internal::kEmptyString) {
    delete m_basemap_;
  }
  if (this != default_instance_) {
  }
}

void E_WelfareSctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareSctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareSctype_descriptor_;
}

const E_WelfareSctype& E_WelfareSctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareSctype* E_WelfareSctype::default_instance_ = NULL;

E_WelfareSctype* E_WelfareSctype::New() const {
  return new E_WelfareSctype;
}

void E_WelfareSctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_functionid_ = 0;
    if (has_m_title()) {
      if (m_title_ != &::google::protobuf::internal::kEmptyString) {
        m_title_->clear();
      }
    }
    if (has_m_basemap()) {
      if (m_basemap_ != &::google::protobuf::internal::kEmptyString) {
        m_basemap_->clear();
      }
    }
    m_rcharge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareSctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_functionid;
        break;
      }

      // optional int32 m_functionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionid_)));
          set_has_m_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_title;
        break;
      }

      // optional string m_title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_title().data(), this->m_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_basemap;
        break;
      }

      // optional string m_basemap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_basemap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_basemap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_basemap().data(), this->m_basemap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rcharge;
        break;
      }

      // optional int32 m_rcharge = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rcharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rcharge_)));
          set_has_m_rcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareSctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_functionid = 2;
  if (has_m_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_functionid(), output);
  }

  // optional string m_title = 3;
  if (has_m_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_title().data(), this->m_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_title(), output);
  }

  // optional string m_basemap = 4;
  if (has_m_basemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_basemap().data(), this->m_basemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_basemap(), output);
  }

  // optional int32 m_rcharge = 5;
  if (has_m_rcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rcharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareSctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_functionid = 2;
  if (has_m_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_functionid(), target);
  }

  // optional string m_title = 3;
  if (has_m_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_title().data(), this->m_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_title(), target);
  }

  // optional string m_basemap = 4;
  if (has_m_basemap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_basemap().data(), this->m_basemap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_basemap(), target);
  }

  // optional int32 m_rcharge = 5;
  if (has_m_rcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rcharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareSctype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_functionid = 2;
    if (has_m_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionid());
    }

    // optional string m_title = 3;
    if (has_m_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_title());
    }

    // optional string m_basemap = 4;
    if (has_m_basemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_basemap());
    }

    // optional int32 m_rcharge = 5;
    if (has_m_rcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rcharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareSctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareSctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareSctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareSctype::MergeFrom(const E_WelfareSctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_functionid()) {
      set_m_functionid(from.m_functionid());
    }
    if (from.has_m_title()) {
      set_m_title(from.m_title());
    }
    if (from.has_m_basemap()) {
      set_m_basemap(from.m_basemap());
    }
    if (from.has_m_rcharge()) {
      set_m_rcharge(from.m_rcharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareSctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareSctype::CopyFrom(const E_WelfareSctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareSctype::IsInitialized() const {

  return true;
}

void E_WelfareSctype::Swap(E_WelfareSctype* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_functionid_, other->m_functionid_);
    std::swap(m_title_, other->m_title_);
    std::swap(m_basemap_, other->m_basemap_);
    std::swap(m_rcharge_, other->m_rcharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareSctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareSctype_descriptor_;
  metadata.reflection = E_WelfareSctype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareSctype::kEWelfareSctypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareSctype::Sheet_WelfareSctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareSctype::InitAsDefaultInstance() {
}

Sheet_WelfareSctype::Sheet_WelfareSctype(const Sheet_WelfareSctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareSctype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareSctype::~Sheet_WelfareSctype() {
  SharedDtor();
}

void Sheet_WelfareSctype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareSctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareSctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareSctype_descriptor_;
}

const Sheet_WelfareSctype& Sheet_WelfareSctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareSctype* Sheet_WelfareSctype::default_instance_ = NULL;

Sheet_WelfareSctype* Sheet_WelfareSctype::New() const {
  return new Sheet_WelfareSctype;
}

void Sheet_WelfareSctype::Clear() {
  e_welfaresctype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareSctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareSctype E_WelfareSctype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareSctype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfaresctype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareSctype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareSctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareSctype E_WelfareSctype_List = 1;
  for (int i = 0; i < this->e_welfaresctype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfaresctype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareSctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareSctype E_WelfareSctype_List = 1;
  for (int i = 0; i < this->e_welfaresctype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfaresctype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareSctype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareSctype E_WelfareSctype_List = 1;
  total_size += 1 * this->e_welfaresctype_list_size();
  for (int i = 0; i < this->e_welfaresctype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfaresctype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareSctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareSctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareSctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareSctype::MergeFrom(const Sheet_WelfareSctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfaresctype_list_.MergeFrom(from.e_welfaresctype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareSctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareSctype::CopyFrom(const Sheet_WelfareSctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareSctype::IsInitialized() const {

  return true;
}

void Sheet_WelfareSctype::Swap(Sheet_WelfareSctype* other) {
  if (other != this) {
    e_welfaresctype_list_.Swap(&other->e_welfaresctype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareSctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareSctype_descriptor_;
  metadata.reflection = Sheet_WelfareSctype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareMibao::kMIdFieldNumber;
const int E_WelfareMibao::kMOpenlvFieldNumber;
const int E_WelfareMibao::kMTypeFieldNumber;
const int E_WelfareMibao::kMRankFieldNumber;
const int E_WelfareMibao::kMOpendaysFieldNumber;
const int E_WelfareMibao::kMRewardFieldNumber;
const int E_WelfareMibao::kMDesFieldNumber;
#endif  // !_MSC_VER

E_WelfareMibao::E_WelfareMibao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareMibao::InitAsDefaultInstance() {
}

E_WelfareMibao::E_WelfareMibao(const E_WelfareMibao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareMibao::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_openlv_ = 0;
  m_type_ = 0;
  m_rank_ = 0;
  m_opendays_ = 0;
  m_reward_ = 0;
  m_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareMibao::~E_WelfareMibao() {
  SharedDtor();
}

void E_WelfareMibao::SharedDtor() {
  if (m_des_ != &::google::protobuf::internal::kEmptyString) {
    delete m_des_;
  }
  if (this != default_instance_) {
  }
}

void E_WelfareMibao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareMibao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareMibao_descriptor_;
}

const E_WelfareMibao& E_WelfareMibao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareMibao* E_WelfareMibao::default_instance_ = NULL;

E_WelfareMibao* E_WelfareMibao::New() const {
  return new E_WelfareMibao;
}

void E_WelfareMibao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_openlv_ = 0;
    m_type_ = 0;
    m_rank_ = 0;
    m_opendays_ = 0;
    m_reward_ = 0;
    if (has_m_des()) {
      if (m_des_ != &::google::protobuf::internal::kEmptyString) {
        m_des_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareMibao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_openlv;
        break;
      }

      // optional int32 m_openlv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openlv_)));
          set_has_m_openlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rank;
        break;
      }

      // optional int32 m_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_opendays;
        break;
      }

      // optional int32 m_opendays = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_opendays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opendays_)));
          set_has_m_opendays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_des;
        break;
      }

      // optional string m_des = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_des().data(), this->m_des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareMibao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_openlv = 2;
  if (has_m_openlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_openlv(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_rank = 4;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rank(), output);
  }

  // optional int32 m_opendays = 5;
  if (has_m_opendays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_opendays(), output);
  }

  // optional int32 m_reward = 6;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_reward(), output);
  }

  // optional string m_des = 7;
  if (has_m_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_des().data(), this->m_des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_des(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareMibao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_openlv = 2;
  if (has_m_openlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_openlv(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_rank = 4;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rank(), target);
  }

  // optional int32 m_opendays = 5;
  if (has_m_opendays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_opendays(), target);
  }

  // optional int32 m_reward = 6;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_reward(), target);
  }

  // optional string m_des = 7;
  if (has_m_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_des().data(), this->m_des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_des(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareMibao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_openlv = 2;
    if (has_m_openlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openlv());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_rank = 4;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

    // optional int32 m_opendays = 5;
    if (has_m_opendays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opendays());
    }

    // optional int32 m_reward = 6;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional string m_des = 7;
    if (has_m_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_des());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareMibao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareMibao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareMibao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareMibao::MergeFrom(const E_WelfareMibao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_openlv()) {
      set_m_openlv(from.m_openlv());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
    if (from.has_m_opendays()) {
      set_m_opendays(from.m_opendays());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_des()) {
      set_m_des(from.m_des());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareMibao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareMibao::CopyFrom(const E_WelfareMibao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareMibao::IsInitialized() const {

  return true;
}

void E_WelfareMibao::Swap(E_WelfareMibao* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_openlv_, other->m_openlv_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_rank_, other->m_rank_);
    std::swap(m_opendays_, other->m_opendays_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_des_, other->m_des_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareMibao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareMibao_descriptor_;
  metadata.reflection = E_WelfareMibao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareMibao::kEWelfareMibaoListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareMibao::Sheet_WelfareMibao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareMibao::InitAsDefaultInstance() {
}

Sheet_WelfareMibao::Sheet_WelfareMibao(const Sheet_WelfareMibao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareMibao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareMibao::~Sheet_WelfareMibao() {
  SharedDtor();
}

void Sheet_WelfareMibao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareMibao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareMibao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareMibao_descriptor_;
}

const Sheet_WelfareMibao& Sheet_WelfareMibao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareMibao* Sheet_WelfareMibao::default_instance_ = NULL;

Sheet_WelfareMibao* Sheet_WelfareMibao::New() const {
  return new Sheet_WelfareMibao;
}

void Sheet_WelfareMibao::Clear() {
  e_welfaremibao_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareMibao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareMibao E_WelfareMibao_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareMibao_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfaremibao_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareMibao_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareMibao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareMibao E_WelfareMibao_List = 1;
  for (int i = 0; i < this->e_welfaremibao_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfaremibao_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareMibao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareMibao E_WelfareMibao_List = 1;
  for (int i = 0; i < this->e_welfaremibao_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfaremibao_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareMibao::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareMibao E_WelfareMibao_List = 1;
  total_size += 1 * this->e_welfaremibao_list_size();
  for (int i = 0; i < this->e_welfaremibao_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfaremibao_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareMibao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareMibao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareMibao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareMibao::MergeFrom(const Sheet_WelfareMibao& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfaremibao_list_.MergeFrom(from.e_welfaremibao_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareMibao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareMibao::CopyFrom(const Sheet_WelfareMibao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareMibao::IsInitialized() const {

  return true;
}

void Sheet_WelfareMibao::Swap(Sheet_WelfareMibao* other) {
  if (other != this) {
    e_welfaremibao_list_.Swap(&other->e_welfaremibao_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareMibao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareMibao_descriptor_;
  metadata.reflection = Sheet_WelfareMibao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareKfleichong::kMIdFieldNumber;
const int E_WelfareKfleichong::kMMoneyFieldNumber;
const int E_WelfareKfleichong::kMLimitFieldNumber;
const int E_WelfareKfleichong::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_WelfareKfleichong::E_WelfareKfleichong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareKfleichong::InitAsDefaultInstance() {
}

E_WelfareKfleichong::E_WelfareKfleichong(const E_WelfareKfleichong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareKfleichong::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_money_ = 0;
  m_limit_ = 0;
  m_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareKfleichong::~E_WelfareKfleichong() {
  SharedDtor();
}

void E_WelfareKfleichong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareKfleichong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareKfleichong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareKfleichong_descriptor_;
}

const E_WelfareKfleichong& E_WelfareKfleichong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareKfleichong* E_WelfareKfleichong::default_instance_ = NULL;

E_WelfareKfleichong* E_WelfareKfleichong::New() const {
  return new E_WelfareKfleichong;
}

void E_WelfareKfleichong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_money_ = 0;
    m_limit_ = 0;
    m_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareKfleichong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_money;
        break;
      }

      // optional int32 m_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_limit;
        break;
      }

      // optional int32 m_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_limit_)));
          set_has_m_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareKfleichong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_money = 2;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_money(), output);
  }

  // optional int32 m_limit = 3;
  if (has_m_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_limit(), output);
  }

  // optional int32 m_reward = 4;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareKfleichong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_money = 2;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_money(), target);
  }

  // optional int32 m_limit = 3;
  if (has_m_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_limit(), target);
  }

  // optional int32 m_reward = 4;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareKfleichong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_money = 2;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_money());
    }

    // optional int32 m_limit = 3;
    if (has_m_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_limit());
    }

    // optional int32 m_reward = 4;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareKfleichong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareKfleichong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareKfleichong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareKfleichong::MergeFrom(const E_WelfareKfleichong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
    if (from.has_m_limit()) {
      set_m_limit(from.m_limit());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareKfleichong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareKfleichong::CopyFrom(const E_WelfareKfleichong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareKfleichong::IsInitialized() const {

  return true;
}

void E_WelfareKfleichong::Swap(E_WelfareKfleichong* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_limit_, other->m_limit_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareKfleichong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareKfleichong_descriptor_;
  metadata.reflection = E_WelfareKfleichong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareKfleichong::kEWelfareKfleichongListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareKfleichong::Sheet_WelfareKfleichong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareKfleichong::InitAsDefaultInstance() {
}

Sheet_WelfareKfleichong::Sheet_WelfareKfleichong(const Sheet_WelfareKfleichong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareKfleichong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareKfleichong::~Sheet_WelfareKfleichong() {
  SharedDtor();
}

void Sheet_WelfareKfleichong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareKfleichong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareKfleichong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareKfleichong_descriptor_;
}

const Sheet_WelfareKfleichong& Sheet_WelfareKfleichong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareKfleichong* Sheet_WelfareKfleichong::default_instance_ = NULL;

Sheet_WelfareKfleichong* Sheet_WelfareKfleichong::New() const {
  return new Sheet_WelfareKfleichong;
}

void Sheet_WelfareKfleichong::Clear() {
  e_welfarekfleichong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareKfleichong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareKfleichong E_WelfareKfleichong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareKfleichong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarekfleichong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareKfleichong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareKfleichong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareKfleichong E_WelfareKfleichong_List = 1;
  for (int i = 0; i < this->e_welfarekfleichong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarekfleichong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareKfleichong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareKfleichong E_WelfareKfleichong_List = 1;
  for (int i = 0; i < this->e_welfarekfleichong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarekfleichong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareKfleichong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareKfleichong E_WelfareKfleichong_List = 1;
  total_size += 1 * this->e_welfarekfleichong_list_size();
  for (int i = 0; i < this->e_welfarekfleichong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarekfleichong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareKfleichong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareKfleichong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareKfleichong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareKfleichong::MergeFrom(const Sheet_WelfareKfleichong& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarekfleichong_list_.MergeFrom(from.e_welfarekfleichong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareKfleichong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareKfleichong::CopyFrom(const Sheet_WelfareKfleichong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareKfleichong::IsInitialized() const {

  return true;
}

void Sheet_WelfareKfleichong::Swap(Sheet_WelfareKfleichong* other) {
  if (other != this) {
    e_welfarekfleichong_list_.Swap(&other->e_welfarekfleichong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareKfleichong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareKfleichong_descriptor_;
  metadata.reflection = Sheet_WelfareKfleichong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareDailygift::kMIdFieldNumber;
const int E_WelfareDailygift::kMTypeFieldNumber;
const int E_WelfareDailygift::kMRechargeidFieldNumber;
const int E_WelfareDailygift::kMOneclickbuyFieldNumber;
const int E_WelfareDailygift::kMRewardFieldNumber;
const int E_WelfareDailygift::kMQualityFieldNumber;
#endif  // !_MSC_VER

E_WelfareDailygift::E_WelfareDailygift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareDailygift::InitAsDefaultInstance() {
}

E_WelfareDailygift::E_WelfareDailygift(const E_WelfareDailygift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareDailygift::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_rechargeid_ = 0;
  m_oneclickbuy_ = 0;
  m_reward_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareDailygift::~E_WelfareDailygift() {
  SharedDtor();
}

void E_WelfareDailygift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareDailygift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareDailygift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareDailygift_descriptor_;
}

const E_WelfareDailygift& E_WelfareDailygift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareDailygift* E_WelfareDailygift::default_instance_ = NULL;

E_WelfareDailygift* E_WelfareDailygift::New() const {
  return new E_WelfareDailygift;
}

void E_WelfareDailygift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_rechargeid_ = 0;
    m_oneclickbuy_ = 0;
    m_reward_ = 0;
    m_quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareDailygift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rechargeid;
        break;
      }

      // optional int32 m_rechargeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargeid_)));
          set_has_m_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_oneclickbuy;
        break;
      }

      // optional int32 m_oneclickbuy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_oneclickbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_oneclickbuy_)));
          set_has_m_oneclickbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareDailygift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_rechargeid = 3;
  if (has_m_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rechargeid(), output);
  }

  // optional int32 m_oneclickbuy = 4;
  if (has_m_oneclickbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_oneclickbuy(), output);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_reward(), output);
  }

  // optional int32 m_quality = 6;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareDailygift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_rechargeid = 3;
  if (has_m_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rechargeid(), target);
  }

  // optional int32 m_oneclickbuy = 4;
  if (has_m_oneclickbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_oneclickbuy(), target);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_reward(), target);
  }

  // optional int32 m_quality = 6;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareDailygift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_rechargeid = 3;
    if (has_m_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargeid());
    }

    // optional int32 m_oneclickbuy = 4;
    if (has_m_oneclickbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_oneclickbuy());
    }

    // optional int32 m_reward = 5;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_quality = 6;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareDailygift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareDailygift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareDailygift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareDailygift::MergeFrom(const E_WelfareDailygift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_rechargeid()) {
      set_m_rechargeid(from.m_rechargeid());
    }
    if (from.has_m_oneclickbuy()) {
      set_m_oneclickbuy(from.m_oneclickbuy());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareDailygift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareDailygift::CopyFrom(const E_WelfareDailygift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareDailygift::IsInitialized() const {

  return true;
}

void E_WelfareDailygift::Swap(E_WelfareDailygift* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_rechargeid_, other->m_rechargeid_);
    std::swap(m_oneclickbuy_, other->m_oneclickbuy_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareDailygift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareDailygift_descriptor_;
  metadata.reflection = E_WelfareDailygift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareDailygift::kEWelfareDailygiftListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareDailygift::Sheet_WelfareDailygift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareDailygift::InitAsDefaultInstance() {
}

Sheet_WelfareDailygift::Sheet_WelfareDailygift(const Sheet_WelfareDailygift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareDailygift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareDailygift::~Sheet_WelfareDailygift() {
  SharedDtor();
}

void Sheet_WelfareDailygift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareDailygift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareDailygift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareDailygift_descriptor_;
}

const Sheet_WelfareDailygift& Sheet_WelfareDailygift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareDailygift* Sheet_WelfareDailygift::default_instance_ = NULL;

Sheet_WelfareDailygift* Sheet_WelfareDailygift::New() const {
  return new Sheet_WelfareDailygift;
}

void Sheet_WelfareDailygift::Clear() {
  e_welfaredailygift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareDailygift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareDailygift E_WelfareDailygift_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareDailygift_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfaredailygift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareDailygift_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareDailygift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareDailygift E_WelfareDailygift_List = 1;
  for (int i = 0; i < this->e_welfaredailygift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfaredailygift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareDailygift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareDailygift E_WelfareDailygift_List = 1;
  for (int i = 0; i < this->e_welfaredailygift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfaredailygift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareDailygift::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareDailygift E_WelfareDailygift_List = 1;
  total_size += 1 * this->e_welfaredailygift_list_size();
  for (int i = 0; i < this->e_welfaredailygift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfaredailygift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareDailygift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareDailygift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareDailygift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareDailygift::MergeFrom(const Sheet_WelfareDailygift& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfaredailygift_list_.MergeFrom(from.e_welfaredailygift_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareDailygift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareDailygift::CopyFrom(const Sheet_WelfareDailygift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareDailygift::IsInitialized() const {

  return true;
}

void Sheet_WelfareDailygift::Swap(Sheet_WelfareDailygift* other) {
  if (other != this) {
    e_welfaredailygift_list_.Swap(&other->e_welfaredailygift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareDailygift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareDailygift_descriptor_;
  metadata.reflection = Sheet_WelfareDailygift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareLcgift::kMIdFieldNumber;
const int E_WelfareLcgift::kMTypeFieldNumber;
const int E_WelfareLcgift::kMLimitFieldNumber;
const int E_WelfareLcgift::kMDaysFieldNumber;
const int E_WelfareLcgift::kMStarnumFieldNumber;
const int E_WelfareLcgift::kMRewardFieldNumber;
const int E_WelfareLcgift::kMShowitemFieldNumber;
#endif  // !_MSC_VER

E_WelfareLcgift::E_WelfareLcgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareLcgift::InitAsDefaultInstance() {
}

E_WelfareLcgift::E_WelfareLcgift(const E_WelfareLcgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareLcgift::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_limit_ = 0;
  m_days_ = 0;
  m_starnum_ = 0;
  m_reward_ = 0;
  m_showitem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareLcgift::~E_WelfareLcgift() {
  SharedDtor();
}

void E_WelfareLcgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareLcgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareLcgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareLcgift_descriptor_;
}

const E_WelfareLcgift& E_WelfareLcgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareLcgift* E_WelfareLcgift::default_instance_ = NULL;

E_WelfareLcgift* E_WelfareLcgift::New() const {
  return new E_WelfareLcgift;
}

void E_WelfareLcgift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_limit_ = 0;
    m_days_ = 0;
    m_starnum_ = 0;
    m_reward_ = 0;
    m_showitem_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareLcgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_limit;
        break;
      }

      // optional int32 m_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_limit_)));
          set_has_m_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_days;
        break;
      }

      // optional int32 m_days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_days_)));
          set_has_m_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_starnum;
        break;
      }

      // optional int32 m_starnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starnum_)));
          set_has_m_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_showitem;
        break;
      }

      // optional int32 m_showitem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_showitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_showitem_)));
          set_has_m_showitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareLcgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_limit = 3;
  if (has_m_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_limit(), output);
  }

  // optional int32 m_days = 4;
  if (has_m_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_days(), output);
  }

  // optional int32 m_starnum = 5;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_starnum(), output);
  }

  // optional int32 m_reward = 6;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_reward(), output);
  }

  // optional int32 m_showitem = 7;
  if (has_m_showitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_showitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareLcgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_limit = 3;
  if (has_m_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_limit(), target);
  }

  // optional int32 m_days = 4;
  if (has_m_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_days(), target);
  }

  // optional int32 m_starnum = 5;
  if (has_m_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_starnum(), target);
  }

  // optional int32 m_reward = 6;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_reward(), target);
  }

  // optional int32 m_showitem = 7;
  if (has_m_showitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_showitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareLcgift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_limit = 3;
    if (has_m_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_limit());
    }

    // optional int32 m_days = 4;
    if (has_m_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_days());
    }

    // optional int32 m_starnum = 5;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starnum());
    }

    // optional int32 m_reward = 6;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_showitem = 7;
    if (has_m_showitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_showitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareLcgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareLcgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareLcgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareLcgift::MergeFrom(const E_WelfareLcgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_limit()) {
      set_m_limit(from.m_limit());
    }
    if (from.has_m_days()) {
      set_m_days(from.m_days());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_showitem()) {
      set_m_showitem(from.m_showitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareLcgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareLcgift::CopyFrom(const E_WelfareLcgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareLcgift::IsInitialized() const {

  return true;
}

void E_WelfareLcgift::Swap(E_WelfareLcgift* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_limit_, other->m_limit_);
    std::swap(m_days_, other->m_days_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_showitem_, other->m_showitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareLcgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareLcgift_descriptor_;
  metadata.reflection = E_WelfareLcgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareLcgift::kEWelfareLcgiftListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareLcgift::Sheet_WelfareLcgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareLcgift::InitAsDefaultInstance() {
}

Sheet_WelfareLcgift::Sheet_WelfareLcgift(const Sheet_WelfareLcgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareLcgift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareLcgift::~Sheet_WelfareLcgift() {
  SharedDtor();
}

void Sheet_WelfareLcgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareLcgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareLcgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareLcgift_descriptor_;
}

const Sheet_WelfareLcgift& Sheet_WelfareLcgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareLcgift* Sheet_WelfareLcgift::default_instance_ = NULL;

Sheet_WelfareLcgift* Sheet_WelfareLcgift::New() const {
  return new Sheet_WelfareLcgift;
}

void Sheet_WelfareLcgift::Clear() {
  e_welfarelcgift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareLcgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareLcgift E_WelfareLcgift_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareLcgift_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarelcgift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareLcgift_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareLcgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareLcgift E_WelfareLcgift_List = 1;
  for (int i = 0; i < this->e_welfarelcgift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarelcgift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareLcgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareLcgift E_WelfareLcgift_List = 1;
  for (int i = 0; i < this->e_welfarelcgift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarelcgift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareLcgift::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareLcgift E_WelfareLcgift_List = 1;
  total_size += 1 * this->e_welfarelcgift_list_size();
  for (int i = 0; i < this->e_welfarelcgift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarelcgift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareLcgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareLcgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareLcgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareLcgift::MergeFrom(const Sheet_WelfareLcgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarelcgift_list_.MergeFrom(from.e_welfarelcgift_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareLcgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareLcgift::CopyFrom(const Sheet_WelfareLcgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareLcgift::IsInitialized() const {

  return true;
}

void Sheet_WelfareLcgift::Swap(Sheet_WelfareLcgift* other) {
  if (other != this) {
    e_welfarelcgift_list_.Swap(&other->e_welfarelcgift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareLcgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareLcgift_descriptor_;
  metadata.reflection = Sheet_WelfareLcgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareLcraffle::kMIdFieldNumber;
const int E_WelfareLcraffle::kMMoneyFieldNumber;
const int E_WelfareLcraffle::kMLimitFieldNumber;
const int E_WelfareLcraffle::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_WelfareLcraffle::E_WelfareLcraffle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareLcraffle::InitAsDefaultInstance() {
}

E_WelfareLcraffle::E_WelfareLcraffle(const E_WelfareLcraffle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareLcraffle::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_money_ = 0;
  m_limit_ = 0;
  m_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareLcraffle::~E_WelfareLcraffle() {
  SharedDtor();
}

void E_WelfareLcraffle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareLcraffle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareLcraffle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareLcraffle_descriptor_;
}

const E_WelfareLcraffle& E_WelfareLcraffle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareLcraffle* E_WelfareLcraffle::default_instance_ = NULL;

E_WelfareLcraffle* E_WelfareLcraffle::New() const {
  return new E_WelfareLcraffle;
}

void E_WelfareLcraffle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_money_ = 0;
    m_limit_ = 0;
    m_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareLcraffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_money;
        break;
      }

      // optional int32 m_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_limit;
        break;
      }

      // optional int32 m_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_limit_)));
          set_has_m_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareLcraffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_money = 2;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_money(), output);
  }

  // optional int32 m_limit = 3;
  if (has_m_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_limit(), output);
  }

  // optional int32 m_reward = 4;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareLcraffle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_money = 2;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_money(), target);
  }

  // optional int32 m_limit = 3;
  if (has_m_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_limit(), target);
  }

  // optional int32 m_reward = 4;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareLcraffle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_money = 2;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_money());
    }

    // optional int32 m_limit = 3;
    if (has_m_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_limit());
    }

    // optional int32 m_reward = 4;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareLcraffle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareLcraffle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareLcraffle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareLcraffle::MergeFrom(const E_WelfareLcraffle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
    if (from.has_m_limit()) {
      set_m_limit(from.m_limit());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareLcraffle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareLcraffle::CopyFrom(const E_WelfareLcraffle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareLcraffle::IsInitialized() const {

  return true;
}

void E_WelfareLcraffle::Swap(E_WelfareLcraffle* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_limit_, other->m_limit_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareLcraffle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareLcraffle_descriptor_;
  metadata.reflection = E_WelfareLcraffle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareLcraffle::kEWelfareLcraffleListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareLcraffle::Sheet_WelfareLcraffle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareLcraffle::InitAsDefaultInstance() {
}

Sheet_WelfareLcraffle::Sheet_WelfareLcraffle(const Sheet_WelfareLcraffle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareLcraffle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareLcraffle::~Sheet_WelfareLcraffle() {
  SharedDtor();
}

void Sheet_WelfareLcraffle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareLcraffle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareLcraffle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareLcraffle_descriptor_;
}

const Sheet_WelfareLcraffle& Sheet_WelfareLcraffle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareLcraffle* Sheet_WelfareLcraffle::default_instance_ = NULL;

Sheet_WelfareLcraffle* Sheet_WelfareLcraffle::New() const {
  return new Sheet_WelfareLcraffle;
}

void Sheet_WelfareLcraffle::Clear() {
  e_welfarelcraffle_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareLcraffle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareLcraffle E_WelfareLcraffle_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareLcraffle_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarelcraffle_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareLcraffle_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareLcraffle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareLcraffle E_WelfareLcraffle_List = 1;
  for (int i = 0; i < this->e_welfarelcraffle_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarelcraffle_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareLcraffle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareLcraffle E_WelfareLcraffle_List = 1;
  for (int i = 0; i < this->e_welfarelcraffle_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarelcraffle_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareLcraffle::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareLcraffle E_WelfareLcraffle_List = 1;
  total_size += 1 * this->e_welfarelcraffle_list_size();
  for (int i = 0; i < this->e_welfarelcraffle_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarelcraffle_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareLcraffle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareLcraffle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareLcraffle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareLcraffle::MergeFrom(const Sheet_WelfareLcraffle& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarelcraffle_list_.MergeFrom(from.e_welfarelcraffle_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareLcraffle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareLcraffle::CopyFrom(const Sheet_WelfareLcraffle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareLcraffle::IsInitialized() const {

  return true;
}

void Sheet_WelfareLcraffle::Swap(Sheet_WelfareLcraffle* other) {
  if (other != this) {
    e_welfarelcraffle_list_.Swap(&other->e_welfarelcraffle_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareLcraffle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareLcraffle_descriptor_;
  metadata.reflection = Sheet_WelfareLcraffle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareLcturntableRaffleDesc::kMNumFieldNumber;
const int E_WelfareLcturntableRaffleDesc::kMItemFieldNumber;
#endif  // !_MSC_VER

E_WelfareLcturntableRaffleDesc::E_WelfareLcturntableRaffleDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareLcturntableRaffleDesc::InitAsDefaultInstance() {
}

E_WelfareLcturntableRaffleDesc::E_WelfareLcturntableRaffleDesc(const E_WelfareLcturntableRaffleDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareLcturntableRaffleDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareLcturntableRaffleDesc::~E_WelfareLcturntableRaffleDesc() {
  SharedDtor();
}

void E_WelfareLcturntableRaffleDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareLcturntableRaffleDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareLcturntableRaffleDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareLcturntableRaffleDesc_descriptor_;
}

const E_WelfareLcturntableRaffleDesc& E_WelfareLcturntableRaffleDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareLcturntableRaffleDesc* E_WelfareLcturntableRaffleDesc::default_instance_ = NULL;

E_WelfareLcturntableRaffleDesc* E_WelfareLcturntableRaffleDesc::New() const {
  return new E_WelfareLcturntableRaffleDesc;
}

void E_WelfareLcturntableRaffleDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_item_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareLcturntableRaffleDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareLcturntableRaffleDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareLcturntableRaffleDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareLcturntableRaffleDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareLcturntableRaffleDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareLcturntableRaffleDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareLcturntableRaffleDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareLcturntableRaffleDesc::MergeFrom(const E_WelfareLcturntableRaffleDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareLcturntableRaffleDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareLcturntableRaffleDesc::CopyFrom(const E_WelfareLcturntableRaffleDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareLcturntableRaffleDesc::IsInitialized() const {

  return true;
}

void E_WelfareLcturntableRaffleDesc::Swap(E_WelfareLcturntableRaffleDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_item_, other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareLcturntableRaffleDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareLcturntableRaffleDesc_descriptor_;
  metadata.reflection = E_WelfareLcturntableRaffleDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareLcturntable::kMIdFieldNumber;
const int E_WelfareLcturntable::kMJackpottypeFieldNumber;
const int E_WelfareLcturntable::kMRaffletimesFieldNumber;
const int E_WelfareLcturntable::kMRatimesrewFieldNumber;
const int E_WelfareLcturntable::kMRaffleFieldNumber;
#endif  // !_MSC_VER

E_WelfareLcturntable::E_WelfareLcturntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareLcturntable::InitAsDefaultInstance() {
}

E_WelfareLcturntable::E_WelfareLcturntable(const E_WelfareLcturntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareLcturntable::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_jackpottype_ = 0;
  m_raffletimes_ = 0;
  m_ratimesrew_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareLcturntable::~E_WelfareLcturntable() {
  SharedDtor();
}

void E_WelfareLcturntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareLcturntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareLcturntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareLcturntable_descriptor_;
}

const E_WelfareLcturntable& E_WelfareLcturntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareLcturntable* E_WelfareLcturntable::default_instance_ = NULL;

E_WelfareLcturntable* E_WelfareLcturntable::New() const {
  return new E_WelfareLcturntable;
}

void E_WelfareLcturntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_jackpottype_ = 0;
    m_raffletimes_ = 0;
    m_ratimesrew_ = 0;
  }
  m_raffle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareLcturntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_jackpottype;
        break;
      }

      // optional int32 m_jackpottype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_jackpottype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jackpottype_)));
          set_has_m_jackpottype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_raffletimes;
        break;
      }

      // optional int32 m_raffletimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_raffletimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_raffletimes_)));
          set_has_m_raffletimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_ratimesrew;
        break;
      }

      // optional int32 m_ratimesrew = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ratimesrew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ratimesrew_)));
          set_has_m_ratimesrew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_raffle;
        break;
      }

      // repeated .proto_ff.E_WelfareLcturntableRaffleDesc m_raffle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_raffle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_raffle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_raffle;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareLcturntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_jackpottype = 2;
  if (has_m_jackpottype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_jackpottype(), output);
  }

  // optional int32 m_raffletimes = 3;
  if (has_m_raffletimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_raffletimes(), output);
  }

  // optional int32 m_ratimesrew = 4;
  if (has_m_ratimesrew()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ratimesrew(), output);
  }

  // repeated .proto_ff.E_WelfareLcturntableRaffleDesc m_raffle = 5;
  for (int i = 0; i < this->m_raffle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_raffle(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareLcturntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_jackpottype = 2;
  if (has_m_jackpottype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_jackpottype(), target);
  }

  // optional int32 m_raffletimes = 3;
  if (has_m_raffletimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_raffletimes(), target);
  }

  // optional int32 m_ratimesrew = 4;
  if (has_m_ratimesrew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_ratimesrew(), target);
  }

  // repeated .proto_ff.E_WelfareLcturntableRaffleDesc m_raffle = 5;
  for (int i = 0; i < this->m_raffle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_raffle(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareLcturntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_jackpottype = 2;
    if (has_m_jackpottype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jackpottype());
    }

    // optional int32 m_raffletimes = 3;
    if (has_m_raffletimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_raffletimes());
    }

    // optional int32 m_ratimesrew = 4;
    if (has_m_ratimesrew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ratimesrew());
    }

  }
  // repeated .proto_ff.E_WelfareLcturntableRaffleDesc m_raffle = 5;
  total_size += 1 * this->m_raffle_size();
  for (int i = 0; i < this->m_raffle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_raffle(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareLcturntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareLcturntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareLcturntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareLcturntable::MergeFrom(const E_WelfareLcturntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_raffle_.MergeFrom(from.m_raffle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_jackpottype()) {
      set_m_jackpottype(from.m_jackpottype());
    }
    if (from.has_m_raffletimes()) {
      set_m_raffletimes(from.m_raffletimes());
    }
    if (from.has_m_ratimesrew()) {
      set_m_ratimesrew(from.m_ratimesrew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareLcturntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareLcturntable::CopyFrom(const E_WelfareLcturntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareLcturntable::IsInitialized() const {

  return true;
}

void E_WelfareLcturntable::Swap(E_WelfareLcturntable* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_jackpottype_, other->m_jackpottype_);
    std::swap(m_raffletimes_, other->m_raffletimes_);
    std::swap(m_ratimesrew_, other->m_ratimesrew_);
    m_raffle_.Swap(&other->m_raffle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareLcturntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareLcturntable_descriptor_;
  metadata.reflection = E_WelfareLcturntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareLcturntable::kEWelfareLcturntableListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareLcturntable::Sheet_WelfareLcturntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareLcturntable::InitAsDefaultInstance() {
}

Sheet_WelfareLcturntable::Sheet_WelfareLcturntable(const Sheet_WelfareLcturntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareLcturntable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareLcturntable::~Sheet_WelfareLcturntable() {
  SharedDtor();
}

void Sheet_WelfareLcturntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareLcturntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareLcturntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareLcturntable_descriptor_;
}

const Sheet_WelfareLcturntable& Sheet_WelfareLcturntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareLcturntable* Sheet_WelfareLcturntable::default_instance_ = NULL;

Sheet_WelfareLcturntable* Sheet_WelfareLcturntable::New() const {
  return new Sheet_WelfareLcturntable;
}

void Sheet_WelfareLcturntable::Clear() {
  e_welfarelcturntable_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareLcturntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareLcturntable E_WelfareLcturntable_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareLcturntable_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarelcturntable_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareLcturntable_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareLcturntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareLcturntable E_WelfareLcturntable_List = 1;
  for (int i = 0; i < this->e_welfarelcturntable_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarelcturntable_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareLcturntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareLcturntable E_WelfareLcturntable_List = 1;
  for (int i = 0; i < this->e_welfarelcturntable_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarelcturntable_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareLcturntable::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareLcturntable E_WelfareLcturntable_List = 1;
  total_size += 1 * this->e_welfarelcturntable_list_size();
  for (int i = 0; i < this->e_welfarelcturntable_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarelcturntable_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareLcturntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareLcturntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareLcturntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareLcturntable::MergeFrom(const Sheet_WelfareLcturntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarelcturntable_list_.MergeFrom(from.e_welfarelcturntable_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareLcturntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareLcturntable::CopyFrom(const Sheet_WelfareLcturntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareLcturntable::IsInitialized() const {

  return true;
}

void Sheet_WelfareLcturntable::Swap(Sheet_WelfareLcturntable* other) {
  if (other != this) {
    e_welfarelcturntable_list_.Swap(&other->e_welfarelcturntable_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareLcturntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareLcturntable_descriptor_;
  metadata.reflection = Sheet_WelfareLcturntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareJackpot::kMIdFieldNumber;
const int E_WelfareJackpot::kMTypeFieldNumber;
const int E_WelfareJackpot::kMRankFieldNumber;
const int E_WelfareJackpot::kMItemFieldNumber;
const int E_WelfareJackpot::kMItemnumFieldNumber;
const int E_WelfareJackpot::kMWeightFieldNumber;
#endif  // !_MSC_VER

E_WelfareJackpot::E_WelfareJackpot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareJackpot::InitAsDefaultInstance() {
}

E_WelfareJackpot::E_WelfareJackpot(const E_WelfareJackpot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareJackpot::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_rank_ = 0;
  m_item_ = 0;
  m_itemnum_ = 0;
  m_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareJackpot::~E_WelfareJackpot() {
  SharedDtor();
}

void E_WelfareJackpot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareJackpot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareJackpot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareJackpot_descriptor_;
}

const E_WelfareJackpot& E_WelfareJackpot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareJackpot* E_WelfareJackpot::default_instance_ = NULL;

E_WelfareJackpot* E_WelfareJackpot::New() const {
  return new E_WelfareJackpot;
}

void E_WelfareJackpot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_rank_ = 0;
    m_item_ = 0;
    m_itemnum_ = 0;
    m_weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareJackpot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rank;
        break;
      }

      // optional int32 m_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rank_)));
          set_has_m_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemnum;
        break;
      }

      // optional int32 m_itemnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_weight;
        break;
      }

      // optional int32 m_weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weight_)));
          set_has_m_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareJackpot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_rank = 3;
  if (has_m_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rank(), output);
  }

  // optional int32 m_item = 4;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_item(), output);
  }

  // optional int32 m_itemnum = 5;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemnum(), output);
  }

  // optional int32 m_weight = 6;
  if (has_m_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareJackpot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_rank = 3;
  if (has_m_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rank(), target);
  }

  // optional int32 m_item = 4;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_item(), target);
  }

  // optional int32 m_itemnum = 5;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemnum(), target);
  }

  // optional int32 m_weight = 6;
  if (has_m_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareJackpot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_rank = 3;
    if (has_m_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rank());
    }

    // optional int32 m_item = 4;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

    // optional int32 m_itemnum = 5;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

    // optional int32 m_weight = 6;
    if (has_m_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareJackpot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareJackpot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareJackpot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareJackpot::MergeFrom(const E_WelfareJackpot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_rank()) {
      set_m_rank(from.m_rank());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
    if (from.has_m_weight()) {
      set_m_weight(from.m_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareJackpot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareJackpot::CopyFrom(const E_WelfareJackpot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareJackpot::IsInitialized() const {

  return true;
}

void E_WelfareJackpot::Swap(E_WelfareJackpot* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_rank_, other->m_rank_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_itemnum_, other->m_itemnum_);
    std::swap(m_weight_, other->m_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareJackpot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareJackpot_descriptor_;
  metadata.reflection = E_WelfareJackpot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareJackpot::kEWelfareJackpotListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareJackpot::Sheet_WelfareJackpot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareJackpot::InitAsDefaultInstance() {
}

Sheet_WelfareJackpot::Sheet_WelfareJackpot(const Sheet_WelfareJackpot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareJackpot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareJackpot::~Sheet_WelfareJackpot() {
  SharedDtor();
}

void Sheet_WelfareJackpot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareJackpot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareJackpot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareJackpot_descriptor_;
}

const Sheet_WelfareJackpot& Sheet_WelfareJackpot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareJackpot* Sheet_WelfareJackpot::default_instance_ = NULL;

Sheet_WelfareJackpot* Sheet_WelfareJackpot::New() const {
  return new Sheet_WelfareJackpot;
}

void Sheet_WelfareJackpot::Clear() {
  e_welfarejackpot_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareJackpot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareJackpot E_WelfareJackpot_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareJackpot_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfarejackpot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareJackpot_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareJackpot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareJackpot E_WelfareJackpot_List = 1;
  for (int i = 0; i < this->e_welfarejackpot_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfarejackpot_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareJackpot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareJackpot E_WelfareJackpot_List = 1;
  for (int i = 0; i < this->e_welfarejackpot_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfarejackpot_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareJackpot::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareJackpot E_WelfareJackpot_List = 1;
  total_size += 1 * this->e_welfarejackpot_list_size();
  for (int i = 0; i < this->e_welfarejackpot_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfarejackpot_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareJackpot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareJackpot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareJackpot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareJackpot::MergeFrom(const Sheet_WelfareJackpot& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfarejackpot_list_.MergeFrom(from.e_welfarejackpot_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareJackpot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareJackpot::CopyFrom(const Sheet_WelfareJackpot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareJackpot::IsInitialized() const {

  return true;
}

void Sheet_WelfareJackpot::Swap(Sheet_WelfareJackpot* other) {
  if (other != this) {
    e_welfarejackpot_list_.Swap(&other->e_welfarejackpot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareJackpot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareJackpot_descriptor_;
  metadata.reflection = Sheet_WelfareJackpot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareMonthlycard::kMIdFieldNumber;
const int E_WelfareMonthlycard::kMCardtypeFieldNumber;
const int E_WelfareMonthlycard::kMCardmoneyFieldNumber;
const int E_WelfareMonthlycard::kMCardbuyitemFieldNumber;
const int E_WelfareMonthlycard::kMCarddailyitemFieldNumber;
const int E_WelfareMonthlycard::kMCardtimeFieldNumber;
const int E_WelfareMonthlycard::kMFlmultipleFieldNumber;
#endif  // !_MSC_VER

E_WelfareMonthlycard::E_WelfareMonthlycard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareMonthlycard::InitAsDefaultInstance() {
}

E_WelfareMonthlycard::E_WelfareMonthlycard(const E_WelfareMonthlycard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareMonthlycard::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_cardtype_ = 0;
  m_cardmoney_ = 0;
  m_cardbuyitem_ = 0;
  m_carddailyitem_ = 0;
  m_cardtime_ = 0;
  m_flmultiple_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareMonthlycard::~E_WelfareMonthlycard() {
  SharedDtor();
}

void E_WelfareMonthlycard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareMonthlycard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareMonthlycard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareMonthlycard_descriptor_;
}

const E_WelfareMonthlycard& E_WelfareMonthlycard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareMonthlycard* E_WelfareMonthlycard::default_instance_ = NULL;

E_WelfareMonthlycard* E_WelfareMonthlycard::New() const {
  return new E_WelfareMonthlycard;
}

void E_WelfareMonthlycard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_cardtype_ = 0;
    m_cardmoney_ = 0;
    m_cardbuyitem_ = 0;
    m_carddailyitem_ = 0;
    m_cardtime_ = 0;
    m_flmultiple_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareMonthlycard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_cardtype;
        break;
      }

      // optional int32 m_cardtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardtype_)));
          set_has_m_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_cardmoney;
        break;
      }

      // optional int32 m_cardmoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cardmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardmoney_)));
          set_has_m_cardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_cardbuyitem;
        break;
      }

      // optional int32 m_cardbuyitem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cardbuyitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardbuyitem_)));
          set_has_m_cardbuyitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_carddailyitem;
        break;
      }

      // optional int32 m_carddailyitem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_carddailyitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_carddailyitem_)));
          set_has_m_carddailyitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_cardtime;
        break;
      }

      // optional int32 m_cardtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cardtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cardtime_)));
          set_has_m_cardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_flmultiple;
        break;
      }

      // optional int32 m_flmultiple = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_flmultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_flmultiple_)));
          set_has_m_flmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareMonthlycard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_cardtype = 2;
  if (has_m_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_cardtype(), output);
  }

  // optional int32 m_cardmoney = 3;
  if (has_m_cardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_cardmoney(), output);
  }

  // optional int32 m_cardbuyitem = 4;
  if (has_m_cardbuyitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_cardbuyitem(), output);
  }

  // optional int32 m_carddailyitem = 5;
  if (has_m_carddailyitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_carddailyitem(), output);
  }

  // optional int32 m_cardtime = 6;
  if (has_m_cardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_cardtime(), output);
  }

  // optional int32 m_flmultiple = 7;
  if (has_m_flmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_flmultiple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareMonthlycard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_cardtype = 2;
  if (has_m_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_cardtype(), target);
  }

  // optional int32 m_cardmoney = 3;
  if (has_m_cardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_cardmoney(), target);
  }

  // optional int32 m_cardbuyitem = 4;
  if (has_m_cardbuyitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_cardbuyitem(), target);
  }

  // optional int32 m_carddailyitem = 5;
  if (has_m_carddailyitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_carddailyitem(), target);
  }

  // optional int32 m_cardtime = 6;
  if (has_m_cardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_cardtime(), target);
  }

  // optional int32 m_flmultiple = 7;
  if (has_m_flmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_flmultiple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareMonthlycard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_cardtype = 2;
    if (has_m_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardtype());
    }

    // optional int32 m_cardmoney = 3;
    if (has_m_cardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardmoney());
    }

    // optional int32 m_cardbuyitem = 4;
    if (has_m_cardbuyitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardbuyitem());
    }

    // optional int32 m_carddailyitem = 5;
    if (has_m_carddailyitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_carddailyitem());
    }

    // optional int32 m_cardtime = 6;
    if (has_m_cardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cardtime());
    }

    // optional int32 m_flmultiple = 7;
    if (has_m_flmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_flmultiple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareMonthlycard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareMonthlycard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareMonthlycard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareMonthlycard::MergeFrom(const E_WelfareMonthlycard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_cardtype()) {
      set_m_cardtype(from.m_cardtype());
    }
    if (from.has_m_cardmoney()) {
      set_m_cardmoney(from.m_cardmoney());
    }
    if (from.has_m_cardbuyitem()) {
      set_m_cardbuyitem(from.m_cardbuyitem());
    }
    if (from.has_m_carddailyitem()) {
      set_m_carddailyitem(from.m_carddailyitem());
    }
    if (from.has_m_cardtime()) {
      set_m_cardtime(from.m_cardtime());
    }
    if (from.has_m_flmultiple()) {
      set_m_flmultiple(from.m_flmultiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareMonthlycard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareMonthlycard::CopyFrom(const E_WelfareMonthlycard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareMonthlycard::IsInitialized() const {

  return true;
}

void E_WelfareMonthlycard::Swap(E_WelfareMonthlycard* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_cardtype_, other->m_cardtype_);
    std::swap(m_cardmoney_, other->m_cardmoney_);
    std::swap(m_cardbuyitem_, other->m_cardbuyitem_);
    std::swap(m_carddailyitem_, other->m_carddailyitem_);
    std::swap(m_cardtime_, other->m_cardtime_);
    std::swap(m_flmultiple_, other->m_flmultiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareMonthlycard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareMonthlycard_descriptor_;
  metadata.reflection = E_WelfareMonthlycard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareMonthlycard::kEWelfareMonthlycardListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareMonthlycard::Sheet_WelfareMonthlycard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareMonthlycard::InitAsDefaultInstance() {
}

Sheet_WelfareMonthlycard::Sheet_WelfareMonthlycard(const Sheet_WelfareMonthlycard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareMonthlycard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareMonthlycard::~Sheet_WelfareMonthlycard() {
  SharedDtor();
}

void Sheet_WelfareMonthlycard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareMonthlycard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareMonthlycard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareMonthlycard_descriptor_;
}

const Sheet_WelfareMonthlycard& Sheet_WelfareMonthlycard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareMonthlycard* Sheet_WelfareMonthlycard::default_instance_ = NULL;

Sheet_WelfareMonthlycard* Sheet_WelfareMonthlycard::New() const {
  return new Sheet_WelfareMonthlycard;
}

void Sheet_WelfareMonthlycard::Clear() {
  e_welfaremonthlycard_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareMonthlycard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareMonthlycard E_WelfareMonthlycard_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareMonthlycard_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfaremonthlycard_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareMonthlycard_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareMonthlycard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareMonthlycard E_WelfareMonthlycard_List = 1;
  for (int i = 0; i < this->e_welfaremonthlycard_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfaremonthlycard_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareMonthlycard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareMonthlycard E_WelfareMonthlycard_List = 1;
  for (int i = 0; i < this->e_welfaremonthlycard_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfaremonthlycard_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareMonthlycard::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareMonthlycard E_WelfareMonthlycard_List = 1;
  total_size += 1 * this->e_welfaremonthlycard_list_size();
  for (int i = 0; i < this->e_welfaremonthlycard_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfaremonthlycard_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareMonthlycard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareMonthlycard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareMonthlycard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareMonthlycard::MergeFrom(const Sheet_WelfareMonthlycard& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfaremonthlycard_list_.MergeFrom(from.e_welfaremonthlycard_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareMonthlycard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareMonthlycard::CopyFrom(const Sheet_WelfareMonthlycard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareMonthlycard::IsInitialized() const {

  return true;
}

void Sheet_WelfareMonthlycard::Swap(Sheet_WelfareMonthlycard* other) {
  if (other != this) {
    e_welfaremonthlycard_list_.Swap(&other->e_welfaremonthlycard_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareMonthlycard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareMonthlycard_descriptor_;
  metadata.reflection = Sheet_WelfareMonthlycard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareGoal::kMIdFieldNumber;
const int E_WelfareGoal::kMFunctionidFieldNumber;
const int E_WelfareGoal::kMTaskgroupFieldNumber;
const int E_WelfareGoal::kMTasknumFieldNumber;
const int E_WelfareGoal::kMRewrditemFieldNumber;
const int E_WelfareGoal::kMTimeFieldNumber;
#endif  // !_MSC_VER

E_WelfareGoal::E_WelfareGoal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareGoal::InitAsDefaultInstance() {
}

E_WelfareGoal::E_WelfareGoal(const E_WelfareGoal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareGoal::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_functionid_ = 0;
  m_taskgroup_ = 0;
  m_tasknum_ = 0;
  m_rewrditem_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareGoal::~E_WelfareGoal() {
  SharedDtor();
}

void E_WelfareGoal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareGoal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareGoal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareGoal_descriptor_;
}

const E_WelfareGoal& E_WelfareGoal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareGoal* E_WelfareGoal::default_instance_ = NULL;

E_WelfareGoal* E_WelfareGoal::New() const {
  return new E_WelfareGoal;
}

void E_WelfareGoal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_functionid_ = 0;
    m_taskgroup_ = 0;
    m_tasknum_ = 0;
    m_rewrditem_ = 0;
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_functionid;
        break;
      }

      // optional int32 m_functionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionid_)));
          set_has_m_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_taskgroup;
        break;
      }

      // optional int32 m_taskgroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taskgroup_)));
          set_has_m_taskgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_tasknum;
        break;
      }

      // optional int32 m_tasknum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tasknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tasknum_)));
          set_has_m_tasknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rewrditem;
        break;
      }

      // optional int32 m_rewrditem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewrditem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewrditem_)));
          set_has_m_rewrditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_functionid = 2;
  if (has_m_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_functionid(), output);
  }

  // optional int32 m_taskgroup = 3;
  if (has_m_taskgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_taskgroup(), output);
  }

  // optional int32 m_tasknum = 4;
  if (has_m_tasknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_tasknum(), output);
  }

  // optional int32 m_rewrditem = 5;
  if (has_m_rewrditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rewrditem(), output);
  }

  // optional int32 m_time = 6;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareGoal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_functionid = 2;
  if (has_m_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_functionid(), target);
  }

  // optional int32 m_taskgroup = 3;
  if (has_m_taskgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_taskgroup(), target);
  }

  // optional int32 m_tasknum = 4;
  if (has_m_tasknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_tasknum(), target);
  }

  // optional int32 m_rewrditem = 5;
  if (has_m_rewrditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rewrditem(), target);
  }

  // optional int32 m_time = 6;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareGoal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_functionid = 2;
    if (has_m_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionid());
    }

    // optional int32 m_taskgroup = 3;
    if (has_m_taskgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taskgroup());
    }

    // optional int32 m_tasknum = 4;
    if (has_m_tasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tasknum());
    }

    // optional int32 m_rewrditem = 5;
    if (has_m_rewrditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewrditem());
    }

    // optional int32 m_time = 6;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareGoal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareGoal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareGoal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareGoal::MergeFrom(const E_WelfareGoal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_functionid()) {
      set_m_functionid(from.m_functionid());
    }
    if (from.has_m_taskgroup()) {
      set_m_taskgroup(from.m_taskgroup());
    }
    if (from.has_m_tasknum()) {
      set_m_tasknum(from.m_tasknum());
    }
    if (from.has_m_rewrditem()) {
      set_m_rewrditem(from.m_rewrditem());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareGoal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareGoal::CopyFrom(const E_WelfareGoal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareGoal::IsInitialized() const {

  return true;
}

void E_WelfareGoal::Swap(E_WelfareGoal* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_functionid_, other->m_functionid_);
    std::swap(m_taskgroup_, other->m_taskgroup_);
    std::swap(m_tasknum_, other->m_tasknum_);
    std::swap(m_rewrditem_, other->m_rewrditem_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareGoal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareGoal_descriptor_;
  metadata.reflection = E_WelfareGoal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareGoal::kEWelfareGoalListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareGoal::Sheet_WelfareGoal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareGoal::InitAsDefaultInstance() {
}

Sheet_WelfareGoal::Sheet_WelfareGoal(const Sheet_WelfareGoal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareGoal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareGoal::~Sheet_WelfareGoal() {
  SharedDtor();
}

void Sheet_WelfareGoal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareGoal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareGoal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareGoal_descriptor_;
}

const Sheet_WelfareGoal& Sheet_WelfareGoal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareGoal* Sheet_WelfareGoal::default_instance_ = NULL;

Sheet_WelfareGoal* Sheet_WelfareGoal::New() const {
  return new Sheet_WelfareGoal;
}

void Sheet_WelfareGoal::Clear() {
  e_welfaregoal_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareGoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareGoal E_WelfareGoal_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareGoal_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfaregoal_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareGoal_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareGoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareGoal E_WelfareGoal_List = 1;
  for (int i = 0; i < this->e_welfaregoal_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfaregoal_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareGoal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareGoal E_WelfareGoal_List = 1;
  for (int i = 0; i < this->e_welfaregoal_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfaregoal_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareGoal::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareGoal E_WelfareGoal_List = 1;
  total_size += 1 * this->e_welfaregoal_list_size();
  for (int i = 0; i < this->e_welfaregoal_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfaregoal_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareGoal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareGoal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareGoal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareGoal::MergeFrom(const Sheet_WelfareGoal& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfaregoal_list_.MergeFrom(from.e_welfaregoal_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareGoal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareGoal::CopyFrom(const Sheet_WelfareGoal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareGoal::IsInitialized() const {

  return true;
}

void Sheet_WelfareGoal::Swap(Sheet_WelfareGoal* other) {
  if (other != this) {
    e_welfaregoal_list_.Swap(&other->e_welfaregoal_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareGoal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareGoal_descriptor_;
  metadata.reflection = Sheet_WelfareGoal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareGoaltask::kMIdFieldNumber;
const int E_WelfareGoaltask::kMGroupidFieldNumber;
const int E_WelfareGoaltask::kMEventtypeFieldNumber;
const int E_WelfareGoaltask::kMReachpriceFieldNumber;
const int E_WelfareGoaltask::kMItemidFieldNumber;
const int E_WelfareGoaltask::kMItemnumFieldNumber;
const int E_WelfareGoaltask::kMParamFieldNumber;
#endif  // !_MSC_VER

E_WelfareGoaltask::E_WelfareGoaltask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareGoaltask::InitAsDefaultInstance() {
}

E_WelfareGoaltask::E_WelfareGoaltask(const E_WelfareGoaltask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareGoaltask::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_eventtype_ = 0;
  m_reachprice_ = 0;
  m_itemid_ = 0;
  m_itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareGoaltask::~E_WelfareGoaltask() {
  SharedDtor();
}

void E_WelfareGoaltask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareGoaltask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareGoaltask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareGoaltask_descriptor_;
}

const E_WelfareGoaltask& E_WelfareGoaltask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareGoaltask* E_WelfareGoaltask::default_instance_ = NULL;

E_WelfareGoaltask* E_WelfareGoaltask::New() const {
  return new E_WelfareGoaltask;
}

void E_WelfareGoaltask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_eventtype_ = 0;
    m_reachprice_ = 0;
    m_itemid_ = 0;
    m_itemnum_ = 0;
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareGoaltask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_eventtype;
        break;
      }

      // optional int32 m_eventtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_eventtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_eventtype_)));
          set_has_m_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reachprice;
        break;
      }

      // optional int32 m_reachprice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reachprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reachprice_)));
          set_has_m_reachprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_itemnum;
        break;
      }

      // optional int32 m_itemnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareGoaltask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_eventtype(), output);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reachprice(), output);
  }

  // optional int32 m_itemid = 5;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemid(), output);
  }

  // optional int32 m_itemnum = 6;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_itemnum(), output);
  }

  // repeated int32 m_param = 7;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareGoaltask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_eventtype(), target);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reachprice(), target);
  }

  // optional int32 m_itemid = 5;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemid(), target);
  }

  // optional int32 m_itemnum = 6;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_itemnum(), target);
  }

  // repeated int32 m_param = 7;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareGoaltask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_eventtype = 3;
    if (has_m_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_eventtype());
    }

    // optional int32 m_reachprice = 4;
    if (has_m_reachprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reachprice());
    }

    // optional int32 m_itemid = 5;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_itemnum = 6;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

  }
  // repeated int32 m_param = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareGoaltask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareGoaltask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareGoaltask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareGoaltask::MergeFrom(const E_WelfareGoaltask& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_eventtype()) {
      set_m_eventtype(from.m_eventtype());
    }
    if (from.has_m_reachprice()) {
      set_m_reachprice(from.m_reachprice());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareGoaltask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareGoaltask::CopyFrom(const E_WelfareGoaltask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareGoaltask::IsInitialized() const {

  return true;
}

void E_WelfareGoaltask::Swap(E_WelfareGoaltask* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_eventtype_, other->m_eventtype_);
    std::swap(m_reachprice_, other->m_reachprice_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_itemnum_, other->m_itemnum_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareGoaltask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareGoaltask_descriptor_;
  metadata.reflection = E_WelfareGoaltask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareGoaltask::kEWelfareGoaltaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareGoaltask::Sheet_WelfareGoaltask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareGoaltask::InitAsDefaultInstance() {
}

Sheet_WelfareGoaltask::Sheet_WelfareGoaltask(const Sheet_WelfareGoaltask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareGoaltask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareGoaltask::~Sheet_WelfareGoaltask() {
  SharedDtor();
}

void Sheet_WelfareGoaltask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareGoaltask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareGoaltask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareGoaltask_descriptor_;
}

const Sheet_WelfareGoaltask& Sheet_WelfareGoaltask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareGoaltask* Sheet_WelfareGoaltask::default_instance_ = NULL;

Sheet_WelfareGoaltask* Sheet_WelfareGoaltask::New() const {
  return new Sheet_WelfareGoaltask;
}

void Sheet_WelfareGoaltask::Clear() {
  e_welfaregoaltask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareGoaltask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareGoaltask E_WelfareGoaltask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareGoaltask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfaregoaltask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareGoaltask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareGoaltask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareGoaltask E_WelfareGoaltask_List = 1;
  for (int i = 0; i < this->e_welfaregoaltask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfaregoaltask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareGoaltask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareGoaltask E_WelfareGoaltask_List = 1;
  for (int i = 0; i < this->e_welfaregoaltask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfaregoaltask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareGoaltask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareGoaltask E_WelfareGoaltask_List = 1;
  total_size += 1 * this->e_welfaregoaltask_list_size();
  for (int i = 0; i < this->e_welfaregoaltask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfaregoaltask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareGoaltask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareGoaltask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareGoaltask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareGoaltask::MergeFrom(const Sheet_WelfareGoaltask& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfaregoaltask_list_.MergeFrom(from.e_welfaregoaltask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareGoaltask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareGoaltask::CopyFrom(const Sheet_WelfareGoaltask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareGoaltask::IsInitialized() const {

  return true;
}

void Sheet_WelfareGoaltask::Swap(Sheet_WelfareGoaltask* other) {
  if (other != this) {
    e_welfaregoaltask_list_.Swap(&other->e_welfaregoaltask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareGoaltask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareGoaltask_descriptor_;
  metadata.reflection = Sheet_WelfareGoaltask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareInvest::kMIdFieldNumber;
const int E_WelfareInvest::kMFunctionidFieldNumber;
const int E_WelfareInvest::kMPriceFieldNumber;
const int E_WelfareInvest::kMRewarditemFieldNumber;
const int E_WelfareInvest::kMRewardgroupFieldNumber;
#endif  // !_MSC_VER

E_WelfareInvest::E_WelfareInvest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareInvest::InitAsDefaultInstance() {
}

E_WelfareInvest::E_WelfareInvest(const E_WelfareInvest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareInvest::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_functionid_ = 0;
  m_price_ = 0;
  m_rewarditem_ = 0;
  m_rewardgroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareInvest::~E_WelfareInvest() {
  SharedDtor();
}

void E_WelfareInvest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareInvest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareInvest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareInvest_descriptor_;
}

const E_WelfareInvest& E_WelfareInvest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareInvest* E_WelfareInvest::default_instance_ = NULL;

E_WelfareInvest* E_WelfareInvest::New() const {
  return new E_WelfareInvest;
}

void E_WelfareInvest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_functionid_ = 0;
    m_price_ = 0;
    m_rewarditem_ = 0;
    m_rewardgroup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareInvest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_functionid;
        break;
      }

      // optional int32 m_functionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionid_)));
          set_has_m_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rewarditem;
        break;
      }

      // optional int32 m_rewarditem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewarditem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewarditem_)));
          set_has_m_rewarditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rewardgroup;
        break;
      }

      // optional int32 m_rewardgroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardgroup_)));
          set_has_m_rewardgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareInvest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_functionid = 2;
  if (has_m_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_functionid(), output);
  }

  // optional int32 m_price = 3;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_price(), output);
  }

  // optional int32 m_rewarditem = 4;
  if (has_m_rewarditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rewarditem(), output);
  }

  // optional int32 m_rewardgroup = 5;
  if (has_m_rewardgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rewardgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareInvest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_functionid = 2;
  if (has_m_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_functionid(), target);
  }

  // optional int32 m_price = 3;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_price(), target);
  }

  // optional int32 m_rewarditem = 4;
  if (has_m_rewarditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rewarditem(), target);
  }

  // optional int32 m_rewardgroup = 5;
  if (has_m_rewardgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rewardgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareInvest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_functionid = 2;
    if (has_m_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionid());
    }

    // optional int32 m_price = 3;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_rewarditem = 4;
    if (has_m_rewarditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewarditem());
    }

    // optional int32 m_rewardgroup = 5;
    if (has_m_rewardgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareInvest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareInvest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareInvest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareInvest::MergeFrom(const E_WelfareInvest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_functionid()) {
      set_m_functionid(from.m_functionid());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_rewarditem()) {
      set_m_rewarditem(from.m_rewarditem());
    }
    if (from.has_m_rewardgroup()) {
      set_m_rewardgroup(from.m_rewardgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareInvest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareInvest::CopyFrom(const E_WelfareInvest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareInvest::IsInitialized() const {

  return true;
}

void E_WelfareInvest::Swap(E_WelfareInvest* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_functionid_, other->m_functionid_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_rewarditem_, other->m_rewarditem_);
    std::swap(m_rewardgroup_, other->m_rewardgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareInvest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareInvest_descriptor_;
  metadata.reflection = E_WelfareInvest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareInvest::kEWelfareInvestListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareInvest::Sheet_WelfareInvest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareInvest::InitAsDefaultInstance() {
}

Sheet_WelfareInvest::Sheet_WelfareInvest(const Sheet_WelfareInvest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareInvest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareInvest::~Sheet_WelfareInvest() {
  SharedDtor();
}

void Sheet_WelfareInvest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareInvest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareInvest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareInvest_descriptor_;
}

const Sheet_WelfareInvest& Sheet_WelfareInvest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareInvest* Sheet_WelfareInvest::default_instance_ = NULL;

Sheet_WelfareInvest* Sheet_WelfareInvest::New() const {
  return new Sheet_WelfareInvest;
}

void Sheet_WelfareInvest::Clear() {
  e_welfareinvest_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareInvest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareInvest E_WelfareInvest_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareInvest_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfareinvest_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareInvest_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareInvest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareInvest E_WelfareInvest_List = 1;
  for (int i = 0; i < this->e_welfareinvest_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfareinvest_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareInvest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareInvest E_WelfareInvest_List = 1;
  for (int i = 0; i < this->e_welfareinvest_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfareinvest_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareInvest::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareInvest E_WelfareInvest_List = 1;
  total_size += 1 * this->e_welfareinvest_list_size();
  for (int i = 0; i < this->e_welfareinvest_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfareinvest_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareInvest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareInvest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareInvest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareInvest::MergeFrom(const Sheet_WelfareInvest& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfareinvest_list_.MergeFrom(from.e_welfareinvest_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareInvest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareInvest::CopyFrom(const Sheet_WelfareInvest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareInvest::IsInitialized() const {

  return true;
}

void Sheet_WelfareInvest::Swap(Sheet_WelfareInvest* other) {
  if (other != this) {
    e_welfareinvest_list_.Swap(&other->e_welfareinvest_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareInvest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareInvest_descriptor_;
  metadata.reflection = Sheet_WelfareInvest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareInvestrewardItemDesc::kMNumFieldNumber;
const int E_WelfareInvestrewardItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_WelfareInvestrewardItemDesc::E_WelfareInvestrewardItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareInvestrewardItemDesc::InitAsDefaultInstance() {
}

E_WelfareInvestrewardItemDesc::E_WelfareInvestrewardItemDesc(const E_WelfareInvestrewardItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareInvestrewardItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareInvestrewardItemDesc::~E_WelfareInvestrewardItemDesc() {
  SharedDtor();
}

void E_WelfareInvestrewardItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareInvestrewardItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareInvestrewardItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareInvestrewardItemDesc_descriptor_;
}

const E_WelfareInvestrewardItemDesc& E_WelfareInvestrewardItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareInvestrewardItemDesc* E_WelfareInvestrewardItemDesc::default_instance_ = NULL;

E_WelfareInvestrewardItemDesc* E_WelfareInvestrewardItemDesc::New() const {
  return new E_WelfareInvestrewardItemDesc;
}

void E_WelfareInvestrewardItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareInvestrewardItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareInvestrewardItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareInvestrewardItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareInvestrewardItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareInvestrewardItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareInvestrewardItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareInvestrewardItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareInvestrewardItemDesc::MergeFrom(const E_WelfareInvestrewardItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareInvestrewardItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareInvestrewardItemDesc::CopyFrom(const E_WelfareInvestrewardItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareInvestrewardItemDesc::IsInitialized() const {

  return true;
}

void E_WelfareInvestrewardItemDesc::Swap(E_WelfareInvestrewardItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareInvestrewardItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareInvestrewardItemDesc_descriptor_;
  metadata.reflection = E_WelfareInvestrewardItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareInvestreward::kMIdFieldNumber;
const int E_WelfareInvestreward::kMGroupFieldNumber;
const int E_WelfareInvestreward::kMLvFieldNumber;
const int E_WelfareInvestreward::kMItemFieldNumber;
#endif  // !_MSC_VER

E_WelfareInvestreward::E_WelfareInvestreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareInvestreward::InitAsDefaultInstance() {
}

E_WelfareInvestreward::E_WelfareInvestreward(const E_WelfareInvestreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareInvestreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_group_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareInvestreward::~E_WelfareInvestreward() {
  SharedDtor();
}

void E_WelfareInvestreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareInvestreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareInvestreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareInvestreward_descriptor_;
}

const E_WelfareInvestreward& E_WelfareInvestreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareInvestreward* E_WelfareInvestreward::default_instance_ = NULL;

E_WelfareInvestreward* E_WelfareInvestreward::New() const {
  return new E_WelfareInvestreward;
}

void E_WelfareInvestreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_group_ = 0;
    m_lv_ = 0;
  }
  m_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareInvestreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_WelfareInvestrewardItemDesc m_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareInvestreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_group(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // repeated .proto_ff.E_WelfareInvestrewardItemDesc m_item = 4;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareInvestreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_group(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // repeated .proto_ff.E_WelfareInvestrewardItemDesc m_item = 4;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareInvestreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_group = 2;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  // repeated .proto_ff.E_WelfareInvestrewardItemDesc m_item = 4;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareInvestreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareInvestreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareInvestreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareInvestreward::MergeFrom(const E_WelfareInvestreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareInvestreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareInvestreward::CopyFrom(const E_WelfareInvestreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareInvestreward::IsInitialized() const {

  return true;
}

void E_WelfareInvestreward::Swap(E_WelfareInvestreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_lv_, other->m_lv_);
    m_item_.Swap(&other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareInvestreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareInvestreward_descriptor_;
  metadata.reflection = E_WelfareInvestreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareInvestreward::kEWelfareInvestrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareInvestreward::Sheet_WelfareInvestreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareInvestreward::InitAsDefaultInstance() {
}

Sheet_WelfareInvestreward::Sheet_WelfareInvestreward(const Sheet_WelfareInvestreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareInvestreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareInvestreward::~Sheet_WelfareInvestreward() {
  SharedDtor();
}

void Sheet_WelfareInvestreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareInvestreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareInvestreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareInvestreward_descriptor_;
}

const Sheet_WelfareInvestreward& Sheet_WelfareInvestreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareInvestreward* Sheet_WelfareInvestreward::default_instance_ = NULL;

Sheet_WelfareInvestreward* Sheet_WelfareInvestreward::New() const {
  return new Sheet_WelfareInvestreward;
}

void Sheet_WelfareInvestreward::Clear() {
  e_welfareinvestreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareInvestreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareInvestreward E_WelfareInvestreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareInvestreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfareinvestreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareInvestreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareInvestreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareInvestreward E_WelfareInvestreward_List = 1;
  for (int i = 0; i < this->e_welfareinvestreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfareinvestreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareInvestreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareInvestreward E_WelfareInvestreward_List = 1;
  for (int i = 0; i < this->e_welfareinvestreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfareinvestreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareInvestreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareInvestreward E_WelfareInvestreward_List = 1;
  total_size += 1 * this->e_welfareinvestreward_list_size();
  for (int i = 0; i < this->e_welfareinvestreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfareinvestreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareInvestreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareInvestreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareInvestreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareInvestreward::MergeFrom(const Sheet_WelfareInvestreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfareinvestreward_list_.MergeFrom(from.e_welfareinvestreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareInvestreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareInvestreward::CopyFrom(const Sheet_WelfareInvestreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareInvestreward::IsInitialized() const {

  return true;
}

void Sheet_WelfareInvestreward::Swap(Sheet_WelfareInvestreward* other) {
  if (other != this) {
    e_welfareinvestreward_list_.Swap(&other->e_welfareinvestreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareInvestreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareInvestreward_descriptor_;
  metadata.reflection = Sheet_WelfareInvestreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_WelfareYttlgift::kMIdFieldNumber;
const int E_WelfareYttlgift::kMRechargeidFieldNumber;
const int E_WelfareYttlgift::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_WelfareYttlgift::E_WelfareYttlgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_WelfareYttlgift::InitAsDefaultInstance() {
}

E_WelfareYttlgift::E_WelfareYttlgift(const E_WelfareYttlgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_WelfareYttlgift::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_rechargeid_ = 0;
  m_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_WelfareYttlgift::~E_WelfareYttlgift() {
  SharedDtor();
}

void E_WelfareYttlgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_WelfareYttlgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_WelfareYttlgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_WelfareYttlgift_descriptor_;
}

const E_WelfareYttlgift& E_WelfareYttlgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

E_WelfareYttlgift* E_WelfareYttlgift::default_instance_ = NULL;

E_WelfareYttlgift* E_WelfareYttlgift::New() const {
  return new E_WelfareYttlgift;
}

void E_WelfareYttlgift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_rechargeid_ = 0;
    m_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_WelfareYttlgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rechargeid;
        break;
      }

      // optional int32 m_rechargeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargeid_)));
          set_has_m_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_WelfareYttlgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_rechargeid = 2;
  if (has_m_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rechargeid(), output);
  }

  // optional int32 m_reward = 3;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_WelfareYttlgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_rechargeid = 2;
  if (has_m_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rechargeid(), target);
  }

  // optional int32 m_reward = 3;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_WelfareYttlgift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_rechargeid = 2;
    if (has_m_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargeid());
    }

    // optional int32 m_reward = 3;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_WelfareYttlgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_WelfareYttlgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_WelfareYttlgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_WelfareYttlgift::MergeFrom(const E_WelfareYttlgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rechargeid()) {
      set_m_rechargeid(from.m_rechargeid());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_WelfareYttlgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_WelfareYttlgift::CopyFrom(const E_WelfareYttlgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_WelfareYttlgift::IsInitialized() const {

  return true;
}

void E_WelfareYttlgift::Swap(E_WelfareYttlgift* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_rechargeid_, other->m_rechargeid_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_WelfareYttlgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_WelfareYttlgift_descriptor_;
  metadata.reflection = E_WelfareYttlgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_WelfareYttlgift::kEWelfareYttlgiftListFieldNumber;
#endif  // !_MSC_VER

Sheet_WelfareYttlgift::Sheet_WelfareYttlgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_WelfareYttlgift::InitAsDefaultInstance() {
}

Sheet_WelfareYttlgift::Sheet_WelfareYttlgift(const Sheet_WelfareYttlgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_WelfareYttlgift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_WelfareYttlgift::~Sheet_WelfareYttlgift() {
  SharedDtor();
}

void Sheet_WelfareYttlgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_WelfareYttlgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_WelfareYttlgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_WelfareYttlgift_descriptor_;
}

const Sheet_WelfareYttlgift& Sheet_WelfareYttlgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fWelfare_2eproto();
  return *default_instance_;
}

Sheet_WelfareYttlgift* Sheet_WelfareYttlgift::default_instance_ = NULL;

Sheet_WelfareYttlgift* Sheet_WelfareYttlgift::New() const {
  return new Sheet_WelfareYttlgift;
}

void Sheet_WelfareYttlgift::Clear() {
  e_welfareyttlgift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_WelfareYttlgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_WelfareYttlgift E_WelfareYttlgift_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_WelfareYttlgift_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_welfareyttlgift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_WelfareYttlgift_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_WelfareYttlgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_WelfareYttlgift E_WelfareYttlgift_List = 1;
  for (int i = 0; i < this->e_welfareyttlgift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_welfareyttlgift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_WelfareYttlgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_WelfareYttlgift E_WelfareYttlgift_List = 1;
  for (int i = 0; i < this->e_welfareyttlgift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_welfareyttlgift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_WelfareYttlgift::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_WelfareYttlgift E_WelfareYttlgift_List = 1;
  total_size += 1 * this->e_welfareyttlgift_list_size();
  for (int i = 0; i < this->e_welfareyttlgift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_welfareyttlgift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_WelfareYttlgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_WelfareYttlgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_WelfareYttlgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_WelfareYttlgift::MergeFrom(const Sheet_WelfareYttlgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_welfareyttlgift_list_.MergeFrom(from.e_welfareyttlgift_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_WelfareYttlgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_WelfareYttlgift::CopyFrom(const Sheet_WelfareYttlgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_WelfareYttlgift::IsInitialized() const {

  return true;
}

void Sheet_WelfareYttlgift::Swap(Sheet_WelfareYttlgift* other) {
  if (other != this) {
    e_welfareyttlgift_list_.Swap(&other->e_welfareyttlgift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_WelfareYttlgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_WelfareYttlgift_descriptor_;
  metadata.reflection = Sheet_WelfareYttlgift_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
