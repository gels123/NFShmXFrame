// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* mallmall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mallmall_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_mallmall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_mallmall_reflection_ = NULL;
const ::google::protobuf::Descriptor* mallmalltype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mallmalltype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_mallmalltype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_mallmalltype_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mall_2eproto() {
  protobuf_AddDesc_mall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mall.proto");
  GOOGLE_CHECK(file != NULL);
  mallmall_descriptor_ = file->message_type(0);
  static const int mallmall_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, malltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, buyamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, viplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, isclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, cantbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, ismarkbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, rolelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, functionunlock_),
  };
  mallmall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mallmall_descriptor_,
      mallmall::default_instance_,
      mallmall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mallmall));
  Sheet_mallmall_descriptor_ = file->message_type(1);
  static const int Sheet_mallmall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mallmall, mallmall_list_),
  };
  Sheet_mallmall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_mallmall_descriptor_,
      Sheet_mallmall::default_instance_,
      Sheet_mallmall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mallmall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mallmall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_mallmall));
  mallmalltype_descriptor_ = file->message_type(2);
  static const int mallmalltype_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, tab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, logictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, functionunlock_),
  };
  mallmalltype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mallmalltype_descriptor_,
      mallmalltype::default_instance_,
      mallmalltype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mallmalltype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mallmalltype));
  Sheet_mallmalltype_descriptor_ = file->message_type(3);
  static const int Sheet_mallmalltype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mallmalltype, mallmalltype_list_),
  };
  Sheet_mallmalltype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_mallmalltype_descriptor_,
      Sheet_mallmalltype::default_instance_,
      Sheet_mallmalltype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mallmalltype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mallmalltype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_mallmalltype));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mallmall_descriptor_, &mallmall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_mallmall_descriptor_, &Sheet_mallmall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mallmalltype_descriptor_, &mallmalltype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_mallmalltype_descriptor_, &Sheet_mallmalltype::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mall_2eproto() {
  delete mallmall::default_instance_;
  delete mallmall_reflection_;
  delete Sheet_mallmall::default_instance_;
  delete Sheet_mallmall_reflection_;
  delete mallmalltype::default_instance_;
  delete mallmalltype_reflection_;
  delete Sheet_mallmalltype::default_instance_;
  delete Sheet_mallmalltype_reflection_;
}

void protobuf_AddDesc_mall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmall.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\204\005\n\010mallmall\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\345\225\206\345"
    "\223\201ID\022\034\n\006itemID\030\002 \001(\003B\014\302\377\024\010\347\211\251\345\223\201ID\022\027\n\003nu"
    "m\030\003 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\"\n\010mallType\030\004 \001(\003B\020\302"
    "\377\024\014\345\225\206\345\237\216\345\210\206\347\261\273\022\036\n\007subType\030\005 \001(\005B\r\302\377\024\t\345\255"
    "\220\347\261\273\345\236\213\022\037\n\010priority\030\006 \001(\005B\r\302\377\024\t\344\274\230\345\205\210\347\272\247"
    "\022#\n\tmoneyType\030\007 \001(\005B\020\302\377\024\014\350\264\247\345\270\201\347\261\273\345\236\213\022\031\n"
    "\005price\030\010 \001(\005B\n\302\377\024\006\344\273\267\346\240\274\022\034\n\010discount\030\t \001"
    "(\005B\n\302\377\024\006\346\212\230\346\211\243\022%\n\005daily\030\n \001(\005B\026\302\377\024\022\346\227\245\345\217"
    "\257\350\264\255\344\271\260\346\225\260\351\207\217\022*\n\tbuyAmount\030\013 \001(\tB\027\302\377\024\017\345\217"
    "\257\350\264\255\344\271\260\346\225\260\351\207\217\220\301\024<\022)\n\010vipLimit\030\014 \001(\tB\027\302\377\024"
    "\017VIP\347\255\211\347\272\247\351\231\220\345\210\266\220\301\024<\022!\n\007isClose\030\r \001(\005B\020\302"
    "\377\024\014\346\230\257\345\220\246\344\270\213\346\236\266\0223\n\007cantBuy\030\016 \001(\005B\"\302\377\024\036\344\270"
    "\213\346\236\266\346\203\205\345\206\265\344\270\213\346\230\257\345\220\246\350\203\275\350\264\255\344\271\260\0220\n\nisMarkBi"
    "nd\030\017 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\346\240\207\350\256\260\344\270\272\345\267\262\347\273\221\345\256\232\022,"
    "\n\troleLimit\030\020 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\344\270\272\350\247\222\350\211\262\351\231"
    "\220\350\264\255\022.\n\016functionUnlock\030\021 \001(\005B\026\302\377\024\022\345\205\263\350\201\224"
    "\345\212\237\350\203\275\345\274\200\346\224\276\"B\n\016Sheet_mallmall\0220\n\rmallma"
    "ll_List\030\001 \003(\0132\022.proto_ff.mallmallB\005\210\301\024\310\001"
    "\"\371\001\n\014mallmalltype\022\025\n\002id\030\001 \001(\003B\t\302\377\024\005\347\273\204ID"
    "\022 \n\005title\030\002 \001(\tB\021\302\377\024\t\345\225\206\345\272\227\345\220\215\220\301\024<\022\036\n\003ta"
    "b\030\003 \001(\tB\021\302\377\024\t\351\241\265\347\255\276\345\220\215\220\301\024<\022 \n\tgroupType\030"
    "\004 \001(\005B\r\302\377\024\t\347\273\204\347\261\273\345\236\213\022\037\n\010priority\030\005 \001(\005B\r"
    "\302\377\024\t\344\274\230\345\205\210\347\272\247\022#\n\tlogicType\030\006 \001(\005B\020\302\377\024\014\351\200"
    "\273\350\276\221\347\261\273\345\236\213\022(\n\016functionunlock\030\007 \001(\005B\020\302\377\024\014"
    "\345\274\200\345\220\257\346\235\241\344\273\266\"M\n\022Sheet_mallmalltype\0227\n\021ma"
    "llmalltype_List\030\001 \003(\0132\026.proto_ff.mallmal"
    "ltypeB\004\210\301\024\024", 1091);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mall.proto", &protobuf_RegisterTypes);
  mallmall::default_instance_ = new mallmall();
  Sheet_mallmall::default_instance_ = new Sheet_mallmall();
  mallmalltype::default_instance_ = new mallmalltype();
  Sheet_mallmalltype::default_instance_ = new Sheet_mallmalltype();
  mallmall::default_instance_->InitAsDefaultInstance();
  Sheet_mallmall::default_instance_->InitAsDefaultInstance();
  mallmalltype::default_instance_->InitAsDefaultInstance();
  Sheet_mallmalltype::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mall_2eproto {
  StaticDescriptorInitializer_mall_2eproto() {
    protobuf_AddDesc_mall_2eproto();
  }
} static_descriptor_initializer_mall_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mallmall::kIdFieldNumber;
const int mallmall::kItemIDFieldNumber;
const int mallmall::kNumFieldNumber;
const int mallmall::kMallTypeFieldNumber;
const int mallmall::kSubTypeFieldNumber;
const int mallmall::kPriorityFieldNumber;
const int mallmall::kMoneyTypeFieldNumber;
const int mallmall::kPriceFieldNumber;
const int mallmall::kDiscountFieldNumber;
const int mallmall::kDailyFieldNumber;
const int mallmall::kBuyAmountFieldNumber;
const int mallmall::kVipLimitFieldNumber;
const int mallmall::kIsCloseFieldNumber;
const int mallmall::kCantBuyFieldNumber;
const int mallmall::kIsMarkBindFieldNumber;
const int mallmall::kRoleLimitFieldNumber;
const int mallmall::kFunctionUnlockFieldNumber;
#endif  // !_MSC_VER

mallmall::mallmall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mallmall::InitAsDefaultInstance() {
}

mallmall::mallmall(const mallmall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mallmall::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  itemid_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  malltype_ = GOOGLE_LONGLONG(0);
  subtype_ = 0;
  priority_ = 0;
  moneytype_ = 0;
  price_ = 0;
  discount_ = 0;
  daily_ = 0;
  buyamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isclose_ = 0;
  cantbuy_ = 0;
  ismarkbind_ = 0;
  rolelimit_ = 0;
  functionunlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mallmall::~mallmall() {
  SharedDtor();
}

void mallmall::SharedDtor() {
  if (buyamount_ != &::google::protobuf::internal::kEmptyString) {
    delete buyamount_;
  }
  if (viplimit_ != &::google::protobuf::internal::kEmptyString) {
    delete viplimit_;
  }
  if (this != default_instance_) {
  }
}

void mallmall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mallmall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mallmall_descriptor_;
}

const mallmall& mallmall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mall_2eproto();
  return *default_instance_;
}

mallmall* mallmall::default_instance_ = NULL;

mallmall* mallmall::New() const {
  return new mallmall;
}

void mallmall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    itemid_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    malltype_ = GOOGLE_LONGLONG(0);
    subtype_ = 0;
    priority_ = 0;
    moneytype_ = 0;
    price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    discount_ = 0;
    daily_ = 0;
    if (has_buyamount()) {
      if (buyamount_ != &::google::protobuf::internal::kEmptyString) {
        buyamount_->clear();
      }
    }
    if (has_viplimit()) {
      if (viplimit_ != &::google::protobuf::internal::kEmptyString) {
        viplimit_->clear();
      }
    }
    isclose_ = 0;
    cantbuy_ = 0;
    ismarkbind_ = 0;
    rolelimit_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    functionunlock_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mallmall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // optional int64 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mallType;
        break;
      }

      // optional int64 mallType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mallType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &malltype_)));
          set_has_malltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_subType;
        break;
      }

      // optional int32 subType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional int32 priority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_price;
        break;
      }

      // optional int32 price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_discount;
        break;
      }

      // optional int32 discount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_daily;
        break;
      }

      // optional int32 daily = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_)));
          set_has_daily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_buyAmount;
        break;
      }

      // optional string buyAmount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyAmount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyamount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buyamount().data(), this->buyamount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_vipLimit;
        break;
      }

      // optional string vipLimit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipLimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_viplimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->viplimit().data(), this->viplimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isClose;
        break;
      }

      // optional int32 isClose = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isclose_)));
          set_has_isclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cantBuy;
        break;
      }

      // optional int32 cantBuy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cantBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cantbuy_)));
          set_has_cantbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isMarkBind;
        break;
      }

      // optional int32 isMarkBind = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMarkBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismarkbind_)));
          set_has_ismarkbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_roleLimit;
        break;
      }

      // optional int32 roleLimit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelimit_)));
          set_has_rolelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_functionUnlock;
        break;
      }

      // optional int32 functionUnlock = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionunlock_)));
          set_has_functionunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mallmall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int64 mallType = 4;
  if (has_malltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->malltype(), output);
  }

  // optional int32 subType = 5;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->subtype(), output);
  }

  // optional int32 priority = 6;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority(), output);
  }

  // optional int32 moneyType = 7;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->moneytype(), output);
  }

  // optional int32 price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->price(), output);
  }

  // optional int32 discount = 9;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->discount(), output);
  }

  // optional int32 daily = 10;
  if (has_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->daily(), output);
  }

  // optional string buyAmount = 11;
  if (has_buyamount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buyamount().data(), this->buyamount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->buyamount(), output);
  }

  // optional string vipLimit = 12;
  if (has_viplimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->viplimit().data(), this->viplimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->viplimit(), output);
  }

  // optional int32 isClose = 13;
  if (has_isclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->isclose(), output);
  }

  // optional int32 cantBuy = 14;
  if (has_cantbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cantbuy(), output);
  }

  // optional int32 isMarkBind = 15;
  if (has_ismarkbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ismarkbind(), output);
  }

  // optional int32 roleLimit = 16;
  if (has_rolelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->rolelimit(), output);
  }

  // optional int32 functionUnlock = 17;
  if (has_functionunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->functionunlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mallmall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int64 mallType = 4;
  if (has_malltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->malltype(), target);
  }

  // optional int32 subType = 5;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->subtype(), target);
  }

  // optional int32 priority = 6;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority(), target);
  }

  // optional int32 moneyType = 7;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->moneytype(), target);
  }

  // optional int32 price = 8;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->price(), target);
  }

  // optional int32 discount = 9;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->discount(), target);
  }

  // optional int32 daily = 10;
  if (has_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->daily(), target);
  }

  // optional string buyAmount = 11;
  if (has_buyamount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buyamount().data(), this->buyamount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->buyamount(), target);
  }

  // optional string vipLimit = 12;
  if (has_viplimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->viplimit().data(), this->viplimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->viplimit(), target);
  }

  // optional int32 isClose = 13;
  if (has_isclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->isclose(), target);
  }

  // optional int32 cantBuy = 14;
  if (has_cantbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cantbuy(), target);
  }

  // optional int32 isMarkBind = 15;
  if (has_ismarkbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ismarkbind(), target);
  }

  // optional int32 roleLimit = 16;
  if (has_rolelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->rolelimit(), target);
  }

  // optional int32 functionUnlock = 17;
  if (has_functionunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->functionunlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mallmall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 mallType = 4;
    if (has_malltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->malltype());
    }

    // optional int32 subType = 5;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional int32 priority = 6;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional int32 moneyType = 7;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

    // optional int32 price = 8;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 discount = 9;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount());
    }

    // optional int32 daily = 10;
    if (has_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily());
    }

    // optional string buyAmount = 11;
    if (has_buyamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyamount());
    }

    // optional string vipLimit = 12;
    if (has_viplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->viplimit());
    }

    // optional int32 isClose = 13;
    if (has_isclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isclose());
    }

    // optional int32 cantBuy = 14;
    if (has_cantbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cantbuy());
    }

    // optional int32 isMarkBind = 15;
    if (has_ismarkbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismarkbind());
    }

    // optional int32 roleLimit = 16;
    if (has_rolelimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelimit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 functionUnlock = 17;
    if (has_functionunlock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionunlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mallmall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mallmall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mallmall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mallmall::MergeFrom(const mallmall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_malltype()) {
      set_malltype(from.malltype());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_daily()) {
      set_daily(from.daily());
    }
    if (from.has_buyamount()) {
      set_buyamount(from.buyamount());
    }
    if (from.has_viplimit()) {
      set_viplimit(from.viplimit());
    }
    if (from.has_isclose()) {
      set_isclose(from.isclose());
    }
    if (from.has_cantbuy()) {
      set_cantbuy(from.cantbuy());
    }
    if (from.has_ismarkbind()) {
      set_ismarkbind(from.ismarkbind());
    }
    if (from.has_rolelimit()) {
      set_rolelimit(from.rolelimit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_functionunlock()) {
      set_functionunlock(from.functionunlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mallmall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mallmall::CopyFrom(const mallmall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mallmall::IsInitialized() const {

  return true;
}

void mallmall::Swap(mallmall* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(malltype_, other->malltype_);
    std::swap(subtype_, other->subtype_);
    std::swap(priority_, other->priority_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(price_, other->price_);
    std::swap(discount_, other->discount_);
    std::swap(daily_, other->daily_);
    std::swap(buyamount_, other->buyamount_);
    std::swap(viplimit_, other->viplimit_);
    std::swap(isclose_, other->isclose_);
    std::swap(cantbuy_, other->cantbuy_);
    std::swap(ismarkbind_, other->ismarkbind_);
    std::swap(rolelimit_, other->rolelimit_);
    std::swap(functionunlock_, other->functionunlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mallmall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mallmall_descriptor_;
  metadata.reflection = mallmall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_mallmall::kMallmallListFieldNumber;
#endif  // !_MSC_VER

Sheet_mallmall::Sheet_mallmall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_mallmall::InitAsDefaultInstance() {
}

Sheet_mallmall::Sheet_mallmall(const Sheet_mallmall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_mallmall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_mallmall::~Sheet_mallmall() {
  SharedDtor();
}

void Sheet_mallmall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_mallmall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_mallmall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_mallmall_descriptor_;
}

const Sheet_mallmall& Sheet_mallmall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mall_2eproto();
  return *default_instance_;
}

Sheet_mallmall* Sheet_mallmall::default_instance_ = NULL;

Sheet_mallmall* Sheet_mallmall::New() const {
  return new Sheet_mallmall;
}

void Sheet_mallmall::Clear() {
  mallmall_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_mallmall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.mallmall mallmall_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mallmall_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mallmall_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mallmall_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_mallmall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.mallmall mallmall_List = 1;
  for (int i = 0; i < this->mallmall_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mallmall_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_mallmall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.mallmall mallmall_List = 1;
  for (int i = 0; i < this->mallmall_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mallmall_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_mallmall::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.mallmall mallmall_List = 1;
  total_size += 1 * this->mallmall_list_size();
  for (int i = 0; i < this->mallmall_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mallmall_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_mallmall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_mallmall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_mallmall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_mallmall::MergeFrom(const Sheet_mallmall& from) {
  GOOGLE_CHECK_NE(&from, this);
  mallmall_list_.MergeFrom(from.mallmall_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_mallmall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_mallmall::CopyFrom(const Sheet_mallmall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_mallmall::IsInitialized() const {

  return true;
}

void Sheet_mallmall::Swap(Sheet_mallmall* other) {
  if (other != this) {
    mallmall_list_.Swap(&other->mallmall_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_mallmall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_mallmall_descriptor_;
  metadata.reflection = Sheet_mallmall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mallmalltype::kIdFieldNumber;
const int mallmalltype::kTitleFieldNumber;
const int mallmalltype::kTabFieldNumber;
const int mallmalltype::kGroupTypeFieldNumber;
const int mallmalltype::kPriorityFieldNumber;
const int mallmalltype::kLogicTypeFieldNumber;
const int mallmalltype::kFunctionunlockFieldNumber;
#endif  // !_MSC_VER

mallmalltype::mallmalltype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mallmalltype::InitAsDefaultInstance() {
}

mallmalltype::mallmalltype(const mallmalltype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mallmalltype::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grouptype_ = 0;
  priority_ = 0;
  logictype_ = 0;
  functionunlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mallmalltype::~mallmalltype() {
  SharedDtor();
}

void mallmalltype::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (tab_ != &::google::protobuf::internal::kEmptyString) {
    delete tab_;
  }
  if (this != default_instance_) {
  }
}

void mallmalltype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mallmalltype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mallmalltype_descriptor_;
}

const mallmalltype& mallmalltype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mall_2eproto();
  return *default_instance_;
}

mallmalltype* mallmalltype::default_instance_ = NULL;

mallmalltype* mallmalltype::New() const {
  return new mallmalltype;
}

void mallmalltype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_tab()) {
      if (tab_ != &::google::protobuf::internal::kEmptyString) {
        tab_->clear();
      }
    }
    grouptype_ = 0;
    priority_ = 0;
    logictype_ = 0;
    functionunlock_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mallmalltype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tab;
        break;
      }

      // optional string tab = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tab().data(), this->tab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupType;
        break;
      }

      // optional int32 groupType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptype_)));
          set_has_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_priority;
        break;
      }

      // optional int32 priority = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logicType;
        break;
      }

      // optional int32 logicType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logictype_)));
          set_has_logictype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_functionunlock;
        break;
      }

      // optional int32 functionunlock = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionunlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionunlock_)));
          set_has_functionunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mallmalltype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string tab = 3;
  if (has_tab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tab().data(), this->tab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tab(), output);
  }

  // optional int32 groupType = 4;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grouptype(), output);
  }

  // optional int32 priority = 5;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priority(), output);
  }

  // optional int32 logicType = 6;
  if (has_logictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->logictype(), output);
  }

  // optional int32 functionunlock = 7;
  if (has_functionunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->functionunlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mallmalltype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string tab = 3;
  if (has_tab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tab().data(), this->tab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tab(), target);
  }

  // optional int32 groupType = 4;
  if (has_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grouptype(), target);
  }

  // optional int32 priority = 5;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->priority(), target);
  }

  // optional int32 logicType = 6;
  if (has_logictype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->logictype(), target);
  }

  // optional int32 functionunlock = 7;
  if (has_functionunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->functionunlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mallmalltype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string tab = 3;
    if (has_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tab());
    }

    // optional int32 groupType = 4;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouptype());
    }

    // optional int32 priority = 5;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional int32 logicType = 6;
    if (has_logictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logictype());
    }

    // optional int32 functionunlock = 7;
    if (has_functionunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionunlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mallmalltype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mallmalltype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mallmalltype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mallmalltype::MergeFrom(const mallmalltype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_tab()) {
      set_tab(from.tab());
    }
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_logictype()) {
      set_logictype(from.logictype());
    }
    if (from.has_functionunlock()) {
      set_functionunlock(from.functionunlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mallmalltype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mallmalltype::CopyFrom(const mallmalltype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mallmalltype::IsInitialized() const {

  return true;
}

void mallmalltype::Swap(mallmalltype* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(tab_, other->tab_);
    std::swap(grouptype_, other->grouptype_);
    std::swap(priority_, other->priority_);
    std::swap(logictype_, other->logictype_);
    std::swap(functionunlock_, other->functionunlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mallmalltype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mallmalltype_descriptor_;
  metadata.reflection = mallmalltype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_mallmalltype::kMallmalltypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_mallmalltype::Sheet_mallmalltype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_mallmalltype::InitAsDefaultInstance() {
}

Sheet_mallmalltype::Sheet_mallmalltype(const Sheet_mallmalltype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_mallmalltype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_mallmalltype::~Sheet_mallmalltype() {
  SharedDtor();
}

void Sheet_mallmalltype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_mallmalltype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_mallmalltype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_mallmalltype_descriptor_;
}

const Sheet_mallmalltype& Sheet_mallmalltype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mall_2eproto();
  return *default_instance_;
}

Sheet_mallmalltype* Sheet_mallmalltype::default_instance_ = NULL;

Sheet_mallmalltype* Sheet_mallmalltype::New() const {
  return new Sheet_mallmalltype;
}

void Sheet_mallmalltype::Clear() {
  mallmalltype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_mallmalltype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.mallmalltype mallmalltype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mallmalltype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mallmalltype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mallmalltype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_mallmalltype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.mallmalltype mallmalltype_List = 1;
  for (int i = 0; i < this->mallmalltype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mallmalltype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_mallmalltype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.mallmalltype mallmalltype_List = 1;
  for (int i = 0; i < this->mallmalltype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mallmalltype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_mallmalltype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.mallmalltype mallmalltype_List = 1;
  total_size += 1 * this->mallmalltype_list_size();
  for (int i = 0; i < this->mallmalltype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mallmalltype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_mallmalltype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_mallmalltype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_mallmalltype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_mallmalltype::MergeFrom(const Sheet_mallmalltype& from) {
  GOOGLE_CHECK_NE(&from, this);
  mallmalltype_list_.MergeFrom(from.mallmalltype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_mallmalltype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_mallmalltype::CopyFrom(const Sheet_mallmalltype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_mallmalltype::IsInitialized() const {

  return true;
}

void Sheet_mallmalltype::Swap(Sheet_mallmalltype* other) {
  if (other != this) {
    mallmalltype_list_.Swap(&other->mallmalltype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_mallmalltype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_mallmalltype_descriptor_;
  metadata.reflection = Sheet_mallmalltype_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
