// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perActivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* perActivityperActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  perActivityperActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_perActivityperActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_perActivityperActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* perActivityweek_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  perActivityweek_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_perActivityweek_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_perActivityweek_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perActivity_2eproto() {
  protobuf_AddDesc_perActivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perActivity.proto");
  GOOGLE_CHECK(file != NULL);
  perActivityperActivity_descriptor_ = file->message_type(0);
  static const int perActivityperActivity_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, activename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, opeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, closeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, serverdelaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, openingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, advancetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, intervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, iscross_),
  };
  perActivityperActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      perActivityperActivity_descriptor_,
      perActivityperActivity::default_instance_,
      perActivityperActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityperActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(perActivityperActivity));
  Sheet_perActivityperActivity_descriptor_ = file->message_type(1);
  static const int Sheet_perActivityperActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_perActivityperActivity, peractivityperactivity_list_),
  };
  Sheet_perActivityperActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_perActivityperActivity_descriptor_,
      Sheet_perActivityperActivity::default_instance_,
      Sheet_perActivityperActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_perActivityperActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_perActivityperActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_perActivityperActivity));
  perActivityweek_descriptor_ = file->message_type(2);
  static const int perActivityweek_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityweek, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityweek, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityweek, week_),
  };
  perActivityweek_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      perActivityweek_descriptor_,
      perActivityweek::default_instance_,
      perActivityweek_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityweek, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(perActivityweek, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(perActivityweek));
  Sheet_perActivityweek_descriptor_ = file->message_type(3);
  static const int Sheet_perActivityweek_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_perActivityweek, peractivityweek_list_),
  };
  Sheet_perActivityweek_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_perActivityweek_descriptor_,
      Sheet_perActivityweek::default_instance_,
      Sheet_perActivityweek_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_perActivityweek, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_perActivityweek, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_perActivityweek));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perActivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    perActivityperActivity_descriptor_, &perActivityperActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_perActivityperActivity_descriptor_, &Sheet_perActivityperActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    perActivityweek_descriptor_, &perActivityweek::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_perActivityweek_descriptor_, &Sheet_perActivityweek::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perActivity_2eproto() {
  delete perActivityperActivity::default_instance_;
  delete perActivityperActivity_reflection_;
  delete Sheet_perActivityperActivity::default_instance_;
  delete Sheet_perActivityperActivity_reflection_;
  delete perActivityweek::default_instance_;
  delete perActivityweek_reflection_;
  delete Sheet_perActivityweek::default_instance_;
  delete Sheet_perActivityweek_reflection_;
}

void protobuf_AddDesc_perActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021perActivity.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"\207\004\n\026perActivityperActivity\022"
    "\036\n\010activeId\030\001 \001(\003B\014\302\377\024\010\346\264\273\345\212\250ID\022(\n\nactiv"
    "eName\030\002 \001(\tB\024\302\377\024\014\346\264\273\345\212\250\345\220\215\347\247\260\220\301\024<\022\034\n\006typ"
    "eId\030\003 \001(\005B\014\302\377\024\010\347\261\273\345\236\213ID\022&\n\nfunctionID\030\004 "
    "\001(\005B\022\302\377\024\016\345\212\237\350\203\275\345\274\200\346\224\276ID\022$\n\006opeDay\030\005 \001(\tB"
    "\024\302\377\024\014\345\274\200\346\224\276\346\227\245\346\234\237\220\301\024<\022&\n\010closeDay\030\006 \001(\tB"
    "\024\302\377\024\014\345\205\263\351\227\255\346\227\245\346\234\237\220\301\024<\022;\n\017serverdelayTime"
    "\030\007 \001(\005B\"\302\377\024\036\345\274\200\346\234\215\345\220\216\345\244\232\345\260\221\345\244\251\346\264\273\345\212\250\345\274\200\345"
    "\220\257\0223\n\nserverTime\030\010 \001(\005B\037\302\377\024\033\345\274\200\346\234\215\345\220\216\345\244\232"
    "\345\260\221\346\264\273\345\212\250\347\273\223\346\235\237\022%\n\013openingTime\030\t \001(\005B\020\302\377"
    "\024\014\345\274\200\345\220\257\346\227\266\351\225\277\022+\n\013advanceTime\030\n \001(\005B\026\302\377\024"
    "\022\346\217\220\345\211\215\345\271\277\346\222\255\346\227\266\351\227\264\022&\n\014intervalTime\030\013 \001("
    "\005B\020\302\377\024\014\345\271\277\346\222\255\351\227\264\351\232\224\022!\n\007isCross\030\014 \001(\005B\020\302\377"
    "\024\014\346\230\257\345\220\246\350\267\250\346\234\215\"k\n\034Sheet_perActivityperAc"
    "tivity\022K\n\033perActivityperActivity_List\030\001 "
    "\003(\0132 .proto_ff.perActivityperActivityB\004\210"
    "\301\024\024\"f\n\017perActivityweek\022\026\n\002id\030\001 \001(\005B\n\302\377\024\006"
    "\345\272\217\345\217\267\022\034\n\004time\030\002 \001(\tB\016\302\377\024\006\346\227\266\351\227\264\220\301\024<\022\035\n\004"
    "week\030\003 \003(\tB\017\302\377\024\003\345\221\250\210\301\024\007\220\301\024<\"V\n\025Sheet_per"
    "Activityweek\022=\n\024perActivityweek_List\030\001 \003"
    "(\0132\031.proto_ff.perActivityweekB\004\210\301\024\024", 875);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perActivity.proto", &protobuf_RegisterTypes);
  perActivityperActivity::default_instance_ = new perActivityperActivity();
  Sheet_perActivityperActivity::default_instance_ = new Sheet_perActivityperActivity();
  perActivityweek::default_instance_ = new perActivityweek();
  Sheet_perActivityweek::default_instance_ = new Sheet_perActivityweek();
  perActivityperActivity::default_instance_->InitAsDefaultInstance();
  Sheet_perActivityperActivity::default_instance_->InitAsDefaultInstance();
  perActivityweek::default_instance_->InitAsDefaultInstance();
  Sheet_perActivityweek::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perActivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perActivity_2eproto {
  StaticDescriptorInitializer_perActivity_2eproto() {
    protobuf_AddDesc_perActivity_2eproto();
  }
} static_descriptor_initializer_perActivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int perActivityperActivity::kActiveIdFieldNumber;
const int perActivityperActivity::kActiveNameFieldNumber;
const int perActivityperActivity::kTypeIdFieldNumber;
const int perActivityperActivity::kFunctionIDFieldNumber;
const int perActivityperActivity::kOpeDayFieldNumber;
const int perActivityperActivity::kCloseDayFieldNumber;
const int perActivityperActivity::kServerdelayTimeFieldNumber;
const int perActivityperActivity::kServerTimeFieldNumber;
const int perActivityperActivity::kOpeningTimeFieldNumber;
const int perActivityperActivity::kAdvanceTimeFieldNumber;
const int perActivityperActivity::kIntervalTimeFieldNumber;
const int perActivityperActivity::kIsCrossFieldNumber;
#endif  // !_MSC_VER

perActivityperActivity::perActivityperActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void perActivityperActivity::InitAsDefaultInstance() {
}

perActivityperActivity::perActivityperActivity(const perActivityperActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void perActivityperActivity::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = GOOGLE_LONGLONG(0);
  activename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typeid__ = 0;
  functionid_ = 0;
  opeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  closeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverdelaytime_ = 0;
  servertime_ = 0;
  openingtime_ = 0;
  advancetime_ = 0;
  intervaltime_ = 0;
  iscross_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

perActivityperActivity::~perActivityperActivity() {
  SharedDtor();
}

void perActivityperActivity::SharedDtor() {
  if (activename_ != &::google::protobuf::internal::kEmptyString) {
    delete activename_;
  }
  if (opeday_ != &::google::protobuf::internal::kEmptyString) {
    delete opeday_;
  }
  if (closeday_ != &::google::protobuf::internal::kEmptyString) {
    delete closeday_;
  }
  if (this != default_instance_) {
  }
}

void perActivityperActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* perActivityperActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return perActivityperActivity_descriptor_;
}

const perActivityperActivity& perActivityperActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perActivity_2eproto();
  return *default_instance_;
}

perActivityperActivity* perActivityperActivity::default_instance_ = NULL;

perActivityperActivity* perActivityperActivity::New() const {
  return new perActivityperActivity;
}

void perActivityperActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = GOOGLE_LONGLONG(0);
    if (has_activename()) {
      if (activename_ != &::google::protobuf::internal::kEmptyString) {
        activename_->clear();
      }
    }
    typeid__ = 0;
    functionid_ = 0;
    if (has_opeday()) {
      if (opeday_ != &::google::protobuf::internal::kEmptyString) {
        opeday_->clear();
      }
    }
    if (has_closeday()) {
      if (closeday_ != &::google::protobuf::internal::kEmptyString) {
        closeday_->clear();
      }
    }
    serverdelaytime_ = 0;
    servertime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    openingtime_ = 0;
    advancetime_ = 0;
    intervaltime_ = 0;
    iscross_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool perActivityperActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 activeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activeName;
        break;
      }

      // optional string activeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activename().data(), this->activename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_typeId;
        break;
      }

      // optional int32 typeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_functionID;
        break;
      }

      // optional int32 functionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_opeDay;
        break;
      }

      // optional string opeDay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opeDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opeday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opeday().data(), this->opeday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_closeDay;
        break;
      }

      // optional string closeDay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closeDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closeday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->closeday().data(), this->closeday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverdelayTime;
        break;
      }

      // optional int32 serverdelayTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverdelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverdelaytime_)));
          set_has_serverdelaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_serverTime;
        break;
      }

      // optional int32 serverTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_openingTime;
        break;
      }

      // optional int32 openingTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openingtime_)));
          set_has_openingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_advanceTime;
        break;
      }

      // optional int32 advanceTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advancetime_)));
          set_has_advancetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_intervalTime;
        break;
      }

      // optional int32 intervalTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intervaltime_)));
          set_has_intervaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isCross;
        break;
      }

      // optional int32 isCross = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCross:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscross_)));
          set_has_iscross();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void perActivityperActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 activeId = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->activeid(), output);
  }

  // optional string activeName = 2;
  if (has_activename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activename().data(), this->activename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->activename(), output);
  }

  // optional int32 typeId = 3;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeid_(), output);
  }

  // optional int32 functionID = 4;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->functionid(), output);
  }

  // optional string opeDay = 5;
  if (has_opeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opeday().data(), this->opeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->opeday(), output);
  }

  // optional string closeDay = 6;
  if (has_closeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeday().data(), this->closeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->closeday(), output);
  }

  // optional int32 serverdelayTime = 7;
  if (has_serverdelaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->serverdelaytime(), output);
  }

  // optional int32 serverTime = 8;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->servertime(), output);
  }

  // optional int32 openingTime = 9;
  if (has_openingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->openingtime(), output);
  }

  // optional int32 advanceTime = 10;
  if (has_advancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->advancetime(), output);
  }

  // optional int32 intervalTime = 11;
  if (has_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->intervaltime(), output);
  }

  // optional int32 isCross = 12;
  if (has_iscross()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->iscross(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* perActivityperActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 activeId = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->activeid(), target);
  }

  // optional string activeName = 2;
  if (has_activename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activename().data(), this->activename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->activename(), target);
  }

  // optional int32 typeId = 3;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeid_(), target);
  }

  // optional int32 functionID = 4;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->functionid(), target);
  }

  // optional string opeDay = 5;
  if (has_opeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opeday().data(), this->opeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->opeday(), target);
  }

  // optional string closeDay = 6;
  if (has_closeday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeday().data(), this->closeday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->closeday(), target);
  }

  // optional int32 serverdelayTime = 7;
  if (has_serverdelaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->serverdelaytime(), target);
  }

  // optional int32 serverTime = 8;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->servertime(), target);
  }

  // optional int32 openingTime = 9;
  if (has_openingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->openingtime(), target);
  }

  // optional int32 advanceTime = 10;
  if (has_advancetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->advancetime(), target);
  }

  // optional int32 intervalTime = 11;
  if (has_intervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->intervaltime(), target);
  }

  // optional int32 isCross = 12;
  if (has_iscross()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->iscross(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int perActivityperActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 activeId = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activeid());
    }

    // optional string activeName = 2;
    if (has_activename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activename());
    }

    // optional int32 typeId = 3;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 functionID = 4;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionid());
    }

    // optional string opeDay = 5;
    if (has_opeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opeday());
    }

    // optional string closeDay = 6;
    if (has_closeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closeday());
    }

    // optional int32 serverdelayTime = 7;
    if (has_serverdelaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverdelaytime());
    }

    // optional int32 serverTime = 8;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 openingTime = 9;
    if (has_openingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openingtime());
    }

    // optional int32 advanceTime = 10;
    if (has_advancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advancetime());
    }

    // optional int32 intervalTime = 11;
    if (has_intervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intervaltime());
    }

    // optional int32 isCross = 12;
    if (has_iscross()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscross());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void perActivityperActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const perActivityperActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const perActivityperActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void perActivityperActivity::MergeFrom(const perActivityperActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
    if (from.has_activename()) {
      set_activename(from.activename());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
    if (from.has_opeday()) {
      set_opeday(from.opeday());
    }
    if (from.has_closeday()) {
      set_closeday(from.closeday());
    }
    if (from.has_serverdelaytime()) {
      set_serverdelaytime(from.serverdelaytime());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openingtime()) {
      set_openingtime(from.openingtime());
    }
    if (from.has_advancetime()) {
      set_advancetime(from.advancetime());
    }
    if (from.has_intervaltime()) {
      set_intervaltime(from.intervaltime());
    }
    if (from.has_iscross()) {
      set_iscross(from.iscross());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void perActivityperActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void perActivityperActivity::CopyFrom(const perActivityperActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool perActivityperActivity::IsInitialized() const {

  return true;
}

void perActivityperActivity::Swap(perActivityperActivity* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    std::swap(activename_, other->activename_);
    std::swap(typeid__, other->typeid__);
    std::swap(functionid_, other->functionid_);
    std::swap(opeday_, other->opeday_);
    std::swap(closeday_, other->closeday_);
    std::swap(serverdelaytime_, other->serverdelaytime_);
    std::swap(servertime_, other->servertime_);
    std::swap(openingtime_, other->openingtime_);
    std::swap(advancetime_, other->advancetime_);
    std::swap(intervaltime_, other->intervaltime_);
    std::swap(iscross_, other->iscross_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata perActivityperActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = perActivityperActivity_descriptor_;
  metadata.reflection = perActivityperActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_perActivityperActivity::kPerActivityperActivityListFieldNumber;
#endif  // !_MSC_VER

Sheet_perActivityperActivity::Sheet_perActivityperActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_perActivityperActivity::InitAsDefaultInstance() {
}

Sheet_perActivityperActivity::Sheet_perActivityperActivity(const Sheet_perActivityperActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_perActivityperActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_perActivityperActivity::~Sheet_perActivityperActivity() {
  SharedDtor();
}

void Sheet_perActivityperActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_perActivityperActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_perActivityperActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_perActivityperActivity_descriptor_;
}

const Sheet_perActivityperActivity& Sheet_perActivityperActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perActivity_2eproto();
  return *default_instance_;
}

Sheet_perActivityperActivity* Sheet_perActivityperActivity::default_instance_ = NULL;

Sheet_perActivityperActivity* Sheet_perActivityperActivity::New() const {
  return new Sheet_perActivityperActivity;
}

void Sheet_perActivityperActivity::Clear() {
  peractivityperactivity_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_perActivityperActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.perActivityperActivity perActivityperActivity_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_perActivityperActivity_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peractivityperactivity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_perActivityperActivity_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_perActivityperActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.perActivityperActivity perActivityperActivity_List = 1;
  for (int i = 0; i < this->peractivityperactivity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peractivityperactivity_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_perActivityperActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.perActivityperActivity perActivityperActivity_List = 1;
  for (int i = 0; i < this->peractivityperactivity_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peractivityperactivity_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_perActivityperActivity::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.perActivityperActivity perActivityperActivity_List = 1;
  total_size += 1 * this->peractivityperactivity_list_size();
  for (int i = 0; i < this->peractivityperactivity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peractivityperactivity_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_perActivityperActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_perActivityperActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_perActivityperActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_perActivityperActivity::MergeFrom(const Sheet_perActivityperActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  peractivityperactivity_list_.MergeFrom(from.peractivityperactivity_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_perActivityperActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_perActivityperActivity::CopyFrom(const Sheet_perActivityperActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_perActivityperActivity::IsInitialized() const {

  return true;
}

void Sheet_perActivityperActivity::Swap(Sheet_perActivityperActivity* other) {
  if (other != this) {
    peractivityperactivity_list_.Swap(&other->peractivityperactivity_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_perActivityperActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_perActivityperActivity_descriptor_;
  metadata.reflection = Sheet_perActivityperActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int perActivityweek::kIdFieldNumber;
const int perActivityweek::kTimeFieldNumber;
const int perActivityweek::kWeekFieldNumber;
#endif  // !_MSC_VER

perActivityweek::perActivityweek()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void perActivityweek::InitAsDefaultInstance() {
}

perActivityweek::perActivityweek(const perActivityweek& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void perActivityweek::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

perActivityweek::~perActivityweek() {
  SharedDtor();
}

void perActivityweek::SharedDtor() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void perActivityweek::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* perActivityweek::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return perActivityweek_descriptor_;
}

const perActivityweek& perActivityweek::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perActivity_2eproto();
  return *default_instance_;
}

perActivityweek* perActivityweek::default_instance_ = NULL;

perActivityweek* perActivityweek::New() const {
  return new perActivityweek;
}

void perActivityweek::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  week_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool perActivityweek::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional string time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_week;
        break;
      }

      // repeated string week = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_week()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->week(this->week_size() - 1).data(),
            this->week(this->week_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_week;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void perActivityweek::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time(), output);
  }

  // repeated string week = 3;
  for (int i = 0; i < this->week_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->week(i).data(), this->week(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->week(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* perActivityweek::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // repeated string week = 3;
  for (int i = 0; i < this->week_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->week(i).data(), this->week(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->week(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int perActivityweek::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  // repeated string week = 3;
  total_size += 1 * this->week_size();
  for (int i = 0; i < this->week_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->week(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void perActivityweek::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const perActivityweek* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const perActivityweek*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void perActivityweek::MergeFrom(const perActivityweek& from) {
  GOOGLE_CHECK_NE(&from, this);
  week_.MergeFrom(from.week_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void perActivityweek::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void perActivityweek::CopyFrom(const perActivityweek& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool perActivityweek::IsInitialized() const {

  return true;
}

void perActivityweek::Swap(perActivityweek* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    week_.Swap(&other->week_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata perActivityweek::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = perActivityweek_descriptor_;
  metadata.reflection = perActivityweek_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_perActivityweek::kPerActivityweekListFieldNumber;
#endif  // !_MSC_VER

Sheet_perActivityweek::Sheet_perActivityweek()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_perActivityweek::InitAsDefaultInstance() {
}

Sheet_perActivityweek::Sheet_perActivityweek(const Sheet_perActivityweek& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_perActivityweek::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_perActivityweek::~Sheet_perActivityweek() {
  SharedDtor();
}

void Sheet_perActivityweek::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_perActivityweek::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_perActivityweek::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_perActivityweek_descriptor_;
}

const Sheet_perActivityweek& Sheet_perActivityweek::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perActivity_2eproto();
  return *default_instance_;
}

Sheet_perActivityweek* Sheet_perActivityweek::default_instance_ = NULL;

Sheet_perActivityweek* Sheet_perActivityweek::New() const {
  return new Sheet_perActivityweek;
}

void Sheet_perActivityweek::Clear() {
  peractivityweek_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_perActivityweek::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.perActivityweek perActivityweek_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_perActivityweek_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_peractivityweek_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_perActivityweek_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_perActivityweek::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.perActivityweek perActivityweek_List = 1;
  for (int i = 0; i < this->peractivityweek_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peractivityweek_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_perActivityweek::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.perActivityweek perActivityweek_List = 1;
  for (int i = 0; i < this->peractivityweek_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->peractivityweek_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_perActivityweek::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.perActivityweek perActivityweek_List = 1;
  total_size += 1 * this->peractivityweek_list_size();
  for (int i = 0; i < this->peractivityweek_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peractivityweek_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_perActivityweek::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_perActivityweek* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_perActivityweek*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_perActivityweek::MergeFrom(const Sheet_perActivityweek& from) {
  GOOGLE_CHECK_NE(&from, this);
  peractivityweek_list_.MergeFrom(from.peractivityweek_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_perActivityweek::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_perActivityweek::CopyFrom(const Sheet_perActivityweek& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_perActivityweek::IsInitialized() const {

  return true;
}

void Sheet_perActivityweek::Swap(Sheet_perActivityweek* other) {
  if (other != this) {
    peractivityweek_list_.Swap(&other->peractivityweek_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_perActivityweek::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_perActivityweek_descriptor_;
  metadata.reflection = Sheet_perActivityweek_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
