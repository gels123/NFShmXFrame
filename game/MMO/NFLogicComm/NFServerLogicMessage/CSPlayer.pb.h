// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSPlayer.proto

#ifndef PROTOBUF_CSPlayer_2eproto__INCLUDED
#define PROTOBUF_CSPlayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "common_logic.pb.h"
#include "Com.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CSPlayer_2eproto();
void protobuf_AssignDesc_CSPlayer_2eproto();
void protobuf_ShutdownFile_CSPlayer_2eproto();

class PlayerInfoRsp;
class CreatureAttrSyn;
class CreatureAttrBroadRsp;
class CreatureStateBroadRsp;
class NoticeShowInfoRsp;
class ChgNameReq;
class ChgNameRsp;
class PlayerReliveNotify;
class PlayerReliveReq;
class PlayerReliveRsp;

// ===================================================================

class PlayerInfoRsp : public ::google::protobuf::Message {
 public:
  PlayerInfoRsp();
  virtual ~PlayerInfoRsp();

  PlayerInfoRsp(const PlayerInfoRsp& from);

  inline PlayerInfoRsp& operator=(const PlayerInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfoRsp& default_instance();

  void Swap(PlayerInfoRsp* other);

  // implements Message ----------------------------------------------

  PlayerInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfoRsp& from);
  void MergeFrom(const PlayerInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint64 opentime = 4;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpentimeFieldNumber = 4;
  inline ::google::protobuf::uint64 opentime() const;
  inline void set_opentime(::google::protobuf::uint64 value);

  // optional uint64 createtime = 5;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 5;
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // optional .proto_ff.RoleFacadeProto facade = 6;
  inline bool has_facade() const;
  inline void clear_facade();
  static const int kFacadeFieldNumber = 6;
  inline const ::proto_ff::RoleFacadeProto& facade() const;
  inline ::proto_ff::RoleFacadeProto* mutable_facade();
  inline ::proto_ff::RoleFacadeProto* release_facade();
  inline void set_allocated_facade(::proto_ff::RoleFacadeProto* facade);

  // repeated .proto_ff.Attr64 attr = 7;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 7;
  inline const ::proto_ff::Attr64& attr(int index) const;
  inline ::proto_ff::Attr64* mutable_attr(int index);
  inline ::proto_ff::Attr64* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
      mutable_attr();

  // optional uint64 mapid = 8;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 8;
  inline ::google::protobuf::uint64 mapid() const;
  inline void set_mapid(::google::protobuf::uint64 value);

  // optional .proto_ff.Vector3PB pos = 9;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 9;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
  inline bool has_unlockinfo() const;
  inline void clear_unlockinfo();
  static const int kUnlockInfoFieldNumber = 10;
  inline const ::proto_ff::FunctionUnlockInfo& unlockinfo() const;
  inline ::proto_ff::FunctionUnlockInfo* mutable_unlockinfo();
  inline ::proto_ff::FunctionUnlockInfo* release_unlockinfo();
  inline void set_allocated_unlockinfo(::proto_ff::FunctionUnlockInfo* unlockinfo);

  // optional int32 state = 11;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 11;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional .proto_ff.SkillGroupListProto skill_group = 12;
  inline bool has_skill_group() const;
  inline void clear_skill_group();
  static const int kSkillGroupFieldNumber = 12;
  inline const ::proto_ff::SkillGroupListProto& skill_group() const;
  inline ::proto_ff::SkillGroupListProto* mutable_skill_group();
  inline ::proto_ff::SkillGroupListProto* release_skill_group();
  inline void set_allocated_skill_group(::proto_ff::SkillGroupListProto* skill_group);

  // optional uint32 cur_skill_group = 13;
  inline bool has_cur_skill_group() const;
  inline void clear_cur_skill_group();
  static const int kCurSkillGroupFieldNumber = 13;
  inline ::google::protobuf::uint32 cur_skill_group() const;
  inline void set_cur_skill_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PlayerInfoRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_opentime();
  inline void clear_has_opentime();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_facade();
  inline void clear_has_facade();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_unlockinfo();
  inline void clear_has_unlockinfo();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_skill_group();
  inline void clear_has_skill_group();
  inline void set_has_cur_skill_group();
  inline void clear_has_cur_skill_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint64 opentime_;
  ::google::protobuf::uint64 createtime_;
  ::proto_ff::RoleFacadeProto* facade_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 > attr_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::uint64 mapid_;
  ::proto_ff::Vector3PB* pos_;
  ::proto_ff::FunctionUnlockInfo* unlockinfo_;
  ::proto_ff::SkillGroupListProto* skill_group_;
  ::google::protobuf::uint32 cur_skill_group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class CreatureAttrSyn : public ::google::protobuf::Message {
 public:
  CreatureAttrSyn();
  virtual ~CreatureAttrSyn();

  CreatureAttrSyn(const CreatureAttrSyn& from);

  inline CreatureAttrSyn& operator=(const CreatureAttrSyn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureAttrSyn& default_instance();

  void Swap(CreatureAttrSyn* other);

  // implements Message ----------------------------------------------

  CreatureAttrSyn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureAttrSyn& from);
  void MergeFrom(const CreatureAttrSyn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // repeated .proto_ff.Attr64 attr = 2;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  inline const ::proto_ff::Attr64& attr(int index) const;
  inline ::proto_ff::Attr64* mutable_attr(int index);
  inline ::proto_ff::Attr64* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
      mutable_attr();

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureAttrSyn)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 > attr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static CreatureAttrSyn* default_instance_;
};
// -------------------------------------------------------------------

class CreatureAttrBroadRsp : public ::google::protobuf::Message {
 public:
  CreatureAttrBroadRsp();
  virtual ~CreatureAttrBroadRsp();

  CreatureAttrBroadRsp(const CreatureAttrBroadRsp& from);

  inline CreatureAttrBroadRsp& operator=(const CreatureAttrBroadRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureAttrBroadRsp& default_instance();

  void Swap(CreatureAttrBroadRsp* other);

  // implements Message ----------------------------------------------

  CreatureAttrBroadRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureAttrBroadRsp& from);
  void MergeFrom(const CreatureAttrBroadRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // repeated .proto_ff.Attr64 attr = 2;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  inline const ::proto_ff::Attr64& attr(int index) const;
  inline ::proto_ff::Attr64* mutable_attr(int index);
  inline ::proto_ff::Attr64* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
      mutable_attr();

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureAttrBroadRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 > attr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static CreatureAttrBroadRsp* default_instance_;
};
// -------------------------------------------------------------------

class CreatureStateBroadRsp : public ::google::protobuf::Message {
 public:
  CreatureStateBroadRsp();
  virtual ~CreatureStateBroadRsp();

  CreatureStateBroadRsp(const CreatureStateBroadRsp& from);

  inline CreatureStateBroadRsp& operator=(const CreatureStateBroadRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatureStateBroadRsp& default_instance();

  void Swap(CreatureStateBroadRsp* other);

  // implements Message ----------------------------------------------

  CreatureStateBroadRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreatureStateBroadRsp& from);
  void MergeFrom(const CreatureStateBroadRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 curstate = 2;
  inline bool has_curstate() const;
  inline void clear_curstate();
  static const int kCurstateFieldNumber = 2;
  inline ::google::protobuf::uint32 curstate() const;
  inline void set_curstate(::google::protobuf::uint32 value);

  // optional uint32 beforestate = 3;
  inline bool has_beforestate() const;
  inline void clear_beforestate();
  static const int kBeforestateFieldNumber = 3;
  inline ::google::protobuf::uint32 beforestate() const;
  inline void set_beforestate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CreatureStateBroadRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_curstate();
  inline void clear_has_curstate();
  inline void set_has_beforestate();
  inline void clear_has_beforestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 curstate_;
  ::google::protobuf::uint32 beforestate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static CreatureStateBroadRsp* default_instance_;
};
// -------------------------------------------------------------------

class NoticeShowInfoRsp : public ::google::protobuf::Message {
 public:
  NoticeShowInfoRsp();
  virtual ~NoticeShowInfoRsp();

  NoticeShowInfoRsp(const NoticeShowInfoRsp& from);

  inline NoticeShowInfoRsp& operator=(const NoticeShowInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeShowInfoRsp& default_instance();

  void Swap(NoticeShowInfoRsp* other);

  // implements Message ----------------------------------------------

  NoticeShowInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticeShowInfoRsp& from);
  void MergeFrom(const NoticeShowInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 show_type = 1;
  inline bool has_show_type() const;
  inline void clear_show_type();
  static const int kShowTypeFieldNumber = 1;
  inline ::google::protobuf::int32 show_type() const;
  inline void set_show_type(::google::protobuf::int32 value);

  // optional uint64 add_val = 2;
  inline bool has_add_val() const;
  inline void clear_add_val();
  static const int kAddValFieldNumber = 2;
  inline ::google::protobuf::uint64 add_val() const;
  inline void set_add_val(::google::protobuf::uint64 value);

  // optional .proto_ff.MultItemSimpleProto item_lst = 3;
  inline bool has_item_lst() const;
  inline void clear_item_lst();
  static const int kItemLstFieldNumber = 3;
  inline const ::proto_ff::MultItemSimpleProto& item_lst() const;
  inline ::proto_ff::MultItemSimpleProto* mutable_item_lst();
  inline ::proto_ff::MultItemSimpleProto* release_item_lst();
  inline void set_allocated_item_lst(::proto_ff::MultItemSimpleProto* item_lst);

  // @@protoc_insertion_point(class_scope:proto_ff.NoticeShowInfoRsp)
 private:
  inline void set_has_show_type();
  inline void clear_has_show_type();
  inline void set_has_add_val();
  inline void clear_has_add_val();
  inline void set_has_item_lst();
  inline void clear_has_item_lst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 add_val_;
  ::proto_ff::MultItemSimpleProto* item_lst_;
  ::google::protobuf::int32 show_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static NoticeShowInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class ChgNameReq : public ::google::protobuf::Message {
 public:
  ChgNameReq();
  virtual ~ChgNameReq();

  ChgNameReq(const ChgNameReq& from);

  inline ChgNameReq& operator=(const ChgNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChgNameReq& default_instance();

  void Swap(ChgNameReq* other);

  // implements Message ----------------------------------------------

  ChgNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChgNameReq& from);
  void MergeFrom(const ChgNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.ChgNameReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static ChgNameReq* default_instance_;
};
// -------------------------------------------------------------------

class ChgNameRsp : public ::google::protobuf::Message {
 public:
  ChgNameRsp();
  virtual ~ChgNameRsp();

  ChgNameRsp(const ChgNameRsp& from);

  inline ChgNameRsp& operator=(const ChgNameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChgNameRsp& default_instance();

  void Swap(ChgNameRsp* other);

  // implements Message ----------------------------------------------

  ChgNameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChgNameRsp& from);
  void MergeFrom(const ChgNameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.ChgNameRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static ChgNameRsp* default_instance_;
};
// -------------------------------------------------------------------

class PlayerReliveNotify : public ::google::protobuf::Message {
 public:
  PlayerReliveNotify();
  virtual ~PlayerReliveNotify();

  PlayerReliveNotify(const PlayerReliveNotify& from);

  inline PlayerReliveNotify& operator=(const PlayerReliveNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerReliveNotify& default_instance();

  void Swap(PlayerReliveNotify* other);

  // implements Message ----------------------------------------------

  PlayerReliveNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerReliveNotify& from);
  void MergeFrom(const PlayerReliveNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 left_num = 2;
  inline bool has_left_num() const;
  inline void clear_left_num();
  static const int kLeftNumFieldNumber = 2;
  inline ::google::protobuf::int32 left_num() const;
  inline void set_left_num(::google::protobuf::int32 value);

  // optional int32 sec = 3;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 3;
  inline ::google::protobuf::int32 sec() const;
  inline void set_sec(::google::protobuf::int32 value);

  // optional bool is_tired = 4;
  inline bool has_is_tired() const;
  inline void clear_is_tired();
  static const int kIsTiredFieldNumber = 4;
  inline bool is_tired() const;
  inline void set_is_tired(bool value);

  // optional int32 already_num = 5;
  inline bool has_already_num() const;
  inline void clear_already_num();
  static const int kAlreadyNumFieldNumber = 5;
  inline ::google::protobuf::int32 already_num() const;
  inline void set_already_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PlayerReliveNotify)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_left_num();
  inline void clear_has_left_num();
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_is_tired();
  inline void clear_has_is_tired();
  inline void set_has_already_num();
  inline void clear_has_already_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 left_num_;
  ::google::protobuf::int32 sec_;
  bool is_tired_;
  ::google::protobuf::int32 already_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerReliveNotify* default_instance_;
};
// -------------------------------------------------------------------

class PlayerReliveReq : public ::google::protobuf::Message {
 public:
  PlayerReliveReq();
  virtual ~PlayerReliveReq();

  PlayerReliveReq(const PlayerReliveReq& from);

  inline PlayerReliveReq& operator=(const PlayerReliveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerReliveReq& default_instance();

  void Swap(PlayerReliveReq* other);

  // implements Message ----------------------------------------------

  PlayerReliveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerReliveReq& from);
  void MergeFrom(const PlayerReliveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PlayerReliveReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerReliveReq* default_instance_;
};
// -------------------------------------------------------------------

class PlayerReliveRsp : public ::google::protobuf::Message {
 public:
  PlayerReliveRsp();
  virtual ~PlayerReliveRsp();

  PlayerReliveRsp(const PlayerReliveRsp& from);

  inline PlayerReliveRsp& operator=(const PlayerReliveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerReliveRsp& default_instance();

  void Swap(PlayerReliveRsp* other);

  // implements Message ----------------------------------------------

  PlayerReliveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerReliveRsp& from);
  void MergeFrom(const PlayerReliveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PlayerReliveRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CSPlayer_2eproto();
  friend void protobuf_AssignDesc_CSPlayer_2eproto();
  friend void protobuf_ShutdownFile_CSPlayer_2eproto();

  void InitAsDefaultInstance();
  static PlayerReliveRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerInfoRsp

// optional uint64 cid = 1;
inline bool PlayerInfoRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfoRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfoRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfoRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 PlayerInfoRsp::cid() const {
  return cid_;
}
inline void PlayerInfoRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool PlayerInfoRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfoRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfoRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfoRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerInfoRsp::name() const {
  return *name_;
}
inline void PlayerInfoRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInfoRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInfoRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfoRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerInfoRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInfoRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 3;
inline bool PlayerInfoRsp::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfoRsp::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfoRsp::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfoRsp::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 PlayerInfoRsp::zid() const {
  return zid_;
}
inline void PlayerInfoRsp::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 opentime = 4;
inline bool PlayerInfoRsp::has_opentime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfoRsp::set_has_opentime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfoRsp::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfoRsp::clear_opentime() {
  opentime_ = GOOGLE_ULONGLONG(0);
  clear_has_opentime();
}
inline ::google::protobuf::uint64 PlayerInfoRsp::opentime() const {
  return opentime_;
}
inline void PlayerInfoRsp::set_opentime(::google::protobuf::uint64 value) {
  set_has_opentime();
  opentime_ = value;
}

// optional uint64 createtime = 5;
inline bool PlayerInfoRsp::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfoRsp::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfoRsp::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfoRsp::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 PlayerInfoRsp::createtime() const {
  return createtime_;
}
inline void PlayerInfoRsp::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional .proto_ff.RoleFacadeProto facade = 6;
inline bool PlayerInfoRsp::has_facade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInfoRsp::set_has_facade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInfoRsp::clear_has_facade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInfoRsp::clear_facade() {
  if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
  clear_has_facade();
}
inline const ::proto_ff::RoleFacadeProto& PlayerInfoRsp::facade() const {
  return facade_ != NULL ? *facade_ : *default_instance_->facade_;
}
inline ::proto_ff::RoleFacadeProto* PlayerInfoRsp::mutable_facade() {
  set_has_facade();
  if (facade_ == NULL) facade_ = new ::proto_ff::RoleFacadeProto;
  return facade_;
}
inline ::proto_ff::RoleFacadeProto* PlayerInfoRsp::release_facade() {
  clear_has_facade();
  ::proto_ff::RoleFacadeProto* temp = facade_;
  facade_ = NULL;
  return temp;
}
inline void PlayerInfoRsp::set_allocated_facade(::proto_ff::RoleFacadeProto* facade) {
  delete facade_;
  facade_ = facade;
  if (facade) {
    set_has_facade();
  } else {
    clear_has_facade();
  }
}

// repeated .proto_ff.Attr64 attr = 7;
inline int PlayerInfoRsp::attr_size() const {
  return attr_.size();
}
inline void PlayerInfoRsp::clear_attr() {
  attr_.Clear();
}
inline const ::proto_ff::Attr64& PlayerInfoRsp::attr(int index) const {
  return attr_.Get(index);
}
inline ::proto_ff::Attr64* PlayerInfoRsp::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::proto_ff::Attr64* PlayerInfoRsp::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
PlayerInfoRsp::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
PlayerInfoRsp::mutable_attr() {
  return &attr_;
}

// optional uint64 mapid = 8;
inline bool PlayerInfoRsp::has_mapid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInfoRsp::set_has_mapid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInfoRsp::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInfoRsp::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::uint64 PlayerInfoRsp::mapid() const {
  return mapid_;
}
inline void PlayerInfoRsp::set_mapid(::google::protobuf::uint64 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional .proto_ff.Vector3PB pos = 9;
inline bool PlayerInfoRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerInfoRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerInfoRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerInfoRsp::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& PlayerInfoRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* PlayerInfoRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* PlayerInfoRsp::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void PlayerInfoRsp::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
inline bool PlayerInfoRsp::has_unlockinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerInfoRsp::set_has_unlockinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerInfoRsp::clear_has_unlockinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerInfoRsp::clear_unlockinfo() {
  if (unlockinfo_ != NULL) unlockinfo_->::proto_ff::FunctionUnlockInfo::Clear();
  clear_has_unlockinfo();
}
inline const ::proto_ff::FunctionUnlockInfo& PlayerInfoRsp::unlockinfo() const {
  return unlockinfo_ != NULL ? *unlockinfo_ : *default_instance_->unlockinfo_;
}
inline ::proto_ff::FunctionUnlockInfo* PlayerInfoRsp::mutable_unlockinfo() {
  set_has_unlockinfo();
  if (unlockinfo_ == NULL) unlockinfo_ = new ::proto_ff::FunctionUnlockInfo;
  return unlockinfo_;
}
inline ::proto_ff::FunctionUnlockInfo* PlayerInfoRsp::release_unlockinfo() {
  clear_has_unlockinfo();
  ::proto_ff::FunctionUnlockInfo* temp = unlockinfo_;
  unlockinfo_ = NULL;
  return temp;
}
inline void PlayerInfoRsp::set_allocated_unlockinfo(::proto_ff::FunctionUnlockInfo* unlockinfo) {
  delete unlockinfo_;
  unlockinfo_ = unlockinfo;
  if (unlockinfo) {
    set_has_unlockinfo();
  } else {
    clear_has_unlockinfo();
  }
}

// optional int32 state = 11;
inline bool PlayerInfoRsp::has_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerInfoRsp::set_has_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerInfoRsp::clear_has_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerInfoRsp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PlayerInfoRsp::state() const {
  return state_;
}
inline void PlayerInfoRsp::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional .proto_ff.SkillGroupListProto skill_group = 12;
inline bool PlayerInfoRsp::has_skill_group() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerInfoRsp::set_has_skill_group() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerInfoRsp::clear_has_skill_group() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerInfoRsp::clear_skill_group() {
  if (skill_group_ != NULL) skill_group_->::proto_ff::SkillGroupListProto::Clear();
  clear_has_skill_group();
}
inline const ::proto_ff::SkillGroupListProto& PlayerInfoRsp::skill_group() const {
  return skill_group_ != NULL ? *skill_group_ : *default_instance_->skill_group_;
}
inline ::proto_ff::SkillGroupListProto* PlayerInfoRsp::mutable_skill_group() {
  set_has_skill_group();
  if (skill_group_ == NULL) skill_group_ = new ::proto_ff::SkillGroupListProto;
  return skill_group_;
}
inline ::proto_ff::SkillGroupListProto* PlayerInfoRsp::release_skill_group() {
  clear_has_skill_group();
  ::proto_ff::SkillGroupListProto* temp = skill_group_;
  skill_group_ = NULL;
  return temp;
}
inline void PlayerInfoRsp::set_allocated_skill_group(::proto_ff::SkillGroupListProto* skill_group) {
  delete skill_group_;
  skill_group_ = skill_group;
  if (skill_group) {
    set_has_skill_group();
  } else {
    clear_has_skill_group();
  }
}

// optional uint32 cur_skill_group = 13;
inline bool PlayerInfoRsp::has_cur_skill_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerInfoRsp::set_has_cur_skill_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerInfoRsp::clear_has_cur_skill_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerInfoRsp::clear_cur_skill_group() {
  cur_skill_group_ = 0u;
  clear_has_cur_skill_group();
}
inline ::google::protobuf::uint32 PlayerInfoRsp::cur_skill_group() const {
  return cur_skill_group_;
}
inline void PlayerInfoRsp::set_cur_skill_group(::google::protobuf::uint32 value) {
  set_has_cur_skill_group();
  cur_skill_group_ = value;
}

// -------------------------------------------------------------------

// CreatureAttrSyn

// optional uint64 cid = 1;
inline bool CreatureAttrSyn::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatureAttrSyn::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatureAttrSyn::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatureAttrSyn::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CreatureAttrSyn::cid() const {
  return cid_;
}
inline void CreatureAttrSyn::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// repeated .proto_ff.Attr64 attr = 2;
inline int CreatureAttrSyn::attr_size() const {
  return attr_.size();
}
inline void CreatureAttrSyn::clear_attr() {
  attr_.Clear();
}
inline const ::proto_ff::Attr64& CreatureAttrSyn::attr(int index) const {
  return attr_.Get(index);
}
inline ::proto_ff::Attr64* CreatureAttrSyn::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::proto_ff::Attr64* CreatureAttrSyn::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
CreatureAttrSyn::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
CreatureAttrSyn::mutable_attr() {
  return &attr_;
}

// -------------------------------------------------------------------

// CreatureAttrBroadRsp

// optional uint64 cid = 1;
inline bool CreatureAttrBroadRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatureAttrBroadRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatureAttrBroadRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatureAttrBroadRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CreatureAttrBroadRsp::cid() const {
  return cid_;
}
inline void CreatureAttrBroadRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// repeated .proto_ff.Attr64 attr = 2;
inline int CreatureAttrBroadRsp::attr_size() const {
  return attr_.size();
}
inline void CreatureAttrBroadRsp::clear_attr() {
  attr_.Clear();
}
inline const ::proto_ff::Attr64& CreatureAttrBroadRsp::attr(int index) const {
  return attr_.Get(index);
}
inline ::proto_ff::Attr64* CreatureAttrBroadRsp::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::proto_ff::Attr64* CreatureAttrBroadRsp::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >&
CreatureAttrBroadRsp::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Attr64 >*
CreatureAttrBroadRsp::mutable_attr() {
  return &attr_;
}

// -------------------------------------------------------------------

// CreatureStateBroadRsp

// optional uint64 cid = 1;
inline bool CreatureStateBroadRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreatureStateBroadRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreatureStateBroadRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreatureStateBroadRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CreatureStateBroadRsp::cid() const {
  return cid_;
}
inline void CreatureStateBroadRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 curstate = 2;
inline bool CreatureStateBroadRsp::has_curstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreatureStateBroadRsp::set_has_curstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreatureStateBroadRsp::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreatureStateBroadRsp::clear_curstate() {
  curstate_ = 0u;
  clear_has_curstate();
}
inline ::google::protobuf::uint32 CreatureStateBroadRsp::curstate() const {
  return curstate_;
}
inline void CreatureStateBroadRsp::set_curstate(::google::protobuf::uint32 value) {
  set_has_curstate();
  curstate_ = value;
}

// optional uint32 beforestate = 3;
inline bool CreatureStateBroadRsp::has_beforestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreatureStateBroadRsp::set_has_beforestate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreatureStateBroadRsp::clear_has_beforestate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreatureStateBroadRsp::clear_beforestate() {
  beforestate_ = 0u;
  clear_has_beforestate();
}
inline ::google::protobuf::uint32 CreatureStateBroadRsp::beforestate() const {
  return beforestate_;
}
inline void CreatureStateBroadRsp::set_beforestate(::google::protobuf::uint32 value) {
  set_has_beforestate();
  beforestate_ = value;
}

// -------------------------------------------------------------------

// NoticeShowInfoRsp

// optional int32 show_type = 1;
inline bool NoticeShowInfoRsp::has_show_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeShowInfoRsp::set_has_show_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticeShowInfoRsp::clear_has_show_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticeShowInfoRsp::clear_show_type() {
  show_type_ = 0;
  clear_has_show_type();
}
inline ::google::protobuf::int32 NoticeShowInfoRsp::show_type() const {
  return show_type_;
}
inline void NoticeShowInfoRsp::set_show_type(::google::protobuf::int32 value) {
  set_has_show_type();
  show_type_ = value;
}

// optional uint64 add_val = 2;
inline bool NoticeShowInfoRsp::has_add_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticeShowInfoRsp::set_has_add_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticeShowInfoRsp::clear_has_add_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticeShowInfoRsp::clear_add_val() {
  add_val_ = GOOGLE_ULONGLONG(0);
  clear_has_add_val();
}
inline ::google::protobuf::uint64 NoticeShowInfoRsp::add_val() const {
  return add_val_;
}
inline void NoticeShowInfoRsp::set_add_val(::google::protobuf::uint64 value) {
  set_has_add_val();
  add_val_ = value;
}

// optional .proto_ff.MultItemSimpleProto item_lst = 3;
inline bool NoticeShowInfoRsp::has_item_lst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoticeShowInfoRsp::set_has_item_lst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoticeShowInfoRsp::clear_has_item_lst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoticeShowInfoRsp::clear_item_lst() {
  if (item_lst_ != NULL) item_lst_->::proto_ff::MultItemSimpleProto::Clear();
  clear_has_item_lst();
}
inline const ::proto_ff::MultItemSimpleProto& NoticeShowInfoRsp::item_lst() const {
  return item_lst_ != NULL ? *item_lst_ : *default_instance_->item_lst_;
}
inline ::proto_ff::MultItemSimpleProto* NoticeShowInfoRsp::mutable_item_lst() {
  set_has_item_lst();
  if (item_lst_ == NULL) item_lst_ = new ::proto_ff::MultItemSimpleProto;
  return item_lst_;
}
inline ::proto_ff::MultItemSimpleProto* NoticeShowInfoRsp::release_item_lst() {
  clear_has_item_lst();
  ::proto_ff::MultItemSimpleProto* temp = item_lst_;
  item_lst_ = NULL;
  return temp;
}
inline void NoticeShowInfoRsp::set_allocated_item_lst(::proto_ff::MultItemSimpleProto* item_lst) {
  delete item_lst_;
  item_lst_ = item_lst;
  if (item_lst) {
    set_has_item_lst();
  } else {
    clear_has_item_lst();
  }
}

// -------------------------------------------------------------------

// ChgNameReq

// optional string name = 1;
inline bool ChgNameReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChgNameReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChgNameReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChgNameReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChgNameReq::name() const {
  return *name_;
}
inline void ChgNameReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChgNameReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChgNameReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChgNameReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChgNameReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChgNameReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChgNameRsp

// required int32 retcode = 1;
inline bool ChgNameRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChgNameRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChgNameRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChgNameRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 ChgNameRsp::retcode() const {
  return retcode_;
}
inline void ChgNameRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional bytes name = 2;
inline bool ChgNameRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChgNameRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChgNameRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChgNameRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChgNameRsp::name() const {
  return *name_;
}
inline void ChgNameRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChgNameRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChgNameRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChgNameRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChgNameRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChgNameRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PlayerReliveNotify

// optional bytes name = 1;
inline bool PlayerReliveNotify::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerReliveNotify::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerReliveNotify::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerReliveNotify::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerReliveNotify::name() const {
  return *name_;
}
inline void PlayerReliveNotify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerReliveNotify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerReliveNotify::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerReliveNotify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerReliveNotify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerReliveNotify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 left_num = 2;
inline bool PlayerReliveNotify::has_left_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerReliveNotify::set_has_left_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerReliveNotify::clear_has_left_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerReliveNotify::clear_left_num() {
  left_num_ = 0;
  clear_has_left_num();
}
inline ::google::protobuf::int32 PlayerReliveNotify::left_num() const {
  return left_num_;
}
inline void PlayerReliveNotify::set_left_num(::google::protobuf::int32 value) {
  set_has_left_num();
  left_num_ = value;
}

// optional int32 sec = 3;
inline bool PlayerReliveNotify::has_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerReliveNotify::set_has_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerReliveNotify::clear_has_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerReliveNotify::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 PlayerReliveNotify::sec() const {
  return sec_;
}
inline void PlayerReliveNotify::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
}

// optional bool is_tired = 4;
inline bool PlayerReliveNotify::has_is_tired() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerReliveNotify::set_has_is_tired() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerReliveNotify::clear_has_is_tired() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerReliveNotify::clear_is_tired() {
  is_tired_ = false;
  clear_has_is_tired();
}
inline bool PlayerReliveNotify::is_tired() const {
  return is_tired_;
}
inline void PlayerReliveNotify::set_is_tired(bool value) {
  set_has_is_tired();
  is_tired_ = value;
}

// optional int32 already_num = 5;
inline bool PlayerReliveNotify::has_already_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerReliveNotify::set_has_already_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerReliveNotify::clear_has_already_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerReliveNotify::clear_already_num() {
  already_num_ = 0;
  clear_has_already_num();
}
inline ::google::protobuf::int32 PlayerReliveNotify::already_num() const {
  return already_num_;
}
inline void PlayerReliveNotify::set_already_num(::google::protobuf::int32 value) {
  set_has_already_num();
  already_num_ = value;
}

// -------------------------------------------------------------------

// PlayerReliveReq

// optional int32 type = 1;
inline bool PlayerReliveReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerReliveReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerReliveReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerReliveReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PlayerReliveReq::type() const {
  return type_;
}
inline void PlayerReliveReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// PlayerReliveRsp

// required int32 ret = 1;
inline bool PlayerReliveRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerReliveRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerReliveRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerReliveRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 PlayerReliveRsp::ret() const {
  return ret_;
}
inline void PlayerReliveRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CSPlayer_2eproto__INCLUDED
