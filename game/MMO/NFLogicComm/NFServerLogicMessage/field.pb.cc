// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: field.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "field.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* fieldfieldfieldDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fieldfieldfieldDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* fieldfield_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fieldfield_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_fieldfield_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_fieldfield_reflection_ = NULL;
const ::google::protobuf::Descriptor* fieldreikirefineDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fieldreikirefineDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* fieldreiki_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fieldreiki_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_fieldreiki_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_fieldreiki_reflection_ = NULL;
const ::google::protobuf::Descriptor* fieldexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fieldexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_fieldexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_fieldexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* fieldvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fieldvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_fieldvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_fieldvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* fieldexpand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fieldexpand_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_fieldexpand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_fieldexpand_reflection_ = NULL;
const ::google::protobuf::Descriptor* fieldstong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fieldstong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_fieldstong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_fieldstong_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_field_2eproto() {
  protobuf_AddDesc_field_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "field.proto");
  GOOGLE_CHECK(file != NULL);
  fieldfieldfieldDesc_descriptor_ = file->message_type(0);
  static const int fieldfieldfieldDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfieldfieldDesc, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfieldfieldDesc, num_),
  };
  fieldfieldfieldDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fieldfieldfieldDesc_descriptor_,
      fieldfieldfieldDesc::default_instance_,
      fieldfieldfieldDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfieldfieldDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfieldfieldDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fieldfieldfieldDesc));
  fieldfield_descriptor_ = file->message_type(1);
  static const int fieldfield_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, pos_),
  };
  fieldfield_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fieldfield_descriptor_,
      fieldfield::default_instance_,
      fieldfield_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldfield, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fieldfield));
  Sheet_fieldfield_descriptor_ = file->message_type(2);
  static const int Sheet_fieldfield_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldfield, fieldfield_list_),
  };
  Sheet_fieldfield_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_fieldfield_descriptor_,
      Sheet_fieldfield::default_instance_,
      Sheet_fieldfield_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldfield, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldfield, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_fieldfield));
  fieldreikirefineDesc_descriptor_ = file->message_type(3);
  static const int fieldreikirefineDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreikirefineDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreikirefineDesc, value_),
  };
  fieldreikirefineDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fieldreikirefineDesc_descriptor_,
      fieldreikirefineDesc::default_instance_,
      fieldreikirefineDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreikirefineDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreikirefineDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fieldreikirefineDesc));
  fieldreiki_descriptor_ = file->message_type(4);
  static const int fieldreiki_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, refineattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, refineattributevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, bluestarnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, bluestar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, bluestar_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, refine_),
  };
  fieldreiki_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fieldreiki_descriptor_,
      fieldreiki::default_instance_,
      fieldreiki_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldreiki, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fieldreiki));
  Sheet_fieldreiki_descriptor_ = file->message_type(5);
  static const int Sheet_fieldreiki_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldreiki, fieldreiki_list_),
  };
  Sheet_fieldreiki_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_fieldreiki_descriptor_,
      Sheet_fieldreiki::default_instance_,
      Sheet_fieldreiki_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldreiki, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldreiki, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_fieldreiki));
  fieldexp_descriptor_ = file->message_type(6);
  static const int fieldexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexp, exp_),
  };
  fieldexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fieldexp_descriptor_,
      fieldexp::default_instance_,
      fieldexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fieldexp));
  Sheet_fieldexp_descriptor_ = file->message_type(7);
  static const int Sheet_fieldexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldexp, fieldexp_list_),
  };
  Sheet_fieldexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_fieldexp_descriptor_,
      Sheet_fieldexp::default_instance_,
      Sheet_fieldexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_fieldexp));
  fieldvalue_descriptor_ = file->message_type(8);
  static const int fieldvalue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldvalue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldvalue, lvvalue_),
  };
  fieldvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fieldvalue_descriptor_,
      fieldvalue::default_instance_,
      fieldvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fieldvalue));
  Sheet_fieldvalue_descriptor_ = file->message_type(9);
  static const int Sheet_fieldvalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldvalue, fieldvalue_list_),
  };
  Sheet_fieldvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_fieldvalue_descriptor_,
      Sheet_fieldvalue::default_instance_,
      Sheet_fieldvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_fieldvalue));
  fieldexpand_descriptor_ = file->message_type(10);
  static const int fieldexpand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexpand, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexpand, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexpand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexpand, num_),
  };
  fieldexpand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fieldexpand_descriptor_,
      fieldexpand::default_instance_,
      fieldexpand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexpand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldexpand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fieldexpand));
  Sheet_fieldexpand_descriptor_ = file->message_type(11);
  static const int Sheet_fieldexpand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldexpand, fieldexpand_list_),
  };
  Sheet_fieldexpand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_fieldexpand_descriptor_,
      Sheet_fieldexpand::default_instance_,
      Sheet_fieldexpand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldexpand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldexpand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_fieldexpand));
  fieldstong_descriptor_ = file->message_type(12);
  static const int fieldstong_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldstong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldstong, stongid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldstong, fenjieid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldstong, fenjienum_),
  };
  fieldstong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fieldstong_descriptor_,
      fieldstong::default_instance_,
      fieldstong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldstong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fieldstong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fieldstong));
  Sheet_fieldstong_descriptor_ = file->message_type(13);
  static const int Sheet_fieldstong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldstong, fieldstong_list_),
  };
  Sheet_fieldstong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_fieldstong_descriptor_,
      Sheet_fieldstong::default_instance_,
      Sheet_fieldstong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldstong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_fieldstong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_fieldstong));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_field_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fieldfieldfieldDesc_descriptor_, &fieldfieldfieldDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fieldfield_descriptor_, &fieldfield::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_fieldfield_descriptor_, &Sheet_fieldfield::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fieldreikirefineDesc_descriptor_, &fieldreikirefineDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fieldreiki_descriptor_, &fieldreiki::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_fieldreiki_descriptor_, &Sheet_fieldreiki::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fieldexp_descriptor_, &fieldexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_fieldexp_descriptor_, &Sheet_fieldexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fieldvalue_descriptor_, &fieldvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_fieldvalue_descriptor_, &Sheet_fieldvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fieldexpand_descriptor_, &fieldexpand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_fieldexpand_descriptor_, &Sheet_fieldexpand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fieldstong_descriptor_, &fieldstong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_fieldstong_descriptor_, &Sheet_fieldstong::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_field_2eproto() {
  delete fieldfieldfieldDesc::default_instance_;
  delete fieldfieldfieldDesc_reflection_;
  delete fieldfield::default_instance_;
  delete fieldfield_reflection_;
  delete Sheet_fieldfield::default_instance_;
  delete Sheet_fieldfield_reflection_;
  delete fieldreikirefineDesc::default_instance_;
  delete fieldreikirefineDesc_reflection_;
  delete fieldreiki::default_instance_;
  delete fieldreiki_reflection_;
  delete Sheet_fieldreiki::default_instance_;
  delete Sheet_fieldreiki_reflection_;
  delete fieldexp::default_instance_;
  delete fieldexp_reflection_;
  delete Sheet_fieldexp::default_instance_;
  delete Sheet_fieldexp_reflection_;
  delete fieldvalue::default_instance_;
  delete fieldvalue_reflection_;
  delete Sheet_fieldvalue::default_instance_;
  delete Sheet_fieldvalue_reflection_;
  delete fieldexpand::default_instance_;
  delete fieldexpand_reflection_;
  delete Sheet_fieldexpand::default_instance_;
  delete Sheet_fieldexpand_reflection_;
  delete fieldstong::default_instance_;
  delete fieldstong_reflection_;
  delete Sheet_fieldstong::default_instance_;
  delete Sheet_fieldstong_reflection_;
}

void protobuf_AddDesc_field_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013field.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"@\n\023fieldfieldfieldDesc\022\023\n\003att\030\001 \001"
    "(\005B\006\302\377\024\002Id\022\024\n\003num\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\207\002\n\nfie"
    "ldfield\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\351\242\206\345\237\237ID\022\"\n\004nam"
    "e\030\002 \001(\tB\024\302\377\024\014\351\242\206\345\237\237\345\220\215\347\247\260\220\301\024 \022!\n\007quality"
    "\030\003 \001(\005B\020\302\377\024\014\351\242\206\345\237\237\345\223\201\350\264\250\022B\n\005field\030\004 \003(\0132"
    "\035.proto_ff.fieldfieldfieldDescB\024\302\377\024\014\351\242\206\345"
    "\237\237\345\261\236\346\200\247\210\301\024\004\022\037\n\005skill\030\005 \003(\003B\020\302\377\024\014\351\242\206\345\237\237\346"
    "\212\200\350\203\275\022\032\n\003num\030\006 \003(\005B\r\302\377\024\t\351\225\266\345\265\214\345\255\224\022\027\n\003pos"
    "\030\007 \003(\005B\n\302\377\024\006\345\223\201\350\264\250\"H\n\020Sheet_fieldfield\0224"
    "\n\017fieldfield_List\030\001 \003(\0132\024.proto_ff.field"
    "fieldB\005\210\301\024\206\001\"J\n\024fieldreikirefineDesc\022\030\n\004"
    "type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\030\n\005value\030\002 \001(\003B\t\302"
    "\377\024\005\347\273\204ID\"\316\004\n\nfieldreiki\022\030\n\002id\030\001 \001(\003B\014\302\377\024"
    "\010\346\235\220\346\226\231ID\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\346\235\220\346\226\231\345\220\215\347\247"
    "\260\220\301\024 \022!\n\007quality\030\003 \001(\005B\020\302\377\024\014\346\235\220\346\226\231\345\223\201\350\264\250"
    "\022\037\n\005field\030\004 \001(\005B\020\302\377\024\014\346\235\220\346\226\231\351\203\250\344\275\215\022\"\n\002Lv\030"
    "\005 \001(\005B\026\302\377\024\022\346\235\220\346\226\231\347\255\211\347\272\247\344\270\212\351\231\220\022\036\n\004star\030\006 "
    "\001(\005B\020\302\377\024\014\346\235\220\346\226\231\346\230\237\347\272\247\0226\n\017refineAttribute"
    "\030\007 \001(\tB\035\302\377\024\025\351\232\217\346\234\272\346\230\237\347\272\247\345\261\236\346\200\247\345\272\223\220\301\024 \0225\n"
    "\024refineAttributeValue\030\010 \001(\tB\027\302\377\024\017\346\230\237\347\272\247\345"
    "\261\236\346\200\247\345\200\274\220\301\024 \022+\n\013blueStarNum\030\t \001(\005B\026\302\377\024\022\350"
    "\223\235\346\230\237\345\261\236\346\200\247\346\225\260\351\207\217\0224\n\rblueStar_type\030\n \001(\t"
    "B\035\302\377\024\025\350\223\235\346\230\237\345\261\236\346\200\247\347\261\273\345\236\213\345\272\223\220\301\024 \022/\n\016blueS"
    "tar_value\030\013 \001(\tB\027\302\377\024\017\350\223\235\346\230\237\345\261\236\346\200\247\345\200\274\220\301\024 "
    "\022\035\n\003exp\030\014 \001(\005B\020\302\377\024\014\345\210\235\345\247\213\347\273\217\351\252\214\022\030\n\004link\030"
    "\r \001(\003B\n\302\377\024\006\346\235\245\346\272\220\022>\n\006refine\030\016 \003(\0132\036.prot"
    "o_ff.fieldreikirefineDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024"
    "\002\"H\n\020Sheet_fieldreiki\0224\n\017fieldreiki_List"
    "\030\001 \003(\0132\024.proto_ff.fieldreikiB\005\210\301\024\371\001\"G\n\010f"
    "ieldexp\022\026\n\002lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022#\n\003exp\030\002"
    " \001(\005B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200\347\273\217\351\252\214\"B\n\016Sheet_fi"
    "eldexp\0220\n\rfieldexp_List\030\001 \003(\0132\022.proto_ff"
    ".fieldexpB\005\210\301\024\376\001\"I\n\nfieldvalue\022\033\n\002id\030\001 \001"
    "(\003B\017\302\377\024\013\345\261\236\346\200\247\347\273\204ID\022\036\n\007lvValue\030\002 \003(\005B\r\302\377"
    "\024\t\347\255\211\347\272\247\345\200\274\"H\n\020Sheet_fieldvalue\0224\n\017field"
    "value_List\030\001 \003(\0132\024.proto_ff.fieldvalueB\005"
    "\210\301\024\256\001\"\222\001\n\013fieldexpand\022 \n\006number\030\001 \001(\005B\020\302"
    "\377\024\014\346\277\200\346\264\273\344\270\252\346\225\260\022\034\n\002lv\030\002 \001(\005B\020\302\377\024\014\346\277\200\346\264\273\347"
    "\255\211\347\272\247\022\036\n\002id\030\003 \001(\003B\022\302\377\024\016\346\277\200\346\264\273\351\201\223\345\205\267id\022#\n"
    "\003num\030\004 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\"K\n\021Sh"
    "eet_fieldexpand\0226\n\020fieldexpand_List\030\001 \003("
    "\0132\025.proto_ff.fieldexpandB\005\210\301\024\206\001\"\264\001\n\nfiel"
    "dstong\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\346\260\264\346\231\266id\022/\n\007ston"
    "gId\030\002 \001(\003B\036\302\377\024\032\346\260\264\346\231\266\345\215\207\347\272\247\345\210\260\344\270\213\344\270\200\347\272\247i"
    "d\022*\n\010fenJieId\030\003 \001(\003B\030\302\377\024\024\345\217\257\345\210\206\350\247\243\347\232\204\346\260\264"
    "\346\231\266id\022/\n\tfenJieNum\030\004 \001(\005B\034\302\377\024\030\345\217\257\345\210\206\350\247\243\347"
    "\232\204\346\260\264\346\231\266\346\225\260\351\207\217\"H\n\020Sheet_fieldstong\0224\n\017fi"
    "eldstong_List\030\001 \003(\0132\024.proto_ff.fieldston"
    "gB\005\210\301\024\232\001", 1968);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "field.proto", &protobuf_RegisterTypes);
  fieldfieldfieldDesc::default_instance_ = new fieldfieldfieldDesc();
  fieldfield::default_instance_ = new fieldfield();
  Sheet_fieldfield::default_instance_ = new Sheet_fieldfield();
  fieldreikirefineDesc::default_instance_ = new fieldreikirefineDesc();
  fieldreiki::default_instance_ = new fieldreiki();
  Sheet_fieldreiki::default_instance_ = new Sheet_fieldreiki();
  fieldexp::default_instance_ = new fieldexp();
  Sheet_fieldexp::default_instance_ = new Sheet_fieldexp();
  fieldvalue::default_instance_ = new fieldvalue();
  Sheet_fieldvalue::default_instance_ = new Sheet_fieldvalue();
  fieldexpand::default_instance_ = new fieldexpand();
  Sheet_fieldexpand::default_instance_ = new Sheet_fieldexpand();
  fieldstong::default_instance_ = new fieldstong();
  Sheet_fieldstong::default_instance_ = new Sheet_fieldstong();
  fieldfieldfieldDesc::default_instance_->InitAsDefaultInstance();
  fieldfield::default_instance_->InitAsDefaultInstance();
  Sheet_fieldfield::default_instance_->InitAsDefaultInstance();
  fieldreikirefineDesc::default_instance_->InitAsDefaultInstance();
  fieldreiki::default_instance_->InitAsDefaultInstance();
  Sheet_fieldreiki::default_instance_->InitAsDefaultInstance();
  fieldexp::default_instance_->InitAsDefaultInstance();
  Sheet_fieldexp::default_instance_->InitAsDefaultInstance();
  fieldvalue::default_instance_->InitAsDefaultInstance();
  Sheet_fieldvalue::default_instance_->InitAsDefaultInstance();
  fieldexpand::default_instance_->InitAsDefaultInstance();
  Sheet_fieldexpand::default_instance_->InitAsDefaultInstance();
  fieldstong::default_instance_->InitAsDefaultInstance();
  Sheet_fieldstong::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_field_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_field_2eproto {
  StaticDescriptorInitializer_field_2eproto() {
    protobuf_AddDesc_field_2eproto();
  }
} static_descriptor_initializer_field_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int fieldfieldfieldDesc::kAttFieldNumber;
const int fieldfieldfieldDesc::kNumFieldNumber;
#endif  // !_MSC_VER

fieldfieldfieldDesc::fieldfieldfieldDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fieldfieldfieldDesc::InitAsDefaultInstance() {
}

fieldfieldfieldDesc::fieldfieldfieldDesc(const fieldfieldfieldDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fieldfieldfieldDesc::SharedCtor() {
  _cached_size_ = 0;
  att_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldfieldfieldDesc::~fieldfieldfieldDesc() {
  SharedDtor();
}

void fieldfieldfieldDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fieldfieldfieldDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fieldfieldfieldDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fieldfieldfieldDesc_descriptor_;
}

const fieldfieldfieldDesc& fieldfieldfieldDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

fieldfieldfieldDesc* fieldfieldfieldDesc::default_instance_ = NULL;

fieldfieldfieldDesc* fieldfieldfieldDesc::New() const {
  return new fieldfieldfieldDesc;
}

void fieldfieldfieldDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    att_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fieldfieldfieldDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 att = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &att_)));
          set_has_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fieldfieldfieldDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 att = 1;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->att(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldfieldfieldDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 att = 1;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->att(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fieldfieldfieldDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 att = 1;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->att());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fieldfieldfieldDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fieldfieldfieldDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldfieldfieldDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fieldfieldfieldDesc::MergeFrom(const fieldfieldfieldDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_att()) {
      set_att(from.att());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fieldfieldfieldDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fieldfieldfieldDesc::CopyFrom(const fieldfieldfieldDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fieldfieldfieldDesc::IsInitialized() const {

  return true;
}

void fieldfieldfieldDesc::Swap(fieldfieldfieldDesc* other) {
  if (other != this) {
    std::swap(att_, other->att_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fieldfieldfieldDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fieldfieldfieldDesc_descriptor_;
  metadata.reflection = fieldfieldfieldDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fieldfield::kIdFieldNumber;
const int fieldfield::kNameFieldNumber;
const int fieldfield::kQualityFieldNumber;
const int fieldfield::kFieldFieldNumber;
const int fieldfield::kSkillFieldNumber;
const int fieldfield::kNumFieldNumber;
const int fieldfield::kPosFieldNumber;
#endif  // !_MSC_VER

fieldfield::fieldfield()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fieldfield::InitAsDefaultInstance() {
}

fieldfield::fieldfield(const fieldfield& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fieldfield::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldfield::~fieldfield() {
  SharedDtor();
}

void fieldfield::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void fieldfield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fieldfield::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fieldfield_descriptor_;
}

const fieldfield& fieldfield::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

fieldfield* fieldfield::default_instance_ = NULL;

fieldfield* fieldfield::New() const {
  return new fieldfield;
}

void fieldfield::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
  }
  field_.Clear();
  skill_.Clear();
  num_.Clear();
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fieldfield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_field;
        break;
      }

      // repeated .proto_ff.fieldfieldfieldDesc field = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_field;
        if (input->ExpectTag(40)) goto parse_skill;
        break;
      }

      // repeated int64 skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill;
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // repeated int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        if (input->ExpectTag(56)) goto parse_pos;
        break;
      }

      // repeated int32 pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fieldfield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // repeated .proto_ff.fieldfieldfieldDesc field = 4;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->field(i), output);
  }

  // repeated int64 skill = 5;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->skill(i), output);
  }

  // repeated int32 num = 6;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->num(i), output);
  }

  // repeated int32 pos = 7;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldfield::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // repeated .proto_ff.fieldfieldfieldDesc field = 4;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->field(i), target);
  }

  // repeated int64 skill = 5;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->skill(i), target);
  }

  // repeated int32 num = 6;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->num(i), target);
  }

  // repeated int32 pos = 7;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fieldfield::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  // repeated .proto_ff.fieldfieldfieldDesc field = 4;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  // repeated int64 skill = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->skill(i));
    }
    total_size += 1 * this->skill_size() + data_size;
  }

  // repeated int32 num = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  // repeated int32 pos = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fieldfield::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fieldfield* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldfield*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fieldfield::MergeFrom(const fieldfield& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  skill_.MergeFrom(from.skill_);
  num_.MergeFrom(from.num_);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fieldfield::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fieldfield::CopyFrom(const fieldfield& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fieldfield::IsInitialized() const {

  return true;
}

void fieldfield::Swap(fieldfield* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    field_.Swap(&other->field_);
    skill_.Swap(&other->skill_);
    num_.Swap(&other->num_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fieldfield::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fieldfield_descriptor_;
  metadata.reflection = fieldfield_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_fieldfield::kFieldfieldListFieldNumber;
#endif  // !_MSC_VER

Sheet_fieldfield::Sheet_fieldfield()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_fieldfield::InitAsDefaultInstance() {
}

Sheet_fieldfield::Sheet_fieldfield(const Sheet_fieldfield& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_fieldfield::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_fieldfield::~Sheet_fieldfield() {
  SharedDtor();
}

void Sheet_fieldfield::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_fieldfield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_fieldfield::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_fieldfield_descriptor_;
}

const Sheet_fieldfield& Sheet_fieldfield::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

Sheet_fieldfield* Sheet_fieldfield::default_instance_ = NULL;

Sheet_fieldfield* Sheet_fieldfield::New() const {
  return new Sheet_fieldfield;
}

void Sheet_fieldfield::Clear() {
  fieldfield_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_fieldfield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.fieldfield fieldfield_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldfield_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldfield_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fieldfield_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_fieldfield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.fieldfield fieldfield_List = 1;
  for (int i = 0; i < this->fieldfield_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldfield_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_fieldfield::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.fieldfield fieldfield_List = 1;
  for (int i = 0; i < this->fieldfield_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldfield_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_fieldfield::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.fieldfield fieldfield_List = 1;
  total_size += 1 * this->fieldfield_list_size();
  for (int i = 0; i < this->fieldfield_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldfield_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_fieldfield::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_fieldfield* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_fieldfield*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_fieldfield::MergeFrom(const Sheet_fieldfield& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldfield_list_.MergeFrom(from.fieldfield_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_fieldfield::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_fieldfield::CopyFrom(const Sheet_fieldfield& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_fieldfield::IsInitialized() const {

  return true;
}

void Sheet_fieldfield::Swap(Sheet_fieldfield* other) {
  if (other != this) {
    fieldfield_list_.Swap(&other->fieldfield_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_fieldfield::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_fieldfield_descriptor_;
  metadata.reflection = Sheet_fieldfield_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fieldreikirefineDesc::kTypeFieldNumber;
const int fieldreikirefineDesc::kValueFieldNumber;
#endif  // !_MSC_VER

fieldreikirefineDesc::fieldreikirefineDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fieldreikirefineDesc::InitAsDefaultInstance() {
}

fieldreikirefineDesc::fieldreikirefineDesc(const fieldreikirefineDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fieldreikirefineDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldreikirefineDesc::~fieldreikirefineDesc() {
  SharedDtor();
}

void fieldreikirefineDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fieldreikirefineDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fieldreikirefineDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fieldreikirefineDesc_descriptor_;
}

const fieldreikirefineDesc& fieldreikirefineDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

fieldreikirefineDesc* fieldreikirefineDesc::default_instance_ = NULL;

fieldreikirefineDesc* fieldreikirefineDesc::New() const {
  return new fieldreikirefineDesc;
}

void fieldreikirefineDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fieldreikirefineDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fieldreikirefineDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldreikirefineDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fieldreikirefineDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fieldreikirefineDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fieldreikirefineDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldreikirefineDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fieldreikirefineDesc::MergeFrom(const fieldreikirefineDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fieldreikirefineDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fieldreikirefineDesc::CopyFrom(const fieldreikirefineDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fieldreikirefineDesc::IsInitialized() const {

  return true;
}

void fieldreikirefineDesc::Swap(fieldreikirefineDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fieldreikirefineDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fieldreikirefineDesc_descriptor_;
  metadata.reflection = fieldreikirefineDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fieldreiki::kIdFieldNumber;
const int fieldreiki::kNameFieldNumber;
const int fieldreiki::kQualityFieldNumber;
const int fieldreiki::kFieldFieldNumber;
const int fieldreiki::kLvFieldNumber;
const int fieldreiki::kStarFieldNumber;
const int fieldreiki::kRefineAttributeFieldNumber;
const int fieldreiki::kRefineAttributeValueFieldNumber;
const int fieldreiki::kBlueStarNumFieldNumber;
const int fieldreiki::kBlueStarTypeFieldNumber;
const int fieldreiki::kBlueStarValueFieldNumber;
const int fieldreiki::kExpFieldNumber;
const int fieldreiki::kLinkFieldNumber;
const int fieldreiki::kRefineFieldNumber;
#endif  // !_MSC_VER

fieldreiki::fieldreiki()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fieldreiki::InitAsDefaultInstance() {
}

fieldreiki::fieldreiki(const fieldreiki& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fieldreiki::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  field_ = 0;
  lv_ = 0;
  star_ = 0;
  refineattribute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refineattributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestarnum_ = 0;
  bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestar_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0;
  link_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldreiki::~fieldreiki() {
  SharedDtor();
}

void fieldreiki::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (refineattribute_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_;
  }
  if (refineattributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattributevalue_;
  }
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_type_;
  }
  if (bluestar_value_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_value_;
  }
  if (this != default_instance_) {
  }
}

void fieldreiki::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fieldreiki::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fieldreiki_descriptor_;
}

const fieldreiki& fieldreiki::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

fieldreiki* fieldreiki::default_instance_ = NULL;

fieldreiki* fieldreiki::New() const {
  return new fieldreiki;
}

void fieldreiki::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    field_ = 0;
    lv_ = 0;
    star_ = 0;
    if (has_refineattribute()) {
      if (refineattribute_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_->clear();
      }
    }
    if (has_refineattributevalue()) {
      if (refineattributevalue_ != &::google::protobuf::internal::kEmptyString) {
        refineattributevalue_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bluestarnum_ = 0;
    if (has_bluestar_type()) {
      if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_type_->clear();
      }
    }
    if (has_bluestar_value()) {
      if (bluestar_value_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_value_->clear();
      }
    }
    exp_ = 0;
    link_ = GOOGLE_LONGLONG(0);
  }
  refine_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fieldreiki::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_field;
        break;
      }

      // optional int32 field = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_)));
          set_has_field();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Lv;
        break;
      }

      // optional int32 Lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star;
        break;
      }

      // optional int32 star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refineAttribute;
        break;
      }

      // optional string refineAttribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute().data(), this->refineattribute().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_refineAttributeValue;
        break;
      }

      // optional string refineAttributeValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttributeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattributevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattributevalue().data(), this->refineattributevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_blueStarNum;
        break;
      }

      // optional int32 blueStarNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blueStarNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluestarnum_)));
          set_has_bluestarnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_blueStar_type;
        break;
      }

      // optional string blueStar_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_type().data(), this->bluestar_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_blueStar_value;
        break;
      }

      // optional string blueStar_value = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_value().data(), this->bluestar_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_exp;
        break;
      }

      // optional int32 exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_link;
        break;
      }

      // optional int64 link = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &link_)));
          set_has_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_refine;
        break;
      }

      // repeated .proto_ff.fieldreikirefineDesc refine = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_refine;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fieldreiki::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional int32 field = 4;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->field(), output);
  }

  // optional int32 Lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lv(), output);
  }

  // optional int32 star = 6;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->star(), output);
  }

  // optional string refineAttribute = 7;
  if (has_refineattribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute().data(), this->refineattribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->refineattribute(), output);
  }

  // optional string refineAttributeValue = 8;
  if (has_refineattributevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattributevalue().data(), this->refineattributevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->refineattributevalue(), output);
  }

  // optional int32 blueStarNum = 9;
  if (has_bluestarnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bluestarnum(), output);
  }

  // optional string blueStar_type = 10;
  if (has_bluestar_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_type().data(), this->bluestar_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->bluestar_type(), output);
  }

  // optional string blueStar_value = 11;
  if (has_bluestar_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_value().data(), this->bluestar_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bluestar_value(), output);
  }

  // optional int32 exp = 12;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->exp(), output);
  }

  // optional int64 link = 13;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->link(), output);
  }

  // repeated .proto_ff.fieldreikirefineDesc refine = 14;
  for (int i = 0; i < this->refine_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->refine(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldreiki::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional int32 field = 4;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->field(), target);
  }

  // optional int32 Lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lv(), target);
  }

  // optional int32 star = 6;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->star(), target);
  }

  // optional string refineAttribute = 7;
  if (has_refineattribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute().data(), this->refineattribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->refineattribute(), target);
  }

  // optional string refineAttributeValue = 8;
  if (has_refineattributevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattributevalue().data(), this->refineattributevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->refineattributevalue(), target);
  }

  // optional int32 blueStarNum = 9;
  if (has_bluestarnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bluestarnum(), target);
  }

  // optional string blueStar_type = 10;
  if (has_bluestar_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_type().data(), this->bluestar_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->bluestar_type(), target);
  }

  // optional string blueStar_value = 11;
  if (has_bluestar_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_value().data(), this->bluestar_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bluestar_value(), target);
  }

  // optional int32 exp = 12;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->exp(), target);
  }

  // optional int64 link = 13;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->link(), target);
  }

  // repeated .proto_ff.fieldreikirefineDesc refine = 14;
  for (int i = 0; i < this->refine_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->refine(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fieldreiki::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 field = 4;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field());
    }

    // optional int32 Lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 star = 6;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional string refineAttribute = 7;
    if (has_refineattribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute());
    }

    // optional string refineAttributeValue = 8;
    if (has_refineattributevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattributevalue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 blueStarNum = 9;
    if (has_bluestarnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluestarnum());
    }

    // optional string blueStar_type = 10;
    if (has_bluestar_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_type());
    }

    // optional string blueStar_value = 11;
    if (has_bluestar_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_value());
    }

    // optional int32 exp = 12;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 link = 13;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->link());
    }

  }
  // repeated .proto_ff.fieldreikirefineDesc refine = 14;
  total_size += 1 * this->refine_size();
  for (int i = 0; i < this->refine_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refine(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fieldreiki::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fieldreiki* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldreiki*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fieldreiki::MergeFrom(const fieldreiki& from) {
  GOOGLE_CHECK_NE(&from, this);
  refine_.MergeFrom(from.refine_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_refineattribute()) {
      set_refineattribute(from.refineattribute());
    }
    if (from.has_refineattributevalue()) {
      set_refineattributevalue(from.refineattributevalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bluestarnum()) {
      set_bluestarnum(from.bluestarnum());
    }
    if (from.has_bluestar_type()) {
      set_bluestar_type(from.bluestar_type());
    }
    if (from.has_bluestar_value()) {
      set_bluestar_value(from.bluestar_value());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_link()) {
      set_link(from.link());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fieldreiki::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fieldreiki::CopyFrom(const fieldreiki& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fieldreiki::IsInitialized() const {

  return true;
}

void fieldreiki::Swap(fieldreiki* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(field_, other->field_);
    std::swap(lv_, other->lv_);
    std::swap(star_, other->star_);
    std::swap(refineattribute_, other->refineattribute_);
    std::swap(refineattributevalue_, other->refineattributevalue_);
    std::swap(bluestarnum_, other->bluestarnum_);
    std::swap(bluestar_type_, other->bluestar_type_);
    std::swap(bluestar_value_, other->bluestar_value_);
    std::swap(exp_, other->exp_);
    std::swap(link_, other->link_);
    refine_.Swap(&other->refine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fieldreiki::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fieldreiki_descriptor_;
  metadata.reflection = fieldreiki_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_fieldreiki::kFieldreikiListFieldNumber;
#endif  // !_MSC_VER

Sheet_fieldreiki::Sheet_fieldreiki()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_fieldreiki::InitAsDefaultInstance() {
}

Sheet_fieldreiki::Sheet_fieldreiki(const Sheet_fieldreiki& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_fieldreiki::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_fieldreiki::~Sheet_fieldreiki() {
  SharedDtor();
}

void Sheet_fieldreiki::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_fieldreiki::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_fieldreiki::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_fieldreiki_descriptor_;
}

const Sheet_fieldreiki& Sheet_fieldreiki::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

Sheet_fieldreiki* Sheet_fieldreiki::default_instance_ = NULL;

Sheet_fieldreiki* Sheet_fieldreiki::New() const {
  return new Sheet_fieldreiki;
}

void Sheet_fieldreiki::Clear() {
  fieldreiki_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_fieldreiki::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.fieldreiki fieldreiki_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldreiki_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldreiki_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fieldreiki_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_fieldreiki::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.fieldreiki fieldreiki_List = 1;
  for (int i = 0; i < this->fieldreiki_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldreiki_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_fieldreiki::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.fieldreiki fieldreiki_List = 1;
  for (int i = 0; i < this->fieldreiki_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldreiki_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_fieldreiki::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.fieldreiki fieldreiki_List = 1;
  total_size += 1 * this->fieldreiki_list_size();
  for (int i = 0; i < this->fieldreiki_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldreiki_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_fieldreiki::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_fieldreiki* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_fieldreiki*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_fieldreiki::MergeFrom(const Sheet_fieldreiki& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldreiki_list_.MergeFrom(from.fieldreiki_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_fieldreiki::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_fieldreiki::CopyFrom(const Sheet_fieldreiki& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_fieldreiki::IsInitialized() const {

  return true;
}

void Sheet_fieldreiki::Swap(Sheet_fieldreiki* other) {
  if (other != this) {
    fieldreiki_list_.Swap(&other->fieldreiki_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_fieldreiki::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_fieldreiki_descriptor_;
  metadata.reflection = Sheet_fieldreiki_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fieldexp::kLvFieldNumber;
const int fieldexp::kExpFieldNumber;
#endif  // !_MSC_VER

fieldexp::fieldexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fieldexp::InitAsDefaultInstance() {
}

fieldexp::fieldexp(const fieldexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fieldexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldexp::~fieldexp() {
  SharedDtor();
}

void fieldexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fieldexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fieldexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fieldexp_descriptor_;
}

const fieldexp& fieldexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

fieldexp* fieldexp::default_instance_ = NULL;

fieldexp* fieldexp::New() const {
  return new fieldexp;
}

void fieldexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fieldexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fieldexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fieldexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fieldexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fieldexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fieldexp::MergeFrom(const fieldexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fieldexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fieldexp::CopyFrom(const fieldexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fieldexp::IsInitialized() const {

  return true;
}

void fieldexp::Swap(fieldexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fieldexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fieldexp_descriptor_;
  metadata.reflection = fieldexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_fieldexp::kFieldexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_fieldexp::Sheet_fieldexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_fieldexp::InitAsDefaultInstance() {
}

Sheet_fieldexp::Sheet_fieldexp(const Sheet_fieldexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_fieldexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_fieldexp::~Sheet_fieldexp() {
  SharedDtor();
}

void Sheet_fieldexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_fieldexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_fieldexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_fieldexp_descriptor_;
}

const Sheet_fieldexp& Sheet_fieldexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

Sheet_fieldexp* Sheet_fieldexp::default_instance_ = NULL;

Sheet_fieldexp* Sheet_fieldexp::New() const {
  return new Sheet_fieldexp;
}

void Sheet_fieldexp::Clear() {
  fieldexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_fieldexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.fieldexp fieldexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fieldexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_fieldexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.fieldexp fieldexp_List = 1;
  for (int i = 0; i < this->fieldexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_fieldexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.fieldexp fieldexp_List = 1;
  for (int i = 0; i < this->fieldexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_fieldexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.fieldexp fieldexp_List = 1;
  total_size += 1 * this->fieldexp_list_size();
  for (int i = 0; i < this->fieldexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_fieldexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_fieldexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_fieldexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_fieldexp::MergeFrom(const Sheet_fieldexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldexp_list_.MergeFrom(from.fieldexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_fieldexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_fieldexp::CopyFrom(const Sheet_fieldexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_fieldexp::IsInitialized() const {

  return true;
}

void Sheet_fieldexp::Swap(Sheet_fieldexp* other) {
  if (other != this) {
    fieldexp_list_.Swap(&other->fieldexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_fieldexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_fieldexp_descriptor_;
  metadata.reflection = Sheet_fieldexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fieldvalue::kIdFieldNumber;
const int fieldvalue::kLvValueFieldNumber;
#endif  // !_MSC_VER

fieldvalue::fieldvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fieldvalue::InitAsDefaultInstance() {
}

fieldvalue::fieldvalue(const fieldvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fieldvalue::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldvalue::~fieldvalue() {
  SharedDtor();
}

void fieldvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fieldvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fieldvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fieldvalue_descriptor_;
}

const fieldvalue& fieldvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

fieldvalue* fieldvalue::default_instance_ = NULL;

fieldvalue* fieldvalue::New() const {
  return new fieldvalue;
}

void fieldvalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  lvvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fieldvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvValue;
        break;
      }

      // repeated int32 lvValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lvvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lvvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fieldvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated int32 lvValue = 2;
  for (int i = 0; i < this->lvvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lvvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated int32 lvValue = 2;
  for (int i = 0; i < this->lvvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lvvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fieldvalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated int32 lvValue = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lvvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lvvalue(i));
    }
    total_size += 1 * this->lvvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fieldvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fieldvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fieldvalue::MergeFrom(const fieldvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  lvvalue_.MergeFrom(from.lvvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fieldvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fieldvalue::CopyFrom(const fieldvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fieldvalue::IsInitialized() const {

  return true;
}

void fieldvalue::Swap(fieldvalue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    lvvalue_.Swap(&other->lvvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fieldvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fieldvalue_descriptor_;
  metadata.reflection = fieldvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_fieldvalue::kFieldvalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_fieldvalue::Sheet_fieldvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_fieldvalue::InitAsDefaultInstance() {
}

Sheet_fieldvalue::Sheet_fieldvalue(const Sheet_fieldvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_fieldvalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_fieldvalue::~Sheet_fieldvalue() {
  SharedDtor();
}

void Sheet_fieldvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_fieldvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_fieldvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_fieldvalue_descriptor_;
}

const Sheet_fieldvalue& Sheet_fieldvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

Sheet_fieldvalue* Sheet_fieldvalue::default_instance_ = NULL;

Sheet_fieldvalue* Sheet_fieldvalue::New() const {
  return new Sheet_fieldvalue;
}

void Sheet_fieldvalue::Clear() {
  fieldvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_fieldvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.fieldvalue fieldvalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fieldvalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_fieldvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.fieldvalue fieldvalue_List = 1;
  for (int i = 0; i < this->fieldvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_fieldvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.fieldvalue fieldvalue_List = 1;
  for (int i = 0; i < this->fieldvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_fieldvalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.fieldvalue fieldvalue_List = 1;
  total_size += 1 * this->fieldvalue_list_size();
  for (int i = 0; i < this->fieldvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_fieldvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_fieldvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_fieldvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_fieldvalue::MergeFrom(const Sheet_fieldvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalue_list_.MergeFrom(from.fieldvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_fieldvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_fieldvalue::CopyFrom(const Sheet_fieldvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_fieldvalue::IsInitialized() const {

  return true;
}

void Sheet_fieldvalue::Swap(Sheet_fieldvalue* other) {
  if (other != this) {
    fieldvalue_list_.Swap(&other->fieldvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_fieldvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_fieldvalue_descriptor_;
  metadata.reflection = Sheet_fieldvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fieldexpand::kNumberFieldNumber;
const int fieldexpand::kLvFieldNumber;
const int fieldexpand::kIdFieldNumber;
const int fieldexpand::kNumFieldNumber;
#endif  // !_MSC_VER

fieldexpand::fieldexpand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fieldexpand::InitAsDefaultInstance() {
}

fieldexpand::fieldexpand(const fieldexpand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fieldexpand::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  lv_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldexpand::~fieldexpand() {
  SharedDtor();
}

void fieldexpand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fieldexpand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fieldexpand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fieldexpand_descriptor_;
}

const fieldexpand& fieldexpand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

fieldexpand* fieldexpand::default_instance_ = NULL;

fieldexpand* fieldexpand::New() const {
  return new fieldexpand;
}

void fieldexpand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    lv_ = 0;
    id_ = GOOGLE_LONGLONG(0);
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fieldexpand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fieldexpand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldexpand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fieldexpand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fieldexpand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fieldexpand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldexpand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fieldexpand::MergeFrom(const fieldexpand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fieldexpand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fieldexpand::CopyFrom(const fieldexpand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fieldexpand::IsInitialized() const {

  return true;
}

void fieldexpand::Swap(fieldexpand* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(lv_, other->lv_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fieldexpand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fieldexpand_descriptor_;
  metadata.reflection = fieldexpand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_fieldexpand::kFieldexpandListFieldNumber;
#endif  // !_MSC_VER

Sheet_fieldexpand::Sheet_fieldexpand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_fieldexpand::InitAsDefaultInstance() {
}

Sheet_fieldexpand::Sheet_fieldexpand(const Sheet_fieldexpand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_fieldexpand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_fieldexpand::~Sheet_fieldexpand() {
  SharedDtor();
}

void Sheet_fieldexpand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_fieldexpand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_fieldexpand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_fieldexpand_descriptor_;
}

const Sheet_fieldexpand& Sheet_fieldexpand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

Sheet_fieldexpand* Sheet_fieldexpand::default_instance_ = NULL;

Sheet_fieldexpand* Sheet_fieldexpand::New() const {
  return new Sheet_fieldexpand;
}

void Sheet_fieldexpand::Clear() {
  fieldexpand_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_fieldexpand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.fieldexpand fieldexpand_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldexpand_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldexpand_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fieldexpand_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_fieldexpand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.fieldexpand fieldexpand_List = 1;
  for (int i = 0; i < this->fieldexpand_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldexpand_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_fieldexpand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.fieldexpand fieldexpand_List = 1;
  for (int i = 0; i < this->fieldexpand_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldexpand_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_fieldexpand::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.fieldexpand fieldexpand_List = 1;
  total_size += 1 * this->fieldexpand_list_size();
  for (int i = 0; i < this->fieldexpand_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldexpand_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_fieldexpand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_fieldexpand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_fieldexpand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_fieldexpand::MergeFrom(const Sheet_fieldexpand& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldexpand_list_.MergeFrom(from.fieldexpand_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_fieldexpand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_fieldexpand::CopyFrom(const Sheet_fieldexpand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_fieldexpand::IsInitialized() const {

  return true;
}

void Sheet_fieldexpand::Swap(Sheet_fieldexpand* other) {
  if (other != this) {
    fieldexpand_list_.Swap(&other->fieldexpand_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_fieldexpand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_fieldexpand_descriptor_;
  metadata.reflection = Sheet_fieldexpand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fieldstong::kIdFieldNumber;
const int fieldstong::kStongIdFieldNumber;
const int fieldstong::kFenJieIdFieldNumber;
const int fieldstong::kFenJieNumFieldNumber;
#endif  // !_MSC_VER

fieldstong::fieldstong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fieldstong::InitAsDefaultInstance() {
}

fieldstong::fieldstong(const fieldstong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fieldstong::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  stongid_ = GOOGLE_LONGLONG(0);
  fenjieid_ = GOOGLE_LONGLONG(0);
  fenjienum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fieldstong::~fieldstong() {
  SharedDtor();
}

void fieldstong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fieldstong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fieldstong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fieldstong_descriptor_;
}

const fieldstong& fieldstong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

fieldstong* fieldstong::default_instance_ = NULL;

fieldstong* fieldstong::New() const {
  return new fieldstong;
}

void fieldstong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    stongid_ = GOOGLE_LONGLONG(0);
    fenjieid_ = GOOGLE_LONGLONG(0);
    fenjienum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fieldstong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stongId;
        break;
      }

      // optional int64 stongId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stongId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stongid_)));
          set_has_stongid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fenJieId;
        break;
      }

      // optional int64 fenJieId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fenJieId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fenjieid_)));
          set_has_fenjieid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fenJieNum;
        break;
      }

      // optional int32 fenJieNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fenJieNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fenjienum_)));
          set_has_fenjienum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fieldstong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 stongId = 2;
  if (has_stongid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stongid(), output);
  }

  // optional int64 fenJieId = 3;
  if (has_fenjieid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fenjieid(), output);
  }

  // optional int32 fenJieNum = 4;
  if (has_fenjienum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fenjienum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fieldstong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 stongId = 2;
  if (has_stongid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stongid(), target);
  }

  // optional int64 fenJieId = 3;
  if (has_fenjieid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fenjieid(), target);
  }

  // optional int32 fenJieNum = 4;
  if (has_fenjienum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fenjienum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fieldstong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 stongId = 2;
    if (has_stongid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stongid());
    }

    // optional int64 fenJieId = 3;
    if (has_fenjieid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fenjieid());
    }

    // optional int32 fenJieNum = 4;
    if (has_fenjienum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fenjienum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fieldstong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fieldstong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fieldstong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fieldstong::MergeFrom(const fieldstong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stongid()) {
      set_stongid(from.stongid());
    }
    if (from.has_fenjieid()) {
      set_fenjieid(from.fenjieid());
    }
    if (from.has_fenjienum()) {
      set_fenjienum(from.fenjienum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fieldstong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fieldstong::CopyFrom(const fieldstong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fieldstong::IsInitialized() const {

  return true;
}

void fieldstong::Swap(fieldstong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stongid_, other->stongid_);
    std::swap(fenjieid_, other->fenjieid_);
    std::swap(fenjienum_, other->fenjienum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fieldstong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fieldstong_descriptor_;
  metadata.reflection = fieldstong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_fieldstong::kFieldstongListFieldNumber;
#endif  // !_MSC_VER

Sheet_fieldstong::Sheet_fieldstong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_fieldstong::InitAsDefaultInstance() {
}

Sheet_fieldstong::Sheet_fieldstong(const Sheet_fieldstong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_fieldstong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_fieldstong::~Sheet_fieldstong() {
  SharedDtor();
}

void Sheet_fieldstong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_fieldstong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_fieldstong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_fieldstong_descriptor_;
}

const Sheet_fieldstong& Sheet_fieldstong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_field_2eproto();
  return *default_instance_;
}

Sheet_fieldstong* Sheet_fieldstong::default_instance_ = NULL;

Sheet_fieldstong* Sheet_fieldstong::New() const {
  return new Sheet_fieldstong;
}

void Sheet_fieldstong::Clear() {
  fieldstong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_fieldstong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.fieldstong fieldstong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldstong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldstong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fieldstong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_fieldstong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.fieldstong fieldstong_List = 1;
  for (int i = 0; i < this->fieldstong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldstong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_fieldstong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.fieldstong fieldstong_List = 1;
  for (int i = 0; i < this->fieldstong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldstong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_fieldstong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.fieldstong fieldstong_List = 1;
  total_size += 1 * this->fieldstong_list_size();
  for (int i = 0; i < this->fieldstong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldstong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_fieldstong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_fieldstong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_fieldstong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_fieldstong::MergeFrom(const Sheet_fieldstong& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldstong_list_.MergeFrom(from.fieldstong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_fieldstong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_fieldstong::CopyFrom(const Sheet_fieldstong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_fieldstong::IsInitialized() const {

  return true;
}

void Sheet_fieldstong::Swap(Sheet_fieldstong* other) {
  if (other != this) {
    fieldstong_list_.Swap(&other->fieldstong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_fieldstong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_fieldstong_descriptor_;
  metadata.reflection = Sheet_fieldstong_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
