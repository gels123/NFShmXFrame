// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_ItemItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ItemItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ItemItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ItemItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fItem_2eproto() {
  protobuf_AddDesc_E_5fItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Item.proto");
  GOOGLE_CHECK(file != NULL);
  E_ItemItem_descriptor_ = file->message_type(0);
  static const int E_ItemItem_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_functionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_usecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_waiguanlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_levelrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_bindtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_istradebind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_dropnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_stacklimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_sellprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_sellbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_iscanbatchuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_dayuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, m_uselimit_),
  };
  E_ItemItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ItemItem_descriptor_,
      E_ItemItem::default_instance_,
      E_ItemItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ItemItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ItemItem));
  Sheet_ItemItem_descriptor_ = file->message_type(1);
  static const int Sheet_ItemItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ItemItem, e_itemitem_list_),
  };
  Sheet_ItemItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ItemItem_descriptor_,
      Sheet_ItemItem::default_instance_,
      Sheet_ItemItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ItemItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ItemItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ItemItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ItemItem_descriptor_, &E_ItemItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ItemItem_descriptor_, &Sheet_ItemItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fItem_2eproto() {
  delete E_ItemItem::default_instance_;
  delete E_ItemItem_reflection_;
  delete Sheet_ItemItem::default_instance_;
  delete Sheet_ItemItem_reflection_;
}

void protobuf_AddDesc_E_5fItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014E_Item.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"\303\007\n\nE_ItemItem\022\032\n\004m_id\030\001 \001(\005B\014\302\377"
    "\024\010\347\211\251\345\223\201ID\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\347\211\251\345\223\201\345\220"
    "\215\347\247\260\220\301\024@\022$\n\nm_itemtype\030\003 \001(\005B\020\302\377\024\014\347\211\251\345\223\201"
    "\347\261\273\345\236\213\022 \n\tm_subtype\030\004 \001(\005B\r\302\377\024\t\345\255\220\347\261\273\345\236\213"
    "\022.\n\016m_functiontype\030\005 \001(\005B\026\302\377\024\022\347\211\251\345\223\201\345\212\237\350"
    "\203\275\347\261\273\345\236\213\0223\n\017m_functionvalue\030\006 \001(\tB\032\302\377\024\022\347"
    "\211\251\345\223\201\345\212\237\350\203\275\345\217\202\346\225\260\220\301\024@\022,\n\016m_usecondition\030"
    "\007 \001(\tB\024\302\377\024\014\344\275\277\347\224\250\346\235\241\344\273\266\220\301\024@\022#\n\rm_waiguan"
    "link\030\010 \001(\003B\014\302\377\024\010\345\244\226\350\247\202id\022!\n\007m_level\030\t \001("
    "\005B\020\302\377\024\014\347\211\251\345\223\201\347\255\211\347\272\247\022#\n\tm_quality\030\n \001(\005B\020"
    "\302\377\024\014\347\211\251\345\223\201\345\223\201\350\264\250\022(\n\016m_levelrequest\030\013 \001(\005"
    "B\020\302\377\024\014\344\275\277\347\224\250\347\255\211\347\272\247\022*\n\014m_profession\030\014 \001(\t"
    "B\024\302\377\024\014\344\275\277\347\224\250\350\201\214\344\270\232\220\301\024@\022$\n\nm_bindtype\030\r \001"
    "(\005B\020\302\377\024\014\347\273\221\345\256\232\347\261\273\345\236\213\022-\n\rm_istradebind\030\016 "
    "\001(\005B\026\302\377\024\022\346\230\257\345\220\246\344\272\244\346\230\223\347\273\221\345\256\232\022)\n\tm_dropnum"
    "\030\017 \001(\005B\026\302\377\024\022\346\257\217\346\227\245\346\216\211\350\220\275\344\270\212\351\231\220\022&\n\014m_stac"
    "klimit\030\020 \001(\005B\020\302\377\024\014\345\240\206\345\217\240\344\270\212\351\231\220\022%\n\013m_sell"
    "price\030\021 \001(\005B\020\302\377\024\014\345\207\272\345\224\256\344\273\267\346\240\274\022#\n\tm_sellb"
    "ox\030\022 \001(\003B\020\302\377\024\014\345\207\272\345\224\256\346\216\211\350\220\275\022.\n\013m_broadcas"
    "t\030\023 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\350\267\221\351\251\254\347\201\257\345\271\277\346\222\255\0222\n\017m_"
    "iscanbatchuse\030\024 \001(\005B\031\302\377\024\025\346\230\257\345\220\246\345\217\257\346\211\271\351\207\217"
    "\344\275\277\347\224\250\022(\n\010m_dayuse\030\025 \001(\005B\026\302\377\024\022\346\257\217\346\227\245\344\275\277\347"
    "\224\250\346\254\241\346\225\260\022 \n\006m_time\030\026 \001(\005B\020\302\377\024\014\351\231\220\346\227\266\351\201\223\345"
    "\205\267\0221\n\nm_uselimit\030\027 \001(\tB\035\302\377\024\025\347\246\201\347\224\250\346\234\254\351\201\223"
    "\345\205\267\345\234\260\345\233\276\220\301\024@\"F\n\016Sheet_ItemItem\0224\n\017E_Ite"
    "mItem_List\030\001 \003(\0132\024.proto_ff.E_ItemItemB\005"
    "\210\301\024\200 ", 1085);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Item.proto", &protobuf_RegisterTypes);
  E_ItemItem::default_instance_ = new E_ItemItem();
  Sheet_ItemItem::default_instance_ = new Sheet_ItemItem();
  E_ItemItem::default_instance_->InitAsDefaultInstance();
  Sheet_ItemItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fItem_2eproto {
  StaticDescriptorInitializer_E_5fItem_2eproto() {
    protobuf_AddDesc_E_5fItem_2eproto();
  }
} static_descriptor_initializer_E_5fItem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_ItemItem::kMIdFieldNumber;
const int E_ItemItem::kMNameFieldNumber;
const int E_ItemItem::kMItemtypeFieldNumber;
const int E_ItemItem::kMSubtypeFieldNumber;
const int E_ItemItem::kMFunctiontypeFieldNumber;
const int E_ItemItem::kMFunctionvalueFieldNumber;
const int E_ItemItem::kMUseconditionFieldNumber;
const int E_ItemItem::kMWaiguanlinkFieldNumber;
const int E_ItemItem::kMLevelFieldNumber;
const int E_ItemItem::kMQualityFieldNumber;
const int E_ItemItem::kMLevelrequestFieldNumber;
const int E_ItemItem::kMProfessionFieldNumber;
const int E_ItemItem::kMBindtypeFieldNumber;
const int E_ItemItem::kMIstradebindFieldNumber;
const int E_ItemItem::kMDropnumFieldNumber;
const int E_ItemItem::kMStacklimitFieldNumber;
const int E_ItemItem::kMSellpriceFieldNumber;
const int E_ItemItem::kMSellboxFieldNumber;
const int E_ItemItem::kMBroadcastFieldNumber;
const int E_ItemItem::kMIscanbatchuseFieldNumber;
const int E_ItemItem::kMDayuseFieldNumber;
const int E_ItemItem::kMTimeFieldNumber;
const int E_ItemItem::kMUselimitFieldNumber;
#endif  // !_MSC_VER

E_ItemItem::E_ItemItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ItemItem::InitAsDefaultInstance() {
}

E_ItemItem::E_ItemItem(const E_ItemItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ItemItem::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_itemtype_ = 0;
  m_subtype_ = 0;
  m_functiontype_ = 0;
  m_functionvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_usecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_waiguanlink_ = GOOGLE_LONGLONG(0);
  m_level_ = 0;
  m_quality_ = 0;
  m_levelrequest_ = 0;
  m_profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_bindtype_ = 0;
  m_istradebind_ = 0;
  m_dropnum_ = 0;
  m_stacklimit_ = 0;
  m_sellprice_ = 0;
  m_sellbox_ = GOOGLE_LONGLONG(0);
  m_broadcast_ = 0;
  m_iscanbatchuse_ = 0;
  m_dayuse_ = 0;
  m_time_ = 0;
  m_uselimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ItemItem::~E_ItemItem() {
  SharedDtor();
}

void E_ItemItem::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_functionvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete m_functionvalue_;
  }
  if (m_usecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_usecondition_;
  }
  if (m_profession_ != &::google::protobuf::internal::kEmptyString) {
    delete m_profession_;
  }
  if (m_uselimit_ != &::google::protobuf::internal::kEmptyString) {
    delete m_uselimit_;
  }
  if (this != default_instance_) {
  }
}

void E_ItemItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ItemItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ItemItem_descriptor_;
}

const E_ItemItem& E_ItemItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fItem_2eproto();
  return *default_instance_;
}

E_ItemItem* E_ItemItem::default_instance_ = NULL;

E_ItemItem* E_ItemItem::New() const {
  return new E_ItemItem;
}

void E_ItemItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_itemtype_ = 0;
    m_subtype_ = 0;
    m_functiontype_ = 0;
    if (has_m_functionvalue()) {
      if (m_functionvalue_ != &::google::protobuf::internal::kEmptyString) {
        m_functionvalue_->clear();
      }
    }
    if (has_m_usecondition()) {
      if (m_usecondition_ != &::google::protobuf::internal::kEmptyString) {
        m_usecondition_->clear();
      }
    }
    m_waiguanlink_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_level_ = 0;
    m_quality_ = 0;
    m_levelrequest_ = 0;
    if (has_m_profession()) {
      if (m_profession_ != &::google::protobuf::internal::kEmptyString) {
        m_profession_->clear();
      }
    }
    m_bindtype_ = 0;
    m_istradebind_ = 0;
    m_dropnum_ = 0;
    m_stacklimit_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_sellprice_ = 0;
    m_sellbox_ = GOOGLE_LONGLONG(0);
    m_broadcast_ = 0;
    m_iscanbatchuse_ = 0;
    m_dayuse_ = 0;
    m_time_ = 0;
    if (has_m_uselimit()) {
      if (m_uselimit_ != &::google::protobuf::internal::kEmptyString) {
        m_uselimit_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ItemItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemtype;
        break;
      }

      // optional int32 m_itemtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemtype_)));
          set_has_m_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_subtype;
        break;
      }

      // optional int32 m_subtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subtype_)));
          set_has_m_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_functiontype;
        break;
      }

      // optional int32 m_functiontype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functiontype_)));
          set_has_m_functiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_functionvalue;
        break;
      }

      // optional string m_functionvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_functionvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_functionvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_functionvalue().data(), this->m_functionvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_usecondition;
        break;
      }

      // optional string m_usecondition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_usecondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_usecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_usecondition().data(), this->m_usecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_waiguanlink;
        break;
      }

      // optional int64 m_waiguanlink = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_waiguanlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_waiguanlink_)));
          set_has_m_waiguanlink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_levelrequest;
        break;
      }

      // optional int32 m_levelrequest = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_levelrequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_levelrequest_)));
          set_has_m_levelrequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_profession;
        break;
      }

      // optional string m_profession = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_profession().data(), this->m_profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_bindtype;
        break;
      }

      // optional int32 m_bindtype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bindtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bindtype_)));
          set_has_m_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_istradebind;
        break;
      }

      // optional int32 m_istradebind = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_istradebind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_istradebind_)));
          set_has_m_istradebind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_dropnum;
        break;
      }

      // optional int32 m_dropnum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dropnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dropnum_)));
          set_has_m_dropnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_stacklimit;
        break;
      }

      // optional int32 m_stacklimit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_stacklimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_stacklimit_)));
          set_has_m_stacklimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_sellprice;
        break;
      }

      // optional int32 m_sellprice = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sellprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sellprice_)));
          set_has_m_sellprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_sellbox;
        break;
      }

      // optional int64 m_sellbox = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sellbox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_sellbox_)));
          set_has_m_sellbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_broadcast;
        break;
      }

      // optional int32 m_broadcast = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_broadcast_)));
          set_has_m_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_iscanbatchuse;
        break;
      }

      // optional int32 m_iscanbatchuse = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_iscanbatchuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iscanbatchuse_)));
          set_has_m_iscanbatchuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_dayuse;
        break;
      }

      // optional int32 m_dayuse = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dayuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dayuse_)));
          set_has_m_dayuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_m_uselimit;
        break;
      }

      // optional string m_uselimit = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_uselimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_uselimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_uselimit().data(), this->m_uselimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ItemItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_itemtype = 3;
  if (has_m_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_itemtype(), output);
  }

  // optional int32 m_subtype = 4;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_subtype(), output);
  }

  // optional int32 m_functiontype = 5;
  if (has_m_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_functiontype(), output);
  }

  // optional string m_functionvalue = 6;
  if (has_m_functionvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_functionvalue().data(), this->m_functionvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_functionvalue(), output);
  }

  // optional string m_usecondition = 7;
  if (has_m_usecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_usecondition().data(), this->m_usecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_usecondition(), output);
  }

  // optional int64 m_waiguanlink = 8;
  if (has_m_waiguanlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_waiguanlink(), output);
  }

  // optional int32 m_level = 9;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_level(), output);
  }

  // optional int32 m_quality = 10;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_quality(), output);
  }

  // optional int32 m_levelrequest = 11;
  if (has_m_levelrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_levelrequest(), output);
  }

  // optional string m_profession = 12;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_profession().data(), this->m_profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->m_profession(), output);
  }

  // optional int32 m_bindtype = 13;
  if (has_m_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_bindtype(), output);
  }

  // optional int32 m_istradebind = 14;
  if (has_m_istradebind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_istradebind(), output);
  }

  // optional int32 m_dropnum = 15;
  if (has_m_dropnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_dropnum(), output);
  }

  // optional int32 m_stacklimit = 16;
  if (has_m_stacklimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_stacklimit(), output);
  }

  // optional int32 m_sellprice = 17;
  if (has_m_sellprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_sellprice(), output);
  }

  // optional int64 m_sellbox = 18;
  if (has_m_sellbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->m_sellbox(), output);
  }

  // optional int32 m_broadcast = 19;
  if (has_m_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_broadcast(), output);
  }

  // optional int32 m_iscanbatchuse = 20;
  if (has_m_iscanbatchuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_iscanbatchuse(), output);
  }

  // optional int32 m_dayuse = 21;
  if (has_m_dayuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_dayuse(), output);
  }

  // optional int32 m_time = 22;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_time(), output);
  }

  // optional string m_uselimit = 23;
  if (has_m_uselimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_uselimit().data(), this->m_uselimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->m_uselimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ItemItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_itemtype = 3;
  if (has_m_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_itemtype(), target);
  }

  // optional int32 m_subtype = 4;
  if (has_m_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_subtype(), target);
  }

  // optional int32 m_functiontype = 5;
  if (has_m_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_functiontype(), target);
  }

  // optional string m_functionvalue = 6;
  if (has_m_functionvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_functionvalue().data(), this->m_functionvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_functionvalue(), target);
  }

  // optional string m_usecondition = 7;
  if (has_m_usecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_usecondition().data(), this->m_usecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_usecondition(), target);
  }

  // optional int64 m_waiguanlink = 8;
  if (has_m_waiguanlink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_waiguanlink(), target);
  }

  // optional int32 m_level = 9;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_level(), target);
  }

  // optional int32 m_quality = 10;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_quality(), target);
  }

  // optional int32 m_levelrequest = 11;
  if (has_m_levelrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_levelrequest(), target);
  }

  // optional string m_profession = 12;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_profession().data(), this->m_profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->m_profession(), target);
  }

  // optional int32 m_bindtype = 13;
  if (has_m_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_bindtype(), target);
  }

  // optional int32 m_istradebind = 14;
  if (has_m_istradebind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_istradebind(), target);
  }

  // optional int32 m_dropnum = 15;
  if (has_m_dropnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_dropnum(), target);
  }

  // optional int32 m_stacklimit = 16;
  if (has_m_stacklimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_stacklimit(), target);
  }

  // optional int32 m_sellprice = 17;
  if (has_m_sellprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_sellprice(), target);
  }

  // optional int64 m_sellbox = 18;
  if (has_m_sellbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->m_sellbox(), target);
  }

  // optional int32 m_broadcast = 19;
  if (has_m_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_broadcast(), target);
  }

  // optional int32 m_iscanbatchuse = 20;
  if (has_m_iscanbatchuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_iscanbatchuse(), target);
  }

  // optional int32 m_dayuse = 21;
  if (has_m_dayuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_dayuse(), target);
  }

  // optional int32 m_time = 22;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_time(), target);
  }

  // optional string m_uselimit = 23;
  if (has_m_uselimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_uselimit().data(), this->m_uselimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->m_uselimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ItemItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_itemtype = 3;
    if (has_m_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemtype());
    }

    // optional int32 m_subtype = 4;
    if (has_m_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subtype());
    }

    // optional int32 m_functiontype = 5;
    if (has_m_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functiontype());
    }

    // optional string m_functionvalue = 6;
    if (has_m_functionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_functionvalue());
    }

    // optional string m_usecondition = 7;
    if (has_m_usecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_usecondition());
    }

    // optional int64 m_waiguanlink = 8;
    if (has_m_waiguanlink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_waiguanlink());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_level = 9;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_quality = 10;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_levelrequest = 11;
    if (has_m_levelrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_levelrequest());
    }

    // optional string m_profession = 12;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_profession());
    }

    // optional int32 m_bindtype = 13;
    if (has_m_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bindtype());
    }

    // optional int32 m_istradebind = 14;
    if (has_m_istradebind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_istradebind());
    }

    // optional int32 m_dropnum = 15;
    if (has_m_dropnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dropnum());
    }

    // optional int32 m_stacklimit = 16;
    if (has_m_stacklimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_stacklimit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_sellprice = 17;
    if (has_m_sellprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sellprice());
    }

    // optional int64 m_sellbox = 18;
    if (has_m_sellbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_sellbox());
    }

    // optional int32 m_broadcast = 19;
    if (has_m_broadcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_broadcast());
    }

    // optional int32 m_iscanbatchuse = 20;
    if (has_m_iscanbatchuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iscanbatchuse());
    }

    // optional int32 m_dayuse = 21;
    if (has_m_dayuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dayuse());
    }

    // optional int32 m_time = 22;
    if (has_m_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // optional string m_uselimit = 23;
    if (has_m_uselimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_uselimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ItemItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ItemItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ItemItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ItemItem::MergeFrom(const E_ItemItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_itemtype()) {
      set_m_itemtype(from.m_itemtype());
    }
    if (from.has_m_subtype()) {
      set_m_subtype(from.m_subtype());
    }
    if (from.has_m_functiontype()) {
      set_m_functiontype(from.m_functiontype());
    }
    if (from.has_m_functionvalue()) {
      set_m_functionvalue(from.m_functionvalue());
    }
    if (from.has_m_usecondition()) {
      set_m_usecondition(from.m_usecondition());
    }
    if (from.has_m_waiguanlink()) {
      set_m_waiguanlink(from.m_waiguanlink());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_levelrequest()) {
      set_m_levelrequest(from.m_levelrequest());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_bindtype()) {
      set_m_bindtype(from.m_bindtype());
    }
    if (from.has_m_istradebind()) {
      set_m_istradebind(from.m_istradebind());
    }
    if (from.has_m_dropnum()) {
      set_m_dropnum(from.m_dropnum());
    }
    if (from.has_m_stacklimit()) {
      set_m_stacklimit(from.m_stacklimit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_sellprice()) {
      set_m_sellprice(from.m_sellprice());
    }
    if (from.has_m_sellbox()) {
      set_m_sellbox(from.m_sellbox());
    }
    if (from.has_m_broadcast()) {
      set_m_broadcast(from.m_broadcast());
    }
    if (from.has_m_iscanbatchuse()) {
      set_m_iscanbatchuse(from.m_iscanbatchuse());
    }
    if (from.has_m_dayuse()) {
      set_m_dayuse(from.m_dayuse());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_uselimit()) {
      set_m_uselimit(from.m_uselimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ItemItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ItemItem::CopyFrom(const E_ItemItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ItemItem::IsInitialized() const {

  return true;
}

void E_ItemItem::Swap(E_ItemItem* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_itemtype_, other->m_itemtype_);
    std::swap(m_subtype_, other->m_subtype_);
    std::swap(m_functiontype_, other->m_functiontype_);
    std::swap(m_functionvalue_, other->m_functionvalue_);
    std::swap(m_usecondition_, other->m_usecondition_);
    std::swap(m_waiguanlink_, other->m_waiguanlink_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_levelrequest_, other->m_levelrequest_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_bindtype_, other->m_bindtype_);
    std::swap(m_istradebind_, other->m_istradebind_);
    std::swap(m_dropnum_, other->m_dropnum_);
    std::swap(m_stacklimit_, other->m_stacklimit_);
    std::swap(m_sellprice_, other->m_sellprice_);
    std::swap(m_sellbox_, other->m_sellbox_);
    std::swap(m_broadcast_, other->m_broadcast_);
    std::swap(m_iscanbatchuse_, other->m_iscanbatchuse_);
    std::swap(m_dayuse_, other->m_dayuse_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_uselimit_, other->m_uselimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ItemItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ItemItem_descriptor_;
  metadata.reflection = E_ItemItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ItemItem::kEItemItemListFieldNumber;
#endif  // !_MSC_VER

Sheet_ItemItem::Sheet_ItemItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ItemItem::InitAsDefaultInstance() {
}

Sheet_ItemItem::Sheet_ItemItem(const Sheet_ItemItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ItemItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ItemItem::~Sheet_ItemItem() {
  SharedDtor();
}

void Sheet_ItemItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ItemItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ItemItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ItemItem_descriptor_;
}

const Sheet_ItemItem& Sheet_ItemItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fItem_2eproto();
  return *default_instance_;
}

Sheet_ItemItem* Sheet_ItemItem::default_instance_ = NULL;

Sheet_ItemItem* Sheet_ItemItem::New() const {
  return new Sheet_ItemItem;
}

void Sheet_ItemItem::Clear() {
  e_itemitem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ItemItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ItemItem E_ItemItem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ItemItem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_itemitem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ItemItem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ItemItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ItemItem E_ItemItem_List = 1;
  for (int i = 0; i < this->e_itemitem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_itemitem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ItemItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ItemItem E_ItemItem_List = 1;
  for (int i = 0; i < this->e_itemitem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_itemitem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ItemItem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ItemItem E_ItemItem_List = 1;
  total_size += 1 * this->e_itemitem_list_size();
  for (int i = 0; i < this->e_itemitem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_itemitem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ItemItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ItemItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ItemItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ItemItem::MergeFrom(const Sheet_ItemItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_itemitem_list_.MergeFrom(from.e_itemitem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ItemItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ItemItem::CopyFrom(const Sheet_ItemItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ItemItem::IsInitialized() const {

  return true;
}

void Sheet_ItemItem::Swap(Sheet_ItemItem* other) {
  if (other != this) {
    e_itemitem_list_.Swap(&other->e_itemitem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ItemItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ItemItem_descriptor_;
  metadata.reflection = Sheet_ItemItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
