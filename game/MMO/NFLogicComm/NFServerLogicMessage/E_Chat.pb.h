// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Chat.proto

#ifndef PROTOBUF_E_5fChat_2eproto__INCLUDED
#define PROTOBUF_E_5fChat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fChat_2eproto();
void protobuf_AssignDesc_E_5fChat_2eproto();
void protobuf_ShutdownFile_E_5fChat_2eproto();

class E_ChatChat;
class Sheet_ChatChat;
class E_ChatSpecialchat;
class Sheet_ChatSpecialchat;

// ===================================================================

class E_ChatChat : public ::google::protobuf::Message {
 public:
  E_ChatChat();
  virtual ~E_ChatChat();

  E_ChatChat(const E_ChatChat& from);

  inline E_ChatChat& operator=(const E_ChatChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_ChatChat& default_instance();

  void Swap(E_ChatChat* other);

  // implements Message ----------------------------------------------

  E_ChatChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_ChatChat& from);
  void MergeFrom(const E_ChatChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_chatid = 1;
  inline bool has_m_chatid() const;
  inline void clear_m_chatid();
  static const int kMChatidFieldNumber = 1;
  inline ::google::protobuf::int64 m_chatid() const;
  inline void set_m_chatid(::google::protobuf::int64 value);

  // optional int32 m_chattype = 2;
  inline bool has_m_chattype() const;
  inline void clear_m_chattype();
  static const int kMChattypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_chattype() const;
  inline void set_m_chattype(::google::protobuf::int32 value);

  // optional int32 m_showtime = 3;
  inline bool has_m_showtime() const;
  inline void clear_m_showtime();
  static const int kMShowtimeFieldNumber = 3;
  inline ::google::protobuf::int32 m_showtime() const;
  inline void set_m_showtime(::google::protobuf::int32 value);

  // optional string m_chatcontent = 4;
  inline bool has_m_chatcontent() const;
  inline void clear_m_chatcontent();
  static const int kMChatcontentFieldNumber = 4;
  inline const ::std::string& m_chatcontent() const;
  inline void set_m_chatcontent(const ::std::string& value);
  inline void set_m_chatcontent(const char* value);
  inline void set_m_chatcontent(const char* value, size_t size);
  inline ::std::string* mutable_m_chatcontent();
  inline ::std::string* release_m_chatcontent();
  inline void set_allocated_m_chatcontent(::std::string* m_chatcontent);

  // optional int32 m_channel = 5;
  inline bool has_m_channel() const;
  inline void clear_m_channel();
  static const int kMChannelFieldNumber = 5;
  inline ::google::protobuf::int32 m_channel() const;
  inline void set_m_channel(::google::protobuf::int32 value);

  // optional int32 m_crossservice = 6;
  inline bool has_m_crossservice() const;
  inline void clear_m_crossservice();
  static const int kMCrossserviceFieldNumber = 6;
  inline ::google::protobuf::int32 m_crossservice() const;
  inline void set_m_crossservice(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_ChatChat)
 private:
  inline void set_has_m_chatid();
  inline void clear_has_m_chatid();
  inline void set_has_m_chattype();
  inline void clear_has_m_chattype();
  inline void set_has_m_showtime();
  inline void clear_has_m_showtime();
  inline void set_has_m_chatcontent();
  inline void clear_has_m_chatcontent();
  inline void set_has_m_channel();
  inline void clear_has_m_channel();
  inline void set_has_m_crossservice();
  inline void clear_has_m_crossservice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_chatid_;
  ::google::protobuf::int32 m_chattype_;
  ::google::protobuf::int32 m_showtime_;
  ::std::string* m_chatcontent_;
  ::google::protobuf::int32 m_channel_;
  ::google::protobuf::int32 m_crossservice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fChat_2eproto();
  friend void protobuf_AssignDesc_E_5fChat_2eproto();
  friend void protobuf_ShutdownFile_E_5fChat_2eproto();

  void InitAsDefaultInstance();
  static E_ChatChat* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_ChatChat : public ::google::protobuf::Message {
 public:
  Sheet_ChatChat();
  virtual ~Sheet_ChatChat();

  Sheet_ChatChat(const Sheet_ChatChat& from);

  inline Sheet_ChatChat& operator=(const Sheet_ChatChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_ChatChat& default_instance();

  void Swap(Sheet_ChatChat* other);

  // implements Message ----------------------------------------------

  Sheet_ChatChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_ChatChat& from);
  void MergeFrom(const Sheet_ChatChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_ChatChat E_ChatChat_List = 1;
  inline int e_chatchat_list_size() const;
  inline void clear_e_chatchat_list();
  static const int kEChatChatListFieldNumber = 1;
  inline const ::proto_ff::E_ChatChat& e_chatchat_list(int index) const;
  inline ::proto_ff::E_ChatChat* mutable_e_chatchat_list(int index);
  inline ::proto_ff::E_ChatChat* add_e_chatchat_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatChat >&
      e_chatchat_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatChat >*
      mutable_e_chatchat_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_ChatChat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatChat > e_chatchat_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fChat_2eproto();
  friend void protobuf_AssignDesc_E_5fChat_2eproto();
  friend void protobuf_ShutdownFile_E_5fChat_2eproto();

  void InitAsDefaultInstance();
  static Sheet_ChatChat* default_instance_;
};
// -------------------------------------------------------------------

class E_ChatSpecialchat : public ::google::protobuf::Message {
 public:
  E_ChatSpecialchat();
  virtual ~E_ChatSpecialchat();

  E_ChatSpecialchat(const E_ChatSpecialchat& from);

  inline E_ChatSpecialchat& operator=(const E_ChatSpecialchat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_ChatSpecialchat& default_instance();

  void Swap(E_ChatSpecialchat* other);

  // implements Message ----------------------------------------------

  E_ChatSpecialchat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_ChatSpecialchat& from);
  void MergeFrom(const E_ChatSpecialchat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_type = 1;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional string m_parama = 2;
  inline bool has_m_parama() const;
  inline void clear_m_parama();
  static const int kMParamaFieldNumber = 2;
  inline const ::std::string& m_parama() const;
  inline void set_m_parama(const ::std::string& value);
  inline void set_m_parama(const char* value);
  inline void set_m_parama(const char* value, size_t size);
  inline ::std::string* mutable_m_parama();
  inline ::std::string* release_m_parama();
  inline void set_allocated_m_parama(::std::string* m_parama);

  // optional string m_paramb = 3;
  inline bool has_m_paramb() const;
  inline void clear_m_paramb();
  static const int kMParambFieldNumber = 3;
  inline const ::std::string& m_paramb() const;
  inline void set_m_paramb(const ::std::string& value);
  inline void set_m_paramb(const char* value);
  inline void set_m_paramb(const char* value, size_t size);
  inline ::std::string* mutable_m_paramb();
  inline ::std::string* release_m_paramb();
  inline void set_allocated_m_paramb(::std::string* m_paramb);

  // optional int64 m_chat_id = 4;
  inline bool has_m_chat_id() const;
  inline void clear_m_chat_id();
  static const int kMChatIdFieldNumber = 4;
  inline ::google::protobuf::int64 m_chat_id() const;
  inline void set_m_chat_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_ChatSpecialchat)
 private:
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_parama();
  inline void clear_has_m_parama();
  inline void set_has_m_paramb();
  inline void clear_has_m_paramb();
  inline void set_has_m_chat_id();
  inline void clear_has_m_chat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_parama_;
  ::std::string* m_paramb_;
  ::google::protobuf::int64 m_chat_id_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fChat_2eproto();
  friend void protobuf_AssignDesc_E_5fChat_2eproto();
  friend void protobuf_ShutdownFile_E_5fChat_2eproto();

  void InitAsDefaultInstance();
  static E_ChatSpecialchat* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_ChatSpecialchat : public ::google::protobuf::Message {
 public:
  Sheet_ChatSpecialchat();
  virtual ~Sheet_ChatSpecialchat();

  Sheet_ChatSpecialchat(const Sheet_ChatSpecialchat& from);

  inline Sheet_ChatSpecialchat& operator=(const Sheet_ChatSpecialchat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_ChatSpecialchat& default_instance();

  void Swap(Sheet_ChatSpecialchat* other);

  // implements Message ----------------------------------------------

  Sheet_ChatSpecialchat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_ChatSpecialchat& from);
  void MergeFrom(const Sheet_ChatSpecialchat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_ChatSpecialchat E_ChatSpecialchat_List = 1;
  inline int e_chatspecialchat_list_size() const;
  inline void clear_e_chatspecialchat_list();
  static const int kEChatSpecialchatListFieldNumber = 1;
  inline const ::proto_ff::E_ChatSpecialchat& e_chatspecialchat_list(int index) const;
  inline ::proto_ff::E_ChatSpecialchat* mutable_e_chatspecialchat_list(int index);
  inline ::proto_ff::E_ChatSpecialchat* add_e_chatspecialchat_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatSpecialchat >&
      e_chatspecialchat_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatSpecialchat >*
      mutable_e_chatspecialchat_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_ChatSpecialchat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatSpecialchat > e_chatspecialchat_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fChat_2eproto();
  friend void protobuf_AssignDesc_E_5fChat_2eproto();
  friend void protobuf_ShutdownFile_E_5fChat_2eproto();

  void InitAsDefaultInstance();
  static Sheet_ChatSpecialchat* default_instance_;
};
// ===================================================================


// ===================================================================

// E_ChatChat

// optional int64 m_chatid = 1;
inline bool E_ChatChat::has_m_chatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_ChatChat::set_has_m_chatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_ChatChat::clear_has_m_chatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_ChatChat::clear_m_chatid() {
  m_chatid_ = GOOGLE_LONGLONG(0);
  clear_has_m_chatid();
}
inline ::google::protobuf::int64 E_ChatChat::m_chatid() const {
  return m_chatid_;
}
inline void E_ChatChat::set_m_chatid(::google::protobuf::int64 value) {
  set_has_m_chatid();
  m_chatid_ = value;
}

// optional int32 m_chattype = 2;
inline bool E_ChatChat::has_m_chattype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_ChatChat::set_has_m_chattype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_ChatChat::clear_has_m_chattype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_ChatChat::clear_m_chattype() {
  m_chattype_ = 0;
  clear_has_m_chattype();
}
inline ::google::protobuf::int32 E_ChatChat::m_chattype() const {
  return m_chattype_;
}
inline void E_ChatChat::set_m_chattype(::google::protobuf::int32 value) {
  set_has_m_chattype();
  m_chattype_ = value;
}

// optional int32 m_showtime = 3;
inline bool E_ChatChat::has_m_showtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_ChatChat::set_has_m_showtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_ChatChat::clear_has_m_showtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_ChatChat::clear_m_showtime() {
  m_showtime_ = 0;
  clear_has_m_showtime();
}
inline ::google::protobuf::int32 E_ChatChat::m_showtime() const {
  return m_showtime_;
}
inline void E_ChatChat::set_m_showtime(::google::protobuf::int32 value) {
  set_has_m_showtime();
  m_showtime_ = value;
}

// optional string m_chatcontent = 4;
inline bool E_ChatChat::has_m_chatcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_ChatChat::set_has_m_chatcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_ChatChat::clear_has_m_chatcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_ChatChat::clear_m_chatcontent() {
  if (m_chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    m_chatcontent_->clear();
  }
  clear_has_m_chatcontent();
}
inline const ::std::string& E_ChatChat::m_chatcontent() const {
  return *m_chatcontent_;
}
inline void E_ChatChat::set_m_chatcontent(const ::std::string& value) {
  set_has_m_chatcontent();
  if (m_chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    m_chatcontent_ = new ::std::string;
  }
  m_chatcontent_->assign(value);
}
inline void E_ChatChat::set_m_chatcontent(const char* value) {
  set_has_m_chatcontent();
  if (m_chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    m_chatcontent_ = new ::std::string;
  }
  m_chatcontent_->assign(value);
}
inline void E_ChatChat::set_m_chatcontent(const char* value, size_t size) {
  set_has_m_chatcontent();
  if (m_chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    m_chatcontent_ = new ::std::string;
  }
  m_chatcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_ChatChat::mutable_m_chatcontent() {
  set_has_m_chatcontent();
  if (m_chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    m_chatcontent_ = new ::std::string;
  }
  return m_chatcontent_;
}
inline ::std::string* E_ChatChat::release_m_chatcontent() {
  clear_has_m_chatcontent();
  if (m_chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_chatcontent_;
    m_chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_ChatChat::set_allocated_m_chatcontent(::std::string* m_chatcontent) {
  if (m_chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete m_chatcontent_;
  }
  if (m_chatcontent) {
    set_has_m_chatcontent();
    m_chatcontent_ = m_chatcontent;
  } else {
    clear_has_m_chatcontent();
    m_chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_channel = 5;
inline bool E_ChatChat::has_m_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_ChatChat::set_has_m_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_ChatChat::clear_has_m_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_ChatChat::clear_m_channel() {
  m_channel_ = 0;
  clear_has_m_channel();
}
inline ::google::protobuf::int32 E_ChatChat::m_channel() const {
  return m_channel_;
}
inline void E_ChatChat::set_m_channel(::google::protobuf::int32 value) {
  set_has_m_channel();
  m_channel_ = value;
}

// optional int32 m_crossservice = 6;
inline bool E_ChatChat::has_m_crossservice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_ChatChat::set_has_m_crossservice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_ChatChat::clear_has_m_crossservice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_ChatChat::clear_m_crossservice() {
  m_crossservice_ = 0;
  clear_has_m_crossservice();
}
inline ::google::protobuf::int32 E_ChatChat::m_crossservice() const {
  return m_crossservice_;
}
inline void E_ChatChat::set_m_crossservice(::google::protobuf::int32 value) {
  set_has_m_crossservice();
  m_crossservice_ = value;
}

// -------------------------------------------------------------------

// Sheet_ChatChat

// repeated .proto_ff.E_ChatChat E_ChatChat_List = 1;
inline int Sheet_ChatChat::e_chatchat_list_size() const {
  return e_chatchat_list_.size();
}
inline void Sheet_ChatChat::clear_e_chatchat_list() {
  e_chatchat_list_.Clear();
}
inline const ::proto_ff::E_ChatChat& Sheet_ChatChat::e_chatchat_list(int index) const {
  return e_chatchat_list_.Get(index);
}
inline ::proto_ff::E_ChatChat* Sheet_ChatChat::mutable_e_chatchat_list(int index) {
  return e_chatchat_list_.Mutable(index);
}
inline ::proto_ff::E_ChatChat* Sheet_ChatChat::add_e_chatchat_list() {
  return e_chatchat_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatChat >&
Sheet_ChatChat::e_chatchat_list() const {
  return e_chatchat_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatChat >*
Sheet_ChatChat::mutable_e_chatchat_list() {
  return &e_chatchat_list_;
}

// -------------------------------------------------------------------

// E_ChatSpecialchat

// optional int32 m_type = 1;
inline bool E_ChatSpecialchat::has_m_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_ChatSpecialchat::set_has_m_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_ChatSpecialchat::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_ChatSpecialchat::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_ChatSpecialchat::m_type() const {
  return m_type_;
}
inline void E_ChatSpecialchat::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional string m_parama = 2;
inline bool E_ChatSpecialchat::has_m_parama() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_ChatSpecialchat::set_has_m_parama() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_ChatSpecialchat::clear_has_m_parama() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_ChatSpecialchat::clear_m_parama() {
  if (m_parama_ != &::google::protobuf::internal::kEmptyString) {
    m_parama_->clear();
  }
  clear_has_m_parama();
}
inline const ::std::string& E_ChatSpecialchat::m_parama() const {
  return *m_parama_;
}
inline void E_ChatSpecialchat::set_m_parama(const ::std::string& value) {
  set_has_m_parama();
  if (m_parama_ == &::google::protobuf::internal::kEmptyString) {
    m_parama_ = new ::std::string;
  }
  m_parama_->assign(value);
}
inline void E_ChatSpecialchat::set_m_parama(const char* value) {
  set_has_m_parama();
  if (m_parama_ == &::google::protobuf::internal::kEmptyString) {
    m_parama_ = new ::std::string;
  }
  m_parama_->assign(value);
}
inline void E_ChatSpecialchat::set_m_parama(const char* value, size_t size) {
  set_has_m_parama();
  if (m_parama_ == &::google::protobuf::internal::kEmptyString) {
    m_parama_ = new ::std::string;
  }
  m_parama_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_ChatSpecialchat::mutable_m_parama() {
  set_has_m_parama();
  if (m_parama_ == &::google::protobuf::internal::kEmptyString) {
    m_parama_ = new ::std::string;
  }
  return m_parama_;
}
inline ::std::string* E_ChatSpecialchat::release_m_parama() {
  clear_has_m_parama();
  if (m_parama_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_parama_;
    m_parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_ChatSpecialchat::set_allocated_m_parama(::std::string* m_parama) {
  if (m_parama_ != &::google::protobuf::internal::kEmptyString) {
    delete m_parama_;
  }
  if (m_parama) {
    set_has_m_parama();
    m_parama_ = m_parama;
  } else {
    clear_has_m_parama();
    m_parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_paramb = 3;
inline bool E_ChatSpecialchat::has_m_paramb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_ChatSpecialchat::set_has_m_paramb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_ChatSpecialchat::clear_has_m_paramb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_ChatSpecialchat::clear_m_paramb() {
  if (m_paramb_ != &::google::protobuf::internal::kEmptyString) {
    m_paramb_->clear();
  }
  clear_has_m_paramb();
}
inline const ::std::string& E_ChatSpecialchat::m_paramb() const {
  return *m_paramb_;
}
inline void E_ChatSpecialchat::set_m_paramb(const ::std::string& value) {
  set_has_m_paramb();
  if (m_paramb_ == &::google::protobuf::internal::kEmptyString) {
    m_paramb_ = new ::std::string;
  }
  m_paramb_->assign(value);
}
inline void E_ChatSpecialchat::set_m_paramb(const char* value) {
  set_has_m_paramb();
  if (m_paramb_ == &::google::protobuf::internal::kEmptyString) {
    m_paramb_ = new ::std::string;
  }
  m_paramb_->assign(value);
}
inline void E_ChatSpecialchat::set_m_paramb(const char* value, size_t size) {
  set_has_m_paramb();
  if (m_paramb_ == &::google::protobuf::internal::kEmptyString) {
    m_paramb_ = new ::std::string;
  }
  m_paramb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_ChatSpecialchat::mutable_m_paramb() {
  set_has_m_paramb();
  if (m_paramb_ == &::google::protobuf::internal::kEmptyString) {
    m_paramb_ = new ::std::string;
  }
  return m_paramb_;
}
inline ::std::string* E_ChatSpecialchat::release_m_paramb() {
  clear_has_m_paramb();
  if (m_paramb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_paramb_;
    m_paramb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_ChatSpecialchat::set_allocated_m_paramb(::std::string* m_paramb) {
  if (m_paramb_ != &::google::protobuf::internal::kEmptyString) {
    delete m_paramb_;
  }
  if (m_paramb) {
    set_has_m_paramb();
    m_paramb_ = m_paramb;
  } else {
    clear_has_m_paramb();
    m_paramb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 m_chat_id = 4;
inline bool E_ChatSpecialchat::has_m_chat_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_ChatSpecialchat::set_has_m_chat_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_ChatSpecialchat::clear_has_m_chat_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_ChatSpecialchat::clear_m_chat_id() {
  m_chat_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_chat_id();
}
inline ::google::protobuf::int64 E_ChatSpecialchat::m_chat_id() const {
  return m_chat_id_;
}
inline void E_ChatSpecialchat::set_m_chat_id(::google::protobuf::int64 value) {
  set_has_m_chat_id();
  m_chat_id_ = value;
}

// -------------------------------------------------------------------

// Sheet_ChatSpecialchat

// repeated .proto_ff.E_ChatSpecialchat E_ChatSpecialchat_List = 1;
inline int Sheet_ChatSpecialchat::e_chatspecialchat_list_size() const {
  return e_chatspecialchat_list_.size();
}
inline void Sheet_ChatSpecialchat::clear_e_chatspecialchat_list() {
  e_chatspecialchat_list_.Clear();
}
inline const ::proto_ff::E_ChatSpecialchat& Sheet_ChatSpecialchat::e_chatspecialchat_list(int index) const {
  return e_chatspecialchat_list_.Get(index);
}
inline ::proto_ff::E_ChatSpecialchat* Sheet_ChatSpecialchat::mutable_e_chatspecialchat_list(int index) {
  return e_chatspecialchat_list_.Mutable(index);
}
inline ::proto_ff::E_ChatSpecialchat* Sheet_ChatSpecialchat::add_e_chatspecialchat_list() {
  return e_chatspecialchat_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatSpecialchat >&
Sheet_ChatSpecialchat::e_chatspecialchat_list() const {
  return e_chatspecialchat_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_ChatSpecialchat >*
Sheet_ChatSpecialchat::mutable_e_chatspecialchat_list() {
  return &e_chatspecialchat_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fChat_2eproto__INCLUDED
