// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: combine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "combine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* combinecitemneedMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  combinecitemneedMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* combinecitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  combinecitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_combinecitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_combinecitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* combinestarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  combinestarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_combinestarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_combinestarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* combineitemUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  combineitemUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_combineitemUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_combineitemUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* combinerankUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  combinerankUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_combinerankUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_combinerankUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* combinequalityUpneedEqupDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  combinequalityUpneedEqupDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* combinequalityUpneedMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  combinequalityUpneedMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* combinequalityUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  combinequalityUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_combinequalityUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_combinequalityUp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_combine_2eproto() {
  protobuf_AddDesc_combine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "combine.proto");
  GOOGLE_CHECK(file != NULL);
  combinecitemneedMaterialDesc_descriptor_ = file->message_type(0);
  static const int combinecitemneedMaterialDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitemneedMaterialDesc, id_),
  };
  combinecitemneedMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      combinecitemneedMaterialDesc_descriptor_,
      combinecitemneedMaterialDesc::default_instance_,
      combinecitemneedMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitemneedMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitemneedMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(combinecitemneedMaterialDesc));
  combinecitem_descriptor_ = file->message_type(1);
  static const int combinecitem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, newitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, huobitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, huobiprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, needmaterial_),
  };
  combinecitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      combinecitem_descriptor_,
      combinecitem::default_instance_,
      combinecitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinecitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(combinecitem));
  Sheet_combinecitem_descriptor_ = file->message_type(2);
  static const int Sheet_combinecitem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinecitem, combinecitem_list_),
  };
  Sheet_combinecitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_combinecitem_descriptor_,
      Sheet_combinecitem::default_instance_,
      Sheet_combinecitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinecitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinecitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_combinecitem));
  combinestarUp_descriptor_ = file->message_type(3);
  static const int combinestarUp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, newitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, equipmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, needmaterial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, needmaterial_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, sameprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, sameposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, increase_),
  };
  combinestarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      combinestarUp_descriptor_,
      combinestarUp::default_instance_,
      combinestarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinestarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(combinestarUp));
  Sheet_combinestarUp_descriptor_ = file->message_type(4);
  static const int Sheet_combinestarUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinestarUp, combinestarup_list_),
  };
  Sheet_combinestarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_combinestarUp_descriptor_,
      Sheet_combinestarUp::default_instance_,
      Sheet_combinestarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinestarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinestarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_combinestarUp));
  combineitemUp_descriptor_ = file->message_type(5);
  static const int combineitemUp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, newitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, needmaterialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, needmaterialmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, needmaterialman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, increase_),
  };
  combineitemUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      combineitemUp_descriptor_,
      combineitemUp::default_instance_,
      combineitemUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combineitemUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(combineitemUp));
  Sheet_combineitemUp_descriptor_ = file->message_type(6);
  static const int Sheet_combineitemUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combineitemUp, combineitemup_list_),
  };
  Sheet_combineitemUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_combineitemUp_descriptor_,
      Sheet_combineitemUp::default_instance_,
      Sheet_combineitemUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combineitemUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combineitemUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_combineitemUp));
  combinerankUp_descriptor_ = file->message_type(7);
  static const int combinerankUp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, newitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, needmaterial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, needmaterial_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, sameprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, sameposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, probability_),
  };
  combinerankUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      combinerankUp_descriptor_,
      combinerankUp::default_instance_,
      combinerankUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinerankUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(combinerankUp));
  Sheet_combinerankUp_descriptor_ = file->message_type(8);
  static const int Sheet_combinerankUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinerankUp, combinerankup_list_),
  };
  Sheet_combinerankUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_combinerankUp_descriptor_,
      Sheet_combinerankUp::default_instance_,
      Sheet_combinerankUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinerankUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinerankUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_combinerankUp));
  combinequalityUpneedEqupDesc_descriptor_ = file->message_type(9);
  static const int combinequalityUpneedEqupDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUpneedEqupDesc, id_),
  };
  combinequalityUpneedEqupDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      combinequalityUpneedEqupDesc_descriptor_,
      combinequalityUpneedEqupDesc::default_instance_,
      combinequalityUpneedEqupDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUpneedEqupDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUpneedEqupDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(combinequalityUpneedEqupDesc));
  combinequalityUpneedMaterialDesc_descriptor_ = file->message_type(10);
  static const int combinequalityUpneedMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUpneedMaterialDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUpneedMaterialDesc, id_),
  };
  combinequalityUpneedMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      combinequalityUpneedMaterialDesc_descriptor_,
      combinequalityUpneedMaterialDesc::default_instance_,
      combinequalityUpneedMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUpneedMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUpneedMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(combinequalityUpneedMaterialDesc));
  combinequalityUp_descriptor_ = file->message_type(11);
  static const int combinequalityUp_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, newitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, needequp_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, sameprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, sameposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, costtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, bindjewelcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, needequp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, needmaterial_),
  };
  combinequalityUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      combinequalityUp_descriptor_,
      combinequalityUp::default_instance_,
      combinequalityUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(combinequalityUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(combinequalityUp));
  Sheet_combinequalityUp_descriptor_ = file->message_type(12);
  static const int Sheet_combinequalityUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinequalityUp, combinequalityup_list_),
  };
  Sheet_combinequalityUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_combinequalityUp_descriptor_,
      Sheet_combinequalityUp::default_instance_,
      Sheet_combinequalityUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinequalityUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_combinequalityUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_combinequalityUp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_combine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    combinecitemneedMaterialDesc_descriptor_, &combinecitemneedMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    combinecitem_descriptor_, &combinecitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_combinecitem_descriptor_, &Sheet_combinecitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    combinestarUp_descriptor_, &combinestarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_combinestarUp_descriptor_, &Sheet_combinestarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    combineitemUp_descriptor_, &combineitemUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_combineitemUp_descriptor_, &Sheet_combineitemUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    combinerankUp_descriptor_, &combinerankUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_combinerankUp_descriptor_, &Sheet_combinerankUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    combinequalityUpneedEqupDesc_descriptor_, &combinequalityUpneedEqupDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    combinequalityUpneedMaterialDesc_descriptor_, &combinequalityUpneedMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    combinequalityUp_descriptor_, &combinequalityUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_combinequalityUp_descriptor_, &Sheet_combinequalityUp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_combine_2eproto() {
  delete combinecitemneedMaterialDesc::default_instance_;
  delete combinecitemneedMaterialDesc_reflection_;
  delete combinecitem::default_instance_;
  delete combinecitem_reflection_;
  delete Sheet_combinecitem::default_instance_;
  delete Sheet_combinecitem_reflection_;
  delete combinestarUp::default_instance_;
  delete combinestarUp_reflection_;
  delete Sheet_combinestarUp::default_instance_;
  delete Sheet_combinestarUp_reflection_;
  delete combineitemUp::default_instance_;
  delete combineitemUp_reflection_;
  delete Sheet_combineitemUp::default_instance_;
  delete Sheet_combineitemUp_reflection_;
  delete combinerankUp::default_instance_;
  delete combinerankUp_reflection_;
  delete Sheet_combinerankUp::default_instance_;
  delete Sheet_combinerankUp_reflection_;
  delete combinequalityUpneedEqupDesc::default_instance_;
  delete combinequalityUpneedEqupDesc_reflection_;
  delete combinequalityUpneedMaterialDesc::default_instance_;
  delete combinequalityUpneedMaterialDesc_reflection_;
  delete combinequalityUp::default_instance_;
  delete combinequalityUp_reflection_;
  delete Sheet_combinequalityUp::default_instance_;
  delete Sheet_combinequalityUp_reflection_;
}

void protobuf_AddDesc_combine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcombine.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"2\n\034combinecitemneedMaterialDesc"
    "\022\022\n\002id\030\001 \001(\003B\006\302\377\024\002ID\"\220\003\n\014combinecitem\022 \n"
    "\007newItem\030\001 \001(\003B\017\302\377\024\013\345\220\210\346\210\220\347\211\251ID\022#\n\tmoney"
    "Type\030\002 \001(\005B\020\302\377\024\014\350\264\247\345\270\201\347\261\273\345\236\213\022\037\n\005price\030\003 "
    "\001(\005B\020\302\377\024\014\350\264\247\345\270\201\346\266\210\350\200\227\022)\n\thuobiType\030\004 \001(\005"
    "B\026\302\377\024\022\350\264\247\345\270\201\351\242\235\345\244\226\347\261\273\345\236\213\022*\n\nhuobiPrice\030\005"
    " \001(\005B\026\302\377\024\022\350\264\247\345\270\201\351\242\235\345\244\226\346\266\210\350\200\227\022(\n\013probabil"
    "ity\030\006 \001(\005B\023\302\377\024\017\345\237\272\347\241\200\346\210\220\345\212\237\347\216\207\022\037\n\005level\030"
    "\007 \001(\005B\020\302\377\024\014\347\255\211\347\272\247\350\246\201\346\261\202\022\"\n\005floor\030\010 \001(\005B\023"
    "\302\377\024\017\345\221\275\346\230\237\345\241\224\350\246\201\346\261\202\022R\n\014needMaterial\030\t \003("
    "\0132&.proto_ff.combinecitemneedMaterialDes"
    "cB\024\302\377\024\014\345\220\210\346\210\220\346\235\220\346\226\231\210\301\024\003\"N\n\022Sheet_combine"
    "citem\0228\n\021combinecitem_List\030\001 \003(\0132\026.proto"
    "_ff.combinecitemB\005\210\301\024\364\003\"\371\003\n\rcombinestarU"
    "p\022 \n\007newItem\030\001 \001(\003B\017\302\377\024\013\345\220\210\346\210\220\347\211\251ID\022+\n\010e"
    "quipMin\030\002 \001(\005B\031\302\377\024\025\351\234\200\350\246\201\347\232\204\346\234\200\345\260\217\344\273\266\346\225\260"
    "\022&\n\003num\030\003 \001(\005B\031\302\377\024\025\351\234\200\350\246\201\347\232\204\346\234\200\345\244\247\344\273\266\346\225\260"
    "\0224\n\017needMaterial_id\030\004 \001(\003B\033\302\377\024\027\351\234\200\350\246\201\347\232\204"
    "\345\233\272\345\256\232\346\235\220\346\226\231ID\0229\n\020needMaterial_num\030\005 \001(\005"
    "B\037\302\377\024\033\351\234\200\350\246\201\347\232\204\345\233\272\345\256\232\346\235\220\346\226\231\346\225\260\351\207\217\022\030\n\004sta"
    "r\030\006 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022\037\n\013wearQuality\030\007 \001(\005"
    "B\n\302\377\024\006\351\230\266\347\272\247\022\033\n\007quality\030\010 \001(\005B\n\302\377\024\006\345\223\201\350\264"
    "\250\022.\n\016sameProfession\030\t \001(\005B\026\302\377\024\022\346\230\257\345\220\246\347\233\270"
    "\345\220\214\350\201\214\344\270\232\022$\n\014samePosition\030\n \001(\tB\016\302\377\024\006\351\203\250"
    "\344\275\215\220\301\024<\022(\n\013probability\030\013 \001(\005B\023\302\377\024\017\345\237\272\347\241\200"
    "\346\210\220\345\212\237\347\216\207\022(\n\010increase\030\014 \001(\005B\026\302\377\024\022\350\243\205\345\244\207\344"
    "\273\266\346\225\260\345\212\240\346\210\220\"Q\n\023Sheet_combinestarUp\022:\n\022co"
    "mbinestarUp_List\030\001 \003(\0132\027.proto_ff.combin"
    "estarUpB\005\210\301\024\240\006\"\350\002\n\rcombineitemUp\022 \n\007newI"
    "tem\030\001 \001(\003B\017\302\377\024\013\345\220\210\346\210\220\347\211\251ID\022#\n\tmoneyType\030"
    "\002 \001(\005B\020\302\377\024\014\350\264\247\345\270\201\347\261\273\345\236\213\022\037\n\005price\030\003 \001(\005B\020"
    "\302\377\024\014\350\264\247\345\270\201\346\266\210\350\200\227\022*\n\016needMaterialID\030\004 \001(\003"
    "B\022\302\377\024\016\345\220\210\346\210\220\346\235\220\346\226\231ID\0222\n\017needMaterialMin\030"
    "\005 \001(\005B\031\302\377\024\025\351\234\200\350\246\201\347\232\204\346\234\200\345\260\217\344\273\266\346\225\260\0222\n\017need"
    "MaterialMan\030\006 \001(\005B\031\302\377\024\025\351\234\200\350\246\201\347\232\204\346\234\200\345\244\247\344\273"
    "\266\346\225\260\022(\n\013probability\030\007 \001(\005B\023\302\377\024\017\345\237\272\347\241\200\346\210\220"
    "\345\212\237\347\216\207\0221\n\010increase\030\010 \001(\005B\037\302\377\024\033\346\257\217\344\270\252\351\201\223\345"
    "\205\267\346\210\220\345\212\237\347\216\207\345\212\240\346\210\220\"P\n\023Sheet_combineitemUp"
    "\0229\n\022combineitemUp_List\030\001 \003(\0132\027.proto_ff."
    "combineitemUpB\004\210\301\024<\"\234\003\n\rcombinerankUp\022 \n"
    "\007newItem\030\001 \001(\003B\017\302\377\024\013\345\220\210\346\210\220\347\211\251ID\022&\n\003num\030\002"
    " \001(\005B\031\302\377\024\025\351\234\200\350\246\201\347\232\204\350\243\205\345\244\207\346\225\260\351\207\217\0224\n\017needM"
    "aterial_id\030\003 \001(\003B\033\302\377\024\027\351\234\200\350\246\201\347\232\204\345\233\272\345\256\232\346\235\220"
    "\346\226\231ID\0229\n\020needMaterial_num\030\004 \001(\005B\037\302\377\024\033\351\234\200"
    "\350\246\201\347\232\204\345\233\272\345\256\232\346\235\220\346\226\231\346\225\260\351\207\217\022\030\n\004star\030\005 \001(\005B\n"
    "\302\377\024\006\346\230\237\347\272\247\022\037\n\013wearQuality\030\006 \001(\005B\n\302\377\024\006\351\230\266"
    "\347\272\247\022\033\n\007quality\030\007 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022.\n\016same"
    "Profession\030\010 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\347\233\270\345\220\214\350\201\214\344\270\232"
    "\022$\n\014samePosition\030\t \001(\tB\016\302\377\024\006\351\203\250\344\275\215\220\301\024<\022\""
    "\n\013probability\030\n \001(\005B\r\302\377\024\t\346\210\220\345\212\237\347\216\207\"P\n\023Sh"
    "eet_combinerankUp\0229\n\022combinerankUp_List\030"
    "\001 \003(\0132\027.proto_ff.combinerankUpB\004\210\301\024(\"G\n\034"
    "combinequalityUpneedEqupDesc\022\'\n\002id\030\001 \001(\t"
    "B\033\302\377\024\022\351\234\200\350\246\201\345\233\272\345\256\232\350\243\205\345\244\207\220\301\024\240\001\"y\n combine"
    "qualityUpneedMaterialDesc\022,\n\003num\030\001 \001(\005B\037"
    "\302\377\024\033\351\234\200\350\246\201\347\232\204\345\233\272\345\256\232\346\235\220\346\226\231\346\225\260\351\207\217\022\'\n\002id\030\002 "
    "\001(\003B\033\302\377\024\027\351\234\200\350\246\201\347\232\204\345\233\272\345\256\232\346\235\220\346\226\231ID\"\317\004\n\020com"
    "binequalityUp\022 \n\007newItem\030\001 \001(\003B\017\302\377\024\013\345\220\210\346"
    "\210\220\347\211\251ID\022&\n\003num\030\002 \001(\005B\031\302\377\024\025\351\234\200\350\246\201\347\232\204\350\243\205\345\244"
    "\207\346\225\260\351\207\217\0224\n\014needEqup_num\030\003 \001(\005B\036\302\377\024\032\351\234\200\350\246"
    "\201\345\233\272\345\256\232\350\243\205\345\244\2071\346\225\260\351\207\2172\022\030\n\004star\030\004 \001(\005B\n\302\377\024"
    "\006\346\230\237\347\272\247\022\037\n\013wearQuality\030\005 \001(\005B\n\302\377\024\006\351\230\266\347\272\247"
    "\022\033\n\007quality\030\006 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022.\n\016samePro"
    "fession\030\007 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\347\233\270\345\220\214\350\201\214\344\270\232\022$\n"
    "\014samePosition\030\010 \001(\tB\016\302\377\024\006\351\203\250\344\275\215\220\301\024<\022(\n\013p"
    "robability\030\t \001(\005B\023\302\377\024\017\345\237\272\347\241\200\346\210\220\345\212\237\347\216\207\022\"\n"
    "\010costType\030\n \001(\005B\020\302\377\024\014\350\264\247\345\270\201\347\261\273\345\236\213\022\'\n\rbin"
    "dJewelCost\030\013 \001(\005B\020\302\377\024\014\345\220\210\346\210\220\346\266\210\350\200\227\022F\n\010ne"
    "edEqup\030\014 \003(\0132&.proto_ff.combinequalityUp"
    "needEqupDescB\014\302\377\024\004$$$$\210\301\024\001\022N\n\014needMateri"
    "al\030\r \003(\0132*.proto_ff.combinequalityUpneed"
    "MaterialDescB\014\302\377\024\004$$$$\210\301\024\002\"Z\n\026Sheet_comb"
    "inequalityUp\022@\n\025combinequalityUp_List\030\001 "
    "\003(\0132\032.proto_ff.combinequalityUpB\005\210\301\024\254\002", 2998);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "combine.proto", &protobuf_RegisterTypes);
  combinecitemneedMaterialDesc::default_instance_ = new combinecitemneedMaterialDesc();
  combinecitem::default_instance_ = new combinecitem();
  Sheet_combinecitem::default_instance_ = new Sheet_combinecitem();
  combinestarUp::default_instance_ = new combinestarUp();
  Sheet_combinestarUp::default_instance_ = new Sheet_combinestarUp();
  combineitemUp::default_instance_ = new combineitemUp();
  Sheet_combineitemUp::default_instance_ = new Sheet_combineitemUp();
  combinerankUp::default_instance_ = new combinerankUp();
  Sheet_combinerankUp::default_instance_ = new Sheet_combinerankUp();
  combinequalityUpneedEqupDesc::default_instance_ = new combinequalityUpneedEqupDesc();
  combinequalityUpneedMaterialDesc::default_instance_ = new combinequalityUpneedMaterialDesc();
  combinequalityUp::default_instance_ = new combinequalityUp();
  Sheet_combinequalityUp::default_instance_ = new Sheet_combinequalityUp();
  combinecitemneedMaterialDesc::default_instance_->InitAsDefaultInstance();
  combinecitem::default_instance_->InitAsDefaultInstance();
  Sheet_combinecitem::default_instance_->InitAsDefaultInstance();
  combinestarUp::default_instance_->InitAsDefaultInstance();
  Sheet_combinestarUp::default_instance_->InitAsDefaultInstance();
  combineitemUp::default_instance_->InitAsDefaultInstance();
  Sheet_combineitemUp::default_instance_->InitAsDefaultInstance();
  combinerankUp::default_instance_->InitAsDefaultInstance();
  Sheet_combinerankUp::default_instance_->InitAsDefaultInstance();
  combinequalityUpneedEqupDesc::default_instance_->InitAsDefaultInstance();
  combinequalityUpneedMaterialDesc::default_instance_->InitAsDefaultInstance();
  combinequalityUp::default_instance_->InitAsDefaultInstance();
  Sheet_combinequalityUp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_combine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_combine_2eproto {
  StaticDescriptorInitializer_combine_2eproto() {
    protobuf_AddDesc_combine_2eproto();
  }
} static_descriptor_initializer_combine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int combinecitemneedMaterialDesc::kIdFieldNumber;
#endif  // !_MSC_VER

combinecitemneedMaterialDesc::combinecitemneedMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void combinecitemneedMaterialDesc::InitAsDefaultInstance() {
}

combinecitemneedMaterialDesc::combinecitemneedMaterialDesc(const combinecitemneedMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void combinecitemneedMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

combinecitemneedMaterialDesc::~combinecitemneedMaterialDesc() {
  SharedDtor();
}

void combinecitemneedMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void combinecitemneedMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* combinecitemneedMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return combinecitemneedMaterialDesc_descriptor_;
}

const combinecitemneedMaterialDesc& combinecitemneedMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

combinecitemneedMaterialDesc* combinecitemneedMaterialDesc::default_instance_ = NULL;

combinecitemneedMaterialDesc* combinecitemneedMaterialDesc::New() const {
  return new combinecitemneedMaterialDesc;
}

void combinecitemneedMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool combinecitemneedMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void combinecitemneedMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* combinecitemneedMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int combinecitemneedMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void combinecitemneedMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const combinecitemneedMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const combinecitemneedMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void combinecitemneedMaterialDesc::MergeFrom(const combinecitemneedMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void combinecitemneedMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void combinecitemneedMaterialDesc::CopyFrom(const combinecitemneedMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool combinecitemneedMaterialDesc::IsInitialized() const {

  return true;
}

void combinecitemneedMaterialDesc::Swap(combinecitemneedMaterialDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata combinecitemneedMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = combinecitemneedMaterialDesc_descriptor_;
  metadata.reflection = combinecitemneedMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int combinecitem::kNewItemFieldNumber;
const int combinecitem::kMoneyTypeFieldNumber;
const int combinecitem::kPriceFieldNumber;
const int combinecitem::kHuobiTypeFieldNumber;
const int combinecitem::kHuobiPriceFieldNumber;
const int combinecitem::kProbabilityFieldNumber;
const int combinecitem::kLevelFieldNumber;
const int combinecitem::kFloorFieldNumber;
const int combinecitem::kNeedMaterialFieldNumber;
#endif  // !_MSC_VER

combinecitem::combinecitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void combinecitem::InitAsDefaultInstance() {
}

combinecitem::combinecitem(const combinecitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void combinecitem::SharedCtor() {
  _cached_size_ = 0;
  newitem_ = GOOGLE_LONGLONG(0);
  moneytype_ = 0;
  price_ = 0;
  huobitype_ = 0;
  huobiprice_ = 0;
  probability_ = 0;
  level_ = 0;
  floor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

combinecitem::~combinecitem() {
  SharedDtor();
}

void combinecitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void combinecitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* combinecitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return combinecitem_descriptor_;
}

const combinecitem& combinecitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

combinecitem* combinecitem::default_instance_ = NULL;

combinecitem* combinecitem::New() const {
  return new combinecitem;
}

void combinecitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newitem_ = GOOGLE_LONGLONG(0);
    moneytype_ = 0;
    price_ = 0;
    huobitype_ = 0;
    huobiprice_ = 0;
    probability_ = 0;
    level_ = 0;
    floor_ = 0;
  }
  needmaterial_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool combinecitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 newItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newitem_)));
          set_has_newitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_huobiType;
        break;
      }

      // optional int32 huobiType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huobiType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huobitype_)));
          set_has_huobitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_huobiPrice;
        break;
      }

      // optional int32 huobiPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huobiPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huobiprice_)));
          set_has_huobiprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_probability;
        break;
      }

      // optional int32 probability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_floor;
        break;
      }

      // optional int32 floor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_needMaterial;
        break;
      }

      // repeated .proto_ff.combinecitemneedMaterialDesc needMaterial = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needMaterial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_needmaterial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_needMaterial;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void combinecitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->newitem(), output);
  }

  // optional int32 moneyType = 2;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moneytype(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 huobiType = 4;
  if (has_huobitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->huobitype(), output);
  }

  // optional int32 huobiPrice = 5;
  if (has_huobiprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->huobiprice(), output);
  }

  // optional int32 probability = 6;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->probability(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 floor = 8;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->floor(), output);
  }

  // repeated .proto_ff.combinecitemneedMaterialDesc needMaterial = 9;
  for (int i = 0; i < this->needmaterial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->needmaterial(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* combinecitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->newitem(), target);
  }

  // optional int32 moneyType = 2;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moneytype(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 huobiType = 4;
  if (has_huobitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->huobitype(), target);
  }

  // optional int32 huobiPrice = 5;
  if (has_huobiprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->huobiprice(), target);
  }

  // optional int32 probability = 6;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->probability(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 floor = 8;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->floor(), target);
  }

  // repeated .proto_ff.combinecitemneedMaterialDesc needMaterial = 9;
  for (int i = 0; i < this->needmaterial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->needmaterial(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int combinecitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 newItem = 1;
    if (has_newitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newitem());
    }

    // optional int32 moneyType = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 huobiType = 4;
    if (has_huobitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huobitype());
    }

    // optional int32 huobiPrice = 5;
    if (has_huobiprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huobiprice());
    }

    // optional int32 probability = 6;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 floor = 8;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }

  }
  // repeated .proto_ff.combinecitemneedMaterialDesc needMaterial = 9;
  total_size += 1 * this->needmaterial_size();
  for (int i = 0; i < this->needmaterial_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->needmaterial(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void combinecitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const combinecitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const combinecitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void combinecitem::MergeFrom(const combinecitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  needmaterial_.MergeFrom(from.needmaterial_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newitem()) {
      set_newitem(from.newitem());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_huobitype()) {
      set_huobitype(from.huobitype());
    }
    if (from.has_huobiprice()) {
      set_huobiprice(from.huobiprice());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void combinecitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void combinecitem::CopyFrom(const combinecitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool combinecitem::IsInitialized() const {

  return true;
}

void combinecitem::Swap(combinecitem* other) {
  if (other != this) {
    std::swap(newitem_, other->newitem_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(price_, other->price_);
    std::swap(huobitype_, other->huobitype_);
    std::swap(huobiprice_, other->huobiprice_);
    std::swap(probability_, other->probability_);
    std::swap(level_, other->level_);
    std::swap(floor_, other->floor_);
    needmaterial_.Swap(&other->needmaterial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata combinecitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = combinecitem_descriptor_;
  metadata.reflection = combinecitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_combinecitem::kCombinecitemListFieldNumber;
#endif  // !_MSC_VER

Sheet_combinecitem::Sheet_combinecitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_combinecitem::InitAsDefaultInstance() {
}

Sheet_combinecitem::Sheet_combinecitem(const Sheet_combinecitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_combinecitem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_combinecitem::~Sheet_combinecitem() {
  SharedDtor();
}

void Sheet_combinecitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_combinecitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_combinecitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_combinecitem_descriptor_;
}

const Sheet_combinecitem& Sheet_combinecitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

Sheet_combinecitem* Sheet_combinecitem::default_instance_ = NULL;

Sheet_combinecitem* Sheet_combinecitem::New() const {
  return new Sheet_combinecitem;
}

void Sheet_combinecitem::Clear() {
  combinecitem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_combinecitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.combinecitem combinecitem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combinecitem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combinecitem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_combinecitem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_combinecitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.combinecitem combinecitem_List = 1;
  for (int i = 0; i < this->combinecitem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->combinecitem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_combinecitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.combinecitem combinecitem_List = 1;
  for (int i = 0; i < this->combinecitem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->combinecitem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_combinecitem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.combinecitem combinecitem_List = 1;
  total_size += 1 * this->combinecitem_list_size();
  for (int i = 0; i < this->combinecitem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combinecitem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_combinecitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_combinecitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_combinecitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_combinecitem::MergeFrom(const Sheet_combinecitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  combinecitem_list_.MergeFrom(from.combinecitem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_combinecitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_combinecitem::CopyFrom(const Sheet_combinecitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_combinecitem::IsInitialized() const {

  return true;
}

void Sheet_combinecitem::Swap(Sheet_combinecitem* other) {
  if (other != this) {
    combinecitem_list_.Swap(&other->combinecitem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_combinecitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_combinecitem_descriptor_;
  metadata.reflection = Sheet_combinecitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int combinestarUp::kNewItemFieldNumber;
const int combinestarUp::kEquipMinFieldNumber;
const int combinestarUp::kNumFieldNumber;
const int combinestarUp::kNeedMaterialIdFieldNumber;
const int combinestarUp::kNeedMaterialNumFieldNumber;
const int combinestarUp::kStarFieldNumber;
const int combinestarUp::kWearQualityFieldNumber;
const int combinestarUp::kQualityFieldNumber;
const int combinestarUp::kSameProfessionFieldNumber;
const int combinestarUp::kSamePositionFieldNumber;
const int combinestarUp::kProbabilityFieldNumber;
const int combinestarUp::kIncreaseFieldNumber;
#endif  // !_MSC_VER

combinestarUp::combinestarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void combinestarUp::InitAsDefaultInstance() {
}

combinestarUp::combinestarUp(const combinestarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void combinestarUp::SharedCtor() {
  _cached_size_ = 0;
  newitem_ = GOOGLE_LONGLONG(0);
  equipmin_ = 0;
  num_ = 0;
  needmaterial_id_ = GOOGLE_LONGLONG(0);
  needmaterial_num_ = 0;
  star_ = 0;
  wearquality_ = 0;
  quality_ = 0;
  sameprofession_ = 0;
  sameposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  probability_ = 0;
  increase_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

combinestarUp::~combinestarUp() {
  SharedDtor();
}

void combinestarUp::SharedDtor() {
  if (sameposition_ != &::google::protobuf::internal::kEmptyString) {
    delete sameposition_;
  }
  if (this != default_instance_) {
  }
}

void combinestarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* combinestarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return combinestarUp_descriptor_;
}

const combinestarUp& combinestarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

combinestarUp* combinestarUp::default_instance_ = NULL;

combinestarUp* combinestarUp::New() const {
  return new combinestarUp;
}

void combinestarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newitem_ = GOOGLE_LONGLONG(0);
    equipmin_ = 0;
    num_ = 0;
    needmaterial_id_ = GOOGLE_LONGLONG(0);
    needmaterial_num_ = 0;
    star_ = 0;
    wearquality_ = 0;
    quality_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sameprofession_ = 0;
    if (has_sameposition()) {
      if (sameposition_ != &::google::protobuf::internal::kEmptyString) {
        sameposition_->clear();
      }
    }
    probability_ = 0;
    increase_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool combinestarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 newItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newitem_)));
          set_has_newitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipMin;
        break;
      }

      // optional int32 equipMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmin_)));
          set_has_equipmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needMaterial_id;
        break;
      }

      // optional int64 needMaterial_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needMaterial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needmaterial_id_)));
          set_has_needmaterial_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_needMaterial_num;
        break;
      }

      // optional int32 needMaterial_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needMaterial_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needmaterial_num_)));
          set_has_needmaterial_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star;
        break;
      }

      // optional int32 star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // optional int32 quality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sameProfession;
        break;
      }

      // optional int32 sameProfession = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sameProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sameprofession_)));
          set_has_sameprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_samePosition;
        break;
      }

      // optional string samePosition = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_samePosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sameposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sameposition().data(), this->sameposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_probability;
        break;
      }

      // optional int32 probability = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_increase;
        break;
      }

      // optional int32 increase = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_increase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_)));
          set_has_increase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void combinestarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->newitem(), output);
  }

  // optional int32 equipMin = 2;
  if (has_equipmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipmin(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int64 needMaterial_id = 4;
  if (has_needmaterial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->needmaterial_id(), output);
  }

  // optional int32 needMaterial_num = 5;
  if (has_needmaterial_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->needmaterial_num(), output);
  }

  // optional int32 star = 6;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->star(), output);
  }

  // optional int32 wearQuality = 7;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->wearquality(), output);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quality(), output);
  }

  // optional int32 sameProfession = 9;
  if (has_sameprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sameprofession(), output);
  }

  // optional string samePosition = 10;
  if (has_sameposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sameposition().data(), this->sameposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->sameposition(), output);
  }

  // optional int32 probability = 11;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->probability(), output);
  }

  // optional int32 increase = 12;
  if (has_increase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->increase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* combinestarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->newitem(), target);
  }

  // optional int32 equipMin = 2;
  if (has_equipmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipmin(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int64 needMaterial_id = 4;
  if (has_needmaterial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->needmaterial_id(), target);
  }

  // optional int32 needMaterial_num = 5;
  if (has_needmaterial_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->needmaterial_num(), target);
  }

  // optional int32 star = 6;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->star(), target);
  }

  // optional int32 wearQuality = 7;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->wearquality(), target);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quality(), target);
  }

  // optional int32 sameProfession = 9;
  if (has_sameprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sameprofession(), target);
  }

  // optional string samePosition = 10;
  if (has_sameposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sameposition().data(), this->sameposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->sameposition(), target);
  }

  // optional int32 probability = 11;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->probability(), target);
  }

  // optional int32 increase = 12;
  if (has_increase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->increase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int combinestarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 newItem = 1;
    if (has_newitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newitem());
    }

    // optional int32 equipMin = 2;
    if (has_equipmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmin());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 needMaterial_id = 4;
    if (has_needmaterial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needmaterial_id());
    }

    // optional int32 needMaterial_num = 5;
    if (has_needmaterial_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needmaterial_num());
    }

    // optional int32 star = 6;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 wearQuality = 7;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sameProfession = 9;
    if (has_sameprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sameprofession());
    }

    // optional string samePosition = 10;
    if (has_sameposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sameposition());
    }

    // optional int32 probability = 11;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

    // optional int32 increase = 12;
    if (has_increase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void combinestarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const combinestarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const combinestarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void combinestarUp::MergeFrom(const combinestarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newitem()) {
      set_newitem(from.newitem());
    }
    if (from.has_equipmin()) {
      set_equipmin(from.equipmin());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_needmaterial_id()) {
      set_needmaterial_id(from.needmaterial_id());
    }
    if (from.has_needmaterial_num()) {
      set_needmaterial_num(from.needmaterial_num());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sameprofession()) {
      set_sameprofession(from.sameprofession());
    }
    if (from.has_sameposition()) {
      set_sameposition(from.sameposition());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_increase()) {
      set_increase(from.increase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void combinestarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void combinestarUp::CopyFrom(const combinestarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool combinestarUp::IsInitialized() const {

  return true;
}

void combinestarUp::Swap(combinestarUp* other) {
  if (other != this) {
    std::swap(newitem_, other->newitem_);
    std::swap(equipmin_, other->equipmin_);
    std::swap(num_, other->num_);
    std::swap(needmaterial_id_, other->needmaterial_id_);
    std::swap(needmaterial_num_, other->needmaterial_num_);
    std::swap(star_, other->star_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(quality_, other->quality_);
    std::swap(sameprofession_, other->sameprofession_);
    std::swap(sameposition_, other->sameposition_);
    std::swap(probability_, other->probability_);
    std::swap(increase_, other->increase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata combinestarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = combinestarUp_descriptor_;
  metadata.reflection = combinestarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_combinestarUp::kCombinestarUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_combinestarUp::Sheet_combinestarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_combinestarUp::InitAsDefaultInstance() {
}

Sheet_combinestarUp::Sheet_combinestarUp(const Sheet_combinestarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_combinestarUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_combinestarUp::~Sheet_combinestarUp() {
  SharedDtor();
}

void Sheet_combinestarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_combinestarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_combinestarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_combinestarUp_descriptor_;
}

const Sheet_combinestarUp& Sheet_combinestarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

Sheet_combinestarUp* Sheet_combinestarUp::default_instance_ = NULL;

Sheet_combinestarUp* Sheet_combinestarUp::New() const {
  return new Sheet_combinestarUp;
}

void Sheet_combinestarUp::Clear() {
  combinestarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_combinestarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.combinestarUp combinestarUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combinestarUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combinestarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_combinestarUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_combinestarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.combinestarUp combinestarUp_List = 1;
  for (int i = 0; i < this->combinestarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->combinestarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_combinestarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.combinestarUp combinestarUp_List = 1;
  for (int i = 0; i < this->combinestarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->combinestarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_combinestarUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.combinestarUp combinestarUp_List = 1;
  total_size += 1 * this->combinestarup_list_size();
  for (int i = 0; i < this->combinestarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combinestarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_combinestarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_combinestarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_combinestarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_combinestarUp::MergeFrom(const Sheet_combinestarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  combinestarup_list_.MergeFrom(from.combinestarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_combinestarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_combinestarUp::CopyFrom(const Sheet_combinestarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_combinestarUp::IsInitialized() const {

  return true;
}

void Sheet_combinestarUp::Swap(Sheet_combinestarUp* other) {
  if (other != this) {
    combinestarup_list_.Swap(&other->combinestarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_combinestarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_combinestarUp_descriptor_;
  metadata.reflection = Sheet_combinestarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int combineitemUp::kNewItemFieldNumber;
const int combineitemUp::kMoneyTypeFieldNumber;
const int combineitemUp::kPriceFieldNumber;
const int combineitemUp::kNeedMaterialIDFieldNumber;
const int combineitemUp::kNeedMaterialMinFieldNumber;
const int combineitemUp::kNeedMaterialManFieldNumber;
const int combineitemUp::kProbabilityFieldNumber;
const int combineitemUp::kIncreaseFieldNumber;
#endif  // !_MSC_VER

combineitemUp::combineitemUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void combineitemUp::InitAsDefaultInstance() {
}

combineitemUp::combineitemUp(const combineitemUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void combineitemUp::SharedCtor() {
  _cached_size_ = 0;
  newitem_ = GOOGLE_LONGLONG(0);
  moneytype_ = 0;
  price_ = 0;
  needmaterialid_ = GOOGLE_LONGLONG(0);
  needmaterialmin_ = 0;
  needmaterialman_ = 0;
  probability_ = 0;
  increase_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

combineitemUp::~combineitemUp() {
  SharedDtor();
}

void combineitemUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void combineitemUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* combineitemUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return combineitemUp_descriptor_;
}

const combineitemUp& combineitemUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

combineitemUp* combineitemUp::default_instance_ = NULL;

combineitemUp* combineitemUp::New() const {
  return new combineitemUp;
}

void combineitemUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newitem_ = GOOGLE_LONGLONG(0);
    moneytype_ = 0;
    price_ = 0;
    needmaterialid_ = GOOGLE_LONGLONG(0);
    needmaterialmin_ = 0;
    needmaterialman_ = 0;
    probability_ = 0;
    increase_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool combineitemUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 newItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newitem_)));
          set_has_newitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needMaterialID;
        break;
      }

      // optional int64 needMaterialID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needMaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needmaterialid_)));
          set_has_needmaterialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_needMaterialMin;
        break;
      }

      // optional int32 needMaterialMin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needMaterialMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needmaterialmin_)));
          set_has_needmaterialmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_needMaterialMan;
        break;
      }

      // optional int32 needMaterialMan = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needMaterialMan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needmaterialman_)));
          set_has_needmaterialman();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_probability;
        break;
      }

      // optional int32 probability = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_increase;
        break;
      }

      // optional int32 increase = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_increase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_)));
          set_has_increase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void combineitemUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->newitem(), output);
  }

  // optional int32 moneyType = 2;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moneytype(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int64 needMaterialID = 4;
  if (has_needmaterialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->needmaterialid(), output);
  }

  // optional int32 needMaterialMin = 5;
  if (has_needmaterialmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->needmaterialmin(), output);
  }

  // optional int32 needMaterialMan = 6;
  if (has_needmaterialman()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->needmaterialman(), output);
  }

  // optional int32 probability = 7;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->probability(), output);
  }

  // optional int32 increase = 8;
  if (has_increase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->increase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* combineitemUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->newitem(), target);
  }

  // optional int32 moneyType = 2;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moneytype(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int64 needMaterialID = 4;
  if (has_needmaterialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->needmaterialid(), target);
  }

  // optional int32 needMaterialMin = 5;
  if (has_needmaterialmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->needmaterialmin(), target);
  }

  // optional int32 needMaterialMan = 6;
  if (has_needmaterialman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->needmaterialman(), target);
  }

  // optional int32 probability = 7;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->probability(), target);
  }

  // optional int32 increase = 8;
  if (has_increase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->increase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int combineitemUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 newItem = 1;
    if (has_newitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newitem());
    }

    // optional int32 moneyType = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int64 needMaterialID = 4;
    if (has_needmaterialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needmaterialid());
    }

    // optional int32 needMaterialMin = 5;
    if (has_needmaterialmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needmaterialmin());
    }

    // optional int32 needMaterialMan = 6;
    if (has_needmaterialman()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needmaterialman());
    }

    // optional int32 probability = 7;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

    // optional int32 increase = 8;
    if (has_increase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void combineitemUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const combineitemUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const combineitemUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void combineitemUp::MergeFrom(const combineitemUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newitem()) {
      set_newitem(from.newitem());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_needmaterialid()) {
      set_needmaterialid(from.needmaterialid());
    }
    if (from.has_needmaterialmin()) {
      set_needmaterialmin(from.needmaterialmin());
    }
    if (from.has_needmaterialman()) {
      set_needmaterialman(from.needmaterialman());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_increase()) {
      set_increase(from.increase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void combineitemUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void combineitemUp::CopyFrom(const combineitemUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool combineitemUp::IsInitialized() const {

  return true;
}

void combineitemUp::Swap(combineitemUp* other) {
  if (other != this) {
    std::swap(newitem_, other->newitem_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(price_, other->price_);
    std::swap(needmaterialid_, other->needmaterialid_);
    std::swap(needmaterialmin_, other->needmaterialmin_);
    std::swap(needmaterialman_, other->needmaterialman_);
    std::swap(probability_, other->probability_);
    std::swap(increase_, other->increase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata combineitemUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = combineitemUp_descriptor_;
  metadata.reflection = combineitemUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_combineitemUp::kCombineitemUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_combineitemUp::Sheet_combineitemUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_combineitemUp::InitAsDefaultInstance() {
}

Sheet_combineitemUp::Sheet_combineitemUp(const Sheet_combineitemUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_combineitemUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_combineitemUp::~Sheet_combineitemUp() {
  SharedDtor();
}

void Sheet_combineitemUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_combineitemUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_combineitemUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_combineitemUp_descriptor_;
}

const Sheet_combineitemUp& Sheet_combineitemUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

Sheet_combineitemUp* Sheet_combineitemUp::default_instance_ = NULL;

Sheet_combineitemUp* Sheet_combineitemUp::New() const {
  return new Sheet_combineitemUp;
}

void Sheet_combineitemUp::Clear() {
  combineitemup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_combineitemUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.combineitemUp combineitemUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combineitemUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combineitemup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_combineitemUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_combineitemUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.combineitemUp combineitemUp_List = 1;
  for (int i = 0; i < this->combineitemup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->combineitemup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_combineitemUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.combineitemUp combineitemUp_List = 1;
  for (int i = 0; i < this->combineitemup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->combineitemup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_combineitemUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.combineitemUp combineitemUp_List = 1;
  total_size += 1 * this->combineitemup_list_size();
  for (int i = 0; i < this->combineitemup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combineitemup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_combineitemUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_combineitemUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_combineitemUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_combineitemUp::MergeFrom(const Sheet_combineitemUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  combineitemup_list_.MergeFrom(from.combineitemup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_combineitemUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_combineitemUp::CopyFrom(const Sheet_combineitemUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_combineitemUp::IsInitialized() const {

  return true;
}

void Sheet_combineitemUp::Swap(Sheet_combineitemUp* other) {
  if (other != this) {
    combineitemup_list_.Swap(&other->combineitemup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_combineitemUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_combineitemUp_descriptor_;
  metadata.reflection = Sheet_combineitemUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int combinerankUp::kNewItemFieldNumber;
const int combinerankUp::kNumFieldNumber;
const int combinerankUp::kNeedMaterialIdFieldNumber;
const int combinerankUp::kNeedMaterialNumFieldNumber;
const int combinerankUp::kStarFieldNumber;
const int combinerankUp::kWearQualityFieldNumber;
const int combinerankUp::kQualityFieldNumber;
const int combinerankUp::kSameProfessionFieldNumber;
const int combinerankUp::kSamePositionFieldNumber;
const int combinerankUp::kProbabilityFieldNumber;
#endif  // !_MSC_VER

combinerankUp::combinerankUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void combinerankUp::InitAsDefaultInstance() {
}

combinerankUp::combinerankUp(const combinerankUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void combinerankUp::SharedCtor() {
  _cached_size_ = 0;
  newitem_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  needmaterial_id_ = GOOGLE_LONGLONG(0);
  needmaterial_num_ = 0;
  star_ = 0;
  wearquality_ = 0;
  quality_ = 0;
  sameprofession_ = 0;
  sameposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

combinerankUp::~combinerankUp() {
  SharedDtor();
}

void combinerankUp::SharedDtor() {
  if (sameposition_ != &::google::protobuf::internal::kEmptyString) {
    delete sameposition_;
  }
  if (this != default_instance_) {
  }
}

void combinerankUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* combinerankUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return combinerankUp_descriptor_;
}

const combinerankUp& combinerankUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

combinerankUp* combinerankUp::default_instance_ = NULL;

combinerankUp* combinerankUp::New() const {
  return new combinerankUp;
}

void combinerankUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newitem_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    needmaterial_id_ = GOOGLE_LONGLONG(0);
    needmaterial_num_ = 0;
    star_ = 0;
    wearquality_ = 0;
    quality_ = 0;
    sameprofession_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sameposition()) {
      if (sameposition_ != &::google::protobuf::internal::kEmptyString) {
        sameposition_->clear();
      }
    }
    probability_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool combinerankUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 newItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newitem_)));
          set_has_newitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needMaterial_id;
        break;
      }

      // optional int64 needMaterial_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needMaterial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needmaterial_id_)));
          set_has_needmaterial_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_needMaterial_num;
        break;
      }

      // optional int32 needMaterial_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needMaterial_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needmaterial_num_)));
          set_has_needmaterial_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional int32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sameProfession;
        break;
      }

      // optional int32 sameProfession = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sameProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sameprofession_)));
          set_has_sameprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_samePosition;
        break;
      }

      // optional string samePosition = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_samePosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sameposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sameposition().data(), this->sameposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_probability;
        break;
      }

      // optional int32 probability = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void combinerankUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->newitem(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int64 needMaterial_id = 3;
  if (has_needmaterial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->needmaterial_id(), output);
  }

  // optional int32 needMaterial_num = 4;
  if (has_needmaterial_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needmaterial_num(), output);
  }

  // optional int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  // optional int32 wearQuality = 6;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wearquality(), output);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  // optional int32 sameProfession = 8;
  if (has_sameprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sameprofession(), output);
  }

  // optional string samePosition = 9;
  if (has_sameposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sameposition().data(), this->sameposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sameposition(), output);
  }

  // optional int32 probability = 10;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->probability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* combinerankUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->newitem(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int64 needMaterial_id = 3;
  if (has_needmaterial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->needmaterial_id(), target);
  }

  // optional int32 needMaterial_num = 4;
  if (has_needmaterial_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needmaterial_num(), target);
  }

  // optional int32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  // optional int32 wearQuality = 6;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wearquality(), target);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  // optional int32 sameProfession = 8;
  if (has_sameprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sameprofession(), target);
  }

  // optional string samePosition = 9;
  if (has_sameposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sameposition().data(), this->sameposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sameposition(), target);
  }

  // optional int32 probability = 10;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->probability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int combinerankUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 newItem = 1;
    if (has_newitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newitem());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 needMaterial_id = 3;
    if (has_needmaterial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needmaterial_id());
    }

    // optional int32 needMaterial_num = 4;
    if (has_needmaterial_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needmaterial_num());
    }

    // optional int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 wearQuality = 6;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 sameProfession = 8;
    if (has_sameprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sameprofession());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string samePosition = 9;
    if (has_sameposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sameposition());
    }

    // optional int32 probability = 10;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void combinerankUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const combinerankUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const combinerankUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void combinerankUp::MergeFrom(const combinerankUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newitem()) {
      set_newitem(from.newitem());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_needmaterial_id()) {
      set_needmaterial_id(from.needmaterial_id());
    }
    if (from.has_needmaterial_num()) {
      set_needmaterial_num(from.needmaterial_num());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_sameprofession()) {
      set_sameprofession(from.sameprofession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sameposition()) {
      set_sameposition(from.sameposition());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void combinerankUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void combinerankUp::CopyFrom(const combinerankUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool combinerankUp::IsInitialized() const {

  return true;
}

void combinerankUp::Swap(combinerankUp* other) {
  if (other != this) {
    std::swap(newitem_, other->newitem_);
    std::swap(num_, other->num_);
    std::swap(needmaterial_id_, other->needmaterial_id_);
    std::swap(needmaterial_num_, other->needmaterial_num_);
    std::swap(star_, other->star_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(quality_, other->quality_);
    std::swap(sameprofession_, other->sameprofession_);
    std::swap(sameposition_, other->sameposition_);
    std::swap(probability_, other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata combinerankUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = combinerankUp_descriptor_;
  metadata.reflection = combinerankUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_combinerankUp::kCombinerankUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_combinerankUp::Sheet_combinerankUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_combinerankUp::InitAsDefaultInstance() {
}

Sheet_combinerankUp::Sheet_combinerankUp(const Sheet_combinerankUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_combinerankUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_combinerankUp::~Sheet_combinerankUp() {
  SharedDtor();
}

void Sheet_combinerankUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_combinerankUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_combinerankUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_combinerankUp_descriptor_;
}

const Sheet_combinerankUp& Sheet_combinerankUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

Sheet_combinerankUp* Sheet_combinerankUp::default_instance_ = NULL;

Sheet_combinerankUp* Sheet_combinerankUp::New() const {
  return new Sheet_combinerankUp;
}

void Sheet_combinerankUp::Clear() {
  combinerankup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_combinerankUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.combinerankUp combinerankUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combinerankUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combinerankup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_combinerankUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_combinerankUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.combinerankUp combinerankUp_List = 1;
  for (int i = 0; i < this->combinerankup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->combinerankup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_combinerankUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.combinerankUp combinerankUp_List = 1;
  for (int i = 0; i < this->combinerankup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->combinerankup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_combinerankUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.combinerankUp combinerankUp_List = 1;
  total_size += 1 * this->combinerankup_list_size();
  for (int i = 0; i < this->combinerankup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combinerankup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_combinerankUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_combinerankUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_combinerankUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_combinerankUp::MergeFrom(const Sheet_combinerankUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  combinerankup_list_.MergeFrom(from.combinerankup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_combinerankUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_combinerankUp::CopyFrom(const Sheet_combinerankUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_combinerankUp::IsInitialized() const {

  return true;
}

void Sheet_combinerankUp::Swap(Sheet_combinerankUp* other) {
  if (other != this) {
    combinerankup_list_.Swap(&other->combinerankup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_combinerankUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_combinerankUp_descriptor_;
  metadata.reflection = Sheet_combinerankUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int combinequalityUpneedEqupDesc::kIdFieldNumber;
#endif  // !_MSC_VER

combinequalityUpneedEqupDesc::combinequalityUpneedEqupDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void combinequalityUpneedEqupDesc::InitAsDefaultInstance() {
}

combinequalityUpneedEqupDesc::combinequalityUpneedEqupDesc(const combinequalityUpneedEqupDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void combinequalityUpneedEqupDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

combinequalityUpneedEqupDesc::~combinequalityUpneedEqupDesc() {
  SharedDtor();
}

void combinequalityUpneedEqupDesc::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void combinequalityUpneedEqupDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* combinequalityUpneedEqupDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return combinequalityUpneedEqupDesc_descriptor_;
}

const combinequalityUpneedEqupDesc& combinequalityUpneedEqupDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

combinequalityUpneedEqupDesc* combinequalityUpneedEqupDesc::default_instance_ = NULL;

combinequalityUpneedEqupDesc* combinequalityUpneedEqupDesc::New() const {
  return new combinequalityUpneedEqupDesc;
}

void combinequalityUpneedEqupDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool combinequalityUpneedEqupDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void combinequalityUpneedEqupDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* combinequalityUpneedEqupDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int combinequalityUpneedEqupDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void combinequalityUpneedEqupDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const combinequalityUpneedEqupDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const combinequalityUpneedEqupDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void combinequalityUpneedEqupDesc::MergeFrom(const combinequalityUpneedEqupDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void combinequalityUpneedEqupDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void combinequalityUpneedEqupDesc::CopyFrom(const combinequalityUpneedEqupDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool combinequalityUpneedEqupDesc::IsInitialized() const {

  return true;
}

void combinequalityUpneedEqupDesc::Swap(combinequalityUpneedEqupDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata combinequalityUpneedEqupDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = combinequalityUpneedEqupDesc_descriptor_;
  metadata.reflection = combinequalityUpneedEqupDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int combinequalityUpneedMaterialDesc::kNumFieldNumber;
const int combinequalityUpneedMaterialDesc::kIdFieldNumber;
#endif  // !_MSC_VER

combinequalityUpneedMaterialDesc::combinequalityUpneedMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void combinequalityUpneedMaterialDesc::InitAsDefaultInstance() {
}

combinequalityUpneedMaterialDesc::combinequalityUpneedMaterialDesc(const combinequalityUpneedMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void combinequalityUpneedMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

combinequalityUpneedMaterialDesc::~combinequalityUpneedMaterialDesc() {
  SharedDtor();
}

void combinequalityUpneedMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void combinequalityUpneedMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* combinequalityUpneedMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return combinequalityUpneedMaterialDesc_descriptor_;
}

const combinequalityUpneedMaterialDesc& combinequalityUpneedMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

combinequalityUpneedMaterialDesc* combinequalityUpneedMaterialDesc::default_instance_ = NULL;

combinequalityUpneedMaterialDesc* combinequalityUpneedMaterialDesc::New() const {
  return new combinequalityUpneedMaterialDesc;
}

void combinequalityUpneedMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool combinequalityUpneedMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void combinequalityUpneedMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* combinequalityUpneedMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int combinequalityUpneedMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void combinequalityUpneedMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const combinequalityUpneedMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const combinequalityUpneedMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void combinequalityUpneedMaterialDesc::MergeFrom(const combinequalityUpneedMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void combinequalityUpneedMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void combinequalityUpneedMaterialDesc::CopyFrom(const combinequalityUpneedMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool combinequalityUpneedMaterialDesc::IsInitialized() const {

  return true;
}

void combinequalityUpneedMaterialDesc::Swap(combinequalityUpneedMaterialDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata combinequalityUpneedMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = combinequalityUpneedMaterialDesc_descriptor_;
  metadata.reflection = combinequalityUpneedMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int combinequalityUp::kNewItemFieldNumber;
const int combinequalityUp::kNumFieldNumber;
const int combinequalityUp::kNeedEqupNumFieldNumber;
const int combinequalityUp::kStarFieldNumber;
const int combinequalityUp::kWearQualityFieldNumber;
const int combinequalityUp::kQualityFieldNumber;
const int combinequalityUp::kSameProfessionFieldNumber;
const int combinequalityUp::kSamePositionFieldNumber;
const int combinequalityUp::kProbabilityFieldNumber;
const int combinequalityUp::kCostTypeFieldNumber;
const int combinequalityUp::kBindJewelCostFieldNumber;
const int combinequalityUp::kNeedEqupFieldNumber;
const int combinequalityUp::kNeedMaterialFieldNumber;
#endif  // !_MSC_VER

combinequalityUp::combinequalityUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void combinequalityUp::InitAsDefaultInstance() {
}

combinequalityUp::combinequalityUp(const combinequalityUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void combinequalityUp::SharedCtor() {
  _cached_size_ = 0;
  newitem_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  needequp_num_ = 0;
  star_ = 0;
  wearquality_ = 0;
  quality_ = 0;
  sameprofession_ = 0;
  sameposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  probability_ = 0;
  costtype_ = 0;
  bindjewelcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

combinequalityUp::~combinequalityUp() {
  SharedDtor();
}

void combinequalityUp::SharedDtor() {
  if (sameposition_ != &::google::protobuf::internal::kEmptyString) {
    delete sameposition_;
  }
  if (this != default_instance_) {
  }
}

void combinequalityUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* combinequalityUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return combinequalityUp_descriptor_;
}

const combinequalityUp& combinequalityUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

combinequalityUp* combinequalityUp::default_instance_ = NULL;

combinequalityUp* combinequalityUp::New() const {
  return new combinequalityUp;
}

void combinequalityUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newitem_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    needequp_num_ = 0;
    star_ = 0;
    wearquality_ = 0;
    quality_ = 0;
    sameprofession_ = 0;
    if (has_sameposition()) {
      if (sameposition_ != &::google::protobuf::internal::kEmptyString) {
        sameposition_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    probability_ = 0;
    costtype_ = 0;
    bindjewelcost_ = 0;
  }
  needequp_.Clear();
  needmaterial_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool combinequalityUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 newItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newitem_)));
          set_has_newitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needEqup_num;
        break;
      }

      // optional int32 needEqup_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needEqup_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needequp_num_)));
          set_has_needequp_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // optional int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // optional int32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sameProfession;
        break;
      }

      // optional int32 sameProfession = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sameProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sameprofession_)));
          set_has_sameprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_samePosition;
        break;
      }

      // optional string samePosition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_samePosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sameposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sameposition().data(), this->sameposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_probability;
        break;
      }

      // optional int32 probability = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_costType;
        break;
      }

      // optional int32 costType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costtype_)));
          set_has_costtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bindJewelCost;
        break;
      }

      // optional int32 bindJewelCost = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindJewelCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindjewelcost_)));
          set_has_bindjewelcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_needEqup;
        break;
      }

      // repeated .proto_ff.combinequalityUpneedEqupDesc needEqup = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needEqup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_needequp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_needEqup;
        if (input->ExpectTag(106)) goto parse_needMaterial;
        break;
      }

      // repeated .proto_ff.combinequalityUpneedMaterialDesc needMaterial = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needMaterial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_needmaterial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_needMaterial;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void combinequalityUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->newitem(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 needEqup_num = 3;
  if (has_needequp_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->needequp_num(), output);
  }

  // optional int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // optional int32 wearQuality = 5;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wearquality(), output);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quality(), output);
  }

  // optional int32 sameProfession = 7;
  if (has_sameprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sameprofession(), output);
  }

  // optional string samePosition = 8;
  if (has_sameposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sameposition().data(), this->sameposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sameposition(), output);
  }

  // optional int32 probability = 9;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->probability(), output);
  }

  // optional int32 costType = 10;
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->costtype(), output);
  }

  // optional int32 bindJewelCost = 11;
  if (has_bindjewelcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bindjewelcost(), output);
  }

  // repeated .proto_ff.combinequalityUpneedEqupDesc needEqup = 12;
  for (int i = 0; i < this->needequp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->needequp(i), output);
  }

  // repeated .proto_ff.combinequalityUpneedMaterialDesc needMaterial = 13;
  for (int i = 0; i < this->needmaterial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->needmaterial(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* combinequalityUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 newItem = 1;
  if (has_newitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->newitem(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 needEqup_num = 3;
  if (has_needequp_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->needequp_num(), target);
  }

  // optional int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // optional int32 wearQuality = 5;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wearquality(), target);
  }

  // optional int32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quality(), target);
  }

  // optional int32 sameProfession = 7;
  if (has_sameprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sameprofession(), target);
  }

  // optional string samePosition = 8;
  if (has_sameposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sameposition().data(), this->sameposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sameposition(), target);
  }

  // optional int32 probability = 9;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->probability(), target);
  }

  // optional int32 costType = 10;
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->costtype(), target);
  }

  // optional int32 bindJewelCost = 11;
  if (has_bindjewelcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bindjewelcost(), target);
  }

  // repeated .proto_ff.combinequalityUpneedEqupDesc needEqup = 12;
  for (int i = 0; i < this->needequp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->needequp(i), target);
  }

  // repeated .proto_ff.combinequalityUpneedMaterialDesc needMaterial = 13;
  for (int i = 0; i < this->needmaterial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->needmaterial(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int combinequalityUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 newItem = 1;
    if (has_newitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newitem());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 needEqup_num = 3;
    if (has_needequp_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needequp_num());
    }

    // optional int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 wearQuality = 5;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 sameProfession = 7;
    if (has_sameprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sameprofession());
    }

    // optional string samePosition = 8;
    if (has_sameposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sameposition());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 probability = 9;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

    // optional int32 costType = 10;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costtype());
    }

    // optional int32 bindJewelCost = 11;
    if (has_bindjewelcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindjewelcost());
    }

  }
  // repeated .proto_ff.combinequalityUpneedEqupDesc needEqup = 12;
  total_size += 1 * this->needequp_size();
  for (int i = 0; i < this->needequp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->needequp(i));
  }

  // repeated .proto_ff.combinequalityUpneedMaterialDesc needMaterial = 13;
  total_size += 1 * this->needmaterial_size();
  for (int i = 0; i < this->needmaterial_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->needmaterial(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void combinequalityUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const combinequalityUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const combinequalityUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void combinequalityUp::MergeFrom(const combinequalityUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  needequp_.MergeFrom(from.needequp_);
  needmaterial_.MergeFrom(from.needmaterial_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newitem()) {
      set_newitem(from.newitem());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_needequp_num()) {
      set_needequp_num(from.needequp_num());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_sameprofession()) {
      set_sameprofession(from.sameprofession());
    }
    if (from.has_sameposition()) {
      set_sameposition(from.sameposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
    if (from.has_bindjewelcost()) {
      set_bindjewelcost(from.bindjewelcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void combinequalityUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void combinequalityUp::CopyFrom(const combinequalityUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool combinequalityUp::IsInitialized() const {

  return true;
}

void combinequalityUp::Swap(combinequalityUp* other) {
  if (other != this) {
    std::swap(newitem_, other->newitem_);
    std::swap(num_, other->num_);
    std::swap(needequp_num_, other->needequp_num_);
    std::swap(star_, other->star_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(quality_, other->quality_);
    std::swap(sameprofession_, other->sameprofession_);
    std::swap(sameposition_, other->sameposition_);
    std::swap(probability_, other->probability_);
    std::swap(costtype_, other->costtype_);
    std::swap(bindjewelcost_, other->bindjewelcost_);
    needequp_.Swap(&other->needequp_);
    needmaterial_.Swap(&other->needmaterial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata combinequalityUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = combinequalityUp_descriptor_;
  metadata.reflection = combinequalityUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_combinequalityUp::kCombinequalityUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_combinequalityUp::Sheet_combinequalityUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_combinequalityUp::InitAsDefaultInstance() {
}

Sheet_combinequalityUp::Sheet_combinequalityUp(const Sheet_combinequalityUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_combinequalityUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_combinequalityUp::~Sheet_combinequalityUp() {
  SharedDtor();
}

void Sheet_combinequalityUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_combinequalityUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_combinequalityUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_combinequalityUp_descriptor_;
}

const Sheet_combinequalityUp& Sheet_combinequalityUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_combine_2eproto();
  return *default_instance_;
}

Sheet_combinequalityUp* Sheet_combinequalityUp::default_instance_ = NULL;

Sheet_combinequalityUp* Sheet_combinequalityUp::New() const {
  return new Sheet_combinequalityUp;
}

void Sheet_combinequalityUp::Clear() {
  combinequalityup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_combinequalityUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.combinequalityUp combinequalityUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combinequalityUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combinequalityup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_combinequalityUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_combinequalityUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.combinequalityUp combinequalityUp_List = 1;
  for (int i = 0; i < this->combinequalityup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->combinequalityup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_combinequalityUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.combinequalityUp combinequalityUp_List = 1;
  for (int i = 0; i < this->combinequalityup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->combinequalityup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_combinequalityUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.combinequalityUp combinequalityUp_List = 1;
  total_size += 1 * this->combinequalityup_list_size();
  for (int i = 0; i < this->combinequalityup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combinequalityup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_combinequalityUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_combinequalityUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_combinequalityUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_combinequalityUp::MergeFrom(const Sheet_combinequalityUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  combinequalityup_list_.MergeFrom(from.combinequalityup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_combinequalityUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_combinequalityUp::CopyFrom(const Sheet_combinequalityUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_combinequalityUp::IsInitialized() const {

  return true;
}

void Sheet_combinequalityUp::Swap(Sheet_combinequalityUp* other) {
  if (other != this) {
    combinequalityup_list_.Swap(&other->combinequalityup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_combinequalityUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_combinequalityUp_descriptor_;
  metadata.reflection = Sheet_combinequalityUp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
