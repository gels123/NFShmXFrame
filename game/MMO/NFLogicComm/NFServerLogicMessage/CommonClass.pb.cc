// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonClass.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonClass.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ItemBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipBase_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enPlayerStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommonClass_2eproto() {
  protobuf_AddDesc_CommonClass_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommonClass.proto");
  GOOGLE_CHECK(file != NULL);
  ItemBase_descriptor_ = file->message_type(0);
  static const int ItemBase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, type_),
  };
  ItemBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemBase_descriptor_,
      ItemBase::default_instance_,
      ItemBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemBase));
  EquipBase_descriptor_ = file->message_type(1);
  static const int EquipBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBase, base_attr_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBase, star_attr_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBase, god_attr_percent_),
  };
  EquipBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipBase_descriptor_,
      EquipBase::default_instance_,
      EquipBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipBase));
  enPlayerStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommonClass_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemBase_descriptor_, &ItemBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipBase_descriptor_, &EquipBase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommonClass_2eproto() {
  delete ItemBase::default_instance_;
  delete ItemBase_reflection_;
  delete EquipBase::default_instance_;
  delete EquipBase_reflection_;
}

void protobuf_AddDesc_CommonClass_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CommonClass.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\032\tCom.proto\"\226\002\n\010ItemBase\022\031\n\005"
    "index\030\001 \001(\rB\n\302\377\024\006\347\264\242\345\274\225\022\035\n\007item_id\030\002 \001(\r"
    "B\014\302\377\024\010\347\211\251\345\223\201ID\022\"\n\010item_num\030\003 \001(\004B\020\302\377\024\014\347\211"
    "\251\345\223\201\346\225\260\351\207\217\022\036\n\004bind\030\004 \001(\010B\020\302\377\024\014\347\273\221\345\256\232\347\212\266\346"
    "\200\201\022I\n\005level\030\006 \001(\rB:\302\377\0246\347\255\211\347\272\247 \351\242\204\347\225\231(\350\243\205"
    "\345\244\207\351\207\214\357\274\214\350\277\231\344\270\252\347\255\211\347\272\247\346\230\257\347\216\251\345\256\266\347\255\211\347\272\247)\0223\n"
    "\nexpireTime\030\007 \001(\004B\037\302\377\024\033\350\277\207\346\234\237\346\227\266\351\227\264,0,\346\260"
    "\270\344\270\215\350\277\207\346\234\237\022\014\n\004type\030\010 \001(\r\"\317\001\n\tEquipBase\022+"
    "\n\021base_attr_percent\030\001 \001(\rB\020\302\377\024\014\345\237\272\347\241\200\345\261\236"
    "\346\200\247\022i\n\021star_attr_percent\030\002 \001(\rBN\302\377\024J\346\230\237\347"
    "\272\247\345\261\236\346\200\247 \344\273\231\345\223\201\345\261\236\346\200\247 = \346\230\237\347\272\247\345\261\236\346\200\247(\345\270\246"
    "\342\230\205) + \350\223\235\346\230\237\345\261\236\346\200\247(\344\270\215\345\270\246\342\230\205)\022*\n\020god_at"
    "tr_percent\030\003 \001(\rB\020\302\377\024\014\344\273\231\345\260\212\345\261\236\346\200\247*\217\001\n\016e"
    "nPlayerStatus\022\026\n\022PLAYER_STATUS_NONE\020\000\022\030\n"
    "\024PLAYER_STATUS_ONLINE\020\001\022\031\n\025PLAYER_STATUS"
    "_OFFLINE\020\002\022\030\n\024PLAYER_STATUS_LOGOUT\020\003\022\026\n\022"
    "PLAYER_STATUS_DEAD\020\004", 700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonClass.proto", &protobuf_RegisterTypes);
  ItemBase::default_instance_ = new ItemBase();
  EquipBase::default_instance_ = new EquipBase();
  ItemBase::default_instance_->InitAsDefaultInstance();
  EquipBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommonClass_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommonClass_2eproto {
  StaticDescriptorInitializer_CommonClass_2eproto() {
    protobuf_AddDesc_CommonClass_2eproto();
  }
} static_descriptor_initializer_CommonClass_2eproto_;
const ::google::protobuf::EnumDescriptor* enPlayerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enPlayerStatus_descriptor_;
}
bool enPlayerStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ItemBase::kIndexFieldNumber;
const int ItemBase::kItemIdFieldNumber;
const int ItemBase::kItemNumFieldNumber;
const int ItemBase::kBindFieldNumber;
const int ItemBase::kLevelFieldNumber;
const int ItemBase::kExpireTimeFieldNumber;
const int ItemBase::kTypeFieldNumber;
#endif  // !_MSC_VER

ItemBase::ItemBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemBase::InitAsDefaultInstance() {
}

ItemBase::ItemBase(const ItemBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemBase::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  item_id_ = 0u;
  item_num_ = GOOGLE_ULONGLONG(0);
  bind_ = false;
  level_ = 0u;
  expiretime_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBase::~ItemBase() {
  SharedDtor();
}

void ItemBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemBase_descriptor_;
}

const ItemBase& ItemBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonClass_2eproto();
  return *default_instance_;
}

ItemBase* ItemBase::default_instance_ = NULL;

ItemBase* ItemBase::New() const {
  return new ItemBase;
}

void ItemBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    item_id_ = 0u;
    item_num_ = GOOGLE_ULONGLONG(0);
    bind_ = false;
    level_ = 0u;
    expiretime_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional uint64 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }

      // optional bool bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expireTime;
        break;
      }

      // optional uint64 expireTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional uint32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // optional uint64 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_num(), output);
  }

  // optional bool bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bind(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint64 expireTime = 7;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->expiretime(), output);
  }

  // optional uint32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // optional uint64 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_num(), target);
  }

  // optional bool bind = 4;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bind(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint64 expireTime = 7;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->expiretime(), target);
  }

  // optional uint32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint64 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_num());
    }

    // optional bool bind = 4;
    if (has_bind()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 expireTime = 7;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional uint32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemBase::MergeFrom(const ItemBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemBase::CopyFrom(const ItemBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBase::IsInitialized() const {

  return true;
}

void ItemBase::Swap(ItemBase* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(bind_, other->bind_);
    std::swap(level_, other->level_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemBase_descriptor_;
  metadata.reflection = ItemBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipBase::kBaseAttrPercentFieldNumber;
const int EquipBase::kStarAttrPercentFieldNumber;
const int EquipBase::kGodAttrPercentFieldNumber;
#endif  // !_MSC_VER

EquipBase::EquipBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipBase::InitAsDefaultInstance() {
}

EquipBase::EquipBase(const EquipBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipBase::SharedCtor() {
  _cached_size_ = 0;
  base_attr_percent_ = 0u;
  star_attr_percent_ = 0u;
  god_attr_percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipBase::~EquipBase() {
  SharedDtor();
}

void EquipBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipBase_descriptor_;
}

const EquipBase& EquipBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonClass_2eproto();
  return *default_instance_;
}

EquipBase* EquipBase::default_instance_ = NULL;

EquipBase* EquipBase::New() const {
  return new EquipBase;
}

void EquipBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_attr_percent_ = 0u;
    star_attr_percent_ = 0u;
    god_attr_percent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 base_attr_percent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_attr_percent_)));
          set_has_base_attr_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_attr_percent;
        break;
      }

      // optional uint32 star_attr_percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_attr_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_attr_percent_)));
          set_has_star_attr_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_god_attr_percent;
        break;
      }

      // optional uint32 god_attr_percent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_god_attr_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &god_attr_percent_)));
          set_has_god_attr_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 base_attr_percent = 1;
  if (has_base_attr_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->base_attr_percent(), output);
  }

  // optional uint32 star_attr_percent = 2;
  if (has_star_attr_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_attr_percent(), output);
  }

  // optional uint32 god_attr_percent = 3;
  if (has_god_attr_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->god_attr_percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 base_attr_percent = 1;
  if (has_base_attr_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->base_attr_percent(), target);
  }

  // optional uint32 star_attr_percent = 2;
  if (has_star_attr_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_attr_percent(), target);
  }

  // optional uint32 god_attr_percent = 3;
  if (has_god_attr_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->god_attr_percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 base_attr_percent = 1;
    if (has_base_attr_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_attr_percent());
    }

    // optional uint32 star_attr_percent = 2;
    if (has_star_attr_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_attr_percent());
    }

    // optional uint32 god_attr_percent = 3;
    if (has_god_attr_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->god_attr_percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipBase::MergeFrom(const EquipBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_attr_percent()) {
      set_base_attr_percent(from.base_attr_percent());
    }
    if (from.has_star_attr_percent()) {
      set_star_attr_percent(from.star_attr_percent());
    }
    if (from.has_god_attr_percent()) {
      set_god_attr_percent(from.god_attr_percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipBase::CopyFrom(const EquipBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipBase::IsInitialized() const {

  return true;
}

void EquipBase::Swap(EquipBase* other) {
  if (other != this) {
    std::swap(base_attr_percent_, other->base_attr_percent_);
    std::swap(star_attr_percent_, other->star_attr_percent_);
    std::swap(god_attr_percent_, other->god_attr_percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipBase_descriptor_;
  metadata.reflection = EquipBase_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
