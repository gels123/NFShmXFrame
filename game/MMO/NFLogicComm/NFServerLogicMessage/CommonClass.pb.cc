// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonClass.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonClass.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GridItemBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridItemBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemGridCSData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemGridCSData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enBagPageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommonClass_2eproto() {
  protobuf_AddDesc_CommonClass_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommonClass.proto");
  GOOGLE_CHECK(file != NULL);
  GridItemBase_descriptor_ = file->message_type(0);
  static const int GridItemBase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, type_),
  };
  GridItemBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridItemBase_descriptor_,
      GridItemBase::default_instance_,
      GridItemBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridItemBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridItemBase));
  EquipExt_descriptor_ = file->message_type(1);
  static const int EquipExt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExt, base_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExt, star_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExt, blue_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExt, god_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExt, special_attr_),
  };
  EquipExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipExt_descriptor_,
      EquipExt::default_instance_,
      EquipExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipExt));
  ItemGridCSData_descriptor_ = file->message_type(2);
  static const int ItemGridCSData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGridCSData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGridCSData, equip_data_),
  };
  ItemGridCSData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemGridCSData_descriptor_,
      ItemGridCSData::default_instance_,
      ItemGridCSData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGridCSData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemGridCSData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemGridCSData));
  enBagPageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommonClass_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridItemBase_descriptor_, &GridItemBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipExt_descriptor_, &EquipExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemGridCSData_descriptor_, &ItemGridCSData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommonClass_2eproto() {
  delete GridItemBase::default_instance_;
  delete GridItemBase_reflection_;
  delete EquipExt::default_instance_;
  delete EquipExt_reflection_;
  delete ItemGridCSData::default_instance_;
  delete ItemGridCSData_reflection_;
}

void protobuf_AddDesc_CommonClass_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CommonClass.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"\177\n\014GridItemBase\022\r\n\005index\030\001 "
    "\001(\004\022\017\n\007item_id\030\002 \001(\004\022\020\n\010item_num\030\003 \001(\004\022\014"
    "\n\004bind\030\004 \001(\010\022\r\n\005level\030\006 \001(\r\022\022\n\nexpireTim"
    "e\030\007 \001(\004\022\014\n\004type\030\010 \001(\r\"\211\001\n\010EquipExt\022\027\n\tba"
    "se_attr\030\001 \003(\005B\004\210\301\024\n\022\027\n\tstar_attr\030\002 \003(\005B\004"
    "\210\301\024\n\022\027\n\tblue_attr\030\003 \003(\005B\004\210\301\024\n\022\026\n\010god_att"
    "r\030\004 \003(\005B\004\210\301\024\n\022\032\n\014special_attr\030\005 \003(\005B\004\210\301\024"
    "\n\"^\n\016ItemGridCSData\022$\n\004base\030\001 \002(\0132\026.prot"
    "o_ff.GridItemBase\022&\n\nequip_data\030\002 \001(\0132\022."
    "proto_ff.EquipExt*\370\001\n\renBagPageType\022\020\n\014E"
    "N_BPT_EQUIP\020\001\022\022\n\016EN_BPT_STORAGE\020\002\022\022\n\016EN_"
    "BPT_MATRIAL\020\003\022\017\n\013EN_BPT_PROP\020\004\022\017\n\013EN_BPT"
    "_SKIN\020\005\022\020\n\014EN_BPT_TITLE\020\006\022\016\n\nEN_BPT_GEM\020"
    "\007\022\030\n\024EN_BPT_PARTNER_EQUIP\020\010\022\036\n\032EN_BPT_PA"
    "RTNER_EQUIP_STONE\020\t\022\030\n\024EN_BPT_PARTNER_TO"
    "KEN\020\n\022\025\n\021EN_BPT_BUFF_EQUIP\020\013", 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonClass.proto", &protobuf_RegisterTypes);
  GridItemBase::default_instance_ = new GridItemBase();
  EquipExt::default_instance_ = new EquipExt();
  ItemGridCSData::default_instance_ = new ItemGridCSData();
  GridItemBase::default_instance_->InitAsDefaultInstance();
  EquipExt::default_instance_->InitAsDefaultInstance();
  ItemGridCSData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommonClass_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommonClass_2eproto {
  StaticDescriptorInitializer_CommonClass_2eproto() {
    protobuf_AddDesc_CommonClass_2eproto();
  }
} static_descriptor_initializer_CommonClass_2eproto_;
const ::google::protobuf::EnumDescriptor* enBagPageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enBagPageType_descriptor_;
}
bool enBagPageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GridItemBase::kIndexFieldNumber;
const int GridItemBase::kItemIdFieldNumber;
const int GridItemBase::kItemNumFieldNumber;
const int GridItemBase::kBindFieldNumber;
const int GridItemBase::kLevelFieldNumber;
const int GridItemBase::kExpireTimeFieldNumber;
const int GridItemBase::kTypeFieldNumber;
#endif  // !_MSC_VER

GridItemBase::GridItemBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridItemBase::InitAsDefaultInstance() {
}

GridItemBase::GridItemBase(const GridItemBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridItemBase::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  item_id_ = GOOGLE_ULONGLONG(0);
  item_num_ = GOOGLE_ULONGLONG(0);
  bind_ = false;
  level_ = 0u;
  expiretime_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridItemBase::~GridItemBase() {
  SharedDtor();
}

void GridItemBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridItemBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridItemBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridItemBase_descriptor_;
}

const GridItemBase& GridItemBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonClass_2eproto();
  return *default_instance_;
}

GridItemBase* GridItemBase::default_instance_ = NULL;

GridItemBase* GridItemBase::New() const {
  return new GridItemBase;
}

void GridItemBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = GOOGLE_ULONGLONG(0);
    item_id_ = GOOGLE_ULONGLONG(0);
    item_num_ = GOOGLE_ULONGLONG(0);
    bind_ = false;
    level_ = 0u;
    expiretime_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridItemBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional uint64 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }

      // optional bool bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expireTime;
        break;
      }

      // optional uint64 expireTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional uint32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridItemBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // optional uint64 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_num(), output);
  }

  // optional bool bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bind(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint64 expireTime = 7;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->expiretime(), output);
  }

  // optional uint32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridItemBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // optional uint64 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_num(), target);
  }

  // optional bool bind = 4;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bind(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint64 expireTime = 7;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->expiretime(), target);
  }

  // optional uint32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridItemBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint64 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_num());
    }

    // optional bool bind = 4;
    if (has_bind()) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 expireTime = 7;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional uint32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridItemBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridItemBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridItemBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridItemBase::MergeFrom(const GridItemBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridItemBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridItemBase::CopyFrom(const GridItemBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridItemBase::IsInitialized() const {

  return true;
}

void GridItemBase::Swap(GridItemBase* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(bind_, other->bind_);
    std::swap(level_, other->level_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridItemBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridItemBase_descriptor_;
  metadata.reflection = GridItemBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipExt::kBaseAttrFieldNumber;
const int EquipExt::kStarAttrFieldNumber;
const int EquipExt::kBlueAttrFieldNumber;
const int EquipExt::kGodAttrFieldNumber;
const int EquipExt::kSpecialAttrFieldNumber;
#endif  // !_MSC_VER

EquipExt::EquipExt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipExt::InitAsDefaultInstance() {
}

EquipExt::EquipExt(const EquipExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipExt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipExt::~EquipExt() {
  SharedDtor();
}

void EquipExt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipExt_descriptor_;
}

const EquipExt& EquipExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonClass_2eproto();
  return *default_instance_;
}

EquipExt* EquipExt::default_instance_ = NULL;

EquipExt* EquipExt::New() const {
  return new EquipExt;
}

void EquipExt::Clear() {
  base_attr_.Clear();
  star_attr_.Clear();
  blue_attr_.Clear();
  god_attr_.Clear();
  special_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 base_attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_base_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_base_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_base_attr;
        if (input->ExpectTag(16)) goto parse_star_attr;
        break;
      }

      // repeated int32 star_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_star_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_star_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_attr;
        if (input->ExpectTag(24)) goto parse_blue_attr;
        break;
      }

      // repeated int32 blue_attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_blue_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_blue_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blue_attr;
        if (input->ExpectTag(32)) goto parse_god_attr;
        break;
      }

      // repeated int32 god_attr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_god_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_god_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_god_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_god_attr;
        if (input->ExpectTag(40)) goto parse_special_attr;
        break;
      }

      // repeated int32 special_attr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_special_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_special_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_special_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 base_attr = 1;
  for (int i = 0; i < this->base_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->base_attr(i), output);
  }

  // repeated int32 star_attr = 2;
  for (int i = 0; i < this->star_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->star_attr(i), output);
  }

  // repeated int32 blue_attr = 3;
  for (int i = 0; i < this->blue_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->blue_attr(i), output);
  }

  // repeated int32 god_attr = 4;
  for (int i = 0; i < this->god_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->god_attr(i), output);
  }

  // repeated int32 special_attr = 5;
  for (int i = 0; i < this->special_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->special_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 base_attr = 1;
  for (int i = 0; i < this->base_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->base_attr(i), target);
  }

  // repeated int32 star_attr = 2;
  for (int i = 0; i < this->star_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->star_attr(i), target);
  }

  // repeated int32 blue_attr = 3;
  for (int i = 0; i < this->blue_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->blue_attr(i), target);
  }

  // repeated int32 god_attr = 4;
  for (int i = 0; i < this->god_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->god_attr(i), target);
  }

  // repeated int32 special_attr = 5;
  for (int i = 0; i < this->special_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->special_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipExt::ByteSize() const {
  int total_size = 0;

  // repeated int32 base_attr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->base_attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->base_attr(i));
    }
    total_size += 1 * this->base_attr_size() + data_size;
  }

  // repeated int32 star_attr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->star_attr(i));
    }
    total_size += 1 * this->star_attr_size() + data_size;
  }

  // repeated int32 blue_attr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->blue_attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->blue_attr(i));
    }
    total_size += 1 * this->blue_attr_size() + data_size;
  }

  // repeated int32 god_attr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->god_attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->god_attr(i));
    }
    total_size += 1 * this->god_attr_size() + data_size;
  }

  // repeated int32 special_attr = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->special_attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->special_attr(i));
    }
    total_size += 1 * this->special_attr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipExt::MergeFrom(const EquipExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_attr_.MergeFrom(from.base_attr_);
  star_attr_.MergeFrom(from.star_attr_);
  blue_attr_.MergeFrom(from.blue_attr_);
  god_attr_.MergeFrom(from.god_attr_);
  special_attr_.MergeFrom(from.special_attr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipExt::CopyFrom(const EquipExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipExt::IsInitialized() const {

  return true;
}

void EquipExt::Swap(EquipExt* other) {
  if (other != this) {
    base_attr_.Swap(&other->base_attr_);
    star_attr_.Swap(&other->star_attr_);
    blue_attr_.Swap(&other->blue_attr_);
    god_attr_.Swap(&other->god_attr_);
    special_attr_.Swap(&other->special_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipExt_descriptor_;
  metadata.reflection = EquipExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemGridCSData::kBaseFieldNumber;
const int ItemGridCSData::kEquipDataFieldNumber;
#endif  // !_MSC_VER

ItemGridCSData::ItemGridCSData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemGridCSData::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::GridItemBase*>(&::proto_ff::GridItemBase::default_instance());
  equip_data_ = const_cast< ::proto_ff::EquipExt*>(&::proto_ff::EquipExt::default_instance());
}

ItemGridCSData::ItemGridCSData(const ItemGridCSData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemGridCSData::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  equip_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemGridCSData::~ItemGridCSData() {
  SharedDtor();
}

void ItemGridCSData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete equip_data_;
  }
}

void ItemGridCSData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemGridCSData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemGridCSData_descriptor_;
}

const ItemGridCSData& ItemGridCSData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonClass_2eproto();
  return *default_instance_;
}

ItemGridCSData* ItemGridCSData::default_instance_ = NULL;

ItemGridCSData* ItemGridCSData::New() const {
  return new ItemGridCSData;
}

void ItemGridCSData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::GridItemBase::Clear();
    }
    if (has_equip_data()) {
      if (equip_data_ != NULL) equip_data_->::proto_ff::EquipExt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemGridCSData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.GridItemBase base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_data;
        break;
      }

      // optional .proto_ff.EquipExt equip_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemGridCSData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.GridItemBase base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // optional .proto_ff.EquipExt equip_data = 2;
  if (has_equip_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemGridCSData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.GridItemBase base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // optional .proto_ff.EquipExt equip_data = 2;
  if (has_equip_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemGridCSData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.GridItemBase base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto_ff.EquipExt equip_data = 2;
    if (has_equip_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemGridCSData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemGridCSData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemGridCSData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemGridCSData::MergeFrom(const ItemGridCSData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::proto_ff::GridItemBase::MergeFrom(from.base());
    }
    if (from.has_equip_data()) {
      mutable_equip_data()->::proto_ff::EquipExt::MergeFrom(from.equip_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemGridCSData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemGridCSData::CopyFrom(const ItemGridCSData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemGridCSData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemGridCSData::Swap(ItemGridCSData* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(equip_data_, other->equip_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemGridCSData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemGridCSData_descriptor_;
  metadata.reflection = ItemGridCSData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
