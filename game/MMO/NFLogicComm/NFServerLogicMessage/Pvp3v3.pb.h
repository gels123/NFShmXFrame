// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pvp3v3.proto

#ifndef PROTOBUF_Pvp3v3_2eproto__INCLUDED
#define PROTOBUF_Pvp3v3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Com.pb.h"
#include "ComDefine.pb.h"
#include "Clan.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Pvp3v3_2eproto();
void protobuf_AssignDesc_Pvp3v3_2eproto();
void protobuf_ShutdownFile_Pvp3v3_2eproto();

class NotifyClan3RoleData;
class Clan3SeasonRankReq;
class Clan3SeasonRankRsp;
class Enter3v3ActReq;
class Enter3v3ActRsp;
class WaitDupMember;
class NotifyWaitDupSceneData;
class Clan3JoinMathchReq;
class Clan3JoinMathchRsp;
class Clan3CancelMatchReq;
class NotifyCancelMatchRsp;
class Clan3MatchEntry;
class NotifyClan3MatchSuccess;
class NotifyClan3DupRun;
class NotifyClan3Result;
class Clan3RecvRoleRewardReq;
class Clan3RecvRoleRewardRsp;
class PVP3DB;
class NotifyPvp3Season;
class C2SClan3RankReq;
class L2SClan3JoinMathchReq;
class Clan3MatchRole;
class Clan3MatchRobot;
class Clan3MatchResult;
class L2SClan3CancelMatchReq;
class NotifyClan3ActionWaitDup;
class L2SNotifyClan3DupResult;
class C2SClan3SendReward;
class C2LClan3RecvRoleRewardReq;
class S2CSynClan3ZeroUpdate;
class NotifyClan3DupKill;
class C2LClan3RewardReq;

// ===================================================================

class NotifyClan3RoleData : public ::google::protobuf::Message {
 public:
  NotifyClan3RoleData();
  virtual ~NotifyClan3RoleData();

  NotifyClan3RoleData(const NotifyClan3RoleData& from);

  inline NotifyClan3RoleData& operator=(const NotifyClan3RoleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyClan3RoleData& default_instance();

  void Swap(NotifyClan3RoleData* other);

  // implements Message ----------------------------------------------

  NotifyClan3RoleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyClan3RoleData& from);
  void MergeFrom(const NotifyClan3RoleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 clan_id = 1;
  inline bool has_clan_id() const;
  inline void clear_clan_id();
  static const int kClanIdFieldNumber = 1;
  inline ::google::protobuf::int32 clan_id() const;
  inline void set_clan_id(::google::protobuf::int32 value);

  // optional int32 role_join_num = 2;
  inline bool has_role_join_num() const;
  inline void clear_role_join_num();
  static const int kRoleJoinNumFieldNumber = 2;
  inline ::google::protobuf::int32 role_join_num() const;
  inline void set_role_join_num(::google::protobuf::int32 value);

  // optional int32 role_win_num = 3;
  inline bool has_role_win_num() const;
  inline void clear_role_win_num();
  static const int kRoleWinNumFieldNumber = 3;
  inline ::google::protobuf::int32 role_win_num() const;
  inline void set_role_win_num(::google::protobuf::int32 value);

  // optional int32 role_cw_num = 4;
  inline bool has_role_cw_num() const;
  inline void clear_role_cw_num();
  static const int kRoleCwNumFieldNumber = 4;
  inline ::google::protobuf::int32 role_cw_num() const;
  inline void set_role_cw_num(::google::protobuf::int32 value);

  // optional uint64 ban_time = 5;
  inline bool has_ban_time() const;
  inline void clear_ban_time();
  static const int kBanTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 ban_time() const;
  inline void set_ban_time(::google::protobuf::uint64 value);

  // optional int32 day_join_num = 6;
  inline bool has_day_join_num() const;
  inline void clear_day_join_num();
  static const int kDayJoinNumFieldNumber = 6;
  inline ::google::protobuf::int32 day_join_num() const;
  inline void set_day_join_num(::google::protobuf::int32 value);

  // repeated int32 recv_id = 7;
  inline int recv_id_size() const;
  inline void clear_recv_id();
  static const int kRecvIdFieldNumber = 7;
  inline ::google::protobuf::int32 recv_id(int index) const;
  inline void set_recv_id(int index, ::google::protobuf::int32 value);
  inline void add_recv_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      recv_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_recv_id();

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyClan3RoleData)
 private:
  inline void set_has_clan_id();
  inline void clear_has_clan_id();
  inline void set_has_role_join_num();
  inline void clear_has_role_join_num();
  inline void set_has_role_win_num();
  inline void clear_has_role_win_num();
  inline void set_has_role_cw_num();
  inline void clear_has_role_cw_num();
  inline void set_has_ban_time();
  inline void clear_has_ban_time();
  inline void set_has_day_join_num();
  inline void clear_has_day_join_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 clan_id_;
  ::google::protobuf::int32 role_join_num_;
  ::google::protobuf::int32 role_win_num_;
  ::google::protobuf::int32 role_cw_num_;
  ::google::protobuf::uint64 ban_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > recv_id_;
  ::google::protobuf::int32 day_join_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyClan3RoleData* default_instance_;
};
// -------------------------------------------------------------------

class Clan3SeasonRankReq : public ::google::protobuf::Message {
 public:
  Clan3SeasonRankReq();
  virtual ~Clan3SeasonRankReq();

  Clan3SeasonRankReq(const Clan3SeasonRankReq& from);

  inline Clan3SeasonRankReq& operator=(const Clan3SeasonRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3SeasonRankReq& default_instance();

  void Swap(Clan3SeasonRankReq* other);

  // implements Message ----------------------------------------------

  Clan3SeasonRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3SeasonRankReq& from);
  void MergeFrom(const Clan3SeasonRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3SeasonRankReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3SeasonRankReq* default_instance_;
};
// -------------------------------------------------------------------

class Clan3SeasonRankRsp : public ::google::protobuf::Message {
 public:
  Clan3SeasonRankRsp();
  virtual ~Clan3SeasonRankRsp();

  Clan3SeasonRankRsp(const Clan3SeasonRankRsp& from);

  inline Clan3SeasonRankRsp& operator=(const Clan3SeasonRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3SeasonRankRsp& default_instance();

  void Swap(Clan3SeasonRankRsp* other);

  // implements Message ----------------------------------------------

  Clan3SeasonRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3SeasonRankRsp& from);
  void MergeFrom(const Clan3SeasonRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .proto_ff.ClanComInfo rank = 2;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::proto_ff::ClanComInfo& rank(int index) const;
  inline ::proto_ff::ClanComInfo* mutable_rank(int index);
  inline ::proto_ff::ClanComInfo* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >*
      mutable_rank();

  // optional .proto_ff.ClanComInfo my = 3;
  inline bool has_my() const;
  inline void clear_my();
  static const int kMyFieldNumber = 3;
  inline const ::proto_ff::ClanComInfo& my() const;
  inline ::proto_ff::ClanComInfo* mutable_my();
  inline ::proto_ff::ClanComInfo* release_my();
  inline void set_allocated_my(::proto_ff::ClanComInfo* my);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3SeasonRankRsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_my();
  inline void clear_has_my();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo > rank_;
  ::proto_ff::ClanComInfo* my_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3SeasonRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class Enter3v3ActReq : public ::google::protobuf::Message {
 public:
  Enter3v3ActReq();
  virtual ~Enter3v3ActReq();

  Enter3v3ActReq(const Enter3v3ActReq& from);

  inline Enter3v3ActReq& operator=(const Enter3v3ActReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Enter3v3ActReq& default_instance();

  void Swap(Enter3v3ActReq* other);

  // implements Message ----------------------------------------------

  Enter3v3ActReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Enter3v3ActReq& from);
  void MergeFrom(const Enter3v3ActReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Enter3v3ActReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Enter3v3ActReq* default_instance_;
};
// -------------------------------------------------------------------

class Enter3v3ActRsp : public ::google::protobuf::Message {
 public:
  Enter3v3ActRsp();
  virtual ~Enter3v3ActRsp();

  Enter3v3ActRsp(const Enter3v3ActRsp& from);

  inline Enter3v3ActRsp& operator=(const Enter3v3ActRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Enter3v3ActRsp& default_instance();

  void Swap(Enter3v3ActRsp* other);

  // implements Message ----------------------------------------------

  Enter3v3ActRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Enter3v3ActRsp& from);
  void MergeFrom(const Enter3v3ActRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Enter3v3ActRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Enter3v3ActRsp* default_instance_;
};
// -------------------------------------------------------------------

class WaitDupMember : public ::google::protobuf::Message {
 public:
  WaitDupMember();
  virtual ~WaitDupMember();

  WaitDupMember(const WaitDupMember& from);

  inline WaitDupMember& operator=(const WaitDupMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitDupMember& default_instance();

  void Swap(WaitDupMember* other);

  // implements Message ----------------------------------------------

  WaitDupMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitDupMember& from);
  void MergeFrom(const WaitDupMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.WaitDupMember)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static WaitDupMember* default_instance_;
};
// -------------------------------------------------------------------

class NotifyWaitDupSceneData : public ::google::protobuf::Message {
 public:
  NotifyWaitDupSceneData();
  virtual ~NotifyWaitDupSceneData();

  NotifyWaitDupSceneData(const NotifyWaitDupSceneData& from);

  inline NotifyWaitDupSceneData& operator=(const NotifyWaitDupSceneData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyWaitDupSceneData& default_instance();

  void Swap(NotifyWaitDupSceneData* other);

  // implements Message ----------------------------------------------

  NotifyWaitDupSceneData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyWaitDupSceneData& from);
  void MergeFrom(const NotifyWaitDupSceneData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.ClanComInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::ClanComInfo& info() const;
  inline ::proto_ff::ClanComInfo* mutable_info();
  inline ::proto_ff::ClanComInfo* release_info();
  inline void set_allocated_info(::proto_ff::ClanComInfo* info);

  // repeated .proto_ff.WaitDupMember mems = 2;
  inline int mems_size() const;
  inline void clear_mems();
  static const int kMemsFieldNumber = 2;
  inline const ::proto_ff::WaitDupMember& mems(int index) const;
  inline ::proto_ff::WaitDupMember* mutable_mems(int index);
  inline ::proto_ff::WaitDupMember* add_mems();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WaitDupMember >&
      mems() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WaitDupMember >*
      mutable_mems();

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyWaitDupSceneData)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::ClanComInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::WaitDupMember > mems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyWaitDupSceneData* default_instance_;
};
// -------------------------------------------------------------------

class Clan3JoinMathchReq : public ::google::protobuf::Message {
 public:
  Clan3JoinMathchReq();
  virtual ~Clan3JoinMathchReq();

  Clan3JoinMathchReq(const Clan3JoinMathchReq& from);

  inline Clan3JoinMathchReq& operator=(const Clan3JoinMathchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3JoinMathchReq& default_instance();

  void Swap(Clan3JoinMathchReq* other);

  // implements Message ----------------------------------------------

  Clan3JoinMathchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3JoinMathchReq& from);
  void MergeFrom(const Clan3JoinMathchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3JoinMathchReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3JoinMathchReq* default_instance_;
};
// -------------------------------------------------------------------

class Clan3JoinMathchRsp : public ::google::protobuf::Message {
 public:
  Clan3JoinMathchRsp();
  virtual ~Clan3JoinMathchRsp();

  Clan3JoinMathchRsp(const Clan3JoinMathchRsp& from);

  inline Clan3JoinMathchRsp& operator=(const Clan3JoinMathchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3JoinMathchRsp& default_instance();

  void Swap(Clan3JoinMathchRsp* other);

  // implements Message ----------------------------------------------

  Clan3JoinMathchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3JoinMathchRsp& from);
  void MergeFrom(const Clan3JoinMathchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 join_time = 2;
  inline bool has_join_time() const;
  inline void clear_join_time();
  static const int kJoinTimeFieldNumber = 2;
  inline ::google::protobuf::int32 join_time() const;
  inline void set_join_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3JoinMathchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_join_time();
  inline void clear_has_join_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 join_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3JoinMathchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Clan3CancelMatchReq : public ::google::protobuf::Message {
 public:
  Clan3CancelMatchReq();
  virtual ~Clan3CancelMatchReq();

  Clan3CancelMatchReq(const Clan3CancelMatchReq& from);

  inline Clan3CancelMatchReq& operator=(const Clan3CancelMatchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3CancelMatchReq& default_instance();

  void Swap(Clan3CancelMatchReq* other);

  // implements Message ----------------------------------------------

  Clan3CancelMatchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3CancelMatchReq& from);
  void MergeFrom(const Clan3CancelMatchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3CancelMatchReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3CancelMatchReq* default_instance_;
};
// -------------------------------------------------------------------

class NotifyCancelMatchRsp : public ::google::protobuf::Message {
 public:
  NotifyCancelMatchRsp();
  virtual ~NotifyCancelMatchRsp();

  NotifyCancelMatchRsp(const NotifyCancelMatchRsp& from);

  inline NotifyCancelMatchRsp& operator=(const NotifyCancelMatchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyCancelMatchRsp& default_instance();

  void Swap(NotifyCancelMatchRsp* other);

  // implements Message ----------------------------------------------

  NotifyCancelMatchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyCancelMatchRsp& from);
  void MergeFrom(const NotifyCancelMatchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyCancelMatchRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyCancelMatchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Clan3MatchEntry : public ::google::protobuf::Message {
 public:
  Clan3MatchEntry();
  virtual ~Clan3MatchEntry();

  Clan3MatchEntry(const Clan3MatchEntry& from);

  inline Clan3MatchEntry& operator=(const Clan3MatchEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3MatchEntry& default_instance();

  void Swap(Clan3MatchEntry* other);

  // implements Message ----------------------------------------------

  Clan3MatchEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3MatchEntry& from);
  void MergeFrom(const Clan3MatchEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 is_robot = 2;
  inline bool has_is_robot() const;
  inline void clear_is_robot();
  static const int kIsRobotFieldNumber = 2;
  inline ::google::protobuf::int32 is_robot() const;
  inline void set_is_robot(::google::protobuf::int32 value);

  // optional int32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional uint64 clan_id = 4;
  inline bool has_clan_id() const;
  inline void clear_clan_id();
  static const int kClanIdFieldNumber = 4;
  inline ::google::protobuf::uint64 clan_id() const;
  inline void set_clan_id(::google::protobuf::uint64 value);

  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional bytes clan_name = 6;
  inline bool has_clan_name() const;
  inline void clear_clan_name();
  static const int kClanNameFieldNumber = 6;
  inline const ::std::string& clan_name() const;
  inline void set_clan_name(const ::std::string& value);
  inline void set_clan_name(const char* value);
  inline void set_clan_name(const void* value, size_t size);
  inline ::std::string* mutable_clan_name();
  inline ::std::string* release_clan_name();
  inline void set_allocated_clan_name(::std::string* clan_name);

  // optional bytes name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .proto_ff.RoleHeadPicProto head = 8;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 8;
  inline const ::proto_ff::RoleHeadPicProto& head() const;
  inline ::proto_ff::RoleHeadPicProto* mutable_head();
  inline ::proto_ff::RoleHeadPicProto* release_head();
  inline void set_allocated_head(::proto_ff::RoleHeadPicProto* head);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 maxHP = 10;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 10;
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint64 curHp = 11;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 11;
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional int32 killNum = 12;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 12;
  inline ::google::protobuf::int32 killnum() const;
  inline void set_killnum(::google::protobuf::int32 value);

  // optional int32 mvp = 13;
  inline bool has_mvp() const;
  inline void clear_mvp();
  static const int kMvpFieldNumber = 13;
  inline ::google::protobuf::int32 mvp() const;
  inline void set_mvp(::google::protobuf::int32 value);

  // optional int32 mvp_reward = 14;
  inline bool has_mvp_reward() const;
  inline void clear_mvp_reward();
  static const int kMvpRewardFieldNumber = 14;
  inline ::google::protobuf::int32 mvp_reward() const;
  inline void set_mvp_reward(::google::protobuf::int32 value);

  // optional int32 day_reward = 15;
  inline bool has_day_reward() const;
  inline void clear_day_reward();
  static const int kDayRewardFieldNumber = 15;
  inline ::google::protobuf::int32 day_reward() const;
  inline void set_day_reward(::google::protobuf::int32 value);

  // optional int32 match_type = 16;
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 16;
  inline ::google::protobuf::int32 match_type() const;
  inline void set_match_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3MatchEntry)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_is_robot();
  inline void clear_has_is_robot();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_clan_id();
  inline void clear_has_clan_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_clan_name();
  inline void clear_has_clan_name();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_mvp();
  inline void clear_has_mvp();
  inline void set_has_mvp_reward();
  inline void clear_has_mvp_reward();
  inline void set_has_day_reward();
  inline void clear_has_day_reward();
  inline void set_has_match_type();
  inline void clear_has_match_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 is_robot_;
  ::google::protobuf::int32 zid_;
  ::google::protobuf::uint64 clan_id_;
  ::std::string* clan_name_;
  ::std::string* name_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 level_;
  ::proto_ff::RoleHeadPicProto* head_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::int32 killnum_;
  ::google::protobuf::int32 mvp_;
  ::google::protobuf::int32 mvp_reward_;
  ::google::protobuf::int32 day_reward_;
  ::google::protobuf::int32 match_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3MatchEntry* default_instance_;
};
// -------------------------------------------------------------------

class NotifyClan3MatchSuccess : public ::google::protobuf::Message {
 public:
  NotifyClan3MatchSuccess();
  virtual ~NotifyClan3MatchSuccess();

  NotifyClan3MatchSuccess(const NotifyClan3MatchSuccess& from);

  inline NotifyClan3MatchSuccess& operator=(const NotifyClan3MatchSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyClan3MatchSuccess& default_instance();

  void Swap(NotifyClan3MatchSuccess* other);

  // implements Message ----------------------------------------------

  NotifyClan3MatchSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyClan3MatchSuccess& from);
  void MergeFrom(const NotifyClan3MatchSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Clan3MatchEntry red = 1;
  inline int red_size() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline const ::proto_ff::Clan3MatchEntry& red(int index) const;
  inline ::proto_ff::Clan3MatchEntry* mutable_red(int index);
  inline ::proto_ff::Clan3MatchEntry* add_red();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
      red() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
      mutable_red();

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  inline int blue_size() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 2;
  inline const ::proto_ff::Clan3MatchEntry& blue(int index) const;
  inline ::proto_ff::Clan3MatchEntry* mutable_blue(int index);
  inline ::proto_ff::Clan3MatchEntry* add_blue();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
      blue() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
      mutable_blue();

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyClan3MatchSuccess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry > red_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry > blue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyClan3MatchSuccess* default_instance_;
};
// -------------------------------------------------------------------

class NotifyClan3DupRun : public ::google::protobuf::Message {
 public:
  NotifyClan3DupRun();
  virtual ~NotifyClan3DupRun();

  NotifyClan3DupRun(const NotifyClan3DupRun& from);

  inline NotifyClan3DupRun& operator=(const NotifyClan3DupRun& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyClan3DupRun& default_instance();

  void Swap(NotifyClan3DupRun* other);

  // implements Message ----------------------------------------------

  NotifyClan3DupRun* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyClan3DupRun& from);
  void MergeFrom(const NotifyClan3DupRun& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Clan3MatchEntry red = 1;
  inline int red_size() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline const ::proto_ff::Clan3MatchEntry& red(int index) const;
  inline ::proto_ff::Clan3MatchEntry* mutable_red(int index);
  inline ::proto_ff::Clan3MatchEntry* add_red();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
      red() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
      mutable_red();

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  inline int blue_size() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 2;
  inline const ::proto_ff::Clan3MatchEntry& blue(int index) const;
  inline ::proto_ff::Clan3MatchEntry* mutable_blue(int index);
  inline ::proto_ff::Clan3MatchEntry* add_blue();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
      blue() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
      mutable_blue();

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyClan3DupRun)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry > red_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry > blue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyClan3DupRun* default_instance_;
};
// -------------------------------------------------------------------

class NotifyClan3Result : public ::google::protobuf::Message {
 public:
  NotifyClan3Result();
  virtual ~NotifyClan3Result();

  NotifyClan3Result(const NotifyClan3Result& from);

  inline NotifyClan3Result& operator=(const NotifyClan3Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyClan3Result& default_instance();

  void Swap(NotifyClan3Result* other);

  // implements Message ----------------------------------------------

  NotifyClan3Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyClan3Result& from);
  void MergeFrom(const NotifyClan3Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Clan3MatchEntry red = 1;
  inline int red_size() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline const ::proto_ff::Clan3MatchEntry& red(int index) const;
  inline ::proto_ff::Clan3MatchEntry* mutable_red(int index);
  inline ::proto_ff::Clan3MatchEntry* add_red();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
      red() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
      mutable_red();

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  inline int blue_size() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 2;
  inline const ::proto_ff::Clan3MatchEntry& blue(int index) const;
  inline ::proto_ff::Clan3MatchEntry* mutable_blue(int index);
  inline ::proto_ff::Clan3MatchEntry* add_blue();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
      blue() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
      mutable_blue();

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 clanScore = 4;
  inline bool has_clanscore() const;
  inline void clear_clanscore();
  static const int kClanScoreFieldNumber = 4;
  inline ::google::protobuf::int32 clanscore() const;
  inline void set_clanscore(::google::protobuf::int32 value);

  // optional int32 clanAddScore = 5;
  inline bool has_clanaddscore() const;
  inline void clear_clanaddscore();
  static const int kClanAddScoreFieldNumber = 5;
  inline ::google::protobuf::int32 clanaddscore() const;
  inline void set_clanaddscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyClan3Result)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_clanscore();
  inline void clear_has_clanscore();
  inline void set_has_clanaddscore();
  inline void clear_has_clanaddscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry > red_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry > blue_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 clanscore_;
  ::google::protobuf::int32 clanaddscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyClan3Result* default_instance_;
};
// -------------------------------------------------------------------

class Clan3RecvRoleRewardReq : public ::google::protobuf::Message {
 public:
  Clan3RecvRoleRewardReq();
  virtual ~Clan3RecvRoleRewardReq();

  Clan3RecvRoleRewardReq(const Clan3RecvRoleRewardReq& from);

  inline Clan3RecvRoleRewardReq& operator=(const Clan3RecvRoleRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3RecvRoleRewardReq& default_instance();

  void Swap(Clan3RecvRoleRewardReq* other);

  // implements Message ----------------------------------------------

  Clan3RecvRoleRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3RecvRoleRewardReq& from);
  void MergeFrom(const Clan3RecvRoleRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3RecvRoleRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3RecvRoleRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class Clan3RecvRoleRewardRsp : public ::google::protobuf::Message {
 public:
  Clan3RecvRoleRewardRsp();
  virtual ~Clan3RecvRoleRewardRsp();

  Clan3RecvRoleRewardRsp(const Clan3RecvRoleRewardRsp& from);

  inline Clan3RecvRoleRewardRsp& operator=(const Clan3RecvRoleRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3RecvRoleRewardRsp& default_instance();

  void Swap(Clan3RecvRoleRewardRsp* other);

  // implements Message ----------------------------------------------

  Clan3RecvRoleRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3RecvRoleRewardRsp& from);
  void MergeFrom(const Clan3RecvRoleRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3RecvRoleRewardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3RecvRoleRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class PVP3DB : public ::google::protobuf::Message {
 public:
  PVP3DB();
  virtual ~PVP3DB();

  PVP3DB(const PVP3DB& from);

  inline PVP3DB& operator=(const PVP3DB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVP3DB& default_instance();

  void Swap(PVP3DB* other);

  // implements Message ----------------------------------------------

  PVP3DB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVP3DB& from);
  void MergeFrom(const PVP3DB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 last_time = 1;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 last_time() const;
  inline void set_last_time(::google::protobuf::uint64 value);

  // optional int32 season = 2;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 2;
  inline ::google::protobuf::int32 season() const;
  inline void set_season(::google::protobuf::int32 value);

  // repeated .proto_ff.ClanComInfo last_season = 3;
  inline int last_season_size() const;
  inline void clear_last_season();
  static const int kLastSeasonFieldNumber = 3;
  inline const ::proto_ff::ClanComInfo& last_season(int index) const;
  inline ::proto_ff::ClanComInfo* mutable_last_season(int index);
  inline ::proto_ff::ClanComInfo* add_last_season();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >&
      last_season() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >*
      mutable_last_season();

  // repeated .proto_ff.ClanComInfo last_race = 4;
  inline int last_race_size() const;
  inline void clear_last_race();
  static const int kLastRaceFieldNumber = 4;
  inline const ::proto_ff::ClanComInfo& last_race(int index) const;
  inline ::proto_ff::ClanComInfo* mutable_last_race(int index);
  inline ::proto_ff::ClanComInfo* add_last_race();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >&
      last_race() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >*
      mutable_last_race();

  // optional int32 send_season = 5;
  inline bool has_send_season() const;
  inline void clear_send_season();
  static const int kSendSeasonFieldNumber = 5;
  inline ::google::protobuf::int32 send_season() const;
  inline void set_send_season(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PVP3DB)
 private:
  inline void set_has_last_time();
  inline void clear_has_last_time();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_send_season();
  inline void clear_has_send_season();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_time_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo > last_season_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 send_season_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo > last_race_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static PVP3DB* default_instance_;
};
// -------------------------------------------------------------------

class NotifyPvp3Season : public ::google::protobuf::Message {
 public:
  NotifyPvp3Season();
  virtual ~NotifyPvp3Season();

  NotifyPvp3Season(const NotifyPvp3Season& from);

  inline NotifyPvp3Season& operator=(const NotifyPvp3Season& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyPvp3Season& default_instance();

  void Swap(NotifyPvp3Season* other);

  // implements Message ----------------------------------------------

  NotifyPvp3Season* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyPvp3Season& from);
  void MergeFrom(const NotifyPvp3Season& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zid = 1;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 1;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional int32 season = 2;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 2;
  inline ::google::protobuf::int32 season() const;
  inline void set_season(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyPvp3Season)
 private:
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_season();
  inline void clear_has_season();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 zid_;
  ::google::protobuf::int32 season_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyPvp3Season* default_instance_;
};
// -------------------------------------------------------------------

class C2SClan3RankReq : public ::google::protobuf::Message {
 public:
  C2SClan3RankReq();
  virtual ~C2SClan3RankReq();

  C2SClan3RankReq(const C2SClan3RankReq& from);

  inline C2SClan3RankReq& operator=(const C2SClan3RankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SClan3RankReq& default_instance();

  void Swap(C2SClan3RankReq* other);

  // implements Message ----------------------------------------------

  C2SClan3RankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SClan3RankReq& from);
  void MergeFrom(const C2SClan3RankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zid = 1;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 1;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint64 clan_id = 3;
  inline bool has_clan_id() const;
  inline void clear_clan_id();
  static const int kClanIdFieldNumber = 3;
  inline ::google::protobuf::uint64 clan_id() const;
  inline void set_clan_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2SClan3RankReq)
 private:
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_clan_id();
  inline void clear_has_clan_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 clan_id_;
  ::google::protobuf::int32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static C2SClan3RankReq* default_instance_;
};
// -------------------------------------------------------------------

class L2SClan3JoinMathchReq : public ::google::protobuf::Message {
 public:
  L2SClan3JoinMathchReq();
  virtual ~L2SClan3JoinMathchReq();

  L2SClan3JoinMathchReq(const L2SClan3JoinMathchReq& from);

  inline L2SClan3JoinMathchReq& operator=(const L2SClan3JoinMathchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const L2SClan3JoinMathchReq& default_instance();

  void Swap(L2SClan3JoinMathchReq* other);

  // implements Message ----------------------------------------------

  L2SClan3JoinMathchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const L2SClan3JoinMathchReq& from);
  void MergeFrom(const L2SClan3JoinMathchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated uint64 cids = 2;
  inline int cids_size() const;
  inline void clear_cids();
  static const int kCidsFieldNumber = 2;
  inline ::google::protobuf::uint64 cids(int index) const;
  inline void set_cids(int index, ::google::protobuf::uint64 value);
  inline void add_cids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cids();

  // optional uint64 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional int32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional uint64 clan_id = 5;
  inline bool has_clan_id() const;
  inline void clear_clan_id();
  static const int kClanIdFieldNumber = 5;
  inline ::google::protobuf::uint64 clan_id() const;
  inline void set_clan_id(::google::protobuf::uint64 value);

  // optional int32 logic_id = 6;
  inline bool has_logic_id() const;
  inline void clear_logic_id();
  static const int kLogicIdFieldNumber = 6;
  inline ::google::protobuf::int32 logic_id() const;
  inline void set_logic_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.L2SClan3JoinMathchReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_clan_id();
  inline void clear_has_clan_id();
  inline void set_has_logic_id();
  inline void clear_has_logic_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cids_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 zid_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint64 clan_id_;
  ::google::protobuf::int32 logic_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static L2SClan3JoinMathchReq* default_instance_;
};
// -------------------------------------------------------------------

class Clan3MatchRole : public ::google::protobuf::Message {
 public:
  Clan3MatchRole();
  virtual ~Clan3MatchRole();

  Clan3MatchRole(const Clan3MatchRole& from);

  inline Clan3MatchRole& operator=(const Clan3MatchRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3MatchRole& default_instance();

  void Swap(Clan3MatchRole* other);

  // implements Message ----------------------------------------------

  Clan3MatchRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3MatchRole& from);
  void MergeFrom(const Clan3MatchRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional uint64 clanid = 3;
  inline bool has_clanid() const;
  inline void clear_clanid();
  static const int kClanidFieldNumber = 3;
  inline ::google::protobuf::uint64 clanid() const;
  inline void set_clanid(::google::protobuf::uint64 value);

  // optional int32 match_type = 4;
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 4;
  inline ::google::protobuf::int32 match_type() const;
  inline void set_match_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3MatchRole)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_clanid();
  inline void clear_has_clanid();
  inline void set_has_match_type();
  inline void clear_has_match_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 clanid_;
  ::google::protobuf::int32 zid_;
  ::google::protobuf::int32 match_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3MatchRole* default_instance_;
};
// -------------------------------------------------------------------

class Clan3MatchRobot : public ::google::protobuf::Message {
 public:
  Clan3MatchRobot();
  virtual ~Clan3MatchRobot();

  Clan3MatchRobot(const Clan3MatchRobot& from);

  inline Clan3MatchRobot& operator=(const Clan3MatchRobot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3MatchRobot& default_instance();

  void Swap(Clan3MatchRobot* other);

  // implements Message ----------------------------------------------

  Clan3MatchRobot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3MatchRobot& from);
  void MergeFrom(const Clan3MatchRobot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3MatchRobot)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3MatchRobot* default_instance_;
};
// -------------------------------------------------------------------

class Clan3MatchResult : public ::google::protobuf::Message {
 public:
  Clan3MatchResult();
  virtual ~Clan3MatchResult();

  Clan3MatchResult(const Clan3MatchResult& from);

  inline Clan3MatchResult& operator=(const Clan3MatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Clan3MatchResult& default_instance();

  void Swap(Clan3MatchResult* other);

  // implements Message ----------------------------------------------

  Clan3MatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Clan3MatchResult& from);
  void MergeFrom(const Clan3MatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Clan3MatchRole red = 1;
  inline int red_size() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline const ::proto_ff::Clan3MatchRole& red(int index) const;
  inline ::proto_ff::Clan3MatchRole* mutable_red(int index);
  inline ::proto_ff::Clan3MatchRole* add_red();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole >&
      red() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole >*
      mutable_red();

  // repeated .proto_ff.Clan3MatchRobot red_robot = 2;
  inline int red_robot_size() const;
  inline void clear_red_robot();
  static const int kRedRobotFieldNumber = 2;
  inline const ::proto_ff::Clan3MatchRobot& red_robot(int index) const;
  inline ::proto_ff::Clan3MatchRobot* mutable_red_robot(int index);
  inline ::proto_ff::Clan3MatchRobot* add_red_robot();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot >&
      red_robot() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot >*
      mutable_red_robot();

  // repeated .proto_ff.Clan3MatchRole blue = 3;
  inline int blue_size() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 3;
  inline const ::proto_ff::Clan3MatchRole& blue(int index) const;
  inline ::proto_ff::Clan3MatchRole* mutable_blue(int index);
  inline ::proto_ff::Clan3MatchRole* add_blue();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole >&
      blue() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole >*
      mutable_blue();

  // repeated .proto_ff.Clan3MatchRobot blue_robot = 4;
  inline int blue_robot_size() const;
  inline void clear_blue_robot();
  static const int kBlueRobotFieldNumber = 4;
  inline const ::proto_ff::Clan3MatchRobot& blue_robot(int index) const;
  inline ::proto_ff::Clan3MatchRobot* mutable_blue_robot(int index);
  inline ::proto_ff::Clan3MatchRobot* add_blue_robot();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot >&
      blue_robot() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot >*
      mutable_blue_robot();

  // @@protoc_insertion_point(class_scope:proto_ff.Clan3MatchResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole > red_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot > red_robot_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole > blue_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot > blue_robot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static Clan3MatchResult* default_instance_;
};
// -------------------------------------------------------------------

class L2SClan3CancelMatchReq : public ::google::protobuf::Message {
 public:
  L2SClan3CancelMatchReq();
  virtual ~L2SClan3CancelMatchReq();

  L2SClan3CancelMatchReq(const L2SClan3CancelMatchReq& from);

  inline L2SClan3CancelMatchReq& operator=(const L2SClan3CancelMatchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const L2SClan3CancelMatchReq& default_instance();

  void Swap(L2SClan3CancelMatchReq* other);

  // implements Message ----------------------------------------------

  L2SClan3CancelMatchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const L2SClan3CancelMatchReq& from);
  void MergeFrom(const L2SClan3CancelMatchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::int64 cid() const;
  inline void set_cid(::google::protobuf::int64 value);

  // optional int32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional int32 clanId = 3;
  inline bool has_clanid() const;
  inline void clear_clanid();
  static const int kClanIdFieldNumber = 3;
  inline ::google::protobuf::int32 clanid() const;
  inline void set_clanid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.L2SClan3CancelMatchReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_clanid();
  inline void clear_has_clanid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 cid_;
  ::google::protobuf::int32 zid_;
  ::google::protobuf::int32 clanid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static L2SClan3CancelMatchReq* default_instance_;
};
// -------------------------------------------------------------------

class NotifyClan3ActionWaitDup : public ::google::protobuf::Message {
 public:
  NotifyClan3ActionWaitDup();
  virtual ~NotifyClan3ActionWaitDup();

  NotifyClan3ActionWaitDup(const NotifyClan3ActionWaitDup& from);

  inline NotifyClan3ActionWaitDup& operator=(const NotifyClan3ActionWaitDup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyClan3ActionWaitDup& default_instance();

  void Swap(NotifyClan3ActionWaitDup* other);

  // implements Message ----------------------------------------------

  NotifyClan3ActionWaitDup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyClan3ActionWaitDup& from);
  void MergeFrom(const NotifyClan3ActionWaitDup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 opt = 2;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 2;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyClan3ActionWaitDup)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_opt();
  inline void clear_has_opt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 opt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyClan3ActionWaitDup* default_instance_;
};
// -------------------------------------------------------------------

class L2SNotifyClan3DupResult : public ::google::protobuf::Message {
 public:
  L2SNotifyClan3DupResult();
  virtual ~L2SNotifyClan3DupResult();

  L2SNotifyClan3DupResult(const L2SNotifyClan3DupResult& from);

  inline L2SNotifyClan3DupResult& operator=(const L2SNotifyClan3DupResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const L2SNotifyClan3DupResult& default_instance();

  void Swap(L2SNotifyClan3DupResult* other);

  // implements Message ----------------------------------------------

  L2SNotifyClan3DupResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const L2SNotifyClan3DupResult& from);
  void MergeFrom(const L2SNotifyClan3DupResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.Clan3MatchEntry red = 1;
  inline int red_size() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline const ::proto_ff::Clan3MatchEntry& red(int index) const;
  inline ::proto_ff::Clan3MatchEntry* mutable_red(int index);
  inline ::proto_ff::Clan3MatchEntry* add_red();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
      red() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
      mutable_red();

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  inline int blue_size() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 2;
  inline const ::proto_ff::Clan3MatchEntry& blue(int index) const;
  inline ::proto_ff::Clan3MatchEntry* mutable_blue(int index);
  inline ::proto_ff::Clan3MatchEntry* add_blue();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
      blue() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
      mutable_blue();

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 mvp = 4;
  inline bool has_mvp() const;
  inline void clear_mvp();
  static const int kMvpFieldNumber = 4;
  inline ::google::protobuf::uint64 mvp() const;
  inline void set_mvp(::google::protobuf::uint64 value);

  // repeated uint64 deads = 5;
  inline int deads_size() const;
  inline void clear_deads();
  static const int kDeadsFieldNumber = 5;
  inline ::google::protobuf::uint64 deads(int index) const;
  inline void set_deads(int index, ::google::protobuf::uint64 value);
  inline void add_deads(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      deads() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_deads();

  // repeated uint64 cids = 6;
  inline int cids_size() const;
  inline void clear_cids();
  static const int kCidsFieldNumber = 6;
  inline ::google::protobuf::uint64 cids(int index) const;
  inline void set_cids(int index, ::google::protobuf::uint64 value);
  inline void add_cids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cids();

  // @@protoc_insertion_point(class_scope:proto_ff.L2SNotifyClan3DupResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_mvp();
  inline void clear_has_mvp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry > red_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry > blue_;
  ::google::protobuf::uint64 mvp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > deads_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cids_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static L2SNotifyClan3DupResult* default_instance_;
};
// -------------------------------------------------------------------

class C2SClan3SendReward : public ::google::protobuf::Message {
 public:
  C2SClan3SendReward();
  virtual ~C2SClan3SendReward();

  C2SClan3SendReward(const C2SClan3SendReward& from);

  inline C2SClan3SendReward& operator=(const C2SClan3SendReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SClan3SendReward& default_instance();

  void Swap(C2SClan3SendReward* other);

  // implements Message ----------------------------------------------

  C2SClan3SendReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SClan3SendReward& from);
  void MergeFrom(const C2SClan3SendReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2SClan3SendReward)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static C2SClan3SendReward* default_instance_;
};
// -------------------------------------------------------------------

class C2LClan3RecvRoleRewardReq : public ::google::protobuf::Message {
 public:
  C2LClan3RecvRoleRewardReq();
  virtual ~C2LClan3RecvRoleRewardReq();

  C2LClan3RecvRoleRewardReq(const C2LClan3RecvRoleRewardReq& from);

  inline C2LClan3RecvRoleRewardReq& operator=(const C2LClan3RecvRoleRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2LClan3RecvRoleRewardReq& default_instance();

  void Swap(C2LClan3RecvRoleRewardReq* other);

  // implements Message ----------------------------------------------

  C2LClan3RecvRoleRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2LClan3RecvRoleRewardReq& from);
  void MergeFrom(const C2LClan3RecvRoleRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2LClan3RecvRoleRewardReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static C2LClan3RecvRoleRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class S2CSynClan3ZeroUpdate : public ::google::protobuf::Message {
 public:
  S2CSynClan3ZeroUpdate();
  virtual ~S2CSynClan3ZeroUpdate();

  S2CSynClan3ZeroUpdate(const S2CSynClan3ZeroUpdate& from);

  inline S2CSynClan3ZeroUpdate& operator=(const S2CSynClan3ZeroUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CSynClan3ZeroUpdate& default_instance();

  void Swap(S2CSynClan3ZeroUpdate* other);

  // implements Message ----------------------------------------------

  S2CSynClan3ZeroUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2CSynClan3ZeroUpdate& from);
  void MergeFrom(const S2CSynClan3ZeroUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ClanComInfo last_race = 1;
  inline int last_race_size() const;
  inline void clear_last_race();
  static const int kLastRaceFieldNumber = 1;
  inline const ::proto_ff::ClanComInfo& last_race(int index) const;
  inline ::proto_ff::ClanComInfo* mutable_last_race(int index);
  inline ::proto_ff::ClanComInfo* add_last_race();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >&
      last_race() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >*
      mutable_last_race();

  // @@protoc_insertion_point(class_scope:proto_ff.S2CSynClan3ZeroUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo > last_race_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static S2CSynClan3ZeroUpdate* default_instance_;
};
// -------------------------------------------------------------------

class NotifyClan3DupKill : public ::google::protobuf::Message {
 public:
  NotifyClan3DupKill();
  virtual ~NotifyClan3DupKill();

  NotifyClan3DupKill(const NotifyClan3DupKill& from);

  inline NotifyClan3DupKill& operator=(const NotifyClan3DupKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyClan3DupKill& default_instance();

  void Swap(NotifyClan3DupKill* other);

  // implements Message ----------------------------------------------

  NotifyClan3DupKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyClan3DupKill& from);
  void MergeFrom(const NotifyClan3DupKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.Clan3MatchEntry killer = 1;
  inline bool has_killer() const;
  inline void clear_killer();
  static const int kKillerFieldNumber = 1;
  inline const ::proto_ff::Clan3MatchEntry& killer() const;
  inline ::proto_ff::Clan3MatchEntry* mutable_killer();
  inline ::proto_ff::Clan3MatchEntry* release_killer();
  inline void set_allocated_killer(::proto_ff::Clan3MatchEntry* killer);

  // optional .proto_ff.Clan3MatchEntry beKiller = 2;
  inline bool has_bekiller() const;
  inline void clear_bekiller();
  static const int kBeKillerFieldNumber = 2;
  inline const ::proto_ff::Clan3MatchEntry& bekiller() const;
  inline ::proto_ff::Clan3MatchEntry* mutable_bekiller();
  inline ::proto_ff::Clan3MatchEntry* release_bekiller();
  inline void set_allocated_bekiller(::proto_ff::Clan3MatchEntry* bekiller);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyClan3DupKill)
 private:
  inline void set_has_killer();
  inline void clear_has_killer();
  inline void set_has_bekiller();
  inline void clear_has_bekiller();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::Clan3MatchEntry* killer_;
  ::proto_ff::Clan3MatchEntry* bekiller_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static NotifyClan3DupKill* default_instance_;
};
// -------------------------------------------------------------------

class C2LClan3RewardReq : public ::google::protobuf::Message {
 public:
  C2LClan3RewardReq();
  virtual ~C2LClan3RewardReq();

  C2LClan3RewardReq(const C2LClan3RewardReq& from);

  inline C2LClan3RewardReq& operator=(const C2LClan3RewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2LClan3RewardReq& default_instance();

  void Swap(C2LClan3RewardReq* other);

  // implements Message ----------------------------------------------

  C2LClan3RewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2LClan3RewardReq& from);
  void MergeFrom(const C2LClan3RewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.C2LClan3RewardReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pvp3v3_2eproto();
  friend void protobuf_AssignDesc_Pvp3v3_2eproto();
  friend void protobuf_ShutdownFile_Pvp3v3_2eproto();

  void InitAsDefaultInstance();
  static C2LClan3RewardReq* default_instance_;
};
// ===================================================================


// ===================================================================

// NotifyClan3RoleData

// optional int32 clan_id = 1;
inline bool NotifyClan3RoleData::has_clan_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyClan3RoleData::set_has_clan_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyClan3RoleData::clear_has_clan_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyClan3RoleData::clear_clan_id() {
  clan_id_ = 0;
  clear_has_clan_id();
}
inline ::google::protobuf::int32 NotifyClan3RoleData::clan_id() const {
  return clan_id_;
}
inline void NotifyClan3RoleData::set_clan_id(::google::protobuf::int32 value) {
  set_has_clan_id();
  clan_id_ = value;
}

// optional int32 role_join_num = 2;
inline bool NotifyClan3RoleData::has_role_join_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyClan3RoleData::set_has_role_join_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyClan3RoleData::clear_has_role_join_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyClan3RoleData::clear_role_join_num() {
  role_join_num_ = 0;
  clear_has_role_join_num();
}
inline ::google::protobuf::int32 NotifyClan3RoleData::role_join_num() const {
  return role_join_num_;
}
inline void NotifyClan3RoleData::set_role_join_num(::google::protobuf::int32 value) {
  set_has_role_join_num();
  role_join_num_ = value;
}

// optional int32 role_win_num = 3;
inline bool NotifyClan3RoleData::has_role_win_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyClan3RoleData::set_has_role_win_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyClan3RoleData::clear_has_role_win_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyClan3RoleData::clear_role_win_num() {
  role_win_num_ = 0;
  clear_has_role_win_num();
}
inline ::google::protobuf::int32 NotifyClan3RoleData::role_win_num() const {
  return role_win_num_;
}
inline void NotifyClan3RoleData::set_role_win_num(::google::protobuf::int32 value) {
  set_has_role_win_num();
  role_win_num_ = value;
}

// optional int32 role_cw_num = 4;
inline bool NotifyClan3RoleData::has_role_cw_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyClan3RoleData::set_has_role_cw_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyClan3RoleData::clear_has_role_cw_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyClan3RoleData::clear_role_cw_num() {
  role_cw_num_ = 0;
  clear_has_role_cw_num();
}
inline ::google::protobuf::int32 NotifyClan3RoleData::role_cw_num() const {
  return role_cw_num_;
}
inline void NotifyClan3RoleData::set_role_cw_num(::google::protobuf::int32 value) {
  set_has_role_cw_num();
  role_cw_num_ = value;
}

// optional uint64 ban_time = 5;
inline bool NotifyClan3RoleData::has_ban_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotifyClan3RoleData::set_has_ban_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotifyClan3RoleData::clear_has_ban_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotifyClan3RoleData::clear_ban_time() {
  ban_time_ = GOOGLE_ULONGLONG(0);
  clear_has_ban_time();
}
inline ::google::protobuf::uint64 NotifyClan3RoleData::ban_time() const {
  return ban_time_;
}
inline void NotifyClan3RoleData::set_ban_time(::google::protobuf::uint64 value) {
  set_has_ban_time();
  ban_time_ = value;
}

// optional int32 day_join_num = 6;
inline bool NotifyClan3RoleData::has_day_join_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotifyClan3RoleData::set_has_day_join_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NotifyClan3RoleData::clear_has_day_join_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NotifyClan3RoleData::clear_day_join_num() {
  day_join_num_ = 0;
  clear_has_day_join_num();
}
inline ::google::protobuf::int32 NotifyClan3RoleData::day_join_num() const {
  return day_join_num_;
}
inline void NotifyClan3RoleData::set_day_join_num(::google::protobuf::int32 value) {
  set_has_day_join_num();
  day_join_num_ = value;
}

// repeated int32 recv_id = 7;
inline int NotifyClan3RoleData::recv_id_size() const {
  return recv_id_.size();
}
inline void NotifyClan3RoleData::clear_recv_id() {
  recv_id_.Clear();
}
inline ::google::protobuf::int32 NotifyClan3RoleData::recv_id(int index) const {
  return recv_id_.Get(index);
}
inline void NotifyClan3RoleData::set_recv_id(int index, ::google::protobuf::int32 value) {
  recv_id_.Set(index, value);
}
inline void NotifyClan3RoleData::add_recv_id(::google::protobuf::int32 value) {
  recv_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NotifyClan3RoleData::recv_id() const {
  return recv_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NotifyClan3RoleData::mutable_recv_id() {
  return &recv_id_;
}

// -------------------------------------------------------------------

// Clan3SeasonRankReq

// optional int32 type = 1;
inline bool Clan3SeasonRankReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3SeasonRankReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3SeasonRankReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3SeasonRankReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Clan3SeasonRankReq::type() const {
  return type_;
}
inline void Clan3SeasonRankReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Clan3SeasonRankRsp

// optional int32 type = 1;
inline bool Clan3SeasonRankRsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3SeasonRankRsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3SeasonRankRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3SeasonRankRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Clan3SeasonRankRsp::type() const {
  return type_;
}
inline void Clan3SeasonRankRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .proto_ff.ClanComInfo rank = 2;
inline int Clan3SeasonRankRsp::rank_size() const {
  return rank_.size();
}
inline void Clan3SeasonRankRsp::clear_rank() {
  rank_.Clear();
}
inline const ::proto_ff::ClanComInfo& Clan3SeasonRankRsp::rank(int index) const {
  return rank_.Get(index);
}
inline ::proto_ff::ClanComInfo* Clan3SeasonRankRsp::mutable_rank(int index) {
  return rank_.Mutable(index);
}
inline ::proto_ff::ClanComInfo* Clan3SeasonRankRsp::add_rank() {
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >&
Clan3SeasonRankRsp::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >*
Clan3SeasonRankRsp::mutable_rank() {
  return &rank_;
}

// optional .proto_ff.ClanComInfo my = 3;
inline bool Clan3SeasonRankRsp::has_my() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Clan3SeasonRankRsp::set_has_my() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Clan3SeasonRankRsp::clear_has_my() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Clan3SeasonRankRsp::clear_my() {
  if (my_ != NULL) my_->::proto_ff::ClanComInfo::Clear();
  clear_has_my();
}
inline const ::proto_ff::ClanComInfo& Clan3SeasonRankRsp::my() const {
  return my_ != NULL ? *my_ : *default_instance_->my_;
}
inline ::proto_ff::ClanComInfo* Clan3SeasonRankRsp::mutable_my() {
  set_has_my();
  if (my_ == NULL) my_ = new ::proto_ff::ClanComInfo;
  return my_;
}
inline ::proto_ff::ClanComInfo* Clan3SeasonRankRsp::release_my() {
  clear_has_my();
  ::proto_ff::ClanComInfo* temp = my_;
  my_ = NULL;
  return temp;
}
inline void Clan3SeasonRankRsp::set_allocated_my(::proto_ff::ClanComInfo* my) {
  delete my_;
  my_ = my;
  if (my) {
    set_has_my();
  } else {
    clear_has_my();
  }
}

// -------------------------------------------------------------------

// Enter3v3ActReq

// -------------------------------------------------------------------

// Enter3v3ActRsp

// optional int32 ret = 1;
inline bool Enter3v3ActRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Enter3v3ActRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Enter3v3ActRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Enter3v3ActRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Enter3v3ActRsp::ret() const {
  return ret_;
}
inline void Enter3v3ActRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// WaitDupMember

// optional uint64 cid = 1;
inline bool WaitDupMember::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WaitDupMember::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WaitDupMember::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WaitDupMember::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 WaitDupMember::cid() const {
  return cid_;
}
inline void WaitDupMember::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool WaitDupMember::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WaitDupMember::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WaitDupMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WaitDupMember::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WaitDupMember::name() const {
  return *name_;
}
inline void WaitDupMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WaitDupMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WaitDupMember::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WaitDupMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WaitDupMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WaitDupMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 3;
inline bool WaitDupMember::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WaitDupMember::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WaitDupMember::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WaitDupMember::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 WaitDupMember::state() const {
  return state_;
}
inline void WaitDupMember::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// NotifyWaitDupSceneData

// optional .proto_ff.ClanComInfo info = 1;
inline bool NotifyWaitDupSceneData::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyWaitDupSceneData::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyWaitDupSceneData::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyWaitDupSceneData::clear_info() {
  if (info_ != NULL) info_->::proto_ff::ClanComInfo::Clear();
  clear_has_info();
}
inline const ::proto_ff::ClanComInfo& NotifyWaitDupSceneData::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::ClanComInfo* NotifyWaitDupSceneData::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::ClanComInfo;
  return info_;
}
inline ::proto_ff::ClanComInfo* NotifyWaitDupSceneData::release_info() {
  clear_has_info();
  ::proto_ff::ClanComInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void NotifyWaitDupSceneData::set_allocated_info(::proto_ff::ClanComInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// repeated .proto_ff.WaitDupMember mems = 2;
inline int NotifyWaitDupSceneData::mems_size() const {
  return mems_.size();
}
inline void NotifyWaitDupSceneData::clear_mems() {
  mems_.Clear();
}
inline const ::proto_ff::WaitDupMember& NotifyWaitDupSceneData::mems(int index) const {
  return mems_.Get(index);
}
inline ::proto_ff::WaitDupMember* NotifyWaitDupSceneData::mutable_mems(int index) {
  return mems_.Mutable(index);
}
inline ::proto_ff::WaitDupMember* NotifyWaitDupSceneData::add_mems() {
  return mems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WaitDupMember >&
NotifyWaitDupSceneData::mems() const {
  return mems_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WaitDupMember >*
NotifyWaitDupSceneData::mutable_mems() {
  return &mems_;
}

// -------------------------------------------------------------------

// Clan3JoinMathchReq

// optional int32 type = 1;
inline bool Clan3JoinMathchReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3JoinMathchReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3JoinMathchReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3JoinMathchReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Clan3JoinMathchReq::type() const {
  return type_;
}
inline void Clan3JoinMathchReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Clan3JoinMathchRsp

// optional int32 ret = 1;
inline bool Clan3JoinMathchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3JoinMathchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3JoinMathchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3JoinMathchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Clan3JoinMathchRsp::ret() const {
  return ret_;
}
inline void Clan3JoinMathchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 join_time = 2;
inline bool Clan3JoinMathchRsp::has_join_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Clan3JoinMathchRsp::set_has_join_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Clan3JoinMathchRsp::clear_has_join_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Clan3JoinMathchRsp::clear_join_time() {
  join_time_ = 0;
  clear_has_join_time();
}
inline ::google::protobuf::int32 Clan3JoinMathchRsp::join_time() const {
  return join_time_;
}
inline void Clan3JoinMathchRsp::set_join_time(::google::protobuf::int32 value) {
  set_has_join_time();
  join_time_ = value;
}

// -------------------------------------------------------------------

// Clan3CancelMatchReq

// -------------------------------------------------------------------

// NotifyCancelMatchRsp

// -------------------------------------------------------------------

// Clan3MatchEntry

// optional uint64 cid = 1;
inline bool Clan3MatchEntry::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3MatchEntry::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3MatchEntry::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3MatchEntry::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Clan3MatchEntry::cid() const {
  return cid_;
}
inline void Clan3MatchEntry::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 is_robot = 2;
inline bool Clan3MatchEntry::has_is_robot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Clan3MatchEntry::set_has_is_robot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Clan3MatchEntry::clear_has_is_robot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Clan3MatchEntry::clear_is_robot() {
  is_robot_ = 0;
  clear_has_is_robot();
}
inline ::google::protobuf::int32 Clan3MatchEntry::is_robot() const {
  return is_robot_;
}
inline void Clan3MatchEntry::set_is_robot(::google::protobuf::int32 value) {
  set_has_is_robot();
  is_robot_ = value;
}

// optional int32 zid = 3;
inline bool Clan3MatchEntry::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Clan3MatchEntry::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Clan3MatchEntry::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Clan3MatchEntry::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 Clan3MatchEntry::zid() const {
  return zid_;
}
inline void Clan3MatchEntry::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 clan_id = 4;
inline bool Clan3MatchEntry::has_clan_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Clan3MatchEntry::set_has_clan_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Clan3MatchEntry::clear_has_clan_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Clan3MatchEntry::clear_clan_id() {
  clan_id_ = GOOGLE_ULONGLONG(0);
  clear_has_clan_id();
}
inline ::google::protobuf::uint64 Clan3MatchEntry::clan_id() const {
  return clan_id_;
}
inline void Clan3MatchEntry::set_clan_id(::google::protobuf::uint64 value) {
  set_has_clan_id();
  clan_id_ = value;
}

// optional int32 score = 5;
inline bool Clan3MatchEntry::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Clan3MatchEntry::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Clan3MatchEntry::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Clan3MatchEntry::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Clan3MatchEntry::score() const {
  return score_;
}
inline void Clan3MatchEntry::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional bytes clan_name = 6;
inline bool Clan3MatchEntry::has_clan_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Clan3MatchEntry::set_has_clan_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Clan3MatchEntry::clear_has_clan_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Clan3MatchEntry::clear_clan_name() {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    clan_name_->clear();
  }
  clear_has_clan_name();
}
inline const ::std::string& Clan3MatchEntry::clan_name() const {
  return *clan_name_;
}
inline void Clan3MatchEntry::set_clan_name(const ::std::string& value) {
  set_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    clan_name_ = new ::std::string;
  }
  clan_name_->assign(value);
}
inline void Clan3MatchEntry::set_clan_name(const char* value) {
  set_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    clan_name_ = new ::std::string;
  }
  clan_name_->assign(value);
}
inline void Clan3MatchEntry::set_clan_name(const void* value, size_t size) {
  set_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    clan_name_ = new ::std::string;
  }
  clan_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Clan3MatchEntry::mutable_clan_name() {
  set_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    clan_name_ = new ::std::string;
  }
  return clan_name_;
}
inline ::std::string* Clan3MatchEntry::release_clan_name() {
  clear_has_clan_name();
  if (clan_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clan_name_;
    clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Clan3MatchEntry::set_allocated_clan_name(::std::string* clan_name) {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_name_;
  }
  if (clan_name) {
    set_has_clan_name();
    clan_name_ = clan_name;
  } else {
    clear_has_clan_name();
    clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes name = 7;
inline bool Clan3MatchEntry::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Clan3MatchEntry::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Clan3MatchEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Clan3MatchEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Clan3MatchEntry::name() const {
  return *name_;
}
inline void Clan3MatchEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Clan3MatchEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Clan3MatchEntry::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Clan3MatchEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Clan3MatchEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Clan3MatchEntry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto_ff.RoleHeadPicProto head = 8;
inline bool Clan3MatchEntry::has_head() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Clan3MatchEntry::set_has_head() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Clan3MatchEntry::clear_has_head() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Clan3MatchEntry::clear_head() {
  if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
  clear_has_head();
}
inline const ::proto_ff::RoleHeadPicProto& Clan3MatchEntry::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::proto_ff::RoleHeadPicProto* Clan3MatchEntry::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::proto_ff::RoleHeadPicProto;
  return head_;
}
inline ::proto_ff::RoleHeadPicProto* Clan3MatchEntry::release_head() {
  clear_has_head();
  ::proto_ff::RoleHeadPicProto* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Clan3MatchEntry::set_allocated_head(::proto_ff::RoleHeadPicProto* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// optional int32 level = 9;
inline bool Clan3MatchEntry::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Clan3MatchEntry::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Clan3MatchEntry::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Clan3MatchEntry::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Clan3MatchEntry::level() const {
  return level_;
}
inline void Clan3MatchEntry::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 maxHP = 10;
inline bool Clan3MatchEntry::has_maxhp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Clan3MatchEntry::set_has_maxhp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Clan3MatchEntry::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Clan3MatchEntry::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 Clan3MatchEntry::maxhp() const {
  return maxhp_;
}
inline void Clan3MatchEntry::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional uint64 curHp = 11;
inline bool Clan3MatchEntry::has_curhp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Clan3MatchEntry::set_has_curhp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Clan3MatchEntry::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Clan3MatchEntry::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 Clan3MatchEntry::curhp() const {
  return curhp_;
}
inline void Clan3MatchEntry::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional int32 killNum = 12;
inline bool Clan3MatchEntry::has_killnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Clan3MatchEntry::set_has_killnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Clan3MatchEntry::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Clan3MatchEntry::clear_killnum() {
  killnum_ = 0;
  clear_has_killnum();
}
inline ::google::protobuf::int32 Clan3MatchEntry::killnum() const {
  return killnum_;
}
inline void Clan3MatchEntry::set_killnum(::google::protobuf::int32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional int32 mvp = 13;
inline bool Clan3MatchEntry::has_mvp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Clan3MatchEntry::set_has_mvp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Clan3MatchEntry::clear_has_mvp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Clan3MatchEntry::clear_mvp() {
  mvp_ = 0;
  clear_has_mvp();
}
inline ::google::protobuf::int32 Clan3MatchEntry::mvp() const {
  return mvp_;
}
inline void Clan3MatchEntry::set_mvp(::google::protobuf::int32 value) {
  set_has_mvp();
  mvp_ = value;
}

// optional int32 mvp_reward = 14;
inline bool Clan3MatchEntry::has_mvp_reward() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Clan3MatchEntry::set_has_mvp_reward() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Clan3MatchEntry::clear_has_mvp_reward() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Clan3MatchEntry::clear_mvp_reward() {
  mvp_reward_ = 0;
  clear_has_mvp_reward();
}
inline ::google::protobuf::int32 Clan3MatchEntry::mvp_reward() const {
  return mvp_reward_;
}
inline void Clan3MatchEntry::set_mvp_reward(::google::protobuf::int32 value) {
  set_has_mvp_reward();
  mvp_reward_ = value;
}

// optional int32 day_reward = 15;
inline bool Clan3MatchEntry::has_day_reward() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Clan3MatchEntry::set_has_day_reward() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Clan3MatchEntry::clear_has_day_reward() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Clan3MatchEntry::clear_day_reward() {
  day_reward_ = 0;
  clear_has_day_reward();
}
inline ::google::protobuf::int32 Clan3MatchEntry::day_reward() const {
  return day_reward_;
}
inline void Clan3MatchEntry::set_day_reward(::google::protobuf::int32 value) {
  set_has_day_reward();
  day_reward_ = value;
}

// optional int32 match_type = 16;
inline bool Clan3MatchEntry::has_match_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Clan3MatchEntry::set_has_match_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Clan3MatchEntry::clear_has_match_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Clan3MatchEntry::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::google::protobuf::int32 Clan3MatchEntry::match_type() const {
  return match_type_;
}
inline void Clan3MatchEntry::set_match_type(::google::protobuf::int32 value) {
  set_has_match_type();
  match_type_ = value;
}

// -------------------------------------------------------------------

// NotifyClan3MatchSuccess

// repeated .proto_ff.Clan3MatchEntry red = 1;
inline int NotifyClan3MatchSuccess::red_size() const {
  return red_.size();
}
inline void NotifyClan3MatchSuccess::clear_red() {
  red_.Clear();
}
inline const ::proto_ff::Clan3MatchEntry& NotifyClan3MatchSuccess::red(int index) const {
  return red_.Get(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3MatchSuccess::mutable_red(int index) {
  return red_.Mutable(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3MatchSuccess::add_red() {
  return red_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
NotifyClan3MatchSuccess::red() const {
  return red_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
NotifyClan3MatchSuccess::mutable_red() {
  return &red_;
}

// repeated .proto_ff.Clan3MatchEntry blue = 2;
inline int NotifyClan3MatchSuccess::blue_size() const {
  return blue_.size();
}
inline void NotifyClan3MatchSuccess::clear_blue() {
  blue_.Clear();
}
inline const ::proto_ff::Clan3MatchEntry& NotifyClan3MatchSuccess::blue(int index) const {
  return blue_.Get(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3MatchSuccess::mutable_blue(int index) {
  return blue_.Mutable(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3MatchSuccess::add_blue() {
  return blue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
NotifyClan3MatchSuccess::blue() const {
  return blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
NotifyClan3MatchSuccess::mutable_blue() {
  return &blue_;
}

// -------------------------------------------------------------------

// NotifyClan3DupRun

// repeated .proto_ff.Clan3MatchEntry red = 1;
inline int NotifyClan3DupRun::red_size() const {
  return red_.size();
}
inline void NotifyClan3DupRun::clear_red() {
  red_.Clear();
}
inline const ::proto_ff::Clan3MatchEntry& NotifyClan3DupRun::red(int index) const {
  return red_.Get(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3DupRun::mutable_red(int index) {
  return red_.Mutable(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3DupRun::add_red() {
  return red_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
NotifyClan3DupRun::red() const {
  return red_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
NotifyClan3DupRun::mutable_red() {
  return &red_;
}

// repeated .proto_ff.Clan3MatchEntry blue = 2;
inline int NotifyClan3DupRun::blue_size() const {
  return blue_.size();
}
inline void NotifyClan3DupRun::clear_blue() {
  blue_.Clear();
}
inline const ::proto_ff::Clan3MatchEntry& NotifyClan3DupRun::blue(int index) const {
  return blue_.Get(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3DupRun::mutable_blue(int index) {
  return blue_.Mutable(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3DupRun::add_blue() {
  return blue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
NotifyClan3DupRun::blue() const {
  return blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
NotifyClan3DupRun::mutable_blue() {
  return &blue_;
}

// -------------------------------------------------------------------

// NotifyClan3Result

// repeated .proto_ff.Clan3MatchEntry red = 1;
inline int NotifyClan3Result::red_size() const {
  return red_.size();
}
inline void NotifyClan3Result::clear_red() {
  red_.Clear();
}
inline const ::proto_ff::Clan3MatchEntry& NotifyClan3Result::red(int index) const {
  return red_.Get(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3Result::mutable_red(int index) {
  return red_.Mutable(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3Result::add_red() {
  return red_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
NotifyClan3Result::red() const {
  return red_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
NotifyClan3Result::mutable_red() {
  return &red_;
}

// repeated .proto_ff.Clan3MatchEntry blue = 2;
inline int NotifyClan3Result::blue_size() const {
  return blue_.size();
}
inline void NotifyClan3Result::clear_blue() {
  blue_.Clear();
}
inline const ::proto_ff::Clan3MatchEntry& NotifyClan3Result::blue(int index) const {
  return blue_.Get(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3Result::mutable_blue(int index) {
  return blue_.Mutable(index);
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3Result::add_blue() {
  return blue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
NotifyClan3Result::blue() const {
  return blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
NotifyClan3Result::mutable_blue() {
  return &blue_;
}

// optional int32 result = 3;
inline bool NotifyClan3Result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyClan3Result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyClan3Result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyClan3Result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 NotifyClan3Result::result() const {
  return result_;
}
inline void NotifyClan3Result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 clanScore = 4;
inline bool NotifyClan3Result::has_clanscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyClan3Result::set_has_clanscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyClan3Result::clear_has_clanscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyClan3Result::clear_clanscore() {
  clanscore_ = 0;
  clear_has_clanscore();
}
inline ::google::protobuf::int32 NotifyClan3Result::clanscore() const {
  return clanscore_;
}
inline void NotifyClan3Result::set_clanscore(::google::protobuf::int32 value) {
  set_has_clanscore();
  clanscore_ = value;
}

// optional int32 clanAddScore = 5;
inline bool NotifyClan3Result::has_clanaddscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotifyClan3Result::set_has_clanaddscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotifyClan3Result::clear_has_clanaddscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotifyClan3Result::clear_clanaddscore() {
  clanaddscore_ = 0;
  clear_has_clanaddscore();
}
inline ::google::protobuf::int32 NotifyClan3Result::clanaddscore() const {
  return clanaddscore_;
}
inline void NotifyClan3Result::set_clanaddscore(::google::protobuf::int32 value) {
  set_has_clanaddscore();
  clanaddscore_ = value;
}

// -------------------------------------------------------------------

// Clan3RecvRoleRewardReq

// optional int32 id = 1;
inline bool Clan3RecvRoleRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3RecvRoleRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3RecvRoleRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3RecvRoleRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Clan3RecvRoleRewardReq::id() const {
  return id_;
}
inline void Clan3RecvRoleRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Clan3RecvRoleRewardRsp

// optional int32 ret = 1;
inline bool Clan3RecvRoleRewardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3RecvRoleRewardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3RecvRoleRewardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3RecvRoleRewardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Clan3RecvRoleRewardRsp::ret() const {
  return ret_;
}
inline void Clan3RecvRoleRewardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 id = 2;
inline bool Clan3RecvRoleRewardRsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Clan3RecvRoleRewardRsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Clan3RecvRoleRewardRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Clan3RecvRoleRewardRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Clan3RecvRoleRewardRsp::id() const {
  return id_;
}
inline void Clan3RecvRoleRewardRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// PVP3DB

// optional uint64 last_time = 1;
inline bool PVP3DB::has_last_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVP3DB::set_has_last_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVP3DB::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVP3DB::clear_last_time() {
  last_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_time();
}
inline ::google::protobuf::uint64 PVP3DB::last_time() const {
  return last_time_;
}
inline void PVP3DB::set_last_time(::google::protobuf::uint64 value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 season = 2;
inline bool PVP3DB::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVP3DB::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVP3DB::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVP3DB::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 PVP3DB::season() const {
  return season_;
}
inline void PVP3DB::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
}

// repeated .proto_ff.ClanComInfo last_season = 3;
inline int PVP3DB::last_season_size() const {
  return last_season_.size();
}
inline void PVP3DB::clear_last_season() {
  last_season_.Clear();
}
inline const ::proto_ff::ClanComInfo& PVP3DB::last_season(int index) const {
  return last_season_.Get(index);
}
inline ::proto_ff::ClanComInfo* PVP3DB::mutable_last_season(int index) {
  return last_season_.Mutable(index);
}
inline ::proto_ff::ClanComInfo* PVP3DB::add_last_season() {
  return last_season_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >&
PVP3DB::last_season() const {
  return last_season_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >*
PVP3DB::mutable_last_season() {
  return &last_season_;
}

// repeated .proto_ff.ClanComInfo last_race = 4;
inline int PVP3DB::last_race_size() const {
  return last_race_.size();
}
inline void PVP3DB::clear_last_race() {
  last_race_.Clear();
}
inline const ::proto_ff::ClanComInfo& PVP3DB::last_race(int index) const {
  return last_race_.Get(index);
}
inline ::proto_ff::ClanComInfo* PVP3DB::mutable_last_race(int index) {
  return last_race_.Mutable(index);
}
inline ::proto_ff::ClanComInfo* PVP3DB::add_last_race() {
  return last_race_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >&
PVP3DB::last_race() const {
  return last_race_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >*
PVP3DB::mutable_last_race() {
  return &last_race_;
}

// optional int32 send_season = 5;
inline bool PVP3DB::has_send_season() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVP3DB::set_has_send_season() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVP3DB::clear_has_send_season() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVP3DB::clear_send_season() {
  send_season_ = 0;
  clear_has_send_season();
}
inline ::google::protobuf::int32 PVP3DB::send_season() const {
  return send_season_;
}
inline void PVP3DB::set_send_season(::google::protobuf::int32 value) {
  set_has_send_season();
  send_season_ = value;
}

// -------------------------------------------------------------------

// NotifyPvp3Season

// optional int32 zid = 1;
inline bool NotifyPvp3Season::has_zid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyPvp3Season::set_has_zid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyPvp3Season::clear_has_zid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyPvp3Season::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 NotifyPvp3Season::zid() const {
  return zid_;
}
inline void NotifyPvp3Season::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 season = 2;
inline bool NotifyPvp3Season::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyPvp3Season::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyPvp3Season::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyPvp3Season::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 NotifyPvp3Season::season() const {
  return season_;
}
inline void NotifyPvp3Season::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
}

// -------------------------------------------------------------------

// C2SClan3RankReq

// optional int32 zid = 1;
inline bool C2SClan3RankReq::has_zid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SClan3RankReq::set_has_zid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SClan3RankReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SClan3RankReq::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 C2SClan3RankReq::zid() const {
  return zid_;
}
inline void C2SClan3RankReq::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 cid = 2;
inline bool C2SClan3RankReq::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SClan3RankReq::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SClan3RankReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SClan3RankReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 C2SClan3RankReq::cid() const {
  return cid_;
}
inline void C2SClan3RankReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint64 clan_id = 3;
inline bool C2SClan3RankReq::has_clan_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2SClan3RankReq::set_has_clan_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2SClan3RankReq::clear_has_clan_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2SClan3RankReq::clear_clan_id() {
  clan_id_ = GOOGLE_ULONGLONG(0);
  clear_has_clan_id();
}
inline ::google::protobuf::uint64 C2SClan3RankReq::clan_id() const {
  return clan_id_;
}
inline void C2SClan3RankReq::set_clan_id(::google::protobuf::uint64 value) {
  set_has_clan_id();
  clan_id_ = value;
}

// -------------------------------------------------------------------

// L2SClan3JoinMathchReq

// optional int32 type = 1;
inline bool L2SClan3JoinMathchReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void L2SClan3JoinMathchReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void L2SClan3JoinMathchReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void L2SClan3JoinMathchReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 L2SClan3JoinMathchReq::type() const {
  return type_;
}
inline void L2SClan3JoinMathchReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated uint64 cids = 2;
inline int L2SClan3JoinMathchReq::cids_size() const {
  return cids_.size();
}
inline void L2SClan3JoinMathchReq::clear_cids() {
  cids_.Clear();
}
inline ::google::protobuf::uint64 L2SClan3JoinMathchReq::cids(int index) const {
  return cids_.Get(index);
}
inline void L2SClan3JoinMathchReq::set_cids(int index, ::google::protobuf::uint64 value) {
  cids_.Set(index, value);
}
inline void L2SClan3JoinMathchReq::add_cids(::google::protobuf::uint64 value) {
  cids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
L2SClan3JoinMathchReq::cids() const {
  return cids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
L2SClan3JoinMathchReq::mutable_cids() {
  return &cids_;
}

// optional uint64 fight = 3;
inline bool L2SClan3JoinMathchReq::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void L2SClan3JoinMathchReq::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void L2SClan3JoinMathchReq::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void L2SClan3JoinMathchReq::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 L2SClan3JoinMathchReq::fight() const {
  return fight_;
}
inline void L2SClan3JoinMathchReq::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 zid = 4;
inline bool L2SClan3JoinMathchReq::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void L2SClan3JoinMathchReq::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void L2SClan3JoinMathchReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void L2SClan3JoinMathchReq::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 L2SClan3JoinMathchReq::zid() const {
  return zid_;
}
inline void L2SClan3JoinMathchReq::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 clan_id = 5;
inline bool L2SClan3JoinMathchReq::has_clan_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void L2SClan3JoinMathchReq::set_has_clan_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void L2SClan3JoinMathchReq::clear_has_clan_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void L2SClan3JoinMathchReq::clear_clan_id() {
  clan_id_ = GOOGLE_ULONGLONG(0);
  clear_has_clan_id();
}
inline ::google::protobuf::uint64 L2SClan3JoinMathchReq::clan_id() const {
  return clan_id_;
}
inline void L2SClan3JoinMathchReq::set_clan_id(::google::protobuf::uint64 value) {
  set_has_clan_id();
  clan_id_ = value;
}

// optional int32 logic_id = 6;
inline bool L2SClan3JoinMathchReq::has_logic_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void L2SClan3JoinMathchReq::set_has_logic_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void L2SClan3JoinMathchReq::clear_has_logic_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void L2SClan3JoinMathchReq::clear_logic_id() {
  logic_id_ = 0;
  clear_has_logic_id();
}
inline ::google::protobuf::int32 L2SClan3JoinMathchReq::logic_id() const {
  return logic_id_;
}
inline void L2SClan3JoinMathchReq::set_logic_id(::google::protobuf::int32 value) {
  set_has_logic_id();
  logic_id_ = value;
}

// -------------------------------------------------------------------

// Clan3MatchRole

// optional uint64 cid = 1;
inline bool Clan3MatchRole::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3MatchRole::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3MatchRole::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3MatchRole::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Clan3MatchRole::cid() const {
  return cid_;
}
inline void Clan3MatchRole::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 zid = 2;
inline bool Clan3MatchRole::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Clan3MatchRole::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Clan3MatchRole::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Clan3MatchRole::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 Clan3MatchRole::zid() const {
  return zid_;
}
inline void Clan3MatchRole::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 clanid = 3;
inline bool Clan3MatchRole::has_clanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Clan3MatchRole::set_has_clanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Clan3MatchRole::clear_has_clanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Clan3MatchRole::clear_clanid() {
  clanid_ = GOOGLE_ULONGLONG(0);
  clear_has_clanid();
}
inline ::google::protobuf::uint64 Clan3MatchRole::clanid() const {
  return clanid_;
}
inline void Clan3MatchRole::set_clanid(::google::protobuf::uint64 value) {
  set_has_clanid();
  clanid_ = value;
}

// optional int32 match_type = 4;
inline bool Clan3MatchRole::has_match_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Clan3MatchRole::set_has_match_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Clan3MatchRole::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Clan3MatchRole::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::google::protobuf::int32 Clan3MatchRole::match_type() const {
  return match_type_;
}
inline void Clan3MatchRole::set_match_type(::google::protobuf::int32 value) {
  set_has_match_type();
  match_type_ = value;
}

// -------------------------------------------------------------------

// Clan3MatchRobot

// optional uint64 cid = 1;
inline bool Clan3MatchRobot::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Clan3MatchRobot::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Clan3MatchRobot::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Clan3MatchRobot::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Clan3MatchRobot::cid() const {
  return cid_;
}
inline void Clan3MatchRobot::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 zid = 2;
inline bool Clan3MatchRobot::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Clan3MatchRobot::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Clan3MatchRobot::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Clan3MatchRobot::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 Clan3MatchRobot::zid() const {
  return zid_;
}
inline void Clan3MatchRobot::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// Clan3MatchResult

// repeated .proto_ff.Clan3MatchRole red = 1;
inline int Clan3MatchResult::red_size() const {
  return red_.size();
}
inline void Clan3MatchResult::clear_red() {
  red_.Clear();
}
inline const ::proto_ff::Clan3MatchRole& Clan3MatchResult::red(int index) const {
  return red_.Get(index);
}
inline ::proto_ff::Clan3MatchRole* Clan3MatchResult::mutable_red(int index) {
  return red_.Mutable(index);
}
inline ::proto_ff::Clan3MatchRole* Clan3MatchResult::add_red() {
  return red_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole >&
Clan3MatchResult::red() const {
  return red_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole >*
Clan3MatchResult::mutable_red() {
  return &red_;
}

// repeated .proto_ff.Clan3MatchRobot red_robot = 2;
inline int Clan3MatchResult::red_robot_size() const {
  return red_robot_.size();
}
inline void Clan3MatchResult::clear_red_robot() {
  red_robot_.Clear();
}
inline const ::proto_ff::Clan3MatchRobot& Clan3MatchResult::red_robot(int index) const {
  return red_robot_.Get(index);
}
inline ::proto_ff::Clan3MatchRobot* Clan3MatchResult::mutable_red_robot(int index) {
  return red_robot_.Mutable(index);
}
inline ::proto_ff::Clan3MatchRobot* Clan3MatchResult::add_red_robot() {
  return red_robot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot >&
Clan3MatchResult::red_robot() const {
  return red_robot_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot >*
Clan3MatchResult::mutable_red_robot() {
  return &red_robot_;
}

// repeated .proto_ff.Clan3MatchRole blue = 3;
inline int Clan3MatchResult::blue_size() const {
  return blue_.size();
}
inline void Clan3MatchResult::clear_blue() {
  blue_.Clear();
}
inline const ::proto_ff::Clan3MatchRole& Clan3MatchResult::blue(int index) const {
  return blue_.Get(index);
}
inline ::proto_ff::Clan3MatchRole* Clan3MatchResult::mutable_blue(int index) {
  return blue_.Mutable(index);
}
inline ::proto_ff::Clan3MatchRole* Clan3MatchResult::add_blue() {
  return blue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole >&
Clan3MatchResult::blue() const {
  return blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRole >*
Clan3MatchResult::mutable_blue() {
  return &blue_;
}

// repeated .proto_ff.Clan3MatchRobot blue_robot = 4;
inline int Clan3MatchResult::blue_robot_size() const {
  return blue_robot_.size();
}
inline void Clan3MatchResult::clear_blue_robot() {
  blue_robot_.Clear();
}
inline const ::proto_ff::Clan3MatchRobot& Clan3MatchResult::blue_robot(int index) const {
  return blue_robot_.Get(index);
}
inline ::proto_ff::Clan3MatchRobot* Clan3MatchResult::mutable_blue_robot(int index) {
  return blue_robot_.Mutable(index);
}
inline ::proto_ff::Clan3MatchRobot* Clan3MatchResult::add_blue_robot() {
  return blue_robot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot >&
Clan3MatchResult::blue_robot() const {
  return blue_robot_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchRobot >*
Clan3MatchResult::mutable_blue_robot() {
  return &blue_robot_;
}

// -------------------------------------------------------------------

// L2SClan3CancelMatchReq

// optional int64 cid = 1;
inline bool L2SClan3CancelMatchReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void L2SClan3CancelMatchReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void L2SClan3CancelMatchReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void L2SClan3CancelMatchReq::clear_cid() {
  cid_ = GOOGLE_LONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::int64 L2SClan3CancelMatchReq::cid() const {
  return cid_;
}
inline void L2SClan3CancelMatchReq::set_cid(::google::protobuf::int64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 zid = 2;
inline bool L2SClan3CancelMatchReq::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void L2SClan3CancelMatchReq::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void L2SClan3CancelMatchReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void L2SClan3CancelMatchReq::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 L2SClan3CancelMatchReq::zid() const {
  return zid_;
}
inline void L2SClan3CancelMatchReq::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 clanId = 3;
inline bool L2SClan3CancelMatchReq::has_clanid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void L2SClan3CancelMatchReq::set_has_clanid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void L2SClan3CancelMatchReq::clear_has_clanid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void L2SClan3CancelMatchReq::clear_clanid() {
  clanid_ = 0;
  clear_has_clanid();
}
inline ::google::protobuf::int32 L2SClan3CancelMatchReq::clanid() const {
  return clanid_;
}
inline void L2SClan3CancelMatchReq::set_clanid(::google::protobuf::int32 value) {
  set_has_clanid();
  clanid_ = value;
}

// -------------------------------------------------------------------

// NotifyClan3ActionWaitDup

// optional uint64 cid = 1;
inline bool NotifyClan3ActionWaitDup::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyClan3ActionWaitDup::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyClan3ActionWaitDup::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyClan3ActionWaitDup::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 NotifyClan3ActionWaitDup::cid() const {
  return cid_;
}
inline void NotifyClan3ActionWaitDup::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 opt = 2;
inline bool NotifyClan3ActionWaitDup::has_opt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyClan3ActionWaitDup::set_has_opt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyClan3ActionWaitDup::clear_has_opt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyClan3ActionWaitDup::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 NotifyClan3ActionWaitDup::opt() const {
  return opt_;
}
inline void NotifyClan3ActionWaitDup::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// -------------------------------------------------------------------

// L2SNotifyClan3DupResult

// repeated .proto_ff.Clan3MatchEntry red = 1;
inline int L2SNotifyClan3DupResult::red_size() const {
  return red_.size();
}
inline void L2SNotifyClan3DupResult::clear_red() {
  red_.Clear();
}
inline const ::proto_ff::Clan3MatchEntry& L2SNotifyClan3DupResult::red(int index) const {
  return red_.Get(index);
}
inline ::proto_ff::Clan3MatchEntry* L2SNotifyClan3DupResult::mutable_red(int index) {
  return red_.Mutable(index);
}
inline ::proto_ff::Clan3MatchEntry* L2SNotifyClan3DupResult::add_red() {
  return red_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
L2SNotifyClan3DupResult::red() const {
  return red_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
L2SNotifyClan3DupResult::mutable_red() {
  return &red_;
}

// repeated .proto_ff.Clan3MatchEntry blue = 2;
inline int L2SNotifyClan3DupResult::blue_size() const {
  return blue_.size();
}
inline void L2SNotifyClan3DupResult::clear_blue() {
  blue_.Clear();
}
inline const ::proto_ff::Clan3MatchEntry& L2SNotifyClan3DupResult::blue(int index) const {
  return blue_.Get(index);
}
inline ::proto_ff::Clan3MatchEntry* L2SNotifyClan3DupResult::mutable_blue(int index) {
  return blue_.Mutable(index);
}
inline ::proto_ff::Clan3MatchEntry* L2SNotifyClan3DupResult::add_blue() {
  return blue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >&
L2SNotifyClan3DupResult::blue() const {
  return blue_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Clan3MatchEntry >*
L2SNotifyClan3DupResult::mutable_blue() {
  return &blue_;
}

// optional int32 result = 3;
inline bool L2SNotifyClan3DupResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void L2SNotifyClan3DupResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void L2SNotifyClan3DupResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void L2SNotifyClan3DupResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 L2SNotifyClan3DupResult::result() const {
  return result_;
}
inline void L2SNotifyClan3DupResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 mvp = 4;
inline bool L2SNotifyClan3DupResult::has_mvp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void L2SNotifyClan3DupResult::set_has_mvp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void L2SNotifyClan3DupResult::clear_has_mvp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void L2SNotifyClan3DupResult::clear_mvp() {
  mvp_ = GOOGLE_ULONGLONG(0);
  clear_has_mvp();
}
inline ::google::protobuf::uint64 L2SNotifyClan3DupResult::mvp() const {
  return mvp_;
}
inline void L2SNotifyClan3DupResult::set_mvp(::google::protobuf::uint64 value) {
  set_has_mvp();
  mvp_ = value;
}

// repeated uint64 deads = 5;
inline int L2SNotifyClan3DupResult::deads_size() const {
  return deads_.size();
}
inline void L2SNotifyClan3DupResult::clear_deads() {
  deads_.Clear();
}
inline ::google::protobuf::uint64 L2SNotifyClan3DupResult::deads(int index) const {
  return deads_.Get(index);
}
inline void L2SNotifyClan3DupResult::set_deads(int index, ::google::protobuf::uint64 value) {
  deads_.Set(index, value);
}
inline void L2SNotifyClan3DupResult::add_deads(::google::protobuf::uint64 value) {
  deads_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
L2SNotifyClan3DupResult::deads() const {
  return deads_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
L2SNotifyClan3DupResult::mutable_deads() {
  return &deads_;
}

// repeated uint64 cids = 6;
inline int L2SNotifyClan3DupResult::cids_size() const {
  return cids_.size();
}
inline void L2SNotifyClan3DupResult::clear_cids() {
  cids_.Clear();
}
inline ::google::protobuf::uint64 L2SNotifyClan3DupResult::cids(int index) const {
  return cids_.Get(index);
}
inline void L2SNotifyClan3DupResult::set_cids(int index, ::google::protobuf::uint64 value) {
  cids_.Set(index, value);
}
inline void L2SNotifyClan3DupResult::add_cids(::google::protobuf::uint64 value) {
  cids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
L2SNotifyClan3DupResult::cids() const {
  return cids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
L2SNotifyClan3DupResult::mutable_cids() {
  return &cids_;
}

// -------------------------------------------------------------------

// C2SClan3SendReward

// optional uint64 cid = 1;
inline bool C2SClan3SendReward::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SClan3SendReward::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SClan3SendReward::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SClan3SendReward::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 C2SClan3SendReward::cid() const {
  return cid_;
}
inline void C2SClan3SendReward::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 type = 2;
inline bool C2SClan3SendReward::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SClan3SendReward::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SClan3SendReward::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SClan3SendReward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 C2SClan3SendReward::type() const {
  return type_;
}
inline void C2SClan3SendReward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// C2LClan3RecvRoleRewardReq

// optional uint64 cid = 1;
inline bool C2LClan3RecvRoleRewardReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2LClan3RecvRoleRewardReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2LClan3RecvRoleRewardReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2LClan3RecvRoleRewardReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 C2LClan3RecvRoleRewardReq::cid() const {
  return cid_;
}
inline void C2LClan3RecvRoleRewardReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 id = 2;
inline bool C2LClan3RecvRoleRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2LClan3RecvRoleRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2LClan3RecvRoleRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2LClan3RecvRoleRewardReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 C2LClan3RecvRoleRewardReq::id() const {
  return id_;
}
inline void C2LClan3RecvRoleRewardReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// S2CSynClan3ZeroUpdate

// repeated .proto_ff.ClanComInfo last_race = 1;
inline int S2CSynClan3ZeroUpdate::last_race_size() const {
  return last_race_.size();
}
inline void S2CSynClan3ZeroUpdate::clear_last_race() {
  last_race_.Clear();
}
inline const ::proto_ff::ClanComInfo& S2CSynClan3ZeroUpdate::last_race(int index) const {
  return last_race_.Get(index);
}
inline ::proto_ff::ClanComInfo* S2CSynClan3ZeroUpdate::mutable_last_race(int index) {
  return last_race_.Mutable(index);
}
inline ::proto_ff::ClanComInfo* S2CSynClan3ZeroUpdate::add_last_race() {
  return last_race_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >&
S2CSynClan3ZeroUpdate::last_race() const {
  return last_race_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ClanComInfo >*
S2CSynClan3ZeroUpdate::mutable_last_race() {
  return &last_race_;
}

// -------------------------------------------------------------------

// NotifyClan3DupKill

// optional .proto_ff.Clan3MatchEntry killer = 1;
inline bool NotifyClan3DupKill::has_killer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyClan3DupKill::set_has_killer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyClan3DupKill::clear_has_killer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyClan3DupKill::clear_killer() {
  if (killer_ != NULL) killer_->::proto_ff::Clan3MatchEntry::Clear();
  clear_has_killer();
}
inline const ::proto_ff::Clan3MatchEntry& NotifyClan3DupKill::killer() const {
  return killer_ != NULL ? *killer_ : *default_instance_->killer_;
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3DupKill::mutable_killer() {
  set_has_killer();
  if (killer_ == NULL) killer_ = new ::proto_ff::Clan3MatchEntry;
  return killer_;
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3DupKill::release_killer() {
  clear_has_killer();
  ::proto_ff::Clan3MatchEntry* temp = killer_;
  killer_ = NULL;
  return temp;
}
inline void NotifyClan3DupKill::set_allocated_killer(::proto_ff::Clan3MatchEntry* killer) {
  delete killer_;
  killer_ = killer;
  if (killer) {
    set_has_killer();
  } else {
    clear_has_killer();
  }
}

// optional .proto_ff.Clan3MatchEntry beKiller = 2;
inline bool NotifyClan3DupKill::has_bekiller() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyClan3DupKill::set_has_bekiller() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyClan3DupKill::clear_has_bekiller() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyClan3DupKill::clear_bekiller() {
  if (bekiller_ != NULL) bekiller_->::proto_ff::Clan3MatchEntry::Clear();
  clear_has_bekiller();
}
inline const ::proto_ff::Clan3MatchEntry& NotifyClan3DupKill::bekiller() const {
  return bekiller_ != NULL ? *bekiller_ : *default_instance_->bekiller_;
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3DupKill::mutable_bekiller() {
  set_has_bekiller();
  if (bekiller_ == NULL) bekiller_ = new ::proto_ff::Clan3MatchEntry;
  return bekiller_;
}
inline ::proto_ff::Clan3MatchEntry* NotifyClan3DupKill::release_bekiller() {
  clear_has_bekiller();
  ::proto_ff::Clan3MatchEntry* temp = bekiller_;
  bekiller_ = NULL;
  return temp;
}
inline void NotifyClan3DupKill::set_allocated_bekiller(::proto_ff::Clan3MatchEntry* bekiller) {
  delete bekiller_;
  bekiller_ = bekiller;
  if (bekiller) {
    set_has_bekiller();
  } else {
    clear_has_bekiller();
  }
}

// -------------------------------------------------------------------

// C2LClan3RewardReq

// optional int32 type = 1;
inline bool C2LClan3RewardReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2LClan3RewardReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2LClan3RewardReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2LClan3RewardReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 C2LClan3RewardReq::type() const {
  return type_;
}
inline void C2LClan3RewardReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 cid = 2;
inline bool C2LClan3RewardReq::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2LClan3RewardReq::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2LClan3RewardReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2LClan3RewardReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 C2LClan3RewardReq::cid() const {
  return cid_;
}
inline void C2LClan3RewardReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Pvp3v3_2eproto__INCLUDED
