// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Dup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Dup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_DupDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupBplevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupBplevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupBplevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupBplevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupTtowerwaveClearDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupTtowerwaveClearDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupTtowerwave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupTtowerwave_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupTtowerwave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupTtowerwave_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupTowerreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupTowerreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupTowerreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupTowerreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupSweepmonsternum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupSweepmonsternum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupSweepmonsternum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupSweepmonsternum_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupWorldlvreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupWorldlvreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupWorldlvreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupWorldlvreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupPlanes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupPlanes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupPlanes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupPlanes_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupYt_dupClearDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupYt_dupClearDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DupYt_dup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DupYt_dup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DupYt_dup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DupYt_dup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fDup_2eproto() {
  protobuf_AddDesc_E_5fDup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Dup.proto");
  GOOGLE_CHECK(file != NULL);
  E_DupDup_descriptor_ = file->message_type(0);
  static const int E_DupDup_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_scripid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_scriptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_duplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_scripmontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_scripmonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_recommendpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_duplicatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_isautofight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_revivemaxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_teamobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_gradecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_sweeprewardboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_sweeprewardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_sweepexptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_trackpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_pathofmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_ispatrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_failurebox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_planes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, m_box_),
  };
  E_DupDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupDup_descriptor_,
      E_DupDup::default_instance_,
      E_DupDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupDup));
  Sheet_DupDup_descriptor_ = file->message_type(1);
  static const int Sheet_DupDup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupDup, e_dupdup_list_),
  };
  Sheet_DupDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupDup_descriptor_,
      Sheet_DupDup::default_instance_,
      Sheet_DupDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupDup));
  E_DupBplevel_descriptor_ = file->message_type(2);
  static const int E_DupBplevel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, m_bgdup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, m_bgdupsweep_),
  };
  E_DupBplevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupBplevel_descriptor_,
      E_DupBplevel::default_instance_,
      E_DupBplevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupBplevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupBplevel));
  Sheet_DupBplevel_descriptor_ = file->message_type(3);
  static const int Sheet_DupBplevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupBplevel, e_dupbplevel_list_),
  };
  Sheet_DupBplevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupBplevel_descriptor_,
      Sheet_DupBplevel::default_instance_,
      Sheet_DupBplevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupBplevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupBplevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupBplevel));
  E_DupTtowerwaveClearDesc_descriptor_ = file->message_type(4);
  static const int E_DupTtowerwaveClearDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwaveClearDesc, m_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwaveClearDesc, m_time_),
  };
  E_DupTtowerwaveClearDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupTtowerwaveClearDesc_descriptor_,
      E_DupTtowerwaveClearDesc::default_instance_,
      E_DupTtowerwaveClearDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwaveClearDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwaveClearDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupTtowerwaveClearDesc));
  E_DupTtowerwave_descriptor_ = file->message_type(5);
  static const int E_DupTtowerwave_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_scripid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_scripgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_scriptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_duplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_scripmontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_scripmonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_recommendpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_firstpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_bp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, m_clear_),
  };
  E_DupTtowerwave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupTtowerwave_descriptor_,
      E_DupTtowerwave::default_instance_,
      E_DupTtowerwave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTtowerwave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupTtowerwave));
  Sheet_DupTtowerwave_descriptor_ = file->message_type(6);
  static const int Sheet_DupTtowerwave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTtowerwave, e_dupttowerwave_list_),
  };
  Sheet_DupTtowerwave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupTtowerwave_descriptor_,
      Sheet_DupTtowerwave::default_instance_,
      Sheet_DupTtowerwave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTtowerwave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTtowerwave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupTtowerwave));
  E_DupTowerreward_descriptor_ = file->message_type(7);
  static const int E_DupTowerreward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, m_cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, m_boxid_),
  };
  E_DupTowerreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupTowerreward_descriptor_,
      E_DupTowerreward::default_instance_,
      E_DupTowerreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupTowerreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupTowerreward));
  Sheet_DupTowerreward_descriptor_ = file->message_type(8);
  static const int Sheet_DupTowerreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTowerreward, e_duptowerreward_list_),
  };
  Sheet_DupTowerreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupTowerreward_descriptor_,
      Sheet_DupTowerreward::default_instance_,
      Sheet_DupTowerreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTowerreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupTowerreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupTowerreward));
  E_DupGroup_descriptor_ = file->message_type(9);
  static const int E_DupGroup_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_privilegetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_dynamiclevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_grouptimestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_resetcycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_grouptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_enteritemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_sweeptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_sweepcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_mergecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_additemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_buyitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_buycost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_enddown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_accountdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_funcionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_closefuncionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, m_festvialtype_),
  };
  E_DupGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupGroup_descriptor_,
      E_DupGroup::default_instance_,
      E_DupGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupGroup));
  Sheet_DupGroup_descriptor_ = file->message_type(10);
  static const int Sheet_DupGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupGroup, e_dupgroup_list_),
  };
  Sheet_DupGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupGroup_descriptor_,
      Sheet_DupGroup::default_instance_,
      Sheet_DupGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupGroup));
  E_DupSweepmonsternum_descriptor_ = file->message_type(11);
  static const int E_DupSweepmonsternum_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupSweepmonsternum, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupSweepmonsternum, m_sweepexptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupSweepmonsternum, m_minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupSweepmonsternum, m_maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupSweepmonsternum, m_killnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupSweepmonsternum, m_monstervaluetype_),
  };
  E_DupSweepmonsternum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupSweepmonsternum_descriptor_,
      E_DupSweepmonsternum::default_instance_,
      E_DupSweepmonsternum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupSweepmonsternum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupSweepmonsternum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupSweepmonsternum));
  Sheet_DupSweepmonsternum_descriptor_ = file->message_type(12);
  static const int Sheet_DupSweepmonsternum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupSweepmonsternum, e_dupsweepmonsternum_list_),
  };
  Sheet_DupSweepmonsternum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupSweepmonsternum_descriptor_,
      Sheet_DupSweepmonsternum::default_instance_,
      Sheet_DupSweepmonsternum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupSweepmonsternum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupSweepmonsternum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupSweepmonsternum));
  E_DupWorldlvreward_descriptor_ = file->message_type(13);
  static const int E_DupWorldlvreward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupWorldlvreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupWorldlvreward, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupWorldlvreward, m_lvtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupWorldlvreward, m_lvmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupWorldlvreward, m_failurebox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupWorldlvreward, m_box_),
  };
  E_DupWorldlvreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupWorldlvreward_descriptor_,
      E_DupWorldlvreward::default_instance_,
      E_DupWorldlvreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupWorldlvreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupWorldlvreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupWorldlvreward));
  Sheet_DupWorldlvreward_descriptor_ = file->message_type(14);
  static const int Sheet_DupWorldlvreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupWorldlvreward, e_dupworldlvreward_list_),
  };
  Sheet_DupWorldlvreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupWorldlvreward_descriptor_,
      Sheet_DupWorldlvreward::default_instance_,
      Sheet_DupWorldlvreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupWorldlvreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupWorldlvreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupWorldlvreward));
  E_DupPlanes_descriptor_ = file->message_type(15);
  static const int E_DupPlanes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupPlanes, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupPlanes, m_planestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupPlanes, m_typeargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupPlanes, m_areaid_),
  };
  E_DupPlanes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupPlanes_descriptor_,
      E_DupPlanes::default_instance_,
      E_DupPlanes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupPlanes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupPlanes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupPlanes));
  Sheet_DupPlanes_descriptor_ = file->message_type(16);
  static const int Sheet_DupPlanes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupPlanes, e_dupplanes_list_),
  };
  Sheet_DupPlanes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupPlanes_descriptor_,
      Sheet_DupPlanes::default_instance_,
      Sheet_DupPlanes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupPlanes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupPlanes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupPlanes));
  E_DupYt_dupClearDesc_descriptor_ = file->message_type(17);
  static const int E_DupYt_dupClearDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dupClearDesc, m_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dupClearDesc, m_time_),
  };
  E_DupYt_dupClearDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupYt_dupClearDesc_descriptor_,
      E_DupYt_dupClearDesc::default_instance_,
      E_DupYt_dupClearDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dupClearDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dupClearDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupYt_dupClearDesc));
  E_DupYt_dup_descriptor_ = file->message_type(18);
  static const int E_DupYt_dup_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_recommendlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_recommendyk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_firstpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_overlordbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_overlordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, m_clear_),
  };
  E_DupYt_dup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DupYt_dup_descriptor_,
      E_DupYt_dup::default_instance_,
      E_DupYt_dup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DupYt_dup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DupYt_dup));
  Sheet_DupYt_dup_descriptor_ = file->message_type(19);
  static const int Sheet_DupYt_dup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupYt_dup, e_dupyt_dup_list_),
  };
  Sheet_DupYt_dup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DupYt_dup_descriptor_,
      Sheet_DupYt_dup::default_instance_,
      Sheet_DupYt_dup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupYt_dup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DupYt_dup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DupYt_dup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fDup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupDup_descriptor_, &E_DupDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupDup_descriptor_, &Sheet_DupDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupBplevel_descriptor_, &E_DupBplevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupBplevel_descriptor_, &Sheet_DupBplevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupTtowerwaveClearDesc_descriptor_, &E_DupTtowerwaveClearDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupTtowerwave_descriptor_, &E_DupTtowerwave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupTtowerwave_descriptor_, &Sheet_DupTtowerwave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupTowerreward_descriptor_, &E_DupTowerreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupTowerreward_descriptor_, &Sheet_DupTowerreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupGroup_descriptor_, &E_DupGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupGroup_descriptor_, &Sheet_DupGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupSweepmonsternum_descriptor_, &E_DupSweepmonsternum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupSweepmonsternum_descriptor_, &Sheet_DupSweepmonsternum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupWorldlvreward_descriptor_, &E_DupWorldlvreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupWorldlvreward_descriptor_, &Sheet_DupWorldlvreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupPlanes_descriptor_, &E_DupPlanes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupPlanes_descriptor_, &Sheet_DupPlanes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupYt_dupClearDesc_descriptor_, &E_DupYt_dupClearDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DupYt_dup_descriptor_, &E_DupYt_dup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DupYt_dup_descriptor_, &Sheet_DupYt_dup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fDup_2eproto() {
  delete E_DupDup::default_instance_;
  delete E_DupDup_reflection_;
  delete Sheet_DupDup::default_instance_;
  delete Sheet_DupDup_reflection_;
  delete E_DupBplevel::default_instance_;
  delete E_DupBplevel_reflection_;
  delete Sheet_DupBplevel::default_instance_;
  delete Sheet_DupBplevel_reflection_;
  delete E_DupTtowerwaveClearDesc::default_instance_;
  delete E_DupTtowerwaveClearDesc_reflection_;
  delete E_DupTtowerwave::default_instance_;
  delete E_DupTtowerwave_reflection_;
  delete Sheet_DupTtowerwave::default_instance_;
  delete Sheet_DupTtowerwave_reflection_;
  delete E_DupTowerreward::default_instance_;
  delete E_DupTowerreward_reflection_;
  delete Sheet_DupTowerreward::default_instance_;
  delete Sheet_DupTowerreward_reflection_;
  delete E_DupGroup::default_instance_;
  delete E_DupGroup_reflection_;
  delete Sheet_DupGroup::default_instance_;
  delete Sheet_DupGroup_reflection_;
  delete E_DupSweepmonsternum::default_instance_;
  delete E_DupSweepmonsternum_reflection_;
  delete Sheet_DupSweepmonsternum::default_instance_;
  delete Sheet_DupSweepmonsternum_reflection_;
  delete E_DupWorldlvreward::default_instance_;
  delete E_DupWorldlvreward_reflection_;
  delete Sheet_DupWorldlvreward::default_instance_;
  delete Sheet_DupWorldlvreward_reflection_;
  delete E_DupPlanes::default_instance_;
  delete E_DupPlanes_reflection_;
  delete Sheet_DupPlanes::default_instance_;
  delete Sheet_DupPlanes_reflection_;
  delete E_DupYt_dupClearDesc::default_instance_;
  delete E_DupYt_dupClearDesc_reflection_;
  delete E_DupYt_dup::default_instance_;
  delete E_DupYt_dup_reflection_;
  delete Sheet_DupYt_dup::default_instance_;
  delete Sheet_DupYt_dup_reflection_;
}

void protobuf_AddDesc_E_5fDup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013E_Dup.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"\377\t\n\010E_DupDup\022\032\n\004m_ID\030\001 \001(\005B\014\302\377\024\010\345"
    "\211\257\346\234\254ID\022%\n\tm_scripID\030\002 \001(\005B\022\302\377\024\016\345\210\267\346\200\252\350\204"
    "\232\346\234\254ID\022+\n\013m_scripType\030\003 \001(\005B\026\302\377\024\022\345\210\267\346\200\252\350"
    "\204\232\346\234\254\347\261\273\345\236\213\022$\n\nm_dupLevel\030\004 \001(\005B\020\302\377\024\014\345\211\257"
    "\346\234\254\347\255\211\347\272\247\022.\n\016m_scripMonType\030\005 \001(\005B\026\302\377\024\022\350"
    "\204\232\346\234\254\346\200\252\347\211\251\347\261\273\345\236\213\022,\n\014m_scripMonID\030\006 \001(\tB"
    "\026\302\377\024\016\350\204\232\346\234\254\346\200\252\347\211\251id\220\301\024@\022(\n\tm_groupID\030\007 \001"
    "(\005B\025\302\377\024\021\346\211\200\345\261\236\345\211\257\346\234\254\347\273\204ID\022 \n\tm_subType\030\010"
    " \001(\005B\r\302\377\024\t\345\255\220\347\261\273\345\236\213\022\033\n\007m_layer\030\t \001(\005B\n\302\377"
    "\024\006\345\261\202\347\272\247\022*\n\020m_recommendPower\030\n \001(\005B\020\302\377\024\014"
    "\346\216\250\350\215\220\346\210\230\345\212\233\022/\n\017m_duplicateType\030\013 \001(\005B\026\302"
    "\377\024\022\345\211\257\346\234\254\345\206\205\345\256\271\347\261\273\345\236\213\022\035\n\007m_mapID\030\014 \001(\003B\014"
    "\302\377\024\010\345\234\272\346\231\257ID\022,\n\014m_levelLimit\030\r \001(\005B\026\302\377\024\022"
    "\347\255\211\347\272\247\350\246\201\346\261\202\344\270\213\351\231\220\0222\n\014m_functionID\030\016 \001(\005"
    "B\034\302\377\024\030\351\242\235\345\244\226\345\212\237\350\203\275\345\274\200\346\224\276\350\246\201\346\261\202\022%\n\005m_pre\030"
    "\017 \001(\005B\026\302\377\024\022\345\211\215\347\275\256\345\211\257\346\234\254\350\246\201\346\261\202\0223\n\rm_isAut"
    "oFight\030\020 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\345\205\201\350\256\270\350\207\252\345\212\250\346\210\230\346"
    "\226\227\0225\n\013m_condition\030\021 \001(\tB \302\377\024\030\345\211\257\346\234\254\350\203\234\345\210"
    "\251\346\235\241\344\273\266\347\261\273\345\236\213\220\301\024@\0220\n\020m_reviveMaxTimes\030\022 "
    "\001(\005B\026\302\377\024\022\345\244\215\346\264\273\346\254\241\346\225\260\344\270\212\351\231\220\022*\n\016m_TeamObj"
    "ectID\030\023 \001(\005B\022\302\377\024\016\347\273\204\351\230\237\347\233\256\346\240\207ID\022.\n\020m_gra"
    "deCondition\030\024 \001(\tB\024\302\377\024\014\346\230\237\347\272\247\346\227\266\351\227\264\220\301\024@\022"
    "1\n\022m_sweepRewardBoxID\030\025 \001(\003B\025\302\377\024\021\346\211\253\350\215\241\345"
    "\245\226\345\212\261BOXID\0220\n\020m_sweepRewardExp\030\026 \001(\005B\026\302\377"
    "\024\022\346\211\253\350\215\241\347\273\217\351\252\214\345\245\226\345\212\261\022.\n\016m_sweepExpType\030\027"
    " \001(\005B\026\302\377\024\022\346\211\253\350\215\241\347\273\217\351\252\214\347\261\273\345\236\213\022-\n\014m_trackp"
    "oint\030\030 \001(\tB\027\302\377\024\017\345\211\257\346\234\254\345\257\273\350\267\257\347\202\271\220\301\024@\022<\n\017m"
    "_pathOfmonster\030\031 \001(\tB#\302\377\024\033\345\211\257\346\234\254\345\257\273\350\267\257\347\202"
    "\271\345\257\271\345\272\224\346\200\252\347\211\251\220\301\024@\022-\n\nm_isPatrol\030\032 \001(\005B\031\302"
    "\377\024\025\345\257\273\350\267\257\345\211\215\346\230\257\345\220\246\345\267\241\346\225\214\022&\n\014m_failureBox"
    "\030\033 \001(\005B\020\302\377\024\014\345\244\261\350\264\245\345\245\226\345\212\261\022\034\n\010m_planes\030\034 \001"
    "(\005B\n\302\377\024\006\344\275\215\351\235\242\022 \n\005m_box\030\035 \003(\005B\021\302\377\024\t\345\245\226\345\212"
    "\261\347\273\204\210\301\024\003\"@\n\014Sheet_DupDup\0220\n\rE_DupDup_Lis"
    "t\030\001 \003(\0132\022.proto_ff.E_DupDupB\005\210\301\024\200\020\"u\n\014E_"
    "DupBplevel\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\"\n\007"
    "m_Bgdup\030\002 \003(\003B\021\302\377\024\t\345\205\253\345\215\246\346\234\254\210\301\024\005\022\'\n\014m_Bg"
    "dupSweep\030\003 \003(\003B\021\302\377\024\t\345\205\253\345\215\246\346\234\254\210\301\024\005\"L\n\020She"
    "et_DupBplevel\0228\n\021E_DupBplevel_List\030\001 \003(\013"
    "2\026.proto_ff.E_DupBplevelB\005\210\301\024\200\020\"W\n\030E_Dup"
    "TtowerwaveClearDesc\022\037\n\005m_add\030\001 \001(\005B\020\302\377\024\014"
    "\345\242\236\345\212\240\345\205\263\346\225\260\022\032\n\006m_time\030\002 \001(\005B\n\302\377\024\006\346\227\266\351\227\264"
    "\"\216\004\n\017E_DupTtowerwave\022\027\n\004m_id\030\001 \001(\005B\t\302\377\024\005"
    "\346\263\242id\022%\n\tm_scripID\030\002 \001(\005B\022\302\377\024\016\345\210\267\346\200\252\350\204\232\346"
    "\234\254ID\022.\n\nm_scripGid\030\003 \001(\tB\032\302\377\024\022\345\210\267\346\200\252\350\204\232\346"
    "\234\254\347\261\273\345\236\213\220\301\024@\022+\n\013m_scripType\030\004 \001(\005B\026\302\377\024\022\345"
    "\210\267\346\200\252\350\204\232\346\234\254\347\261\273\345\236\213\022$\n\nm_dupLevel\030\005 \001(\005B\020\302"
    "\377\024\014\345\211\257\346\234\254\347\255\211\347\272\247\022.\n\016m_scripMonType\030\006 \001(\005B"
    "\026\302\377\024\022\350\204\232\346\234\254\346\200\252\347\211\251\347\261\273\345\236\213\022,\n\014m_scripMonID\030"
    "\007 \001(\tB\026\302\377\024\016\350\204\232\346\234\254\346\200\252\347\211\251id\220\301\024@\022*\n\020m_recom"
    "mendPower\030\010 \001(\005B\020\302\377\024\014\346\216\250\350\215\220\346\210\230\345\212\233\022\"\n\010m_r"
    "eward\030\t \001(\005B\020\302\377\024\014\347\273\223\347\256\227\345\245\226\345\212\261\022%\n\013m_first"
    "Pass\030\n \001(\005B\020\302\377\024\014\351\246\226\351\200\232\345\245\226\345\212\261\022\036\n\004m_BP\030\013 \001"
    "(\005B\020\302\377\024\014\345\271\263\345\235\207\346\210\230\345\212\233\022C\n\007m_clear\030\014 \003(\0132\"."
    "proto_ff.E_DupTtowerwaveClearDescB\016\302\377\024\006\351"
    "\200\232\345\205\263\210\301\024\004\"U\n\023Sheet_DupTtowerwave\022>\n\024E_Du"
    "pTtowerwave_List\030\001 \003(\0132\031.proto_ff.E_DupT"
    "towerwaveB\005\210\301\024\200\010\"\200\001\n\020E_DupTowerreward\022\024\n"
    "\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024"
    "\006\347\261\273\345\236\213\022 \n\006m_cond\030\003 \001(\005B\020\302\377\024\014\351\242\206\345\217\226\346\235\241\344\273"
    "\266\022\030\n\007m_boxID\030\004 \001(\005B\007\302\377\024\003box\"X\n\024Sheet_Dup"
    "Towerreward\022@\n\025E_DupTowerreward_List\030\001 \003"
    "(\0132\032.proto_ff.E_DupTowerrewardB\005\210\301\024\200\002\"\307\007"
    "\n\nE_DupGroup\022\035\n\004m_id\030\001 \001(\005B\017\302\377\024\013\345\211\257\346\234\254\347\273"
    "\204ID\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\345\211\257\346\234\254\347\273\204\345\220\215\220\301\024"
    "@\022)\n\017m_privilegeType\030\003 \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\261"
    "\273\345\236\213\022.\n\016m_dynamiclevel\030\004 \001(\005B\026\302\377\024\022\346\230\257\345\220\246"
    "\345\212\250\346\200\201\347\255\211\347\272\247\022-\n\020m_groupTimesType\030\005 \001(\005B\023"
    "\302\377\024\017\347\273\204\346\254\241\346\225\260\347\261\273\345\236\213\022&\n\014m_resetCycle\030\006 \001("
    "\005B\020\302\377\024\014\351\207\215\347\275\256\345\221\250\346\234\237\022)\n\014m_groupTimes\030\007 \001("
    "\005B\023\302\377\024\017\346\254\241\346\225\260\344\270\212\351\231\220\345\200\274\022-\n\rm_enterItemID\030"
    "\010 \001(\005B\026\302\377\024\022\345\211\257\346\234\254\350\277\233\345\205\245\351\201\223\345\205\267\022%\n\013m_sweep"
    "Type\030\t \001(\005B\020\302\377\024\014\346\211\253\350\215\241\347\261\273\345\236\213\022*\n\020m_sweepC"
    "ondition\030\n \001(\005B\020\302\377\024\014\346\211\253\350\215\241\346\235\241\344\273\266\022*\n\020m_me"
    "rgeCondition\030\013 \001(\005B\020\302\377\024\014\345\220\210\345\271\266\346\235\241\344\273\266\022-\n\013"
    "m_addItemID\030\014 \001(\005B\030\302\377\024\024\345\242\236\345\212\240\346\254\241\346\225\260\347\211\251\345\223"
    "\201ID\022/\n\tm_buyType\030\r \001(\005B\034\302\377\024\030\350\264\255\344\271\260\346\254\241\346\225\260"
    "\346\266\210\350\200\227\350\264\247\345\270\201\0221\n\013m_buyItemId\030\016 \001(\005B\034\302\377\024\030\350"
    "\264\255\344\271\260\346\254\241\346\225\260\346\266\210\350\200\227\347\211\251\345\223\201\0223\n\tm_buyCost\030\017 \001"
    "(\tB \302\377\024\030\350\264\255\344\271\260\350\277\233\345\205\245\346\254\241\346\225\260\346\266\210\350\200\227\220\301\024@\022(\n\013"
    "m_countDown\030\020 \001(\005B\023\302\377\024\017\345\200\222\350\256\241\346\227\266\346\227\266\351\227\264\022&"
    "\n\tm_endDown\030\021 \001(\005B\023\302\377\024\017\347\273\223\346\235\237\345\200\222\350\256\241\346\227\266\022*"
    "\n\rm_accountDown\030\022 \001(\005B\023\302\377\024\017\347\273\223\347\256\227\345\200\222\350\256\241\346"
    "\227\266\022!\n\013m_funcionID\030\023 \001(\005B\014\302\377\024\010\345\212\237\350\203\275ID\022,\n"
    "\020m_closeFuncionID\030\024 \001(\005B\022\302\377\024\016\345\205\263\351\227\255\345\212\237\350\203"
    "\275ID\022,\n\006m_link\030\025 \001(\003B\034\302\377\024\030\345\211\257\346\234\254\347\273\223\346\235\237\346\211\223"
    "\345\274\200\347\225\214\351\235\242\022$\n\016m_festvialType\030\026 \001(\005B\014\302\377\024\010\346"
    "\264\273\345\212\250id\"E\n\016Sheet_DupGroup\0223\n\017E_DupGroup_"
    "List\030\001 \003(\0132\024.proto_ff.E_DupGroupB\004\210\301\024@\"\220"
    "\002\n\024E_DupSweepmonsternum\022\024\n\004m_ID\030\001 \001(\005B\006\302"
    "\377\024\002ID\022(\n\016m_sweepExpType\030\002 \001(\005B\020\302\377\024\014\346\211\253\350\215"
    "\241\347\261\273\345\236\213\022*\n\nm_minLevel\030\003 \001(\005B\026\302\377\024\022\347\216\251\345\256\266\347"
    "\255\211\346\236\201\344\270\213\351\231\220\022*\n\nm_maxLevel\030\004 \001(\005B\026\302\377\024\022\347\216\251"
    "\345\256\266\347\255\211\346\236\201\344\270\212\351\231\220\022,\n\014m_killNumber\030\005 \001(\005B\026\302"
    "\377\024\022\346\235\200\346\200\252\346\240\207\345\207\206\346\225\260\351\207\217\0222\n\022m_monstervaluet"
    "ype\030\006 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\346\225\260\345\200\274\347\261\273\345\236\213\"c\n\030She"
    "et_DupSweepmonsternum\022G\n\031E_DupSweepmonst"
    "ernum_List\030\001 \003(\0132\036.proto_ff.E_DupSweepmo"
    "nsternumB\004\210\301\024@\"\353\001\n\022E_DupWorldlvreward\022\024\n"
    "\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\tm_groupID\030\002 \001(\005B\017"
    "\302\377\024\013\345\211\257\346\234\254\347\273\204id\022(\n\010m_lvtype\030\003 \001(\005B\026\302\377\024\022\344"
    "\270\226\347\225\214\347\255\211\347\272\247\347\261\273\345\236\213\022\'\n\007m_lvMin\030\004 \001(\005B\026\302\377\024\022"
    "\344\270\226\347\225\214\347\255\211\347\272\247\344\270\213\351\231\220\022&\n\014m_failureBox\030\005 \001(\005"
    "B\020\302\377\024\014\345\244\261\350\264\245\345\245\226\345\212\261\022 \n\005m_box\030\006 \003(\005B\021\302\377\024\t\346"
    "\230\237\345\245\226\345\212\261\210\301\024\003\"]\n\026Sheet_DupWorldlvreward\022C"
    "\n\027E_DupWorldlvreward_List\030\001 \003(\0132\034.proto_"
    "ff.E_DupWorldlvrewardB\004\210\301\024 \"\233\001\n\013E_DupPla"
    "nes\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\344\275\215\351\235\242id\022&\n\014m_pla"
    "nesType\030\002 \001(\005B\020\302\377\024\014\344\275\215\351\235\242\347\261\273\345\236\213\022(\n\nm_typ"
    "eArgs\030\003 \001(\tB\024\302\377\024\014\347\261\273\345\236\213\345\217\202\346\225\260\220\301\024@\022\036\n\010m_a"
    "reaId\030\004 \001(\005B\014\302\377\024\010\345\214\272\345\237\237id\"H\n\017Sheet_DupPl"
    "anes\0225\n\020E_DupPlanes_List\030\001 \003(\0132\025.proto_f"
    "f.E_DupPlanesB\004\210\301\024@\"S\n\024E_DupYt_dupClearD"
    "esc\022\037\n\005m_add\030\001 \001(\005B\020\302\377\024\014\345\242\236\345\212\240\345\205\263\346\225\260\022\032\n\006"
    "m_time\030\002 \001(\005B\n\302\377\024\006\346\227\266\351\227\264\"\240\003\n\013E_DupYt_dup"
    "\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\211\257\346\234\254id\022!\n\007m_layer\030"
    "\002 \001(\005B\020\302\377\024\014\346\211\200\345\261\236\345\261\202\347\272\247\022!\n\007m_stage\030\003 \001(\005"
    "B\020\302\377\024\014\345\205\263\345\215\241\347\255\211\347\272\247\022\'\n\rm_recommendLv\030\004 \001("
    "\005B\020\302\377\024\014\346\216\250\350\215\220\347\255\211\347\272\247\022\'\n\rm_recommendYK\030\005 \001"
    "(\005B\020\302\377\024\014\346\216\250\350\215\220\345\246\226\346\212\227\022\"\n\010m_reward\030\006 \001(\005B\020"
    "\302\377\024\014\347\273\223\347\256\227\345\245\226\345\212\261\022%\n\013m_firstPass\030\007 \001(\005B\020\302"
    "\377\024\014\351\246\226\351\200\232\345\245\226\345\212\261\022\'\n\rm_overlordBox\030\010 \001(\005B\020"
    "\302\377\024\014\351\234\270\344\270\273\345\245\226\345\212\261\022(\n\016m_overlordTime\030\t \001(\005"
    "B\020\302\377\024\014\351\234\270\344\270\273\346\227\266\351\227\264\022\?\n\007m_clear\030\n \003(\0132\036.pr"
    "oto_ff.E_DupYt_dupClearDescB\016\302\377\024\006\351\200\232\345\205\263\210"
    "\301\024\004\"I\n\017Sheet_DupYt_dup\0226\n\020E_DupYt_dup_Li"
    "st\030\001 \003(\0132\025.proto_ff.E_DupYt_dupB\005\210\301\024\200\010", 5078);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Dup.proto", &protobuf_RegisterTypes);
  E_DupDup::default_instance_ = new E_DupDup();
  Sheet_DupDup::default_instance_ = new Sheet_DupDup();
  E_DupBplevel::default_instance_ = new E_DupBplevel();
  Sheet_DupBplevel::default_instance_ = new Sheet_DupBplevel();
  E_DupTtowerwaveClearDesc::default_instance_ = new E_DupTtowerwaveClearDesc();
  E_DupTtowerwave::default_instance_ = new E_DupTtowerwave();
  Sheet_DupTtowerwave::default_instance_ = new Sheet_DupTtowerwave();
  E_DupTowerreward::default_instance_ = new E_DupTowerreward();
  Sheet_DupTowerreward::default_instance_ = new Sheet_DupTowerreward();
  E_DupGroup::default_instance_ = new E_DupGroup();
  Sheet_DupGroup::default_instance_ = new Sheet_DupGroup();
  E_DupSweepmonsternum::default_instance_ = new E_DupSweepmonsternum();
  Sheet_DupSweepmonsternum::default_instance_ = new Sheet_DupSweepmonsternum();
  E_DupWorldlvreward::default_instance_ = new E_DupWorldlvreward();
  Sheet_DupWorldlvreward::default_instance_ = new Sheet_DupWorldlvreward();
  E_DupPlanes::default_instance_ = new E_DupPlanes();
  Sheet_DupPlanes::default_instance_ = new Sheet_DupPlanes();
  E_DupYt_dupClearDesc::default_instance_ = new E_DupYt_dupClearDesc();
  E_DupYt_dup::default_instance_ = new E_DupYt_dup();
  Sheet_DupYt_dup::default_instance_ = new Sheet_DupYt_dup();
  E_DupDup::default_instance_->InitAsDefaultInstance();
  Sheet_DupDup::default_instance_->InitAsDefaultInstance();
  E_DupBplevel::default_instance_->InitAsDefaultInstance();
  Sheet_DupBplevel::default_instance_->InitAsDefaultInstance();
  E_DupTtowerwaveClearDesc::default_instance_->InitAsDefaultInstance();
  E_DupTtowerwave::default_instance_->InitAsDefaultInstance();
  Sheet_DupTtowerwave::default_instance_->InitAsDefaultInstance();
  E_DupTowerreward::default_instance_->InitAsDefaultInstance();
  Sheet_DupTowerreward::default_instance_->InitAsDefaultInstance();
  E_DupGroup::default_instance_->InitAsDefaultInstance();
  Sheet_DupGroup::default_instance_->InitAsDefaultInstance();
  E_DupSweepmonsternum::default_instance_->InitAsDefaultInstance();
  Sheet_DupSweepmonsternum::default_instance_->InitAsDefaultInstance();
  E_DupWorldlvreward::default_instance_->InitAsDefaultInstance();
  Sheet_DupWorldlvreward::default_instance_->InitAsDefaultInstance();
  E_DupPlanes::default_instance_->InitAsDefaultInstance();
  Sheet_DupPlanes::default_instance_->InitAsDefaultInstance();
  E_DupYt_dupClearDesc::default_instance_->InitAsDefaultInstance();
  E_DupYt_dup::default_instance_->InitAsDefaultInstance();
  Sheet_DupYt_dup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fDup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fDup_2eproto {
  StaticDescriptorInitializer_E_5fDup_2eproto() {
    protobuf_AddDesc_E_5fDup_2eproto();
  }
} static_descriptor_initializer_E_5fDup_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_DupDup::kMIDFieldNumber;
const int E_DupDup::kMScripIDFieldNumber;
const int E_DupDup::kMScripTypeFieldNumber;
const int E_DupDup::kMDupLevelFieldNumber;
const int E_DupDup::kMScripMonTypeFieldNumber;
const int E_DupDup::kMScripMonIDFieldNumber;
const int E_DupDup::kMGroupIDFieldNumber;
const int E_DupDup::kMSubTypeFieldNumber;
const int E_DupDup::kMLayerFieldNumber;
const int E_DupDup::kMRecommendPowerFieldNumber;
const int E_DupDup::kMDuplicateTypeFieldNumber;
const int E_DupDup::kMMapIDFieldNumber;
const int E_DupDup::kMLevelLimitFieldNumber;
const int E_DupDup::kMFunctionIDFieldNumber;
const int E_DupDup::kMPreFieldNumber;
const int E_DupDup::kMIsAutoFightFieldNumber;
const int E_DupDup::kMConditionFieldNumber;
const int E_DupDup::kMReviveMaxTimesFieldNumber;
const int E_DupDup::kMTeamObjectIDFieldNumber;
const int E_DupDup::kMGradeConditionFieldNumber;
const int E_DupDup::kMSweepRewardBoxIDFieldNumber;
const int E_DupDup::kMSweepRewardExpFieldNumber;
const int E_DupDup::kMSweepExpTypeFieldNumber;
const int E_DupDup::kMTrackpointFieldNumber;
const int E_DupDup::kMPathOfmonsterFieldNumber;
const int E_DupDup::kMIsPatrolFieldNumber;
const int E_DupDup::kMFailureBoxFieldNumber;
const int E_DupDup::kMPlanesFieldNumber;
const int E_DupDup::kMBoxFieldNumber;
#endif  // !_MSC_VER

E_DupDup::E_DupDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupDup::InitAsDefaultInstance() {
}

E_DupDup::E_DupDup(const E_DupDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupDup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_scripid_ = 0;
  m_scriptype_ = 0;
  m_duplevel_ = 0;
  m_scripmontype_ = 0;
  m_scripmonid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_groupid_ = 0;
  m_subtype_ = 0;
  m_layer_ = 0;
  m_recommendpower_ = 0;
  m_duplicatetype_ = 0;
  m_mapid_ = GOOGLE_LONGLONG(0);
  m_levellimit_ = 0;
  m_functionid_ = 0;
  m_pre_ = 0;
  m_isautofight_ = 0;
  m_condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_revivemaxtimes_ = 0;
  m_teamobjectid_ = 0;
  m_gradecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sweeprewardboxid_ = GOOGLE_LONGLONG(0);
  m_sweeprewardexp_ = 0;
  m_sweepexptype_ = 0;
  m_trackpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_pathofmonster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_ispatrol_ = 0;
  m_failurebox_ = 0;
  m_planes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupDup::~E_DupDup() {
  SharedDtor();
}

void E_DupDup::SharedDtor() {
  if (m_scripmonid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_scripmonid_;
  }
  if (m_condition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_condition_;
  }
  if (m_gradecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gradecondition_;
  }
  if (m_trackpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete m_trackpoint_;
  }
  if (m_pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pathofmonster_;
  }
  if (this != default_instance_) {
  }
}

void E_DupDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupDup_descriptor_;
}

const E_DupDup& E_DupDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupDup* E_DupDup::default_instance_ = NULL;

E_DupDup* E_DupDup::New() const {
  return new E_DupDup;
}

void E_DupDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_scripid_ = 0;
    m_scriptype_ = 0;
    m_duplevel_ = 0;
    m_scripmontype_ = 0;
    if (has_m_scripmonid()) {
      if (m_scripmonid_ != &::google::protobuf::internal::kEmptyString) {
        m_scripmonid_->clear();
      }
    }
    m_groupid_ = 0;
    m_subtype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_layer_ = 0;
    m_recommendpower_ = 0;
    m_duplicatetype_ = 0;
    m_mapid_ = GOOGLE_LONGLONG(0);
    m_levellimit_ = 0;
    m_functionid_ = 0;
    m_pre_ = 0;
    m_isautofight_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_m_condition()) {
      if (m_condition_ != &::google::protobuf::internal::kEmptyString) {
        m_condition_->clear();
      }
    }
    m_revivemaxtimes_ = 0;
    m_teamobjectid_ = 0;
    if (has_m_gradecondition()) {
      if (m_gradecondition_ != &::google::protobuf::internal::kEmptyString) {
        m_gradecondition_->clear();
      }
    }
    m_sweeprewardboxid_ = GOOGLE_LONGLONG(0);
    m_sweeprewardexp_ = 0;
    m_sweepexptype_ = 0;
    if (has_m_trackpoint()) {
      if (m_trackpoint_ != &::google::protobuf::internal::kEmptyString) {
        m_trackpoint_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_m_pathofmonster()) {
      if (m_pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
        m_pathofmonster_->clear();
      }
    }
    m_ispatrol_ = 0;
    m_failurebox_ = 0;
    m_planes_ = 0;
  }
  m_box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_scripID;
        break;
      }

      // optional int32 m_scripID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scripID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scripid_)));
          set_has_m_scripid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_scripType;
        break;
      }

      // optional int32 m_scripType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scripType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scriptype_)));
          set_has_m_scriptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_dupLevel;
        break;
      }

      // optional int32 m_dupLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dupLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_duplevel_)));
          set_has_m_duplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_scripMonType;
        break;
      }

      // optional int32 m_scripMonType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scripMonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scripmontype_)));
          set_has_m_scripmontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_scripMonID;
        break;
      }

      // optional string m_scripMonID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_scripMonID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_scripmonid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_scripmonid().data(), this->m_scripmonid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_groupID;
        break;
      }

      // optional int32 m_groupID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_subType;
        break;
      }

      // optional int32 m_subType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subtype_)));
          set_has_m_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_layer;
        break;
      }

      // optional int32 m_layer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_layer_)));
          set_has_m_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_recommendPower;
        break;
      }

      // optional int32 m_recommendPower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recommendPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_recommendpower_)));
          set_has_m_recommendpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_duplicateType;
        break;
      }

      // optional int32 m_duplicateType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_duplicateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_duplicatetype_)));
          set_has_m_duplicatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_mapID;
        break;
      }

      // optional int64 m_mapID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mapid_)));
          set_has_m_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_levelLimit;
        break;
      }

      // optional int32 m_levelLimit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_levelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_levellimit_)));
          set_has_m_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_functionID;
        break;
      }

      // optional int32 m_functionID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionid_)));
          set_has_m_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_pre;
        break;
      }

      // optional int32 m_pre = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pre_)));
          set_has_m_pre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_isAutoFight;
        break;
      }

      // optional int32 m_isAutoFight = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isAutoFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isautofight_)));
          set_has_m_isautofight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_condition;
        break;
      }

      // optional string m_condition = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_condition().data(), this->m_condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_reviveMaxTimes;
        break;
      }

      // optional int32 m_reviveMaxTimes = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reviveMaxTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_revivemaxtimes_)));
          set_has_m_revivemaxtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_TeamObjectID;
        break;
      }

      // optional int32 m_TeamObjectID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_TeamObjectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_teamobjectid_)));
          set_has_m_teamobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_m_gradeCondition;
        break;
      }

      // optional string m_gradeCondition = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gradeCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gradecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gradecondition().data(), this->m_gradecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_sweepRewardBoxID;
        break;
      }

      // optional int64 m_sweepRewardBoxID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweepRewardBoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_sweeprewardboxid_)));
          set_has_m_sweeprewardboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_sweepRewardExp;
        break;
      }

      // optional int32 m_sweepRewardExp = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweepRewardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweeprewardexp_)));
          set_has_m_sweeprewardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_sweepExpType;
        break;
      }

      // optional int32 m_sweepExpType = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweepExpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweepexptype_)));
          set_has_m_sweepexptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_m_trackpoint;
        break;
      }

      // optional string m_trackpoint = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_trackpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_trackpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_trackpoint().data(), this->m_trackpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_m_pathOfmonster;
        break;
      }

      // optional string m_pathOfmonster = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pathOfmonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_pathofmonster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_pathofmonster().data(), this->m_pathofmonster().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_isPatrol;
        break;
      }

      // optional int32 m_isPatrol = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isPatrol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ispatrol_)));
          set_has_m_ispatrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_failureBox;
        break;
      }

      // optional int32 m_failureBox = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_failureBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_failurebox_)));
          set_has_m_failurebox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_planes;
        break;
      }

      // optional int32 m_planes = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_planes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_planes_)));
          set_has_m_planes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_box;
        break;
      }

      // repeated int32 m_box = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 232, input, this->mutable_m_box())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_box())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_box;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_scripID = 2;
  if (has_m_scripid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_scripid(), output);
  }

  // optional int32 m_scripType = 3;
  if (has_m_scriptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_scriptype(), output);
  }

  // optional int32 m_dupLevel = 4;
  if (has_m_duplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_duplevel(), output);
  }

  // optional int32 m_scripMonType = 5;
  if (has_m_scripmontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_scripmontype(), output);
  }

  // optional string m_scripMonID = 6;
  if (has_m_scripmonid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_scripmonid().data(), this->m_scripmonid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_scripmonid(), output);
  }

  // optional int32 m_groupID = 7;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_groupid(), output);
  }

  // optional int32 m_subType = 8;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_subtype(), output);
  }

  // optional int32 m_layer = 9;
  if (has_m_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_layer(), output);
  }

  // optional int32 m_recommendPower = 10;
  if (has_m_recommendpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_recommendpower(), output);
  }

  // optional int32 m_duplicateType = 11;
  if (has_m_duplicatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_duplicatetype(), output);
  }

  // optional int64 m_mapID = 12;
  if (has_m_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->m_mapid(), output);
  }

  // optional int32 m_levelLimit = 13;
  if (has_m_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_levellimit(), output);
  }

  // optional int32 m_functionID = 14;
  if (has_m_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_functionid(), output);
  }

  // optional int32 m_pre = 15;
  if (has_m_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_pre(), output);
  }

  // optional int32 m_isAutoFight = 16;
  if (has_m_isautofight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_isautofight(), output);
  }

  // optional string m_condition = 17;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_condition().data(), this->m_condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->m_condition(), output);
  }

  // optional int32 m_reviveMaxTimes = 18;
  if (has_m_revivemaxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_revivemaxtimes(), output);
  }

  // optional int32 m_TeamObjectID = 19;
  if (has_m_teamobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_teamobjectid(), output);
  }

  // optional string m_gradeCondition = 20;
  if (has_m_gradecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gradecondition().data(), this->m_gradecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->m_gradecondition(), output);
  }

  // optional int64 m_sweepRewardBoxID = 21;
  if (has_m_sweeprewardboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->m_sweeprewardboxid(), output);
  }

  // optional int32 m_sweepRewardExp = 22;
  if (has_m_sweeprewardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_sweeprewardexp(), output);
  }

  // optional int32 m_sweepExpType = 23;
  if (has_m_sweepexptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_sweepexptype(), output);
  }

  // optional string m_trackpoint = 24;
  if (has_m_trackpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_trackpoint().data(), this->m_trackpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->m_trackpoint(), output);
  }

  // optional string m_pathOfmonster = 25;
  if (has_m_pathofmonster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pathofmonster().data(), this->m_pathofmonster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->m_pathofmonster(), output);
  }

  // optional int32 m_isPatrol = 26;
  if (has_m_ispatrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_ispatrol(), output);
  }

  // optional int32 m_failureBox = 27;
  if (has_m_failurebox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_failurebox(), output);
  }

  // optional int32 m_planes = 28;
  if (has_m_planes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->m_planes(), output);
  }

  // repeated int32 m_box = 29;
  for (int i = 0; i < this->m_box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      29, this->m_box(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_scripID = 2;
  if (has_m_scripid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_scripid(), target);
  }

  // optional int32 m_scripType = 3;
  if (has_m_scriptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_scriptype(), target);
  }

  // optional int32 m_dupLevel = 4;
  if (has_m_duplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_duplevel(), target);
  }

  // optional int32 m_scripMonType = 5;
  if (has_m_scripmontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_scripmontype(), target);
  }

  // optional string m_scripMonID = 6;
  if (has_m_scripmonid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_scripmonid().data(), this->m_scripmonid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_scripmonid(), target);
  }

  // optional int32 m_groupID = 7;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_groupid(), target);
  }

  // optional int32 m_subType = 8;
  if (has_m_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_subtype(), target);
  }

  // optional int32 m_layer = 9;
  if (has_m_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_layer(), target);
  }

  // optional int32 m_recommendPower = 10;
  if (has_m_recommendpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_recommendpower(), target);
  }

  // optional int32 m_duplicateType = 11;
  if (has_m_duplicatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_duplicatetype(), target);
  }

  // optional int64 m_mapID = 12;
  if (has_m_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->m_mapid(), target);
  }

  // optional int32 m_levelLimit = 13;
  if (has_m_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_levellimit(), target);
  }

  // optional int32 m_functionID = 14;
  if (has_m_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_functionid(), target);
  }

  // optional int32 m_pre = 15;
  if (has_m_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_pre(), target);
  }

  // optional int32 m_isAutoFight = 16;
  if (has_m_isautofight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_isautofight(), target);
  }

  // optional string m_condition = 17;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_condition().data(), this->m_condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->m_condition(), target);
  }

  // optional int32 m_reviveMaxTimes = 18;
  if (has_m_revivemaxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_revivemaxtimes(), target);
  }

  // optional int32 m_TeamObjectID = 19;
  if (has_m_teamobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_teamobjectid(), target);
  }

  // optional string m_gradeCondition = 20;
  if (has_m_gradecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gradecondition().data(), this->m_gradecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->m_gradecondition(), target);
  }

  // optional int64 m_sweepRewardBoxID = 21;
  if (has_m_sweeprewardboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->m_sweeprewardboxid(), target);
  }

  // optional int32 m_sweepRewardExp = 22;
  if (has_m_sweeprewardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_sweeprewardexp(), target);
  }

  // optional int32 m_sweepExpType = 23;
  if (has_m_sweepexptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_sweepexptype(), target);
  }

  // optional string m_trackpoint = 24;
  if (has_m_trackpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_trackpoint().data(), this->m_trackpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->m_trackpoint(), target);
  }

  // optional string m_pathOfmonster = 25;
  if (has_m_pathofmonster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pathofmonster().data(), this->m_pathofmonster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->m_pathofmonster(), target);
  }

  // optional int32 m_isPatrol = 26;
  if (has_m_ispatrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_ispatrol(), target);
  }

  // optional int32 m_failureBox = 27;
  if (has_m_failurebox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->m_failurebox(), target);
  }

  // optional int32 m_planes = 28;
  if (has_m_planes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->m_planes(), target);
  }

  // repeated int32 m_box = 29;
  for (int i = 0; i < this->m_box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(29, this->m_box(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupDup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_scripID = 2;
    if (has_m_scripid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scripid());
    }

    // optional int32 m_scripType = 3;
    if (has_m_scriptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scriptype());
    }

    // optional int32 m_dupLevel = 4;
    if (has_m_duplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_duplevel());
    }

    // optional int32 m_scripMonType = 5;
    if (has_m_scripmontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scripmontype());
    }

    // optional string m_scripMonID = 6;
    if (has_m_scripmonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_scripmonid());
    }

    // optional int32 m_groupID = 7;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_subType = 8;
    if (has_m_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_layer = 9;
    if (has_m_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_layer());
    }

    // optional int32 m_recommendPower = 10;
    if (has_m_recommendpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_recommendpower());
    }

    // optional int32 m_duplicateType = 11;
    if (has_m_duplicatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_duplicatetype());
    }

    // optional int64 m_mapID = 12;
    if (has_m_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mapid());
    }

    // optional int32 m_levelLimit = 13;
    if (has_m_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_levellimit());
    }

    // optional int32 m_functionID = 14;
    if (has_m_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionid());
    }

    // optional int32 m_pre = 15;
    if (has_m_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pre());
    }

    // optional int32 m_isAutoFight = 16;
    if (has_m_isautofight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isautofight());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string m_condition = 17;
    if (has_m_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_condition());
    }

    // optional int32 m_reviveMaxTimes = 18;
    if (has_m_revivemaxtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_revivemaxtimes());
    }

    // optional int32 m_TeamObjectID = 19;
    if (has_m_teamobjectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_teamobjectid());
    }

    // optional string m_gradeCondition = 20;
    if (has_m_gradecondition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gradecondition());
    }

    // optional int64 m_sweepRewardBoxID = 21;
    if (has_m_sweeprewardboxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_sweeprewardboxid());
    }

    // optional int32 m_sweepRewardExp = 22;
    if (has_m_sweeprewardexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweeprewardexp());
    }

    // optional int32 m_sweepExpType = 23;
    if (has_m_sweepexptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweepexptype());
    }

    // optional string m_trackpoint = 24;
    if (has_m_trackpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_trackpoint());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string m_pathOfmonster = 25;
    if (has_m_pathofmonster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_pathofmonster());
    }

    // optional int32 m_isPatrol = 26;
    if (has_m_ispatrol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ispatrol());
    }

    // optional int32 m_failureBox = 27;
    if (has_m_failurebox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_failurebox());
    }

    // optional int32 m_planes = 28;
    if (has_m_planes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_planes());
    }

  }
  // repeated int32 m_box = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_box_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_box(i));
    }
    total_size += 2 * this->m_box_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupDup::MergeFrom(const E_DupDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_box_.MergeFrom(from.m_box_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_scripid()) {
      set_m_scripid(from.m_scripid());
    }
    if (from.has_m_scriptype()) {
      set_m_scriptype(from.m_scriptype());
    }
    if (from.has_m_duplevel()) {
      set_m_duplevel(from.m_duplevel());
    }
    if (from.has_m_scripmontype()) {
      set_m_scripmontype(from.m_scripmontype());
    }
    if (from.has_m_scripmonid()) {
      set_m_scripmonid(from.m_scripmonid());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_subtype()) {
      set_m_subtype(from.m_subtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_layer()) {
      set_m_layer(from.m_layer());
    }
    if (from.has_m_recommendpower()) {
      set_m_recommendpower(from.m_recommendpower());
    }
    if (from.has_m_duplicatetype()) {
      set_m_duplicatetype(from.m_duplicatetype());
    }
    if (from.has_m_mapid()) {
      set_m_mapid(from.m_mapid());
    }
    if (from.has_m_levellimit()) {
      set_m_levellimit(from.m_levellimit());
    }
    if (from.has_m_functionid()) {
      set_m_functionid(from.m_functionid());
    }
    if (from.has_m_pre()) {
      set_m_pre(from.m_pre());
    }
    if (from.has_m_isautofight()) {
      set_m_isautofight(from.m_isautofight());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
    if (from.has_m_revivemaxtimes()) {
      set_m_revivemaxtimes(from.m_revivemaxtimes());
    }
    if (from.has_m_teamobjectid()) {
      set_m_teamobjectid(from.m_teamobjectid());
    }
    if (from.has_m_gradecondition()) {
      set_m_gradecondition(from.m_gradecondition());
    }
    if (from.has_m_sweeprewardboxid()) {
      set_m_sweeprewardboxid(from.m_sweeprewardboxid());
    }
    if (from.has_m_sweeprewardexp()) {
      set_m_sweeprewardexp(from.m_sweeprewardexp());
    }
    if (from.has_m_sweepexptype()) {
      set_m_sweepexptype(from.m_sweepexptype());
    }
    if (from.has_m_trackpoint()) {
      set_m_trackpoint(from.m_trackpoint());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_pathofmonster()) {
      set_m_pathofmonster(from.m_pathofmonster());
    }
    if (from.has_m_ispatrol()) {
      set_m_ispatrol(from.m_ispatrol());
    }
    if (from.has_m_failurebox()) {
      set_m_failurebox(from.m_failurebox());
    }
    if (from.has_m_planes()) {
      set_m_planes(from.m_planes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupDup::CopyFrom(const E_DupDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupDup::IsInitialized() const {

  return true;
}

void E_DupDup::Swap(E_DupDup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_scripid_, other->m_scripid_);
    std::swap(m_scriptype_, other->m_scriptype_);
    std::swap(m_duplevel_, other->m_duplevel_);
    std::swap(m_scripmontype_, other->m_scripmontype_);
    std::swap(m_scripmonid_, other->m_scripmonid_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_subtype_, other->m_subtype_);
    std::swap(m_layer_, other->m_layer_);
    std::swap(m_recommendpower_, other->m_recommendpower_);
    std::swap(m_duplicatetype_, other->m_duplicatetype_);
    std::swap(m_mapid_, other->m_mapid_);
    std::swap(m_levellimit_, other->m_levellimit_);
    std::swap(m_functionid_, other->m_functionid_);
    std::swap(m_pre_, other->m_pre_);
    std::swap(m_isautofight_, other->m_isautofight_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(m_revivemaxtimes_, other->m_revivemaxtimes_);
    std::swap(m_teamobjectid_, other->m_teamobjectid_);
    std::swap(m_gradecondition_, other->m_gradecondition_);
    std::swap(m_sweeprewardboxid_, other->m_sweeprewardboxid_);
    std::swap(m_sweeprewardexp_, other->m_sweeprewardexp_);
    std::swap(m_sweepexptype_, other->m_sweepexptype_);
    std::swap(m_trackpoint_, other->m_trackpoint_);
    std::swap(m_pathofmonster_, other->m_pathofmonster_);
    std::swap(m_ispatrol_, other->m_ispatrol_);
    std::swap(m_failurebox_, other->m_failurebox_);
    std::swap(m_planes_, other->m_planes_);
    m_box_.Swap(&other->m_box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupDup_descriptor_;
  metadata.reflection = E_DupDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupDup::kEDupDupListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupDup::Sheet_DupDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupDup::InitAsDefaultInstance() {
}

Sheet_DupDup::Sheet_DupDup(const Sheet_DupDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupDup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupDup::~Sheet_DupDup() {
  SharedDtor();
}

void Sheet_DupDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupDup_descriptor_;
}

const Sheet_DupDup& Sheet_DupDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupDup* Sheet_DupDup::default_instance_ = NULL;

Sheet_DupDup* Sheet_DupDup::New() const {
  return new Sheet_DupDup;
}

void Sheet_DupDup::Clear() {
  e_dupdup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupDup E_DupDup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupDup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupdup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupDup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupDup E_DupDup_List = 1;
  for (int i = 0; i < this->e_dupdup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupdup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupDup E_DupDup_List = 1;
  for (int i = 0; i < this->e_dupdup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupdup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupDup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupDup E_DupDup_List = 1;
  total_size += 1 * this->e_dupdup_list_size();
  for (int i = 0; i < this->e_dupdup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupdup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupDup::MergeFrom(const Sheet_DupDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupdup_list_.MergeFrom(from.e_dupdup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupDup::CopyFrom(const Sheet_DupDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupDup::IsInitialized() const {

  return true;
}

void Sheet_DupDup::Swap(Sheet_DupDup* other) {
  if (other != this) {
    e_dupdup_list_.Swap(&other->e_dupdup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupDup_descriptor_;
  metadata.reflection = Sheet_DupDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupBplevel::kMLvFieldNumber;
const int E_DupBplevel::kMBgdupFieldNumber;
const int E_DupBplevel::kMBgdupSweepFieldNumber;
#endif  // !_MSC_VER

E_DupBplevel::E_DupBplevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupBplevel::InitAsDefaultInstance() {
}

E_DupBplevel::E_DupBplevel(const E_DupBplevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupBplevel::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupBplevel::~E_DupBplevel() {
  SharedDtor();
}

void E_DupBplevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupBplevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupBplevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupBplevel_descriptor_;
}

const E_DupBplevel& E_DupBplevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupBplevel* E_DupBplevel::default_instance_ = NULL;

E_DupBplevel* E_DupBplevel::New() const {
  return new E_DupBplevel;
}

void E_DupBplevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
  }
  m_bgdup_.Clear();
  m_bgdupsweep_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupBplevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Bgdup;
        break;
      }

      // repeated int64 m_Bgdup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Bgdup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_m_bgdup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_bgdup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Bgdup;
        if (input->ExpectTag(24)) goto parse_m_BgdupSweep;
        break;
      }

      // repeated int64 m_BgdupSweep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BgdupSweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_m_bgdupsweep())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_bgdupsweep())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_BgdupSweep;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupBplevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // repeated int64 m_Bgdup = 2;
  for (int i = 0; i < this->m_bgdup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->m_bgdup(i), output);
  }

  // repeated int64 m_BgdupSweep = 3;
  for (int i = 0; i < this->m_bgdupsweep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->m_bgdupsweep(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupBplevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // repeated int64 m_Bgdup = 2;
  for (int i = 0; i < this->m_bgdup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->m_bgdup(i), target);
  }

  // repeated int64 m_BgdupSweep = 3;
  for (int i = 0; i < this->m_bgdupsweep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->m_bgdupsweep(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupBplevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

  }
  // repeated int64 m_Bgdup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_bgdup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_bgdup(i));
    }
    total_size += 1 * this->m_bgdup_size() + data_size;
  }

  // repeated int64 m_BgdupSweep = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_bgdupsweep_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_bgdupsweep(i));
    }
    total_size += 1 * this->m_bgdupsweep_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupBplevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupBplevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupBplevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupBplevel::MergeFrom(const E_DupBplevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_bgdup_.MergeFrom(from.m_bgdup_);
  m_bgdupsweep_.MergeFrom(from.m_bgdupsweep_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupBplevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupBplevel::CopyFrom(const E_DupBplevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupBplevel::IsInitialized() const {

  return true;
}

void E_DupBplevel::Swap(E_DupBplevel* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    m_bgdup_.Swap(&other->m_bgdup_);
    m_bgdupsweep_.Swap(&other->m_bgdupsweep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupBplevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupBplevel_descriptor_;
  metadata.reflection = E_DupBplevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupBplevel::kEDupBplevelListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupBplevel::Sheet_DupBplevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupBplevel::InitAsDefaultInstance() {
}

Sheet_DupBplevel::Sheet_DupBplevel(const Sheet_DupBplevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupBplevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupBplevel::~Sheet_DupBplevel() {
  SharedDtor();
}

void Sheet_DupBplevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupBplevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupBplevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupBplevel_descriptor_;
}

const Sheet_DupBplevel& Sheet_DupBplevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupBplevel* Sheet_DupBplevel::default_instance_ = NULL;

Sheet_DupBplevel* Sheet_DupBplevel::New() const {
  return new Sheet_DupBplevel;
}

void Sheet_DupBplevel::Clear() {
  e_dupbplevel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupBplevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupBplevel E_DupBplevel_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupBplevel_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupbplevel_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupBplevel_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupBplevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupBplevel E_DupBplevel_List = 1;
  for (int i = 0; i < this->e_dupbplevel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupbplevel_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupBplevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupBplevel E_DupBplevel_List = 1;
  for (int i = 0; i < this->e_dupbplevel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupbplevel_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupBplevel::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupBplevel E_DupBplevel_List = 1;
  total_size += 1 * this->e_dupbplevel_list_size();
  for (int i = 0; i < this->e_dupbplevel_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupbplevel_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupBplevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupBplevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupBplevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupBplevel::MergeFrom(const Sheet_DupBplevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupbplevel_list_.MergeFrom(from.e_dupbplevel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupBplevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupBplevel::CopyFrom(const Sheet_DupBplevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupBplevel::IsInitialized() const {

  return true;
}

void Sheet_DupBplevel::Swap(Sheet_DupBplevel* other) {
  if (other != this) {
    e_dupbplevel_list_.Swap(&other->e_dupbplevel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupBplevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupBplevel_descriptor_;
  metadata.reflection = Sheet_DupBplevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupTtowerwaveClearDesc::kMAddFieldNumber;
const int E_DupTtowerwaveClearDesc::kMTimeFieldNumber;
#endif  // !_MSC_VER

E_DupTtowerwaveClearDesc::E_DupTtowerwaveClearDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupTtowerwaveClearDesc::InitAsDefaultInstance() {
}

E_DupTtowerwaveClearDesc::E_DupTtowerwaveClearDesc(const E_DupTtowerwaveClearDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupTtowerwaveClearDesc::SharedCtor() {
  _cached_size_ = 0;
  m_add_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupTtowerwaveClearDesc::~E_DupTtowerwaveClearDesc() {
  SharedDtor();
}

void E_DupTtowerwaveClearDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupTtowerwaveClearDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupTtowerwaveClearDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupTtowerwaveClearDesc_descriptor_;
}

const E_DupTtowerwaveClearDesc& E_DupTtowerwaveClearDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupTtowerwaveClearDesc* E_DupTtowerwaveClearDesc::default_instance_ = NULL;

E_DupTtowerwaveClearDesc* E_DupTtowerwaveClearDesc::New() const {
  return new E_DupTtowerwaveClearDesc;
}

void E_DupTtowerwaveClearDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_add_ = 0;
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupTtowerwaveClearDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_add = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_add_)));
          set_has_m_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupTtowerwaveClearDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_add = 1;
  if (has_m_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_add(), output);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupTtowerwaveClearDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_add = 1;
  if (has_m_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_add(), target);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupTtowerwaveClearDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_add = 1;
    if (has_m_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_add());
    }

    // optional int32 m_time = 2;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupTtowerwaveClearDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupTtowerwaveClearDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupTtowerwaveClearDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupTtowerwaveClearDesc::MergeFrom(const E_DupTtowerwaveClearDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_add()) {
      set_m_add(from.m_add());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupTtowerwaveClearDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupTtowerwaveClearDesc::CopyFrom(const E_DupTtowerwaveClearDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupTtowerwaveClearDesc::IsInitialized() const {

  return true;
}

void E_DupTtowerwaveClearDesc::Swap(E_DupTtowerwaveClearDesc* other) {
  if (other != this) {
    std::swap(m_add_, other->m_add_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupTtowerwaveClearDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupTtowerwaveClearDesc_descriptor_;
  metadata.reflection = E_DupTtowerwaveClearDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupTtowerwave::kMIdFieldNumber;
const int E_DupTtowerwave::kMScripIDFieldNumber;
const int E_DupTtowerwave::kMScripGidFieldNumber;
const int E_DupTtowerwave::kMScripTypeFieldNumber;
const int E_DupTtowerwave::kMDupLevelFieldNumber;
const int E_DupTtowerwave::kMScripMonTypeFieldNumber;
const int E_DupTtowerwave::kMScripMonIDFieldNumber;
const int E_DupTtowerwave::kMRecommendPowerFieldNumber;
const int E_DupTtowerwave::kMRewardFieldNumber;
const int E_DupTtowerwave::kMFirstPassFieldNumber;
const int E_DupTtowerwave::kMBPFieldNumber;
const int E_DupTtowerwave::kMClearFieldNumber;
#endif  // !_MSC_VER

E_DupTtowerwave::E_DupTtowerwave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupTtowerwave::InitAsDefaultInstance() {
}

E_DupTtowerwave::E_DupTtowerwave(const E_DupTtowerwave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupTtowerwave::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_scripid_ = 0;
  m_scripgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_scriptype_ = 0;
  m_duplevel_ = 0;
  m_scripmontype_ = 0;
  m_scripmonid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_recommendpower_ = 0;
  m_reward_ = 0;
  m_firstpass_ = 0;
  m_bp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupTtowerwave::~E_DupTtowerwave() {
  SharedDtor();
}

void E_DupTtowerwave::SharedDtor() {
  if (m_scripgid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_scripgid_;
  }
  if (m_scripmonid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_scripmonid_;
  }
  if (this != default_instance_) {
  }
}

void E_DupTtowerwave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupTtowerwave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupTtowerwave_descriptor_;
}

const E_DupTtowerwave& E_DupTtowerwave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupTtowerwave* E_DupTtowerwave::default_instance_ = NULL;

E_DupTtowerwave* E_DupTtowerwave::New() const {
  return new E_DupTtowerwave;
}

void E_DupTtowerwave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_scripid_ = 0;
    if (has_m_scripgid()) {
      if (m_scripgid_ != &::google::protobuf::internal::kEmptyString) {
        m_scripgid_->clear();
      }
    }
    m_scriptype_ = 0;
    m_duplevel_ = 0;
    m_scripmontype_ = 0;
    if (has_m_scripmonid()) {
      if (m_scripmonid_ != &::google::protobuf::internal::kEmptyString) {
        m_scripmonid_->clear();
      }
    }
    m_recommendpower_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_reward_ = 0;
    m_firstpass_ = 0;
    m_bp_ = 0;
  }
  m_clear_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupTtowerwave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_scripID;
        break;
      }

      // optional int32 m_scripID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scripID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scripid_)));
          set_has_m_scripid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_scripGid;
        break;
      }

      // optional string m_scripGid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_scripGid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_scripgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_scripgid().data(), this->m_scripgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_scripType;
        break;
      }

      // optional int32 m_scripType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scripType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scriptype_)));
          set_has_m_scriptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_dupLevel;
        break;
      }

      // optional int32 m_dupLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dupLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_duplevel_)));
          set_has_m_duplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_scripMonType;
        break;
      }

      // optional int32 m_scripMonType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_scripMonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_scripmontype_)));
          set_has_m_scripmontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_scripMonID;
        break;
      }

      // optional string m_scripMonID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_scripMonID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_scripmonid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_scripmonid().data(), this->m_scripmonid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_recommendPower;
        break;
      }

      // optional int32 m_recommendPower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recommendPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_recommendpower_)));
          set_has_m_recommendpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_firstPass;
        break;
      }

      // optional int32 m_firstPass = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_firstPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_firstpass_)));
          set_has_m_firstpass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_BP;
        break;
      }

      // optional int32 m_BP = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_BP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bp_)));
          set_has_m_bp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_clear;
        break;
      }

      // repeated .proto_ff.E_DupTtowerwaveClearDesc m_clear = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_clear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_clear()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_clear;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupTtowerwave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_scripID = 2;
  if (has_m_scripid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_scripid(), output);
  }

  // optional string m_scripGid = 3;
  if (has_m_scripgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_scripgid().data(), this->m_scripgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_scripgid(), output);
  }

  // optional int32 m_scripType = 4;
  if (has_m_scriptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_scriptype(), output);
  }

  // optional int32 m_dupLevel = 5;
  if (has_m_duplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_duplevel(), output);
  }

  // optional int32 m_scripMonType = 6;
  if (has_m_scripmontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_scripmontype(), output);
  }

  // optional string m_scripMonID = 7;
  if (has_m_scripmonid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_scripmonid().data(), this->m_scripmonid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_scripmonid(), output);
  }

  // optional int32 m_recommendPower = 8;
  if (has_m_recommendpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_recommendpower(), output);
  }

  // optional int32 m_reward = 9;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_reward(), output);
  }

  // optional int32 m_firstPass = 10;
  if (has_m_firstpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_firstpass(), output);
  }

  // optional int32 m_BP = 11;
  if (has_m_bp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_bp(), output);
  }

  // repeated .proto_ff.E_DupTtowerwaveClearDesc m_clear = 12;
  for (int i = 0; i < this->m_clear_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_clear(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupTtowerwave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_scripID = 2;
  if (has_m_scripid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_scripid(), target);
  }

  // optional string m_scripGid = 3;
  if (has_m_scripgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_scripgid().data(), this->m_scripgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_scripgid(), target);
  }

  // optional int32 m_scripType = 4;
  if (has_m_scriptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_scriptype(), target);
  }

  // optional int32 m_dupLevel = 5;
  if (has_m_duplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_duplevel(), target);
  }

  // optional int32 m_scripMonType = 6;
  if (has_m_scripmontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_scripmontype(), target);
  }

  // optional string m_scripMonID = 7;
  if (has_m_scripmonid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_scripmonid().data(), this->m_scripmonid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_scripmonid(), target);
  }

  // optional int32 m_recommendPower = 8;
  if (has_m_recommendpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_recommendpower(), target);
  }

  // optional int32 m_reward = 9;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_reward(), target);
  }

  // optional int32 m_firstPass = 10;
  if (has_m_firstpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_firstpass(), target);
  }

  // optional int32 m_BP = 11;
  if (has_m_bp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_bp(), target);
  }

  // repeated .proto_ff.E_DupTtowerwaveClearDesc m_clear = 12;
  for (int i = 0; i < this->m_clear_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_clear(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupTtowerwave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_scripID = 2;
    if (has_m_scripid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scripid());
    }

    // optional string m_scripGid = 3;
    if (has_m_scripgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_scripgid());
    }

    // optional int32 m_scripType = 4;
    if (has_m_scriptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scriptype());
    }

    // optional int32 m_dupLevel = 5;
    if (has_m_duplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_duplevel());
    }

    // optional int32 m_scripMonType = 6;
    if (has_m_scripmontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_scripmontype());
    }

    // optional string m_scripMonID = 7;
    if (has_m_scripmonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_scripmonid());
    }

    // optional int32 m_recommendPower = 8;
    if (has_m_recommendpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_recommendpower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_reward = 9;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_firstPass = 10;
    if (has_m_firstpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_firstpass());
    }

    // optional int32 m_BP = 11;
    if (has_m_bp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bp());
    }

  }
  // repeated .proto_ff.E_DupTtowerwaveClearDesc m_clear = 12;
  total_size += 1 * this->m_clear_size();
  for (int i = 0; i < this->m_clear_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_clear(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupTtowerwave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupTtowerwave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupTtowerwave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupTtowerwave::MergeFrom(const E_DupTtowerwave& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_clear_.MergeFrom(from.m_clear_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_scripid()) {
      set_m_scripid(from.m_scripid());
    }
    if (from.has_m_scripgid()) {
      set_m_scripgid(from.m_scripgid());
    }
    if (from.has_m_scriptype()) {
      set_m_scriptype(from.m_scriptype());
    }
    if (from.has_m_duplevel()) {
      set_m_duplevel(from.m_duplevel());
    }
    if (from.has_m_scripmontype()) {
      set_m_scripmontype(from.m_scripmontype());
    }
    if (from.has_m_scripmonid()) {
      set_m_scripmonid(from.m_scripmonid());
    }
    if (from.has_m_recommendpower()) {
      set_m_recommendpower(from.m_recommendpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_firstpass()) {
      set_m_firstpass(from.m_firstpass());
    }
    if (from.has_m_bp()) {
      set_m_bp(from.m_bp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupTtowerwave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupTtowerwave::CopyFrom(const E_DupTtowerwave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupTtowerwave::IsInitialized() const {

  return true;
}

void E_DupTtowerwave::Swap(E_DupTtowerwave* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_scripid_, other->m_scripid_);
    std::swap(m_scripgid_, other->m_scripgid_);
    std::swap(m_scriptype_, other->m_scriptype_);
    std::swap(m_duplevel_, other->m_duplevel_);
    std::swap(m_scripmontype_, other->m_scripmontype_);
    std::swap(m_scripmonid_, other->m_scripmonid_);
    std::swap(m_recommendpower_, other->m_recommendpower_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_firstpass_, other->m_firstpass_);
    std::swap(m_bp_, other->m_bp_);
    m_clear_.Swap(&other->m_clear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupTtowerwave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupTtowerwave_descriptor_;
  metadata.reflection = E_DupTtowerwave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupTtowerwave::kEDupTtowerwaveListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupTtowerwave::Sheet_DupTtowerwave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupTtowerwave::InitAsDefaultInstance() {
}

Sheet_DupTtowerwave::Sheet_DupTtowerwave(const Sheet_DupTtowerwave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupTtowerwave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupTtowerwave::~Sheet_DupTtowerwave() {
  SharedDtor();
}

void Sheet_DupTtowerwave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupTtowerwave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupTtowerwave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupTtowerwave_descriptor_;
}

const Sheet_DupTtowerwave& Sheet_DupTtowerwave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupTtowerwave* Sheet_DupTtowerwave::default_instance_ = NULL;

Sheet_DupTtowerwave* Sheet_DupTtowerwave::New() const {
  return new Sheet_DupTtowerwave;
}

void Sheet_DupTtowerwave::Clear() {
  e_dupttowerwave_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupTtowerwave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupTtowerwave E_DupTtowerwave_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupTtowerwave_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupttowerwave_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupTtowerwave_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupTtowerwave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupTtowerwave E_DupTtowerwave_List = 1;
  for (int i = 0; i < this->e_dupttowerwave_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupttowerwave_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupTtowerwave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupTtowerwave E_DupTtowerwave_List = 1;
  for (int i = 0; i < this->e_dupttowerwave_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupttowerwave_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupTtowerwave::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupTtowerwave E_DupTtowerwave_List = 1;
  total_size += 1 * this->e_dupttowerwave_list_size();
  for (int i = 0; i < this->e_dupttowerwave_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupttowerwave_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupTtowerwave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupTtowerwave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupTtowerwave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupTtowerwave::MergeFrom(const Sheet_DupTtowerwave& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupttowerwave_list_.MergeFrom(from.e_dupttowerwave_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupTtowerwave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupTtowerwave::CopyFrom(const Sheet_DupTtowerwave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupTtowerwave::IsInitialized() const {

  return true;
}

void Sheet_DupTtowerwave::Swap(Sheet_DupTtowerwave* other) {
  if (other != this) {
    e_dupttowerwave_list_.Swap(&other->e_dupttowerwave_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupTtowerwave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupTtowerwave_descriptor_;
  metadata.reflection = Sheet_DupTtowerwave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupTowerreward::kMIdFieldNumber;
const int E_DupTowerreward::kMTypeFieldNumber;
const int E_DupTowerreward::kMCondFieldNumber;
const int E_DupTowerreward::kMBoxIDFieldNumber;
#endif  // !_MSC_VER

E_DupTowerreward::E_DupTowerreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupTowerreward::InitAsDefaultInstance() {
}

E_DupTowerreward::E_DupTowerreward(const E_DupTowerreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupTowerreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_cond_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupTowerreward::~E_DupTowerreward() {
  SharedDtor();
}

void E_DupTowerreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupTowerreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupTowerreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupTowerreward_descriptor_;
}

const E_DupTowerreward& E_DupTowerreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupTowerreward* E_DupTowerreward::default_instance_ = NULL;

E_DupTowerreward* E_DupTowerreward::New() const {
  return new E_DupTowerreward;
}

void E_DupTowerreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_cond_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupTowerreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_cond;
        break;
      }

      // optional int32 m_cond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cond_)));
          set_has_m_cond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_boxID;
        break;
      }

      // optional int32 m_boxID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupTowerreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_cond = 3;
  if (has_m_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_cond(), output);
  }

  // optional int32 m_boxID = 4;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupTowerreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_cond = 3;
  if (has_m_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_cond(), target);
  }

  // optional int32 m_boxID = 4;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupTowerreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_cond = 3;
    if (has_m_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cond());
    }

    // optional int32 m_boxID = 4;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupTowerreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupTowerreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupTowerreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupTowerreward::MergeFrom(const E_DupTowerreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_cond()) {
      set_m_cond(from.m_cond());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupTowerreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupTowerreward::CopyFrom(const E_DupTowerreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupTowerreward::IsInitialized() const {

  return true;
}

void E_DupTowerreward::Swap(E_DupTowerreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_cond_, other->m_cond_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupTowerreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupTowerreward_descriptor_;
  metadata.reflection = E_DupTowerreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupTowerreward::kEDupTowerrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupTowerreward::Sheet_DupTowerreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupTowerreward::InitAsDefaultInstance() {
}

Sheet_DupTowerreward::Sheet_DupTowerreward(const Sheet_DupTowerreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupTowerreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupTowerreward::~Sheet_DupTowerreward() {
  SharedDtor();
}

void Sheet_DupTowerreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupTowerreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupTowerreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupTowerreward_descriptor_;
}

const Sheet_DupTowerreward& Sheet_DupTowerreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupTowerreward* Sheet_DupTowerreward::default_instance_ = NULL;

Sheet_DupTowerreward* Sheet_DupTowerreward::New() const {
  return new Sheet_DupTowerreward;
}

void Sheet_DupTowerreward::Clear() {
  e_duptowerreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupTowerreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupTowerreward E_DupTowerreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupTowerreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_duptowerreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupTowerreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupTowerreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupTowerreward E_DupTowerreward_List = 1;
  for (int i = 0; i < this->e_duptowerreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_duptowerreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupTowerreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupTowerreward E_DupTowerreward_List = 1;
  for (int i = 0; i < this->e_duptowerreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_duptowerreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupTowerreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupTowerreward E_DupTowerreward_List = 1;
  total_size += 1 * this->e_duptowerreward_list_size();
  for (int i = 0; i < this->e_duptowerreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_duptowerreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupTowerreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupTowerreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupTowerreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupTowerreward::MergeFrom(const Sheet_DupTowerreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_duptowerreward_list_.MergeFrom(from.e_duptowerreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupTowerreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupTowerreward::CopyFrom(const Sheet_DupTowerreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupTowerreward::IsInitialized() const {

  return true;
}

void Sheet_DupTowerreward::Swap(Sheet_DupTowerreward* other) {
  if (other != this) {
    e_duptowerreward_list_.Swap(&other->e_duptowerreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupTowerreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupTowerreward_descriptor_;
  metadata.reflection = Sheet_DupTowerreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupGroup::kMIdFieldNumber;
const int E_DupGroup::kMNameFieldNumber;
const int E_DupGroup::kMPrivilegeTypeFieldNumber;
const int E_DupGroup::kMDynamiclevelFieldNumber;
const int E_DupGroup::kMGroupTimesTypeFieldNumber;
const int E_DupGroup::kMResetCycleFieldNumber;
const int E_DupGroup::kMGroupTimesFieldNumber;
const int E_DupGroup::kMEnterItemIDFieldNumber;
const int E_DupGroup::kMSweepTypeFieldNumber;
const int E_DupGroup::kMSweepConditionFieldNumber;
const int E_DupGroup::kMMergeConditionFieldNumber;
const int E_DupGroup::kMAddItemIDFieldNumber;
const int E_DupGroup::kMBuyTypeFieldNumber;
const int E_DupGroup::kMBuyItemIdFieldNumber;
const int E_DupGroup::kMBuyCostFieldNumber;
const int E_DupGroup::kMCountDownFieldNumber;
const int E_DupGroup::kMEndDownFieldNumber;
const int E_DupGroup::kMAccountDownFieldNumber;
const int E_DupGroup::kMFuncionIDFieldNumber;
const int E_DupGroup::kMCloseFuncionIDFieldNumber;
const int E_DupGroup::kMLinkFieldNumber;
const int E_DupGroup::kMFestvialTypeFieldNumber;
#endif  // !_MSC_VER

E_DupGroup::E_DupGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupGroup::InitAsDefaultInstance() {
}

E_DupGroup::E_DupGroup(const E_DupGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupGroup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_privilegetype_ = 0;
  m_dynamiclevel_ = 0;
  m_grouptimestype_ = 0;
  m_resetcycle_ = 0;
  m_grouptimes_ = 0;
  m_enteritemid_ = 0;
  m_sweeptype_ = 0;
  m_sweepcondition_ = 0;
  m_mergecondition_ = 0;
  m_additemid_ = 0;
  m_buytype_ = 0;
  m_buyitemid_ = 0;
  m_buycost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_countdown_ = 0;
  m_enddown_ = 0;
  m_accountdown_ = 0;
  m_funcionid_ = 0;
  m_closefuncionid_ = 0;
  m_link_ = GOOGLE_LONGLONG(0);
  m_festvialtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupGroup::~E_DupGroup() {
  SharedDtor();
}

void E_DupGroup::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_buycost_ != &::google::protobuf::internal::kEmptyString) {
    delete m_buycost_;
  }
  if (this != default_instance_) {
  }
}

void E_DupGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupGroup_descriptor_;
}

const E_DupGroup& E_DupGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupGroup* E_DupGroup::default_instance_ = NULL;

E_DupGroup* E_DupGroup::New() const {
  return new E_DupGroup;
}

void E_DupGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_privilegetype_ = 0;
    m_dynamiclevel_ = 0;
    m_grouptimestype_ = 0;
    m_resetcycle_ = 0;
    m_grouptimes_ = 0;
    m_enteritemid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_sweeptype_ = 0;
    m_sweepcondition_ = 0;
    m_mergecondition_ = 0;
    m_additemid_ = 0;
    m_buytype_ = 0;
    m_buyitemid_ = 0;
    if (has_m_buycost()) {
      if (m_buycost_ != &::google::protobuf::internal::kEmptyString) {
        m_buycost_->clear();
      }
    }
    m_countdown_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_enddown_ = 0;
    m_accountdown_ = 0;
    m_funcionid_ = 0;
    m_closefuncionid_ = 0;
    m_link_ = GOOGLE_LONGLONG(0);
    m_festvialtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_privilegeType;
        break;
      }

      // optional int32 m_privilegeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_privilegeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_privilegetype_)));
          set_has_m_privilegetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_dynamiclevel;
        break;
      }

      // optional int32 m_dynamiclevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dynamiclevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dynamiclevel_)));
          set_has_m_dynamiclevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_groupTimesType;
        break;
      }

      // optional int32 m_groupTimesType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupTimesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grouptimestype_)));
          set_has_m_grouptimestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_resetCycle;
        break;
      }

      // optional int32 m_resetCycle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_resetCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resetcycle_)));
          set_has_m_resetcycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_groupTimes;
        break;
      }

      // optional int32 m_groupTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grouptimes_)));
          set_has_m_grouptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_enterItemID;
        break;
      }

      // optional int32 m_enterItemID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_enterItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enteritemid_)));
          set_has_m_enteritemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_sweepType;
        break;
      }

      // optional int32 m_sweepType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweepType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweeptype_)));
          set_has_m_sweeptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_sweepCondition;
        break;
      }

      // optional int32 m_sweepCondition = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweepCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweepcondition_)));
          set_has_m_sweepcondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_mergeCondition;
        break;
      }

      // optional int32 m_mergeCondition = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mergeCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mergecondition_)));
          set_has_m_mergecondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_addItemID;
        break;
      }

      // optional int32 m_addItemID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_additemid_)));
          set_has_m_additemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_buyType;
        break;
      }

      // optional int32 m_buyType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buytype_)));
          set_has_m_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_buyItemId;
        break;
      }

      // optional int32 m_buyItemId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_buyItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_buyitemid_)));
          set_has_m_buyitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_buyCost;
        break;
      }

      // optional string m_buyCost = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_buyCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_buycost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_buycost().data(), this->m_buycost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_countDown;
        break;
      }

      // optional int32 m_countDown = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_countDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_countdown_)));
          set_has_m_countdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_endDown;
        break;
      }

      // optional int32 m_endDown = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_endDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_enddown_)));
          set_has_m_enddown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_accountDown;
        break;
      }

      // optional int32 m_accountDown = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_accountDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_accountdown_)));
          set_has_m_accountdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_funcionID;
        break;
      }

      // optional int32 m_funcionID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_funcionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_funcionid_)));
          set_has_m_funcionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_closeFuncionID;
        break;
      }

      // optional int32 m_closeFuncionID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_closeFuncionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_closefuncionid_)));
          set_has_m_closefuncionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_link;
        break;
      }

      // optional int64 m_link = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_link_)));
          set_has_m_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_festvialType;
        break;
      }

      // optional int32 m_festvialType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_festvialType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_festvialtype_)));
          set_has_m_festvialtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_privilegeType = 3;
  if (has_m_privilegetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_privilegetype(), output);
  }

  // optional int32 m_dynamiclevel = 4;
  if (has_m_dynamiclevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_dynamiclevel(), output);
  }

  // optional int32 m_groupTimesType = 5;
  if (has_m_grouptimestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_grouptimestype(), output);
  }

  // optional int32 m_resetCycle = 6;
  if (has_m_resetcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_resetcycle(), output);
  }

  // optional int32 m_groupTimes = 7;
  if (has_m_grouptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_grouptimes(), output);
  }

  // optional int32 m_enterItemID = 8;
  if (has_m_enteritemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_enteritemid(), output);
  }

  // optional int32 m_sweepType = 9;
  if (has_m_sweeptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_sweeptype(), output);
  }

  // optional int32 m_sweepCondition = 10;
  if (has_m_sweepcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_sweepcondition(), output);
  }

  // optional int32 m_mergeCondition = 11;
  if (has_m_mergecondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_mergecondition(), output);
  }

  // optional int32 m_addItemID = 12;
  if (has_m_additemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_additemid(), output);
  }

  // optional int32 m_buyType = 13;
  if (has_m_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_buytype(), output);
  }

  // optional int32 m_buyItemId = 14;
  if (has_m_buyitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_buyitemid(), output);
  }

  // optional string m_buyCost = 15;
  if (has_m_buycost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_buycost().data(), this->m_buycost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_buycost(), output);
  }

  // optional int32 m_countDown = 16;
  if (has_m_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_countdown(), output);
  }

  // optional int32 m_endDown = 17;
  if (has_m_enddown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_enddown(), output);
  }

  // optional int32 m_accountDown = 18;
  if (has_m_accountdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_accountdown(), output);
  }

  // optional int32 m_funcionID = 19;
  if (has_m_funcionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_funcionid(), output);
  }

  // optional int32 m_closeFuncionID = 20;
  if (has_m_closefuncionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_closefuncionid(), output);
  }

  // optional int64 m_link = 21;
  if (has_m_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->m_link(), output);
  }

  // optional int32 m_festvialType = 22;
  if (has_m_festvialtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_festvialtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_privilegeType = 3;
  if (has_m_privilegetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_privilegetype(), target);
  }

  // optional int32 m_dynamiclevel = 4;
  if (has_m_dynamiclevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_dynamiclevel(), target);
  }

  // optional int32 m_groupTimesType = 5;
  if (has_m_grouptimestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_grouptimestype(), target);
  }

  // optional int32 m_resetCycle = 6;
  if (has_m_resetcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_resetcycle(), target);
  }

  // optional int32 m_groupTimes = 7;
  if (has_m_grouptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_grouptimes(), target);
  }

  // optional int32 m_enterItemID = 8;
  if (has_m_enteritemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_enteritemid(), target);
  }

  // optional int32 m_sweepType = 9;
  if (has_m_sweeptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_sweeptype(), target);
  }

  // optional int32 m_sweepCondition = 10;
  if (has_m_sweepcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_sweepcondition(), target);
  }

  // optional int32 m_mergeCondition = 11;
  if (has_m_mergecondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_mergecondition(), target);
  }

  // optional int32 m_addItemID = 12;
  if (has_m_additemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_additemid(), target);
  }

  // optional int32 m_buyType = 13;
  if (has_m_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_buytype(), target);
  }

  // optional int32 m_buyItemId = 14;
  if (has_m_buyitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_buyitemid(), target);
  }

  // optional string m_buyCost = 15;
  if (has_m_buycost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_buycost().data(), this->m_buycost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->m_buycost(), target);
  }

  // optional int32 m_countDown = 16;
  if (has_m_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_countdown(), target);
  }

  // optional int32 m_endDown = 17;
  if (has_m_enddown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_enddown(), target);
  }

  // optional int32 m_accountDown = 18;
  if (has_m_accountdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_accountdown(), target);
  }

  // optional int32 m_funcionID = 19;
  if (has_m_funcionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_funcionid(), target);
  }

  // optional int32 m_closeFuncionID = 20;
  if (has_m_closefuncionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_closefuncionid(), target);
  }

  // optional int64 m_link = 21;
  if (has_m_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->m_link(), target);
  }

  // optional int32 m_festvialType = 22;
  if (has_m_festvialtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_festvialtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_privilegeType = 3;
    if (has_m_privilegetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_privilegetype());
    }

    // optional int32 m_dynamiclevel = 4;
    if (has_m_dynamiclevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dynamiclevel());
    }

    // optional int32 m_groupTimesType = 5;
    if (has_m_grouptimestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grouptimestype());
    }

    // optional int32 m_resetCycle = 6;
    if (has_m_resetcycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resetcycle());
    }

    // optional int32 m_groupTimes = 7;
    if (has_m_grouptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grouptimes());
    }

    // optional int32 m_enterItemID = 8;
    if (has_m_enteritemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enteritemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_sweepType = 9;
    if (has_m_sweeptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweeptype());
    }

    // optional int32 m_sweepCondition = 10;
    if (has_m_sweepcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweepcondition());
    }

    // optional int32 m_mergeCondition = 11;
    if (has_m_mergecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mergecondition());
    }

    // optional int32 m_addItemID = 12;
    if (has_m_additemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_additemid());
    }

    // optional int32 m_buyType = 13;
    if (has_m_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buytype());
    }

    // optional int32 m_buyItemId = 14;
    if (has_m_buyitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_buyitemid());
    }

    // optional string m_buyCost = 15;
    if (has_m_buycost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_buycost());
    }

    // optional int32 m_countDown = 16;
    if (has_m_countdown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_countdown());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_endDown = 17;
    if (has_m_enddown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_enddown());
    }

    // optional int32 m_accountDown = 18;
    if (has_m_accountdown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_accountdown());
    }

    // optional int32 m_funcionID = 19;
    if (has_m_funcionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_funcionid());
    }

    // optional int32 m_closeFuncionID = 20;
    if (has_m_closefuncionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_closefuncionid());
    }

    // optional int64 m_link = 21;
    if (has_m_link()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_link());
    }

    // optional int32 m_festvialType = 22;
    if (has_m_festvialtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_festvialtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupGroup::MergeFrom(const E_DupGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_privilegetype()) {
      set_m_privilegetype(from.m_privilegetype());
    }
    if (from.has_m_dynamiclevel()) {
      set_m_dynamiclevel(from.m_dynamiclevel());
    }
    if (from.has_m_grouptimestype()) {
      set_m_grouptimestype(from.m_grouptimestype());
    }
    if (from.has_m_resetcycle()) {
      set_m_resetcycle(from.m_resetcycle());
    }
    if (from.has_m_grouptimes()) {
      set_m_grouptimes(from.m_grouptimes());
    }
    if (from.has_m_enteritemid()) {
      set_m_enteritemid(from.m_enteritemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_sweeptype()) {
      set_m_sweeptype(from.m_sweeptype());
    }
    if (from.has_m_sweepcondition()) {
      set_m_sweepcondition(from.m_sweepcondition());
    }
    if (from.has_m_mergecondition()) {
      set_m_mergecondition(from.m_mergecondition());
    }
    if (from.has_m_additemid()) {
      set_m_additemid(from.m_additemid());
    }
    if (from.has_m_buytype()) {
      set_m_buytype(from.m_buytype());
    }
    if (from.has_m_buyitemid()) {
      set_m_buyitemid(from.m_buyitemid());
    }
    if (from.has_m_buycost()) {
      set_m_buycost(from.m_buycost());
    }
    if (from.has_m_countdown()) {
      set_m_countdown(from.m_countdown());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_enddown()) {
      set_m_enddown(from.m_enddown());
    }
    if (from.has_m_accountdown()) {
      set_m_accountdown(from.m_accountdown());
    }
    if (from.has_m_funcionid()) {
      set_m_funcionid(from.m_funcionid());
    }
    if (from.has_m_closefuncionid()) {
      set_m_closefuncionid(from.m_closefuncionid());
    }
    if (from.has_m_link()) {
      set_m_link(from.m_link());
    }
    if (from.has_m_festvialtype()) {
      set_m_festvialtype(from.m_festvialtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupGroup::CopyFrom(const E_DupGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupGroup::IsInitialized() const {

  return true;
}

void E_DupGroup::Swap(E_DupGroup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_privilegetype_, other->m_privilegetype_);
    std::swap(m_dynamiclevel_, other->m_dynamiclevel_);
    std::swap(m_grouptimestype_, other->m_grouptimestype_);
    std::swap(m_resetcycle_, other->m_resetcycle_);
    std::swap(m_grouptimes_, other->m_grouptimes_);
    std::swap(m_enteritemid_, other->m_enteritemid_);
    std::swap(m_sweeptype_, other->m_sweeptype_);
    std::swap(m_sweepcondition_, other->m_sweepcondition_);
    std::swap(m_mergecondition_, other->m_mergecondition_);
    std::swap(m_additemid_, other->m_additemid_);
    std::swap(m_buytype_, other->m_buytype_);
    std::swap(m_buyitemid_, other->m_buyitemid_);
    std::swap(m_buycost_, other->m_buycost_);
    std::swap(m_countdown_, other->m_countdown_);
    std::swap(m_enddown_, other->m_enddown_);
    std::swap(m_accountdown_, other->m_accountdown_);
    std::swap(m_funcionid_, other->m_funcionid_);
    std::swap(m_closefuncionid_, other->m_closefuncionid_);
    std::swap(m_link_, other->m_link_);
    std::swap(m_festvialtype_, other->m_festvialtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupGroup_descriptor_;
  metadata.reflection = E_DupGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupGroup::kEDupGroupListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupGroup::Sheet_DupGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupGroup::InitAsDefaultInstance() {
}

Sheet_DupGroup::Sheet_DupGroup(const Sheet_DupGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupGroup::~Sheet_DupGroup() {
  SharedDtor();
}

void Sheet_DupGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupGroup_descriptor_;
}

const Sheet_DupGroup& Sheet_DupGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupGroup* Sheet_DupGroup::default_instance_ = NULL;

Sheet_DupGroup* Sheet_DupGroup::New() const {
  return new Sheet_DupGroup;
}

void Sheet_DupGroup::Clear() {
  e_dupgroup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupGroup E_DupGroup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupGroup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupgroup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupGroup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupGroup E_DupGroup_List = 1;
  for (int i = 0; i < this->e_dupgroup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupgroup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupGroup E_DupGroup_List = 1;
  for (int i = 0; i < this->e_dupgroup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupgroup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupGroup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupGroup E_DupGroup_List = 1;
  total_size += 1 * this->e_dupgroup_list_size();
  for (int i = 0; i < this->e_dupgroup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupgroup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupGroup::MergeFrom(const Sheet_DupGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupgroup_list_.MergeFrom(from.e_dupgroup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupGroup::CopyFrom(const Sheet_DupGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupGroup::IsInitialized() const {

  return true;
}

void Sheet_DupGroup::Swap(Sheet_DupGroup* other) {
  if (other != this) {
    e_dupgroup_list_.Swap(&other->e_dupgroup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupGroup_descriptor_;
  metadata.reflection = Sheet_DupGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupSweepmonsternum::kMIDFieldNumber;
const int E_DupSweepmonsternum::kMSweepExpTypeFieldNumber;
const int E_DupSweepmonsternum::kMMinLevelFieldNumber;
const int E_DupSweepmonsternum::kMMaxLevelFieldNumber;
const int E_DupSweepmonsternum::kMKillNumberFieldNumber;
const int E_DupSweepmonsternum::kMMonstervaluetypeFieldNumber;
#endif  // !_MSC_VER

E_DupSweepmonsternum::E_DupSweepmonsternum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupSweepmonsternum::InitAsDefaultInstance() {
}

E_DupSweepmonsternum::E_DupSweepmonsternum(const E_DupSweepmonsternum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupSweepmonsternum::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_sweepexptype_ = 0;
  m_minlevel_ = 0;
  m_maxlevel_ = 0;
  m_killnumber_ = 0;
  m_monstervaluetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupSweepmonsternum::~E_DupSweepmonsternum() {
  SharedDtor();
}

void E_DupSweepmonsternum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupSweepmonsternum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupSweepmonsternum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupSweepmonsternum_descriptor_;
}

const E_DupSweepmonsternum& E_DupSweepmonsternum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupSweepmonsternum* E_DupSweepmonsternum::default_instance_ = NULL;

E_DupSweepmonsternum* E_DupSweepmonsternum::New() const {
  return new E_DupSweepmonsternum;
}

void E_DupSweepmonsternum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_sweepexptype_ = 0;
    m_minlevel_ = 0;
    m_maxlevel_ = 0;
    m_killnumber_ = 0;
    m_monstervaluetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupSweepmonsternum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_sweepExpType;
        break;
      }

      // optional int32 m_sweepExpType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sweepExpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sweepexptype_)));
          set_has_m_sweepexptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_minLevel;
        break;
      }

      // optional int32 m_minLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minlevel_)));
          set_has_m_minlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_maxLevel;
        break;
      }

      // optional int32 m_maxLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxlevel_)));
          set_has_m_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_killNumber;
        break;
      }

      // optional int32 m_killNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killnumber_)));
          set_has_m_killnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_monstervaluetype;
        break;
      }

      // optional int32 m_monstervaluetype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monstervaluetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monstervaluetype_)));
          set_has_m_monstervaluetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupSweepmonsternum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_sweepExpType = 2;
  if (has_m_sweepexptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_sweepexptype(), output);
  }

  // optional int32 m_minLevel = 3;
  if (has_m_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_minlevel(), output);
  }

  // optional int32 m_maxLevel = 4;
  if (has_m_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_maxlevel(), output);
  }

  // optional int32 m_killNumber = 5;
  if (has_m_killnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_killnumber(), output);
  }

  // optional int32 m_monstervaluetype = 6;
  if (has_m_monstervaluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_monstervaluetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupSweepmonsternum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_sweepExpType = 2;
  if (has_m_sweepexptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_sweepexptype(), target);
  }

  // optional int32 m_minLevel = 3;
  if (has_m_minlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_minlevel(), target);
  }

  // optional int32 m_maxLevel = 4;
  if (has_m_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_maxlevel(), target);
  }

  // optional int32 m_killNumber = 5;
  if (has_m_killnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_killnumber(), target);
  }

  // optional int32 m_monstervaluetype = 6;
  if (has_m_monstervaluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_monstervaluetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupSweepmonsternum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_sweepExpType = 2;
    if (has_m_sweepexptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sweepexptype());
    }

    // optional int32 m_minLevel = 3;
    if (has_m_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minlevel());
    }

    // optional int32 m_maxLevel = 4;
    if (has_m_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxlevel());
    }

    // optional int32 m_killNumber = 5;
    if (has_m_killnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killnumber());
    }

    // optional int32 m_monstervaluetype = 6;
    if (has_m_monstervaluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monstervaluetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupSweepmonsternum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupSweepmonsternum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupSweepmonsternum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupSweepmonsternum::MergeFrom(const E_DupSweepmonsternum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_sweepexptype()) {
      set_m_sweepexptype(from.m_sweepexptype());
    }
    if (from.has_m_minlevel()) {
      set_m_minlevel(from.m_minlevel());
    }
    if (from.has_m_maxlevel()) {
      set_m_maxlevel(from.m_maxlevel());
    }
    if (from.has_m_killnumber()) {
      set_m_killnumber(from.m_killnumber());
    }
    if (from.has_m_monstervaluetype()) {
      set_m_monstervaluetype(from.m_monstervaluetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupSweepmonsternum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupSweepmonsternum::CopyFrom(const E_DupSweepmonsternum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupSweepmonsternum::IsInitialized() const {

  return true;
}

void E_DupSweepmonsternum::Swap(E_DupSweepmonsternum* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_sweepexptype_, other->m_sweepexptype_);
    std::swap(m_minlevel_, other->m_minlevel_);
    std::swap(m_maxlevel_, other->m_maxlevel_);
    std::swap(m_killnumber_, other->m_killnumber_);
    std::swap(m_monstervaluetype_, other->m_monstervaluetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupSweepmonsternum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupSweepmonsternum_descriptor_;
  metadata.reflection = E_DupSweepmonsternum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupSweepmonsternum::kEDupSweepmonsternumListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupSweepmonsternum::Sheet_DupSweepmonsternum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupSweepmonsternum::InitAsDefaultInstance() {
}

Sheet_DupSweepmonsternum::Sheet_DupSweepmonsternum(const Sheet_DupSweepmonsternum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupSweepmonsternum::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupSweepmonsternum::~Sheet_DupSweepmonsternum() {
  SharedDtor();
}

void Sheet_DupSweepmonsternum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupSweepmonsternum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupSweepmonsternum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupSweepmonsternum_descriptor_;
}

const Sheet_DupSweepmonsternum& Sheet_DupSweepmonsternum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupSweepmonsternum* Sheet_DupSweepmonsternum::default_instance_ = NULL;

Sheet_DupSweepmonsternum* Sheet_DupSweepmonsternum::New() const {
  return new Sheet_DupSweepmonsternum;
}

void Sheet_DupSweepmonsternum::Clear() {
  e_dupsweepmonsternum_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupSweepmonsternum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupSweepmonsternum E_DupSweepmonsternum_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupSweepmonsternum_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupsweepmonsternum_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupSweepmonsternum_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupSweepmonsternum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupSweepmonsternum E_DupSweepmonsternum_List = 1;
  for (int i = 0; i < this->e_dupsweepmonsternum_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupsweepmonsternum_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupSweepmonsternum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupSweepmonsternum E_DupSweepmonsternum_List = 1;
  for (int i = 0; i < this->e_dupsweepmonsternum_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupsweepmonsternum_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupSweepmonsternum::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupSweepmonsternum E_DupSweepmonsternum_List = 1;
  total_size += 1 * this->e_dupsweepmonsternum_list_size();
  for (int i = 0; i < this->e_dupsweepmonsternum_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupsweepmonsternum_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupSweepmonsternum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupSweepmonsternum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupSweepmonsternum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupSweepmonsternum::MergeFrom(const Sheet_DupSweepmonsternum& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupsweepmonsternum_list_.MergeFrom(from.e_dupsweepmonsternum_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupSweepmonsternum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupSweepmonsternum::CopyFrom(const Sheet_DupSweepmonsternum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupSweepmonsternum::IsInitialized() const {

  return true;
}

void Sheet_DupSweepmonsternum::Swap(Sheet_DupSweepmonsternum* other) {
  if (other != this) {
    e_dupsweepmonsternum_list_.Swap(&other->e_dupsweepmonsternum_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupSweepmonsternum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupSweepmonsternum_descriptor_;
  metadata.reflection = Sheet_DupSweepmonsternum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupWorldlvreward::kMIdFieldNumber;
const int E_DupWorldlvreward::kMGroupIDFieldNumber;
const int E_DupWorldlvreward::kMLvtypeFieldNumber;
const int E_DupWorldlvreward::kMLvMinFieldNumber;
const int E_DupWorldlvreward::kMFailureBoxFieldNumber;
const int E_DupWorldlvreward::kMBoxFieldNumber;
#endif  // !_MSC_VER

E_DupWorldlvreward::E_DupWorldlvreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupWorldlvreward::InitAsDefaultInstance() {
}

E_DupWorldlvreward::E_DupWorldlvreward(const E_DupWorldlvreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupWorldlvreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_lvtype_ = 0;
  m_lvmin_ = 0;
  m_failurebox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupWorldlvreward::~E_DupWorldlvreward() {
  SharedDtor();
}

void E_DupWorldlvreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupWorldlvreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupWorldlvreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupWorldlvreward_descriptor_;
}

const E_DupWorldlvreward& E_DupWorldlvreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupWorldlvreward* E_DupWorldlvreward::default_instance_ = NULL;

E_DupWorldlvreward* E_DupWorldlvreward::New() const {
  return new E_DupWorldlvreward;
}

void E_DupWorldlvreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_lvtype_ = 0;
    m_lvmin_ = 0;
    m_failurebox_ = 0;
  }
  m_box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupWorldlvreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupID;
        break;
      }

      // optional int32 m_groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lvtype;
        break;
      }

      // optional int32 m_lvtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvtype_)));
          set_has_m_lvtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lvMin;
        break;
      }

      // optional int32 m_lvMin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmin_)));
          set_has_m_lvmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_failureBox;
        break;
      }

      // optional int32 m_failureBox = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_failureBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_failurebox_)));
          set_has_m_failurebox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_box;
        break;
      }

      // repeated int32 m_box = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_box())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_box())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_box;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupWorldlvreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_lvtype = 3;
  if (has_m_lvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lvtype(), output);
  }

  // optional int32 m_lvMin = 4;
  if (has_m_lvmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lvmin(), output);
  }

  // optional int32 m_failureBox = 5;
  if (has_m_failurebox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_failurebox(), output);
  }

  // repeated int32 m_box = 6;
  for (int i = 0; i < this->m_box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_box(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupWorldlvreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_lvtype = 3;
  if (has_m_lvtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lvtype(), target);
  }

  // optional int32 m_lvMin = 4;
  if (has_m_lvmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lvmin(), target);
  }

  // optional int32 m_failureBox = 5;
  if (has_m_failurebox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_failurebox(), target);
  }

  // repeated int32 m_box = 6;
  for (int i = 0; i < this->m_box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->m_box(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupWorldlvreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupID = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_lvtype = 3;
    if (has_m_lvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvtype());
    }

    // optional int32 m_lvMin = 4;
    if (has_m_lvmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmin());
    }

    // optional int32 m_failureBox = 5;
    if (has_m_failurebox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_failurebox());
    }

  }
  // repeated int32 m_box = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_box_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_box(i));
    }
    total_size += 1 * this->m_box_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupWorldlvreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupWorldlvreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupWorldlvreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupWorldlvreward::MergeFrom(const E_DupWorldlvreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_box_.MergeFrom(from.m_box_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_lvtype()) {
      set_m_lvtype(from.m_lvtype());
    }
    if (from.has_m_lvmin()) {
      set_m_lvmin(from.m_lvmin());
    }
    if (from.has_m_failurebox()) {
      set_m_failurebox(from.m_failurebox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupWorldlvreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupWorldlvreward::CopyFrom(const E_DupWorldlvreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupWorldlvreward::IsInitialized() const {

  return true;
}

void E_DupWorldlvreward::Swap(E_DupWorldlvreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_lvtype_, other->m_lvtype_);
    std::swap(m_lvmin_, other->m_lvmin_);
    std::swap(m_failurebox_, other->m_failurebox_);
    m_box_.Swap(&other->m_box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupWorldlvreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupWorldlvreward_descriptor_;
  metadata.reflection = E_DupWorldlvreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupWorldlvreward::kEDupWorldlvrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupWorldlvreward::Sheet_DupWorldlvreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupWorldlvreward::InitAsDefaultInstance() {
}

Sheet_DupWorldlvreward::Sheet_DupWorldlvreward(const Sheet_DupWorldlvreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupWorldlvreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupWorldlvreward::~Sheet_DupWorldlvreward() {
  SharedDtor();
}

void Sheet_DupWorldlvreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupWorldlvreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupWorldlvreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupWorldlvreward_descriptor_;
}

const Sheet_DupWorldlvreward& Sheet_DupWorldlvreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupWorldlvreward* Sheet_DupWorldlvreward::default_instance_ = NULL;

Sheet_DupWorldlvreward* Sheet_DupWorldlvreward::New() const {
  return new Sheet_DupWorldlvreward;
}

void Sheet_DupWorldlvreward::Clear() {
  e_dupworldlvreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupWorldlvreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupWorldlvreward E_DupWorldlvreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupWorldlvreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupworldlvreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupWorldlvreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupWorldlvreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupWorldlvreward E_DupWorldlvreward_List = 1;
  for (int i = 0; i < this->e_dupworldlvreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupworldlvreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupWorldlvreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupWorldlvreward E_DupWorldlvreward_List = 1;
  for (int i = 0; i < this->e_dupworldlvreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupworldlvreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupWorldlvreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupWorldlvreward E_DupWorldlvreward_List = 1;
  total_size += 1 * this->e_dupworldlvreward_list_size();
  for (int i = 0; i < this->e_dupworldlvreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupworldlvreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupWorldlvreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupWorldlvreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupWorldlvreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupWorldlvreward::MergeFrom(const Sheet_DupWorldlvreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupworldlvreward_list_.MergeFrom(from.e_dupworldlvreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupWorldlvreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupWorldlvreward::CopyFrom(const Sheet_DupWorldlvreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupWorldlvreward::IsInitialized() const {

  return true;
}

void Sheet_DupWorldlvreward::Swap(Sheet_DupWorldlvreward* other) {
  if (other != this) {
    e_dupworldlvreward_list_.Swap(&other->e_dupworldlvreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupWorldlvreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupWorldlvreward_descriptor_;
  metadata.reflection = Sheet_DupWorldlvreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupPlanes::kMIdFieldNumber;
const int E_DupPlanes::kMPlanesTypeFieldNumber;
const int E_DupPlanes::kMTypeArgsFieldNumber;
const int E_DupPlanes::kMAreaIdFieldNumber;
#endif  // !_MSC_VER

E_DupPlanes::E_DupPlanes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupPlanes::InitAsDefaultInstance() {
}

E_DupPlanes::E_DupPlanes(const E_DupPlanes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupPlanes::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_planestype_ = 0;
  m_typeargs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupPlanes::~E_DupPlanes() {
  SharedDtor();
}

void E_DupPlanes::SharedDtor() {
  if (m_typeargs_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typeargs_;
  }
  if (this != default_instance_) {
  }
}

void E_DupPlanes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupPlanes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupPlanes_descriptor_;
}

const E_DupPlanes& E_DupPlanes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupPlanes* E_DupPlanes::default_instance_ = NULL;

E_DupPlanes* E_DupPlanes::New() const {
  return new E_DupPlanes;
}

void E_DupPlanes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_planestype_ = 0;
    if (has_m_typeargs()) {
      if (m_typeargs_ != &::google::protobuf::internal::kEmptyString) {
        m_typeargs_->clear();
      }
    }
    m_areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupPlanes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_planesType;
        break;
      }

      // optional int32 m_planesType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_planesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_planestype_)));
          set_has_m_planestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_typeArgs;
        break;
      }

      // optional string m_typeArgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_typeArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_typeargs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_typeargs().data(), this->m_typeargs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_areaId;
        break;
      }

      // optional int32 m_areaId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_areaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_areaid_)));
          set_has_m_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupPlanes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_planesType = 2;
  if (has_m_planestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_planestype(), output);
  }

  // optional string m_typeArgs = 3;
  if (has_m_typeargs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typeargs().data(), this->m_typeargs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_typeargs(), output);
  }

  // optional int32 m_areaId = 4;
  if (has_m_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupPlanes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_planesType = 2;
  if (has_m_planestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_planestype(), target);
  }

  // optional string m_typeArgs = 3;
  if (has_m_typeargs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typeargs().data(), this->m_typeargs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_typeargs(), target);
  }

  // optional int32 m_areaId = 4;
  if (has_m_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupPlanes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_planesType = 2;
    if (has_m_planestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_planestype());
    }

    // optional string m_typeArgs = 3;
    if (has_m_typeargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_typeargs());
    }

    // optional int32 m_areaId = 4;
    if (has_m_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupPlanes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupPlanes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupPlanes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupPlanes::MergeFrom(const E_DupPlanes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_planestype()) {
      set_m_planestype(from.m_planestype());
    }
    if (from.has_m_typeargs()) {
      set_m_typeargs(from.m_typeargs());
    }
    if (from.has_m_areaid()) {
      set_m_areaid(from.m_areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupPlanes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupPlanes::CopyFrom(const E_DupPlanes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupPlanes::IsInitialized() const {

  return true;
}

void E_DupPlanes::Swap(E_DupPlanes* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_planestype_, other->m_planestype_);
    std::swap(m_typeargs_, other->m_typeargs_);
    std::swap(m_areaid_, other->m_areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupPlanes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupPlanes_descriptor_;
  metadata.reflection = E_DupPlanes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupPlanes::kEDupPlanesListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupPlanes::Sheet_DupPlanes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupPlanes::InitAsDefaultInstance() {
}

Sheet_DupPlanes::Sheet_DupPlanes(const Sheet_DupPlanes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupPlanes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupPlanes::~Sheet_DupPlanes() {
  SharedDtor();
}

void Sheet_DupPlanes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupPlanes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupPlanes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupPlanes_descriptor_;
}

const Sheet_DupPlanes& Sheet_DupPlanes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupPlanes* Sheet_DupPlanes::default_instance_ = NULL;

Sheet_DupPlanes* Sheet_DupPlanes::New() const {
  return new Sheet_DupPlanes;
}

void Sheet_DupPlanes::Clear() {
  e_dupplanes_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupPlanes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupPlanes E_DupPlanes_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupPlanes_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupplanes_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupPlanes_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupPlanes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupPlanes E_DupPlanes_List = 1;
  for (int i = 0; i < this->e_dupplanes_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupplanes_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupPlanes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupPlanes E_DupPlanes_List = 1;
  for (int i = 0; i < this->e_dupplanes_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupplanes_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupPlanes::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupPlanes E_DupPlanes_List = 1;
  total_size += 1 * this->e_dupplanes_list_size();
  for (int i = 0; i < this->e_dupplanes_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupplanes_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupPlanes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupPlanes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupPlanes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupPlanes::MergeFrom(const Sheet_DupPlanes& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupplanes_list_.MergeFrom(from.e_dupplanes_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupPlanes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupPlanes::CopyFrom(const Sheet_DupPlanes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupPlanes::IsInitialized() const {

  return true;
}

void Sheet_DupPlanes::Swap(Sheet_DupPlanes* other) {
  if (other != this) {
    e_dupplanes_list_.Swap(&other->e_dupplanes_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupPlanes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupPlanes_descriptor_;
  metadata.reflection = Sheet_DupPlanes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupYt_dupClearDesc::kMAddFieldNumber;
const int E_DupYt_dupClearDesc::kMTimeFieldNumber;
#endif  // !_MSC_VER

E_DupYt_dupClearDesc::E_DupYt_dupClearDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupYt_dupClearDesc::InitAsDefaultInstance() {
}

E_DupYt_dupClearDesc::E_DupYt_dupClearDesc(const E_DupYt_dupClearDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupYt_dupClearDesc::SharedCtor() {
  _cached_size_ = 0;
  m_add_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupYt_dupClearDesc::~E_DupYt_dupClearDesc() {
  SharedDtor();
}

void E_DupYt_dupClearDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupYt_dupClearDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupYt_dupClearDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupYt_dupClearDesc_descriptor_;
}

const E_DupYt_dupClearDesc& E_DupYt_dupClearDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupYt_dupClearDesc* E_DupYt_dupClearDesc::default_instance_ = NULL;

E_DupYt_dupClearDesc* E_DupYt_dupClearDesc::New() const {
  return new E_DupYt_dupClearDesc;
}

void E_DupYt_dupClearDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_add_ = 0;
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupYt_dupClearDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_add = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_add_)));
          set_has_m_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupYt_dupClearDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_add = 1;
  if (has_m_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_add(), output);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupYt_dupClearDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_add = 1;
  if (has_m_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_add(), target);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupYt_dupClearDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_add = 1;
    if (has_m_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_add());
    }

    // optional int32 m_time = 2;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupYt_dupClearDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupYt_dupClearDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupYt_dupClearDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupYt_dupClearDesc::MergeFrom(const E_DupYt_dupClearDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_add()) {
      set_m_add(from.m_add());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupYt_dupClearDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupYt_dupClearDesc::CopyFrom(const E_DupYt_dupClearDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupYt_dupClearDesc::IsInitialized() const {

  return true;
}

void E_DupYt_dupClearDesc::Swap(E_DupYt_dupClearDesc* other) {
  if (other != this) {
    std::swap(m_add_, other->m_add_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupYt_dupClearDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupYt_dupClearDesc_descriptor_;
  metadata.reflection = E_DupYt_dupClearDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DupYt_dup::kMIdFieldNumber;
const int E_DupYt_dup::kMLayerFieldNumber;
const int E_DupYt_dup::kMStageFieldNumber;
const int E_DupYt_dup::kMRecommendLvFieldNumber;
const int E_DupYt_dup::kMRecommendYKFieldNumber;
const int E_DupYt_dup::kMRewardFieldNumber;
const int E_DupYt_dup::kMFirstPassFieldNumber;
const int E_DupYt_dup::kMOverlordBoxFieldNumber;
const int E_DupYt_dup::kMOverlordTimeFieldNumber;
const int E_DupYt_dup::kMClearFieldNumber;
#endif  // !_MSC_VER

E_DupYt_dup::E_DupYt_dup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DupYt_dup::InitAsDefaultInstance() {
}

E_DupYt_dup::E_DupYt_dup(const E_DupYt_dup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DupYt_dup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_layer_ = 0;
  m_stage_ = 0;
  m_recommendlv_ = 0;
  m_recommendyk_ = 0;
  m_reward_ = 0;
  m_firstpass_ = 0;
  m_overlordbox_ = 0;
  m_overlordtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DupYt_dup::~E_DupYt_dup() {
  SharedDtor();
}

void E_DupYt_dup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DupYt_dup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DupYt_dup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DupYt_dup_descriptor_;
}

const E_DupYt_dup& E_DupYt_dup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

E_DupYt_dup* E_DupYt_dup::default_instance_ = NULL;

E_DupYt_dup* E_DupYt_dup::New() const {
  return new E_DupYt_dup;
}

void E_DupYt_dup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_layer_ = 0;
    m_stage_ = 0;
    m_recommendlv_ = 0;
    m_recommendyk_ = 0;
    m_reward_ = 0;
    m_firstpass_ = 0;
    m_overlordbox_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_overlordtime_ = 0;
  }
  m_clear_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DupYt_dup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_layer;
        break;
      }

      // optional int32 m_layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_layer_)));
          set_has_m_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_stage;
        break;
      }

      // optional int32 m_stage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_stage_)));
          set_has_m_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_recommendLv;
        break;
      }

      // optional int32 m_recommendLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recommendLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_recommendlv_)));
          set_has_m_recommendlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_recommendYK;
        break;
      }

      // optional int32 m_recommendYK = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recommendYK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_recommendyk_)));
          set_has_m_recommendyk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_firstPass;
        break;
      }

      // optional int32 m_firstPass = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_firstPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_firstpass_)));
          set_has_m_firstpass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_overlordBox;
        break;
      }

      // optional int32 m_overlordBox = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_overlordBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_overlordbox_)));
          set_has_m_overlordbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_overlordTime;
        break;
      }

      // optional int32 m_overlordTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_overlordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_overlordtime_)));
          set_has_m_overlordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_clear;
        break;
      }

      // repeated .proto_ff.E_DupYt_dupClearDesc m_clear = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_clear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_clear()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_clear;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DupYt_dup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_layer = 2;
  if (has_m_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_layer(), output);
  }

  // optional int32 m_stage = 3;
  if (has_m_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_stage(), output);
  }

  // optional int32 m_recommendLv = 4;
  if (has_m_recommendlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_recommendlv(), output);
  }

  // optional int32 m_recommendYK = 5;
  if (has_m_recommendyk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_recommendyk(), output);
  }

  // optional int32 m_reward = 6;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_reward(), output);
  }

  // optional int32 m_firstPass = 7;
  if (has_m_firstpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_firstpass(), output);
  }

  // optional int32 m_overlordBox = 8;
  if (has_m_overlordbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_overlordbox(), output);
  }

  // optional int32 m_overlordTime = 9;
  if (has_m_overlordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_overlordtime(), output);
  }

  // repeated .proto_ff.E_DupYt_dupClearDesc m_clear = 10;
  for (int i = 0; i < this->m_clear_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_clear(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DupYt_dup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_layer = 2;
  if (has_m_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_layer(), target);
  }

  // optional int32 m_stage = 3;
  if (has_m_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_stage(), target);
  }

  // optional int32 m_recommendLv = 4;
  if (has_m_recommendlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_recommendlv(), target);
  }

  // optional int32 m_recommendYK = 5;
  if (has_m_recommendyk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_recommendyk(), target);
  }

  // optional int32 m_reward = 6;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_reward(), target);
  }

  // optional int32 m_firstPass = 7;
  if (has_m_firstpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_firstpass(), target);
  }

  // optional int32 m_overlordBox = 8;
  if (has_m_overlordbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_overlordbox(), target);
  }

  // optional int32 m_overlordTime = 9;
  if (has_m_overlordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_overlordtime(), target);
  }

  // repeated .proto_ff.E_DupYt_dupClearDesc m_clear = 10;
  for (int i = 0; i < this->m_clear_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_clear(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DupYt_dup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_layer = 2;
    if (has_m_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_layer());
    }

    // optional int32 m_stage = 3;
    if (has_m_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_stage());
    }

    // optional int32 m_recommendLv = 4;
    if (has_m_recommendlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_recommendlv());
    }

    // optional int32 m_recommendYK = 5;
    if (has_m_recommendyk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_recommendyk());
    }

    // optional int32 m_reward = 6;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_firstPass = 7;
    if (has_m_firstpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_firstpass());
    }

    // optional int32 m_overlordBox = 8;
    if (has_m_overlordbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_overlordbox());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_overlordTime = 9;
    if (has_m_overlordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_overlordtime());
    }

  }
  // repeated .proto_ff.E_DupYt_dupClearDesc m_clear = 10;
  total_size += 1 * this->m_clear_size();
  for (int i = 0; i < this->m_clear_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_clear(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DupYt_dup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DupYt_dup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DupYt_dup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DupYt_dup::MergeFrom(const E_DupYt_dup& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_clear_.MergeFrom(from.m_clear_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_layer()) {
      set_m_layer(from.m_layer());
    }
    if (from.has_m_stage()) {
      set_m_stage(from.m_stage());
    }
    if (from.has_m_recommendlv()) {
      set_m_recommendlv(from.m_recommendlv());
    }
    if (from.has_m_recommendyk()) {
      set_m_recommendyk(from.m_recommendyk());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_firstpass()) {
      set_m_firstpass(from.m_firstpass());
    }
    if (from.has_m_overlordbox()) {
      set_m_overlordbox(from.m_overlordbox());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_overlordtime()) {
      set_m_overlordtime(from.m_overlordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DupYt_dup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DupYt_dup::CopyFrom(const E_DupYt_dup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DupYt_dup::IsInitialized() const {

  return true;
}

void E_DupYt_dup::Swap(E_DupYt_dup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_layer_, other->m_layer_);
    std::swap(m_stage_, other->m_stage_);
    std::swap(m_recommendlv_, other->m_recommendlv_);
    std::swap(m_recommendyk_, other->m_recommendyk_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_firstpass_, other->m_firstpass_);
    std::swap(m_overlordbox_, other->m_overlordbox_);
    std::swap(m_overlordtime_, other->m_overlordtime_);
    m_clear_.Swap(&other->m_clear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DupYt_dup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DupYt_dup_descriptor_;
  metadata.reflection = E_DupYt_dup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DupYt_dup::kEDupYtDupListFieldNumber;
#endif  // !_MSC_VER

Sheet_DupYt_dup::Sheet_DupYt_dup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DupYt_dup::InitAsDefaultInstance() {
}

Sheet_DupYt_dup::Sheet_DupYt_dup(const Sheet_DupYt_dup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DupYt_dup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DupYt_dup::~Sheet_DupYt_dup() {
  SharedDtor();
}

void Sheet_DupYt_dup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DupYt_dup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DupYt_dup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DupYt_dup_descriptor_;
}

const Sheet_DupYt_dup& Sheet_DupYt_dup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fDup_2eproto();
  return *default_instance_;
}

Sheet_DupYt_dup* Sheet_DupYt_dup::default_instance_ = NULL;

Sheet_DupYt_dup* Sheet_DupYt_dup::New() const {
  return new Sheet_DupYt_dup;
}

void Sheet_DupYt_dup::Clear() {
  e_dupyt_dup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DupYt_dup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DupYt_dup E_DupYt_dup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DupYt_dup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dupyt_dup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DupYt_dup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DupYt_dup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DupYt_dup E_DupYt_dup_List = 1;
  for (int i = 0; i < this->e_dupyt_dup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dupyt_dup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DupYt_dup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DupYt_dup E_DupYt_dup_List = 1;
  for (int i = 0; i < this->e_dupyt_dup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dupyt_dup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DupYt_dup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DupYt_dup E_DupYt_dup_List = 1;
  total_size += 1 * this->e_dupyt_dup_list_size();
  for (int i = 0; i < this->e_dupyt_dup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dupyt_dup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DupYt_dup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DupYt_dup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DupYt_dup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DupYt_dup::MergeFrom(const Sheet_DupYt_dup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dupyt_dup_list_.MergeFrom(from.e_dupyt_dup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DupYt_dup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DupYt_dup::CopyFrom(const Sheet_DupYt_dup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DupYt_dup::IsInitialized() const {

  return true;
}

void Sheet_DupYt_dup::Swap(Sheet_DupYt_dup* other) {
  if (other != this) {
    e_dupyt_dup_list_.Swap(&other->e_dupyt_dup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DupYt_dup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DupYt_dup_descriptor_;
  metadata.reflection = Sheet_DupYt_dup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
