// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BestEQ.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BestEQ.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyBestEQData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBestEQData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBestEQSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBestEQSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBestEQEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBestEQEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBestEQTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBestEQTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQRecvTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQRecvTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQRecvTaskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQRecvTaskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQDecomposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQDecomposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQDecomposeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQDecomposeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQReturnPreViewReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQReturnPreViewReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQReturnPreViewRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQReturnPreViewRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQReturnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQReturnReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQReturnRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQReturnRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQPourReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQPourReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQPourRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQPourRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQBreakReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQBreakReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQBreakRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQBreakRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQAwakenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQAwakenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQAwakenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQAwakenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQStrongReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQStrongReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQStrongRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQStrongRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQBreakConfirmReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQBreakConfirmReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQBreakConfirmRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQBreakConfirmRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BestEQ_2eproto() {
  protobuf_AddDesc_BestEQ_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BestEQ.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyBestEQData_descriptor_ = file->message_type(0);
  static const int NotifyBestEQData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQData, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQData, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQData, tasks_),
  };
  NotifyBestEQData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBestEQData_descriptor_,
      NotifyBestEQData::default_instance_,
      NotifyBestEQData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBestEQData));
  NotifyBestEQSlot_descriptor_ = file->message_type(1);
  static const int NotifyBestEQSlot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQSlot, slot_),
  };
  NotifyBestEQSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBestEQSlot_descriptor_,
      NotifyBestEQSlot::default_instance_,
      NotifyBestEQSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBestEQSlot));
  NotifyBestEQEquip_descriptor_ = file->message_type(2);
  static const int NotifyBestEQEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQEquip, infos_),
  };
  NotifyBestEQEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBestEQEquip_descriptor_,
      NotifyBestEQEquip::default_instance_,
      NotifyBestEQEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBestEQEquip));
  NotifyBestEQTask_descriptor_ = file->message_type(3);
  static const int NotifyBestEQTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQTask, tasks_),
  };
  NotifyBestEQTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBestEQTask_descriptor_,
      NotifyBestEQTask::default_instance_,
      NotifyBestEQTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBestEQTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBestEQTask));
  BestEQRecvTaskReq_descriptor_ = file->message_type(4);
  static const int BestEQRecvTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQRecvTaskReq, id_),
  };
  BestEQRecvTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQRecvTaskReq_descriptor_,
      BestEQRecvTaskReq::default_instance_,
      BestEQRecvTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQRecvTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQRecvTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQRecvTaskReq));
  BestEQRecvTaskRsp_descriptor_ = file->message_type(5);
  static const int BestEQRecvTaskRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQRecvTaskRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQRecvTaskRsp, id_),
  };
  BestEQRecvTaskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQRecvTaskRsp_descriptor_,
      BestEQRecvTaskRsp::default_instance_,
      BestEQRecvTaskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQRecvTaskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQRecvTaskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQRecvTaskRsp));
  BestEQDecomposeReq_descriptor_ = file->message_type(6);
  static const int BestEQDecomposeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDecomposeReq, instid_),
  };
  BestEQDecomposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQDecomposeReq_descriptor_,
      BestEQDecomposeReq::default_instance_,
      BestEQDecomposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDecomposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDecomposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQDecomposeReq));
  BestEQDecomposeRsp_descriptor_ = file->message_type(7);
  static const int BestEQDecomposeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDecomposeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDecomposeRsp, instid_),
  };
  BestEQDecomposeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQDecomposeRsp_descriptor_,
      BestEQDecomposeRsp::default_instance_,
      BestEQDecomposeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDecomposeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDecomposeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQDecomposeRsp));
  BestEQReturnPreViewReq_descriptor_ = file->message_type(8);
  static const int BestEQReturnPreViewReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnPreViewReq, instid_),
  };
  BestEQReturnPreViewReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQReturnPreViewReq_descriptor_,
      BestEQReturnPreViewReq::default_instance_,
      BestEQReturnPreViewReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnPreViewReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnPreViewReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQReturnPreViewReq));
  BestEQReturnPreViewRsp_descriptor_ = file->message_type(9);
  static const int BestEQReturnPreViewRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnPreViewRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnPreViewRsp, instid_),
  };
  BestEQReturnPreViewRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQReturnPreViewRsp_descriptor_,
      BestEQReturnPreViewRsp::default_instance_,
      BestEQReturnPreViewRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnPreViewRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnPreViewRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQReturnPreViewRsp));
  BestEQReturnReq_descriptor_ = file->message_type(10);
  static const int BestEQReturnReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnReq, instid_),
  };
  BestEQReturnReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQReturnReq_descriptor_,
      BestEQReturnReq::default_instance_,
      BestEQReturnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQReturnReq));
  BestEQReturnRsp_descriptor_ = file->message_type(11);
  static const int BestEQReturnRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnRsp, instid_),
  };
  BestEQReturnRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQReturnRsp_descriptor_,
      BestEQReturnRsp::default_instance_,
      BestEQReturnRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQReturnRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQReturnRsp));
  BestEQDressReq_descriptor_ = file->message_type(12);
  static const int BestEQDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDressReq, instid_),
  };
  BestEQDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQDressReq_descriptor_,
      BestEQDressReq::default_instance_,
      BestEQDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQDressReq));
  BestEQDressRsp_descriptor_ = file->message_type(13);
  static const int BestEQDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDressRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDressRsp, instid_),
  };
  BestEQDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQDressRsp_descriptor_,
      BestEQDressRsp::default_instance_,
      BestEQDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQDressRsp));
  BestEQPourReq_descriptor_ = file->message_type(14);
  static const int BestEQPourReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQPourReq, slot_),
  };
  BestEQPourReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQPourReq_descriptor_,
      BestEQPourReq::default_instance_,
      BestEQPourReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQPourReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQPourReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQPourReq));
  BestEQPourRsp_descriptor_ = file->message_type(15);
  static const int BestEQPourRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQPourRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQPourRsp, slot_),
  };
  BestEQPourRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQPourRsp_descriptor_,
      BestEQPourRsp::default_instance_,
      BestEQPourRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQPourRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQPourRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQPourRsp));
  BestEQBreakReq_descriptor_ = file->message_type(16);
  static const int BestEQBreakReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakReq, slot_),
  };
  BestEQBreakReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQBreakReq_descriptor_,
      BestEQBreakReq::default_instance_,
      BestEQBreakReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQBreakReq));
  BestEQBreakRsp_descriptor_ = file->message_type(17);
  static const int BestEQBreakRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakRsp, slot_),
  };
  BestEQBreakRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQBreakRsp_descriptor_,
      BestEQBreakRsp::default_instance_,
      BestEQBreakRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQBreakRsp));
  BestEQAwakenReq_descriptor_ = file->message_type(18);
  static const int BestEQAwakenReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQAwakenReq, slot_),
  };
  BestEQAwakenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQAwakenReq_descriptor_,
      BestEQAwakenReq::default_instance_,
      BestEQAwakenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQAwakenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQAwakenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQAwakenReq));
  BestEQAwakenRsp_descriptor_ = file->message_type(19);
  static const int BestEQAwakenRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQAwakenRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQAwakenRsp, slot_),
  };
  BestEQAwakenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQAwakenRsp_descriptor_,
      BestEQAwakenRsp::default_instance_,
      BestEQAwakenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQAwakenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQAwakenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQAwakenRsp));
  BestEQStrongReq_descriptor_ = file->message_type(20);
  static const int BestEQStrongReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongReq, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongReq, costinstid_),
  };
  BestEQStrongReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQStrongReq_descriptor_,
      BestEQStrongReq::default_instance_,
      BestEQStrongReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQStrongReq));
  BestEQStrongRsp_descriptor_ = file->message_type(21);
  static const int BestEQStrongRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongRsp, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongRsp, costinstid_),
  };
  BestEQStrongRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQStrongRsp_descriptor_,
      BestEQStrongRsp::default_instance_,
      BestEQStrongRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQStrongRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQStrongRsp));
  BestEQBreakConfirmReq_descriptor_ = file->message_type(22);
  static const int BestEQBreakConfirmReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmReq, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmReq, type_),
  };
  BestEQBreakConfirmReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQBreakConfirmReq_descriptor_,
      BestEQBreakConfirmReq::default_instance_,
      BestEQBreakConfirmReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQBreakConfirmReq));
  BestEQBreakConfirmRsp_descriptor_ = file->message_type(23);
  static const int BestEQBreakConfirmRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmRsp, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmRsp, type_),
  };
  BestEQBreakConfirmRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQBreakConfirmRsp_descriptor_,
      BestEQBreakConfirmRsp::default_instance_,
      BestEQBreakConfirmRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreakConfirmRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQBreakConfirmRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BestEQ_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBestEQData_descriptor_, &NotifyBestEQData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBestEQSlot_descriptor_, &NotifyBestEQSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBestEQEquip_descriptor_, &NotifyBestEQEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBestEQTask_descriptor_, &NotifyBestEQTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQRecvTaskReq_descriptor_, &BestEQRecvTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQRecvTaskRsp_descriptor_, &BestEQRecvTaskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQDecomposeReq_descriptor_, &BestEQDecomposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQDecomposeRsp_descriptor_, &BestEQDecomposeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQReturnPreViewReq_descriptor_, &BestEQReturnPreViewReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQReturnPreViewRsp_descriptor_, &BestEQReturnPreViewRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQReturnReq_descriptor_, &BestEQReturnReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQReturnRsp_descriptor_, &BestEQReturnRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQDressReq_descriptor_, &BestEQDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQDressRsp_descriptor_, &BestEQDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQPourReq_descriptor_, &BestEQPourReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQPourRsp_descriptor_, &BestEQPourRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQBreakReq_descriptor_, &BestEQBreakReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQBreakRsp_descriptor_, &BestEQBreakRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQAwakenReq_descriptor_, &BestEQAwakenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQAwakenRsp_descriptor_, &BestEQAwakenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQStrongReq_descriptor_, &BestEQStrongReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQStrongRsp_descriptor_, &BestEQStrongRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQBreakConfirmReq_descriptor_, &BestEQBreakConfirmReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQBreakConfirmRsp_descriptor_, &BestEQBreakConfirmRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BestEQ_2eproto() {
  delete NotifyBestEQData::default_instance_;
  delete NotifyBestEQData_reflection_;
  delete NotifyBestEQSlot::default_instance_;
  delete NotifyBestEQSlot_reflection_;
  delete NotifyBestEQEquip::default_instance_;
  delete NotifyBestEQEquip_reflection_;
  delete NotifyBestEQTask::default_instance_;
  delete NotifyBestEQTask_reflection_;
  delete BestEQRecvTaskReq::default_instance_;
  delete BestEQRecvTaskReq_reflection_;
  delete BestEQRecvTaskRsp::default_instance_;
  delete BestEQRecvTaskRsp_reflection_;
  delete BestEQDecomposeReq::default_instance_;
  delete BestEQDecomposeReq_reflection_;
  delete BestEQDecomposeRsp::default_instance_;
  delete BestEQDecomposeRsp_reflection_;
  delete BestEQReturnPreViewReq::default_instance_;
  delete BestEQReturnPreViewReq_reflection_;
  delete BestEQReturnPreViewRsp::default_instance_;
  delete BestEQReturnPreViewRsp_reflection_;
  delete BestEQReturnReq::default_instance_;
  delete BestEQReturnReq_reflection_;
  delete BestEQReturnRsp::default_instance_;
  delete BestEQReturnRsp_reflection_;
  delete BestEQDressReq::default_instance_;
  delete BestEQDressReq_reflection_;
  delete BestEQDressRsp::default_instance_;
  delete BestEQDressRsp_reflection_;
  delete BestEQPourReq::default_instance_;
  delete BestEQPourReq_reflection_;
  delete BestEQPourRsp::default_instance_;
  delete BestEQPourRsp_reflection_;
  delete BestEQBreakReq::default_instance_;
  delete BestEQBreakReq_reflection_;
  delete BestEQBreakRsp::default_instance_;
  delete BestEQBreakRsp_reflection_;
  delete BestEQAwakenReq::default_instance_;
  delete BestEQAwakenReq_reflection_;
  delete BestEQAwakenRsp::default_instance_;
  delete BestEQAwakenRsp_reflection_;
  delete BestEQStrongReq::default_instance_;
  delete BestEQStrongReq_reflection_;
  delete BestEQStrongRsp::default_instance_;
  delete BestEQStrongRsp_reflection_;
  delete BestEQBreakConfirmReq::default_instance_;
  delete BestEQBreakConfirmReq_reflection_;
  delete BestEQBreakConfirmRsp::default_instance_;
  delete BestEQBreakConfirmRsp_reflection_;
}

void protobuf_AddDesc_BestEQ_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014BestEQ.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\032\022common_logic.proto\032\tCom.proto\"\213"
    "\001\n\020NotifyBestEQData\022\'\n\005slots\030\001 \003(\0132\030.pro"
    "to_ff.BestEQSlotInfo\022)\n\006equips\030\002 \003(\0132\031.p"
    "roto_ff.BestEQEquipInfo\022#\n\005tasks\030\003 \003(\0132\024"
    ".proto_ff.BestEQTask\":\n\020NotifyBestEQSlot"
    "\022&\n\004slot\030\001 \001(\0132\030.proto_ff.BestEQSlotInfo"
    "\"K\n\021NotifyBestEQEquip\022\014\n\004type\030\001 \001(\005\022(\n\005i"
    "nfos\030\002 \003(\0132\031.proto_ff.BestEQEquipInfo\"7\n"
    "\020NotifyBestEQTask\022#\n\005tasks\030\001 \003(\0132\024.proto"
    "_ff.BestEQTask\"\037\n\021BestEQRecvTaskReq\022\n\n\002i"
    "d\030\001 \001(\005\",\n\021BestEQRecvTaskRsp\022\013\n\003ret\030\001 \001("
    "\005\022\n\n\002id\030\002 \001(\005\"$\n\022BestEQDecomposeReq\022\016\n\006i"
    "nstId\030\001 \001(\005\"1\n\022BestEQDecomposeRsp\022\013\n\003ret"
    "\030\001 \001(\005\022\016\n\006instId\030\002 \001(\005\"(\n\026BestEQReturnPr"
    "eViewReq\022\016\n\006instId\030\001 \001(\005\"5\n\026BestEQReturn"
    "PreViewRsp\022\013\n\003ret\030\001 \001(\005\022\016\n\006instId\030\002 \001(\005\""
    "!\n\017BestEQReturnReq\022\016\n\006instId\030\001 \001(\005\".\n\017Be"
    "stEQReturnRsp\022\013\n\003ret\030\001 \001(\005\022\016\n\006instId\030\002 \001"
    "(\005\" \n\016BestEQDressReq\022\016\n\006instId\030\001 \001(\005\"-\n\016"
    "BestEQDressRsp\022\013\n\003ret\030\001 \001(\005\022\016\n\006instId\030\002 "
    "\001(\005\"\035\n\rBestEQPourReq\022\014\n\004slot\030\001 \001(\005\"*\n\rBe"
    "stEQPourRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\"\036"
    "\n\016BestEQBreakReq\022\014\n\004slot\030\001 \001(\005\"+\n\016BestEQ"
    "BreakRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\"\037\n\017B"
    "estEQAwakenReq\022\014\n\004slot\030\001 \001(\005\",\n\017BestEQAw"
    "akenRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\"5\n\017Be"
    "stEQStrongReq\022\016\n\006instId\030\001 \001(\005\022\022\n\ncostIns"
    "tId\030\002 \003(\005\"B\n\017BestEQStrongRsp\022\013\n\003ret\030\001 \001("
    "\005\022\016\n\006instId\030\002 \001(\005\022\022\n\ncostInstId\030\003 \003(\005\"3\n"
    "\025BestEQBreakConfirmReq\022\014\n\004slot\030\001 \001(\005\022\014\n\004"
    "type\030\002 \001(\005\"@\n\025BestEQBreakConfirmRsp\022\013\n\003r"
    "et\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\022\014\n\004type\030\003 \001(\005", 1316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BestEQ.proto", &protobuf_RegisterTypes);
  NotifyBestEQData::default_instance_ = new NotifyBestEQData();
  NotifyBestEQSlot::default_instance_ = new NotifyBestEQSlot();
  NotifyBestEQEquip::default_instance_ = new NotifyBestEQEquip();
  NotifyBestEQTask::default_instance_ = new NotifyBestEQTask();
  BestEQRecvTaskReq::default_instance_ = new BestEQRecvTaskReq();
  BestEQRecvTaskRsp::default_instance_ = new BestEQRecvTaskRsp();
  BestEQDecomposeReq::default_instance_ = new BestEQDecomposeReq();
  BestEQDecomposeRsp::default_instance_ = new BestEQDecomposeRsp();
  BestEQReturnPreViewReq::default_instance_ = new BestEQReturnPreViewReq();
  BestEQReturnPreViewRsp::default_instance_ = new BestEQReturnPreViewRsp();
  BestEQReturnReq::default_instance_ = new BestEQReturnReq();
  BestEQReturnRsp::default_instance_ = new BestEQReturnRsp();
  BestEQDressReq::default_instance_ = new BestEQDressReq();
  BestEQDressRsp::default_instance_ = new BestEQDressRsp();
  BestEQPourReq::default_instance_ = new BestEQPourReq();
  BestEQPourRsp::default_instance_ = new BestEQPourRsp();
  BestEQBreakReq::default_instance_ = new BestEQBreakReq();
  BestEQBreakRsp::default_instance_ = new BestEQBreakRsp();
  BestEQAwakenReq::default_instance_ = new BestEQAwakenReq();
  BestEQAwakenRsp::default_instance_ = new BestEQAwakenRsp();
  BestEQStrongReq::default_instance_ = new BestEQStrongReq();
  BestEQStrongRsp::default_instance_ = new BestEQStrongRsp();
  BestEQBreakConfirmReq::default_instance_ = new BestEQBreakConfirmReq();
  BestEQBreakConfirmRsp::default_instance_ = new BestEQBreakConfirmRsp();
  NotifyBestEQData::default_instance_->InitAsDefaultInstance();
  NotifyBestEQSlot::default_instance_->InitAsDefaultInstance();
  NotifyBestEQEquip::default_instance_->InitAsDefaultInstance();
  NotifyBestEQTask::default_instance_->InitAsDefaultInstance();
  BestEQRecvTaskReq::default_instance_->InitAsDefaultInstance();
  BestEQRecvTaskRsp::default_instance_->InitAsDefaultInstance();
  BestEQDecomposeReq::default_instance_->InitAsDefaultInstance();
  BestEQDecomposeRsp::default_instance_->InitAsDefaultInstance();
  BestEQReturnPreViewReq::default_instance_->InitAsDefaultInstance();
  BestEQReturnPreViewRsp::default_instance_->InitAsDefaultInstance();
  BestEQReturnReq::default_instance_->InitAsDefaultInstance();
  BestEQReturnRsp::default_instance_->InitAsDefaultInstance();
  BestEQDressReq::default_instance_->InitAsDefaultInstance();
  BestEQDressRsp::default_instance_->InitAsDefaultInstance();
  BestEQPourReq::default_instance_->InitAsDefaultInstance();
  BestEQPourRsp::default_instance_->InitAsDefaultInstance();
  BestEQBreakReq::default_instance_->InitAsDefaultInstance();
  BestEQBreakRsp::default_instance_->InitAsDefaultInstance();
  BestEQAwakenReq::default_instance_->InitAsDefaultInstance();
  BestEQAwakenRsp::default_instance_->InitAsDefaultInstance();
  BestEQStrongReq::default_instance_->InitAsDefaultInstance();
  BestEQStrongRsp::default_instance_->InitAsDefaultInstance();
  BestEQBreakConfirmReq::default_instance_->InitAsDefaultInstance();
  BestEQBreakConfirmRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BestEQ_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BestEQ_2eproto {
  StaticDescriptorInitializer_BestEQ_2eproto() {
    protobuf_AddDesc_BestEQ_2eproto();
  }
} static_descriptor_initializer_BestEQ_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyBestEQData::kSlotsFieldNumber;
const int NotifyBestEQData::kEquipsFieldNumber;
const int NotifyBestEQData::kTasksFieldNumber;
#endif  // !_MSC_VER

NotifyBestEQData::NotifyBestEQData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBestEQData::InitAsDefaultInstance() {
}

NotifyBestEQData::NotifyBestEQData(const NotifyBestEQData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBestEQData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBestEQData::~NotifyBestEQData() {
  SharedDtor();
}

void NotifyBestEQData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBestEQData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBestEQData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBestEQData_descriptor_;
}

const NotifyBestEQData& NotifyBestEQData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

NotifyBestEQData* NotifyBestEQData::default_instance_ = NULL;

NotifyBestEQData* NotifyBestEQData::New() const {
  return new NotifyBestEQData;
}

void NotifyBestEQData::Clear() {
  slots_.Clear();
  equips_.Clear();
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBestEQData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BestEQSlotInfo slots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slots;
        if (input->ExpectTag(18)) goto parse_equips;
        break;
      }

      // repeated .proto_ff.BestEQEquipInfo equips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        if (input->ExpectTag(26)) goto parse_tasks;
        break;
      }

      // repeated .proto_ff.BestEQTask tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBestEQData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BestEQSlotInfo slots = 1;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slots(i), output);
  }

  // repeated .proto_ff.BestEQEquipInfo equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equips(i), output);
  }

  // repeated .proto_ff.BestEQTask tasks = 3;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBestEQData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BestEQSlotInfo slots = 1;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slots(i), target);
  }

  // repeated .proto_ff.BestEQEquipInfo equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equips(i), target);
  }

  // repeated .proto_ff.BestEQTask tasks = 3;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBestEQData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BestEQSlotInfo slots = 1;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  // repeated .proto_ff.BestEQEquipInfo equips = 2;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .proto_ff.BestEQTask tasks = 3;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBestEQData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBestEQData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBestEQData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBestEQData::MergeFrom(const NotifyBestEQData& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  equips_.MergeFrom(from.equips_);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBestEQData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBestEQData::CopyFrom(const NotifyBestEQData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBestEQData::IsInitialized() const {

  return true;
}

void NotifyBestEQData::Swap(NotifyBestEQData* other) {
  if (other != this) {
    slots_.Swap(&other->slots_);
    equips_.Swap(&other->equips_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBestEQData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBestEQData_descriptor_;
  metadata.reflection = NotifyBestEQData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBestEQSlot::kSlotFieldNumber;
#endif  // !_MSC_VER

NotifyBestEQSlot::NotifyBestEQSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBestEQSlot::InitAsDefaultInstance() {
  slot_ = const_cast< ::proto_ff::BestEQSlotInfo*>(&::proto_ff::BestEQSlotInfo::default_instance());
}

NotifyBestEQSlot::NotifyBestEQSlot(const NotifyBestEQSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBestEQSlot::SharedCtor() {
  _cached_size_ = 0;
  slot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBestEQSlot::~NotifyBestEQSlot() {
  SharedDtor();
}

void NotifyBestEQSlot::SharedDtor() {
  if (this != default_instance_) {
    delete slot_;
  }
}

void NotifyBestEQSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBestEQSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBestEQSlot_descriptor_;
}

const NotifyBestEQSlot& NotifyBestEQSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

NotifyBestEQSlot* NotifyBestEQSlot::default_instance_ = NULL;

NotifyBestEQSlot* NotifyBestEQSlot::New() const {
  return new NotifyBestEQSlot;
}

void NotifyBestEQSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_slot()) {
      if (slot_ != NULL) slot_->::proto_ff::BestEQSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBestEQSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.BestEQSlotInfo slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBestEQSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.BestEQSlotInfo slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBestEQSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.BestEQSlotInfo slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBestEQSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.BestEQSlotInfo slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBestEQSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBestEQSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBestEQSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBestEQSlot::MergeFrom(const NotifyBestEQSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      mutable_slot()->::proto_ff::BestEQSlotInfo::MergeFrom(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBestEQSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBestEQSlot::CopyFrom(const NotifyBestEQSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBestEQSlot::IsInitialized() const {

  return true;
}

void NotifyBestEQSlot::Swap(NotifyBestEQSlot* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBestEQSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBestEQSlot_descriptor_;
  metadata.reflection = NotifyBestEQSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBestEQEquip::kTypeFieldNumber;
const int NotifyBestEQEquip::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyBestEQEquip::NotifyBestEQEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBestEQEquip::InitAsDefaultInstance() {
}

NotifyBestEQEquip::NotifyBestEQEquip(const NotifyBestEQEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBestEQEquip::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBestEQEquip::~NotifyBestEQEquip() {
  SharedDtor();
}

void NotifyBestEQEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBestEQEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBestEQEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBestEQEquip_descriptor_;
}

const NotifyBestEQEquip& NotifyBestEQEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

NotifyBestEQEquip* NotifyBestEQEquip::default_instance_ = NULL;

NotifyBestEQEquip* NotifyBestEQEquip::New() const {
  return new NotifyBestEQEquip;
}

void NotifyBestEQEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBestEQEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.BestEQEquipInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBestEQEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.BestEQEquipInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBestEQEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.BestEQEquipInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBestEQEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.BestEQEquipInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBestEQEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBestEQEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBestEQEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBestEQEquip::MergeFrom(const NotifyBestEQEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBestEQEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBestEQEquip::CopyFrom(const NotifyBestEQEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBestEQEquip::IsInitialized() const {

  return true;
}

void NotifyBestEQEquip::Swap(NotifyBestEQEquip* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBestEQEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBestEQEquip_descriptor_;
  metadata.reflection = NotifyBestEQEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBestEQTask::kTasksFieldNumber;
#endif  // !_MSC_VER

NotifyBestEQTask::NotifyBestEQTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBestEQTask::InitAsDefaultInstance() {
}

NotifyBestEQTask::NotifyBestEQTask(const NotifyBestEQTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBestEQTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBestEQTask::~NotifyBestEQTask() {
  SharedDtor();
}

void NotifyBestEQTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBestEQTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBestEQTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBestEQTask_descriptor_;
}

const NotifyBestEQTask& NotifyBestEQTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

NotifyBestEQTask* NotifyBestEQTask::default_instance_ = NULL;

NotifyBestEQTask* NotifyBestEQTask::New() const {
  return new NotifyBestEQTask;
}

void NotifyBestEQTask::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBestEQTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BestEQTask tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBestEQTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BestEQTask tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBestEQTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BestEQTask tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBestEQTask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BestEQTask tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBestEQTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBestEQTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBestEQTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBestEQTask::MergeFrom(const NotifyBestEQTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBestEQTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBestEQTask::CopyFrom(const NotifyBestEQTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBestEQTask::IsInitialized() const {

  return true;
}

void NotifyBestEQTask::Swap(NotifyBestEQTask* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBestEQTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBestEQTask_descriptor_;
  metadata.reflection = NotifyBestEQTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQRecvTaskReq::kIdFieldNumber;
#endif  // !_MSC_VER

BestEQRecvTaskReq::BestEQRecvTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQRecvTaskReq::InitAsDefaultInstance() {
}

BestEQRecvTaskReq::BestEQRecvTaskReq(const BestEQRecvTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQRecvTaskReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQRecvTaskReq::~BestEQRecvTaskReq() {
  SharedDtor();
}

void BestEQRecvTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQRecvTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQRecvTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQRecvTaskReq_descriptor_;
}

const BestEQRecvTaskReq& BestEQRecvTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQRecvTaskReq* BestEQRecvTaskReq::default_instance_ = NULL;

BestEQRecvTaskReq* BestEQRecvTaskReq::New() const {
  return new BestEQRecvTaskReq;
}

void BestEQRecvTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQRecvTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQRecvTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQRecvTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQRecvTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQRecvTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQRecvTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQRecvTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQRecvTaskReq::MergeFrom(const BestEQRecvTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQRecvTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQRecvTaskReq::CopyFrom(const BestEQRecvTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQRecvTaskReq::IsInitialized() const {

  return true;
}

void BestEQRecvTaskReq::Swap(BestEQRecvTaskReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQRecvTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQRecvTaskReq_descriptor_;
  metadata.reflection = BestEQRecvTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQRecvTaskRsp::kRetFieldNumber;
const int BestEQRecvTaskRsp::kIdFieldNumber;
#endif  // !_MSC_VER

BestEQRecvTaskRsp::BestEQRecvTaskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQRecvTaskRsp::InitAsDefaultInstance() {
}

BestEQRecvTaskRsp::BestEQRecvTaskRsp(const BestEQRecvTaskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQRecvTaskRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQRecvTaskRsp::~BestEQRecvTaskRsp() {
  SharedDtor();
}

void BestEQRecvTaskRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQRecvTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQRecvTaskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQRecvTaskRsp_descriptor_;
}

const BestEQRecvTaskRsp& BestEQRecvTaskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQRecvTaskRsp* BestEQRecvTaskRsp::default_instance_ = NULL;

BestEQRecvTaskRsp* BestEQRecvTaskRsp::New() const {
  return new BestEQRecvTaskRsp;
}

void BestEQRecvTaskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQRecvTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQRecvTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQRecvTaskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQRecvTaskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQRecvTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQRecvTaskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQRecvTaskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQRecvTaskRsp::MergeFrom(const BestEQRecvTaskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQRecvTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQRecvTaskRsp::CopyFrom(const BestEQRecvTaskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQRecvTaskRsp::IsInitialized() const {

  return true;
}

void BestEQRecvTaskRsp::Swap(BestEQRecvTaskRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQRecvTaskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQRecvTaskRsp_descriptor_;
  metadata.reflection = BestEQRecvTaskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQDecomposeReq::kInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQDecomposeReq::BestEQDecomposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQDecomposeReq::InitAsDefaultInstance() {
}

BestEQDecomposeReq::BestEQDecomposeReq(const BestEQDecomposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQDecomposeReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQDecomposeReq::~BestEQDecomposeReq() {
  SharedDtor();
}

void BestEQDecomposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQDecomposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQDecomposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQDecomposeReq_descriptor_;
}

const BestEQDecomposeReq& BestEQDecomposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQDecomposeReq* BestEQDecomposeReq::default_instance_ = NULL;

BestEQDecomposeReq* BestEQDecomposeReq::New() const {
  return new BestEQDecomposeReq;
}

void BestEQDecomposeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQDecomposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQDecomposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQDecomposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQDecomposeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQDecomposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQDecomposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQDecomposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQDecomposeReq::MergeFrom(const BestEQDecomposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQDecomposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQDecomposeReq::CopyFrom(const BestEQDecomposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQDecomposeReq::IsInitialized() const {

  return true;
}

void BestEQDecomposeReq::Swap(BestEQDecomposeReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQDecomposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQDecomposeReq_descriptor_;
  metadata.reflection = BestEQDecomposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQDecomposeRsp::kRetFieldNumber;
const int BestEQDecomposeRsp::kInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQDecomposeRsp::BestEQDecomposeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQDecomposeRsp::InitAsDefaultInstance() {
}

BestEQDecomposeRsp::BestEQDecomposeRsp(const BestEQDecomposeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQDecomposeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQDecomposeRsp::~BestEQDecomposeRsp() {
  SharedDtor();
}

void BestEQDecomposeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQDecomposeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQDecomposeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQDecomposeRsp_descriptor_;
}

const BestEQDecomposeRsp& BestEQDecomposeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQDecomposeRsp* BestEQDecomposeRsp::default_instance_ = NULL;

BestEQDecomposeRsp* BestEQDecomposeRsp::New() const {
  return new BestEQDecomposeRsp;
}

void BestEQDecomposeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQDecomposeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQDecomposeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQDecomposeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQDecomposeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQDecomposeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQDecomposeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQDecomposeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQDecomposeRsp::MergeFrom(const BestEQDecomposeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQDecomposeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQDecomposeRsp::CopyFrom(const BestEQDecomposeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQDecomposeRsp::IsInitialized() const {

  return true;
}

void BestEQDecomposeRsp::Swap(BestEQDecomposeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQDecomposeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQDecomposeRsp_descriptor_;
  metadata.reflection = BestEQDecomposeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQReturnPreViewReq::kInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQReturnPreViewReq::BestEQReturnPreViewReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQReturnPreViewReq::InitAsDefaultInstance() {
}

BestEQReturnPreViewReq::BestEQReturnPreViewReq(const BestEQReturnPreViewReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQReturnPreViewReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQReturnPreViewReq::~BestEQReturnPreViewReq() {
  SharedDtor();
}

void BestEQReturnPreViewReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQReturnPreViewReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQReturnPreViewReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQReturnPreViewReq_descriptor_;
}

const BestEQReturnPreViewReq& BestEQReturnPreViewReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQReturnPreViewReq* BestEQReturnPreViewReq::default_instance_ = NULL;

BestEQReturnPreViewReq* BestEQReturnPreViewReq::New() const {
  return new BestEQReturnPreViewReq;
}

void BestEQReturnPreViewReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQReturnPreViewReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQReturnPreViewReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQReturnPreViewReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQReturnPreViewReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQReturnPreViewReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQReturnPreViewReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQReturnPreViewReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQReturnPreViewReq::MergeFrom(const BestEQReturnPreViewReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQReturnPreViewReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQReturnPreViewReq::CopyFrom(const BestEQReturnPreViewReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQReturnPreViewReq::IsInitialized() const {

  return true;
}

void BestEQReturnPreViewReq::Swap(BestEQReturnPreViewReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQReturnPreViewReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQReturnPreViewReq_descriptor_;
  metadata.reflection = BestEQReturnPreViewReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQReturnPreViewRsp::kRetFieldNumber;
const int BestEQReturnPreViewRsp::kInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQReturnPreViewRsp::BestEQReturnPreViewRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQReturnPreViewRsp::InitAsDefaultInstance() {
}

BestEQReturnPreViewRsp::BestEQReturnPreViewRsp(const BestEQReturnPreViewRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQReturnPreViewRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQReturnPreViewRsp::~BestEQReturnPreViewRsp() {
  SharedDtor();
}

void BestEQReturnPreViewRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQReturnPreViewRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQReturnPreViewRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQReturnPreViewRsp_descriptor_;
}

const BestEQReturnPreViewRsp& BestEQReturnPreViewRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQReturnPreViewRsp* BestEQReturnPreViewRsp::default_instance_ = NULL;

BestEQReturnPreViewRsp* BestEQReturnPreViewRsp::New() const {
  return new BestEQReturnPreViewRsp;
}

void BestEQReturnPreViewRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQReturnPreViewRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQReturnPreViewRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQReturnPreViewRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQReturnPreViewRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQReturnPreViewRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQReturnPreViewRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQReturnPreViewRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQReturnPreViewRsp::MergeFrom(const BestEQReturnPreViewRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQReturnPreViewRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQReturnPreViewRsp::CopyFrom(const BestEQReturnPreViewRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQReturnPreViewRsp::IsInitialized() const {

  return true;
}

void BestEQReturnPreViewRsp::Swap(BestEQReturnPreViewRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQReturnPreViewRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQReturnPreViewRsp_descriptor_;
  metadata.reflection = BestEQReturnPreViewRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQReturnReq::kInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQReturnReq::BestEQReturnReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQReturnReq::InitAsDefaultInstance() {
}

BestEQReturnReq::BestEQReturnReq(const BestEQReturnReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQReturnReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQReturnReq::~BestEQReturnReq() {
  SharedDtor();
}

void BestEQReturnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQReturnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQReturnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQReturnReq_descriptor_;
}

const BestEQReturnReq& BestEQReturnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQReturnReq* BestEQReturnReq::default_instance_ = NULL;

BestEQReturnReq* BestEQReturnReq::New() const {
  return new BestEQReturnReq;
}

void BestEQReturnReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQReturnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQReturnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQReturnReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQReturnReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQReturnReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQReturnReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQReturnReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQReturnReq::MergeFrom(const BestEQReturnReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQReturnReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQReturnReq::CopyFrom(const BestEQReturnReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQReturnReq::IsInitialized() const {

  return true;
}

void BestEQReturnReq::Swap(BestEQReturnReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQReturnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQReturnReq_descriptor_;
  metadata.reflection = BestEQReturnReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQReturnRsp::kRetFieldNumber;
const int BestEQReturnRsp::kInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQReturnRsp::BestEQReturnRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQReturnRsp::InitAsDefaultInstance() {
}

BestEQReturnRsp::BestEQReturnRsp(const BestEQReturnRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQReturnRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQReturnRsp::~BestEQReturnRsp() {
  SharedDtor();
}

void BestEQReturnRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQReturnRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQReturnRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQReturnRsp_descriptor_;
}

const BestEQReturnRsp& BestEQReturnRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQReturnRsp* BestEQReturnRsp::default_instance_ = NULL;

BestEQReturnRsp* BestEQReturnRsp::New() const {
  return new BestEQReturnRsp;
}

void BestEQReturnRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQReturnRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQReturnRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQReturnRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQReturnRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQReturnRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQReturnRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQReturnRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQReturnRsp::MergeFrom(const BestEQReturnRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQReturnRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQReturnRsp::CopyFrom(const BestEQReturnRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQReturnRsp::IsInitialized() const {

  return true;
}

void BestEQReturnRsp::Swap(BestEQReturnRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQReturnRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQReturnRsp_descriptor_;
  metadata.reflection = BestEQReturnRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQDressReq::kInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQDressReq::BestEQDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQDressReq::InitAsDefaultInstance() {
}

BestEQDressReq::BestEQDressReq(const BestEQDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQDressReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQDressReq::~BestEQDressReq() {
  SharedDtor();
}

void BestEQDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQDressReq_descriptor_;
}

const BestEQDressReq& BestEQDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQDressReq* BestEQDressReq::default_instance_ = NULL;

BestEQDressReq* BestEQDressReq::New() const {
  return new BestEQDressReq;
}

void BestEQDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQDressReq::MergeFrom(const BestEQDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQDressReq::CopyFrom(const BestEQDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQDressReq::IsInitialized() const {

  return true;
}

void BestEQDressReq::Swap(BestEQDressReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQDressReq_descriptor_;
  metadata.reflection = BestEQDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQDressRsp::kRetFieldNumber;
const int BestEQDressRsp::kInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQDressRsp::BestEQDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQDressRsp::InitAsDefaultInstance() {
}

BestEQDressRsp::BestEQDressRsp(const BestEQDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQDressRsp::~BestEQDressRsp() {
  SharedDtor();
}

void BestEQDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQDressRsp_descriptor_;
}

const BestEQDressRsp& BestEQDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQDressRsp* BestEQDressRsp::default_instance_ = NULL;

BestEQDressRsp* BestEQDressRsp::New() const {
  return new BestEQDressRsp;
}

void BestEQDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQDressRsp::MergeFrom(const BestEQDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQDressRsp::CopyFrom(const BestEQDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQDressRsp::IsInitialized() const {

  return true;
}

void BestEQDressRsp::Swap(BestEQDressRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQDressRsp_descriptor_;
  metadata.reflection = BestEQDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQPourReq::kSlotFieldNumber;
#endif  // !_MSC_VER

BestEQPourReq::BestEQPourReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQPourReq::InitAsDefaultInstance() {
}

BestEQPourReq::BestEQPourReq(const BestEQPourReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQPourReq::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQPourReq::~BestEQPourReq() {
  SharedDtor();
}

void BestEQPourReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQPourReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQPourReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQPourReq_descriptor_;
}

const BestEQPourReq& BestEQPourReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQPourReq* BestEQPourReq::default_instance_ = NULL;

BestEQPourReq* BestEQPourReq::New() const {
  return new BestEQPourReq;
}

void BestEQPourReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQPourReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQPourReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQPourReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQPourReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQPourReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQPourReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQPourReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQPourReq::MergeFrom(const BestEQPourReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQPourReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQPourReq::CopyFrom(const BestEQPourReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQPourReq::IsInitialized() const {

  return true;
}

void BestEQPourReq::Swap(BestEQPourReq* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQPourReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQPourReq_descriptor_;
  metadata.reflection = BestEQPourReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQPourRsp::kRetFieldNumber;
const int BestEQPourRsp::kSlotFieldNumber;
#endif  // !_MSC_VER

BestEQPourRsp::BestEQPourRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQPourRsp::InitAsDefaultInstance() {
}

BestEQPourRsp::BestEQPourRsp(const BestEQPourRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQPourRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQPourRsp::~BestEQPourRsp() {
  SharedDtor();
}

void BestEQPourRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQPourRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQPourRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQPourRsp_descriptor_;
}

const BestEQPourRsp& BestEQPourRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQPourRsp* BestEQPourRsp::default_instance_ = NULL;

BestEQPourRsp* BestEQPourRsp::New() const {
  return new BestEQPourRsp;
}

void BestEQPourRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQPourRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQPourRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQPourRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQPourRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQPourRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQPourRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQPourRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQPourRsp::MergeFrom(const BestEQPourRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQPourRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQPourRsp::CopyFrom(const BestEQPourRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQPourRsp::IsInitialized() const {

  return true;
}

void BestEQPourRsp::Swap(BestEQPourRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQPourRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQPourRsp_descriptor_;
  metadata.reflection = BestEQPourRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQBreakReq::kSlotFieldNumber;
#endif  // !_MSC_VER

BestEQBreakReq::BestEQBreakReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQBreakReq::InitAsDefaultInstance() {
}

BestEQBreakReq::BestEQBreakReq(const BestEQBreakReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQBreakReq::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQBreakReq::~BestEQBreakReq() {
  SharedDtor();
}

void BestEQBreakReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQBreakReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQBreakReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQBreakReq_descriptor_;
}

const BestEQBreakReq& BestEQBreakReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQBreakReq* BestEQBreakReq::default_instance_ = NULL;

BestEQBreakReq* BestEQBreakReq::New() const {
  return new BestEQBreakReq;
}

void BestEQBreakReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQBreakReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQBreakReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQBreakReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQBreakReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQBreakReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQBreakReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQBreakReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQBreakReq::MergeFrom(const BestEQBreakReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQBreakReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQBreakReq::CopyFrom(const BestEQBreakReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQBreakReq::IsInitialized() const {

  return true;
}

void BestEQBreakReq::Swap(BestEQBreakReq* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQBreakReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQBreakReq_descriptor_;
  metadata.reflection = BestEQBreakReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQBreakRsp::kRetFieldNumber;
const int BestEQBreakRsp::kSlotFieldNumber;
#endif  // !_MSC_VER

BestEQBreakRsp::BestEQBreakRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQBreakRsp::InitAsDefaultInstance() {
}

BestEQBreakRsp::BestEQBreakRsp(const BestEQBreakRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQBreakRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQBreakRsp::~BestEQBreakRsp() {
  SharedDtor();
}

void BestEQBreakRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQBreakRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQBreakRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQBreakRsp_descriptor_;
}

const BestEQBreakRsp& BestEQBreakRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQBreakRsp* BestEQBreakRsp::default_instance_ = NULL;

BestEQBreakRsp* BestEQBreakRsp::New() const {
  return new BestEQBreakRsp;
}

void BestEQBreakRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQBreakRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQBreakRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQBreakRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQBreakRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQBreakRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQBreakRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQBreakRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQBreakRsp::MergeFrom(const BestEQBreakRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQBreakRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQBreakRsp::CopyFrom(const BestEQBreakRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQBreakRsp::IsInitialized() const {

  return true;
}

void BestEQBreakRsp::Swap(BestEQBreakRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQBreakRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQBreakRsp_descriptor_;
  metadata.reflection = BestEQBreakRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQAwakenReq::kSlotFieldNumber;
#endif  // !_MSC_VER

BestEQAwakenReq::BestEQAwakenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQAwakenReq::InitAsDefaultInstance() {
}

BestEQAwakenReq::BestEQAwakenReq(const BestEQAwakenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQAwakenReq::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQAwakenReq::~BestEQAwakenReq() {
  SharedDtor();
}

void BestEQAwakenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQAwakenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQAwakenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQAwakenReq_descriptor_;
}

const BestEQAwakenReq& BestEQAwakenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQAwakenReq* BestEQAwakenReq::default_instance_ = NULL;

BestEQAwakenReq* BestEQAwakenReq::New() const {
  return new BestEQAwakenReq;
}

void BestEQAwakenReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQAwakenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQAwakenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQAwakenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQAwakenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQAwakenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQAwakenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQAwakenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQAwakenReq::MergeFrom(const BestEQAwakenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQAwakenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQAwakenReq::CopyFrom(const BestEQAwakenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQAwakenReq::IsInitialized() const {

  return true;
}

void BestEQAwakenReq::Swap(BestEQAwakenReq* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQAwakenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQAwakenReq_descriptor_;
  metadata.reflection = BestEQAwakenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQAwakenRsp::kRetFieldNumber;
const int BestEQAwakenRsp::kSlotFieldNumber;
#endif  // !_MSC_VER

BestEQAwakenRsp::BestEQAwakenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQAwakenRsp::InitAsDefaultInstance() {
}

BestEQAwakenRsp::BestEQAwakenRsp(const BestEQAwakenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQAwakenRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQAwakenRsp::~BestEQAwakenRsp() {
  SharedDtor();
}

void BestEQAwakenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQAwakenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQAwakenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQAwakenRsp_descriptor_;
}

const BestEQAwakenRsp& BestEQAwakenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQAwakenRsp* BestEQAwakenRsp::default_instance_ = NULL;

BestEQAwakenRsp* BestEQAwakenRsp::New() const {
  return new BestEQAwakenRsp;
}

void BestEQAwakenRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQAwakenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQAwakenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQAwakenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQAwakenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQAwakenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQAwakenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQAwakenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQAwakenRsp::MergeFrom(const BestEQAwakenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQAwakenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQAwakenRsp::CopyFrom(const BestEQAwakenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQAwakenRsp::IsInitialized() const {

  return true;
}

void BestEQAwakenRsp::Swap(BestEQAwakenRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQAwakenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQAwakenRsp_descriptor_;
  metadata.reflection = BestEQAwakenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQStrongReq::kInstIdFieldNumber;
const int BestEQStrongReq::kCostInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQStrongReq::BestEQStrongReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQStrongReq::InitAsDefaultInstance() {
}

BestEQStrongReq::BestEQStrongReq(const BestEQStrongReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQStrongReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQStrongReq::~BestEQStrongReq() {
  SharedDtor();
}

void BestEQStrongReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQStrongReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQStrongReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQStrongReq_descriptor_;
}

const BestEQStrongReq& BestEQStrongReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQStrongReq* BestEQStrongReq::default_instance_ = NULL;

BestEQStrongReq* BestEQStrongReq::New() const {
  return new BestEQStrongReq;
}

void BestEQStrongReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  costinstid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQStrongReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_costInstId;
        break;
      }

      // repeated int32 costInstId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costInstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_costinstid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_costinstid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_costInstId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQStrongReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  // repeated int32 costInstId = 2;
  for (int i = 0; i < this->costinstid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->costinstid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQStrongReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  // repeated int32 costInstId = 2;
  for (int i = 0; i < this->costinstid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->costinstid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQStrongReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  // repeated int32 costInstId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->costinstid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->costinstid(i));
    }
    total_size += 1 * this->costinstid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQStrongReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQStrongReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQStrongReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQStrongReq::MergeFrom(const BestEQStrongReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  costinstid_.MergeFrom(from.costinstid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQStrongReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQStrongReq::CopyFrom(const BestEQStrongReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQStrongReq::IsInitialized() const {

  return true;
}

void BestEQStrongReq::Swap(BestEQStrongReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    costinstid_.Swap(&other->costinstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQStrongReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQStrongReq_descriptor_;
  metadata.reflection = BestEQStrongReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQStrongRsp::kRetFieldNumber;
const int BestEQStrongRsp::kInstIdFieldNumber;
const int BestEQStrongRsp::kCostInstIdFieldNumber;
#endif  // !_MSC_VER

BestEQStrongRsp::BestEQStrongRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQStrongRsp::InitAsDefaultInstance() {
}

BestEQStrongRsp::BestEQStrongRsp(const BestEQStrongRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQStrongRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQStrongRsp::~BestEQStrongRsp() {
  SharedDtor();
}

void BestEQStrongRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQStrongRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQStrongRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQStrongRsp_descriptor_;
}

const BestEQStrongRsp& BestEQStrongRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQStrongRsp* BestEQStrongRsp::default_instance_ = NULL;

BestEQStrongRsp* BestEQStrongRsp::New() const {
  return new BestEQStrongRsp;
}

void BestEQStrongRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  costinstid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQStrongRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costInstId;
        break;
      }

      // repeated int32 costInstId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costInstId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_costinstid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_costinstid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costInstId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQStrongRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  // repeated int32 costInstId = 3;
  for (int i = 0; i < this->costinstid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->costinstid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQStrongRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  // repeated int32 costInstId = 3;
  for (int i = 0; i < this->costinstid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->costinstid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQStrongRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  // repeated int32 costInstId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->costinstid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->costinstid(i));
    }
    total_size += 1 * this->costinstid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQStrongRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQStrongRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQStrongRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQStrongRsp::MergeFrom(const BestEQStrongRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  costinstid_.MergeFrom(from.costinstid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQStrongRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQStrongRsp::CopyFrom(const BestEQStrongRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQStrongRsp::IsInitialized() const {

  return true;
}

void BestEQStrongRsp::Swap(BestEQStrongRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    costinstid_.Swap(&other->costinstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQStrongRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQStrongRsp_descriptor_;
  metadata.reflection = BestEQStrongRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQBreakConfirmReq::kSlotFieldNumber;
const int BestEQBreakConfirmReq::kTypeFieldNumber;
#endif  // !_MSC_VER

BestEQBreakConfirmReq::BestEQBreakConfirmReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQBreakConfirmReq::InitAsDefaultInstance() {
}

BestEQBreakConfirmReq::BestEQBreakConfirmReq(const BestEQBreakConfirmReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQBreakConfirmReq::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQBreakConfirmReq::~BestEQBreakConfirmReq() {
  SharedDtor();
}

void BestEQBreakConfirmReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQBreakConfirmReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQBreakConfirmReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQBreakConfirmReq_descriptor_;
}

const BestEQBreakConfirmReq& BestEQBreakConfirmReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQBreakConfirmReq* BestEQBreakConfirmReq::default_instance_ = NULL;

BestEQBreakConfirmReq* BestEQBreakConfirmReq::New() const {
  return new BestEQBreakConfirmReq;
}

void BestEQBreakConfirmReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQBreakConfirmReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQBreakConfirmReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQBreakConfirmReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQBreakConfirmReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQBreakConfirmReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQBreakConfirmReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQBreakConfirmReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQBreakConfirmReq::MergeFrom(const BestEQBreakConfirmReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQBreakConfirmReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQBreakConfirmReq::CopyFrom(const BestEQBreakConfirmReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQBreakConfirmReq::IsInitialized() const {

  return true;
}

void BestEQBreakConfirmReq::Swap(BestEQBreakConfirmReq* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQBreakConfirmReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQBreakConfirmReq_descriptor_;
  metadata.reflection = BestEQBreakConfirmReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQBreakConfirmRsp::kRetFieldNumber;
const int BestEQBreakConfirmRsp::kSlotFieldNumber;
const int BestEQBreakConfirmRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

BestEQBreakConfirmRsp::BestEQBreakConfirmRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQBreakConfirmRsp::InitAsDefaultInstance() {
}

BestEQBreakConfirmRsp::BestEQBreakConfirmRsp(const BestEQBreakConfirmRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQBreakConfirmRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQBreakConfirmRsp::~BestEQBreakConfirmRsp() {
  SharedDtor();
}

void BestEQBreakConfirmRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQBreakConfirmRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQBreakConfirmRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQBreakConfirmRsp_descriptor_;
}

const BestEQBreakConfirmRsp& BestEQBreakConfirmRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BestEQ_2eproto();
  return *default_instance_;
}

BestEQBreakConfirmRsp* BestEQBreakConfirmRsp::default_instance_ = NULL;

BestEQBreakConfirmRsp* BestEQBreakConfirmRsp::New() const {
  return new BestEQBreakConfirmRsp;
}

void BestEQBreakConfirmRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQBreakConfirmRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQBreakConfirmRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQBreakConfirmRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQBreakConfirmRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQBreakConfirmRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQBreakConfirmRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQBreakConfirmRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQBreakConfirmRsp::MergeFrom(const BestEQBreakConfirmRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQBreakConfirmRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQBreakConfirmRsp::CopyFrom(const BestEQBreakConfirmRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQBreakConfirmRsp::IsInitialized() const {

  return true;
}

void BestEQBreakConfirmRsp::Swap(BestEQBreakConfirmRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_, other->slot_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQBreakConfirmRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQBreakConfirmRsp_descriptor_;
  metadata.reflection = BestEQBreakConfirmRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
