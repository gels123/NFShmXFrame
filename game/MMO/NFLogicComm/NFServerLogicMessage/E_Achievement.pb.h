// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Achievement.proto

#ifndef PROTOBUF_E_5fAchievement_2eproto__INCLUDED
#define PROTOBUF_E_5fAchievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fAchievement_2eproto();
void protobuf_AssignDesc_E_5fAchievement_2eproto();
void protobuf_ShutdownFile_E_5fAchievement_2eproto();

class E_AchievementAchievementItemrewardDesc;
class E_AchievementAchievement;
class Sheet_AchievementAchievement;
class E_AchievementTotalachievements;
class Sheet_AchievementTotalachievements;

// ===================================================================

class E_AchievementAchievementItemrewardDesc : public ::google::protobuf::Message {
 public:
  E_AchievementAchievementItemrewardDesc();
  virtual ~E_AchievementAchievementItemrewardDesc();

  E_AchievementAchievementItemrewardDesc(const E_AchievementAchievementItemrewardDesc& from);

  inline E_AchievementAchievementItemrewardDesc& operator=(const E_AchievementAchievementItemrewardDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_AchievementAchievementItemrewardDesc& default_instance();

  void Swap(E_AchievementAchievementItemrewardDesc* other);

  // implements Message ----------------------------------------------

  E_AchievementAchievementItemrewardDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_AchievementAchievementItemrewardDesc& from);
  void MergeFrom(const E_AchievementAchievementItemrewardDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_Value = 1;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 1;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int64 m_ID = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIDFieldNumber = 2;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_AchievementAchievementItemrewardDesc)
 private:
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;
  ::google::protobuf::int32 m_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fAchievement_2eproto();
  friend void protobuf_AssignDesc_E_5fAchievement_2eproto();
  friend void protobuf_ShutdownFile_E_5fAchievement_2eproto();

  void InitAsDefaultInstance();
  static E_AchievementAchievementItemrewardDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_AchievementAchievement : public ::google::protobuf::Message {
 public:
  E_AchievementAchievement();
  virtual ~E_AchievementAchievement();

  E_AchievementAchievement(const E_AchievementAchievement& from);

  inline E_AchievementAchievement& operator=(const E_AchievementAchievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_AchievementAchievement& default_instance();

  void Swap(E_AchievementAchievement* other);

  // implements Message ----------------------------------------------

  E_AchievementAchievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_AchievementAchievement& from);
  void MergeFrom(const E_AchievementAchievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_achievementId = 1;
  inline bool has_m_achievementid() const;
  inline void clear_m_achievementid();
  static const int kMAchievementIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_achievementid() const;
  inline void set_m_achievementid(::google::protobuf::int32 value);

  // optional int32 m_achievementLevel = 2;
  inline bool has_m_achievementlevel() const;
  inline void clear_m_achievementlevel();
  static const int kMAchievementLevelFieldNumber = 2;
  inline ::google::protobuf::int32 m_achievementlevel() const;
  inline void set_m_achievementlevel(::google::protobuf::int32 value);

  // optional int32 m_achievementType = 3;
  inline bool has_m_achievementtype() const;
  inline void clear_m_achievementtype();
  static const int kMAchievementTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_achievementtype() const;
  inline void set_m_achievementtype(::google::protobuf::int32 value);

  // optional int32 m_achievementSubType = 4;
  inline bool has_m_achievementsubtype() const;
  inline void clear_m_achievementsubtype();
  static const int kMAchievementSubTypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_achievementsubtype() const;
  inline void set_m_achievementsubtype(::google::protobuf::int32 value);

  // optional int32 m_SubType = 5;
  inline bool has_m_subtype() const;
  inline void clear_m_subtype();
  static const int kMSubTypeFieldNumber = 5;
  inline ::google::protobuf::int32 m_subtype() const;
  inline void set_m_subtype(::google::protobuf::int32 value);

  // optional int32 m_achievementObjectValue = 6;
  inline bool has_m_achievementobjectvalue() const;
  inline void clear_m_achievementobjectvalue();
  static const int kMAchievementObjectValueFieldNumber = 6;
  inline ::google::protobuf::int32 m_achievementobjectvalue() const;
  inline void set_m_achievementobjectvalue(::google::protobuf::int32 value);

  // optional string m_typeName = 7;
  inline bool has_m_typename() const;
  inline void clear_m_typename();
  static const int kMTypeNameFieldNumber = 7;
  inline const ::std::string& m_typename() const;
  inline void set_m_typename(const ::std::string& value);
  inline void set_m_typename(const char* value);
  inline void set_m_typename(const char* value, size_t size);
  inline ::std::string* mutable_m_typename();
  inline ::std::string* release_m_typename();
  inline void set_allocated_m_typename(::std::string* m_typename);

  // optional string m_label = 8;
  inline bool has_m_label() const;
  inline void clear_m_label();
  static const int kMLabelFieldNumber = 8;
  inline const ::std::string& m_label() const;
  inline void set_m_label(const ::std::string& value);
  inline void set_m_label(const char* value);
  inline void set_m_label(const char* value, size_t size);
  inline ::std::string* mutable_m_label();
  inline ::std::string* release_m_label();
  inline void set_allocated_m_label(::std::string* m_label);

  // optional int32 m_achievementPoint = 9;
  inline bool has_m_achievementpoint() const;
  inline void clear_m_achievementpoint();
  static const int kMAchievementPointFieldNumber = 9;
  inline ::google::protobuf::int32 m_achievementpoint() const;
  inline void set_m_achievementpoint(::google::protobuf::int32 value);

  // optional int32 m_Overview = 10;
  inline bool has_m_overview() const;
  inline void clear_m_overview();
  static const int kMOverviewFieldNumber = 10;
  inline ::google::protobuf::int32 m_overview() const;
  inline void set_m_overview(::google::protobuf::int32 value);

  // repeated int32 m_param = 11;
  inline int m_param_size() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 11;
  inline ::google::protobuf::int32 m_param(int index) const;
  inline void set_m_param(int index, ::google::protobuf::int32 value);
  inline void add_m_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_param();

  // repeated .proto_ff.E_AchievementAchievementItemrewardDesc m_itemReward = 12;
  inline int m_itemreward_size() const;
  inline void clear_m_itemreward();
  static const int kMItemRewardFieldNumber = 12;
  inline const ::proto_ff::E_AchievementAchievementItemrewardDesc& m_itemreward(int index) const;
  inline ::proto_ff::E_AchievementAchievementItemrewardDesc* mutable_m_itemreward(int index);
  inline ::proto_ff::E_AchievementAchievementItemrewardDesc* add_m_itemreward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievementItemrewardDesc >&
      m_itemreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievementItemrewardDesc >*
      mutable_m_itemreward();

  // @@protoc_insertion_point(class_scope:proto_ff.E_AchievementAchievement)
 private:
  inline void set_has_m_achievementid();
  inline void clear_has_m_achievementid();
  inline void set_has_m_achievementlevel();
  inline void clear_has_m_achievementlevel();
  inline void set_has_m_achievementtype();
  inline void clear_has_m_achievementtype();
  inline void set_has_m_achievementsubtype();
  inline void clear_has_m_achievementsubtype();
  inline void set_has_m_subtype();
  inline void clear_has_m_subtype();
  inline void set_has_m_achievementobjectvalue();
  inline void clear_has_m_achievementobjectvalue();
  inline void set_has_m_typename();
  inline void clear_has_m_typename();
  inline void set_has_m_label();
  inline void clear_has_m_label();
  inline void set_has_m_achievementpoint();
  inline void clear_has_m_achievementpoint();
  inline void set_has_m_overview();
  inline void clear_has_m_overview();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_achievementid_;
  ::google::protobuf::int32 m_achievementlevel_;
  ::google::protobuf::int32 m_achievementtype_;
  ::google::protobuf::int32 m_achievementsubtype_;
  ::google::protobuf::int32 m_subtype_;
  ::google::protobuf::int32 m_achievementobjectvalue_;
  ::std::string* m_typename_;
  ::std::string* m_label_;
  ::google::protobuf::int32 m_achievementpoint_;
  ::google::protobuf::int32 m_overview_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_param_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievementItemrewardDesc > m_itemreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fAchievement_2eproto();
  friend void protobuf_AssignDesc_E_5fAchievement_2eproto();
  friend void protobuf_ShutdownFile_E_5fAchievement_2eproto();

  void InitAsDefaultInstance();
  static E_AchievementAchievement* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_AchievementAchievement : public ::google::protobuf::Message {
 public:
  Sheet_AchievementAchievement();
  virtual ~Sheet_AchievementAchievement();

  Sheet_AchievementAchievement(const Sheet_AchievementAchievement& from);

  inline Sheet_AchievementAchievement& operator=(const Sheet_AchievementAchievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_AchievementAchievement& default_instance();

  void Swap(Sheet_AchievementAchievement* other);

  // implements Message ----------------------------------------------

  Sheet_AchievementAchievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_AchievementAchievement& from);
  void MergeFrom(const Sheet_AchievementAchievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_AchievementAchievement E_AchievementAchievement_List = 1;
  inline int e_achievementachievement_list_size() const;
  inline void clear_e_achievementachievement_list();
  static const int kEAchievementAchievementListFieldNumber = 1;
  inline const ::proto_ff::E_AchievementAchievement& e_achievementachievement_list(int index) const;
  inline ::proto_ff::E_AchievementAchievement* mutable_e_achievementachievement_list(int index);
  inline ::proto_ff::E_AchievementAchievement* add_e_achievementachievement_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievement >&
      e_achievementachievement_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievement >*
      mutable_e_achievementachievement_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_AchievementAchievement)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievement > e_achievementachievement_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fAchievement_2eproto();
  friend void protobuf_AssignDesc_E_5fAchievement_2eproto();
  friend void protobuf_ShutdownFile_E_5fAchievement_2eproto();

  void InitAsDefaultInstance();
  static Sheet_AchievementAchievement* default_instance_;
};
// -------------------------------------------------------------------

class E_AchievementTotalachievements : public ::google::protobuf::Message {
 public:
  E_AchievementTotalachievements();
  virtual ~E_AchievementTotalachievements();

  E_AchievementTotalachievements(const E_AchievementTotalachievements& from);

  inline E_AchievementTotalachievements& operator=(const E_AchievementTotalachievements& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_AchievementTotalachievements& default_instance();

  void Swap(E_AchievementTotalachievements* other);

  // implements Message ----------------------------------------------

  E_AchievementTotalachievements* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_AchievementTotalachievements& from);
  void MergeFrom(const E_AchievementTotalachievements& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_totalSum = 1;
  inline bool has_m_totalsum() const;
  inline void clear_m_totalsum();
  static const int kMTotalSumFieldNumber = 1;
  inline ::google::protobuf::int32 m_totalsum() const;
  inline void set_m_totalsum(::google::protobuf::int32 value);

  // optional string m_totalAchievementName = 2;
  inline bool has_m_totalachievementname() const;
  inline void clear_m_totalachievementname();
  static const int kMTotalAchievementNameFieldNumber = 2;
  inline const ::std::string& m_totalachievementname() const;
  inline void set_m_totalachievementname(const ::std::string& value);
  inline void set_m_totalachievementname(const char* value);
  inline void set_m_totalachievementname(const char* value, size_t size);
  inline ::std::string* mutable_m_totalachievementname();
  inline ::std::string* release_m_totalachievementname();
  inline void set_allocated_m_totalachievementname(::std::string* m_totalachievementname);

  // optional int32 m_achievedPoints = 3;
  inline bool has_m_achievedpoints() const;
  inline void clear_m_achievedpoints();
  static const int kMAchievedPointsFieldNumber = 3;
  inline ::google::protobuf::int32 m_achievedpoints() const;
  inline void set_m_achievedpoints(::google::protobuf::int32 value);

  // optional int32 m_totalItems = 4;
  inline bool has_m_totalitems() const;
  inline void clear_m_totalitems();
  static const int kMTotalItemsFieldNumber = 4;
  inline ::google::protobuf::int32 m_totalitems() const;
  inline void set_m_totalitems(::google::protobuf::int32 value);

  // optional int32 m_RewardValue = 5;
  inline bool has_m_rewardvalue() const;
  inline void clear_m_rewardvalue();
  static const int kMRewardValueFieldNumber = 5;
  inline ::google::protobuf::int32 m_rewardvalue() const;
  inline void set_m_rewardvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_AchievementTotalachievements)
 private:
  inline void set_has_m_totalsum();
  inline void clear_has_m_totalsum();
  inline void set_has_m_totalachievementname();
  inline void clear_has_m_totalachievementname();
  inline void set_has_m_achievedpoints();
  inline void clear_has_m_achievedpoints();
  inline void set_has_m_totalitems();
  inline void clear_has_m_totalitems();
  inline void set_has_m_rewardvalue();
  inline void clear_has_m_rewardvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_totalachievementname_;
  ::google::protobuf::int32 m_totalsum_;
  ::google::protobuf::int32 m_achievedpoints_;
  ::google::protobuf::int32 m_totalitems_;
  ::google::protobuf::int32 m_rewardvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fAchievement_2eproto();
  friend void protobuf_AssignDesc_E_5fAchievement_2eproto();
  friend void protobuf_ShutdownFile_E_5fAchievement_2eproto();

  void InitAsDefaultInstance();
  static E_AchievementTotalachievements* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_AchievementTotalachievements : public ::google::protobuf::Message {
 public:
  Sheet_AchievementTotalachievements();
  virtual ~Sheet_AchievementTotalachievements();

  Sheet_AchievementTotalachievements(const Sheet_AchievementTotalachievements& from);

  inline Sheet_AchievementTotalachievements& operator=(const Sheet_AchievementTotalachievements& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_AchievementTotalachievements& default_instance();

  void Swap(Sheet_AchievementTotalachievements* other);

  // implements Message ----------------------------------------------

  Sheet_AchievementTotalachievements* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_AchievementTotalachievements& from);
  void MergeFrom(const Sheet_AchievementTotalachievements& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_AchievementTotalachievements E_AchievementTotalachievements_List = 1;
  inline int e_achievementtotalachievements_list_size() const;
  inline void clear_e_achievementtotalachievements_list();
  static const int kEAchievementTotalachievementsListFieldNumber = 1;
  inline const ::proto_ff::E_AchievementTotalachievements& e_achievementtotalachievements_list(int index) const;
  inline ::proto_ff::E_AchievementTotalachievements* mutable_e_achievementtotalachievements_list(int index);
  inline ::proto_ff::E_AchievementTotalachievements* add_e_achievementtotalachievements_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementTotalachievements >&
      e_achievementtotalachievements_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementTotalachievements >*
      mutable_e_achievementtotalachievements_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_AchievementTotalachievements)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementTotalachievements > e_achievementtotalachievements_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fAchievement_2eproto();
  friend void protobuf_AssignDesc_E_5fAchievement_2eproto();
  friend void protobuf_ShutdownFile_E_5fAchievement_2eproto();

  void InitAsDefaultInstance();
  static Sheet_AchievementTotalachievements* default_instance_;
};
// ===================================================================


// ===================================================================

// E_AchievementAchievementItemrewardDesc

// optional int32 m_Value = 1;
inline bool E_AchievementAchievementItemrewardDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_AchievementAchievementItemrewardDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_AchievementAchievementItemrewardDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_AchievementAchievementItemrewardDesc::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_AchievementAchievementItemrewardDesc::m_value() const {
  return m_value_;
}
inline void E_AchievementAchievementItemrewardDesc::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int64 m_ID = 2;
inline bool E_AchievementAchievementItemrewardDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_AchievementAchievementItemrewardDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_AchievementAchievementItemrewardDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_AchievementAchievementItemrewardDesc::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_AchievementAchievementItemrewardDesc::m_id() const {
  return m_id_;
}
inline void E_AchievementAchievementItemrewardDesc::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_AchievementAchievement

// optional int32 m_achievementId = 1;
inline bool E_AchievementAchievement::has_m_achievementid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_AchievementAchievement::set_has_m_achievementid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_AchievementAchievement::clear_has_m_achievementid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_AchievementAchievement::clear_m_achievementid() {
  m_achievementid_ = 0;
  clear_has_m_achievementid();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_achievementid() const {
  return m_achievementid_;
}
inline void E_AchievementAchievement::set_m_achievementid(::google::protobuf::int32 value) {
  set_has_m_achievementid();
  m_achievementid_ = value;
}

// optional int32 m_achievementLevel = 2;
inline bool E_AchievementAchievement::has_m_achievementlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_AchievementAchievement::set_has_m_achievementlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_AchievementAchievement::clear_has_m_achievementlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_AchievementAchievement::clear_m_achievementlevel() {
  m_achievementlevel_ = 0;
  clear_has_m_achievementlevel();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_achievementlevel() const {
  return m_achievementlevel_;
}
inline void E_AchievementAchievement::set_m_achievementlevel(::google::protobuf::int32 value) {
  set_has_m_achievementlevel();
  m_achievementlevel_ = value;
}

// optional int32 m_achievementType = 3;
inline bool E_AchievementAchievement::has_m_achievementtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_AchievementAchievement::set_has_m_achievementtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_AchievementAchievement::clear_has_m_achievementtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_AchievementAchievement::clear_m_achievementtype() {
  m_achievementtype_ = 0;
  clear_has_m_achievementtype();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_achievementtype() const {
  return m_achievementtype_;
}
inline void E_AchievementAchievement::set_m_achievementtype(::google::protobuf::int32 value) {
  set_has_m_achievementtype();
  m_achievementtype_ = value;
}

// optional int32 m_achievementSubType = 4;
inline bool E_AchievementAchievement::has_m_achievementsubtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_AchievementAchievement::set_has_m_achievementsubtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_AchievementAchievement::clear_has_m_achievementsubtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_AchievementAchievement::clear_m_achievementsubtype() {
  m_achievementsubtype_ = 0;
  clear_has_m_achievementsubtype();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_achievementsubtype() const {
  return m_achievementsubtype_;
}
inline void E_AchievementAchievement::set_m_achievementsubtype(::google::protobuf::int32 value) {
  set_has_m_achievementsubtype();
  m_achievementsubtype_ = value;
}

// optional int32 m_SubType = 5;
inline bool E_AchievementAchievement::has_m_subtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_AchievementAchievement::set_has_m_subtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_AchievementAchievement::clear_has_m_subtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_AchievementAchievement::clear_m_subtype() {
  m_subtype_ = 0;
  clear_has_m_subtype();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_subtype() const {
  return m_subtype_;
}
inline void E_AchievementAchievement::set_m_subtype(::google::protobuf::int32 value) {
  set_has_m_subtype();
  m_subtype_ = value;
}

// optional int32 m_achievementObjectValue = 6;
inline bool E_AchievementAchievement::has_m_achievementobjectvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_AchievementAchievement::set_has_m_achievementobjectvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_AchievementAchievement::clear_has_m_achievementobjectvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_AchievementAchievement::clear_m_achievementobjectvalue() {
  m_achievementobjectvalue_ = 0;
  clear_has_m_achievementobjectvalue();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_achievementobjectvalue() const {
  return m_achievementobjectvalue_;
}
inline void E_AchievementAchievement::set_m_achievementobjectvalue(::google::protobuf::int32 value) {
  set_has_m_achievementobjectvalue();
  m_achievementobjectvalue_ = value;
}

// optional string m_typeName = 7;
inline bool E_AchievementAchievement::has_m_typename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_AchievementAchievement::set_has_m_typename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_AchievementAchievement::clear_has_m_typename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_AchievementAchievement::clear_m_typename() {
  if (m_typename_ != &::google::protobuf::internal::kEmptyString) {
    m_typename_->clear();
  }
  clear_has_m_typename();
}
inline const ::std::string& E_AchievementAchievement::m_typename() const {
  return *m_typename_;
}
inline void E_AchievementAchievement::set_m_typename(const ::std::string& value) {
  set_has_m_typename();
  if (m_typename_ == &::google::protobuf::internal::kEmptyString) {
    m_typename_ = new ::std::string;
  }
  m_typename_->assign(value);
}
inline void E_AchievementAchievement::set_m_typename(const char* value) {
  set_has_m_typename();
  if (m_typename_ == &::google::protobuf::internal::kEmptyString) {
    m_typename_ = new ::std::string;
  }
  m_typename_->assign(value);
}
inline void E_AchievementAchievement::set_m_typename(const char* value, size_t size) {
  set_has_m_typename();
  if (m_typename_ == &::google::protobuf::internal::kEmptyString) {
    m_typename_ = new ::std::string;
  }
  m_typename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_AchievementAchievement::mutable_m_typename() {
  set_has_m_typename();
  if (m_typename_ == &::google::protobuf::internal::kEmptyString) {
    m_typename_ = new ::std::string;
  }
  return m_typename_;
}
inline ::std::string* E_AchievementAchievement::release_m_typename() {
  clear_has_m_typename();
  if (m_typename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_typename_;
    m_typename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_AchievementAchievement::set_allocated_m_typename(::std::string* m_typename) {
  if (m_typename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typename_;
  }
  if (m_typename) {
    set_has_m_typename();
    m_typename_ = m_typename;
  } else {
    clear_has_m_typename();
    m_typename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_label = 8;
inline bool E_AchievementAchievement::has_m_label() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_AchievementAchievement::set_has_m_label() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_AchievementAchievement::clear_has_m_label() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_AchievementAchievement::clear_m_label() {
  if (m_label_ != &::google::protobuf::internal::kEmptyString) {
    m_label_->clear();
  }
  clear_has_m_label();
}
inline const ::std::string& E_AchievementAchievement::m_label() const {
  return *m_label_;
}
inline void E_AchievementAchievement::set_m_label(const ::std::string& value) {
  set_has_m_label();
  if (m_label_ == &::google::protobuf::internal::kEmptyString) {
    m_label_ = new ::std::string;
  }
  m_label_->assign(value);
}
inline void E_AchievementAchievement::set_m_label(const char* value) {
  set_has_m_label();
  if (m_label_ == &::google::protobuf::internal::kEmptyString) {
    m_label_ = new ::std::string;
  }
  m_label_->assign(value);
}
inline void E_AchievementAchievement::set_m_label(const char* value, size_t size) {
  set_has_m_label();
  if (m_label_ == &::google::protobuf::internal::kEmptyString) {
    m_label_ = new ::std::string;
  }
  m_label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_AchievementAchievement::mutable_m_label() {
  set_has_m_label();
  if (m_label_ == &::google::protobuf::internal::kEmptyString) {
    m_label_ = new ::std::string;
  }
  return m_label_;
}
inline ::std::string* E_AchievementAchievement::release_m_label() {
  clear_has_m_label();
  if (m_label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_label_;
    m_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_AchievementAchievement::set_allocated_m_label(::std::string* m_label) {
  if (m_label_ != &::google::protobuf::internal::kEmptyString) {
    delete m_label_;
  }
  if (m_label) {
    set_has_m_label();
    m_label_ = m_label;
  } else {
    clear_has_m_label();
    m_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_achievementPoint = 9;
inline bool E_AchievementAchievement::has_m_achievementpoint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_AchievementAchievement::set_has_m_achievementpoint() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_AchievementAchievement::clear_has_m_achievementpoint() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_AchievementAchievement::clear_m_achievementpoint() {
  m_achievementpoint_ = 0;
  clear_has_m_achievementpoint();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_achievementpoint() const {
  return m_achievementpoint_;
}
inline void E_AchievementAchievement::set_m_achievementpoint(::google::protobuf::int32 value) {
  set_has_m_achievementpoint();
  m_achievementpoint_ = value;
}

// optional int32 m_Overview = 10;
inline bool E_AchievementAchievement::has_m_overview() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_AchievementAchievement::set_has_m_overview() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_AchievementAchievement::clear_has_m_overview() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_AchievementAchievement::clear_m_overview() {
  m_overview_ = 0;
  clear_has_m_overview();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_overview() const {
  return m_overview_;
}
inline void E_AchievementAchievement::set_m_overview(::google::protobuf::int32 value) {
  set_has_m_overview();
  m_overview_ = value;
}

// repeated int32 m_param = 11;
inline int E_AchievementAchievement::m_param_size() const {
  return m_param_.size();
}
inline void E_AchievementAchievement::clear_m_param() {
  m_param_.Clear();
}
inline ::google::protobuf::int32 E_AchievementAchievement::m_param(int index) const {
  return m_param_.Get(index);
}
inline void E_AchievementAchievement::set_m_param(int index, ::google::protobuf::int32 value) {
  m_param_.Set(index, value);
}
inline void E_AchievementAchievement::add_m_param(::google::protobuf::int32 value) {
  m_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_AchievementAchievement::m_param() const {
  return m_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_AchievementAchievement::mutable_m_param() {
  return &m_param_;
}

// repeated .proto_ff.E_AchievementAchievementItemrewardDesc m_itemReward = 12;
inline int E_AchievementAchievement::m_itemreward_size() const {
  return m_itemreward_.size();
}
inline void E_AchievementAchievement::clear_m_itemreward() {
  m_itemreward_.Clear();
}
inline const ::proto_ff::E_AchievementAchievementItemrewardDesc& E_AchievementAchievement::m_itemreward(int index) const {
  return m_itemreward_.Get(index);
}
inline ::proto_ff::E_AchievementAchievementItemrewardDesc* E_AchievementAchievement::mutable_m_itemreward(int index) {
  return m_itemreward_.Mutable(index);
}
inline ::proto_ff::E_AchievementAchievementItemrewardDesc* E_AchievementAchievement::add_m_itemreward() {
  return m_itemreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievementItemrewardDesc >&
E_AchievementAchievement::m_itemreward() const {
  return m_itemreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievementItemrewardDesc >*
E_AchievementAchievement::mutable_m_itemreward() {
  return &m_itemreward_;
}

// -------------------------------------------------------------------

// Sheet_AchievementAchievement

// repeated .proto_ff.E_AchievementAchievement E_AchievementAchievement_List = 1;
inline int Sheet_AchievementAchievement::e_achievementachievement_list_size() const {
  return e_achievementachievement_list_.size();
}
inline void Sheet_AchievementAchievement::clear_e_achievementachievement_list() {
  e_achievementachievement_list_.Clear();
}
inline const ::proto_ff::E_AchievementAchievement& Sheet_AchievementAchievement::e_achievementachievement_list(int index) const {
  return e_achievementachievement_list_.Get(index);
}
inline ::proto_ff::E_AchievementAchievement* Sheet_AchievementAchievement::mutable_e_achievementachievement_list(int index) {
  return e_achievementachievement_list_.Mutable(index);
}
inline ::proto_ff::E_AchievementAchievement* Sheet_AchievementAchievement::add_e_achievementachievement_list() {
  return e_achievementachievement_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievement >&
Sheet_AchievementAchievement::e_achievementachievement_list() const {
  return e_achievementachievement_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementAchievement >*
Sheet_AchievementAchievement::mutable_e_achievementachievement_list() {
  return &e_achievementachievement_list_;
}

// -------------------------------------------------------------------

// E_AchievementTotalachievements

// optional int32 m_totalSum = 1;
inline bool E_AchievementTotalachievements::has_m_totalsum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_AchievementTotalachievements::set_has_m_totalsum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_AchievementTotalachievements::clear_has_m_totalsum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_AchievementTotalachievements::clear_m_totalsum() {
  m_totalsum_ = 0;
  clear_has_m_totalsum();
}
inline ::google::protobuf::int32 E_AchievementTotalachievements::m_totalsum() const {
  return m_totalsum_;
}
inline void E_AchievementTotalachievements::set_m_totalsum(::google::protobuf::int32 value) {
  set_has_m_totalsum();
  m_totalsum_ = value;
}

// optional string m_totalAchievementName = 2;
inline bool E_AchievementTotalachievements::has_m_totalachievementname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_AchievementTotalachievements::set_has_m_totalachievementname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_AchievementTotalachievements::clear_has_m_totalachievementname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_AchievementTotalachievements::clear_m_totalachievementname() {
  if (m_totalachievementname_ != &::google::protobuf::internal::kEmptyString) {
    m_totalachievementname_->clear();
  }
  clear_has_m_totalachievementname();
}
inline const ::std::string& E_AchievementTotalachievements::m_totalachievementname() const {
  return *m_totalachievementname_;
}
inline void E_AchievementTotalachievements::set_m_totalachievementname(const ::std::string& value) {
  set_has_m_totalachievementname();
  if (m_totalachievementname_ == &::google::protobuf::internal::kEmptyString) {
    m_totalachievementname_ = new ::std::string;
  }
  m_totalachievementname_->assign(value);
}
inline void E_AchievementTotalachievements::set_m_totalachievementname(const char* value) {
  set_has_m_totalachievementname();
  if (m_totalachievementname_ == &::google::protobuf::internal::kEmptyString) {
    m_totalachievementname_ = new ::std::string;
  }
  m_totalachievementname_->assign(value);
}
inline void E_AchievementTotalachievements::set_m_totalachievementname(const char* value, size_t size) {
  set_has_m_totalachievementname();
  if (m_totalachievementname_ == &::google::protobuf::internal::kEmptyString) {
    m_totalachievementname_ = new ::std::string;
  }
  m_totalachievementname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_AchievementTotalachievements::mutable_m_totalachievementname() {
  set_has_m_totalachievementname();
  if (m_totalachievementname_ == &::google::protobuf::internal::kEmptyString) {
    m_totalachievementname_ = new ::std::string;
  }
  return m_totalachievementname_;
}
inline ::std::string* E_AchievementTotalachievements::release_m_totalachievementname() {
  clear_has_m_totalachievementname();
  if (m_totalachievementname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_totalachievementname_;
    m_totalachievementname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_AchievementTotalachievements::set_allocated_m_totalachievementname(::std::string* m_totalachievementname) {
  if (m_totalachievementname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_totalachievementname_;
  }
  if (m_totalachievementname) {
    set_has_m_totalachievementname();
    m_totalachievementname_ = m_totalachievementname;
  } else {
    clear_has_m_totalachievementname();
    m_totalachievementname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_achievedPoints = 3;
inline bool E_AchievementTotalachievements::has_m_achievedpoints() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_AchievementTotalachievements::set_has_m_achievedpoints() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_AchievementTotalachievements::clear_has_m_achievedpoints() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_AchievementTotalachievements::clear_m_achievedpoints() {
  m_achievedpoints_ = 0;
  clear_has_m_achievedpoints();
}
inline ::google::protobuf::int32 E_AchievementTotalachievements::m_achievedpoints() const {
  return m_achievedpoints_;
}
inline void E_AchievementTotalachievements::set_m_achievedpoints(::google::protobuf::int32 value) {
  set_has_m_achievedpoints();
  m_achievedpoints_ = value;
}

// optional int32 m_totalItems = 4;
inline bool E_AchievementTotalachievements::has_m_totalitems() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_AchievementTotalachievements::set_has_m_totalitems() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_AchievementTotalachievements::clear_has_m_totalitems() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_AchievementTotalachievements::clear_m_totalitems() {
  m_totalitems_ = 0;
  clear_has_m_totalitems();
}
inline ::google::protobuf::int32 E_AchievementTotalachievements::m_totalitems() const {
  return m_totalitems_;
}
inline void E_AchievementTotalachievements::set_m_totalitems(::google::protobuf::int32 value) {
  set_has_m_totalitems();
  m_totalitems_ = value;
}

// optional int32 m_RewardValue = 5;
inline bool E_AchievementTotalachievements::has_m_rewardvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_AchievementTotalachievements::set_has_m_rewardvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_AchievementTotalachievements::clear_has_m_rewardvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_AchievementTotalachievements::clear_m_rewardvalue() {
  m_rewardvalue_ = 0;
  clear_has_m_rewardvalue();
}
inline ::google::protobuf::int32 E_AchievementTotalachievements::m_rewardvalue() const {
  return m_rewardvalue_;
}
inline void E_AchievementTotalachievements::set_m_rewardvalue(::google::protobuf::int32 value) {
  set_has_m_rewardvalue();
  m_rewardvalue_ = value;
}

// -------------------------------------------------------------------

// Sheet_AchievementTotalachievements

// repeated .proto_ff.E_AchievementTotalachievements E_AchievementTotalachievements_List = 1;
inline int Sheet_AchievementTotalachievements::e_achievementtotalachievements_list_size() const {
  return e_achievementtotalachievements_list_.size();
}
inline void Sheet_AchievementTotalachievements::clear_e_achievementtotalachievements_list() {
  e_achievementtotalachievements_list_.Clear();
}
inline const ::proto_ff::E_AchievementTotalachievements& Sheet_AchievementTotalachievements::e_achievementtotalachievements_list(int index) const {
  return e_achievementtotalachievements_list_.Get(index);
}
inline ::proto_ff::E_AchievementTotalachievements* Sheet_AchievementTotalachievements::mutable_e_achievementtotalachievements_list(int index) {
  return e_achievementtotalachievements_list_.Mutable(index);
}
inline ::proto_ff::E_AchievementTotalachievements* Sheet_AchievementTotalachievements::add_e_achievementtotalachievements_list() {
  return e_achievementtotalachievements_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementTotalachievements >&
Sheet_AchievementTotalachievements::e_achievementtotalachievements_list() const {
  return e_achievementtotalachievements_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_AchievementTotalachievements >*
Sheet_AchievementTotalachievements::mutable_e_achievementtotalachievements_list() {
  return &e_achievementtotalachievements_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fAchievement_2eproto__INCLUDED
