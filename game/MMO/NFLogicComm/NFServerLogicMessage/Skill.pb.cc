// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* SkillAdvanceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvancePosProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvancePosProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfoListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfoListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTalentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTalentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillSyncTargetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillSyncTargetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCancalUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCancalUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillUseResultBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillUseResultBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillUseResultBroadRsp_Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillUseResultBroadRsp_Target_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillUseBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillUseBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillWarnBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillWarnBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCancelUseBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCancelUseBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillBreakReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillBreakReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillBreakBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillBreakBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillGroupUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillGroupUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfoUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfoUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillGroupChgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillGroupChgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillGroupChgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillGroupChgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfoDelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfoDelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillWakeupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillWakeupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillWakeupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillWakeupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillChgPosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillChgPosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillChgPosRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillChgPosRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillUpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillUpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillUpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillUpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillSetAutoUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillSetAutoUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillSetAutoUseRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillSetAutoUseRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceChgPosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceChgPosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceChgPosRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceChgPosRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceResetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceResetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceResetRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceResetRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceUnlockPosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceUnlockPosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAdvanceUnlockPosRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAdvanceUnlockPosRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTalentInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTalentInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTalentInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTalentInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTalentPointRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTalentPointRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTalentResetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTalentResetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTalentResetRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTalentResetRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTalentUsePointReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTalentUsePointReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTalentUsePointRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTalentUsePointRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAngerUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAngerUpdateRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Skill_2eproto() {
  protobuf_AddDesc_Skill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Skill.proto");
  GOOGLE_CHECK(file != NULL);
  SkillAdvanceProto_descriptor_ = file->message_type(0);
  static const int SkillAdvanceProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceProto, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceProto, level_),
  };
  SkillAdvanceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceProto_descriptor_,
      SkillAdvanceProto::default_instance_,
      SkillAdvanceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceProto));
  SkillAdvancePosProto_descriptor_ = file->message_type(1);
  static const int SkillAdvancePosProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvancePosProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvancePosProto, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvancePosProto, unlock_),
  };
  SkillAdvancePosProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvancePosProto_descriptor_,
      SkillAdvancePosProto::default_instance_,
      SkillAdvancePosProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvancePosProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvancePosProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvancePosProto));
  SkillAdvanceListProto_descriptor_ = file->message_type(2);
  static const int SkillAdvanceListProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceListProto, pos_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceListProto, lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceListProto, curpos_),
  };
  SkillAdvanceListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceListProto_descriptor_,
      SkillAdvanceListProto::default_instance_,
      SkillAdvanceListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceListProto));
  SkillInfoProto_descriptor_ = file->message_type(3);
  static const int SkillInfoProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoProto, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoProto, wakeup_),
  };
  SkillInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfoProto_descriptor_,
      SkillInfoProto::default_instance_,
      SkillInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfoProto));
  SkillInfoListProto_descriptor_ = file->message_type(4);
  static const int SkillInfoListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoListProto, lst_),
  };
  SkillInfoListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfoListProto_descriptor_,
      SkillInfoListProto::default_instance_,
      SkillInfoListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfoListProto));
  SkillTalentProto_descriptor_ = file->message_type(5);
  static const int SkillTalentProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentProto, level_),
  };
  SkillTalentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTalentProto_descriptor_,
      SkillTalentProto::default_instance_,
      SkillTalentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTalentProto));
  SkillUseReq_descriptor_ = file->message_type(6);
  static const int SkillUseReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseReq, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseReq, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseReq, cid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseReq, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseReq, pos_lst_),
  };
  SkillUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillUseReq_descriptor_,
      SkillUseReq::default_instance_,
      SkillUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillUseReq));
  SkillSyncTargetReq_descriptor_ = file->message_type(7);
  static const int SkillSyncTargetReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSyncTargetReq, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSyncTargetReq, cid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSyncTargetReq, is_extend_),
  };
  SkillSyncTargetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillSyncTargetReq_descriptor_,
      SkillSyncTargetReq::default_instance_,
      SkillSyncTargetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSyncTargetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSyncTargetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillSyncTargetReq));
  SkillCancalUseReq_descriptor_ = file->message_type(8);
  static const int SkillCancalUseReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCancalUseReq, skill_id_),
  };
  SkillCancalUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCancalUseReq_descriptor_,
      SkillCancalUseReq::default_instance_,
      SkillCancalUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCancalUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCancalUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCancalUseReq));
  SkillUseResultBroadRsp_descriptor_ = file->message_type(9);
  static const int SkillUseResultBroadRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp, target_lst_),
  };
  SkillUseResultBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillUseResultBroadRsp_descriptor_,
      SkillUseResultBroadRsp::default_instance_,
      SkillUseResultBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillUseResultBroadRsp));
  SkillUseResultBroadRsp_Target_descriptor_ = SkillUseResultBroadRsp_descriptor_->nested_type(0);
  static const int SkillUseResultBroadRsp_Target_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, digital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, bedead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, isdeadbeback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, bebackdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, type_),
  };
  SkillUseResultBroadRsp_Target_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillUseResultBroadRsp_Target_descriptor_,
      SkillUseResultBroadRsp_Target::default_instance_,
      SkillUseResultBroadRsp_Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseResultBroadRsp_Target, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillUseResultBroadRsp_Target));
  SkillUseBroadRsp_descriptor_ = file->message_type(10);
  static const int SkillUseBroadRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, cid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, pos_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, count_),
  };
  SkillUseBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillUseBroadRsp_descriptor_,
      SkillUseBroadRsp::default_instance_,
      SkillUseBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUseBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillUseBroadRsp));
  SkillWarnBroadRsp_descriptor_ = file->message_type(11);
  static const int SkillWarnBroadRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWarnBroadRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWarnBroadRsp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWarnBroadRsp, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWarnBroadRsp, pos_lst_),
  };
  SkillWarnBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillWarnBroadRsp_descriptor_,
      SkillWarnBroadRsp::default_instance_,
      SkillWarnBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWarnBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWarnBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillWarnBroadRsp));
  SkillCancelUseBroadRsp_descriptor_ = file->message_type(12);
  static const int SkillCancelUseBroadRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCancelUseBroadRsp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCancelUseBroadRsp, cid_),
  };
  SkillCancelUseBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCancelUseBroadRsp_descriptor_,
      SkillCancelUseBroadRsp::default_instance_,
      SkillCancelUseBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCancelUseBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCancelUseBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCancelUseBroadRsp));
  SkillBreakReq_descriptor_ = file->message_type(13);
  static const int SkillBreakReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBreakReq, skill_id_),
  };
  SkillBreakReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillBreakReq_descriptor_,
      SkillBreakReq::default_instance_,
      SkillBreakReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBreakReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBreakReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillBreakReq));
  SkillBreakBroadRsp_descriptor_ = file->message_type(14);
  static const int SkillBreakBroadRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBreakBroadRsp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBreakBroadRsp, cid_),
  };
  SkillBreakBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillBreakBroadRsp_descriptor_,
      SkillBreakBroadRsp::default_instance_,
      SkillBreakBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBreakBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBreakBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillBreakBroadRsp));
  SkillGroupUpdateRsp_descriptor_ = file->message_type(15);
  static const int SkillGroupUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupUpdateRsp, skill_group_),
  };
  SkillGroupUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillGroupUpdateRsp_descriptor_,
      SkillGroupUpdateRsp::default_instance_,
      SkillGroupUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillGroupUpdateRsp));
  SkillInfoReq_descriptor_ = file->message_type(16);
  static const int SkillInfoReq_offsets_[1] = {
  };
  SkillInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfoReq_descriptor_,
      SkillInfoReq::default_instance_,
      SkillInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfoReq));
  SkillInfoRsp_descriptor_ = file->message_type(17);
  static const int SkillInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoRsp, advance_info_),
  };
  SkillInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfoRsp_descriptor_,
      SkillInfoRsp::default_instance_,
      SkillInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfoRsp));
  SkillInfoUpdateRsp_descriptor_ = file->message_type(18);
  static const int SkillInfoUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoUpdateRsp, info_),
  };
  SkillInfoUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfoUpdateRsp_descriptor_,
      SkillInfoUpdateRsp::default_instance_,
      SkillInfoUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfoUpdateRsp));
  SkillGroupChgReq_descriptor_ = file->message_type(19);
  static const int SkillGroupChgReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupChgReq, group_),
  };
  SkillGroupChgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillGroupChgReq_descriptor_,
      SkillGroupChgReq::default_instance_,
      SkillGroupChgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupChgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupChgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillGroupChgReq));
  SkillGroupChgRsp_descriptor_ = file->message_type(20);
  static const int SkillGroupChgRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupChgRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupChgRsp, group_),
  };
  SkillGroupChgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillGroupChgRsp_descriptor_,
      SkillGroupChgRsp::default_instance_,
      SkillGroupChgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupChgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupChgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillGroupChgRsp));
  SkillInfoDelRsp_descriptor_ = file->message_type(21);
  static const int SkillInfoDelRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoDelRsp, skill_lst_),
  };
  SkillInfoDelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfoDelRsp_descriptor_,
      SkillInfoDelRsp::default_instance_,
      SkillInfoDelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoDelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfoDelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfoDelRsp));
  SkillWakeupReq_descriptor_ = file->message_type(22);
  static const int SkillWakeupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWakeupReq, skill_id_),
  };
  SkillWakeupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillWakeupReq_descriptor_,
      SkillWakeupReq::default_instance_,
      SkillWakeupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWakeupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWakeupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillWakeupReq));
  SkillWakeupRsp_descriptor_ = file->message_type(23);
  static const int SkillWakeupRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWakeupRsp, ret_),
  };
  SkillWakeupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillWakeupRsp_descriptor_,
      SkillWakeupRsp::default_instance_,
      SkillWakeupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWakeupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillWakeupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillWakeupRsp));
  SkillChgPosReq_descriptor_ = file->message_type(24);
  static const int SkillChgPosReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillChgPosReq, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillChgPosReq, pos_),
  };
  SkillChgPosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillChgPosReq_descriptor_,
      SkillChgPosReq::default_instance_,
      SkillChgPosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillChgPosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillChgPosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillChgPosReq));
  SkillChgPosRsp_descriptor_ = file->message_type(25);
  static const int SkillChgPosRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillChgPosRsp, ret_),
  };
  SkillChgPosRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillChgPosRsp_descriptor_,
      SkillChgPosRsp::default_instance_,
      SkillChgPosRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillChgPosRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillChgPosRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillChgPosRsp));
  SkillUpgradeReq_descriptor_ = file->message_type(26);
  static const int SkillUpgradeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeReq, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeReq, type_),
  };
  SkillUpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillUpgradeReq_descriptor_,
      SkillUpgradeReq::default_instance_,
      SkillUpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillUpgradeReq));
  SkillUpgradeRsp_descriptor_ = file->message_type(27);
  static const int SkillUpgradeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeRsp, ret_),
  };
  SkillUpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillUpgradeRsp_descriptor_,
      SkillUpgradeRsp::default_instance_,
      SkillUpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillUpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillUpgradeRsp));
  SkillSetAutoUseReq_descriptor_ = file->message_type(28);
  static const int SkillSetAutoUseReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSetAutoUseReq, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSetAutoUseReq, is_auto_),
  };
  SkillSetAutoUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillSetAutoUseReq_descriptor_,
      SkillSetAutoUseReq::default_instance_,
      SkillSetAutoUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSetAutoUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSetAutoUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillSetAutoUseReq));
  SkillSetAutoUseRsp_descriptor_ = file->message_type(29);
  static const int SkillSetAutoUseRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSetAutoUseRsp, ret_),
  };
  SkillSetAutoUseRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillSetAutoUseRsp_descriptor_,
      SkillSetAutoUseRsp::default_instance_,
      SkillSetAutoUseRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSetAutoUseRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSetAutoUseRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillSetAutoUseRsp));
  SkillAdvanceReq_descriptor_ = file->message_type(30);
  static const int SkillAdvanceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceReq, advance_),
  };
  SkillAdvanceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceReq_descriptor_,
      SkillAdvanceReq::default_instance_,
      SkillAdvanceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceReq));
  SkillAdvanceRsp_descriptor_ = file->message_type(31);
  static const int SkillAdvanceRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceRsp, ret_),
  };
  SkillAdvanceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceRsp_descriptor_,
      SkillAdvanceRsp::default_instance_,
      SkillAdvanceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceRsp));
  SkillAdvanceChgPosReq_descriptor_ = file->message_type(32);
  static const int SkillAdvanceChgPosReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceChgPosReq, pos_),
  };
  SkillAdvanceChgPosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceChgPosReq_descriptor_,
      SkillAdvanceChgPosReq::default_instance_,
      SkillAdvanceChgPosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceChgPosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceChgPosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceChgPosReq));
  SkillAdvanceChgPosRsp_descriptor_ = file->message_type(33);
  static const int SkillAdvanceChgPosRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceChgPosRsp, ret_),
  };
  SkillAdvanceChgPosRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceChgPosRsp_descriptor_,
      SkillAdvanceChgPosRsp::default_instance_,
      SkillAdvanceChgPosRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceChgPosRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceChgPosRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceChgPosRsp));
  SkillAdvanceResetReq_descriptor_ = file->message_type(34);
  static const int SkillAdvanceResetReq_offsets_[1] = {
  };
  SkillAdvanceResetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceResetReq_descriptor_,
      SkillAdvanceResetReq::default_instance_,
      SkillAdvanceResetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceResetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceResetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceResetReq));
  SkillAdvanceResetRsp_descriptor_ = file->message_type(35);
  static const int SkillAdvanceResetRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceResetRsp, ret_),
  };
  SkillAdvanceResetRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceResetRsp_descriptor_,
      SkillAdvanceResetRsp::default_instance_,
      SkillAdvanceResetRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceResetRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceResetRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceResetRsp));
  SkillAdvanceUpdateRsp_descriptor_ = file->message_type(36);
  static const int SkillAdvanceUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceUpdateRsp, advance_info_),
  };
  SkillAdvanceUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceUpdateRsp_descriptor_,
      SkillAdvanceUpdateRsp::default_instance_,
      SkillAdvanceUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceUpdateRsp));
  SkillAdvanceUnlockPosReq_descriptor_ = file->message_type(37);
  static const int SkillAdvanceUnlockPosReq_offsets_[1] = {
  };
  SkillAdvanceUnlockPosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceUnlockPosReq_descriptor_,
      SkillAdvanceUnlockPosReq::default_instance_,
      SkillAdvanceUnlockPosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceUnlockPosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceUnlockPosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceUnlockPosReq));
  SkillAdvanceUnlockPosRsp_descriptor_ = file->message_type(38);
  static const int SkillAdvanceUnlockPosRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceUnlockPosRsp, ret_),
  };
  SkillAdvanceUnlockPosRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAdvanceUnlockPosRsp_descriptor_,
      SkillAdvanceUnlockPosRsp::default_instance_,
      SkillAdvanceUnlockPosRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceUnlockPosRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAdvanceUnlockPosRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAdvanceUnlockPosRsp));
  SkillTalentInfoReq_descriptor_ = file->message_type(39);
  static const int SkillTalentInfoReq_offsets_[1] = {
  };
  SkillTalentInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTalentInfoReq_descriptor_,
      SkillTalentInfoReq::default_instance_,
      SkillTalentInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTalentInfoReq));
  SkillTalentInfoRsp_descriptor_ = file->message_type(40);
  static const int SkillTalentInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentInfoRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentInfoRsp, can_use_),
  };
  SkillTalentInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTalentInfoRsp_descriptor_,
      SkillTalentInfoRsp::default_instance_,
      SkillTalentInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTalentInfoRsp));
  SkillTalentPointRsp_descriptor_ = file->message_type(41);
  static const int SkillTalentPointRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentPointRsp, can_use_),
  };
  SkillTalentPointRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTalentPointRsp_descriptor_,
      SkillTalentPointRsp::default_instance_,
      SkillTalentPointRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentPointRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentPointRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTalentPointRsp));
  SkillTalentResetReq_descriptor_ = file->message_type(42);
  static const int SkillTalentResetReq_offsets_[1] = {
  };
  SkillTalentResetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTalentResetReq_descriptor_,
      SkillTalentResetReq::default_instance_,
      SkillTalentResetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentResetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentResetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTalentResetReq));
  SkillTalentResetRsp_descriptor_ = file->message_type(43);
  static const int SkillTalentResetRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentResetRsp, ret_),
  };
  SkillTalentResetRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTalentResetRsp_descriptor_,
      SkillTalentResetRsp::default_instance_,
      SkillTalentResetRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentResetRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentResetRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTalentResetRsp));
  SkillTalentUsePointReq_descriptor_ = file->message_type(44);
  static const int SkillTalentUsePointReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentUsePointReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentUsePointReq, level_),
  };
  SkillTalentUsePointReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTalentUsePointReq_descriptor_,
      SkillTalentUsePointReq::default_instance_,
      SkillTalentUsePointReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentUsePointReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentUsePointReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTalentUsePointReq));
  SkillTalentUsePointRsp_descriptor_ = file->message_type(45);
  static const int SkillTalentUsePointRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentUsePointRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentUsePointRsp, info_),
  };
  SkillTalentUsePointRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTalentUsePointRsp_descriptor_,
      SkillTalentUsePointRsp::default_instance_,
      SkillTalentUsePointRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentUsePointRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTalentUsePointRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTalentUsePointRsp));
  SkillAngerUpdateRsp_descriptor_ = file->message_type(46);
  static const int SkillAngerUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAngerUpdateRsp, anger_value_),
  };
  SkillAngerUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAngerUpdateRsp_descriptor_,
      SkillAngerUpdateRsp::default_instance_,
      SkillAngerUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAngerUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAngerUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAngerUpdateRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Skill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceProto_descriptor_, &SkillAdvanceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvancePosProto_descriptor_, &SkillAdvancePosProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceListProto_descriptor_, &SkillAdvanceListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfoProto_descriptor_, &SkillInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfoListProto_descriptor_, &SkillInfoListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTalentProto_descriptor_, &SkillTalentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillUseReq_descriptor_, &SkillUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillSyncTargetReq_descriptor_, &SkillSyncTargetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCancalUseReq_descriptor_, &SkillCancalUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillUseResultBroadRsp_descriptor_, &SkillUseResultBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillUseResultBroadRsp_Target_descriptor_, &SkillUseResultBroadRsp_Target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillUseBroadRsp_descriptor_, &SkillUseBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillWarnBroadRsp_descriptor_, &SkillWarnBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCancelUseBroadRsp_descriptor_, &SkillCancelUseBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillBreakReq_descriptor_, &SkillBreakReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillBreakBroadRsp_descriptor_, &SkillBreakBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillGroupUpdateRsp_descriptor_, &SkillGroupUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfoReq_descriptor_, &SkillInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfoRsp_descriptor_, &SkillInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfoUpdateRsp_descriptor_, &SkillInfoUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillGroupChgReq_descriptor_, &SkillGroupChgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillGroupChgRsp_descriptor_, &SkillGroupChgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfoDelRsp_descriptor_, &SkillInfoDelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillWakeupReq_descriptor_, &SkillWakeupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillWakeupRsp_descriptor_, &SkillWakeupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillChgPosReq_descriptor_, &SkillChgPosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillChgPosRsp_descriptor_, &SkillChgPosRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillUpgradeReq_descriptor_, &SkillUpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillUpgradeRsp_descriptor_, &SkillUpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillSetAutoUseReq_descriptor_, &SkillSetAutoUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillSetAutoUseRsp_descriptor_, &SkillSetAutoUseRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceReq_descriptor_, &SkillAdvanceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceRsp_descriptor_, &SkillAdvanceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceChgPosReq_descriptor_, &SkillAdvanceChgPosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceChgPosRsp_descriptor_, &SkillAdvanceChgPosRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceResetReq_descriptor_, &SkillAdvanceResetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceResetRsp_descriptor_, &SkillAdvanceResetRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceUpdateRsp_descriptor_, &SkillAdvanceUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceUnlockPosReq_descriptor_, &SkillAdvanceUnlockPosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAdvanceUnlockPosRsp_descriptor_, &SkillAdvanceUnlockPosRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTalentInfoReq_descriptor_, &SkillTalentInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTalentInfoRsp_descriptor_, &SkillTalentInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTalentPointRsp_descriptor_, &SkillTalentPointRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTalentResetReq_descriptor_, &SkillTalentResetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTalentResetRsp_descriptor_, &SkillTalentResetRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTalentUsePointReq_descriptor_, &SkillTalentUsePointReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTalentUsePointRsp_descriptor_, &SkillTalentUsePointRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAngerUpdateRsp_descriptor_, &SkillAngerUpdateRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Skill_2eproto() {
  delete SkillAdvanceProto::default_instance_;
  delete SkillAdvanceProto_reflection_;
  delete SkillAdvancePosProto::default_instance_;
  delete SkillAdvancePosProto_reflection_;
  delete SkillAdvanceListProto::default_instance_;
  delete SkillAdvanceListProto_reflection_;
  delete SkillInfoProto::default_instance_;
  delete SkillInfoProto_reflection_;
  delete SkillInfoListProto::default_instance_;
  delete SkillInfoListProto_reflection_;
  delete SkillTalentProto::default_instance_;
  delete SkillTalentProto_reflection_;
  delete SkillUseReq::default_instance_;
  delete SkillUseReq_reflection_;
  delete SkillSyncTargetReq::default_instance_;
  delete SkillSyncTargetReq_reflection_;
  delete SkillCancalUseReq::default_instance_;
  delete SkillCancalUseReq_reflection_;
  delete SkillUseResultBroadRsp::default_instance_;
  delete SkillUseResultBroadRsp_reflection_;
  delete SkillUseResultBroadRsp_Target::default_instance_;
  delete SkillUseResultBroadRsp_Target_reflection_;
  delete SkillUseBroadRsp::default_instance_;
  delete SkillUseBroadRsp_reflection_;
  delete SkillWarnBroadRsp::default_instance_;
  delete SkillWarnBroadRsp_reflection_;
  delete SkillCancelUseBroadRsp::default_instance_;
  delete SkillCancelUseBroadRsp_reflection_;
  delete SkillBreakReq::default_instance_;
  delete SkillBreakReq_reflection_;
  delete SkillBreakBroadRsp::default_instance_;
  delete SkillBreakBroadRsp_reflection_;
  delete SkillGroupUpdateRsp::default_instance_;
  delete SkillGroupUpdateRsp_reflection_;
  delete SkillInfoReq::default_instance_;
  delete SkillInfoReq_reflection_;
  delete SkillInfoRsp::default_instance_;
  delete SkillInfoRsp_reflection_;
  delete SkillInfoUpdateRsp::default_instance_;
  delete SkillInfoUpdateRsp_reflection_;
  delete SkillGroupChgReq::default_instance_;
  delete SkillGroupChgReq_reflection_;
  delete SkillGroupChgRsp::default_instance_;
  delete SkillGroupChgRsp_reflection_;
  delete SkillInfoDelRsp::default_instance_;
  delete SkillInfoDelRsp_reflection_;
  delete SkillWakeupReq::default_instance_;
  delete SkillWakeupReq_reflection_;
  delete SkillWakeupRsp::default_instance_;
  delete SkillWakeupRsp_reflection_;
  delete SkillChgPosReq::default_instance_;
  delete SkillChgPosReq_reflection_;
  delete SkillChgPosRsp::default_instance_;
  delete SkillChgPosRsp_reflection_;
  delete SkillUpgradeReq::default_instance_;
  delete SkillUpgradeReq_reflection_;
  delete SkillUpgradeRsp::default_instance_;
  delete SkillUpgradeRsp_reflection_;
  delete SkillSetAutoUseReq::default_instance_;
  delete SkillSetAutoUseReq_reflection_;
  delete SkillSetAutoUseRsp::default_instance_;
  delete SkillSetAutoUseRsp_reflection_;
  delete SkillAdvanceReq::default_instance_;
  delete SkillAdvanceReq_reflection_;
  delete SkillAdvanceRsp::default_instance_;
  delete SkillAdvanceRsp_reflection_;
  delete SkillAdvanceChgPosReq::default_instance_;
  delete SkillAdvanceChgPosReq_reflection_;
  delete SkillAdvanceChgPosRsp::default_instance_;
  delete SkillAdvanceChgPosRsp_reflection_;
  delete SkillAdvanceResetReq::default_instance_;
  delete SkillAdvanceResetReq_reflection_;
  delete SkillAdvanceResetRsp::default_instance_;
  delete SkillAdvanceResetRsp_reflection_;
  delete SkillAdvanceUpdateRsp::default_instance_;
  delete SkillAdvanceUpdateRsp_reflection_;
  delete SkillAdvanceUnlockPosReq::default_instance_;
  delete SkillAdvanceUnlockPosReq_reflection_;
  delete SkillAdvanceUnlockPosRsp::default_instance_;
  delete SkillAdvanceUnlockPosRsp_reflection_;
  delete SkillTalentInfoReq::default_instance_;
  delete SkillTalentInfoReq_reflection_;
  delete SkillTalentInfoRsp::default_instance_;
  delete SkillTalentInfoRsp_reflection_;
  delete SkillTalentPointRsp::default_instance_;
  delete SkillTalentPointRsp_reflection_;
  delete SkillTalentResetReq::default_instance_;
  delete SkillTalentResetReq_reflection_;
  delete SkillTalentResetRsp::default_instance_;
  delete SkillTalentResetRsp_reflection_;
  delete SkillTalentUsePointReq::default_instance_;
  delete SkillTalentUsePointReq_reflection_;
  delete SkillTalentUsePointRsp::default_instance_;
  delete SkillTalentUsePointRsp_reflection_;
  delete SkillAngerUpdateRsp::default_instance_;
  delete SkillAngerUpdateRsp_reflection_;
}

void protobuf_AddDesc_Skill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Skill.proto\022\010proto_ff\032\tCom.proto\032\017ComD"
    "efine.proto\"3\n\021SkillAdvanceProto\022\017\n\007adva"
    "nce\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\"D\n\024SkillAdvance"
    "PosProto\022\013\n\003pos\030\001 \001(\005\022\017\n\007advance\030\002 \001(\005\022\016"
    "\n\006unlock\030\003 \001(\005\"\202\001\n\025SkillAdvanceListProto"
    "\022/\n\007pos_lst\030\001 \003(\0132\036.proto_ff.SkillAdvanc"
    "ePosProto\022(\n\003lst\030\002 \003(\0132\033.proto_ff.SkillA"
    "dvanceProto\022\016\n\006curpos\030\003 \001(\005\"A\n\016SkillInfo"
    "Proto\022\020\n\010skill_id\030\001 \001(\004\022\r\n\005level\030\002 \001(\005\022\016"
    "\n\006wakeup\030\003 \001(\005\";\n\022SkillInfoListProto\022%\n\003"
    "lst\030\001 \003(\0132\030.proto_ff.SkillInfoProto\"-\n\020S"
    "killTalentProto\022\n\n\002id\030\001 \001(\005\022\r\n\005level\030\002 \001"
    "(\005\"\303\001\n\013SkillUseReq\022\020\n\010skill_id\030\001 \002(\004\022 \n\003"
    "dir\030\002 \002(\0132\023.proto_ff.Vector3PB\022 \n\003pos\030\003 "
    "\002(\0132\023.proto_ff.Vector3PB\022\017\n\007cid_lst\030\004 \003("
    "\004\022\'\n\ntarget_pos\030\005 \001(\0132\023.proto_ff.Vector3"
    "PB\022$\n\007pos_lst\030\006 \003(\0132\023.proto_ff.Vector3PB"
    "\"J\n\022SkillSyncTargetReq\022\020\n\010skill_id\030\001 \002(\004"
    "\022\017\n\007cid_lst\030\002 \003(\004\022\021\n\tis_extend\030\003 \001(\005\"%\n\021"
    "SkillCancalUseReq\022\020\n\010skill_id\030\001 \002(\004\"\256\002\n\026"
    "SkillUseResultBroadRsp\022\020\n\010skill_id\030\001 \002(\004"
    "\022\013\n\003cid\030\002 \002(\004\022;\n\ntarget_lst\030\003 \003(\0132\'.prot"
    "o_ff.SkillUseResultBroadRsp.Target\032\267\001\n\006T"
    "arget\022\013\n\003cid\030\001 \002(\004\022\036\n\004attr\030\002 \003(\0132\020.proto"
    "_ff.Attr64\022$\n\007digital\030\003 \003(\0132\023.proto_ff.D"
    "igPerfor\022\016\n\006beDead\030\004 \001(\010\022\024\n\014isDeadBeback"
    "\030\005 \001(\010\022&\n\tbebackDir\030\006 \001(\0132\023.proto_ff.Vec"
    "tor3PB\022\014\n\004type\030\007 \001(\005\"\302\001\n\020SkillUseBroadRs"
    "p\022\020\n\010skill_id\030\001 \002(\004\022 \n\003dir\030\002 \002(\0132\023.proto"
    "_ff.Vector3PB\022\013\n\003cid\030\003 \002(\004\022\017\n\007cid_lst\030\004 "
    "\003(\004\022\'\n\ntarget_pos\030\005 \001(\0132\023.proto_ff.Vecto"
    "r3PB\022$\n\007pos_lst\030\006 \003(\0132\023.proto_ff.Vector3"
    "PB\022\r\n\005count\030\007 \001(\005\"\201\001\n\021SkillWarnBroadRsp\022"
    "\013\n\003cid\030\001 \002(\004\022\020\n\010skill_id\030\002 \002(\004\022\'\n\ntarget"
    "_pos\030\003 \001(\0132\023.proto_ff.Vector3PB\022$\n\007pos_l"
    "st\030\004 \003(\0132\023.proto_ff.Vector3PB\"7\n\026SkillCa"
    "ncelUseBroadRsp\022\020\n\010skill_id\030\001 \002(\004\022\013\n\003cid"
    "\030\002 \002(\004\"!\n\rSkillBreakReq\022\020\n\010skill_id\030\001 \002("
    "\004\"3\n\022SkillBreakBroadRsp\022\020\n\010skill_id\030\001 \002("
    "\004\022\013\n\003cid\030\002 \002(\004\"I\n\023SkillGroupUpdateRsp\0222\n"
    "\013skill_group\030\001 \001(\0132\035.proto_ff.SkillGroup"
    "ListProto\"\016\n\014SkillInfoReq\"q\n\014SkillInfoRs"
    "p\022*\n\004info\030\001 \001(\0132\034.proto_ff.SkillInfoList"
    "Proto\0225\n\014advance_info\030\002 \001(\0132\037.proto_ff.S"
    "killAdvanceListProto\"@\n\022SkillInfoUpdateR"
    "sp\022*\n\004info\030\001 \001(\0132\034.proto_ff.SkillInfoLis"
    "tProto\"!\n\020SkillGroupChgReq\022\r\n\005group\030\001 \001("
    "\r\".\n\020SkillGroupChgRsp\022\013\n\003ret\030\001 \002(\005\022\r\n\005gr"
    "oup\030\002 \001(\r\"$\n\017SkillInfoDelRsp\022\021\n\tskill_ls"
    "t\030\001 \003(\004\"\"\n\016SkillWakeupReq\022\020\n\010skill_id\030\001 "
    "\001(\004\"\035\n\016SkillWakeupRsp\022\013\n\003ret\030\001 \002(\005\"/\n\016Sk"
    "illChgPosReq\022\020\n\010skill_id\030\001 \001(\004\022\013\n\003pos\030\002 "
    "\001(\r\"\035\n\016SkillChgPosRsp\022\013\n\003ret\030\001 \002(\005\"1\n\017Sk"
    "illUpgradeReq\022\020\n\010skill_id\030\001 \001(\004\022\014\n\004type\030"
    "\002 \001(\005\"\036\n\017SkillUpgradeRsp\022\013\n\003ret\030\001 \002(\005\"7\n"
    "\022SkillSetAutoUseReq\022\020\n\010skill_id\030\001 \001(\004\022\017\n"
    "\007is_auto\030\002 \001(\005\"!\n\022SkillSetAutoUseRsp\022\013\n\003"
    "ret\030\001 \002(\005\"\"\n\017SkillAdvanceReq\022\017\n\007advance\030"
    "\001 \002(\r\"\036\n\017SkillAdvanceRsp\022\013\n\003ret\030\001 \002(\005\"$\n"
    "\025SkillAdvanceChgPosReq\022\013\n\003pos\030\001 \002(\r\"$\n\025S"
    "killAdvanceChgPosRsp\022\013\n\003ret\030\001 \002(\005\"\026\n\024Ski"
    "llAdvanceResetReq\"#\n\024SkillAdvanceResetRs"
    "p\022\013\n\003ret\030\001 \002(\005\"N\n\025SkillAdvanceUpdateRsp\022"
    "5\n\014advance_info\030\001 \001(\0132\037.proto_ff.SkillAd"
    "vanceListProto\"\032\n\030SkillAdvanceUnlockPosR"
    "eq\"\'\n\030SkillAdvanceUnlockPosRsp\022\013\n\003ret\030\001 "
    "\002(\005\"\024\n\022SkillTalentInfoReq\"O\n\022SkillTalent"
    "InfoRsp\022(\n\004info\030\001 \003(\0132\032.proto_ff.SkillTa"
    "lentProto\022\017\n\007can_use\030\002 \001(\005\"&\n\023SkillTalen"
    "tPointRsp\022\017\n\007can_use\030\001 \001(\005\"\025\n\023SkillTalen"
    "tResetReq\"\"\n\023SkillTalentResetRsp\022\013\n\003ret\030"
    "\001 \002(\005\"3\n\026SkillTalentUsePointReq\022\n\n\002id\030\001 "
    "\001(\005\022\r\n\005level\030\002 \001(\r\"O\n\026SkillTalentUsePoin"
    "tRsp\022\013\n\003ret\030\001 \002(\005\022(\n\004info\030\002 \001(\0132\032.proto_"
    "ff.SkillTalentProto\"*\n\023SkillAngerUpdateR"
    "sp\022\023\n\013anger_value\030\001 \002(\r", 3023);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Skill.proto", &protobuf_RegisterTypes);
  SkillAdvanceProto::default_instance_ = new SkillAdvanceProto();
  SkillAdvancePosProto::default_instance_ = new SkillAdvancePosProto();
  SkillAdvanceListProto::default_instance_ = new SkillAdvanceListProto();
  SkillInfoProto::default_instance_ = new SkillInfoProto();
  SkillInfoListProto::default_instance_ = new SkillInfoListProto();
  SkillTalentProto::default_instance_ = new SkillTalentProto();
  SkillUseReq::default_instance_ = new SkillUseReq();
  SkillSyncTargetReq::default_instance_ = new SkillSyncTargetReq();
  SkillCancalUseReq::default_instance_ = new SkillCancalUseReq();
  SkillUseResultBroadRsp::default_instance_ = new SkillUseResultBroadRsp();
  SkillUseResultBroadRsp_Target::default_instance_ = new SkillUseResultBroadRsp_Target();
  SkillUseBroadRsp::default_instance_ = new SkillUseBroadRsp();
  SkillWarnBroadRsp::default_instance_ = new SkillWarnBroadRsp();
  SkillCancelUseBroadRsp::default_instance_ = new SkillCancelUseBroadRsp();
  SkillBreakReq::default_instance_ = new SkillBreakReq();
  SkillBreakBroadRsp::default_instance_ = new SkillBreakBroadRsp();
  SkillGroupUpdateRsp::default_instance_ = new SkillGroupUpdateRsp();
  SkillInfoReq::default_instance_ = new SkillInfoReq();
  SkillInfoRsp::default_instance_ = new SkillInfoRsp();
  SkillInfoUpdateRsp::default_instance_ = new SkillInfoUpdateRsp();
  SkillGroupChgReq::default_instance_ = new SkillGroupChgReq();
  SkillGroupChgRsp::default_instance_ = new SkillGroupChgRsp();
  SkillInfoDelRsp::default_instance_ = new SkillInfoDelRsp();
  SkillWakeupReq::default_instance_ = new SkillWakeupReq();
  SkillWakeupRsp::default_instance_ = new SkillWakeupRsp();
  SkillChgPosReq::default_instance_ = new SkillChgPosReq();
  SkillChgPosRsp::default_instance_ = new SkillChgPosRsp();
  SkillUpgradeReq::default_instance_ = new SkillUpgradeReq();
  SkillUpgradeRsp::default_instance_ = new SkillUpgradeRsp();
  SkillSetAutoUseReq::default_instance_ = new SkillSetAutoUseReq();
  SkillSetAutoUseRsp::default_instance_ = new SkillSetAutoUseRsp();
  SkillAdvanceReq::default_instance_ = new SkillAdvanceReq();
  SkillAdvanceRsp::default_instance_ = new SkillAdvanceRsp();
  SkillAdvanceChgPosReq::default_instance_ = new SkillAdvanceChgPosReq();
  SkillAdvanceChgPosRsp::default_instance_ = new SkillAdvanceChgPosRsp();
  SkillAdvanceResetReq::default_instance_ = new SkillAdvanceResetReq();
  SkillAdvanceResetRsp::default_instance_ = new SkillAdvanceResetRsp();
  SkillAdvanceUpdateRsp::default_instance_ = new SkillAdvanceUpdateRsp();
  SkillAdvanceUnlockPosReq::default_instance_ = new SkillAdvanceUnlockPosReq();
  SkillAdvanceUnlockPosRsp::default_instance_ = new SkillAdvanceUnlockPosRsp();
  SkillTalentInfoReq::default_instance_ = new SkillTalentInfoReq();
  SkillTalentInfoRsp::default_instance_ = new SkillTalentInfoRsp();
  SkillTalentPointRsp::default_instance_ = new SkillTalentPointRsp();
  SkillTalentResetReq::default_instance_ = new SkillTalentResetReq();
  SkillTalentResetRsp::default_instance_ = new SkillTalentResetRsp();
  SkillTalentUsePointReq::default_instance_ = new SkillTalentUsePointReq();
  SkillTalentUsePointRsp::default_instance_ = new SkillTalentUsePointRsp();
  SkillAngerUpdateRsp::default_instance_ = new SkillAngerUpdateRsp();
  SkillAdvanceProto::default_instance_->InitAsDefaultInstance();
  SkillAdvancePosProto::default_instance_->InitAsDefaultInstance();
  SkillAdvanceListProto::default_instance_->InitAsDefaultInstance();
  SkillInfoProto::default_instance_->InitAsDefaultInstance();
  SkillInfoListProto::default_instance_->InitAsDefaultInstance();
  SkillTalentProto::default_instance_->InitAsDefaultInstance();
  SkillUseReq::default_instance_->InitAsDefaultInstance();
  SkillSyncTargetReq::default_instance_->InitAsDefaultInstance();
  SkillCancalUseReq::default_instance_->InitAsDefaultInstance();
  SkillUseResultBroadRsp::default_instance_->InitAsDefaultInstance();
  SkillUseResultBroadRsp_Target::default_instance_->InitAsDefaultInstance();
  SkillUseBroadRsp::default_instance_->InitAsDefaultInstance();
  SkillWarnBroadRsp::default_instance_->InitAsDefaultInstance();
  SkillCancelUseBroadRsp::default_instance_->InitAsDefaultInstance();
  SkillBreakReq::default_instance_->InitAsDefaultInstance();
  SkillBreakBroadRsp::default_instance_->InitAsDefaultInstance();
  SkillGroupUpdateRsp::default_instance_->InitAsDefaultInstance();
  SkillInfoReq::default_instance_->InitAsDefaultInstance();
  SkillInfoRsp::default_instance_->InitAsDefaultInstance();
  SkillInfoUpdateRsp::default_instance_->InitAsDefaultInstance();
  SkillGroupChgReq::default_instance_->InitAsDefaultInstance();
  SkillGroupChgRsp::default_instance_->InitAsDefaultInstance();
  SkillInfoDelRsp::default_instance_->InitAsDefaultInstance();
  SkillWakeupReq::default_instance_->InitAsDefaultInstance();
  SkillWakeupRsp::default_instance_->InitAsDefaultInstance();
  SkillChgPosReq::default_instance_->InitAsDefaultInstance();
  SkillChgPosRsp::default_instance_->InitAsDefaultInstance();
  SkillUpgradeReq::default_instance_->InitAsDefaultInstance();
  SkillUpgradeRsp::default_instance_->InitAsDefaultInstance();
  SkillSetAutoUseReq::default_instance_->InitAsDefaultInstance();
  SkillSetAutoUseRsp::default_instance_->InitAsDefaultInstance();
  SkillAdvanceReq::default_instance_->InitAsDefaultInstance();
  SkillAdvanceRsp::default_instance_->InitAsDefaultInstance();
  SkillAdvanceChgPosReq::default_instance_->InitAsDefaultInstance();
  SkillAdvanceChgPosRsp::default_instance_->InitAsDefaultInstance();
  SkillAdvanceResetReq::default_instance_->InitAsDefaultInstance();
  SkillAdvanceResetRsp::default_instance_->InitAsDefaultInstance();
  SkillAdvanceUpdateRsp::default_instance_->InitAsDefaultInstance();
  SkillAdvanceUnlockPosReq::default_instance_->InitAsDefaultInstance();
  SkillAdvanceUnlockPosRsp::default_instance_->InitAsDefaultInstance();
  SkillTalentInfoReq::default_instance_->InitAsDefaultInstance();
  SkillTalentInfoRsp::default_instance_->InitAsDefaultInstance();
  SkillTalentPointRsp::default_instance_->InitAsDefaultInstance();
  SkillTalentResetReq::default_instance_->InitAsDefaultInstance();
  SkillTalentResetRsp::default_instance_->InitAsDefaultInstance();
  SkillTalentUsePointReq::default_instance_->InitAsDefaultInstance();
  SkillTalentUsePointRsp::default_instance_->InitAsDefaultInstance();
  SkillAngerUpdateRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Skill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Skill_2eproto {
  StaticDescriptorInitializer_Skill_2eproto() {
    protobuf_AddDesc_Skill_2eproto();
  }
} static_descriptor_initializer_Skill_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceProto::kAdvanceFieldNumber;
const int SkillAdvanceProto::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceProto::SkillAdvanceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceProto::InitAsDefaultInstance() {
}

SkillAdvanceProto::SkillAdvanceProto(const SkillAdvanceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceProto::SharedCtor() {
  _cached_size_ = 0;
  advance_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceProto::~SkillAdvanceProto() {
  SharedDtor();
}

void SkillAdvanceProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceProto_descriptor_;
}

const SkillAdvanceProto& SkillAdvanceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceProto* SkillAdvanceProto::default_instance_ = NULL;

SkillAdvanceProto* SkillAdvanceProto::New() const {
  return new SkillAdvanceProto;
}

void SkillAdvanceProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    advance_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 advance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 advance = 1;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->advance(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 advance = 1;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->advance(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 advance = 1;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advance());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceProto::MergeFrom(const SkillAdvanceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceProto::CopyFrom(const SkillAdvanceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceProto::IsInitialized() const {

  return true;
}

void SkillAdvanceProto::Swap(SkillAdvanceProto* other) {
  if (other != this) {
    std::swap(advance_, other->advance_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceProto_descriptor_;
  metadata.reflection = SkillAdvanceProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvancePosProto::kPosFieldNumber;
const int SkillAdvancePosProto::kAdvanceFieldNumber;
const int SkillAdvancePosProto::kUnlockFieldNumber;
#endif  // !_MSC_VER

SkillAdvancePosProto::SkillAdvancePosProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvancePosProto::InitAsDefaultInstance() {
}

SkillAdvancePosProto::SkillAdvancePosProto(const SkillAdvancePosProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvancePosProto::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  advance_ = 0;
  unlock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvancePosProto::~SkillAdvancePosProto() {
  SharedDtor();
}

void SkillAdvancePosProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvancePosProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvancePosProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvancePosProto_descriptor_;
}

const SkillAdvancePosProto& SkillAdvancePosProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvancePosProto* SkillAdvancePosProto::default_instance_ = NULL;

SkillAdvancePosProto* SkillAdvancePosProto::New() const {
  return new SkillAdvancePosProto;
}

void SkillAdvancePosProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    advance_ = 0;
    unlock_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvancePosProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advance;
        break;
      }

      // optional int32 advance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvancePosProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional int32 advance = 2;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->advance(), output);
  }

  // optional int32 unlock = 3;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvancePosProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional int32 advance = 2;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->advance(), target);
  }

  // optional int32 unlock = 3;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvancePosProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 advance = 2;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advance());
    }

    // optional int32 unlock = 3;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvancePosProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvancePosProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvancePosProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvancePosProto::MergeFrom(const SkillAdvancePosProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvancePosProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvancePosProto::CopyFrom(const SkillAdvancePosProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvancePosProto::IsInitialized() const {

  return true;
}

void SkillAdvancePosProto::Swap(SkillAdvancePosProto* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(advance_, other->advance_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvancePosProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvancePosProto_descriptor_;
  metadata.reflection = SkillAdvancePosProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceListProto::kPosLstFieldNumber;
const int SkillAdvanceListProto::kLstFieldNumber;
const int SkillAdvanceListProto::kCurposFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceListProto::SkillAdvanceListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceListProto::InitAsDefaultInstance() {
}

SkillAdvanceListProto::SkillAdvanceListProto(const SkillAdvanceListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceListProto::SharedCtor() {
  _cached_size_ = 0;
  curpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceListProto::~SkillAdvanceListProto() {
  SharedDtor();
}

void SkillAdvanceListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceListProto_descriptor_;
}

const SkillAdvanceListProto& SkillAdvanceListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceListProto* SkillAdvanceListProto::default_instance_ = NULL;

SkillAdvanceListProto* SkillAdvanceListProto::New() const {
  return new SkillAdvanceListProto;
}

void SkillAdvanceListProto::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    curpos_ = 0;
  }
  pos_lst_.Clear();
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SkillAdvancePosProto pos_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pos_lst;
        if (input->ExpectTag(18)) goto parse_lst;
        break;
      }

      // repeated .proto_ff.SkillAdvanceProto lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lst;
        if (input->ExpectTag(24)) goto parse_curpos;
        break;
      }

      // optional int32 curpos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpos_)));
          set_has_curpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SkillAdvancePosProto pos_lst = 1;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos_lst(i), output);
  }

  // repeated .proto_ff.SkillAdvanceProto lst = 2;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lst(i), output);
  }

  // optional int32 curpos = 3;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SkillAdvancePosProto pos_lst = 1;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos_lst(i), target);
  }

  // repeated .proto_ff.SkillAdvanceProto lst = 2;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lst(i), target);
  }

  // optional int32 curpos = 3;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceListProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 curpos = 3;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpos());
    }

  }
  // repeated .proto_ff.SkillAdvancePosProto pos_lst = 1;
  total_size += 1 * this->pos_lst_size();
  for (int i = 0; i < this->pos_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_lst(i));
  }

  // repeated .proto_ff.SkillAdvanceProto lst = 2;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceListProto::MergeFrom(const SkillAdvanceListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_lst_.MergeFrom(from.pos_lst_);
  lst_.MergeFrom(from.lst_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_curpos()) {
      set_curpos(from.curpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceListProto::CopyFrom(const SkillAdvanceListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceListProto::IsInitialized() const {

  return true;
}

void SkillAdvanceListProto::Swap(SkillAdvanceListProto* other) {
  if (other != this) {
    pos_lst_.Swap(&other->pos_lst_);
    lst_.Swap(&other->lst_);
    std::swap(curpos_, other->curpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceListProto_descriptor_;
  metadata.reflection = SkillAdvanceListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfoProto::kSkillIdFieldNumber;
const int SkillInfoProto::kLevelFieldNumber;
const int SkillInfoProto::kWakeupFieldNumber;
#endif  // !_MSC_VER

SkillInfoProto::SkillInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfoProto::InitAsDefaultInstance() {
}

SkillInfoProto::SkillInfoProto(const SkillInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfoProto::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  wakeup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfoProto::~SkillInfoProto() {
  SharedDtor();
}

void SkillInfoProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfoProto_descriptor_;
}

const SkillInfoProto& SkillInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillInfoProto* SkillInfoProto::default_instance_ = NULL;

SkillInfoProto* SkillInfoProto::New() const {
  return new SkillInfoProto;
}

void SkillInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
    wakeup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wakeup;
        break;
      }

      // optional int32 wakeup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wakeup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wakeup_)));
          set_has_wakeup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 wakeup = 3;
  if (has_wakeup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wakeup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 wakeup = 3;
  if (has_wakeup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wakeup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 wakeup = 3;
    if (has_wakeup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wakeup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfoProto::MergeFrom(const SkillInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_wakeup()) {
      set_wakeup(from.wakeup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfoProto::CopyFrom(const SkillInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfoProto::IsInitialized() const {

  return true;
}

void SkillInfoProto::Swap(SkillInfoProto* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(wakeup_, other->wakeup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfoProto_descriptor_;
  metadata.reflection = SkillInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfoListProto::kLstFieldNumber;
#endif  // !_MSC_VER

SkillInfoListProto::SkillInfoListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfoListProto::InitAsDefaultInstance() {
}

SkillInfoListProto::SkillInfoListProto(const SkillInfoListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfoListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfoListProto::~SkillInfoListProto() {
  SharedDtor();
}

void SkillInfoListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfoListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfoListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfoListProto_descriptor_;
}

const SkillInfoListProto& SkillInfoListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillInfoListProto* SkillInfoListProto::default_instance_ = NULL;

SkillInfoListProto* SkillInfoListProto::New() const {
  return new SkillInfoListProto;
}

void SkillInfoListProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfoListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SkillInfoProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfoListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SkillInfoProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfoListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SkillInfoProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfoListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.SkillInfoProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfoListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfoListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfoListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfoListProto::MergeFrom(const SkillInfoListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfoListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfoListProto::CopyFrom(const SkillInfoListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfoListProto::IsInitialized() const {

  return true;
}

void SkillInfoListProto::Swap(SkillInfoListProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfoListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfoListProto_descriptor_;
  metadata.reflection = SkillInfoListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillTalentProto::kIdFieldNumber;
const int SkillTalentProto::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillTalentProto::SkillTalentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTalentProto::InitAsDefaultInstance() {
}

SkillTalentProto::SkillTalentProto(const SkillTalentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTalentProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTalentProto::~SkillTalentProto() {
  SharedDtor();
}

void SkillTalentProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTalentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTalentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTalentProto_descriptor_;
}

const SkillTalentProto& SkillTalentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTalentProto* SkillTalentProto::default_instance_ = NULL;

SkillTalentProto* SkillTalentProto::New() const {
  return new SkillTalentProto;
}

void SkillTalentProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTalentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillTalentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTalentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTalentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTalentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTalentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTalentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTalentProto::MergeFrom(const SkillTalentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTalentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTalentProto::CopyFrom(const SkillTalentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTalentProto::IsInitialized() const {

  return true;
}

void SkillTalentProto::Swap(SkillTalentProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTalentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTalentProto_descriptor_;
  metadata.reflection = SkillTalentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillUseReq::kSkillIdFieldNumber;
const int SkillUseReq::kDirFieldNumber;
const int SkillUseReq::kPosFieldNumber;
const int SkillUseReq::kCidLstFieldNumber;
const int SkillUseReq::kTargetPosFieldNumber;
const int SkillUseReq::kPosLstFieldNumber;
#endif  // !_MSC_VER

SkillUseReq::SkillUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillUseReq::InitAsDefaultInstance() {
  dir_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  target_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

SkillUseReq::SkillUseReq(const SkillUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillUseReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  dir_ = NULL;
  pos_ = NULL;
  target_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillUseReq::~SkillUseReq() {
  SharedDtor();
}

void SkillUseReq::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete pos_;
    delete target_pos_;
  }
}

void SkillUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillUseReq_descriptor_;
}

const SkillUseReq& SkillUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillUseReq* SkillUseReq::default_instance_ = NULL;

SkillUseReq* SkillUseReq::New() const {
  return new SkillUseReq;
}

void SkillUseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    if (has_dir()) {
      if (dir_ != NULL) dir_->::proto_ff::Vector3PB::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  cid_lst_.Clear();
  pos_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dir;
        break;
      }

      // required .proto_ff.Vector3PB dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .proto_ff.Vector3PB pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid_lst;
        break;
      }

      // repeated uint64 cid_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid_lst;
        if (input->ExpectTag(42)) goto parse_target_pos;
        break;
      }

      // optional .proto_ff.Vector3PB target_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pos_lst;
        break;
      }

      // repeated .proto_ff.Vector3PB pos_lst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pos_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // required .proto_ff.Vector3PB dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dir(), output);
  }

  // required .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // repeated uint64 cid_lst = 4;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->cid_lst(i), output);
  }

  // optional .proto_ff.Vector3PB target_pos = 5;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target_pos(), output);
  }

  // repeated .proto_ff.Vector3PB pos_lst = 6;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // required .proto_ff.Vector3PB dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dir(), target);
  }

  // required .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // repeated uint64 cid_lst = 4;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->cid_lst(i), target);
  }

  // optional .proto_ff.Vector3PB target_pos = 5;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->target_pos(), target);
  }

  // repeated .proto_ff.Vector3PB pos_lst = 6;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // required .proto_ff.Vector3PB dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // required .proto_ff.Vector3PB pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .proto_ff.Vector3PB target_pos = 5;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }

  }
  // repeated uint64 cid_lst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  // repeated .proto_ff.Vector3PB pos_lst = 6;
  total_size += 1 * this->pos_lst_size();
  for (int i = 0; i < this->pos_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillUseReq::MergeFrom(const SkillUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  pos_lst_.MergeFrom(from.pos_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_dir()) {
      mutable_dir()->::proto_ff::Vector3PB::MergeFrom(from.dir());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::proto_ff::Vector3PB::MergeFrom(from.target_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUseReq::CopyFrom(const SkillUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_dir()) {
    if (!this->dir().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  for (int i = 0; i < pos_lst_size(); i++) {
    if (!this->pos_lst(i).IsInitialized()) return false;
  }
  return true;
}

void SkillUseReq::Swap(SkillUseReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(dir_, other->dir_);
    std::swap(pos_, other->pos_);
    cid_lst_.Swap(&other->cid_lst_);
    std::swap(target_pos_, other->target_pos_);
    pos_lst_.Swap(&other->pos_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillUseReq_descriptor_;
  metadata.reflection = SkillUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillSyncTargetReq::kSkillIdFieldNumber;
const int SkillSyncTargetReq::kCidLstFieldNumber;
const int SkillSyncTargetReq::kIsExtendFieldNumber;
#endif  // !_MSC_VER

SkillSyncTargetReq::SkillSyncTargetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillSyncTargetReq::InitAsDefaultInstance() {
}

SkillSyncTargetReq::SkillSyncTargetReq(const SkillSyncTargetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillSyncTargetReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  is_extend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillSyncTargetReq::~SkillSyncTargetReq() {
  SharedDtor();
}

void SkillSyncTargetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillSyncTargetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillSyncTargetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSyncTargetReq_descriptor_;
}

const SkillSyncTargetReq& SkillSyncTargetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillSyncTargetReq* SkillSyncTargetReq::default_instance_ = NULL;

SkillSyncTargetReq* SkillSyncTargetReq::New() const {
  return new SkillSyncTargetReq;
}

void SkillSyncTargetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    is_extend_ = 0;
  }
  cid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillSyncTargetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        break;
      }

      // repeated uint64 cid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid_lst;
        if (input->ExpectTag(24)) goto parse_is_extend;
        break;
      }

      // optional int32 is_extend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_extend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_extend_)));
          set_has_is_extend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillSyncTargetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->cid_lst(i), output);
  }

  // optional int32 is_extend = 3;
  if (has_is_extend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_extend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillSyncTargetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // repeated uint64 cid_lst = 2;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->cid_lst(i), target);
  }

  // optional int32 is_extend = 3;
  if (has_is_extend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_extend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillSyncTargetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional int32 is_extend = 3;
    if (has_is_extend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_extend());
    }

  }
  // repeated uint64 cid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillSyncTargetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillSyncTargetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillSyncTargetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillSyncTargetReq::MergeFrom(const SkillSyncTargetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_is_extend()) {
      set_is_extend(from.is_extend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillSyncTargetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillSyncTargetReq::CopyFrom(const SkillSyncTargetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSyncTargetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillSyncTargetReq::Swap(SkillSyncTargetReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    cid_lst_.Swap(&other->cid_lst_);
    std::swap(is_extend_, other->is_extend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillSyncTargetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillSyncTargetReq_descriptor_;
  metadata.reflection = SkillSyncTargetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCancalUseReq::kSkillIdFieldNumber;
#endif  // !_MSC_VER

SkillCancalUseReq::SkillCancalUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillCancalUseReq::InitAsDefaultInstance() {
}

SkillCancalUseReq::SkillCancalUseReq(const SkillCancalUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillCancalUseReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCancalUseReq::~SkillCancalUseReq() {
  SharedDtor();
}

void SkillCancalUseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCancalUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCancalUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCancalUseReq_descriptor_;
}

const SkillCancalUseReq& SkillCancalUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillCancalUseReq* SkillCancalUseReq::default_instance_ = NULL;

SkillCancalUseReq* SkillCancalUseReq::New() const {
  return new SkillCancalUseReq;
}

void SkillCancalUseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCancalUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillCancalUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillCancalUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillCancalUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCancalUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCancalUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCancalUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCancalUseReq::MergeFrom(const SkillCancalUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCancalUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCancalUseReq::CopyFrom(const SkillCancalUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCancalUseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillCancalUseReq::Swap(SkillCancalUseReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCancalUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCancalUseReq_descriptor_;
  metadata.reflection = SkillCancalUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillUseResultBroadRsp_Target::kCidFieldNumber;
const int SkillUseResultBroadRsp_Target::kAttrFieldNumber;
const int SkillUseResultBroadRsp_Target::kDigitalFieldNumber;
const int SkillUseResultBroadRsp_Target::kBeDeadFieldNumber;
const int SkillUseResultBroadRsp_Target::kIsDeadBebackFieldNumber;
const int SkillUseResultBroadRsp_Target::kBebackDirFieldNumber;
const int SkillUseResultBroadRsp_Target::kTypeFieldNumber;
#endif  // !_MSC_VER

SkillUseResultBroadRsp_Target::SkillUseResultBroadRsp_Target()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillUseResultBroadRsp_Target::InitAsDefaultInstance() {
  bebackdir_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

SkillUseResultBroadRsp_Target::SkillUseResultBroadRsp_Target(const SkillUseResultBroadRsp_Target& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillUseResultBroadRsp_Target::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  bedead_ = false;
  isdeadbeback_ = false;
  bebackdir_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillUseResultBroadRsp_Target::~SkillUseResultBroadRsp_Target() {
  SharedDtor();
}

void SkillUseResultBroadRsp_Target::SharedDtor() {
  if (this != default_instance_) {
    delete bebackdir_;
  }
}

void SkillUseResultBroadRsp_Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUseResultBroadRsp_Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillUseResultBroadRsp_Target_descriptor_;
}

const SkillUseResultBroadRsp_Target& SkillUseResultBroadRsp_Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillUseResultBroadRsp_Target* SkillUseResultBroadRsp_Target::default_instance_ = NULL;

SkillUseResultBroadRsp_Target* SkillUseResultBroadRsp_Target::New() const {
  return new SkillUseResultBroadRsp_Target;
}

void SkillUseResultBroadRsp_Target::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    bedead_ = false;
    isdeadbeback_ = false;
    if (has_bebackdir()) {
      if (bebackdir_ != NULL) bebackdir_->::proto_ff::Vector3PB::Clear();
    }
    type_ = 0;
  }
  attr_.Clear();
  digital_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillUseResultBroadRsp_Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        if (input->ExpectTag(26)) goto parse_digital;
        break;
      }

      // repeated .proto_ff.DigPerfor digital = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digital:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_digital()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_digital;
        if (input->ExpectTag(32)) goto parse_beDead;
        break;
      }

      // optional bool beDead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bedead_)));
          set_has_bedead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isDeadBeback;
        break;
      }

      // optional bool isDeadBeback = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDeadBeback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdeadbeback_)));
          set_has_isdeadbeback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bebackDir;
        break;
      }

      // optional .proto_ff.Vector3PB bebackDir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bebackDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bebackdir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillUseResultBroadRsp_Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(i), output);
  }

  // repeated .proto_ff.DigPerfor digital = 3;
  for (int i = 0; i < this->digital_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->digital(i), output);
  }

  // optional bool beDead = 4;
  if (has_bedead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bedead(), output);
  }

  // optional bool isDeadBeback = 5;
  if (has_isdeadbeback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdeadbeback(), output);
  }

  // optional .proto_ff.Vector3PB bebackDir = 6;
  if (has_bebackdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bebackdir(), output);
  }

  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillUseResultBroadRsp_Target::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(i), target);
  }

  // repeated .proto_ff.DigPerfor digital = 3;
  for (int i = 0; i < this->digital_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->digital(i), target);
  }

  // optional bool beDead = 4;
  if (has_bedead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bedead(), target);
  }

  // optional bool isDeadBeback = 5;
  if (has_isdeadbeback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdeadbeback(), target);
  }

  // optional .proto_ff.Vector3PB bebackDir = 6;
  if (has_bebackdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bebackdir(), target);
  }

  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillUseResultBroadRsp_Target::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bool beDead = 4;
    if (has_bedead()) {
      total_size += 1 + 1;
    }

    // optional bool isDeadBeback = 5;
    if (has_isdeadbeback()) {
      total_size += 1 + 1;
    }

    // optional .proto_ff.Vector3PB bebackDir = 6;
    if (has_bebackdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bebackdir());
    }

    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.Attr64 attr = 2;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .proto_ff.DigPerfor digital = 3;
  total_size += 1 * this->digital_size();
  for (int i = 0; i < this->digital_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->digital(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUseResultBroadRsp_Target::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillUseResultBroadRsp_Target* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillUseResultBroadRsp_Target*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillUseResultBroadRsp_Target::MergeFrom(const SkillUseResultBroadRsp_Target& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  digital_.MergeFrom(from.digital_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_bedead()) {
      set_bedead(from.bedead());
    }
    if (from.has_isdeadbeback()) {
      set_isdeadbeback(from.isdeadbeback());
    }
    if (from.has_bebackdir()) {
      mutable_bebackdir()->::proto_ff::Vector3PB::MergeFrom(from.bebackdir());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillUseResultBroadRsp_Target::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUseResultBroadRsp_Target::CopyFrom(const SkillUseResultBroadRsp_Target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUseResultBroadRsp_Target::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < digital_size(); i++) {
    if (!this->digital(i).IsInitialized()) return false;
  }
  if (has_bebackdir()) {
    if (!this->bebackdir().IsInitialized()) return false;
  }
  return true;
}

void SkillUseResultBroadRsp_Target::Swap(SkillUseResultBroadRsp_Target* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    attr_.Swap(&other->attr_);
    digital_.Swap(&other->digital_);
    std::swap(bedead_, other->bedead_);
    std::swap(isdeadbeback_, other->isdeadbeback_);
    std::swap(bebackdir_, other->bebackdir_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillUseResultBroadRsp_Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillUseResultBroadRsp_Target_descriptor_;
  metadata.reflection = SkillUseResultBroadRsp_Target_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SkillUseResultBroadRsp::kSkillIdFieldNumber;
const int SkillUseResultBroadRsp::kCidFieldNumber;
const int SkillUseResultBroadRsp::kTargetLstFieldNumber;
#endif  // !_MSC_VER

SkillUseResultBroadRsp::SkillUseResultBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillUseResultBroadRsp::InitAsDefaultInstance() {
}

SkillUseResultBroadRsp::SkillUseResultBroadRsp(const SkillUseResultBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillUseResultBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillUseResultBroadRsp::~SkillUseResultBroadRsp() {
  SharedDtor();
}

void SkillUseResultBroadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillUseResultBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUseResultBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillUseResultBroadRsp_descriptor_;
}

const SkillUseResultBroadRsp& SkillUseResultBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillUseResultBroadRsp* SkillUseResultBroadRsp::default_instance_ = NULL;

SkillUseResultBroadRsp* SkillUseResultBroadRsp::New() const {
  return new SkillUseResultBroadRsp;
}

void SkillUseResultBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
  }
  target_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillUseResultBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_lst;
        break;
      }

      // repeated .proto_ff.SkillUseResultBroadRsp.Target target_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillUseResultBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // repeated .proto_ff.SkillUseResultBroadRsp.Target target_lst = 3;
  for (int i = 0; i < this->target_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillUseResultBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // repeated .proto_ff.SkillUseResultBroadRsp.Target target_lst = 3;
  for (int i = 0; i < this->target_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillUseResultBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.SkillUseResultBroadRsp.Target target_lst = 3;
  total_size += 1 * this->target_lst_size();
  for (int i = 0; i < this->target_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUseResultBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillUseResultBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillUseResultBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillUseResultBroadRsp::MergeFrom(const SkillUseResultBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_lst_.MergeFrom(from.target_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillUseResultBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUseResultBroadRsp::CopyFrom(const SkillUseResultBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUseResultBroadRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < target_lst_size(); i++) {
    if (!this->target_lst(i).IsInitialized()) return false;
  }
  return true;
}

void SkillUseResultBroadRsp::Swap(SkillUseResultBroadRsp* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(cid_, other->cid_);
    target_lst_.Swap(&other->target_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillUseResultBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillUseResultBroadRsp_descriptor_;
  metadata.reflection = SkillUseResultBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillUseBroadRsp::kSkillIdFieldNumber;
const int SkillUseBroadRsp::kDirFieldNumber;
const int SkillUseBroadRsp::kCidFieldNumber;
const int SkillUseBroadRsp::kCidLstFieldNumber;
const int SkillUseBroadRsp::kTargetPosFieldNumber;
const int SkillUseBroadRsp::kPosLstFieldNumber;
const int SkillUseBroadRsp::kCountFieldNumber;
#endif  // !_MSC_VER

SkillUseBroadRsp::SkillUseBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillUseBroadRsp::InitAsDefaultInstance() {
  dir_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  target_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

SkillUseBroadRsp::SkillUseBroadRsp(const SkillUseBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillUseBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  dir_ = NULL;
  cid_ = GOOGLE_ULONGLONG(0);
  target_pos_ = NULL;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillUseBroadRsp::~SkillUseBroadRsp() {
  SharedDtor();
}

void SkillUseBroadRsp::SharedDtor() {
  if (this != default_instance_) {
    delete dir_;
    delete target_pos_;
  }
}

void SkillUseBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUseBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillUseBroadRsp_descriptor_;
}

const SkillUseBroadRsp& SkillUseBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillUseBroadRsp* SkillUseBroadRsp::default_instance_ = NULL;

SkillUseBroadRsp* SkillUseBroadRsp::New() const {
  return new SkillUseBroadRsp;
}

void SkillUseBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    if (has_dir()) {
      if (dir_ != NULL) dir_->::proto_ff::Vector3PB::Clear();
    }
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::proto_ff::Vector3PB::Clear();
    }
    count_ = 0;
  }
  cid_lst_.Clear();
  pos_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillUseBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dir;
        break;
      }

      // required .proto_ff.Vector3PB dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // required uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid_lst;
        break;
      }

      // repeated uint64 cid_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid_lst;
        if (input->ExpectTag(42)) goto parse_target_pos;
        break;
      }

      // optional .proto_ff.Vector3PB target_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pos_lst;
        break;
      }

      // repeated .proto_ff.Vector3PB pos_lst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pos_lst;
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional int32 count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillUseBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // required .proto_ff.Vector3PB dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dir(), output);
  }

  // required uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // repeated uint64 cid_lst = 4;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->cid_lst(i), output);
  }

  // optional .proto_ff.Vector3PB target_pos = 5;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target_pos(), output);
  }

  // repeated .proto_ff.Vector3PB pos_lst = 6;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos_lst(i), output);
  }

  // optional int32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillUseBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // required .proto_ff.Vector3PB dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dir(), target);
  }

  // required uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // repeated uint64 cid_lst = 4;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->cid_lst(i), target);
  }

  // optional .proto_ff.Vector3PB target_pos = 5;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->target_pos(), target);
  }

  // repeated .proto_ff.Vector3PB pos_lst = 6;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos_lst(i), target);
  }

  // optional int32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillUseBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // required .proto_ff.Vector3PB dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // required uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.Vector3PB target_pos = 5;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }

    // optional int32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated uint64 cid_lst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  // repeated .proto_ff.Vector3PB pos_lst = 6;
  total_size += 1 * this->pos_lst_size();
  for (int i = 0; i < this->pos_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUseBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillUseBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillUseBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillUseBroadRsp::MergeFrom(const SkillUseBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  pos_lst_.MergeFrom(from.pos_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_dir()) {
      mutable_dir()->::proto_ff::Vector3PB::MergeFrom(from.dir());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::proto_ff::Vector3PB::MergeFrom(from.target_pos());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillUseBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUseBroadRsp::CopyFrom(const SkillUseBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUseBroadRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_dir()) {
    if (!this->dir().IsInitialized()) return false;
  }
  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  for (int i = 0; i < pos_lst_size(); i++) {
    if (!this->pos_lst(i).IsInitialized()) return false;
  }
  return true;
}

void SkillUseBroadRsp::Swap(SkillUseBroadRsp* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(dir_, other->dir_);
    std::swap(cid_, other->cid_);
    cid_lst_.Swap(&other->cid_lst_);
    std::swap(target_pos_, other->target_pos_);
    pos_lst_.Swap(&other->pos_lst_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillUseBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillUseBroadRsp_descriptor_;
  metadata.reflection = SkillUseBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillWarnBroadRsp::kCidFieldNumber;
const int SkillWarnBroadRsp::kSkillIdFieldNumber;
const int SkillWarnBroadRsp::kTargetPosFieldNumber;
const int SkillWarnBroadRsp::kPosLstFieldNumber;
#endif  // !_MSC_VER

SkillWarnBroadRsp::SkillWarnBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillWarnBroadRsp::InitAsDefaultInstance() {
  target_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

SkillWarnBroadRsp::SkillWarnBroadRsp(const SkillWarnBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillWarnBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  skill_id_ = GOOGLE_ULONGLONG(0);
  target_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillWarnBroadRsp::~SkillWarnBroadRsp() {
  SharedDtor();
}

void SkillWarnBroadRsp::SharedDtor() {
  if (this != default_instance_) {
    delete target_pos_;
  }
}

void SkillWarnBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillWarnBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillWarnBroadRsp_descriptor_;
}

const SkillWarnBroadRsp& SkillWarnBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillWarnBroadRsp* SkillWarnBroadRsp::default_instance_ = NULL;

SkillWarnBroadRsp* SkillWarnBroadRsp::New() const {
  return new SkillWarnBroadRsp;
}

void SkillWarnBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    skill_id_ = GOOGLE_ULONGLONG(0);
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  pos_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillWarnBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required uint64 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_pos;
        break;
      }

      // optional .proto_ff.Vector3PB target_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos_lst;
        break;
      }

      // repeated .proto_ff.Vector3PB pos_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillWarnBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->skill_id(), output);
  }

  // optional .proto_ff.Vector3PB target_pos = 3;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target_pos(), output);
  }

  // repeated .proto_ff.Vector3PB pos_lst = 4;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillWarnBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->skill_id(), target);
  }

  // optional .proto_ff.Vector3PB target_pos = 3;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target_pos(), target);
  }

  // repeated .proto_ff.Vector3PB pos_lst = 4;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillWarnBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional .proto_ff.Vector3PB target_pos = 3;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }

  }
  // repeated .proto_ff.Vector3PB pos_lst = 4;
  total_size += 1 * this->pos_lst_size();
  for (int i = 0; i < this->pos_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillWarnBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillWarnBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillWarnBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillWarnBroadRsp::MergeFrom(const SkillWarnBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_lst_.MergeFrom(from.pos_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::proto_ff::Vector3PB::MergeFrom(from.target_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillWarnBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillWarnBroadRsp::CopyFrom(const SkillWarnBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillWarnBroadRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  for (int i = 0; i < pos_lst_size(); i++) {
    if (!this->pos_lst(i).IsInitialized()) return false;
  }
  return true;
}

void SkillWarnBroadRsp::Swap(SkillWarnBroadRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(target_pos_, other->target_pos_);
    pos_lst_.Swap(&other->pos_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillWarnBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillWarnBroadRsp_descriptor_;
  metadata.reflection = SkillWarnBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCancelUseBroadRsp::kSkillIdFieldNumber;
const int SkillCancelUseBroadRsp::kCidFieldNumber;
#endif  // !_MSC_VER

SkillCancelUseBroadRsp::SkillCancelUseBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillCancelUseBroadRsp::InitAsDefaultInstance() {
}

SkillCancelUseBroadRsp::SkillCancelUseBroadRsp(const SkillCancelUseBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillCancelUseBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCancelUseBroadRsp::~SkillCancelUseBroadRsp() {
  SharedDtor();
}

void SkillCancelUseBroadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCancelUseBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCancelUseBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCancelUseBroadRsp_descriptor_;
}

const SkillCancelUseBroadRsp& SkillCancelUseBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillCancelUseBroadRsp* SkillCancelUseBroadRsp::default_instance_ = NULL;

SkillCancelUseBroadRsp* SkillCancelUseBroadRsp::New() const {
  return new SkillCancelUseBroadRsp;
}

void SkillCancelUseBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCancelUseBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillCancelUseBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillCancelUseBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillCancelUseBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCancelUseBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCancelUseBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCancelUseBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCancelUseBroadRsp::MergeFrom(const SkillCancelUseBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCancelUseBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCancelUseBroadRsp::CopyFrom(const SkillCancelUseBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCancelUseBroadRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillCancelUseBroadRsp::Swap(SkillCancelUseBroadRsp* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCancelUseBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCancelUseBroadRsp_descriptor_;
  metadata.reflection = SkillCancelUseBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillBreakReq::kSkillIdFieldNumber;
#endif  // !_MSC_VER

SkillBreakReq::SkillBreakReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillBreakReq::InitAsDefaultInstance() {
}

SkillBreakReq::SkillBreakReq(const SkillBreakReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillBreakReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBreakReq::~SkillBreakReq() {
  SharedDtor();
}

void SkillBreakReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillBreakReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillBreakReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBreakReq_descriptor_;
}

const SkillBreakReq& SkillBreakReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillBreakReq* SkillBreakReq::default_instance_ = NULL;

SkillBreakReq* SkillBreakReq::New() const {
  return new SkillBreakReq;
}

void SkillBreakReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillBreakReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillBreakReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillBreakReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillBreakReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBreakReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillBreakReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillBreakReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillBreakReq::MergeFrom(const SkillBreakReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillBreakReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillBreakReq::CopyFrom(const SkillBreakReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillBreakReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillBreakReq::Swap(SkillBreakReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillBreakReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillBreakReq_descriptor_;
  metadata.reflection = SkillBreakReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillBreakBroadRsp::kSkillIdFieldNumber;
const int SkillBreakBroadRsp::kCidFieldNumber;
#endif  // !_MSC_VER

SkillBreakBroadRsp::SkillBreakBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillBreakBroadRsp::InitAsDefaultInstance() {
}

SkillBreakBroadRsp::SkillBreakBroadRsp(const SkillBreakBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillBreakBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBreakBroadRsp::~SkillBreakBroadRsp() {
  SharedDtor();
}

void SkillBreakBroadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillBreakBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillBreakBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBreakBroadRsp_descriptor_;
}

const SkillBreakBroadRsp& SkillBreakBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillBreakBroadRsp* SkillBreakBroadRsp::default_instance_ = NULL;

SkillBreakBroadRsp* SkillBreakBroadRsp::New() const {
  return new SkillBreakBroadRsp;
}

void SkillBreakBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillBreakBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillBreakBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillBreakBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillBreakBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBreakBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillBreakBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillBreakBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillBreakBroadRsp::MergeFrom(const SkillBreakBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillBreakBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillBreakBroadRsp::CopyFrom(const SkillBreakBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillBreakBroadRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillBreakBroadRsp::Swap(SkillBreakBroadRsp* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillBreakBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillBreakBroadRsp_descriptor_;
  metadata.reflection = SkillBreakBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillGroupUpdateRsp::kSkillGroupFieldNumber;
#endif  // !_MSC_VER

SkillGroupUpdateRsp::SkillGroupUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillGroupUpdateRsp::InitAsDefaultInstance() {
  skill_group_ = const_cast< ::proto_ff::SkillGroupListProto*>(&::proto_ff::SkillGroupListProto::default_instance());
}

SkillGroupUpdateRsp::SkillGroupUpdateRsp(const SkillGroupUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillGroupUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  skill_group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillGroupUpdateRsp::~SkillGroupUpdateRsp() {
  SharedDtor();
}

void SkillGroupUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete skill_group_;
  }
}

void SkillGroupUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillGroupUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillGroupUpdateRsp_descriptor_;
}

const SkillGroupUpdateRsp& SkillGroupUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillGroupUpdateRsp* SkillGroupUpdateRsp::default_instance_ = NULL;

SkillGroupUpdateRsp* SkillGroupUpdateRsp::New() const {
  return new SkillGroupUpdateRsp;
}

void SkillGroupUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_skill_group()) {
      if (skill_group_ != NULL) skill_group_->::proto_ff::SkillGroupListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillGroupUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.SkillGroupListProto skill_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillGroupUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.SkillGroupListProto skill_group = 1;
  if (has_skill_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillGroupUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.SkillGroupListProto skill_group = 1;
  if (has_skill_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillGroupUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.SkillGroupListProto skill_group = 1;
    if (has_skill_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillGroupUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillGroupUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillGroupUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillGroupUpdateRsp::MergeFrom(const SkillGroupUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_group()) {
      mutable_skill_group()->::proto_ff::SkillGroupListProto::MergeFrom(from.skill_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillGroupUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillGroupUpdateRsp::CopyFrom(const SkillGroupUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillGroupUpdateRsp::IsInitialized() const {

  return true;
}

void SkillGroupUpdateRsp::Swap(SkillGroupUpdateRsp* other) {
  if (other != this) {
    std::swap(skill_group_, other->skill_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillGroupUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillGroupUpdateRsp_descriptor_;
  metadata.reflection = SkillGroupUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkillInfoReq::SkillInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfoReq::InitAsDefaultInstance() {
}

SkillInfoReq::SkillInfoReq(const SkillInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfoReq::~SkillInfoReq() {
  SharedDtor();
}

void SkillInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfoReq_descriptor_;
}

const SkillInfoReq& SkillInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillInfoReq* SkillInfoReq::default_instance_ = NULL;

SkillInfoReq* SkillInfoReq::New() const {
  return new SkillInfoReq;
}

void SkillInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SkillInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfoReq::MergeFrom(const SkillInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfoReq::CopyFrom(const SkillInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfoReq::IsInitialized() const {

  return true;
}

void SkillInfoReq::Swap(SkillInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfoReq_descriptor_;
  metadata.reflection = SkillInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfoRsp::kInfoFieldNumber;
const int SkillInfoRsp::kAdvanceInfoFieldNumber;
#endif  // !_MSC_VER

SkillInfoRsp::SkillInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::SkillInfoListProto*>(&::proto_ff::SkillInfoListProto::default_instance());
  advance_info_ = const_cast< ::proto_ff::SkillAdvanceListProto*>(&::proto_ff::SkillAdvanceListProto::default_instance());
}

SkillInfoRsp::SkillInfoRsp(const SkillInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  advance_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfoRsp::~SkillInfoRsp() {
  SharedDtor();
}

void SkillInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete advance_info_;
  }
}

void SkillInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfoRsp_descriptor_;
}

const SkillInfoRsp& SkillInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillInfoRsp* SkillInfoRsp::default_instance_ = NULL;

SkillInfoRsp* SkillInfoRsp::New() const {
  return new SkillInfoRsp;
}

void SkillInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::SkillInfoListProto::Clear();
    }
    if (has_advance_info()) {
      if (advance_info_ != NULL) advance_info_->::proto_ff::SkillAdvanceListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.SkillInfoListProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_advance_info;
        break;
      }

      // optional .proto_ff.SkillAdvanceListProto advance_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advance_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.SkillInfoListProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .proto_ff.SkillAdvanceListProto advance_info = 2;
  if (has_advance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->advance_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.SkillInfoListProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .proto_ff.SkillAdvanceListProto advance_info = 2;
  if (has_advance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->advance_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.SkillInfoListProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .proto_ff.SkillAdvanceListProto advance_info = 2;
    if (has_advance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advance_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfoRsp::MergeFrom(const SkillInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::SkillInfoListProto::MergeFrom(from.info());
    }
    if (from.has_advance_info()) {
      mutable_advance_info()->::proto_ff::SkillAdvanceListProto::MergeFrom(from.advance_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfoRsp::CopyFrom(const SkillInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfoRsp::IsInitialized() const {

  return true;
}

void SkillInfoRsp::Swap(SkillInfoRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(advance_info_, other->advance_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfoRsp_descriptor_;
  metadata.reflection = SkillInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfoUpdateRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

SkillInfoUpdateRsp::SkillInfoUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfoUpdateRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::SkillInfoListProto*>(&::proto_ff::SkillInfoListProto::default_instance());
}

SkillInfoUpdateRsp::SkillInfoUpdateRsp(const SkillInfoUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfoUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfoUpdateRsp::~SkillInfoUpdateRsp() {
  SharedDtor();
}

void SkillInfoUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SkillInfoUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfoUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfoUpdateRsp_descriptor_;
}

const SkillInfoUpdateRsp& SkillInfoUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillInfoUpdateRsp* SkillInfoUpdateRsp::default_instance_ = NULL;

SkillInfoUpdateRsp* SkillInfoUpdateRsp::New() const {
  return new SkillInfoUpdateRsp;
}

void SkillInfoUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::SkillInfoListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfoUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.SkillInfoListProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfoUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.SkillInfoListProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfoUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.SkillInfoListProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfoUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.SkillInfoListProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfoUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfoUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfoUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfoUpdateRsp::MergeFrom(const SkillInfoUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::SkillInfoListProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfoUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfoUpdateRsp::CopyFrom(const SkillInfoUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfoUpdateRsp::IsInitialized() const {

  return true;
}

void SkillInfoUpdateRsp::Swap(SkillInfoUpdateRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfoUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfoUpdateRsp_descriptor_;
  metadata.reflection = SkillInfoUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillGroupChgReq::kGroupFieldNumber;
#endif  // !_MSC_VER

SkillGroupChgReq::SkillGroupChgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillGroupChgReq::InitAsDefaultInstance() {
}

SkillGroupChgReq::SkillGroupChgReq(const SkillGroupChgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillGroupChgReq::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillGroupChgReq::~SkillGroupChgReq() {
  SharedDtor();
}

void SkillGroupChgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillGroupChgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillGroupChgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillGroupChgReq_descriptor_;
}

const SkillGroupChgReq& SkillGroupChgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillGroupChgReq* SkillGroupChgReq::default_instance_ = NULL;

SkillGroupChgReq* SkillGroupChgReq::New() const {
  return new SkillGroupChgReq;
}

void SkillGroupChgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillGroupChgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillGroupChgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillGroupChgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillGroupChgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillGroupChgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillGroupChgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillGroupChgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillGroupChgReq::MergeFrom(const SkillGroupChgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillGroupChgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillGroupChgReq::CopyFrom(const SkillGroupChgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillGroupChgReq::IsInitialized() const {

  return true;
}

void SkillGroupChgReq::Swap(SkillGroupChgReq* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillGroupChgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillGroupChgReq_descriptor_;
  metadata.reflection = SkillGroupChgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillGroupChgRsp::kRetFieldNumber;
const int SkillGroupChgRsp::kGroupFieldNumber;
#endif  // !_MSC_VER

SkillGroupChgRsp::SkillGroupChgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillGroupChgRsp::InitAsDefaultInstance() {
}

SkillGroupChgRsp::SkillGroupChgRsp(const SkillGroupChgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillGroupChgRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillGroupChgRsp::~SkillGroupChgRsp() {
  SharedDtor();
}

void SkillGroupChgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillGroupChgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillGroupChgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillGroupChgRsp_descriptor_;
}

const SkillGroupChgRsp& SkillGroupChgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillGroupChgRsp* SkillGroupChgRsp::default_instance_ = NULL;

SkillGroupChgRsp* SkillGroupChgRsp::New() const {
  return new SkillGroupChgRsp;
}

void SkillGroupChgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    group_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillGroupChgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional uint32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillGroupChgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillGroupChgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillGroupChgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillGroupChgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillGroupChgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillGroupChgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillGroupChgRsp::MergeFrom(const SkillGroupChgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillGroupChgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillGroupChgRsp::CopyFrom(const SkillGroupChgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillGroupChgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillGroupChgRsp::Swap(SkillGroupChgRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillGroupChgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillGroupChgRsp_descriptor_;
  metadata.reflection = SkillGroupChgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfoDelRsp::kSkillLstFieldNumber;
#endif  // !_MSC_VER

SkillInfoDelRsp::SkillInfoDelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfoDelRsp::InitAsDefaultInstance() {
}

SkillInfoDelRsp::SkillInfoDelRsp(const SkillInfoDelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfoDelRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfoDelRsp::~SkillInfoDelRsp() {
  SharedDtor();
}

void SkillInfoDelRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfoDelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfoDelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfoDelRsp_descriptor_;
}

const SkillInfoDelRsp& SkillInfoDelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillInfoDelRsp* SkillInfoDelRsp::default_instance_ = NULL;

SkillInfoDelRsp* SkillInfoDelRsp::New() const {
  return new SkillInfoDelRsp;
}

void SkillInfoDelRsp::Clear() {
  skill_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfoDelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 skill_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_skill_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_skill_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_skill_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfoDelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 skill_lst = 1;
  for (int i = 0; i < this->skill_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->skill_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfoDelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 skill_lst = 1;
  for (int i = 0; i < this->skill_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->skill_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfoDelRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 skill_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->skill_lst(i));
    }
    total_size += 1 * this->skill_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfoDelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfoDelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfoDelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfoDelRsp::MergeFrom(const SkillInfoDelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_lst_.MergeFrom(from.skill_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfoDelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfoDelRsp::CopyFrom(const SkillInfoDelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfoDelRsp::IsInitialized() const {

  return true;
}

void SkillInfoDelRsp::Swap(SkillInfoDelRsp* other) {
  if (other != this) {
    skill_lst_.Swap(&other->skill_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfoDelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfoDelRsp_descriptor_;
  metadata.reflection = SkillInfoDelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillWakeupReq::kSkillIdFieldNumber;
#endif  // !_MSC_VER

SkillWakeupReq::SkillWakeupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillWakeupReq::InitAsDefaultInstance() {
}

SkillWakeupReq::SkillWakeupReq(const SkillWakeupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillWakeupReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillWakeupReq::~SkillWakeupReq() {
  SharedDtor();
}

void SkillWakeupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillWakeupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillWakeupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillWakeupReq_descriptor_;
}

const SkillWakeupReq& SkillWakeupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillWakeupReq* SkillWakeupReq::default_instance_ = NULL;

SkillWakeupReq* SkillWakeupReq::New() const {
  return new SkillWakeupReq;
}

void SkillWakeupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillWakeupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillWakeupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillWakeupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillWakeupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillWakeupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillWakeupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillWakeupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillWakeupReq::MergeFrom(const SkillWakeupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillWakeupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillWakeupReq::CopyFrom(const SkillWakeupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillWakeupReq::IsInitialized() const {

  return true;
}

void SkillWakeupReq::Swap(SkillWakeupReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillWakeupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillWakeupReq_descriptor_;
  metadata.reflection = SkillWakeupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillWakeupRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillWakeupRsp::SkillWakeupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillWakeupRsp::InitAsDefaultInstance() {
}

SkillWakeupRsp::SkillWakeupRsp(const SkillWakeupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillWakeupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillWakeupRsp::~SkillWakeupRsp() {
  SharedDtor();
}

void SkillWakeupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillWakeupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillWakeupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillWakeupRsp_descriptor_;
}

const SkillWakeupRsp& SkillWakeupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillWakeupRsp* SkillWakeupRsp::default_instance_ = NULL;

SkillWakeupRsp* SkillWakeupRsp::New() const {
  return new SkillWakeupRsp;
}

void SkillWakeupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillWakeupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillWakeupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillWakeupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillWakeupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillWakeupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillWakeupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillWakeupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillWakeupRsp::MergeFrom(const SkillWakeupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillWakeupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillWakeupRsp::CopyFrom(const SkillWakeupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillWakeupRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillWakeupRsp::Swap(SkillWakeupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillWakeupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillWakeupRsp_descriptor_;
  metadata.reflection = SkillWakeupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillChgPosReq::kSkillIdFieldNumber;
const int SkillChgPosReq::kPosFieldNumber;
#endif  // !_MSC_VER

SkillChgPosReq::SkillChgPosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillChgPosReq::InitAsDefaultInstance() {
}

SkillChgPosReq::SkillChgPosReq(const SkillChgPosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillChgPosReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillChgPosReq::~SkillChgPosReq() {
  SharedDtor();
}

void SkillChgPosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillChgPosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillChgPosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillChgPosReq_descriptor_;
}

const SkillChgPosReq& SkillChgPosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillChgPosReq* SkillChgPosReq::default_instance_ = NULL;

SkillChgPosReq* SkillChgPosReq::New() const {
  return new SkillChgPosReq;
}

void SkillChgPosReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillChgPosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillChgPosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillChgPosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillChgPosReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillChgPosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillChgPosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillChgPosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillChgPosReq::MergeFrom(const SkillChgPosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillChgPosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillChgPosReq::CopyFrom(const SkillChgPosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillChgPosReq::IsInitialized() const {

  return true;
}

void SkillChgPosReq::Swap(SkillChgPosReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillChgPosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillChgPosReq_descriptor_;
  metadata.reflection = SkillChgPosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillChgPosRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillChgPosRsp::SkillChgPosRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillChgPosRsp::InitAsDefaultInstance() {
}

SkillChgPosRsp::SkillChgPosRsp(const SkillChgPosRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillChgPosRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillChgPosRsp::~SkillChgPosRsp() {
  SharedDtor();
}

void SkillChgPosRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillChgPosRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillChgPosRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillChgPosRsp_descriptor_;
}

const SkillChgPosRsp& SkillChgPosRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillChgPosRsp* SkillChgPosRsp::default_instance_ = NULL;

SkillChgPosRsp* SkillChgPosRsp::New() const {
  return new SkillChgPosRsp;
}

void SkillChgPosRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillChgPosRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillChgPosRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillChgPosRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillChgPosRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillChgPosRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillChgPosRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillChgPosRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillChgPosRsp::MergeFrom(const SkillChgPosRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillChgPosRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillChgPosRsp::CopyFrom(const SkillChgPosRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillChgPosRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillChgPosRsp::Swap(SkillChgPosRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillChgPosRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillChgPosRsp_descriptor_;
  metadata.reflection = SkillChgPosRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillUpgradeReq::kSkillIdFieldNumber;
const int SkillUpgradeReq::kTypeFieldNumber;
#endif  // !_MSC_VER

SkillUpgradeReq::SkillUpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillUpgradeReq::InitAsDefaultInstance() {
}

SkillUpgradeReq::SkillUpgradeReq(const SkillUpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillUpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillUpgradeReq::~SkillUpgradeReq() {
  SharedDtor();
}

void SkillUpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillUpgradeReq_descriptor_;
}

const SkillUpgradeReq& SkillUpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillUpgradeReq* SkillUpgradeReq::default_instance_ = NULL;

SkillUpgradeReq* SkillUpgradeReq::New() const {
  return new SkillUpgradeReq;
}

void SkillUpgradeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillUpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillUpgradeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillUpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillUpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillUpgradeReq::MergeFrom(const SkillUpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUpgradeReq::CopyFrom(const SkillUpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUpgradeReq::IsInitialized() const {

  return true;
}

void SkillUpgradeReq::Swap(SkillUpgradeReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillUpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillUpgradeReq_descriptor_;
  metadata.reflection = SkillUpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillUpgradeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillUpgradeRsp::SkillUpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillUpgradeRsp::InitAsDefaultInstance() {
}

SkillUpgradeRsp::SkillUpgradeRsp(const SkillUpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillUpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillUpgradeRsp::~SkillUpgradeRsp() {
  SharedDtor();
}

void SkillUpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillUpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillUpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillUpgradeRsp_descriptor_;
}

const SkillUpgradeRsp& SkillUpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillUpgradeRsp* SkillUpgradeRsp::default_instance_ = NULL;

SkillUpgradeRsp* SkillUpgradeRsp::New() const {
  return new SkillUpgradeRsp;
}

void SkillUpgradeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillUpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillUpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillUpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillUpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillUpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillUpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillUpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillUpgradeRsp::MergeFrom(const SkillUpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillUpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillUpgradeRsp::CopyFrom(const SkillUpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillUpgradeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillUpgradeRsp::Swap(SkillUpgradeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillUpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillUpgradeRsp_descriptor_;
  metadata.reflection = SkillUpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillSetAutoUseReq::kSkillIdFieldNumber;
const int SkillSetAutoUseReq::kIsAutoFieldNumber;
#endif  // !_MSC_VER

SkillSetAutoUseReq::SkillSetAutoUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillSetAutoUseReq::InitAsDefaultInstance() {
}

SkillSetAutoUseReq::SkillSetAutoUseReq(const SkillSetAutoUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillSetAutoUseReq::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  is_auto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillSetAutoUseReq::~SkillSetAutoUseReq() {
  SharedDtor();
}

void SkillSetAutoUseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillSetAutoUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillSetAutoUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSetAutoUseReq_descriptor_;
}

const SkillSetAutoUseReq& SkillSetAutoUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillSetAutoUseReq* SkillSetAutoUseReq::default_instance_ = NULL;

SkillSetAutoUseReq* SkillSetAutoUseReq::New() const {
  return new SkillSetAutoUseReq;
}

void SkillSetAutoUseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    is_auto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillSetAutoUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_auto;
        break;
      }

      // optional int32 is_auto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_auto_)));
          set_has_is_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillSetAutoUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional int32 is_auto = 2;
  if (has_is_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_auto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillSetAutoUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional int32 is_auto = 2;
  if (has_is_auto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_auto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillSetAutoUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional int32 is_auto = 2;
    if (has_is_auto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_auto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillSetAutoUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillSetAutoUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillSetAutoUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillSetAutoUseReq::MergeFrom(const SkillSetAutoUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_is_auto()) {
      set_is_auto(from.is_auto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillSetAutoUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillSetAutoUseReq::CopyFrom(const SkillSetAutoUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSetAutoUseReq::IsInitialized() const {

  return true;
}

void SkillSetAutoUseReq::Swap(SkillSetAutoUseReq* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(is_auto_, other->is_auto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillSetAutoUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillSetAutoUseReq_descriptor_;
  metadata.reflection = SkillSetAutoUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillSetAutoUseRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillSetAutoUseRsp::SkillSetAutoUseRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillSetAutoUseRsp::InitAsDefaultInstance() {
}

SkillSetAutoUseRsp::SkillSetAutoUseRsp(const SkillSetAutoUseRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillSetAutoUseRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillSetAutoUseRsp::~SkillSetAutoUseRsp() {
  SharedDtor();
}

void SkillSetAutoUseRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillSetAutoUseRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillSetAutoUseRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSetAutoUseRsp_descriptor_;
}

const SkillSetAutoUseRsp& SkillSetAutoUseRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillSetAutoUseRsp* SkillSetAutoUseRsp::default_instance_ = NULL;

SkillSetAutoUseRsp* SkillSetAutoUseRsp::New() const {
  return new SkillSetAutoUseRsp;
}

void SkillSetAutoUseRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillSetAutoUseRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillSetAutoUseRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillSetAutoUseRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillSetAutoUseRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillSetAutoUseRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillSetAutoUseRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillSetAutoUseRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillSetAutoUseRsp::MergeFrom(const SkillSetAutoUseRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillSetAutoUseRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillSetAutoUseRsp::CopyFrom(const SkillSetAutoUseRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSetAutoUseRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillSetAutoUseRsp::Swap(SkillSetAutoUseRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillSetAutoUseRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillSetAutoUseRsp_descriptor_;
  metadata.reflection = SkillSetAutoUseRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceReq::kAdvanceFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceReq::SkillAdvanceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceReq::InitAsDefaultInstance() {
}

SkillAdvanceReq::SkillAdvanceReq(const SkillAdvanceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceReq::SharedCtor() {
  _cached_size_ = 0;
  advance_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceReq::~SkillAdvanceReq() {
  SharedDtor();
}

void SkillAdvanceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceReq_descriptor_;
}

const SkillAdvanceReq& SkillAdvanceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceReq* SkillAdvanceReq::default_instance_ = NULL;

SkillAdvanceReq* SkillAdvanceReq::New() const {
  return new SkillAdvanceReq;
}

void SkillAdvanceReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    advance_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 advance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 advance = 1;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->advance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 advance = 1;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->advance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 advance = 1;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceReq::MergeFrom(const SkillAdvanceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advance()) {
      set_advance(from.advance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceReq::CopyFrom(const SkillAdvanceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillAdvanceReq::Swap(SkillAdvanceReq* other) {
  if (other != this) {
    std::swap(advance_, other->advance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceReq_descriptor_;
  metadata.reflection = SkillAdvanceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceRsp::SkillAdvanceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceRsp::InitAsDefaultInstance() {
}

SkillAdvanceRsp::SkillAdvanceRsp(const SkillAdvanceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceRsp::~SkillAdvanceRsp() {
  SharedDtor();
}

void SkillAdvanceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceRsp_descriptor_;
}

const SkillAdvanceRsp& SkillAdvanceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceRsp* SkillAdvanceRsp::default_instance_ = NULL;

SkillAdvanceRsp* SkillAdvanceRsp::New() const {
  return new SkillAdvanceRsp;
}

void SkillAdvanceRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceRsp::MergeFrom(const SkillAdvanceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceRsp::CopyFrom(const SkillAdvanceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillAdvanceRsp::Swap(SkillAdvanceRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceRsp_descriptor_;
  metadata.reflection = SkillAdvanceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceChgPosReq::kPosFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceChgPosReq::SkillAdvanceChgPosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceChgPosReq::InitAsDefaultInstance() {
}

SkillAdvanceChgPosReq::SkillAdvanceChgPosReq(const SkillAdvanceChgPosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceChgPosReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceChgPosReq::~SkillAdvanceChgPosReq() {
  SharedDtor();
}

void SkillAdvanceChgPosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceChgPosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceChgPosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceChgPosReq_descriptor_;
}

const SkillAdvanceChgPosReq& SkillAdvanceChgPosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceChgPosReq* SkillAdvanceChgPosReq::default_instance_ = NULL;

SkillAdvanceChgPosReq* SkillAdvanceChgPosReq::New() const {
  return new SkillAdvanceChgPosReq;
}

void SkillAdvanceChgPosReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceChgPosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceChgPosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceChgPosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceChgPosReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceChgPosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceChgPosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceChgPosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceChgPosReq::MergeFrom(const SkillAdvanceChgPosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceChgPosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceChgPosReq::CopyFrom(const SkillAdvanceChgPosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceChgPosReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillAdvanceChgPosReq::Swap(SkillAdvanceChgPosReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceChgPosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceChgPosReq_descriptor_;
  metadata.reflection = SkillAdvanceChgPosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceChgPosRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceChgPosRsp::SkillAdvanceChgPosRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceChgPosRsp::InitAsDefaultInstance() {
}

SkillAdvanceChgPosRsp::SkillAdvanceChgPosRsp(const SkillAdvanceChgPosRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceChgPosRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceChgPosRsp::~SkillAdvanceChgPosRsp() {
  SharedDtor();
}

void SkillAdvanceChgPosRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceChgPosRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceChgPosRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceChgPosRsp_descriptor_;
}

const SkillAdvanceChgPosRsp& SkillAdvanceChgPosRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceChgPosRsp* SkillAdvanceChgPosRsp::default_instance_ = NULL;

SkillAdvanceChgPosRsp* SkillAdvanceChgPosRsp::New() const {
  return new SkillAdvanceChgPosRsp;
}

void SkillAdvanceChgPosRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceChgPosRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceChgPosRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceChgPosRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceChgPosRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceChgPosRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceChgPosRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceChgPosRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceChgPosRsp::MergeFrom(const SkillAdvanceChgPosRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceChgPosRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceChgPosRsp::CopyFrom(const SkillAdvanceChgPosRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceChgPosRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillAdvanceChgPosRsp::Swap(SkillAdvanceChgPosRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceChgPosRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceChgPosRsp_descriptor_;
  metadata.reflection = SkillAdvanceChgPosRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkillAdvanceResetReq::SkillAdvanceResetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceResetReq::InitAsDefaultInstance() {
}

SkillAdvanceResetReq::SkillAdvanceResetReq(const SkillAdvanceResetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceResetReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceResetReq::~SkillAdvanceResetReq() {
  SharedDtor();
}

void SkillAdvanceResetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceResetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceResetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceResetReq_descriptor_;
}

const SkillAdvanceResetReq& SkillAdvanceResetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceResetReq* SkillAdvanceResetReq::default_instance_ = NULL;

SkillAdvanceResetReq* SkillAdvanceResetReq::New() const {
  return new SkillAdvanceResetReq;
}

void SkillAdvanceResetReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceResetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SkillAdvanceResetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceResetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceResetReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceResetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceResetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceResetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceResetReq::MergeFrom(const SkillAdvanceResetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceResetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceResetReq::CopyFrom(const SkillAdvanceResetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceResetReq::IsInitialized() const {

  return true;
}

void SkillAdvanceResetReq::Swap(SkillAdvanceResetReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceResetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceResetReq_descriptor_;
  metadata.reflection = SkillAdvanceResetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceResetRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceResetRsp::SkillAdvanceResetRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceResetRsp::InitAsDefaultInstance() {
}

SkillAdvanceResetRsp::SkillAdvanceResetRsp(const SkillAdvanceResetRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceResetRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceResetRsp::~SkillAdvanceResetRsp() {
  SharedDtor();
}

void SkillAdvanceResetRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceResetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceResetRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceResetRsp_descriptor_;
}

const SkillAdvanceResetRsp& SkillAdvanceResetRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceResetRsp* SkillAdvanceResetRsp::default_instance_ = NULL;

SkillAdvanceResetRsp* SkillAdvanceResetRsp::New() const {
  return new SkillAdvanceResetRsp;
}

void SkillAdvanceResetRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceResetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceResetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceResetRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceResetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceResetRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceResetRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceResetRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceResetRsp::MergeFrom(const SkillAdvanceResetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceResetRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceResetRsp::CopyFrom(const SkillAdvanceResetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceResetRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillAdvanceResetRsp::Swap(SkillAdvanceResetRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceResetRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceResetRsp_descriptor_;
  metadata.reflection = SkillAdvanceResetRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceUpdateRsp::kAdvanceInfoFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceUpdateRsp::SkillAdvanceUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceUpdateRsp::InitAsDefaultInstance() {
  advance_info_ = const_cast< ::proto_ff::SkillAdvanceListProto*>(&::proto_ff::SkillAdvanceListProto::default_instance());
}

SkillAdvanceUpdateRsp::SkillAdvanceUpdateRsp(const SkillAdvanceUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  advance_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceUpdateRsp::~SkillAdvanceUpdateRsp() {
  SharedDtor();
}

void SkillAdvanceUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete advance_info_;
  }
}

void SkillAdvanceUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceUpdateRsp_descriptor_;
}

const SkillAdvanceUpdateRsp& SkillAdvanceUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceUpdateRsp* SkillAdvanceUpdateRsp::default_instance_ = NULL;

SkillAdvanceUpdateRsp* SkillAdvanceUpdateRsp::New() const {
  return new SkillAdvanceUpdateRsp;
}

void SkillAdvanceUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_advance_info()) {
      if (advance_info_ != NULL) advance_info_->::proto_ff::SkillAdvanceListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.SkillAdvanceListProto advance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.SkillAdvanceListProto advance_info = 1;
  if (has_advance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->advance_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.SkillAdvanceListProto advance_info = 1;
  if (has_advance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->advance_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.SkillAdvanceListProto advance_info = 1;
    if (has_advance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advance_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceUpdateRsp::MergeFrom(const SkillAdvanceUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advance_info()) {
      mutable_advance_info()->::proto_ff::SkillAdvanceListProto::MergeFrom(from.advance_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceUpdateRsp::CopyFrom(const SkillAdvanceUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceUpdateRsp::IsInitialized() const {

  return true;
}

void SkillAdvanceUpdateRsp::Swap(SkillAdvanceUpdateRsp* other) {
  if (other != this) {
    std::swap(advance_info_, other->advance_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceUpdateRsp_descriptor_;
  metadata.reflection = SkillAdvanceUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkillAdvanceUnlockPosReq::SkillAdvanceUnlockPosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceUnlockPosReq::InitAsDefaultInstance() {
}

SkillAdvanceUnlockPosReq::SkillAdvanceUnlockPosReq(const SkillAdvanceUnlockPosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceUnlockPosReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceUnlockPosReq::~SkillAdvanceUnlockPosReq() {
  SharedDtor();
}

void SkillAdvanceUnlockPosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceUnlockPosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceUnlockPosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceUnlockPosReq_descriptor_;
}

const SkillAdvanceUnlockPosReq& SkillAdvanceUnlockPosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceUnlockPosReq* SkillAdvanceUnlockPosReq::default_instance_ = NULL;

SkillAdvanceUnlockPosReq* SkillAdvanceUnlockPosReq::New() const {
  return new SkillAdvanceUnlockPosReq;
}

void SkillAdvanceUnlockPosReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceUnlockPosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SkillAdvanceUnlockPosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceUnlockPosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceUnlockPosReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceUnlockPosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceUnlockPosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceUnlockPosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceUnlockPosReq::MergeFrom(const SkillAdvanceUnlockPosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceUnlockPosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceUnlockPosReq::CopyFrom(const SkillAdvanceUnlockPosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceUnlockPosReq::IsInitialized() const {

  return true;
}

void SkillAdvanceUnlockPosReq::Swap(SkillAdvanceUnlockPosReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceUnlockPosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceUnlockPosReq_descriptor_;
  metadata.reflection = SkillAdvanceUnlockPosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAdvanceUnlockPosRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillAdvanceUnlockPosRsp::SkillAdvanceUnlockPosRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAdvanceUnlockPosRsp::InitAsDefaultInstance() {
}

SkillAdvanceUnlockPosRsp::SkillAdvanceUnlockPosRsp(const SkillAdvanceUnlockPosRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAdvanceUnlockPosRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAdvanceUnlockPosRsp::~SkillAdvanceUnlockPosRsp() {
  SharedDtor();
}

void SkillAdvanceUnlockPosRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAdvanceUnlockPosRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAdvanceUnlockPosRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAdvanceUnlockPosRsp_descriptor_;
}

const SkillAdvanceUnlockPosRsp& SkillAdvanceUnlockPosRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAdvanceUnlockPosRsp* SkillAdvanceUnlockPosRsp::default_instance_ = NULL;

SkillAdvanceUnlockPosRsp* SkillAdvanceUnlockPosRsp::New() const {
  return new SkillAdvanceUnlockPosRsp;
}

void SkillAdvanceUnlockPosRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAdvanceUnlockPosRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAdvanceUnlockPosRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAdvanceUnlockPosRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAdvanceUnlockPosRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAdvanceUnlockPosRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAdvanceUnlockPosRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAdvanceUnlockPosRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAdvanceUnlockPosRsp::MergeFrom(const SkillAdvanceUnlockPosRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAdvanceUnlockPosRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAdvanceUnlockPosRsp::CopyFrom(const SkillAdvanceUnlockPosRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAdvanceUnlockPosRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillAdvanceUnlockPosRsp::Swap(SkillAdvanceUnlockPosRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAdvanceUnlockPosRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAdvanceUnlockPosRsp_descriptor_;
  metadata.reflection = SkillAdvanceUnlockPosRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkillTalentInfoReq::SkillTalentInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTalentInfoReq::InitAsDefaultInstance() {
}

SkillTalentInfoReq::SkillTalentInfoReq(const SkillTalentInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTalentInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTalentInfoReq::~SkillTalentInfoReq() {
  SharedDtor();
}

void SkillTalentInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTalentInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTalentInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTalentInfoReq_descriptor_;
}

const SkillTalentInfoReq& SkillTalentInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTalentInfoReq* SkillTalentInfoReq::default_instance_ = NULL;

SkillTalentInfoReq* SkillTalentInfoReq::New() const {
  return new SkillTalentInfoReq;
}

void SkillTalentInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTalentInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SkillTalentInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTalentInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTalentInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTalentInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTalentInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTalentInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTalentInfoReq::MergeFrom(const SkillTalentInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTalentInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTalentInfoReq::CopyFrom(const SkillTalentInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTalentInfoReq::IsInitialized() const {

  return true;
}

void SkillTalentInfoReq::Swap(SkillTalentInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTalentInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTalentInfoReq_descriptor_;
  metadata.reflection = SkillTalentInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillTalentInfoRsp::kInfoFieldNumber;
const int SkillTalentInfoRsp::kCanUseFieldNumber;
#endif  // !_MSC_VER

SkillTalentInfoRsp::SkillTalentInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTalentInfoRsp::InitAsDefaultInstance() {
}

SkillTalentInfoRsp::SkillTalentInfoRsp(const SkillTalentInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTalentInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  can_use_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTalentInfoRsp::~SkillTalentInfoRsp() {
  SharedDtor();
}

void SkillTalentInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTalentInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTalentInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTalentInfoRsp_descriptor_;
}

const SkillTalentInfoRsp& SkillTalentInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTalentInfoRsp* SkillTalentInfoRsp::default_instance_ = NULL;

SkillTalentInfoRsp* SkillTalentInfoRsp::New() const {
  return new SkillTalentInfoRsp;
}

void SkillTalentInfoRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    can_use_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTalentInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SkillTalentProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_can_use;
        break;
      }

      // optional int32 can_use = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_use_)));
          set_has_can_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillTalentInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SkillTalentProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional int32 can_use = 2;
  if (has_can_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTalentInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SkillTalentProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional int32 can_use = 2;
  if (has_can_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTalentInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 can_use = 2;
    if (has_can_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_use());
    }

  }
  // repeated .proto_ff.SkillTalentProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTalentInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTalentInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTalentInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTalentInfoRsp::MergeFrom(const SkillTalentInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_can_use()) {
      set_can_use(from.can_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTalentInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTalentInfoRsp::CopyFrom(const SkillTalentInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTalentInfoRsp::IsInitialized() const {

  return true;
}

void SkillTalentInfoRsp::Swap(SkillTalentInfoRsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(can_use_, other->can_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTalentInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTalentInfoRsp_descriptor_;
  metadata.reflection = SkillTalentInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillTalentPointRsp::kCanUseFieldNumber;
#endif  // !_MSC_VER

SkillTalentPointRsp::SkillTalentPointRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTalentPointRsp::InitAsDefaultInstance() {
}

SkillTalentPointRsp::SkillTalentPointRsp(const SkillTalentPointRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTalentPointRsp::SharedCtor() {
  _cached_size_ = 0;
  can_use_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTalentPointRsp::~SkillTalentPointRsp() {
  SharedDtor();
}

void SkillTalentPointRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTalentPointRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTalentPointRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTalentPointRsp_descriptor_;
}

const SkillTalentPointRsp& SkillTalentPointRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTalentPointRsp* SkillTalentPointRsp::default_instance_ = NULL;

SkillTalentPointRsp* SkillTalentPointRsp::New() const {
  return new SkillTalentPointRsp;
}

void SkillTalentPointRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    can_use_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTalentPointRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 can_use = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_use_)));
          set_has_can_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillTalentPointRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 can_use = 1;
  if (has_can_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->can_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTalentPointRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 can_use = 1;
  if (has_can_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->can_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTalentPointRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 can_use = 1;
    if (has_can_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_use());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTalentPointRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTalentPointRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTalentPointRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTalentPointRsp::MergeFrom(const SkillTalentPointRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_use()) {
      set_can_use(from.can_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTalentPointRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTalentPointRsp::CopyFrom(const SkillTalentPointRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTalentPointRsp::IsInitialized() const {

  return true;
}

void SkillTalentPointRsp::Swap(SkillTalentPointRsp* other) {
  if (other != this) {
    std::swap(can_use_, other->can_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTalentPointRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTalentPointRsp_descriptor_;
  metadata.reflection = SkillTalentPointRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkillTalentResetReq::SkillTalentResetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTalentResetReq::InitAsDefaultInstance() {
}

SkillTalentResetReq::SkillTalentResetReq(const SkillTalentResetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTalentResetReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTalentResetReq::~SkillTalentResetReq() {
  SharedDtor();
}

void SkillTalentResetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTalentResetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTalentResetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTalentResetReq_descriptor_;
}

const SkillTalentResetReq& SkillTalentResetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTalentResetReq* SkillTalentResetReq::default_instance_ = NULL;

SkillTalentResetReq* SkillTalentResetReq::New() const {
  return new SkillTalentResetReq;
}

void SkillTalentResetReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTalentResetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SkillTalentResetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTalentResetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTalentResetReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTalentResetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTalentResetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTalentResetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTalentResetReq::MergeFrom(const SkillTalentResetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTalentResetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTalentResetReq::CopyFrom(const SkillTalentResetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTalentResetReq::IsInitialized() const {

  return true;
}

void SkillTalentResetReq::Swap(SkillTalentResetReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTalentResetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTalentResetReq_descriptor_;
  metadata.reflection = SkillTalentResetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillTalentResetRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SkillTalentResetRsp::SkillTalentResetRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTalentResetRsp::InitAsDefaultInstance() {
}

SkillTalentResetRsp::SkillTalentResetRsp(const SkillTalentResetRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTalentResetRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTalentResetRsp::~SkillTalentResetRsp() {
  SharedDtor();
}

void SkillTalentResetRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTalentResetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTalentResetRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTalentResetRsp_descriptor_;
}

const SkillTalentResetRsp& SkillTalentResetRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTalentResetRsp* SkillTalentResetRsp::default_instance_ = NULL;

SkillTalentResetRsp* SkillTalentResetRsp::New() const {
  return new SkillTalentResetRsp;
}

void SkillTalentResetRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTalentResetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillTalentResetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTalentResetRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTalentResetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTalentResetRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTalentResetRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTalentResetRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTalentResetRsp::MergeFrom(const SkillTalentResetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTalentResetRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTalentResetRsp::CopyFrom(const SkillTalentResetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTalentResetRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillTalentResetRsp::Swap(SkillTalentResetRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTalentResetRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTalentResetRsp_descriptor_;
  metadata.reflection = SkillTalentResetRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillTalentUsePointReq::kIdFieldNumber;
const int SkillTalentUsePointReq::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillTalentUsePointReq::SkillTalentUsePointReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTalentUsePointReq::InitAsDefaultInstance() {
}

SkillTalentUsePointReq::SkillTalentUsePointReq(const SkillTalentUsePointReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTalentUsePointReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTalentUsePointReq::~SkillTalentUsePointReq() {
  SharedDtor();
}

void SkillTalentUsePointReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTalentUsePointReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTalentUsePointReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTalentUsePointReq_descriptor_;
}

const SkillTalentUsePointReq& SkillTalentUsePointReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTalentUsePointReq* SkillTalentUsePointReq::default_instance_ = NULL;

SkillTalentUsePointReq* SkillTalentUsePointReq::New() const {
  return new SkillTalentUsePointReq;
}

void SkillTalentUsePointReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTalentUsePointReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillTalentUsePointReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTalentUsePointReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTalentUsePointReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTalentUsePointReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTalentUsePointReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTalentUsePointReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTalentUsePointReq::MergeFrom(const SkillTalentUsePointReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTalentUsePointReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTalentUsePointReq::CopyFrom(const SkillTalentUsePointReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTalentUsePointReq::IsInitialized() const {

  return true;
}

void SkillTalentUsePointReq::Swap(SkillTalentUsePointReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTalentUsePointReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTalentUsePointReq_descriptor_;
  metadata.reflection = SkillTalentUsePointReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillTalentUsePointRsp::kRetFieldNumber;
const int SkillTalentUsePointRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

SkillTalentUsePointRsp::SkillTalentUsePointRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTalentUsePointRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::SkillTalentProto*>(&::proto_ff::SkillTalentProto::default_instance());
}

SkillTalentUsePointRsp::SkillTalentUsePointRsp(const SkillTalentUsePointRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTalentUsePointRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTalentUsePointRsp::~SkillTalentUsePointRsp() {
  SharedDtor();
}

void SkillTalentUsePointRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SkillTalentUsePointRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTalentUsePointRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTalentUsePointRsp_descriptor_;
}

const SkillTalentUsePointRsp& SkillTalentUsePointRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTalentUsePointRsp* SkillTalentUsePointRsp::default_instance_ = NULL;

SkillTalentUsePointRsp* SkillTalentUsePointRsp::New() const {
  return new SkillTalentUsePointRsp;
}

void SkillTalentUsePointRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::SkillTalentProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTalentUsePointRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.SkillTalentProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillTalentUsePointRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.SkillTalentProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTalentUsePointRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.SkillTalentProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTalentUsePointRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.SkillTalentProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTalentUsePointRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTalentUsePointRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTalentUsePointRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTalentUsePointRsp::MergeFrom(const SkillTalentUsePointRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::SkillTalentProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTalentUsePointRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTalentUsePointRsp::CopyFrom(const SkillTalentUsePointRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTalentUsePointRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillTalentUsePointRsp::Swap(SkillTalentUsePointRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTalentUsePointRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTalentUsePointRsp_descriptor_;
  metadata.reflection = SkillTalentUsePointRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAngerUpdateRsp::kAngerValueFieldNumber;
#endif  // !_MSC_VER

SkillAngerUpdateRsp::SkillAngerUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillAngerUpdateRsp::InitAsDefaultInstance() {
}

SkillAngerUpdateRsp::SkillAngerUpdateRsp(const SkillAngerUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillAngerUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  anger_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAngerUpdateRsp::~SkillAngerUpdateRsp() {
  SharedDtor();
}

void SkillAngerUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAngerUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAngerUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAngerUpdateRsp_descriptor_;
}

const SkillAngerUpdateRsp& SkillAngerUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillAngerUpdateRsp* SkillAngerUpdateRsp::default_instance_ = NULL;

SkillAngerUpdateRsp* SkillAngerUpdateRsp::New() const {
  return new SkillAngerUpdateRsp;
}

void SkillAngerUpdateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    anger_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAngerUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 anger_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anger_value_)));
          set_has_anger_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillAngerUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 anger_value = 1;
  if (has_anger_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->anger_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillAngerUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 anger_value = 1;
  if (has_anger_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->anger_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillAngerUpdateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 anger_value = 1;
    if (has_anger_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anger_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAngerUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAngerUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAngerUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAngerUpdateRsp::MergeFrom(const SkillAngerUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_anger_value()) {
      set_anger_value(from.anger_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAngerUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAngerUpdateRsp::CopyFrom(const SkillAngerUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAngerUpdateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkillAngerUpdateRsp::Swap(SkillAngerUpdateRsp* other) {
  if (other != this) {
    std::swap(anger_value_, other->anger_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAngerUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAngerUpdateRsp_descriptor_;
  metadata.reflection = SkillAngerUpdateRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
