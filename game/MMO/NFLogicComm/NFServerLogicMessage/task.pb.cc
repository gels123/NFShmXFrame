// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_TaskTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_TaskTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_TaskTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_TaskTask_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  E_TaskTask_descriptor_ = file->message_type(0);
  static const int E_TaskTask_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_minlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_truelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_rececond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_receadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_comcond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_nexttask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_tracker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_subnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_subdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_subaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, m_submsg_),
  };
  E_TaskTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_TaskTask_descriptor_,
      E_TaskTask::default_instance_,
      E_TaskTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_TaskTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_TaskTask));
  Sheet_TaskTask_descriptor_ = file->message_type(1);
  static const int Sheet_TaskTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskTask, e_tasktask_list_),
  };
  Sheet_TaskTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_TaskTask_descriptor_,
      Sheet_TaskTask::default_instance_,
      Sheet_TaskTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_TaskTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_TaskTask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_TaskTask_descriptor_, &E_TaskTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_TaskTask_descriptor_, &Sheet_TaskTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete E_TaskTask::default_instance_;
  delete E_TaskTask_reflection_;
  delete Sheet_TaskTask::default_instance_;
  delete Sheet_TaskTask_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\213\005\n\nE_TaskTask\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002"
    "id\022!\n\007m_minlv\030\002 \001(\005B\020\302\377\024\014\345\217\221\346\224\276\347\255\211\347\272\247\022%\n"
    "\010m_truelv\030\003 \001(\005B\023\302\377\024\017\345\217\257\345\256\214\346\210\220\347\255\211\347\272\247\022 \n\006"
    "m_type\030\004 \001(\005B\020\302\377\024\014\344\273\273\345\212\241\347\261\273\345\236\213\022(\n\nm_show"
    "type\030\005 \001(\tB\024\302\377\024\014\346\230\276\347\244\272\347\261\273\345\236\213\220\301\024<\022#\n\tm_we"
    "ights\030\006 \001(\005B\020\302\377\024\014\346\216\222\345\272\217\346\235\203\351\207\215\022!\n\006m_name\030"
    "\007 \001(\tB\021\302\377\024\t\344\273\273\345\212\241\345\220\215\220\301\024<\022(\n\nm_rececond\030\010"
    " \001(\tB\024\302\377\024\014\346\216\245\345\217\226\346\235\241\344\273\266\220\301\024<\022!\n\tm_receadd\030"
    "\t \001(\tB\016\302\377\024\006\350\277\207\347\250\213\220\301\024<\022\'\n\tm_comcond\030\n \001(\t"
    "B\024\302\377\024\014\345\256\214\346\210\220\346\235\241\344\273\266\220\301\024P\022$\n\nm_nexttask\030\013 \001"
    "(\005B\020\302\377\024\014\345\220\216\347\273\255\344\273\273\345\212\241\022\'\n\tm_tracker\030\014 \001(\tB"
    "\024\302\377\024\014\344\273\273\345\212\241\350\277\275\350\270\252\220\301\024<\022\'\n\tm_subtype\030\r \001(\t"
    "B\024\302\377\024\014\346\217\220\344\272\244\346\226\271\345\274\217\220\301\024<\022\036\n\010m_subnpc\030\016 \001(\005"
    "B\014\302\377\024\010npc\347\232\204ID\022(\n\tm_subdesc\030\017 \001(\tB\025\302\377\024\014\346"
    "\217\220\344\272\244\346\217\217\350\277\260\220\301\024\310\001\022$\n\nm_subaward\030\020 \001(\005B\020\302\377"
    "\024\014\346\217\220\344\272\244\345\245\226\345\212\261\022+\n\010m_submsg\030\021 \003(\tB\031\302\377\024\014\346\217"
    "\220\344\272\244\345\257\271\350\257\235\210\301\024\004\220\301\024\254\002\"F\n\016Sheet_TaskTask\0224\n"
    "\017E_TaskTask_List\030\001 \003(\0132\024.proto_ff.E_Task"
    "TaskB\005\210\301\024\310\001", 771);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  E_TaskTask::default_instance_ = new E_TaskTask();
  Sheet_TaskTask::default_instance_ = new Sheet_TaskTask();
  E_TaskTask::default_instance_->InitAsDefaultInstance();
  Sheet_TaskTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_TaskTask::kMIdFieldNumber;
const int E_TaskTask::kMMinlvFieldNumber;
const int E_TaskTask::kMTruelvFieldNumber;
const int E_TaskTask::kMTypeFieldNumber;
const int E_TaskTask::kMShowtypeFieldNumber;
const int E_TaskTask::kMWeightsFieldNumber;
const int E_TaskTask::kMNameFieldNumber;
const int E_TaskTask::kMRececondFieldNumber;
const int E_TaskTask::kMReceaddFieldNumber;
const int E_TaskTask::kMComcondFieldNumber;
const int E_TaskTask::kMNexttaskFieldNumber;
const int E_TaskTask::kMTrackerFieldNumber;
const int E_TaskTask::kMSubtypeFieldNumber;
const int E_TaskTask::kMSubnpcFieldNumber;
const int E_TaskTask::kMSubdescFieldNumber;
const int E_TaskTask::kMSubawardFieldNumber;
const int E_TaskTask::kMSubmsgFieldNumber;
#endif  // !_MSC_VER

E_TaskTask::E_TaskTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_TaskTask::InitAsDefaultInstance() {
}

E_TaskTask::E_TaskTask(const E_TaskTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_TaskTask::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_minlv_ = 0;
  m_truelv_ = 0;
  m_type_ = 0;
  m_showtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_weights_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rececond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_receadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_comcond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_nexttask_ = 0;
  m_tracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_subnpc_ = 0;
  m_subdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_subaward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_TaskTask::~E_TaskTask() {
  SharedDtor();
}

void E_TaskTask::SharedDtor() {
  if (m_showtype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_showtype_;
  }
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_rececond_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rececond_;
  }
  if (m_receadd_ != &::google::protobuf::internal::kEmptyString) {
    delete m_receadd_;
  }
  if (m_comcond_ != &::google::protobuf::internal::kEmptyString) {
    delete m_comcond_;
  }
  if (m_tracker_ != &::google::protobuf::internal::kEmptyString) {
    delete m_tracker_;
  }
  if (m_subtype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_subtype_;
  }
  if (m_subdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete m_subdesc_;
  }
  if (this != default_instance_) {
  }
}

void E_TaskTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_TaskTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_TaskTask_descriptor_;
}

const E_TaskTask& E_TaskTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

E_TaskTask* E_TaskTask::default_instance_ = NULL;

E_TaskTask* E_TaskTask::New() const {
  return new E_TaskTask;
}

void E_TaskTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_minlv_ = 0;
    m_truelv_ = 0;
    m_type_ = 0;
    if (has_m_showtype()) {
      if (m_showtype_ != &::google::protobuf::internal::kEmptyString) {
        m_showtype_->clear();
      }
    }
    m_weights_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    if (has_m_rececond()) {
      if (m_rececond_ != &::google::protobuf::internal::kEmptyString) {
        m_rececond_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_receadd()) {
      if (m_receadd_ != &::google::protobuf::internal::kEmptyString) {
        m_receadd_->clear();
      }
    }
    if (has_m_comcond()) {
      if (m_comcond_ != &::google::protobuf::internal::kEmptyString) {
        m_comcond_->clear();
      }
    }
    m_nexttask_ = 0;
    if (has_m_tracker()) {
      if (m_tracker_ != &::google::protobuf::internal::kEmptyString) {
        m_tracker_->clear();
      }
    }
    if (has_m_subtype()) {
      if (m_subtype_ != &::google::protobuf::internal::kEmptyString) {
        m_subtype_->clear();
      }
    }
    m_subnpc_ = 0;
    if (has_m_subdesc()) {
      if (m_subdesc_ != &::google::protobuf::internal::kEmptyString) {
        m_subdesc_->clear();
      }
    }
    m_subaward_ = 0;
  }
  m_submsg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_TaskTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_minlv;
        break;
      }

      // optional int32 m_minlv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minlv_)));
          set_has_m_minlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_truelv;
        break;
      }

      // optional int32 m_truelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_truelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_truelv_)));
          set_has_m_truelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_showtype;
        break;
      }

      // optional string m_showtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_showtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_showtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_showtype().data(), this->m_showtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_weights;
        break;
      }

      // optional int32 m_weights = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weights_)));
          set_has_m_weights();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_name;
        break;
      }

      // optional string m_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_rececond;
        break;
      }

      // optional string m_rececond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rececond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rececond()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rececond().data(), this->m_rececond().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_receadd;
        break;
      }

      // optional string m_receadd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_receadd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_receadd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_receadd().data(), this->m_receadd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_comcond;
        break;
      }

      // optional string m_comcond = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_comcond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_comcond()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_comcond().data(), this->m_comcond().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_nexttask;
        break;
      }

      // optional int32 m_nexttask = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nexttask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nexttask_)));
          set_has_m_nexttask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_tracker;
        break;
      }

      // optional string m_tracker = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_tracker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_tracker().data(), this->m_tracker().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_subtype;
        break;
      }

      // optional string m_subtype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_subtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_subtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_subtype().data(), this->m_subtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_subnpc;
        break;
      }

      // optional int32 m_subnpc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subnpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subnpc_)));
          set_has_m_subnpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_subdesc;
        break;
      }

      // optional string m_subdesc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_subdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_subdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_subdesc().data(), this->m_subdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_subaward;
        break;
      }

      // optional int32 m_subaward = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subaward_)));
          set_has_m_subaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_submsg;
        break;
      }

      // repeated string m_submsg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_submsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_submsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_submsg(this->m_submsg_size() - 1).data(),
            this->m_submsg(this->m_submsg_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_submsg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_TaskTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_minlv = 2;
  if (has_m_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_minlv(), output);
  }

  // optional int32 m_truelv = 3;
  if (has_m_truelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_truelv(), output);
  }

  // optional int32 m_type = 4;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_type(), output);
  }

  // optional string m_showtype = 5;
  if (has_m_showtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_showtype().data(), this->m_showtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_showtype(), output);
  }

  // optional int32 m_weights = 6;
  if (has_m_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_weights(), output);
  }

  // optional string m_name = 7;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_name(), output);
  }

  // optional string m_rececond = 8;
  if (has_m_rececond()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rececond().data(), this->m_rececond().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_rececond(), output);
  }

  // optional string m_receadd = 9;
  if (has_m_receadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_receadd().data(), this->m_receadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_receadd(), output);
  }

  // optional string m_comcond = 10;
  if (has_m_comcond()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_comcond().data(), this->m_comcond().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_comcond(), output);
  }

  // optional int32 m_nexttask = 11;
  if (has_m_nexttask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_nexttask(), output);
  }

  // optional string m_tracker = 12;
  if (has_m_tracker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tracker().data(), this->m_tracker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->m_tracker(), output);
  }

  // optional string m_subtype = 13;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_subtype().data(), this->m_subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_subtype(), output);
  }

  // optional int32 m_subnpc = 14;
  if (has_m_subnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_subnpc(), output);
  }

  // optional string m_subdesc = 15;
  if (has_m_subdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_subdesc().data(), this->m_subdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_subdesc(), output);
  }

  // optional int32 m_subaward = 16;
  if (has_m_subaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_subaward(), output);
  }

  // repeated string m_submsg = 17;
  for (int i = 0; i < this->m_submsg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_submsg(i).data(), this->m_submsg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->m_submsg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_TaskTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_minlv = 2;
  if (has_m_minlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_minlv(), target);
  }

  // optional int32 m_truelv = 3;
  if (has_m_truelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_truelv(), target);
  }

  // optional int32 m_type = 4;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_type(), target);
  }

  // optional string m_showtype = 5;
  if (has_m_showtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_showtype().data(), this->m_showtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_showtype(), target);
  }

  // optional int32 m_weights = 6;
  if (has_m_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_weights(), target);
  }

  // optional string m_name = 7;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_name(), target);
  }

  // optional string m_rececond = 8;
  if (has_m_rececond()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rececond().data(), this->m_rececond().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_rececond(), target);
  }

  // optional string m_receadd = 9;
  if (has_m_receadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_receadd().data(), this->m_receadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_receadd(), target);
  }

  // optional string m_comcond = 10;
  if (has_m_comcond()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_comcond().data(), this->m_comcond().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_comcond(), target);
  }

  // optional int32 m_nexttask = 11;
  if (has_m_nexttask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_nexttask(), target);
  }

  // optional string m_tracker = 12;
  if (has_m_tracker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_tracker().data(), this->m_tracker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->m_tracker(), target);
  }

  // optional string m_subtype = 13;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_subtype().data(), this->m_subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_subtype(), target);
  }

  // optional int32 m_subnpc = 14;
  if (has_m_subnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_subnpc(), target);
  }

  // optional string m_subdesc = 15;
  if (has_m_subdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_subdesc().data(), this->m_subdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->m_subdesc(), target);
  }

  // optional int32 m_subaward = 16;
  if (has_m_subaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_subaward(), target);
  }

  // repeated string m_submsg = 17;
  for (int i = 0; i < this->m_submsg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_submsg(i).data(), this->m_submsg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->m_submsg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_TaskTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_minlv = 2;
    if (has_m_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minlv());
    }

    // optional int32 m_truelv = 3;
    if (has_m_truelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_truelv());
    }

    // optional int32 m_type = 4;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_showtype = 5;
    if (has_m_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_showtype());
    }

    // optional int32 m_weights = 6;
    if (has_m_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weights());
    }

    // optional string m_name = 7;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional string m_rececond = 8;
    if (has_m_rececond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rececond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_receadd = 9;
    if (has_m_receadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_receadd());
    }

    // optional string m_comcond = 10;
    if (has_m_comcond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_comcond());
    }

    // optional int32 m_nexttask = 11;
    if (has_m_nexttask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nexttask());
    }

    // optional string m_tracker = 12;
    if (has_m_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_tracker());
    }

    // optional string m_subtype = 13;
    if (has_m_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_subtype());
    }

    // optional int32 m_subnpc = 14;
    if (has_m_subnpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subnpc());
    }

    // optional string m_subdesc = 15;
    if (has_m_subdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_subdesc());
    }

    // optional int32 m_subaward = 16;
    if (has_m_subaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subaward());
    }

  }
  // repeated string m_submsg = 17;
  total_size += 2 * this->m_submsg_size();
  for (int i = 0; i < this->m_submsg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_submsg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_TaskTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_TaskTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_TaskTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_TaskTask::MergeFrom(const E_TaskTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_submsg_.MergeFrom(from.m_submsg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_minlv()) {
      set_m_minlv(from.m_minlv());
    }
    if (from.has_m_truelv()) {
      set_m_truelv(from.m_truelv());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_showtype()) {
      set_m_showtype(from.m_showtype());
    }
    if (from.has_m_weights()) {
      set_m_weights(from.m_weights());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_rececond()) {
      set_m_rececond(from.m_rececond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_receadd()) {
      set_m_receadd(from.m_receadd());
    }
    if (from.has_m_comcond()) {
      set_m_comcond(from.m_comcond());
    }
    if (from.has_m_nexttask()) {
      set_m_nexttask(from.m_nexttask());
    }
    if (from.has_m_tracker()) {
      set_m_tracker(from.m_tracker());
    }
    if (from.has_m_subtype()) {
      set_m_subtype(from.m_subtype());
    }
    if (from.has_m_subnpc()) {
      set_m_subnpc(from.m_subnpc());
    }
    if (from.has_m_subdesc()) {
      set_m_subdesc(from.m_subdesc());
    }
    if (from.has_m_subaward()) {
      set_m_subaward(from.m_subaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_TaskTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_TaskTask::CopyFrom(const E_TaskTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_TaskTask::IsInitialized() const {

  return true;
}

void E_TaskTask::Swap(E_TaskTask* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_minlv_, other->m_minlv_);
    std::swap(m_truelv_, other->m_truelv_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_showtype_, other->m_showtype_);
    std::swap(m_weights_, other->m_weights_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_rececond_, other->m_rececond_);
    std::swap(m_receadd_, other->m_receadd_);
    std::swap(m_comcond_, other->m_comcond_);
    std::swap(m_nexttask_, other->m_nexttask_);
    std::swap(m_tracker_, other->m_tracker_);
    std::swap(m_subtype_, other->m_subtype_);
    std::swap(m_subnpc_, other->m_subnpc_);
    std::swap(m_subdesc_, other->m_subdesc_);
    std::swap(m_subaward_, other->m_subaward_);
    m_submsg_.Swap(&other->m_submsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_TaskTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_TaskTask_descriptor_;
  metadata.reflection = E_TaskTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_TaskTask::kETaskTaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_TaskTask::Sheet_TaskTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_TaskTask::InitAsDefaultInstance() {
}

Sheet_TaskTask::Sheet_TaskTask(const Sheet_TaskTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_TaskTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_TaskTask::~Sheet_TaskTask() {
  SharedDtor();
}

void Sheet_TaskTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_TaskTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_TaskTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_TaskTask_descriptor_;
}

const Sheet_TaskTask& Sheet_TaskTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Sheet_TaskTask* Sheet_TaskTask::default_instance_ = NULL;

Sheet_TaskTask* Sheet_TaskTask::New() const {
  return new Sheet_TaskTask;
}

void Sheet_TaskTask::Clear() {
  e_tasktask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_TaskTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_TaskTask E_TaskTask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_TaskTask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_tasktask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_TaskTask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_TaskTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_TaskTask E_TaskTask_List = 1;
  for (int i = 0; i < this->e_tasktask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_tasktask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_TaskTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_TaskTask E_TaskTask_List = 1;
  for (int i = 0; i < this->e_tasktask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_tasktask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_TaskTask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_TaskTask E_TaskTask_List = 1;
  total_size += 1 * this->e_tasktask_list_size();
  for (int i = 0; i < this->e_tasktask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_tasktask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_TaskTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_TaskTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_TaskTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_TaskTask::MergeFrom(const Sheet_TaskTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_tasktask_list_.MergeFrom(from.e_tasktask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_TaskTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_TaskTask::CopyFrom(const Sheet_TaskTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_TaskTask::IsInitialized() const {

  return true;
}

void Sheet_TaskTask::Swap(Sheet_TaskTask* other) {
  if (other != this) {
    e_tasktask_list_.Swap(&other->e_tasktask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_TaskTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_TaskTask_descriptor_;
  metadata.reflection = Sheet_TaskTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
