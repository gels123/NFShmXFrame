// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* tasktask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tasktask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_tasktask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_tasktask_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  tasktask_descriptor_ = file->message_type(0);
  static const int tasktask_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, minlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, truelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, rececond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, receadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, comcond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, nexttask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, tracker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, subnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, subdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, subaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, submsg_),
  };
  tasktask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tasktask_descriptor_,
      tasktask::default_instance_,
      tasktask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tasktask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tasktask));
  Sheet_tasktask_descriptor_ = file->message_type(1);
  static const int Sheet_tasktask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tasktask, tasktask_list_),
  };
  Sheet_tasktask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_tasktask_descriptor_,
      Sheet_tasktask::default_instance_,
      Sheet_tasktask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tasktask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tasktask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_tasktask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tasktask_descriptor_, &tasktask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_tasktask_descriptor_, &Sheet_tasktask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete tasktask::default_instance_;
  delete tasktask_reflection_;
  delete Sheet_tasktask::default_instance_;
  delete Sheet_tasktask_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\347\004\n\010tasktask\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\037"
    "\n\005minlv\030\002 \001(\005B\020\302\377\024\014\345\217\221\346\224\276\347\255\211\347\272\247\022#\n\006truel"
    "v\030\003 \001(\005B\023\302\377\024\017\345\217\257\345\256\214\346\210\220\347\255\211\347\272\247\022\036\n\004type\030\004 \001"
    "(\005B\020\302\377\024\014\344\273\273\345\212\241\347\261\273\345\236\213\022&\n\010showtype\030\005 \001(\tB\024"
    "\302\377\024\014\346\230\276\347\244\272\347\261\273\345\236\213\220\301\024<\022!\n\007weights\030\006 \001(\005B\020\302"
    "\377\024\014\346\216\222\345\272\217\346\235\203\351\207\215\022\037\n\004name\030\007 \001(\tB\021\302\377\024\t\344\273\273\345\212"
    "\241\345\220\215\220\301\024<\022&\n\010rececond\030\010 \001(\tB\024\302\377\024\014\346\216\245\345\217\226\346\235"
    "\241\344\273\266\220\301\024<\022\037\n\007receadd\030\t \001(\tB\016\302\377\024\006\350\277\207\347\250\213\220\301\024"
    "<\022%\n\007comcond\030\n \001(\tB\024\302\377\024\014\345\256\214\346\210\220\346\235\241\344\273\266\220\301\024<"
    "\022\"\n\010nexttask\030\013 \001(\005B\020\302\377\024\014\345\220\216\347\273\255\344\273\273\345\212\241\022%\n\007"
    "tracker\030\014 \001(\tB\024\302\377\024\014\344\273\273\345\212\241\350\277\275\350\270\252\220\301\024<\022%\n\007s"
    "ubtype\030\r \001(\tB\024\302\377\024\014\346\217\220\344\272\244\346\226\271\345\274\217\220\301\024<\022\034\n\006su"
    "bnpc\030\016 \001(\005B\014\302\377\024\010npc\347\232\204ID\022&\n\007subdesc\030\017 \001("
    "\tB\025\302\377\024\014\346\217\220\344\272\244\346\217\217\350\277\260\220\301\024\310\001\022\"\n\010subaward\030\020 \001"
    "(\005B\020\302\377\024\014\346\217\220\344\272\244\345\245\226\345\212\261\022)\n\006submsg\030\021 \003(\tB\031\302\377"
    "\024\014\346\217\220\344\272\244\345\257\271\350\257\235\210\301\024\004\220\301\024\254\002\"B\n\016Sheet_tasktas"
    "k\0220\n\rtasktask_List\030\001 \003(\0132\022.proto_ff.task"
    "taskB\005\210\301\024\310\001", 731);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  tasktask::default_instance_ = new tasktask();
  Sheet_tasktask::default_instance_ = new Sheet_tasktask();
  tasktask::default_instance_->InitAsDefaultInstance();
  Sheet_tasktask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tasktask::kIdFieldNumber;
const int tasktask::kMinlvFieldNumber;
const int tasktask::kTruelvFieldNumber;
const int tasktask::kTypeFieldNumber;
const int tasktask::kShowtypeFieldNumber;
const int tasktask::kWeightsFieldNumber;
const int tasktask::kNameFieldNumber;
const int tasktask::kRececondFieldNumber;
const int tasktask::kReceaddFieldNumber;
const int tasktask::kComcondFieldNumber;
const int tasktask::kNexttaskFieldNumber;
const int tasktask::kTrackerFieldNumber;
const int tasktask::kSubtypeFieldNumber;
const int tasktask::kSubnpcFieldNumber;
const int tasktask::kSubdescFieldNumber;
const int tasktask::kSubawardFieldNumber;
const int tasktask::kSubmsgFieldNumber;
#endif  // !_MSC_VER

tasktask::tasktask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tasktask::InitAsDefaultInstance() {
}

tasktask::tasktask(const tasktask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tasktask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  minlv_ = 0;
  truelv_ = 0;
  type_ = 0;
  showtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weights_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rececond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comcond_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nexttask_ = 0;
  tracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subnpc_ = 0;
  subdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subaward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tasktask::~tasktask() {
  SharedDtor();
}

void tasktask::SharedDtor() {
  if (showtype_ != &::google::protobuf::internal::kEmptyString) {
    delete showtype_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (rececond_ != &::google::protobuf::internal::kEmptyString) {
    delete rececond_;
  }
  if (receadd_ != &::google::protobuf::internal::kEmptyString) {
    delete receadd_;
  }
  if (comcond_ != &::google::protobuf::internal::kEmptyString) {
    delete comcond_;
  }
  if (tracker_ != &::google::protobuf::internal::kEmptyString) {
    delete tracker_;
  }
  if (subtype_ != &::google::protobuf::internal::kEmptyString) {
    delete subtype_;
  }
  if (subdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete subdesc_;
  }
  if (this != default_instance_) {
  }
}

void tasktask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tasktask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tasktask_descriptor_;
}

const tasktask& tasktask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

tasktask* tasktask::default_instance_ = NULL;

tasktask* tasktask::New() const {
  return new tasktask;
}

void tasktask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    minlv_ = 0;
    truelv_ = 0;
    type_ = 0;
    if (has_showtype()) {
      if (showtype_ != &::google::protobuf::internal::kEmptyString) {
        showtype_->clear();
      }
    }
    weights_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_rececond()) {
      if (rececond_ != &::google::protobuf::internal::kEmptyString) {
        rececond_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_receadd()) {
      if (receadd_ != &::google::protobuf::internal::kEmptyString) {
        receadd_->clear();
      }
    }
    if (has_comcond()) {
      if (comcond_ != &::google::protobuf::internal::kEmptyString) {
        comcond_->clear();
      }
    }
    nexttask_ = 0;
    if (has_tracker()) {
      if (tracker_ != &::google::protobuf::internal::kEmptyString) {
        tracker_->clear();
      }
    }
    if (has_subtype()) {
      if (subtype_ != &::google::protobuf::internal::kEmptyString) {
        subtype_->clear();
      }
    }
    subnpc_ = 0;
    if (has_subdesc()) {
      if (subdesc_ != &::google::protobuf::internal::kEmptyString) {
        subdesc_->clear();
      }
    }
    subaward_ = 0;
  }
  submsg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tasktask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minlv;
        break;
      }

      // optional int32 minlv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlv_)));
          set_has_minlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_truelv;
        break;
      }

      // optional int32 truelv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_truelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truelv_)));
          set_has_truelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_showtype;
        break;
      }

      // optional string showtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->showtype().data(), this->showtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weights;
        break;
      }

      // optional int32 weights = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weights_)));
          set_has_weights();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rececond;
        break;
      }

      // optional string rececond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rececond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rececond()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rececond().data(), this->rececond().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_receadd;
        break;
      }

      // optional string receadd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receadd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receadd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receadd().data(), this->receadd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_comcond;
        break;
      }

      // optional string comcond = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comcond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comcond()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comcond().data(), this->comcond().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nexttask;
        break;
      }

      // optional int32 nexttask = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nexttask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nexttask_)));
          set_has_nexttask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tracker;
        break;
      }

      // optional string tracker = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tracker().data(), this->tracker().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_subtype;
        break;
      }

      // optional string subtype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtype().data(), this->subtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_subnpc;
        break;
      }

      // optional int32 subnpc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subnpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subnpc_)));
          set_has_subnpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_subdesc;
        break;
      }

      // optional string subdesc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subdesc().data(), this->subdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_subaward;
        break;
      }

      // optional int32 subaward = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subaward_)));
          set_has_subaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_submsg;
        break;
      }

      // repeated string submsg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_submsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->submsg(this->submsg_size() - 1).data(),
            this->submsg(this->submsg_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_submsg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tasktask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 minlv = 2;
  if (has_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minlv(), output);
  }

  // optional int32 truelv = 3;
  if (has_truelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->truelv(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional string showtype = 5;
  if (has_showtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showtype().data(), this->showtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->showtype(), output);
  }

  // optional int32 weights = 6;
  if (has_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->weights(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional string rececond = 8;
  if (has_rececond()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rececond().data(), this->rececond().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rececond(), output);
  }

  // optional string receadd = 9;
  if (has_receadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receadd().data(), this->receadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->receadd(), output);
  }

  // optional string comcond = 10;
  if (has_comcond()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comcond().data(), this->comcond().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->comcond(), output);
  }

  // optional int32 nexttask = 11;
  if (has_nexttask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nexttask(), output);
  }

  // optional string tracker = 12;
  if (has_tracker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracker().data(), this->tracker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->tracker(), output);
  }

  // optional string subtype = 13;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtype().data(), this->subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->subtype(), output);
  }

  // optional int32 subnpc = 14;
  if (has_subnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->subnpc(), output);
  }

  // optional string subdesc = 15;
  if (has_subdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subdesc().data(), this->subdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->subdesc(), output);
  }

  // optional int32 subaward = 16;
  if (has_subaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->subaward(), output);
  }

  // repeated string submsg = 17;
  for (int i = 0; i < this->submsg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->submsg(i).data(), this->submsg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->submsg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tasktask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 minlv = 2;
  if (has_minlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minlv(), target);
  }

  // optional int32 truelv = 3;
  if (has_truelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->truelv(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional string showtype = 5;
  if (has_showtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showtype().data(), this->showtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->showtype(), target);
  }

  // optional int32 weights = 6;
  if (has_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->weights(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string rececond = 8;
  if (has_rececond()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rececond().data(), this->rececond().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rececond(), target);
  }

  // optional string receadd = 9;
  if (has_receadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receadd().data(), this->receadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->receadd(), target);
  }

  // optional string comcond = 10;
  if (has_comcond()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comcond().data(), this->comcond().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->comcond(), target);
  }

  // optional int32 nexttask = 11;
  if (has_nexttask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nexttask(), target);
  }

  // optional string tracker = 12;
  if (has_tracker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracker().data(), this->tracker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->tracker(), target);
  }

  // optional string subtype = 13;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtype().data(), this->subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->subtype(), target);
  }

  // optional int32 subnpc = 14;
  if (has_subnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->subnpc(), target);
  }

  // optional string subdesc = 15;
  if (has_subdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subdesc().data(), this->subdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->subdesc(), target);
  }

  // optional int32 subaward = 16;
  if (has_subaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->subaward(), target);
  }

  // repeated string submsg = 17;
  for (int i = 0; i < this->submsg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submsg(i).data(), this->submsg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->submsg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tasktask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 minlv = 2;
    if (has_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlv());
    }

    // optional int32 truelv = 3;
    if (has_truelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->truelv());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string showtype = 5;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showtype());
    }

    // optional int32 weights = 6;
    if (has_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weights());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string rececond = 8;
    if (has_rececond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rececond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string receadd = 9;
    if (has_receadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receadd());
    }

    // optional string comcond = 10;
    if (has_comcond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comcond());
    }

    // optional int32 nexttask = 11;
    if (has_nexttask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexttask());
    }

    // optional string tracker = 12;
    if (has_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracker());
    }

    // optional string subtype = 13;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtype());
    }

    // optional int32 subnpc = 14;
    if (has_subnpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subnpc());
    }

    // optional string subdesc = 15;
    if (has_subdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subdesc());
    }

    // optional int32 subaward = 16;
    if (has_subaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subaward());
    }

  }
  // repeated string submsg = 17;
  total_size += 2 * this->submsg_size();
  for (int i = 0; i < this->submsg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->submsg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tasktask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tasktask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tasktask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tasktask::MergeFrom(const tasktask& from) {
  GOOGLE_CHECK_NE(&from, this);
  submsg_.MergeFrom(from.submsg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_minlv()) {
      set_minlv(from.minlv());
    }
    if (from.has_truelv()) {
      set_truelv(from.truelv());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_showtype()) {
      set_showtype(from.showtype());
    }
    if (from.has_weights()) {
      set_weights(from.weights());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rececond()) {
      set_rececond(from.rececond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receadd()) {
      set_receadd(from.receadd());
    }
    if (from.has_comcond()) {
      set_comcond(from.comcond());
    }
    if (from.has_nexttask()) {
      set_nexttask(from.nexttask());
    }
    if (from.has_tracker()) {
      set_tracker(from.tracker());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_subnpc()) {
      set_subnpc(from.subnpc());
    }
    if (from.has_subdesc()) {
      set_subdesc(from.subdesc());
    }
    if (from.has_subaward()) {
      set_subaward(from.subaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tasktask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tasktask::CopyFrom(const tasktask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tasktask::IsInitialized() const {

  return true;
}

void tasktask::Swap(tasktask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(minlv_, other->minlv_);
    std::swap(truelv_, other->truelv_);
    std::swap(type_, other->type_);
    std::swap(showtype_, other->showtype_);
    std::swap(weights_, other->weights_);
    std::swap(name_, other->name_);
    std::swap(rececond_, other->rececond_);
    std::swap(receadd_, other->receadd_);
    std::swap(comcond_, other->comcond_);
    std::swap(nexttask_, other->nexttask_);
    std::swap(tracker_, other->tracker_);
    std::swap(subtype_, other->subtype_);
    std::swap(subnpc_, other->subnpc_);
    std::swap(subdesc_, other->subdesc_);
    std::swap(subaward_, other->subaward_);
    submsg_.Swap(&other->submsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tasktask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tasktask_descriptor_;
  metadata.reflection = tasktask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_tasktask::kTasktaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_tasktask::Sheet_tasktask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_tasktask::InitAsDefaultInstance() {
}

Sheet_tasktask::Sheet_tasktask(const Sheet_tasktask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_tasktask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_tasktask::~Sheet_tasktask() {
  SharedDtor();
}

void Sheet_tasktask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_tasktask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_tasktask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_tasktask_descriptor_;
}

const Sheet_tasktask& Sheet_tasktask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Sheet_tasktask* Sheet_tasktask::default_instance_ = NULL;

Sheet_tasktask* Sheet_tasktask::New() const {
  return new Sheet_tasktask;
}

void Sheet_tasktask::Clear() {
  tasktask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_tasktask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.tasktask tasktask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasktask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasktask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasktask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_tasktask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.tasktask tasktask_List = 1;
  for (int i = 0; i < this->tasktask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasktask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_tasktask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.tasktask tasktask_List = 1;
  for (int i = 0; i < this->tasktask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasktask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_tasktask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.tasktask tasktask_List = 1;
  total_size += 1 * this->tasktask_list_size();
  for (int i = 0; i < this->tasktask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasktask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_tasktask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_tasktask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_tasktask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_tasktask::MergeFrom(const Sheet_tasktask& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasktask_list_.MergeFrom(from.tasktask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_tasktask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_tasktask::CopyFrom(const Sheet_tasktask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_tasktask::IsInitialized() const {

  return true;
}

void Sheet_tasktask::Swap(Sheet_tasktask* other) {
  if (other != this) {
    tasktask_list_.Swap(&other->tasktask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_tasktask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_tasktask_descriptor_;
  metadata.reflection = Sheet_tasktask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
