// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mount.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mount.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* mountmountuseattrDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mountmountuseattrDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* mountmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mountmount_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_mountmount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_mountmount_reflection_ = NULL;
const ::google::protobuf::Descriptor* mountstarUpupAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mountstarUpupAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* mountstarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mountstarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_mountstarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_mountstarUp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mount_2eproto() {
  protobuf_AddDesc_mount_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mount.proto");
  GOOGLE_CHECK(file != NULL);
  mountmountuseattrDesc_descriptor_ = file->message_type(0);
  static const int mountmountuseattrDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmountuseattrDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmountuseattrDesc, value_),
  };
  mountmountuseattrDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mountmountuseattrDesc_descriptor_,
      mountmountuseattrDesc::default_instance_,
      mountmountuseattrDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmountuseattrDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmountuseattrDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mountmountuseattrDesc));
  mountmount_descriptor_ = file->message_type(1);
  static const int mountmount_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, mountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, speednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, needitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, starnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, sourcelink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, useattr_),
  };
  mountmount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mountmount_descriptor_,
      mountmount::default_instance_,
      mountmount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountmount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mountmount));
  Sheet_mountmount_descriptor_ = file->message_type(2);
  static const int Sheet_mountmount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mountmount, mountmount_list_),
  };
  Sheet_mountmount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_mountmount_descriptor_,
      Sheet_mountmount::default_instance_,
      Sheet_mountmount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mountmount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mountmount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_mountmount));
  mountstarUpupAttributeDesc_descriptor_ = file->message_type(3);
  static const int mountstarUpupAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUpupAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUpupAttributeDesc, value_),
  };
  mountstarUpupAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mountstarUpupAttributeDesc_descriptor_,
      mountstarUpupAttributeDesc::default_instance_,
      mountstarUpupAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUpupAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUpupAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mountstarUpupAttributeDesc));
  mountstarUp_descriptor_ = file->message_type(4);
  static const int mountstarUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUp, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUp, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUp, upattribute_),
  };
  mountstarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mountstarUp_descriptor_,
      mountstarUp::default_instance_,
      mountstarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mountstarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mountstarUp));
  Sheet_mountstarUp_descriptor_ = file->message_type(5);
  static const int Sheet_mountstarUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mountstarUp, mountstarup_list_),
  };
  Sheet_mountstarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_mountstarUp_descriptor_,
      Sheet_mountstarUp::default_instance_,
      Sheet_mountstarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mountstarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_mountstarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_mountstarUp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mount_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mountmountuseattrDesc_descriptor_, &mountmountuseattrDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mountmount_descriptor_, &mountmount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_mountmount_descriptor_, &Sheet_mountmount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mountstarUpupAttributeDesc_descriptor_, &mountstarUpupAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mountstarUp_descriptor_, &mountstarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_mountstarUp_descriptor_, &Sheet_mountstarUp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mount_2eproto() {
  delete mountmountuseattrDesc::default_instance_;
  delete mountmountuseattrDesc_reflection_;
  delete mountmount::default_instance_;
  delete mountmount_reflection_;
  delete Sheet_mountmount::default_instance_;
  delete Sheet_mountmount_reflection_;
  delete mountstarUpupAttributeDesc::default_instance_;
  delete mountstarUpupAttributeDesc_reflection_;
  delete mountstarUp::default_instance_;
  delete mountstarUp_reflection_;
  delete Sheet_mountstarUp::default_instance_;
  delete Sheet_mountstarUp_reflection_;
}

void protobuf_AddDesc_mount_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013mount.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"I\n\025mountmountuseattrDesc\022\030\n\004type\030"
    "\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200"
    "\274\"\212\004\n\nmountmount\022\035\n\007mountId\030\001 \001(\003B\014\302\377\024\010\345"
    "\235\220\351\252\221id\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\345\235\220\351\252\221\345\220\215\347\247\260\220"
    "\301\024<\022!\n\007quality\030\003 \001(\005B\020\302\377\024\014\345\235\220\351\252\221\345\223\201\350\264\250\022$"
    "\n\noccupation\030\004 \001(\003B\020\302\377\024\014\350\275\254\350\201\214\350\246\201\346\261\202\022%\n\010"
    "speedNum\030\005 \001(\005B\023\302\377\024\017\344\271\230\351\252\221\351\200\237\345\272\246\345\200\274\022(\n\010n"
    "eedItem\030\006 \001(\003B\026\302\377\024\022\346\277\200\346\264\273\345\215\207\346\230\237\351\201\223\345\205\267\022,\n"
    "\007ItemNum\030\007 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301"
    "\024\310\001\022&\n\006starLv\030\010 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212"
    "\351\231\220\022-\n\nstarNumber\030\t \001(\005B\031\302\377\024\025\346\257\217\347\272\247\346\217\220\345\215"
    "\207\347\231\276\345\210\206\346\257\224\022$\n\nsourceLink\030\n \001(\005B\020\302\377\024\014\346\235\245\346"
    "\272\220\351\223\276\346\216\245\022,\n\rupAttributeId\030\013 \001(\003B\025\302\377\024\021\345\215\207"
    "\346\230\237\345\261\236\346\200\247\347\273\204ID\022F\n\007useattr\030\014 \003(\0132\037.proto_"
    "ff.mountmountuseattrDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346"
    "\200\247\210\301\024\003\"G\n\020Sheet_mountmount\0223\n\017mountmount"
    "_List\030\001 \003(\0132\024.proto_ff.mountmountB\004\210\301\024P\""
    "J\n\032mountstarUpupAttributeDesc\022\024\n\004type\030\001 "
    "\001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\302\001\n\013"
    "mountstarUp\022\030\n\002ID\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022,\n"
    "\rupAttributeId\030\002 \001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273"
    "\204ID\022\032\n\006starID\030\003 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022O\n\013upAtt"
    "ribute\030\004 \003(\0132$.proto_ff.mountstarUpupAtt"
    "ributeDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\002\"J\n\021Shee"
    "t_mountstarUp\0225\n\020mountstarUp_List\030\001 \003(\0132"
    "\025.proto_ff.mountstarUpB\004\210\301\024P", 1068);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mount.proto", &protobuf_RegisterTypes);
  mountmountuseattrDesc::default_instance_ = new mountmountuseattrDesc();
  mountmount::default_instance_ = new mountmount();
  Sheet_mountmount::default_instance_ = new Sheet_mountmount();
  mountstarUpupAttributeDesc::default_instance_ = new mountstarUpupAttributeDesc();
  mountstarUp::default_instance_ = new mountstarUp();
  Sheet_mountstarUp::default_instance_ = new Sheet_mountstarUp();
  mountmountuseattrDesc::default_instance_->InitAsDefaultInstance();
  mountmount::default_instance_->InitAsDefaultInstance();
  Sheet_mountmount::default_instance_->InitAsDefaultInstance();
  mountstarUpupAttributeDesc::default_instance_->InitAsDefaultInstance();
  mountstarUp::default_instance_->InitAsDefaultInstance();
  Sheet_mountstarUp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mount_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mount_2eproto {
  StaticDescriptorInitializer_mount_2eproto() {
    protobuf_AddDesc_mount_2eproto();
  }
} static_descriptor_initializer_mount_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mountmountuseattrDesc::kTypeFieldNumber;
const int mountmountuseattrDesc::kValueFieldNumber;
#endif  // !_MSC_VER

mountmountuseattrDesc::mountmountuseattrDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mountmountuseattrDesc::InitAsDefaultInstance() {
}

mountmountuseattrDesc::mountmountuseattrDesc(const mountmountuseattrDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mountmountuseattrDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mountmountuseattrDesc::~mountmountuseattrDesc() {
  SharedDtor();
}

void mountmountuseattrDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mountmountuseattrDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mountmountuseattrDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mountmountuseattrDesc_descriptor_;
}

const mountmountuseattrDesc& mountmountuseattrDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

mountmountuseattrDesc* mountmountuseattrDesc::default_instance_ = NULL;

mountmountuseattrDesc* mountmountuseattrDesc::New() const {
  return new mountmountuseattrDesc;
}

void mountmountuseattrDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mountmountuseattrDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mountmountuseattrDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mountmountuseattrDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mountmountuseattrDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mountmountuseattrDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mountmountuseattrDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mountmountuseattrDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mountmountuseattrDesc::MergeFrom(const mountmountuseattrDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mountmountuseattrDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mountmountuseattrDesc::CopyFrom(const mountmountuseattrDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mountmountuseattrDesc::IsInitialized() const {

  return true;
}

void mountmountuseattrDesc::Swap(mountmountuseattrDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mountmountuseattrDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mountmountuseattrDesc_descriptor_;
  metadata.reflection = mountmountuseattrDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mountmount::kMountIdFieldNumber;
const int mountmount::kNameFieldNumber;
const int mountmount::kQualityFieldNumber;
const int mountmount::kOccupationFieldNumber;
const int mountmount::kSpeedNumFieldNumber;
const int mountmount::kNeedItemFieldNumber;
const int mountmount::kItemNumFieldNumber;
const int mountmount::kStarLvFieldNumber;
const int mountmount::kStarNumberFieldNumber;
const int mountmount::kSourceLinkFieldNumber;
const int mountmount::kUpAttributeIdFieldNumber;
const int mountmount::kUseattrFieldNumber;
#endif  // !_MSC_VER

mountmount::mountmount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mountmount::InitAsDefaultInstance() {
}

mountmount::mountmount(const mountmount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mountmount::SharedCtor() {
  _cached_size_ = 0;
  mountid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  occupation_ = GOOGLE_LONGLONG(0);
  speednum_ = 0;
  needitem_ = GOOGLE_LONGLONG(0);
  itemnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starlv_ = 0;
  starnumber_ = 0;
  sourcelink_ = 0;
  upattributeid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mountmount::~mountmount() {
  SharedDtor();
}

void mountmount::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (itemnum_ != &::google::protobuf::internal::kEmptyString) {
    delete itemnum_;
  }
  if (this != default_instance_) {
  }
}

void mountmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mountmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mountmount_descriptor_;
}

const mountmount& mountmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

mountmount* mountmount::default_instance_ = NULL;

mountmount* mountmount::New() const {
  return new mountmount;
}

void mountmount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mountid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    occupation_ = GOOGLE_LONGLONG(0);
    speednum_ = 0;
    needitem_ = GOOGLE_LONGLONG(0);
    if (has_itemnum()) {
      if (itemnum_ != &::google::protobuf::internal::kEmptyString) {
        itemnum_->clear();
      }
    }
    starlv_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starnumber_ = 0;
    sourcelink_ = 0;
    upattributeid_ = GOOGLE_LONGLONG(0);
  }
  useattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mountmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mountId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_occupation;
        break;
      }

      // optional int64 occupation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_speedNum;
        break;
      }

      // optional int32 speedNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speednum_)));
          set_has_speednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_needItem;
        break;
      }

      // optional int64 needItem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &needitem_)));
          set_has_needitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ItemNum;
        break;
      }

      // optional string ItemNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemnum().data(), this->itemnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_starLv;
        break;
      }

      // optional int32 starLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_starNumber;
        break;
      }

      // optional int32 starNumber = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starnumber_)));
          set_has_starnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sourceLink;
        break;
      }

      // optional int32 sourceLink = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceLink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcelink_)));
          set_has_sourcelink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_useattr;
        break;
      }

      // repeated .proto_ff.mountmountuseattrDesc useattr = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useattr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_useattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_useattr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mountmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mountId = 1;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mountid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional int64 occupation = 4;
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->occupation(), output);
  }

  // optional int32 speedNum = 5;
  if (has_speednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->speednum(), output);
  }

  // optional int64 needItem = 6;
  if (has_needitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->needitem(), output);
  }

  // optional string ItemNum = 7;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemnum().data(), this->itemnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->itemnum(), output);
  }

  // optional int32 starLv = 8;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->starlv(), output);
  }

  // optional int32 starNumber = 9;
  if (has_starnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->starnumber(), output);
  }

  // optional int32 sourceLink = 10;
  if (has_sourcelink()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sourcelink(), output);
  }

  // optional int64 upAttributeId = 11;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->upattributeid(), output);
  }

  // repeated .proto_ff.mountmountuseattrDesc useattr = 12;
  for (int i = 0; i < this->useattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->useattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mountmount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mountId = 1;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mountid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional int64 occupation = 4;
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->occupation(), target);
  }

  // optional int32 speedNum = 5;
  if (has_speednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->speednum(), target);
  }

  // optional int64 needItem = 6;
  if (has_needitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->needitem(), target);
  }

  // optional string ItemNum = 7;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemnum().data(), this->itemnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->itemnum(), target);
  }

  // optional int32 starLv = 8;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->starlv(), target);
  }

  // optional int32 starNumber = 9;
  if (has_starnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->starnumber(), target);
  }

  // optional int32 sourceLink = 10;
  if (has_sourcelink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sourcelink(), target);
  }

  // optional int64 upAttributeId = 11;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->upattributeid(), target);
  }

  // repeated .proto_ff.mountmountuseattrDesc useattr = 12;
  for (int i = 0; i < this->useattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->useattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mountmount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mountId = 1;
    if (has_mountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mountid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 occupation = 4;
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupation());
    }

    // optional int32 speedNum = 5;
    if (has_speednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speednum());
    }

    // optional int64 needItem = 6;
    if (has_needitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->needitem());
    }

    // optional string ItemNum = 7;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemnum());
    }

    // optional int32 starLv = 8;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 starNumber = 9;
    if (has_starnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starnumber());
    }

    // optional int32 sourceLink = 10;
    if (has_sourcelink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcelink());
    }

    // optional int64 upAttributeId = 11;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

  }
  // repeated .proto_ff.mountmountuseattrDesc useattr = 12;
  total_size += 1 * this->useattr_size();
  for (int i = 0; i < this->useattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->useattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mountmount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mountmount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mountmount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mountmount::MergeFrom(const mountmount& from) {
  GOOGLE_CHECK_NE(&from, this);
  useattr_.MergeFrom(from.useattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_speednum()) {
      set_speednum(from.speednum());
    }
    if (from.has_needitem()) {
      set_needitem(from.needitem());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starnumber()) {
      set_starnumber(from.starnumber());
    }
    if (from.has_sourcelink()) {
      set_sourcelink(from.sourcelink());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mountmount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mountmount::CopyFrom(const mountmount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mountmount::IsInitialized() const {

  return true;
}

void mountmount::Swap(mountmount* other) {
  if (other != this) {
    std::swap(mountid_, other->mountid_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(occupation_, other->occupation_);
    std::swap(speednum_, other->speednum_);
    std::swap(needitem_, other->needitem_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(starlv_, other->starlv_);
    std::swap(starnumber_, other->starnumber_);
    std::swap(sourcelink_, other->sourcelink_);
    std::swap(upattributeid_, other->upattributeid_);
    useattr_.Swap(&other->useattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mountmount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mountmount_descriptor_;
  metadata.reflection = mountmount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_mountmount::kMountmountListFieldNumber;
#endif  // !_MSC_VER

Sheet_mountmount::Sheet_mountmount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_mountmount::InitAsDefaultInstance() {
}

Sheet_mountmount::Sheet_mountmount(const Sheet_mountmount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_mountmount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_mountmount::~Sheet_mountmount() {
  SharedDtor();
}

void Sheet_mountmount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_mountmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_mountmount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_mountmount_descriptor_;
}

const Sheet_mountmount& Sheet_mountmount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_mountmount* Sheet_mountmount::default_instance_ = NULL;

Sheet_mountmount* Sheet_mountmount::New() const {
  return new Sheet_mountmount;
}

void Sheet_mountmount::Clear() {
  mountmount_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_mountmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.mountmount mountmount_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mountmount_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mountmount_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mountmount_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_mountmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.mountmount mountmount_List = 1;
  for (int i = 0; i < this->mountmount_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mountmount_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_mountmount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.mountmount mountmount_List = 1;
  for (int i = 0; i < this->mountmount_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mountmount_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_mountmount::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.mountmount mountmount_List = 1;
  total_size += 1 * this->mountmount_list_size();
  for (int i = 0; i < this->mountmount_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mountmount_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_mountmount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_mountmount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_mountmount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_mountmount::MergeFrom(const Sheet_mountmount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mountmount_list_.MergeFrom(from.mountmount_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_mountmount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_mountmount::CopyFrom(const Sheet_mountmount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_mountmount::IsInitialized() const {

  return true;
}

void Sheet_mountmount::Swap(Sheet_mountmount* other) {
  if (other != this) {
    mountmount_list_.Swap(&other->mountmount_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_mountmount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_mountmount_descriptor_;
  metadata.reflection = Sheet_mountmount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mountstarUpupAttributeDesc::kTypeFieldNumber;
const int mountstarUpupAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

mountstarUpupAttributeDesc::mountstarUpupAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mountstarUpupAttributeDesc::InitAsDefaultInstance() {
}

mountstarUpupAttributeDesc::mountstarUpupAttributeDesc(const mountstarUpupAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mountstarUpupAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mountstarUpupAttributeDesc::~mountstarUpupAttributeDesc() {
  SharedDtor();
}

void mountstarUpupAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mountstarUpupAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mountstarUpupAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mountstarUpupAttributeDesc_descriptor_;
}

const mountstarUpupAttributeDesc& mountstarUpupAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

mountstarUpupAttributeDesc* mountstarUpupAttributeDesc::default_instance_ = NULL;

mountstarUpupAttributeDesc* mountstarUpupAttributeDesc::New() const {
  return new mountstarUpupAttributeDesc;
}

void mountstarUpupAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mountstarUpupAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mountstarUpupAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mountstarUpupAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mountstarUpupAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mountstarUpupAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mountstarUpupAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mountstarUpupAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mountstarUpupAttributeDesc::MergeFrom(const mountstarUpupAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mountstarUpupAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mountstarUpupAttributeDesc::CopyFrom(const mountstarUpupAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mountstarUpupAttributeDesc::IsInitialized() const {

  return true;
}

void mountstarUpupAttributeDesc::Swap(mountstarUpupAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mountstarUpupAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mountstarUpupAttributeDesc_descriptor_;
  metadata.reflection = mountstarUpupAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mountstarUp::kIDFieldNumber;
const int mountstarUp::kUpAttributeIdFieldNumber;
const int mountstarUp::kStarIDFieldNumber;
const int mountstarUp::kUpAttributeFieldNumber;
#endif  // !_MSC_VER

mountstarUp::mountstarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mountstarUp::InitAsDefaultInstance() {
}

mountstarUp::mountstarUp(const mountstarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mountstarUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  upattributeid_ = GOOGLE_LONGLONG(0);
  starid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mountstarUp::~mountstarUp() {
  SharedDtor();
}

void mountstarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mountstarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mountstarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mountstarUp_descriptor_;
}

const mountstarUp& mountstarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

mountstarUp* mountstarUp::default_instance_ = NULL;

mountstarUp* mountstarUp::New() const {
  return new mountstarUp;
}

void mountstarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    upattributeid_ = GOOGLE_LONGLONG(0);
    starid_ = 0;
  }
  upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mountstarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starID;
        break;
      }

      // optional int32 starID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upAttribute;
        break;
      }

      // repeated .proto_ff.mountstarUpupAttributeDesc upAttribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mountstarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->upattributeid(), output);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starid(), output);
  }

  // repeated .proto_ff.mountstarUpupAttributeDesc upAttribute = 4;
  for (int i = 0; i < this->upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mountstarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->upattributeid(), target);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starid(), target);
  }

  // repeated .proto_ff.mountstarUpupAttributeDesc upAttribute = 4;
  for (int i = 0; i < this->upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mountstarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 upAttributeId = 2;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

    // optional int32 starID = 3;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }

  }
  // repeated .proto_ff.mountstarUpupAttributeDesc upAttribute = 4;
  total_size += 1 * this->upattribute_size();
  for (int i = 0; i < this->upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mountstarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mountstarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mountstarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mountstarUp::MergeFrom(const mountstarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  upattribute_.MergeFrom(from.upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mountstarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mountstarUp::CopyFrom(const mountstarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mountstarUp::IsInitialized() const {

  return true;
}

void mountstarUp::Swap(mountstarUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upattributeid_, other->upattributeid_);
    std::swap(starid_, other->starid_);
    upattribute_.Swap(&other->upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mountstarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mountstarUp_descriptor_;
  metadata.reflection = mountstarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_mountstarUp::kMountstarUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_mountstarUp::Sheet_mountstarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_mountstarUp::InitAsDefaultInstance() {
}

Sheet_mountstarUp::Sheet_mountstarUp(const Sheet_mountstarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_mountstarUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_mountstarUp::~Sheet_mountstarUp() {
  SharedDtor();
}

void Sheet_mountstarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_mountstarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_mountstarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_mountstarUp_descriptor_;
}

const Sheet_mountstarUp& Sheet_mountstarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_mountstarUp* Sheet_mountstarUp::default_instance_ = NULL;

Sheet_mountstarUp* Sheet_mountstarUp::New() const {
  return new Sheet_mountstarUp;
}

void Sheet_mountstarUp::Clear() {
  mountstarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_mountstarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.mountstarUp mountstarUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mountstarUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mountstarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mountstarUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_mountstarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.mountstarUp mountstarUp_List = 1;
  for (int i = 0; i < this->mountstarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mountstarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_mountstarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.mountstarUp mountstarUp_List = 1;
  for (int i = 0; i < this->mountstarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mountstarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_mountstarUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.mountstarUp mountstarUp_List = 1;
  total_size += 1 * this->mountstarup_list_size();
  for (int i = 0; i < this->mountstarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mountstarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_mountstarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_mountstarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_mountstarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_mountstarUp::MergeFrom(const Sheet_mountstarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mountstarup_list_.MergeFrom(from.mountstarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_mountstarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_mountstarUp::CopyFrom(const Sheet_mountstarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_mountstarUp::IsInitialized() const {

  return true;
}

void Sheet_mountstarUp::Swap(Sheet_mountstarUp* other) {
  if (other != this) {
    mountstarup_list_.Swap(&other->mountstarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_mountstarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_mountstarUp_descriptor_;
  metadata.reflection = Sheet_mountstarUp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
