// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mount.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mount.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_MountFragmentAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountFragmentAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountValueAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountValueAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountDisplayMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountDisplayMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountUnlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountUnlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountUnlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountUnlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountChangeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountChangeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountChangeMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountChangeMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountAdvanceUpattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountAdvanceUpattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountHuakunMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountHuakunMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountHuakun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountHuakun_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountHuakun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountHuakun_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountHuakun_advancevalueItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountHuakun_advancevalueItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountHuakun_advancevalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountHuakun_advancevalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountHuakun_advancevalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountHuakun_advancevalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountBloodAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountBloodAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountBlood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountBlood_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountBlood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountBlood_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_MountBaby_egg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_MountBaby_egg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MountBaby_egg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MountBaby_egg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mount_2eproto() {
  protobuf_AddDesc_mount_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mount.proto");
  GOOGLE_CHECK(file != NULL);
  E_MountFragmentAttributeDesc_descriptor_ = file->message_type(0);
  static const int E_MountFragmentAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragmentAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragmentAttributeDesc, m_value_),
  };
  E_MountFragmentAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountFragmentAttributeDesc_descriptor_,
      E_MountFragmentAttributeDesc::default_instance_,
      E_MountFragmentAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragmentAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragmentAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountFragmentAttributeDesc));
  E_MountFragment_descriptor_ = file->message_type(1);
  static const int E_MountFragment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragment, m_fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragment, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragment, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragment, m_attribute_),
  };
  E_MountFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountFragment_descriptor_,
      E_MountFragment::default_instance_,
      E_MountFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountFragment));
  Sheet_MountFragment_descriptor_ = file->message_type(2);
  static const int Sheet_MountFragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountFragment, e_mountfragment_list_),
  };
  Sheet_MountFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountFragment_descriptor_,
      Sheet_MountFragment::default_instance_,
      Sheet_MountFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountFragment));
  E_MountValueAttributeDesc_descriptor_ = file->message_type(3);
  static const int E_MountValueAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValueAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValueAttributeDesc, m_value_),
  };
  E_MountValueAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountValueAttributeDesc_descriptor_,
      E_MountValueAttributeDesc::default_instance_,
      E_MountValueAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValueAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValueAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountValueAttributeDesc));
  E_MountValue_descriptor_ = file->message_type(4);
  static const int E_MountValue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValue, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValue, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValue, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValue, m_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValue, m_attribute_),
  };
  E_MountValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountValue_descriptor_,
      E_MountValue::default_instance_,
      E_MountValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountValue));
  Sheet_MountValue_descriptor_ = file->message_type(5);
  static const int Sheet_MountValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountValue, e_mountvalue_list_),
  };
  Sheet_MountValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountValue_descriptor_,
      Sheet_MountValue::default_instance_,
      Sheet_MountValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountValue));
  E_MountDisplayMaterialDesc_descriptor_ = file->message_type(6);
  static const int E_MountDisplayMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplayMaterialDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplayMaterialDesc, m_exp_),
  };
  E_MountDisplayMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountDisplayMaterialDesc_descriptor_,
      E_MountDisplayMaterialDesc::default_instance_,
      E_MountDisplayMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplayMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplayMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountDisplayMaterialDesc));
  E_MountDisplay_descriptor_ = file->message_type(7);
  static const int E_MountDisplay_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_uplvtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_fxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_lvmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, m_fragmentid_),
  };
  E_MountDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountDisplay_descriptor_,
      E_MountDisplay::default_instance_,
      E_MountDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountDisplay));
  Sheet_MountDisplay_descriptor_ = file->message_type(8);
  static const int Sheet_MountDisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountDisplay, e_mountdisplay_list_),
  };
  Sheet_MountDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountDisplay_descriptor_,
      Sheet_MountDisplay::default_instance_,
      Sheet_MountDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountDisplay));
  E_MountUnlock_descriptor_ = file->message_type(9);
  static const int E_MountUnlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountUnlock, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountUnlock, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountUnlock, m_modelid_),
  };
  E_MountUnlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountUnlock_descriptor_,
      E_MountUnlock::default_instance_,
      E_MountUnlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountUnlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountUnlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountUnlock));
  Sheet_MountUnlock_descriptor_ = file->message_type(10);
  static const int Sheet_MountUnlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountUnlock, e_mountunlock_list_),
  };
  Sheet_MountUnlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountUnlock_descriptor_,
      Sheet_MountUnlock::default_instance_,
      Sheet_MountUnlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountUnlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountUnlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountUnlock));
  E_MountChangeAttributeDesc_descriptor_ = file->message_type(11);
  static const int E_MountChangeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChangeAttributeDesc, m_upvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChangeAttributeDesc, m_upber_),
  };
  E_MountChangeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountChangeAttributeDesc_descriptor_,
      E_MountChangeAttributeDesc::default_instance_,
      E_MountChangeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChangeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChangeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountChangeAttributeDesc));
  E_MountChangeMaterialDesc_descriptor_ = file->message_type(12);
  static const int E_MountChangeMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChangeMaterialDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChangeMaterialDesc, m_exp_),
  };
  E_MountChangeMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountChangeMaterialDesc_descriptor_,
      E_MountChangeMaterialDesc::default_instance_,
      E_MountChangeMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChangeMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChangeMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountChangeMaterialDesc));
  E_MountChange_descriptor_ = file->message_type(13);
  static const int E_MountChange_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_uplvtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_activeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_fxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_starmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_lvmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, m_material_),
  };
  E_MountChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountChange_descriptor_,
      E_MountChange::default_instance_,
      E_MountChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountChange));
  Sheet_MountChange_descriptor_ = file->message_type(14);
  static const int Sheet_MountChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountChange, e_mountchange_list_),
  };
  Sheet_MountChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountChange_descriptor_,
      Sheet_MountChange::default_instance_,
      Sheet_MountChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountChange));
  E_MountAdvanceUpattributeDesc_descriptor_ = file->message_type(15);
  static const int E_MountAdvanceUpattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvanceUpattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvanceUpattributeDesc, m_value_),
  };
  E_MountAdvanceUpattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountAdvanceUpattributeDesc_descriptor_,
      E_MountAdvanceUpattributeDesc::default_instance_,
      E_MountAdvanceUpattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvanceUpattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvanceUpattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountAdvanceUpattributeDesc));
  E_MountAdvance_descriptor_ = file->message_type(16);
  static const int E_MountAdvance_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvance, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvance, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvance, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvance, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvance, m_upattribute_),
  };
  E_MountAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountAdvance_descriptor_,
      E_MountAdvance::default_instance_,
      E_MountAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountAdvance));
  Sheet_MountAdvance_descriptor_ = file->message_type(17);
  static const int Sheet_MountAdvance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountAdvance, e_mountadvance_list_),
  };
  Sheet_MountAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountAdvance_descriptor_,
      Sheet_MountAdvance::default_instance_,
      Sheet_MountAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountAdvance));
  E_MountHuakunMaterialDesc_descriptor_ = file->message_type(18);
  static const int E_MountHuakunMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakunMaterialDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakunMaterialDesc, m_exp_),
  };
  E_MountHuakunMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountHuakunMaterialDesc_descriptor_,
      E_MountHuakunMaterialDesc::default_instance_,
      E_MountHuakunMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakunMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakunMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountHuakunMaterialDesc));
  E_MountHuakun_descriptor_ = file->message_type(19);
  static const int E_MountHuakun_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_uplvtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_advancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_starmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_upstarnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_starnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_upstarbertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_activateitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_activateitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_skill_lg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_skill_bd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, m_upstaritem_),
  };
  E_MountHuakun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountHuakun_descriptor_,
      E_MountHuakun::default_instance_,
      E_MountHuakun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountHuakun));
  Sheet_MountHuakun_descriptor_ = file->message_type(20);
  static const int Sheet_MountHuakun_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountHuakun, e_mounthuakun_list_),
  };
  Sheet_MountHuakun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountHuakun_descriptor_,
      Sheet_MountHuakun::default_instance_,
      Sheet_MountHuakun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountHuakun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountHuakun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountHuakun));
  E_MountHuakun_advancevalueItemDesc_descriptor_ = file->message_type(21);
  static const int E_MountHuakun_advancevalueItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalueItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalueItemDesc, m_id_),
  };
  E_MountHuakun_advancevalueItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountHuakun_advancevalueItemDesc_descriptor_,
      E_MountHuakun_advancevalueItemDesc::default_instance_,
      E_MountHuakun_advancevalueItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalueItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalueItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountHuakun_advancevalueItemDesc));
  E_MountHuakun_advancevalue_descriptor_ = file->message_type(22);
  static const int E_MountHuakun_advancevalue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalue, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalue, m_lvtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalue, m_advancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalue, m_winprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalue, m_item_),
  };
  E_MountHuakun_advancevalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountHuakun_advancevalue_descriptor_,
      E_MountHuakun_advancevalue::default_instance_,
      E_MountHuakun_advancevalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountHuakun_advancevalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountHuakun_advancevalue));
  Sheet_MountHuakun_advancevalue_descriptor_ = file->message_type(23);
  static const int Sheet_MountHuakun_advancevalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountHuakun_advancevalue, e_mounthuakun_advancevalue_list_),
  };
  Sheet_MountHuakun_advancevalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountHuakun_advancevalue_descriptor_,
      Sheet_MountHuakun_advancevalue::default_instance_,
      Sheet_MountHuakun_advancevalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountHuakun_advancevalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountHuakun_advancevalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountHuakun_advancevalue));
  E_MountBloodAttributeDesc_descriptor_ = file->message_type(24);
  static const int E_MountBloodAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBloodAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBloodAttributeDesc, m_value_),
  };
  E_MountBloodAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountBloodAttributeDesc_descriptor_,
      E_MountBloodAttributeDesc::default_instance_,
      E_MountBloodAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBloodAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBloodAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountBloodAttributeDesc));
  E_MountBlood_descriptor_ = file->message_type(25);
  static const int E_MountBlood_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBlood, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBlood, m_attribute_),
  };
  E_MountBlood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountBlood_descriptor_,
      E_MountBlood::default_instance_,
      E_MountBlood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBlood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBlood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountBlood));
  Sheet_MountBlood_descriptor_ = file->message_type(26);
  static const int Sheet_MountBlood_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountBlood, e_mountblood_list_),
  };
  Sheet_MountBlood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountBlood_descriptor_,
      Sheet_MountBlood::default_instance_,
      Sheet_MountBlood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountBlood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountBlood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountBlood));
  E_MountBaby_egg_descriptor_ = file->message_type(27);
  static const int E_MountBaby_egg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBaby_egg, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBaby_egg, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBaby_egg, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBaby_egg, m_itembox_),
  };
  E_MountBaby_egg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_MountBaby_egg_descriptor_,
      E_MountBaby_egg::default_instance_,
      E_MountBaby_egg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBaby_egg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_MountBaby_egg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_MountBaby_egg));
  Sheet_MountBaby_egg_descriptor_ = file->message_type(28);
  static const int Sheet_MountBaby_egg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountBaby_egg, e_mountbaby_egg_list_),
  };
  Sheet_MountBaby_egg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MountBaby_egg_descriptor_,
      Sheet_MountBaby_egg::default_instance_,
      Sheet_MountBaby_egg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountBaby_egg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MountBaby_egg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MountBaby_egg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mount_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountFragmentAttributeDesc_descriptor_, &E_MountFragmentAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountFragment_descriptor_, &E_MountFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountFragment_descriptor_, &Sheet_MountFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountValueAttributeDesc_descriptor_, &E_MountValueAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountValue_descriptor_, &E_MountValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountValue_descriptor_, &Sheet_MountValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountDisplayMaterialDesc_descriptor_, &E_MountDisplayMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountDisplay_descriptor_, &E_MountDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountDisplay_descriptor_, &Sheet_MountDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountUnlock_descriptor_, &E_MountUnlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountUnlock_descriptor_, &Sheet_MountUnlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountChangeAttributeDesc_descriptor_, &E_MountChangeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountChangeMaterialDesc_descriptor_, &E_MountChangeMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountChange_descriptor_, &E_MountChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountChange_descriptor_, &Sheet_MountChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountAdvanceUpattributeDesc_descriptor_, &E_MountAdvanceUpattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountAdvance_descriptor_, &E_MountAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountAdvance_descriptor_, &Sheet_MountAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountHuakunMaterialDesc_descriptor_, &E_MountHuakunMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountHuakun_descriptor_, &E_MountHuakun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountHuakun_descriptor_, &Sheet_MountHuakun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountHuakun_advancevalueItemDesc_descriptor_, &E_MountHuakun_advancevalueItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountHuakun_advancevalue_descriptor_, &E_MountHuakun_advancevalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountHuakun_advancevalue_descriptor_, &Sheet_MountHuakun_advancevalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountBloodAttributeDesc_descriptor_, &E_MountBloodAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountBlood_descriptor_, &E_MountBlood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountBlood_descriptor_, &Sheet_MountBlood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_MountBaby_egg_descriptor_, &E_MountBaby_egg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MountBaby_egg_descriptor_, &Sheet_MountBaby_egg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mount_2eproto() {
  delete E_MountFragmentAttributeDesc::default_instance_;
  delete E_MountFragmentAttributeDesc_reflection_;
  delete E_MountFragment::default_instance_;
  delete E_MountFragment_reflection_;
  delete Sheet_MountFragment::default_instance_;
  delete Sheet_MountFragment_reflection_;
  delete E_MountValueAttributeDesc::default_instance_;
  delete E_MountValueAttributeDesc_reflection_;
  delete E_MountValue::default_instance_;
  delete E_MountValue_reflection_;
  delete Sheet_MountValue::default_instance_;
  delete Sheet_MountValue_reflection_;
  delete E_MountDisplayMaterialDesc::default_instance_;
  delete E_MountDisplayMaterialDesc_reflection_;
  delete E_MountDisplay::default_instance_;
  delete E_MountDisplay_reflection_;
  delete Sheet_MountDisplay::default_instance_;
  delete Sheet_MountDisplay_reflection_;
  delete E_MountUnlock::default_instance_;
  delete E_MountUnlock_reflection_;
  delete Sheet_MountUnlock::default_instance_;
  delete Sheet_MountUnlock_reflection_;
  delete E_MountChangeAttributeDesc::default_instance_;
  delete E_MountChangeAttributeDesc_reflection_;
  delete E_MountChangeMaterialDesc::default_instance_;
  delete E_MountChangeMaterialDesc_reflection_;
  delete E_MountChange::default_instance_;
  delete E_MountChange_reflection_;
  delete Sheet_MountChange::default_instance_;
  delete Sheet_MountChange_reflection_;
  delete E_MountAdvanceUpattributeDesc::default_instance_;
  delete E_MountAdvanceUpattributeDesc_reflection_;
  delete E_MountAdvance::default_instance_;
  delete E_MountAdvance_reflection_;
  delete Sheet_MountAdvance::default_instance_;
  delete Sheet_MountAdvance_reflection_;
  delete E_MountHuakunMaterialDesc::default_instance_;
  delete E_MountHuakunMaterialDesc_reflection_;
  delete E_MountHuakun::default_instance_;
  delete E_MountHuakun_reflection_;
  delete Sheet_MountHuakun::default_instance_;
  delete Sheet_MountHuakun_reflection_;
  delete E_MountHuakun_advancevalueItemDesc::default_instance_;
  delete E_MountHuakun_advancevalueItemDesc_reflection_;
  delete E_MountHuakun_advancevalue::default_instance_;
  delete E_MountHuakun_advancevalue_reflection_;
  delete Sheet_MountHuakun_advancevalue::default_instance_;
  delete Sheet_MountHuakun_advancevalue_reflection_;
  delete E_MountBloodAttributeDesc::default_instance_;
  delete E_MountBloodAttributeDesc_reflection_;
  delete E_MountBlood::default_instance_;
  delete E_MountBlood_reflection_;
  delete Sheet_MountBlood::default_instance_;
  delete Sheet_MountBlood_reflection_;
  delete E_MountBaby_egg::default_instance_;
  delete E_MountBaby_egg_reflection_;
  delete Sheet_MountBaby_egg::default_instance_;
  delete Sheet_MountBaby_egg_reflection_;
}

void protobuf_AddDesc_mount_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013mount.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"P\n\034E_MountFragmentAttributeDesc\022\026"
    "\n\006m_type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B"
    "\007\302\377\024\003\345\200\274\"\321\001\n\017E_MountFragment\022\"\n\014m_fragme"
    "ntid\030\001 \001(\003B\014\302\377\024\010\347\242\216\347\211\207ID\022\034\n\006m_item\030\002 \001(\003"
    "B\014\302\377\024\010\347\211\251\345\223\201ID\022)\n\tm_itemnum\030\003 \001(\005B\026\302\377\024\022\347"
    "\242\216\347\211\207\344\275\277\347\224\250\344\270\212\351\231\220\022Q\n\013m_attribute\030\004 \003(\0132&"
    ".proto_ff.E_MountFragmentAttributeDescB\024"
    "\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\005\"T\n\023Sheet_MountFragm"
    "ent\022=\n\024E_MountFragment_List\030\001 \003(\0132\031.prot"
    "o_ff.E_MountFragmentB\004\210\301\024\024\"K\n\031E_MountVal"
    "ueAttributeDesc\022\024\n\006m_type\030\001 \001(\005B\004\302\377\024\000\022\030\n"
    "\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\367\001\n\014E_MountValue"
    "\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006m_type\030\002 \001(\005B\n"
    "\302\377\024\006\347\261\273\345\236\213\022\030\n\004m_lv\030\003 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022%\n\005"
    "m_exp\030\004 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\351\234\200\350\246\201\347\273\217\351\252\214\022*\n\007m"
    "_speed\030\005 \001(\005B\031\302\377\024\025\351\273\230\350\256\244\344\271\230\351\252\221\351\200\237\345\272\246\345\200\274\022"
    "H\n\013m_attribute\030\006 \003(\0132#.proto_ff.E_MountV"
    "alueAttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\t\"L\n\020She"
    "et_MountValue\0228\n\021E_MountValue_List\030\001 \003(\013"
    "2\026.proto_ff.E_MountValueB\005\210\301\024\254\002\"P\n\032E_Mou"
    "ntDisplayMaterialDesc\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002ID\022\034\n\005m_exp\030\002 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\"\225\003\n\016E_"
    "MountDisplay\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022*\n\007m_"
    "speed\030\002 \001(\005B\031\302\377\024\025\351\273\230\350\256\244\344\271\230\351\252\221\351\200\237\345\272\246\345\200\274\022*"
    "\n\nm_uplvtype\030\003 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\345\217\202\350\200\203\347\261\273\345"
    "\236\213\022*\n\tm_skillid\030\004 \001(\tB\027\302\377\024\017\350\247\243\351\224\201\346\212\200\350\203\275\347"
    "\273\204\220\301\024<\022$\n\006m_fxid\030\005 \001(\tB\024\302\377\024\014\345\271\273\345\214\226\347\211\271\346\225\210"
    "\220\301\024<\022\"\n\010m_starup\030\006 \001(\005B\020\302\377\024\014\346\230\237\346\230\237\344\270\212\351\231\220"
    "\022!\n\007m_lvmax\030\007 \001(\005B\020\302\377\024\014\347\255\211\347\272\247\344\270\212\351\231\220\022N\n\nm"
    "_material\030\010 \003(\0132$.proto_ff.E_MountDispla"
    "yMaterialDescB\024\302\377\024\014\345\215\207\347\272\247\346\235\220\346\226\231\210\301\024\002\022,\n\014m"
    "_fragmentid\030\t \003(\003B\026\302\377\024\016\345\205\263\350\201\224\347\242\216\347\211\207ID\210\301\024"
    "\003\"Q\n\022Sheet_MountDisplay\022;\n\023E_MountDispla"
    "y_List\030\001 \003(\0132\030.proto_ff.E_MountDisplayB\004"
    "\210\301\024\024\"`\n\rE_MountUnlock\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002id\022\030\n\004m_lv\030\002 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\037\n\tm_model"
    "id\030\003 \001(\005B\014\302\377\024\010\346\250\241\345\236\213id\"N\n\021Sheet_MountUnl"
    "ock\0229\n\022E_MountUnlock_List\030\001 \003(\0132\027.proto_"
    "ff.E_MountUnlockB\004\210\301\024\024\"O\n\032E_MountChangeA"
    "ttributeDesc\022\032\n\tm_upvalue\030\001 \001(\005B\007\302\377\024\003\345\200\274"
    "\022\025\n\007m_upber\030\002 \001(\005B\004\302\377\024\000\"O\n\031E_MountChange"
    "MaterialDesc\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002ID\022\034\n\005m_"
    "exp\030\002 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\"\260\006\n\rE_MountChan"
    "ge\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022*\n\007m_speed\030\002 \001("
    "\005B\031\302\377\024\025\351\273\230\350\256\244\344\271\230\351\252\221\351\200\237\345\272\246\345\200\274\022*\n\nm_uplvty"
    "pe\030\003 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\345\217\202\350\200\203\347\261\273\345\236\213\022-\n\rm_ac"
    "tiveskill\030\004 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\350\216\267\345\276\227\346\212\200\350\203\275\022"
    "*\n\tm_skillid\030\005 \001(\tB\027\302\377\024\017\350\247\243\351\224\201\346\212\200\350\203\275\347\273\204\220"
    "\301\024<\022$\n\006m_fxid\030\006 \001(\tB\024\302\377\024\014\345\271\273\345\214\226\347\211\271\346\225\210\220\301\024"
    "<\022#\n\tm_starmax\030\007 \001(\005B\020\302\377\024\014\346\230\237\346\230\237\344\270\212\351\231\220\022!"
    "\n\007m_lvmax\030\010 \001(\005B\020\302\377\024\014\347\255\211\347\272\247\344\270\212\351\231\220\022\037\n\tm_m"
    "odelid\030\t \001(\005B\014\302\377\024\010\346\250\241\345\236\213id\0223\n\020m_activati"
    "onitem\030\n \001(\005B\031\302\377\024\025\346\277\200\346\264\273\351\234\200\350\246\201\347\232\204\351\201\223\345\205\267\022"
    "8\n\017m_activationnum\030\013 \001(\005B\037\302\377\024\033\346\277\200\346\264\273\351\234\200\350"
    "\246\201\347\232\204\351\201\223\345\205\267\346\225\260\351\207\217\022*\n\010m_starid\030\014 \001(\005B\030\302\377\024"
    "\024\345\215\207\346\230\237\351\234\200\350\246\201\351\201\223\345\205\267ID\022-\n\tm_starnum\030\r \001(\t"
    "B\032\302\377\024\022\345\215\207\346\230\237\351\234\200\350\246\201\346\225\260\351\207\217\220\301\024<\022/\n\tm_starbe"
    "r\030\016 \001(\005B\034\302\377\024\030\346\257\217\346\230\237\347\272\247\346\217\220\345\215\207\347\231\276\345\210\206\346\257\224\022)\n"
    "\017m_upattributeid\030\017 \001(\005B\020\302\377\024\014\350\277\233\351\230\266\347\261\273\345\236\213"
    "\022R\n\013m_attribute\030\020 \003(\0132$.proto_ff.E_Mount"
    "ChangeAttributeDescB\027\302\377\024\017\347\231\276\345\210\206\346\257\224\345\261\236\346\200\247"
    "\210\301\024\004\022M\n\nm_material\030\021 \003(\0132#.proto_ff.E_Mo"
    "untChangeMaterialDescB\024\302\377\024\014\345\215\207\347\272\247\346\235\220\346\226\231\210"
    "\301\024\002\"N\n\021Sheet_MountChange\0229\n\022E_MountChang"
    "e_List\030\001 \003(\0132\027.proto_ff.E_MountChangeB\004\210"
    "\301\024\024\"Q\n\035E_MountAdvanceUpattributeDesc\022\026\n\006"
    "m_type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302"
    "\377\024\003\345\200\274\"\210\002\n\016E_MountAdvance\022\024\n\004m_id\030\001 \001(\005B"
    "\006\302\377\024\002id\022)\n\017m_upattributeid\030\002 \001(\005B\020\302\377\024\014\350\277"
    "\233\351\230\266\347\261\273\345\236\213\0224\n\010m_starid\030\003 \001(\005B\"\302\377\024\036\350\277\233\351\230\266"
    "\344\270\223\345\261\236\351\234\200\346\261\202\346\230\237\346\230\237\346\225\260\351\207\217\022)\n\tm_skillid\030\004 "
    "\001(\005B\026\302\377\024\022\350\277\233\351\230\266\344\270\223\345\261\236\346\212\200\350\203\275\022T\n\rm_upattri"
    "bute\030\005 \003(\0132\'.proto_ff.E_MountAdvanceUpat"
    "tributeDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\005\"Q\n\022She"
    "et_MountAdvance\022;\n\023E_MountAdvance_List\030\001"
    " \003(\0132\030.proto_ff.E_MountAdvanceB\004\210\301\024\024\"O\n\031"
    "E_MountHuakunMaterialDesc\022\024\n\004m_id\030\001 \001(\005B"
    "\006\302\377\024\002ID\022\034\n\005m_exp\030\002 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\"\351\005"
    "\n\rE_MountHuakun\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\035\n"
    "\tm_modelid\030\002 \001(\005B\n\302\377\024\006\346\250\241\345\236\213\022#\n\tm_qualit"
    "y\030\003 \001(\005B\020\302\377\024\014\345\235\220\351\252\221\345\223\201\350\264\250\022*\n\007m_speed\030\004 \001"
    "(\005B\031\302\377\024\025\351\273\230\350\256\244\344\271\230\351\252\221\351\200\237\345\272\246\345\200\274\022*\n\nm_uplvt"
    "ype\030\005 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\345\217\202\350\200\203\347\261\273\345\236\213\022\'\n\rm_a"
    "dvancetype\030\006 \001(\005B\020\302\377\024\014\350\277\233\351\230\266\347\261\273\345\236\213\022#\n\tm_"
    "starmax\030\007 \001(\005B\020\302\377\024\014\346\230\237\346\230\237\344\270\212\351\231\220\0225\n\013m_ups"
    "tarnum\030\010 \001(\tB \302\377\024\030\345\215\207\346\230\237\346\200\273\345\205\261\351\234\200\350\246\201\346\225\260\351"
    "\207\217\220\301\024<\0222\n\014m_starnumber\030\t \001(\005B\034\302\377\024\030\346\257\217\346\230\237"
    "\347\272\247\346\217\220\345\215\207\347\231\276\345\210\206\346\257\224\0229\n\017m_upstarbertype\030\n "
    "\001(\tB \302\377\024\030\345\215\207\346\230\237\345\275\261\345\223\215\345\261\236\346\200\247\347\261\273\345\236\213\220\301\024<\022(\n"
    "\016m_activateitem\030\013 \001(\005B\020\302\377\024\014\346\277\200\346\264\273\346\235\220\346\226\231\022"
    "7\n\021m_activateitemnum\030\014 \001(\005B\034\302\377\024\030\346\277\200\346\264\273\346\235"
    "\220\346\226\231\351\234\200\350\246\201\346\225\260\351\207\217\022(\n\nm_skill_lg\030\r \001(\tB\024\302\377"
    "\024\014\347\201\265\346\240\271\346\212\200\350\203\275\220\301\024<\022\"\n\nm_skill_bd\030\016 \001(\tB\016"
    "\302\377\024\006\350\242\253\345\212\250\220\301\024<\022M\n\nm_material\030\017 \003(\0132#.pro"
    "to_ff.E_MountHuakunMaterialDescB\024\302\377\024\014\345\215\207"
    "\347\272\247\346\235\220\346\226\231\210\301\024\003\0222\n\014m_upstaritem\030\020 \003(\005B\034\302\377\024"
    "\024\345\215\207\346\230\237\351\234\200\350\246\201\351\201\223\345\205\267ID\210\301\024\002\"N\n\021Sheet_Mount"
    "Huakun\0229\n\022E_MountHuakun_List\030\001 \003(\0132\027.pro"
    "to_ff.E_MountHuakunB\004\210\301\024\024\"S\n\"E_MountHuak"
    "un_advancevalueItemDesc\022\031\n\005m_num\030\001 \001(\005B\n"
    "\302\377\024\006\346\225\260\351\207\217\022\022\n\004m_id\030\002 \001(\005B\004\302\377\024\000\"\230\002\n\032E_Mou"
    "ntHuakun_advancevalue\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002id\022\030\n\004m_lv\030\002 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\"\n\010m_lvtyp"
    "e\030\003 \001(\005B\020\302\377\024\014\347\255\211\347\272\247\347\261\273\345\236\213\022\'\n\rm_advancety"
    "pe\030\004 \001(\005B\020\302\377\024\014\350\277\233\351\230\266\347\261\273\345\236\213\022)\n\tm_winprob\030"
    "\005 \001(\005B\026\302\377\024\022\350\277\233\351\230\266\346\210\220\345\212\237\346\246\202\347\216\207\022R\n\006m_item\030"
    "\006 \003(\0132,.proto_ff.E_MountHuakun_advanceva"
    "lueItemDescB\024\302\377\024\014\351\234\200\346\261\202\351\201\223\345\205\267\210\301\024\003\"u\n\036She"
    "et_MountHuakun_advancevalue\022S\n\037E_MountHu"
    "akun_advancevalue_List\030\001 \003(\0132$.proto_ff."
    "E_MountHuakun_advancevalueB\004\210\301\024\024\"N\n\031E_Mo"
    "untBloodAttributeDesc\022\024\n\006m_type\030\001 \001(\005B\004\302"
    "\377\024\000\022\033\n\007m_value\030\002 \001(\005B\n\302\377\024\006\346\225\260\345\200\274\"y\n\014E_Mo"
    "untBlood\022\037\n\005m_num\030\001 \001(\005B\020\302\377\024\014\350\241\200\350\204\211\346\225\260\351\207"
    "\217\022H\n\013m_attribute\030\002 \003(\0132#.proto_ff.E_Moun"
    "tBloodAttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\002\"L\n\020S"
    "heet_MountBlood\0228\n\021E_MountBlood_List\030\001 \003"
    "(\0132\026.proto_ff.E_MountBloodB\005\210\301\024\254\002\"\227\001\n\017E_"
    "MountBaby_egg\022\035\n\004m_id\030\001 \001(\005B\017\302\377\024\013\350\233\213\351\201\223\345"
    "\205\267id\022\034\n\006m_item\030\002 \001(\005B\014\302\377\024\010\351\201\223\345\205\267id\022#\n\006m_"
    "time\030\003 \001(\005B\023\302\377\024\017\350\233\213\347\224\237\346\210\220\346\227\266\351\227\264\022\"\n\tm_ite"
    "mbox\030\004 \001(\005B\017\302\377\024\013\345\245\226\345\212\261\347\233\222id\"T\n\023Sheet_Mou"
    "ntBaby_egg\022=\n\024E_MountBaby_egg_List\030\001 \003(\013"
    "2\031.proto_ff.E_MountBaby_eggB\004\210\301\024\024", 4993);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mount.proto", &protobuf_RegisterTypes);
  E_MountFragmentAttributeDesc::default_instance_ = new E_MountFragmentAttributeDesc();
  E_MountFragment::default_instance_ = new E_MountFragment();
  Sheet_MountFragment::default_instance_ = new Sheet_MountFragment();
  E_MountValueAttributeDesc::default_instance_ = new E_MountValueAttributeDesc();
  E_MountValue::default_instance_ = new E_MountValue();
  Sheet_MountValue::default_instance_ = new Sheet_MountValue();
  E_MountDisplayMaterialDesc::default_instance_ = new E_MountDisplayMaterialDesc();
  E_MountDisplay::default_instance_ = new E_MountDisplay();
  Sheet_MountDisplay::default_instance_ = new Sheet_MountDisplay();
  E_MountUnlock::default_instance_ = new E_MountUnlock();
  Sheet_MountUnlock::default_instance_ = new Sheet_MountUnlock();
  E_MountChangeAttributeDesc::default_instance_ = new E_MountChangeAttributeDesc();
  E_MountChangeMaterialDesc::default_instance_ = new E_MountChangeMaterialDesc();
  E_MountChange::default_instance_ = new E_MountChange();
  Sheet_MountChange::default_instance_ = new Sheet_MountChange();
  E_MountAdvanceUpattributeDesc::default_instance_ = new E_MountAdvanceUpattributeDesc();
  E_MountAdvance::default_instance_ = new E_MountAdvance();
  Sheet_MountAdvance::default_instance_ = new Sheet_MountAdvance();
  E_MountHuakunMaterialDesc::default_instance_ = new E_MountHuakunMaterialDesc();
  E_MountHuakun::default_instance_ = new E_MountHuakun();
  Sheet_MountHuakun::default_instance_ = new Sheet_MountHuakun();
  E_MountHuakun_advancevalueItemDesc::default_instance_ = new E_MountHuakun_advancevalueItemDesc();
  E_MountHuakun_advancevalue::default_instance_ = new E_MountHuakun_advancevalue();
  Sheet_MountHuakun_advancevalue::default_instance_ = new Sheet_MountHuakun_advancevalue();
  E_MountBloodAttributeDesc::default_instance_ = new E_MountBloodAttributeDesc();
  E_MountBlood::default_instance_ = new E_MountBlood();
  Sheet_MountBlood::default_instance_ = new Sheet_MountBlood();
  E_MountBaby_egg::default_instance_ = new E_MountBaby_egg();
  Sheet_MountBaby_egg::default_instance_ = new Sheet_MountBaby_egg();
  E_MountFragmentAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_MountFragment::default_instance_->InitAsDefaultInstance();
  Sheet_MountFragment::default_instance_->InitAsDefaultInstance();
  E_MountValueAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_MountValue::default_instance_->InitAsDefaultInstance();
  Sheet_MountValue::default_instance_->InitAsDefaultInstance();
  E_MountDisplayMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_MountDisplay::default_instance_->InitAsDefaultInstance();
  Sheet_MountDisplay::default_instance_->InitAsDefaultInstance();
  E_MountUnlock::default_instance_->InitAsDefaultInstance();
  Sheet_MountUnlock::default_instance_->InitAsDefaultInstance();
  E_MountChangeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_MountChangeMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_MountChange::default_instance_->InitAsDefaultInstance();
  Sheet_MountChange::default_instance_->InitAsDefaultInstance();
  E_MountAdvanceUpattributeDesc::default_instance_->InitAsDefaultInstance();
  E_MountAdvance::default_instance_->InitAsDefaultInstance();
  Sheet_MountAdvance::default_instance_->InitAsDefaultInstance();
  E_MountHuakunMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_MountHuakun::default_instance_->InitAsDefaultInstance();
  Sheet_MountHuakun::default_instance_->InitAsDefaultInstance();
  E_MountHuakun_advancevalueItemDesc::default_instance_->InitAsDefaultInstance();
  E_MountHuakun_advancevalue::default_instance_->InitAsDefaultInstance();
  Sheet_MountHuakun_advancevalue::default_instance_->InitAsDefaultInstance();
  E_MountBloodAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_MountBlood::default_instance_->InitAsDefaultInstance();
  Sheet_MountBlood::default_instance_->InitAsDefaultInstance();
  E_MountBaby_egg::default_instance_->InitAsDefaultInstance();
  Sheet_MountBaby_egg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mount_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mount_2eproto {
  StaticDescriptorInitializer_mount_2eproto() {
    protobuf_AddDesc_mount_2eproto();
  }
} static_descriptor_initializer_mount_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_MountFragmentAttributeDesc::kMTypeFieldNumber;
const int E_MountFragmentAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_MountFragmentAttributeDesc::E_MountFragmentAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountFragmentAttributeDesc::InitAsDefaultInstance() {
}

E_MountFragmentAttributeDesc::E_MountFragmentAttributeDesc(const E_MountFragmentAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountFragmentAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountFragmentAttributeDesc::~E_MountFragmentAttributeDesc() {
  SharedDtor();
}

void E_MountFragmentAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountFragmentAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountFragmentAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountFragmentAttributeDesc_descriptor_;
}

const E_MountFragmentAttributeDesc& E_MountFragmentAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountFragmentAttributeDesc* E_MountFragmentAttributeDesc::default_instance_ = NULL;

E_MountFragmentAttributeDesc* E_MountFragmentAttributeDesc::New() const {
  return new E_MountFragmentAttributeDesc;
}

void E_MountFragmentAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountFragmentAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountFragmentAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountFragmentAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountFragmentAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountFragmentAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountFragmentAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountFragmentAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountFragmentAttributeDesc::MergeFrom(const E_MountFragmentAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountFragmentAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountFragmentAttributeDesc::CopyFrom(const E_MountFragmentAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountFragmentAttributeDesc::IsInitialized() const {

  return true;
}

void E_MountFragmentAttributeDesc::Swap(E_MountFragmentAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountFragmentAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountFragmentAttributeDesc_descriptor_;
  metadata.reflection = E_MountFragmentAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountFragment::kMFragmentidFieldNumber;
const int E_MountFragment::kMItemFieldNumber;
const int E_MountFragment::kMItemnumFieldNumber;
const int E_MountFragment::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_MountFragment::E_MountFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountFragment::InitAsDefaultInstance() {
}

E_MountFragment::E_MountFragment(const E_MountFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountFragment::SharedCtor() {
  _cached_size_ = 0;
  m_fragmentid_ = GOOGLE_LONGLONG(0);
  m_item_ = GOOGLE_LONGLONG(0);
  m_itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountFragment::~E_MountFragment() {
  SharedDtor();
}

void E_MountFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountFragment_descriptor_;
}

const E_MountFragment& E_MountFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountFragment* E_MountFragment::default_instance_ = NULL;

E_MountFragment* E_MountFragment::New() const {
  return new E_MountFragment;
}

void E_MountFragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fragmentid_ = GOOGLE_LONGLONG(0);
    m_item_ = GOOGLE_LONGLONG(0);
    m_itemnum_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_fragmentid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fragmentid_)));
          set_has_m_fragmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int64 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemnum;
        break;
      }

      // optional int32 m_itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_MountFragmentAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_fragmentid = 1;
  if (has_m_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_fragmentid(), output);
  }

  // optional int64 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_item(), output);
  }

  // optional int32 m_itemnum = 3;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_itemnum(), output);
  }

  // repeated .proto_ff.E_MountFragmentAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_fragmentid = 1;
  if (has_m_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_fragmentid(), target);
  }

  // optional int64 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_item(), target);
  }

  // optional int32 m_itemnum = 3;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_itemnum(), target);
  }

  // repeated .proto_ff.E_MountFragmentAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountFragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_fragmentid = 1;
    if (has_m_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fragmentid());
    }

    // optional int64 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_item());
    }

    // optional int32 m_itemnum = 3;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

  }
  // repeated .proto_ff.E_MountFragmentAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountFragment::MergeFrom(const E_MountFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fragmentid()) {
      set_m_fragmentid(from.m_fragmentid());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountFragment::CopyFrom(const E_MountFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountFragment::IsInitialized() const {

  return true;
}

void E_MountFragment::Swap(E_MountFragment* other) {
  if (other != this) {
    std::swap(m_fragmentid_, other->m_fragmentid_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_itemnum_, other->m_itemnum_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountFragment_descriptor_;
  metadata.reflection = E_MountFragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountFragment::kEMountFragmentListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountFragment::Sheet_MountFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountFragment::InitAsDefaultInstance() {
}

Sheet_MountFragment::Sheet_MountFragment(const Sheet_MountFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountFragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountFragment::~Sheet_MountFragment() {
  SharedDtor();
}

void Sheet_MountFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountFragment_descriptor_;
}

const Sheet_MountFragment& Sheet_MountFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountFragment* Sheet_MountFragment::default_instance_ = NULL;

Sheet_MountFragment* Sheet_MountFragment::New() const {
  return new Sheet_MountFragment;
}

void Sheet_MountFragment::Clear() {
  e_mountfragment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountFragment E_MountFragment_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountFragment_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mountfragment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountFragment_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountFragment E_MountFragment_List = 1;
  for (int i = 0; i < this->e_mountfragment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mountfragment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountFragment E_MountFragment_List = 1;
  for (int i = 0; i < this->e_mountfragment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mountfragment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountFragment::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountFragment E_MountFragment_List = 1;
  total_size += 1 * this->e_mountfragment_list_size();
  for (int i = 0; i < this->e_mountfragment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mountfragment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountFragment::MergeFrom(const Sheet_MountFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mountfragment_list_.MergeFrom(from.e_mountfragment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountFragment::CopyFrom(const Sheet_MountFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountFragment::IsInitialized() const {

  return true;
}

void Sheet_MountFragment::Swap(Sheet_MountFragment* other) {
  if (other != this) {
    e_mountfragment_list_.Swap(&other->e_mountfragment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountFragment_descriptor_;
  metadata.reflection = Sheet_MountFragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountValueAttributeDesc::kMTypeFieldNumber;
const int E_MountValueAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_MountValueAttributeDesc::E_MountValueAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountValueAttributeDesc::InitAsDefaultInstance() {
}

E_MountValueAttributeDesc::E_MountValueAttributeDesc(const E_MountValueAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountValueAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountValueAttributeDesc::~E_MountValueAttributeDesc() {
  SharedDtor();
}

void E_MountValueAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountValueAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountValueAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountValueAttributeDesc_descriptor_;
}

const E_MountValueAttributeDesc& E_MountValueAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountValueAttributeDesc* E_MountValueAttributeDesc::default_instance_ = NULL;

E_MountValueAttributeDesc* E_MountValueAttributeDesc::New() const {
  return new E_MountValueAttributeDesc;
}

void E_MountValueAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountValueAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountValueAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountValueAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountValueAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountValueAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountValueAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountValueAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountValueAttributeDesc::MergeFrom(const E_MountValueAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountValueAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountValueAttributeDesc::CopyFrom(const E_MountValueAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountValueAttributeDesc::IsInitialized() const {

  return true;
}

void E_MountValueAttributeDesc::Swap(E_MountValueAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountValueAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountValueAttributeDesc_descriptor_;
  metadata.reflection = E_MountValueAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountValue::kMIdFieldNumber;
const int E_MountValue::kMTypeFieldNumber;
const int E_MountValue::kMLvFieldNumber;
const int E_MountValue::kMExpFieldNumber;
const int E_MountValue::kMSpeedFieldNumber;
const int E_MountValue::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_MountValue::E_MountValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountValue::InitAsDefaultInstance() {
}

E_MountValue::E_MountValue(const E_MountValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountValue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  m_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountValue::~E_MountValue() {
  SharedDtor();
}

void E_MountValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountValue_descriptor_;
}

const E_MountValue& E_MountValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountValue* E_MountValue::default_instance_ = NULL;

E_MountValue* E_MountValue::New() const {
  return new E_MountValue;
}

void E_MountValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_lv_ = 0;
    m_exp_ = 0;
    m_speed_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_speed;
        break;
      }

      // optional int32 m_speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_speed_)));
          set_has_m_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_MountValueAttributeDesc m_attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lv(), output);
  }

  // optional int32 m_exp = 4;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_exp(), output);
  }

  // optional int32 m_speed = 5;
  if (has_m_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_speed(), output);
  }

  // repeated .proto_ff.E_MountValueAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_lv = 3;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lv(), target);
  }

  // optional int32 m_exp = 4;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_exp(), target);
  }

  // optional int32 m_speed = 5;
  if (has_m_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_speed(), target);
  }

  // repeated .proto_ff.E_MountValueAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_lv = 3;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 4;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_speed = 5;
    if (has_m_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_speed());
    }

  }
  // repeated .proto_ff.E_MountValueAttributeDesc m_attribute = 6;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountValue::MergeFrom(const E_MountValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_speed()) {
      set_m_speed(from.m_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountValue::CopyFrom(const E_MountValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountValue::IsInitialized() const {

  return true;
}

void E_MountValue::Swap(E_MountValue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_speed_, other->m_speed_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountValue_descriptor_;
  metadata.reflection = E_MountValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountValue::kEMountValueListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountValue::Sheet_MountValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountValue::InitAsDefaultInstance() {
}

Sheet_MountValue::Sheet_MountValue(const Sheet_MountValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountValue::~Sheet_MountValue() {
  SharedDtor();
}

void Sheet_MountValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountValue_descriptor_;
}

const Sheet_MountValue& Sheet_MountValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountValue* Sheet_MountValue::default_instance_ = NULL;

Sheet_MountValue* Sheet_MountValue::New() const {
  return new Sheet_MountValue;
}

void Sheet_MountValue::Clear() {
  e_mountvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountValue E_MountValue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountValue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mountvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountValue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountValue E_MountValue_List = 1;
  for (int i = 0; i < this->e_mountvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mountvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountValue E_MountValue_List = 1;
  for (int i = 0; i < this->e_mountvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mountvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountValue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountValue E_MountValue_List = 1;
  total_size += 1 * this->e_mountvalue_list_size();
  for (int i = 0; i < this->e_mountvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mountvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountValue::MergeFrom(const Sheet_MountValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mountvalue_list_.MergeFrom(from.e_mountvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountValue::CopyFrom(const Sheet_MountValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountValue::IsInitialized() const {

  return true;
}

void Sheet_MountValue::Swap(Sheet_MountValue* other) {
  if (other != this) {
    e_mountvalue_list_.Swap(&other->e_mountvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountValue_descriptor_;
  metadata.reflection = Sheet_MountValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountDisplayMaterialDesc::kMIdFieldNumber;
const int E_MountDisplayMaterialDesc::kMExpFieldNumber;
#endif  // !_MSC_VER

E_MountDisplayMaterialDesc::E_MountDisplayMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountDisplayMaterialDesc::InitAsDefaultInstance() {
}

E_MountDisplayMaterialDesc::E_MountDisplayMaterialDesc(const E_MountDisplayMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountDisplayMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountDisplayMaterialDesc::~E_MountDisplayMaterialDesc() {
  SharedDtor();
}

void E_MountDisplayMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountDisplayMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountDisplayMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountDisplayMaterialDesc_descriptor_;
}

const E_MountDisplayMaterialDesc& E_MountDisplayMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountDisplayMaterialDesc* E_MountDisplayMaterialDesc::default_instance_ = NULL;

E_MountDisplayMaterialDesc* E_MountDisplayMaterialDesc::New() const {
  return new E_MountDisplayMaterialDesc;
}

void E_MountDisplayMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountDisplayMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountDisplayMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountDisplayMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountDisplayMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountDisplayMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountDisplayMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountDisplayMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountDisplayMaterialDesc::MergeFrom(const E_MountDisplayMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountDisplayMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountDisplayMaterialDesc::CopyFrom(const E_MountDisplayMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountDisplayMaterialDesc::IsInitialized() const {

  return true;
}

void E_MountDisplayMaterialDesc::Swap(E_MountDisplayMaterialDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountDisplayMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountDisplayMaterialDesc_descriptor_;
  metadata.reflection = E_MountDisplayMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountDisplay::kMIdFieldNumber;
const int E_MountDisplay::kMSpeedFieldNumber;
const int E_MountDisplay::kMUplvtypeFieldNumber;
const int E_MountDisplay::kMSkillidFieldNumber;
const int E_MountDisplay::kMFxidFieldNumber;
const int E_MountDisplay::kMStarupFieldNumber;
const int E_MountDisplay::kMLvmaxFieldNumber;
const int E_MountDisplay::kMMaterialFieldNumber;
const int E_MountDisplay::kMFragmentidFieldNumber;
#endif  // !_MSC_VER

E_MountDisplay::E_MountDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountDisplay::InitAsDefaultInstance() {
}

E_MountDisplay::E_MountDisplay(const E_MountDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountDisplay::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_speed_ = 0;
  m_uplvtype_ = 0;
  m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_fxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starup_ = 0;
  m_lvmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountDisplay::~E_MountDisplay() {
  SharedDtor();
}

void E_MountDisplay::SharedDtor() {
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillid_;
  }
  if (m_fxid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fxid_;
  }
  if (this != default_instance_) {
  }
}

void E_MountDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountDisplay_descriptor_;
}

const E_MountDisplay& E_MountDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountDisplay* E_MountDisplay::default_instance_ = NULL;

E_MountDisplay* E_MountDisplay::New() const {
  return new E_MountDisplay;
}

void E_MountDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_speed_ = 0;
    m_uplvtype_ = 0;
    if (has_m_skillid()) {
      if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
        m_skillid_->clear();
      }
    }
    if (has_m_fxid()) {
      if (m_fxid_ != &::google::protobuf::internal::kEmptyString) {
        m_fxid_->clear();
      }
    }
    m_starup_ = 0;
    m_lvmax_ = 0;
  }
  m_material_.Clear();
  m_fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_speed;
        break;
      }

      // optional int32 m_speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_speed_)));
          set_has_m_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_uplvtype;
        break;
      }

      // optional int32 m_uplvtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uplvtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplvtype_)));
          set_has_m_uplvtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_skillid;
        break;
      }

      // optional string m_skillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skillid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skillid().data(), this->m_skillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_fxid;
        break;
      }

      // optional string m_fxid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fxid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_fxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_fxid().data(), this->m_fxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_starup;
        break;
      }

      // optional int32 m_starup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starup_)));
          set_has_m_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lvmax;
        break;
      }

      // optional int32 m_lvmax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmax_)));
          set_has_m_lvmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_MountDisplayMaterialDesc m_material = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_material;
        if (input->ExpectTag(72)) goto parse_m_fragmentid;
        break;
      }

      // repeated int64 m_fragmentid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fragmentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_m_fragmentid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_fragmentid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_fragmentid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_speed = 2;
  if (has_m_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_speed(), output);
  }

  // optional int32 m_uplvtype = 3;
  if (has_m_uplvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_uplvtype(), output);
  }

  // optional string m_skillid = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_skillid(), output);
  }

  // optional string m_fxid = 5;
  if (has_m_fxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fxid().data(), this->m_fxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_fxid(), output);
  }

  // optional int32 m_starup = 6;
  if (has_m_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_starup(), output);
  }

  // optional int32 m_lvmax = 7;
  if (has_m_lvmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lvmax(), output);
  }

  // repeated .proto_ff.E_MountDisplayMaterialDesc m_material = 8;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_material(i), output);
  }

  // repeated int64 m_fragmentid = 9;
  for (int i = 0; i < this->m_fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->m_fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_speed = 2;
  if (has_m_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_speed(), target);
  }

  // optional int32 m_uplvtype = 3;
  if (has_m_uplvtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_uplvtype(), target);
  }

  // optional string m_skillid = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_skillid(), target);
  }

  // optional string m_fxid = 5;
  if (has_m_fxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fxid().data(), this->m_fxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_fxid(), target);
  }

  // optional int32 m_starup = 6;
  if (has_m_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_starup(), target);
  }

  // optional int32 m_lvmax = 7;
  if (has_m_lvmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_lvmax(), target);
  }

  // repeated .proto_ff.E_MountDisplayMaterialDesc m_material = 8;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_material(i), target);
  }

  // repeated int64 m_fragmentid = 9;
  for (int i = 0; i < this->m_fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(9, this->m_fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountDisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_speed = 2;
    if (has_m_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_speed());
    }

    // optional int32 m_uplvtype = 3;
    if (has_m_uplvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplvtype());
    }

    // optional string m_skillid = 4;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skillid());
    }

    // optional string m_fxid = 5;
    if (has_m_fxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_fxid());
    }

    // optional int32 m_starup = 6;
    if (has_m_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starup());
    }

    // optional int32 m_lvmax = 7;
    if (has_m_lvmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmax());
    }

  }
  // repeated .proto_ff.E_MountDisplayMaterialDesc m_material = 8;
  total_size += 1 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  // repeated int64 m_fragmentid = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_fragmentid(i));
    }
    total_size += 1 * this->m_fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountDisplay::MergeFrom(const E_MountDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_material_.MergeFrom(from.m_material_);
  m_fragmentid_.MergeFrom(from.m_fragmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_speed()) {
      set_m_speed(from.m_speed());
    }
    if (from.has_m_uplvtype()) {
      set_m_uplvtype(from.m_uplvtype());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_fxid()) {
      set_m_fxid(from.m_fxid());
    }
    if (from.has_m_starup()) {
      set_m_starup(from.m_starup());
    }
    if (from.has_m_lvmax()) {
      set_m_lvmax(from.m_lvmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountDisplay::CopyFrom(const E_MountDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountDisplay::IsInitialized() const {

  return true;
}

void E_MountDisplay::Swap(E_MountDisplay* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_speed_, other->m_speed_);
    std::swap(m_uplvtype_, other->m_uplvtype_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_fxid_, other->m_fxid_);
    std::swap(m_starup_, other->m_starup_);
    std::swap(m_lvmax_, other->m_lvmax_);
    m_material_.Swap(&other->m_material_);
    m_fragmentid_.Swap(&other->m_fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountDisplay_descriptor_;
  metadata.reflection = E_MountDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountDisplay::kEMountDisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountDisplay::Sheet_MountDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountDisplay::InitAsDefaultInstance() {
}

Sheet_MountDisplay::Sheet_MountDisplay(const Sheet_MountDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountDisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountDisplay::~Sheet_MountDisplay() {
  SharedDtor();
}

void Sheet_MountDisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountDisplay_descriptor_;
}

const Sheet_MountDisplay& Sheet_MountDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountDisplay* Sheet_MountDisplay::default_instance_ = NULL;

Sheet_MountDisplay* Sheet_MountDisplay::New() const {
  return new Sheet_MountDisplay;
}

void Sheet_MountDisplay::Clear() {
  e_mountdisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountDisplay E_MountDisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountDisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mountdisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountDisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountDisplay E_MountDisplay_List = 1;
  for (int i = 0; i < this->e_mountdisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mountdisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountDisplay E_MountDisplay_List = 1;
  for (int i = 0; i < this->e_mountdisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mountdisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountDisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountDisplay E_MountDisplay_List = 1;
  total_size += 1 * this->e_mountdisplay_list_size();
  for (int i = 0; i < this->e_mountdisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mountdisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountDisplay::MergeFrom(const Sheet_MountDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mountdisplay_list_.MergeFrom(from.e_mountdisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountDisplay::CopyFrom(const Sheet_MountDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountDisplay::IsInitialized() const {

  return true;
}

void Sheet_MountDisplay::Swap(Sheet_MountDisplay* other) {
  if (other != this) {
    e_mountdisplay_list_.Swap(&other->e_mountdisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountDisplay_descriptor_;
  metadata.reflection = Sheet_MountDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountUnlock::kMIdFieldNumber;
const int E_MountUnlock::kMLvFieldNumber;
const int E_MountUnlock::kMModelidFieldNumber;
#endif  // !_MSC_VER

E_MountUnlock::E_MountUnlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountUnlock::InitAsDefaultInstance() {
}

E_MountUnlock::E_MountUnlock(const E_MountUnlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountUnlock::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lv_ = 0;
  m_modelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountUnlock::~E_MountUnlock() {
  SharedDtor();
}

void E_MountUnlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountUnlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountUnlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountUnlock_descriptor_;
}

const E_MountUnlock& E_MountUnlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountUnlock* E_MountUnlock::default_instance_ = NULL;

E_MountUnlock* E_MountUnlock::New() const {
  return new E_MountUnlock;
}

void E_MountUnlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lv_ = 0;
    m_modelid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_modelid;
        break;
      }

      // optional int32 m_modelid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modelid_)));
          set_has_m_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  // optional int32 m_modelid = 3;
  if (has_m_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_modelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountUnlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  // optional int32 m_modelid = 3;
  if (has_m_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_modelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountUnlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_modelid = 3;
    if (has_m_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountUnlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountUnlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountUnlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountUnlock::MergeFrom(const E_MountUnlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_modelid()) {
      set_m_modelid(from.m_modelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountUnlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountUnlock::CopyFrom(const E_MountUnlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountUnlock::IsInitialized() const {

  return true;
}

void E_MountUnlock::Swap(E_MountUnlock* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_modelid_, other->m_modelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountUnlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountUnlock_descriptor_;
  metadata.reflection = E_MountUnlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountUnlock::kEMountUnlockListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountUnlock::Sheet_MountUnlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountUnlock::InitAsDefaultInstance() {
}

Sheet_MountUnlock::Sheet_MountUnlock(const Sheet_MountUnlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountUnlock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountUnlock::~Sheet_MountUnlock() {
  SharedDtor();
}

void Sheet_MountUnlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountUnlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountUnlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountUnlock_descriptor_;
}

const Sheet_MountUnlock& Sheet_MountUnlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountUnlock* Sheet_MountUnlock::default_instance_ = NULL;

Sheet_MountUnlock* Sheet_MountUnlock::New() const {
  return new Sheet_MountUnlock;
}

void Sheet_MountUnlock::Clear() {
  e_mountunlock_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountUnlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountUnlock E_MountUnlock_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountUnlock_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mountunlock_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountUnlock_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountUnlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountUnlock E_MountUnlock_List = 1;
  for (int i = 0; i < this->e_mountunlock_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mountunlock_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountUnlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountUnlock E_MountUnlock_List = 1;
  for (int i = 0; i < this->e_mountunlock_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mountunlock_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountUnlock::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountUnlock E_MountUnlock_List = 1;
  total_size += 1 * this->e_mountunlock_list_size();
  for (int i = 0; i < this->e_mountunlock_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mountunlock_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountUnlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountUnlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountUnlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountUnlock::MergeFrom(const Sheet_MountUnlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mountunlock_list_.MergeFrom(from.e_mountunlock_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountUnlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountUnlock::CopyFrom(const Sheet_MountUnlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountUnlock::IsInitialized() const {

  return true;
}

void Sheet_MountUnlock::Swap(Sheet_MountUnlock* other) {
  if (other != this) {
    e_mountunlock_list_.Swap(&other->e_mountunlock_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountUnlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountUnlock_descriptor_;
  metadata.reflection = Sheet_MountUnlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountChangeAttributeDesc::kMUpvalueFieldNumber;
const int E_MountChangeAttributeDesc::kMUpberFieldNumber;
#endif  // !_MSC_VER

E_MountChangeAttributeDesc::E_MountChangeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountChangeAttributeDesc::InitAsDefaultInstance() {
}

E_MountChangeAttributeDesc::E_MountChangeAttributeDesc(const E_MountChangeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountChangeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_upvalue_ = 0;
  m_upber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountChangeAttributeDesc::~E_MountChangeAttributeDesc() {
  SharedDtor();
}

void E_MountChangeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountChangeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountChangeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountChangeAttributeDesc_descriptor_;
}

const E_MountChangeAttributeDesc& E_MountChangeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountChangeAttributeDesc* E_MountChangeAttributeDesc::default_instance_ = NULL;

E_MountChangeAttributeDesc* E_MountChangeAttributeDesc::New() const {
  return new E_MountChangeAttributeDesc;
}

void E_MountChangeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_upvalue_ = 0;
    m_upber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountChangeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_upvalue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upvalue_)));
          set_has_m_upvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_upber;
        break;
      }

      // optional int32 m_upber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upber_)));
          set_has_m_upber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountChangeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_upvalue = 1;
  if (has_m_upvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_upvalue(), output);
  }

  // optional int32 m_upber = 2;
  if (has_m_upber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_upber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountChangeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_upvalue = 1;
  if (has_m_upvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_upvalue(), target);
  }

  // optional int32 m_upber = 2;
  if (has_m_upber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_upber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountChangeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_upvalue = 1;
    if (has_m_upvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upvalue());
    }

    // optional int32 m_upber = 2;
    if (has_m_upber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountChangeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountChangeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountChangeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountChangeAttributeDesc::MergeFrom(const E_MountChangeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_upvalue()) {
      set_m_upvalue(from.m_upvalue());
    }
    if (from.has_m_upber()) {
      set_m_upber(from.m_upber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountChangeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountChangeAttributeDesc::CopyFrom(const E_MountChangeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountChangeAttributeDesc::IsInitialized() const {

  return true;
}

void E_MountChangeAttributeDesc::Swap(E_MountChangeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_upvalue_, other->m_upvalue_);
    std::swap(m_upber_, other->m_upber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountChangeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountChangeAttributeDesc_descriptor_;
  metadata.reflection = E_MountChangeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountChangeMaterialDesc::kMIdFieldNumber;
const int E_MountChangeMaterialDesc::kMExpFieldNumber;
#endif  // !_MSC_VER

E_MountChangeMaterialDesc::E_MountChangeMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountChangeMaterialDesc::InitAsDefaultInstance() {
}

E_MountChangeMaterialDesc::E_MountChangeMaterialDesc(const E_MountChangeMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountChangeMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountChangeMaterialDesc::~E_MountChangeMaterialDesc() {
  SharedDtor();
}

void E_MountChangeMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountChangeMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountChangeMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountChangeMaterialDesc_descriptor_;
}

const E_MountChangeMaterialDesc& E_MountChangeMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountChangeMaterialDesc* E_MountChangeMaterialDesc::default_instance_ = NULL;

E_MountChangeMaterialDesc* E_MountChangeMaterialDesc::New() const {
  return new E_MountChangeMaterialDesc;
}

void E_MountChangeMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountChangeMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountChangeMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountChangeMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountChangeMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountChangeMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountChangeMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountChangeMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountChangeMaterialDesc::MergeFrom(const E_MountChangeMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountChangeMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountChangeMaterialDesc::CopyFrom(const E_MountChangeMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountChangeMaterialDesc::IsInitialized() const {

  return true;
}

void E_MountChangeMaterialDesc::Swap(E_MountChangeMaterialDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountChangeMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountChangeMaterialDesc_descriptor_;
  metadata.reflection = E_MountChangeMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountChange::kMIdFieldNumber;
const int E_MountChange::kMSpeedFieldNumber;
const int E_MountChange::kMUplvtypeFieldNumber;
const int E_MountChange::kMActiveskillFieldNumber;
const int E_MountChange::kMSkillidFieldNumber;
const int E_MountChange::kMFxidFieldNumber;
const int E_MountChange::kMStarmaxFieldNumber;
const int E_MountChange::kMLvmaxFieldNumber;
const int E_MountChange::kMModelidFieldNumber;
const int E_MountChange::kMActivationitemFieldNumber;
const int E_MountChange::kMActivationnumFieldNumber;
const int E_MountChange::kMStaridFieldNumber;
const int E_MountChange::kMStarnumFieldNumber;
const int E_MountChange::kMStarberFieldNumber;
const int E_MountChange::kMUpattributeidFieldNumber;
const int E_MountChange::kMAttributeFieldNumber;
const int E_MountChange::kMMaterialFieldNumber;
#endif  // !_MSC_VER

E_MountChange::E_MountChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountChange::InitAsDefaultInstance() {
}

E_MountChange::E_MountChange(const E_MountChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountChange::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_speed_ = 0;
  m_uplvtype_ = 0;
  m_activeskill_ = 0;
  m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_fxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starmax_ = 0;
  m_lvmax_ = 0;
  m_modelid_ = 0;
  m_activationitem_ = 0;
  m_activationnum_ = 0;
  m_starid_ = 0;
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starber_ = 0;
  m_upattributeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountChange::~E_MountChange() {
  SharedDtor();
}

void E_MountChange::SharedDtor() {
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillid_;
  }
  if (m_fxid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_fxid_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (this != default_instance_) {
  }
}

void E_MountChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountChange_descriptor_;
}

const E_MountChange& E_MountChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountChange* E_MountChange::default_instance_ = NULL;

E_MountChange* E_MountChange::New() const {
  return new E_MountChange;
}

void E_MountChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_speed_ = 0;
    m_uplvtype_ = 0;
    m_activeskill_ = 0;
    if (has_m_skillid()) {
      if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
        m_skillid_->clear();
      }
    }
    if (has_m_fxid()) {
      if (m_fxid_ != &::google::protobuf::internal::kEmptyString) {
        m_fxid_->clear();
      }
    }
    m_starmax_ = 0;
    m_lvmax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_modelid_ = 0;
    m_activationitem_ = 0;
    m_activationnum_ = 0;
    m_starid_ = 0;
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
    m_starber_ = 0;
    m_upattributeid_ = 0;
  }
  m_attribute_.Clear();
  m_material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_speed;
        break;
      }

      // optional int32 m_speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_speed_)));
          set_has_m_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_uplvtype;
        break;
      }

      // optional int32 m_uplvtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uplvtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplvtype_)));
          set_has_m_uplvtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_activeskill;
        break;
      }

      // optional int32 m_activeskill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeskill_)));
          set_has_m_activeskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_skillid;
        break;
      }

      // optional string m_skillid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skillid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skillid().data(), this->m_skillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_fxid;
        break;
      }

      // optional string m_fxid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_fxid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_fxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_fxid().data(), this->m_fxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_starmax;
        break;
      }

      // optional int32 m_starmax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starmax_)));
          set_has_m_starmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_lvmax;
        break;
      }

      // optional int32 m_lvmax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmax_)));
          set_has_m_lvmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_modelid;
        break;
      }

      // optional int32 m_modelid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modelid_)));
          set_has_m_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_activationitem;
        break;
      }

      // optional int32 m_activationitem = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activationitem_)));
          set_has_m_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_activationnum;
        break;
      }

      // optional int32 m_activationnum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activationnum_)));
          set_has_m_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_starid;
        break;
      }

      // optional int32 m_starid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_starnum;
        break;
      }

      // optional string m_starnum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_starber;
        break;
      }

      // optional int32 m_starber = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starber_)));
          set_has_m_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_upattributeid;
        break;
      }

      // optional int32 m_upattributeid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upattributeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_MountChangeAttributeDesc m_attribute = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_attribute;
        if (input->ExpectTag(138)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_MountChangeMaterialDesc m_material = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_material;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_speed = 2;
  if (has_m_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_speed(), output);
  }

  // optional int32 m_uplvtype = 3;
  if (has_m_uplvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_uplvtype(), output);
  }

  // optional int32 m_activeskill = 4;
  if (has_m_activeskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_activeskill(), output);
  }

  // optional string m_skillid = 5;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_skillid(), output);
  }

  // optional string m_fxid = 6;
  if (has_m_fxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fxid().data(), this->m_fxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_fxid(), output);
  }

  // optional int32 m_starmax = 7;
  if (has_m_starmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_starmax(), output);
  }

  // optional int32 m_lvmax = 8;
  if (has_m_lvmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_lvmax(), output);
  }

  // optional int32 m_modelid = 9;
  if (has_m_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_modelid(), output);
  }

  // optional int32 m_activationitem = 10;
  if (has_m_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_activationitem(), output);
  }

  // optional int32 m_activationnum = 11;
  if (has_m_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_activationnum(), output);
  }

  // optional int32 m_starid = 12;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_starid(), output);
  }

  // optional string m_starnum = 13;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_starnum(), output);
  }

  // optional int32 m_starber = 14;
  if (has_m_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_starber(), output);
  }

  // optional int32 m_upattributeid = 15;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_upattributeid(), output);
  }

  // repeated .proto_ff.E_MountChangeAttributeDesc m_attribute = 16;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_attribute(i), output);
  }

  // repeated .proto_ff.E_MountChangeMaterialDesc m_material = 17;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->m_material(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_speed = 2;
  if (has_m_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_speed(), target);
  }

  // optional int32 m_uplvtype = 3;
  if (has_m_uplvtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_uplvtype(), target);
  }

  // optional int32 m_activeskill = 4;
  if (has_m_activeskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_activeskill(), target);
  }

  // optional string m_skillid = 5;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_skillid(), target);
  }

  // optional string m_fxid = 6;
  if (has_m_fxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_fxid().data(), this->m_fxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_fxid(), target);
  }

  // optional int32 m_starmax = 7;
  if (has_m_starmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_starmax(), target);
  }

  // optional int32 m_lvmax = 8;
  if (has_m_lvmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_lvmax(), target);
  }

  // optional int32 m_modelid = 9;
  if (has_m_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_modelid(), target);
  }

  // optional int32 m_activationitem = 10;
  if (has_m_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_activationitem(), target);
  }

  // optional int32 m_activationnum = 11;
  if (has_m_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_activationnum(), target);
  }

  // optional int32 m_starid = 12;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_starid(), target);
  }

  // optional string m_starnum = 13;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_starnum(), target);
  }

  // optional int32 m_starber = 14;
  if (has_m_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_starber(), target);
  }

  // optional int32 m_upattributeid = 15;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_upattributeid(), target);
  }

  // repeated .proto_ff.E_MountChangeAttributeDesc m_attribute = 16;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_attribute(i), target);
  }

  // repeated .proto_ff.E_MountChangeMaterialDesc m_material = 17;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->m_material(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_speed = 2;
    if (has_m_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_speed());
    }

    // optional int32 m_uplvtype = 3;
    if (has_m_uplvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplvtype());
    }

    // optional int32 m_activeskill = 4;
    if (has_m_activeskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeskill());
    }

    // optional string m_skillid = 5;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skillid());
    }

    // optional string m_fxid = 6;
    if (has_m_fxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_fxid());
    }

    // optional int32 m_starmax = 7;
    if (has_m_starmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starmax());
    }

    // optional int32 m_lvmax = 8;
    if (has_m_lvmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_modelid = 9;
    if (has_m_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modelid());
    }

    // optional int32 m_activationitem = 10;
    if (has_m_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activationitem());
    }

    // optional int32 m_activationnum = 11;
    if (has_m_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activationnum());
    }

    // optional int32 m_starid = 12;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starid());
    }

    // optional string m_starnum = 13;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

    // optional int32 m_starber = 14;
    if (has_m_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starber());
    }

    // optional int32 m_upattributeid = 15;
    if (has_m_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upattributeid());
    }

  }
  // repeated .proto_ff.E_MountChangeAttributeDesc m_attribute = 16;
  total_size += 2 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated .proto_ff.E_MountChangeMaterialDesc m_material = 17;
  total_size += 2 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountChange::MergeFrom(const E_MountChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_material_.MergeFrom(from.m_material_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_speed()) {
      set_m_speed(from.m_speed());
    }
    if (from.has_m_uplvtype()) {
      set_m_uplvtype(from.m_uplvtype());
    }
    if (from.has_m_activeskill()) {
      set_m_activeskill(from.m_activeskill());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_fxid()) {
      set_m_fxid(from.m_fxid());
    }
    if (from.has_m_starmax()) {
      set_m_starmax(from.m_starmax());
    }
    if (from.has_m_lvmax()) {
      set_m_lvmax(from.m_lvmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_modelid()) {
      set_m_modelid(from.m_modelid());
    }
    if (from.has_m_activationitem()) {
      set_m_activationitem(from.m_activationitem());
    }
    if (from.has_m_activationnum()) {
      set_m_activationnum(from.m_activationnum());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_starber()) {
      set_m_starber(from.m_starber());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountChange::CopyFrom(const E_MountChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountChange::IsInitialized() const {

  return true;
}

void E_MountChange::Swap(E_MountChange* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_speed_, other->m_speed_);
    std::swap(m_uplvtype_, other->m_uplvtype_);
    std::swap(m_activeskill_, other->m_activeskill_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_fxid_, other->m_fxid_);
    std::swap(m_starmax_, other->m_starmax_);
    std::swap(m_lvmax_, other->m_lvmax_);
    std::swap(m_modelid_, other->m_modelid_);
    std::swap(m_activationitem_, other->m_activationitem_);
    std::swap(m_activationnum_, other->m_activationnum_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_starber_, other->m_starber_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    m_attribute_.Swap(&other->m_attribute_);
    m_material_.Swap(&other->m_material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountChange_descriptor_;
  metadata.reflection = E_MountChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountChange::kEMountChangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountChange::Sheet_MountChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountChange::InitAsDefaultInstance() {
}

Sheet_MountChange::Sheet_MountChange(const Sheet_MountChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountChange::~Sheet_MountChange() {
  SharedDtor();
}

void Sheet_MountChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountChange_descriptor_;
}

const Sheet_MountChange& Sheet_MountChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountChange* Sheet_MountChange::default_instance_ = NULL;

Sheet_MountChange* Sheet_MountChange::New() const {
  return new Sheet_MountChange;
}

void Sheet_MountChange::Clear() {
  e_mountchange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountChange E_MountChange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountChange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mountchange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountChange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountChange E_MountChange_List = 1;
  for (int i = 0; i < this->e_mountchange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mountchange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountChange E_MountChange_List = 1;
  for (int i = 0; i < this->e_mountchange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mountchange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountChange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountChange E_MountChange_List = 1;
  total_size += 1 * this->e_mountchange_list_size();
  for (int i = 0; i < this->e_mountchange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mountchange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountChange::MergeFrom(const Sheet_MountChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mountchange_list_.MergeFrom(from.e_mountchange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountChange::CopyFrom(const Sheet_MountChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountChange::IsInitialized() const {

  return true;
}

void Sheet_MountChange::Swap(Sheet_MountChange* other) {
  if (other != this) {
    e_mountchange_list_.Swap(&other->e_mountchange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountChange_descriptor_;
  metadata.reflection = Sheet_MountChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountAdvanceUpattributeDesc::kMTypeFieldNumber;
const int E_MountAdvanceUpattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_MountAdvanceUpattributeDesc::E_MountAdvanceUpattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountAdvanceUpattributeDesc::InitAsDefaultInstance() {
}

E_MountAdvanceUpattributeDesc::E_MountAdvanceUpattributeDesc(const E_MountAdvanceUpattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountAdvanceUpattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountAdvanceUpattributeDesc::~E_MountAdvanceUpattributeDesc() {
  SharedDtor();
}

void E_MountAdvanceUpattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountAdvanceUpattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountAdvanceUpattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountAdvanceUpattributeDesc_descriptor_;
}

const E_MountAdvanceUpattributeDesc& E_MountAdvanceUpattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountAdvanceUpattributeDesc* E_MountAdvanceUpattributeDesc::default_instance_ = NULL;

E_MountAdvanceUpattributeDesc* E_MountAdvanceUpattributeDesc::New() const {
  return new E_MountAdvanceUpattributeDesc;
}

void E_MountAdvanceUpattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountAdvanceUpattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountAdvanceUpattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountAdvanceUpattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountAdvanceUpattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountAdvanceUpattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountAdvanceUpattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountAdvanceUpattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountAdvanceUpattributeDesc::MergeFrom(const E_MountAdvanceUpattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountAdvanceUpattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountAdvanceUpattributeDesc::CopyFrom(const E_MountAdvanceUpattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountAdvanceUpattributeDesc::IsInitialized() const {

  return true;
}

void E_MountAdvanceUpattributeDesc::Swap(E_MountAdvanceUpattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountAdvanceUpattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountAdvanceUpattributeDesc_descriptor_;
  metadata.reflection = E_MountAdvanceUpattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountAdvance::kMIdFieldNumber;
const int E_MountAdvance::kMUpattributeidFieldNumber;
const int E_MountAdvance::kMStaridFieldNumber;
const int E_MountAdvance::kMSkillidFieldNumber;
const int E_MountAdvance::kMUpattributeFieldNumber;
#endif  // !_MSC_VER

E_MountAdvance::E_MountAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountAdvance::InitAsDefaultInstance() {
}

E_MountAdvance::E_MountAdvance(const E_MountAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountAdvance::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_upattributeid_ = 0;
  m_starid_ = 0;
  m_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountAdvance::~E_MountAdvance() {
  SharedDtor();
}

void E_MountAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountAdvance_descriptor_;
}

const E_MountAdvance& E_MountAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountAdvance* E_MountAdvance::default_instance_ = NULL;

E_MountAdvance* E_MountAdvance::New() const {
  return new E_MountAdvance;
}

void E_MountAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_upattributeid_ = 0;
    m_starid_ = 0;
    m_skillid_ = 0;
  }
  m_upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_upattributeid;
        break;
      }

      // optional int32 m_upattributeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upattributeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_starid;
        break;
      }

      // optional int32 m_starid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_upattribute;
        break;
      }

      // repeated .proto_ff.E_MountAdvanceUpattributeDesc m_upattribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_upattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_upattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_upattributeid = 2;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_upattributeid(), output);
  }

  // optional int32 m_starid = 3;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_starid(), output);
  }

  // optional int32 m_skillid = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_skillid(), output);
  }

  // repeated .proto_ff.E_MountAdvanceUpattributeDesc m_upattribute = 5;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_upattributeid = 2;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_upattributeid(), target);
  }

  // optional int32 m_starid = 3;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_starid(), target);
  }

  // optional int32 m_skillid = 4;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_skillid(), target);
  }

  // repeated .proto_ff.E_MountAdvanceUpattributeDesc m_upattribute = 5;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_upattributeid = 2;
    if (has_m_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upattributeid());
    }

    // optional int32 m_starid = 3;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starid());
    }

    // optional int32 m_skillid = 4;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

  }
  // repeated .proto_ff.E_MountAdvanceUpattributeDesc m_upattribute = 5;
  total_size += 1 * this->m_upattribute_size();
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountAdvance::MergeFrom(const E_MountAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_upattribute_.MergeFrom(from.m_upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountAdvance::CopyFrom(const E_MountAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountAdvance::IsInitialized() const {

  return true;
}

void E_MountAdvance::Swap(E_MountAdvance* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_skillid_, other->m_skillid_);
    m_upattribute_.Swap(&other->m_upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountAdvance_descriptor_;
  metadata.reflection = E_MountAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountAdvance::kEMountAdvanceListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountAdvance::Sheet_MountAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountAdvance::InitAsDefaultInstance() {
}

Sheet_MountAdvance::Sheet_MountAdvance(const Sheet_MountAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountAdvance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountAdvance::~Sheet_MountAdvance() {
  SharedDtor();
}

void Sheet_MountAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountAdvance_descriptor_;
}

const Sheet_MountAdvance& Sheet_MountAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountAdvance* Sheet_MountAdvance::default_instance_ = NULL;

Sheet_MountAdvance* Sheet_MountAdvance::New() const {
  return new Sheet_MountAdvance;
}

void Sheet_MountAdvance::Clear() {
  e_mountadvance_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountAdvance E_MountAdvance_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountAdvance_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mountadvance_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountAdvance_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountAdvance E_MountAdvance_List = 1;
  for (int i = 0; i < this->e_mountadvance_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mountadvance_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountAdvance E_MountAdvance_List = 1;
  for (int i = 0; i < this->e_mountadvance_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mountadvance_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountAdvance::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountAdvance E_MountAdvance_List = 1;
  total_size += 1 * this->e_mountadvance_list_size();
  for (int i = 0; i < this->e_mountadvance_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mountadvance_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountAdvance::MergeFrom(const Sheet_MountAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mountadvance_list_.MergeFrom(from.e_mountadvance_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountAdvance::CopyFrom(const Sheet_MountAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountAdvance::IsInitialized() const {

  return true;
}

void Sheet_MountAdvance::Swap(Sheet_MountAdvance* other) {
  if (other != this) {
    e_mountadvance_list_.Swap(&other->e_mountadvance_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountAdvance_descriptor_;
  metadata.reflection = Sheet_MountAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountHuakunMaterialDesc::kMIdFieldNumber;
const int E_MountHuakunMaterialDesc::kMExpFieldNumber;
#endif  // !_MSC_VER

E_MountHuakunMaterialDesc::E_MountHuakunMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountHuakunMaterialDesc::InitAsDefaultInstance() {
}

E_MountHuakunMaterialDesc::E_MountHuakunMaterialDesc(const E_MountHuakunMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountHuakunMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountHuakunMaterialDesc::~E_MountHuakunMaterialDesc() {
  SharedDtor();
}

void E_MountHuakunMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountHuakunMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountHuakunMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountHuakunMaterialDesc_descriptor_;
}

const E_MountHuakunMaterialDesc& E_MountHuakunMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountHuakunMaterialDesc* E_MountHuakunMaterialDesc::default_instance_ = NULL;

E_MountHuakunMaterialDesc* E_MountHuakunMaterialDesc::New() const {
  return new E_MountHuakunMaterialDesc;
}

void E_MountHuakunMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountHuakunMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountHuakunMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountHuakunMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountHuakunMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountHuakunMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountHuakunMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountHuakunMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountHuakunMaterialDesc::MergeFrom(const E_MountHuakunMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountHuakunMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountHuakunMaterialDesc::CopyFrom(const E_MountHuakunMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountHuakunMaterialDesc::IsInitialized() const {

  return true;
}

void E_MountHuakunMaterialDesc::Swap(E_MountHuakunMaterialDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountHuakunMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountHuakunMaterialDesc_descriptor_;
  metadata.reflection = E_MountHuakunMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountHuakun::kMIdFieldNumber;
const int E_MountHuakun::kMModelidFieldNumber;
const int E_MountHuakun::kMQualityFieldNumber;
const int E_MountHuakun::kMSpeedFieldNumber;
const int E_MountHuakun::kMUplvtypeFieldNumber;
const int E_MountHuakun::kMAdvancetypeFieldNumber;
const int E_MountHuakun::kMStarmaxFieldNumber;
const int E_MountHuakun::kMUpstarnumFieldNumber;
const int E_MountHuakun::kMStarnumberFieldNumber;
const int E_MountHuakun::kMUpstarbertypeFieldNumber;
const int E_MountHuakun::kMActivateitemFieldNumber;
const int E_MountHuakun::kMActivateitemnumFieldNumber;
const int E_MountHuakun::kMSkillLgFieldNumber;
const int E_MountHuakun::kMSkillBdFieldNumber;
const int E_MountHuakun::kMMaterialFieldNumber;
const int E_MountHuakun::kMUpstaritemFieldNumber;
#endif  // !_MSC_VER

E_MountHuakun::E_MountHuakun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountHuakun::InitAsDefaultInstance() {
}

E_MountHuakun::E_MountHuakun(const E_MountHuakun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountHuakun::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_modelid_ = 0;
  m_quality_ = 0;
  m_speed_ = 0;
  m_uplvtype_ = 0;
  m_advancetype_ = 0;
  m_starmax_ = 0;
  m_upstarnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starnumber_ = 0;
  m_upstarbertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_activateitem_ = 0;
  m_activateitemnum_ = 0;
  m_skill_lg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_skill_bd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountHuakun::~E_MountHuakun() {
  SharedDtor();
}

void E_MountHuakun::SharedDtor() {
  if (m_upstarnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_upstarnum_;
  }
  if (m_upstarbertype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_upstarbertype_;
  }
  if (m_skill_lg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skill_lg_;
  }
  if (m_skill_bd_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skill_bd_;
  }
  if (this != default_instance_) {
  }
}

void E_MountHuakun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountHuakun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountHuakun_descriptor_;
}

const E_MountHuakun& E_MountHuakun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountHuakun* E_MountHuakun::default_instance_ = NULL;

E_MountHuakun* E_MountHuakun::New() const {
  return new E_MountHuakun;
}

void E_MountHuakun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_modelid_ = 0;
    m_quality_ = 0;
    m_speed_ = 0;
    m_uplvtype_ = 0;
    m_advancetype_ = 0;
    m_starmax_ = 0;
    if (has_m_upstarnum()) {
      if (m_upstarnum_ != &::google::protobuf::internal::kEmptyString) {
        m_upstarnum_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_starnumber_ = 0;
    if (has_m_upstarbertype()) {
      if (m_upstarbertype_ != &::google::protobuf::internal::kEmptyString) {
        m_upstarbertype_->clear();
      }
    }
    m_activateitem_ = 0;
    m_activateitemnum_ = 0;
    if (has_m_skill_lg()) {
      if (m_skill_lg_ != &::google::protobuf::internal::kEmptyString) {
        m_skill_lg_->clear();
      }
    }
    if (has_m_skill_bd()) {
      if (m_skill_bd_ != &::google::protobuf::internal::kEmptyString) {
        m_skill_bd_->clear();
      }
    }
  }
  m_material_.Clear();
  m_upstaritem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountHuakun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_modelid;
        break;
      }

      // optional int32 m_modelid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modelid_)));
          set_has_m_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_speed;
        break;
      }

      // optional int32 m_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_speed_)));
          set_has_m_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_uplvtype;
        break;
      }

      // optional int32 m_uplvtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uplvtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uplvtype_)));
          set_has_m_uplvtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_advancetype;
        break;
      }

      // optional int32 m_advancetype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advancetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancetype_)));
          set_has_m_advancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_starmax;
        break;
      }

      // optional int32 m_starmax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starmax_)));
          set_has_m_starmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_upstarnum;
        break;
      }

      // optional string m_upstarnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_upstarnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_upstarnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_upstarnum().data(), this->m_upstarnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_starnumber;
        break;
      }

      // optional int32 m_starnumber = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starnumber_)));
          set_has_m_starnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_upstarbertype;
        break;
      }

      // optional string m_upstarbertype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_upstarbertype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_upstarbertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_upstarbertype().data(), this->m_upstarbertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_activateitem;
        break;
      }

      // optional int32 m_activateitem = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activateitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activateitem_)));
          set_has_m_activateitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_activateitemnum;
        break;
      }

      // optional int32 m_activateitemnum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activateitemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activateitemnum_)));
          set_has_m_activateitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_skill_lg;
        break;
      }

      // optional string m_skill_lg = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill_lg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skill_lg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skill_lg().data(), this->m_skill_lg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_skill_bd;
        break;
      }

      // optional string m_skill_bd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill_bd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skill_bd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skill_bd().data(), this->m_skill_bd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_MountHuakunMaterialDesc m_material = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_material;
        if (input->ExpectTag(128)) goto parse_m_upstaritem;
        break;
      }

      // repeated int32 m_upstaritem = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upstaritem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_m_upstaritem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_upstaritem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_upstaritem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountHuakun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_modelid = 2;
  if (has_m_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_modelid(), output);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_quality(), output);
  }

  // optional int32 m_speed = 4;
  if (has_m_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_speed(), output);
  }

  // optional int32 m_uplvtype = 5;
  if (has_m_uplvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_uplvtype(), output);
  }

  // optional int32 m_advancetype = 6;
  if (has_m_advancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_advancetype(), output);
  }

  // optional int32 m_starmax = 7;
  if (has_m_starmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_starmax(), output);
  }

  // optional string m_upstarnum = 8;
  if (has_m_upstarnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_upstarnum().data(), this->m_upstarnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_upstarnum(), output);
  }

  // optional int32 m_starnumber = 9;
  if (has_m_starnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_starnumber(), output);
  }

  // optional string m_upstarbertype = 10;
  if (has_m_upstarbertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_upstarbertype().data(), this->m_upstarbertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->m_upstarbertype(), output);
  }

  // optional int32 m_activateitem = 11;
  if (has_m_activateitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_activateitem(), output);
  }

  // optional int32 m_activateitemnum = 12;
  if (has_m_activateitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_activateitemnum(), output);
  }

  // optional string m_skill_lg = 13;
  if (has_m_skill_lg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skill_lg().data(), this->m_skill_lg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_skill_lg(), output);
  }

  // optional string m_skill_bd = 14;
  if (has_m_skill_bd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skill_bd().data(), this->m_skill_bd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->m_skill_bd(), output);
  }

  // repeated .proto_ff.E_MountHuakunMaterialDesc m_material = 15;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_material(i), output);
  }

  // repeated int32 m_upstaritem = 16;
  for (int i = 0; i < this->m_upstaritem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->m_upstaritem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountHuakun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_modelid = 2;
  if (has_m_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_modelid(), target);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_quality(), target);
  }

  // optional int32 m_speed = 4;
  if (has_m_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_speed(), target);
  }

  // optional int32 m_uplvtype = 5;
  if (has_m_uplvtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_uplvtype(), target);
  }

  // optional int32 m_advancetype = 6;
  if (has_m_advancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_advancetype(), target);
  }

  // optional int32 m_starmax = 7;
  if (has_m_starmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_starmax(), target);
  }

  // optional string m_upstarnum = 8;
  if (has_m_upstarnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_upstarnum().data(), this->m_upstarnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_upstarnum(), target);
  }

  // optional int32 m_starnumber = 9;
  if (has_m_starnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_starnumber(), target);
  }

  // optional string m_upstarbertype = 10;
  if (has_m_upstarbertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_upstarbertype().data(), this->m_upstarbertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m_upstarbertype(), target);
  }

  // optional int32 m_activateitem = 11;
  if (has_m_activateitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_activateitem(), target);
  }

  // optional int32 m_activateitemnum = 12;
  if (has_m_activateitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_activateitemnum(), target);
  }

  // optional string m_skill_lg = 13;
  if (has_m_skill_lg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skill_lg().data(), this->m_skill_lg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m_skill_lg(), target);
  }

  // optional string m_skill_bd = 14;
  if (has_m_skill_bd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skill_bd().data(), this->m_skill_bd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->m_skill_bd(), target);
  }

  // repeated .proto_ff.E_MountHuakunMaterialDesc m_material = 15;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_material(i), target);
  }

  // repeated int32 m_upstaritem = 16;
  for (int i = 0; i < this->m_upstaritem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->m_upstaritem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountHuakun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_modelid = 2;
    if (has_m_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modelid());
    }

    // optional int32 m_quality = 3;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_speed = 4;
    if (has_m_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_speed());
    }

    // optional int32 m_uplvtype = 5;
    if (has_m_uplvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uplvtype());
    }

    // optional int32 m_advancetype = 6;
    if (has_m_advancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancetype());
    }

    // optional int32 m_starmax = 7;
    if (has_m_starmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starmax());
    }

    // optional string m_upstarnum = 8;
    if (has_m_upstarnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_upstarnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_starnumber = 9;
    if (has_m_starnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starnumber());
    }

    // optional string m_upstarbertype = 10;
    if (has_m_upstarbertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_upstarbertype());
    }

    // optional int32 m_activateitem = 11;
    if (has_m_activateitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activateitem());
    }

    // optional int32 m_activateitemnum = 12;
    if (has_m_activateitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activateitemnum());
    }

    // optional string m_skill_lg = 13;
    if (has_m_skill_lg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skill_lg());
    }

    // optional string m_skill_bd = 14;
    if (has_m_skill_bd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skill_bd());
    }

  }
  // repeated .proto_ff.E_MountHuakunMaterialDesc m_material = 15;
  total_size += 1 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  // repeated int32 m_upstaritem = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_upstaritem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_upstaritem(i));
    }
    total_size += 2 * this->m_upstaritem_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountHuakun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountHuakun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountHuakun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountHuakun::MergeFrom(const E_MountHuakun& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_material_.MergeFrom(from.m_material_);
  m_upstaritem_.MergeFrom(from.m_upstaritem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_modelid()) {
      set_m_modelid(from.m_modelid());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_speed()) {
      set_m_speed(from.m_speed());
    }
    if (from.has_m_uplvtype()) {
      set_m_uplvtype(from.m_uplvtype());
    }
    if (from.has_m_advancetype()) {
      set_m_advancetype(from.m_advancetype());
    }
    if (from.has_m_starmax()) {
      set_m_starmax(from.m_starmax());
    }
    if (from.has_m_upstarnum()) {
      set_m_upstarnum(from.m_upstarnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_starnumber()) {
      set_m_starnumber(from.m_starnumber());
    }
    if (from.has_m_upstarbertype()) {
      set_m_upstarbertype(from.m_upstarbertype());
    }
    if (from.has_m_activateitem()) {
      set_m_activateitem(from.m_activateitem());
    }
    if (from.has_m_activateitemnum()) {
      set_m_activateitemnum(from.m_activateitemnum());
    }
    if (from.has_m_skill_lg()) {
      set_m_skill_lg(from.m_skill_lg());
    }
    if (from.has_m_skill_bd()) {
      set_m_skill_bd(from.m_skill_bd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountHuakun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountHuakun::CopyFrom(const E_MountHuakun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountHuakun::IsInitialized() const {

  return true;
}

void E_MountHuakun::Swap(E_MountHuakun* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_modelid_, other->m_modelid_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_speed_, other->m_speed_);
    std::swap(m_uplvtype_, other->m_uplvtype_);
    std::swap(m_advancetype_, other->m_advancetype_);
    std::swap(m_starmax_, other->m_starmax_);
    std::swap(m_upstarnum_, other->m_upstarnum_);
    std::swap(m_starnumber_, other->m_starnumber_);
    std::swap(m_upstarbertype_, other->m_upstarbertype_);
    std::swap(m_activateitem_, other->m_activateitem_);
    std::swap(m_activateitemnum_, other->m_activateitemnum_);
    std::swap(m_skill_lg_, other->m_skill_lg_);
    std::swap(m_skill_bd_, other->m_skill_bd_);
    m_material_.Swap(&other->m_material_);
    m_upstaritem_.Swap(&other->m_upstaritem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountHuakun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountHuakun_descriptor_;
  metadata.reflection = E_MountHuakun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountHuakun::kEMountHuakunListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountHuakun::Sheet_MountHuakun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountHuakun::InitAsDefaultInstance() {
}

Sheet_MountHuakun::Sheet_MountHuakun(const Sheet_MountHuakun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountHuakun::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountHuakun::~Sheet_MountHuakun() {
  SharedDtor();
}

void Sheet_MountHuakun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountHuakun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountHuakun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountHuakun_descriptor_;
}

const Sheet_MountHuakun& Sheet_MountHuakun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountHuakun* Sheet_MountHuakun::default_instance_ = NULL;

Sheet_MountHuakun* Sheet_MountHuakun::New() const {
  return new Sheet_MountHuakun;
}

void Sheet_MountHuakun::Clear() {
  e_mounthuakun_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountHuakun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountHuakun E_MountHuakun_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountHuakun_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mounthuakun_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountHuakun_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountHuakun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountHuakun E_MountHuakun_List = 1;
  for (int i = 0; i < this->e_mounthuakun_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mounthuakun_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountHuakun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountHuakun E_MountHuakun_List = 1;
  for (int i = 0; i < this->e_mounthuakun_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mounthuakun_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountHuakun::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountHuakun E_MountHuakun_List = 1;
  total_size += 1 * this->e_mounthuakun_list_size();
  for (int i = 0; i < this->e_mounthuakun_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mounthuakun_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountHuakun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountHuakun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountHuakun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountHuakun::MergeFrom(const Sheet_MountHuakun& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mounthuakun_list_.MergeFrom(from.e_mounthuakun_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountHuakun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountHuakun::CopyFrom(const Sheet_MountHuakun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountHuakun::IsInitialized() const {

  return true;
}

void Sheet_MountHuakun::Swap(Sheet_MountHuakun* other) {
  if (other != this) {
    e_mounthuakun_list_.Swap(&other->e_mounthuakun_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountHuakun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountHuakun_descriptor_;
  metadata.reflection = Sheet_MountHuakun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountHuakun_advancevalueItemDesc::kMNumFieldNumber;
const int E_MountHuakun_advancevalueItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_MountHuakun_advancevalueItemDesc::E_MountHuakun_advancevalueItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountHuakun_advancevalueItemDesc::InitAsDefaultInstance() {
}

E_MountHuakun_advancevalueItemDesc::E_MountHuakun_advancevalueItemDesc(const E_MountHuakun_advancevalueItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountHuakun_advancevalueItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountHuakun_advancevalueItemDesc::~E_MountHuakun_advancevalueItemDesc() {
  SharedDtor();
}

void E_MountHuakun_advancevalueItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountHuakun_advancevalueItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountHuakun_advancevalueItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountHuakun_advancevalueItemDesc_descriptor_;
}

const E_MountHuakun_advancevalueItemDesc& E_MountHuakun_advancevalueItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountHuakun_advancevalueItemDesc* E_MountHuakun_advancevalueItemDesc::default_instance_ = NULL;

E_MountHuakun_advancevalueItemDesc* E_MountHuakun_advancevalueItemDesc::New() const {
  return new E_MountHuakun_advancevalueItemDesc;
}

void E_MountHuakun_advancevalueItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountHuakun_advancevalueItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountHuakun_advancevalueItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountHuakun_advancevalueItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountHuakun_advancevalueItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountHuakun_advancevalueItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountHuakun_advancevalueItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountHuakun_advancevalueItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountHuakun_advancevalueItemDesc::MergeFrom(const E_MountHuakun_advancevalueItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountHuakun_advancevalueItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountHuakun_advancevalueItemDesc::CopyFrom(const E_MountHuakun_advancevalueItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountHuakun_advancevalueItemDesc::IsInitialized() const {

  return true;
}

void E_MountHuakun_advancevalueItemDesc::Swap(E_MountHuakun_advancevalueItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountHuakun_advancevalueItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountHuakun_advancevalueItemDesc_descriptor_;
  metadata.reflection = E_MountHuakun_advancevalueItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountHuakun_advancevalue::kMIdFieldNumber;
const int E_MountHuakun_advancevalue::kMLvFieldNumber;
const int E_MountHuakun_advancevalue::kMLvtypeFieldNumber;
const int E_MountHuakun_advancevalue::kMAdvancetypeFieldNumber;
const int E_MountHuakun_advancevalue::kMWinprobFieldNumber;
const int E_MountHuakun_advancevalue::kMItemFieldNumber;
#endif  // !_MSC_VER

E_MountHuakun_advancevalue::E_MountHuakun_advancevalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountHuakun_advancevalue::InitAsDefaultInstance() {
}

E_MountHuakun_advancevalue::E_MountHuakun_advancevalue(const E_MountHuakun_advancevalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountHuakun_advancevalue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lv_ = 0;
  m_lvtype_ = 0;
  m_advancetype_ = 0;
  m_winprob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountHuakun_advancevalue::~E_MountHuakun_advancevalue() {
  SharedDtor();
}

void E_MountHuakun_advancevalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountHuakun_advancevalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountHuakun_advancevalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountHuakun_advancevalue_descriptor_;
}

const E_MountHuakun_advancevalue& E_MountHuakun_advancevalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountHuakun_advancevalue* E_MountHuakun_advancevalue::default_instance_ = NULL;

E_MountHuakun_advancevalue* E_MountHuakun_advancevalue::New() const {
  return new E_MountHuakun_advancevalue;
}

void E_MountHuakun_advancevalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lv_ = 0;
    m_lvtype_ = 0;
    m_advancetype_ = 0;
    m_winprob_ = 0;
  }
  m_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountHuakun_advancevalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lvtype;
        break;
      }

      // optional int32 m_lvtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvtype_)));
          set_has_m_lvtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_advancetype;
        break;
      }

      // optional int32 m_advancetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advancetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancetype_)));
          set_has_m_advancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_winprob;
        break;
      }

      // optional int32 m_winprob = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_winprob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_winprob_)));
          set_has_m_winprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_MountHuakun_advancevalueItemDesc m_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountHuakun_advancevalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  // optional int32 m_lvtype = 3;
  if (has_m_lvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lvtype(), output);
  }

  // optional int32 m_advancetype = 4;
  if (has_m_advancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_advancetype(), output);
  }

  // optional int32 m_winprob = 5;
  if (has_m_winprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_winprob(), output);
  }

  // repeated .proto_ff.E_MountHuakun_advancevalueItemDesc m_item = 6;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountHuakun_advancevalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  // optional int32 m_lvtype = 3;
  if (has_m_lvtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lvtype(), target);
  }

  // optional int32 m_advancetype = 4;
  if (has_m_advancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_advancetype(), target);
  }

  // optional int32 m_winprob = 5;
  if (has_m_winprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_winprob(), target);
  }

  // repeated .proto_ff.E_MountHuakun_advancevalueItemDesc m_item = 6;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountHuakun_advancevalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_lvtype = 3;
    if (has_m_lvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvtype());
    }

    // optional int32 m_advancetype = 4;
    if (has_m_advancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancetype());
    }

    // optional int32 m_winprob = 5;
    if (has_m_winprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_winprob());
    }

  }
  // repeated .proto_ff.E_MountHuakun_advancevalueItemDesc m_item = 6;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountHuakun_advancevalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountHuakun_advancevalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountHuakun_advancevalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountHuakun_advancevalue::MergeFrom(const E_MountHuakun_advancevalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_lvtype()) {
      set_m_lvtype(from.m_lvtype());
    }
    if (from.has_m_advancetype()) {
      set_m_advancetype(from.m_advancetype());
    }
    if (from.has_m_winprob()) {
      set_m_winprob(from.m_winprob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountHuakun_advancevalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountHuakun_advancevalue::CopyFrom(const E_MountHuakun_advancevalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountHuakun_advancevalue::IsInitialized() const {

  return true;
}

void E_MountHuakun_advancevalue::Swap(E_MountHuakun_advancevalue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_lvtype_, other->m_lvtype_);
    std::swap(m_advancetype_, other->m_advancetype_);
    std::swap(m_winprob_, other->m_winprob_);
    m_item_.Swap(&other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountHuakun_advancevalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountHuakun_advancevalue_descriptor_;
  metadata.reflection = E_MountHuakun_advancevalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountHuakun_advancevalue::kEMountHuakunAdvancevalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountHuakun_advancevalue::Sheet_MountHuakun_advancevalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountHuakun_advancevalue::InitAsDefaultInstance() {
}

Sheet_MountHuakun_advancevalue::Sheet_MountHuakun_advancevalue(const Sheet_MountHuakun_advancevalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountHuakun_advancevalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountHuakun_advancevalue::~Sheet_MountHuakun_advancevalue() {
  SharedDtor();
}

void Sheet_MountHuakun_advancevalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountHuakun_advancevalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountHuakun_advancevalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountHuakun_advancevalue_descriptor_;
}

const Sheet_MountHuakun_advancevalue& Sheet_MountHuakun_advancevalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountHuakun_advancevalue* Sheet_MountHuakun_advancevalue::default_instance_ = NULL;

Sheet_MountHuakun_advancevalue* Sheet_MountHuakun_advancevalue::New() const {
  return new Sheet_MountHuakun_advancevalue;
}

void Sheet_MountHuakun_advancevalue::Clear() {
  e_mounthuakun_advancevalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountHuakun_advancevalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountHuakun_advancevalue E_MountHuakun_advancevalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountHuakun_advancevalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mounthuakun_advancevalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountHuakun_advancevalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountHuakun_advancevalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountHuakun_advancevalue E_MountHuakun_advancevalue_List = 1;
  for (int i = 0; i < this->e_mounthuakun_advancevalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mounthuakun_advancevalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountHuakun_advancevalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountHuakun_advancevalue E_MountHuakun_advancevalue_List = 1;
  for (int i = 0; i < this->e_mounthuakun_advancevalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mounthuakun_advancevalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountHuakun_advancevalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountHuakun_advancevalue E_MountHuakun_advancevalue_List = 1;
  total_size += 1 * this->e_mounthuakun_advancevalue_list_size();
  for (int i = 0; i < this->e_mounthuakun_advancevalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mounthuakun_advancevalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountHuakun_advancevalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountHuakun_advancevalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountHuakun_advancevalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountHuakun_advancevalue::MergeFrom(const Sheet_MountHuakun_advancevalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mounthuakun_advancevalue_list_.MergeFrom(from.e_mounthuakun_advancevalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountHuakun_advancevalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountHuakun_advancevalue::CopyFrom(const Sheet_MountHuakun_advancevalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountHuakun_advancevalue::IsInitialized() const {

  return true;
}

void Sheet_MountHuakun_advancevalue::Swap(Sheet_MountHuakun_advancevalue* other) {
  if (other != this) {
    e_mounthuakun_advancevalue_list_.Swap(&other->e_mounthuakun_advancevalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountHuakun_advancevalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountHuakun_advancevalue_descriptor_;
  metadata.reflection = Sheet_MountHuakun_advancevalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountBloodAttributeDesc::kMTypeFieldNumber;
const int E_MountBloodAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_MountBloodAttributeDesc::E_MountBloodAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountBloodAttributeDesc::InitAsDefaultInstance() {
}

E_MountBloodAttributeDesc::E_MountBloodAttributeDesc(const E_MountBloodAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountBloodAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountBloodAttributeDesc::~E_MountBloodAttributeDesc() {
  SharedDtor();
}

void E_MountBloodAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountBloodAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountBloodAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountBloodAttributeDesc_descriptor_;
}

const E_MountBloodAttributeDesc& E_MountBloodAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountBloodAttributeDesc* E_MountBloodAttributeDesc::default_instance_ = NULL;

E_MountBloodAttributeDesc* E_MountBloodAttributeDesc::New() const {
  return new E_MountBloodAttributeDesc;
}

void E_MountBloodAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountBloodAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountBloodAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountBloodAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountBloodAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountBloodAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountBloodAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountBloodAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountBloodAttributeDesc::MergeFrom(const E_MountBloodAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountBloodAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountBloodAttributeDesc::CopyFrom(const E_MountBloodAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountBloodAttributeDesc::IsInitialized() const {

  return true;
}

void E_MountBloodAttributeDesc::Swap(E_MountBloodAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountBloodAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountBloodAttributeDesc_descriptor_;
  metadata.reflection = E_MountBloodAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountBlood::kMNumFieldNumber;
const int E_MountBlood::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_MountBlood::E_MountBlood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountBlood::InitAsDefaultInstance() {
}

E_MountBlood::E_MountBlood(const E_MountBlood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountBlood::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountBlood::~E_MountBlood() {
  SharedDtor();
}

void E_MountBlood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountBlood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountBlood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountBlood_descriptor_;
}

const E_MountBlood& E_MountBlood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountBlood* E_MountBlood::default_instance_ = NULL;

E_MountBlood* E_MountBlood::New() const {
  return new E_MountBlood;
}

void E_MountBlood::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountBlood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_MountBloodAttributeDesc m_attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountBlood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // repeated .proto_ff.E_MountBloodAttributeDesc m_attribute = 2;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountBlood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // repeated .proto_ff.E_MountBloodAttributeDesc m_attribute = 2;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountBlood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated .proto_ff.E_MountBloodAttributeDesc m_attribute = 2;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountBlood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountBlood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountBlood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountBlood::MergeFrom(const E_MountBlood& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountBlood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountBlood::CopyFrom(const E_MountBlood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountBlood::IsInitialized() const {

  return true;
}

void E_MountBlood::Swap(E_MountBlood* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountBlood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountBlood_descriptor_;
  metadata.reflection = E_MountBlood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountBlood::kEMountBloodListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountBlood::Sheet_MountBlood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountBlood::InitAsDefaultInstance() {
}

Sheet_MountBlood::Sheet_MountBlood(const Sheet_MountBlood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountBlood::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountBlood::~Sheet_MountBlood() {
  SharedDtor();
}

void Sheet_MountBlood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountBlood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountBlood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountBlood_descriptor_;
}

const Sheet_MountBlood& Sheet_MountBlood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountBlood* Sheet_MountBlood::default_instance_ = NULL;

Sheet_MountBlood* Sheet_MountBlood::New() const {
  return new Sheet_MountBlood;
}

void Sheet_MountBlood::Clear() {
  e_mountblood_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountBlood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountBlood E_MountBlood_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountBlood_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mountblood_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountBlood_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountBlood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountBlood E_MountBlood_List = 1;
  for (int i = 0; i < this->e_mountblood_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mountblood_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountBlood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountBlood E_MountBlood_List = 1;
  for (int i = 0; i < this->e_mountblood_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mountblood_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountBlood::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountBlood E_MountBlood_List = 1;
  total_size += 1 * this->e_mountblood_list_size();
  for (int i = 0; i < this->e_mountblood_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mountblood_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountBlood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountBlood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountBlood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountBlood::MergeFrom(const Sheet_MountBlood& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mountblood_list_.MergeFrom(from.e_mountblood_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountBlood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountBlood::CopyFrom(const Sheet_MountBlood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountBlood::IsInitialized() const {

  return true;
}

void Sheet_MountBlood::Swap(Sheet_MountBlood* other) {
  if (other != this) {
    e_mountblood_list_.Swap(&other->e_mountblood_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountBlood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountBlood_descriptor_;
  metadata.reflection = Sheet_MountBlood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_MountBaby_egg::kMIdFieldNumber;
const int E_MountBaby_egg::kMItemFieldNumber;
const int E_MountBaby_egg::kMTimeFieldNumber;
const int E_MountBaby_egg::kMItemboxFieldNumber;
#endif  // !_MSC_VER

E_MountBaby_egg::E_MountBaby_egg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_MountBaby_egg::InitAsDefaultInstance() {
}

E_MountBaby_egg::E_MountBaby_egg(const E_MountBaby_egg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_MountBaby_egg::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_item_ = 0;
  m_time_ = 0;
  m_itembox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_MountBaby_egg::~E_MountBaby_egg() {
  SharedDtor();
}

void E_MountBaby_egg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_MountBaby_egg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_MountBaby_egg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_MountBaby_egg_descriptor_;
}

const E_MountBaby_egg& E_MountBaby_egg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

E_MountBaby_egg* E_MountBaby_egg::default_instance_ = NULL;

E_MountBaby_egg* E_MountBaby_egg::New() const {
  return new E_MountBaby_egg;
}

void E_MountBaby_egg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_item_ = 0;
    m_time_ = 0;
    m_itembox_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_MountBaby_egg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itembox;
        break;
      }

      // optional int32 m_itembox = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itembox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itembox_)));
          set_has_m_itembox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_MountBaby_egg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_item(), output);
  }

  // optional int32 m_time = 3;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_time(), output);
  }

  // optional int32 m_itembox = 4;
  if (has_m_itembox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itembox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_MountBaby_egg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_item(), target);
  }

  // optional int32 m_time = 3;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_time(), target);
  }

  // optional int32 m_itembox = 4;
  if (has_m_itembox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itembox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_MountBaby_egg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

    // optional int32 m_time = 3;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // optional int32 m_itembox = 4;
    if (has_m_itembox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itembox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_MountBaby_egg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_MountBaby_egg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_MountBaby_egg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_MountBaby_egg::MergeFrom(const E_MountBaby_egg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_itembox()) {
      set_m_itembox(from.m_itembox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_MountBaby_egg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_MountBaby_egg::CopyFrom(const E_MountBaby_egg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_MountBaby_egg::IsInitialized() const {

  return true;
}

void E_MountBaby_egg::Swap(E_MountBaby_egg* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_itembox_, other->m_itembox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_MountBaby_egg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_MountBaby_egg_descriptor_;
  metadata.reflection = E_MountBaby_egg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MountBaby_egg::kEMountBabyEggListFieldNumber;
#endif  // !_MSC_VER

Sheet_MountBaby_egg::Sheet_MountBaby_egg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MountBaby_egg::InitAsDefaultInstance() {
}

Sheet_MountBaby_egg::Sheet_MountBaby_egg(const Sheet_MountBaby_egg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MountBaby_egg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MountBaby_egg::~Sheet_MountBaby_egg() {
  SharedDtor();
}

void Sheet_MountBaby_egg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MountBaby_egg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MountBaby_egg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MountBaby_egg_descriptor_;
}

const Sheet_MountBaby_egg& Sheet_MountBaby_egg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mount_2eproto();
  return *default_instance_;
}

Sheet_MountBaby_egg* Sheet_MountBaby_egg::default_instance_ = NULL;

Sheet_MountBaby_egg* Sheet_MountBaby_egg::New() const {
  return new Sheet_MountBaby_egg;
}

void Sheet_MountBaby_egg::Clear() {
  e_mountbaby_egg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MountBaby_egg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_MountBaby_egg E_MountBaby_egg_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_MountBaby_egg_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_mountbaby_egg_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_MountBaby_egg_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MountBaby_egg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_MountBaby_egg E_MountBaby_egg_List = 1;
  for (int i = 0; i < this->e_mountbaby_egg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_mountbaby_egg_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MountBaby_egg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_MountBaby_egg E_MountBaby_egg_List = 1;
  for (int i = 0; i < this->e_mountbaby_egg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_mountbaby_egg_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MountBaby_egg::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_MountBaby_egg E_MountBaby_egg_List = 1;
  total_size += 1 * this->e_mountbaby_egg_list_size();
  for (int i = 0; i < this->e_mountbaby_egg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_mountbaby_egg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MountBaby_egg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MountBaby_egg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MountBaby_egg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MountBaby_egg::MergeFrom(const Sheet_MountBaby_egg& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_mountbaby_egg_list_.MergeFrom(from.e_mountbaby_egg_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MountBaby_egg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MountBaby_egg::CopyFrom(const Sheet_MountBaby_egg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MountBaby_egg::IsInitialized() const {

  return true;
}

void Sheet_MountBaby_egg::Swap(Sheet_MountBaby_egg* other) {
  if (other != this) {
    e_mountbaby_egg_list_.Swap(&other->e_mountbaby_egg_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MountBaby_egg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MountBaby_egg_descriptor_;
  metadata.reflection = Sheet_MountBaby_egg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
