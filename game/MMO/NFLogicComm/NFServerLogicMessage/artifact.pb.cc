// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifact.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artifact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* artifactartifactattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  artifactartifactattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* artifactartifact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  artifactartifact_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_artifactartifact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_artifactartifact_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_artifact_2eproto() {
  protobuf_AddDesc_artifact_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artifact.proto");
  GOOGLE_CHECK(file != NULL);
  artifactartifactattributeDesc_descriptor_ = file->message_type(0);
  static const int artifactartifactattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifactattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifactattributeDesc, value_),
  };
  artifactartifactattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      artifactartifactattributeDesc_descriptor_,
      artifactartifactattributeDesc::default_instance_,
      artifactartifactattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifactattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifactattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(artifactartifactattributeDesc));
  artifactartifact_descriptor_ = file->message_type(1);
  static const int artifactartifact_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, previewres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, skillui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, artifacttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, attribute_),
  };
  artifactartifact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      artifactartifact_descriptor_,
      artifactartifact::default_instance_,
      artifactartifact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(artifactartifact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(artifactartifact));
  Sheet_artifactartifact_descriptor_ = file->message_type(2);
  static const int Sheet_artifactartifact_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_artifactartifact, artifactartifact_list_),
  };
  Sheet_artifactartifact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_artifactartifact_descriptor_,
      Sheet_artifactartifact::default_instance_,
      Sheet_artifactartifact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_artifactartifact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_artifactartifact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_artifactartifact));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artifact_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    artifactartifactattributeDesc_descriptor_, &artifactartifactattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    artifactartifact_descriptor_, &artifactartifact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_artifactartifact_descriptor_, &Sheet_artifactartifact::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artifact_2eproto() {
  delete artifactartifactattributeDesc::default_instance_;
  delete artifactartifactattributeDesc_reflection_;
  delete artifactartifact::default_instance_;
  delete artifactartifact_reflection_;
  delete Sheet_artifactartifact::default_instance_;
  delete Sheet_artifactartifact_reflection_;
}

void protobuf_AddDesc_artifact_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016artifact.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"M\n\035artifactartifactattributeDe"
    "sc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B"
    "\007\302\377\024\003\345\200\274\"\375\004\n\020artifactartifact\022\030\n\002id\030\001 \001("
    "\003B\014\302\377\024\010\347\245\236\345\231\250ID\022&\n\010resource\030\002 \001(\tB\024\302\377\024\014\350"
    "\265\204\346\272\220\345\275\242\350\261\241\220\301\024 \022(\n\npreviewRes\030\003 \001(\tB\024\302\377\024"
    "\014\345\261\225\347\244\272\350\265\204\346\272\220\220\301\024 \022\"\n\014professionID\030\004 \001(\005B"
    "\014\302\377\024\010\350\201\214\344\270\232ID\022\034\n\004name\030\005 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220"
    "\301\024 \022(\n\nactiveDesc\030\006 \001(\tB\024\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277"
    "\260\220\301\024H\022\033\n\007quality\030\007 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022\"\n\006st"
    "arId\030\010 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022,\n\007starNu"
    "m\030\t \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\227\001\022&\n\006"
    "starUp\030\n \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022<\n\007"
    "starBer\030\013 \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345\261\236\346\200\247\345\242\236"
    "\345\212\240\347\232\204\344\270\207\345\210\206\346\257\224\345\200\274\022\033\n\005skill\030\014 \001(\003B\014\302\377\024\010\346"
    "\212\200\350\203\275id\022%\n\007skillUi\030\r \001(\tB\024\302\377\024\014\346\212\200\350\203\275\346\217\217\350"
    "\277\260\220\301\024O\022&\n\014artifactType\030\016 \001(\005B\020\302\377\024\014\347\245\236\345\231\250"
    "\347\247\215\347\261\273\022P\n\tattribute\030\017 \003(\0132\'.proto_ff.art"
    "ifactartifactattributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261"
    "\236\346\200\247\210\301\024\005\"Z\n\026Sheet_artifactartifact\022@\n\025ar"
    "tifactartifact_List\030\001 \003(\0132\032.proto_ff.art"
    "ifactartifactB\005\210\301\024\200\001", 860);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artifact.proto", &protobuf_RegisterTypes);
  artifactartifactattributeDesc::default_instance_ = new artifactartifactattributeDesc();
  artifactartifact::default_instance_ = new artifactartifact();
  Sheet_artifactartifact::default_instance_ = new Sheet_artifactartifact();
  artifactartifactattributeDesc::default_instance_->InitAsDefaultInstance();
  artifactartifact::default_instance_->InitAsDefaultInstance();
  Sheet_artifactartifact::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artifact_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artifact_2eproto {
  StaticDescriptorInitializer_artifact_2eproto() {
    protobuf_AddDesc_artifact_2eproto();
  }
} static_descriptor_initializer_artifact_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int artifactartifactattributeDesc::kTypeFieldNumber;
const int artifactartifactattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

artifactartifactattributeDesc::artifactartifactattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void artifactartifactattributeDesc::InitAsDefaultInstance() {
}

artifactartifactattributeDesc::artifactartifactattributeDesc(const artifactartifactattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void artifactartifactattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

artifactartifactattributeDesc::~artifactartifactattributeDesc() {
  SharedDtor();
}

void artifactartifactattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void artifactartifactattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* artifactartifactattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return artifactartifactattributeDesc_descriptor_;
}

const artifactartifactattributeDesc& artifactartifactattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();
  return *default_instance_;
}

artifactartifactattributeDesc* artifactartifactattributeDesc::default_instance_ = NULL;

artifactartifactattributeDesc* artifactartifactattributeDesc::New() const {
  return new artifactartifactattributeDesc;
}

void artifactartifactattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool artifactartifactattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void artifactartifactattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* artifactartifactattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int artifactartifactattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void artifactartifactattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const artifactartifactattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const artifactartifactattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void artifactartifactattributeDesc::MergeFrom(const artifactartifactattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void artifactartifactattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void artifactartifactattributeDesc::CopyFrom(const artifactartifactattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool artifactartifactattributeDesc::IsInitialized() const {

  return true;
}

void artifactartifactattributeDesc::Swap(artifactartifactattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata artifactartifactattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = artifactartifactattributeDesc_descriptor_;
  metadata.reflection = artifactartifactattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int artifactartifact::kIdFieldNumber;
const int artifactartifact::kResourceFieldNumber;
const int artifactartifact::kPreviewResFieldNumber;
const int artifactartifact::kProfessionIDFieldNumber;
const int artifactartifact::kNameFieldNumber;
const int artifactartifact::kActiveDescFieldNumber;
const int artifactartifact::kQualityFieldNumber;
const int artifactartifact::kStarIdFieldNumber;
const int artifactartifact::kStarNumFieldNumber;
const int artifactartifact::kStarUpFieldNumber;
const int artifactartifact::kStarBerFieldNumber;
const int artifactartifact::kSkillFieldNumber;
const int artifactartifact::kSkillUiFieldNumber;
const int artifactartifact::kArtifactTypeFieldNumber;
const int artifactartifact::kAttributeFieldNumber;
#endif  // !_MSC_VER

artifactartifact::artifactartifact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void artifactartifact::InitAsDefaultInstance() {
}

artifactartifact::artifactartifact(const artifactartifact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void artifactartifact::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  previewres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starup_ = 0;
  starber_ = 0;
  skill_ = GOOGLE_LONGLONG(0);
  skillui_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  artifacttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

artifactartifact::~artifactartifact() {
  SharedDtor();
}

void artifactartifact::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (previewres_ != &::google::protobuf::internal::kEmptyString) {
    delete previewres_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (skillui_ != &::google::protobuf::internal::kEmptyString) {
    delete skillui_;
  }
  if (this != default_instance_) {
  }
}

void artifactartifact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* artifactartifact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return artifactartifact_descriptor_;
}

const artifactartifact& artifactartifact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();
  return *default_instance_;
}

artifactartifact* artifactartifact::default_instance_ = NULL;

artifactartifact* artifactartifact::New() const {
  return new artifactartifact;
}

void artifactartifact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_previewres()) {
      if (previewres_ != &::google::protobuf::internal::kEmptyString) {
        previewres_->clear();
      }
    }
    professionid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    quality_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
    starup_ = 0;
    starber_ = 0;
    skill_ = GOOGLE_LONGLONG(0);
    if (has_skillui()) {
      if (skillui_ != &::google::protobuf::internal::kEmptyString) {
        skillui_->clear();
      }
    }
    artifacttype_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool artifactartifact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_previewRes;
        break;
      }

      // optional string previewRes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previewRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previewres()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->previewres().data(), this->previewres().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_professionID;
        break;
      }

      // optional int32 professionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_starId;
        break;
      }

      // optional int64 starId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_starNum;
        break;
      }

      // optional string starNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_starUp;
        break;
      }

      // optional int32 starUp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starup_)));
          set_has_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_starBer;
        break;
      }

      // optional int32 starBer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starber_)));
          set_has_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skill;
        break;
      }

      // optional int64 skill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_skillUi;
        break;
      }

      // optional string skillUi = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillUi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillui()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skillui().data(), this->skillui().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_artifactType;
        break;
      }

      // optional int32 artifactType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_artifactType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &artifacttype_)));
          set_has_artifacttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.artifactartifactattributeDesc attribute = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void artifactartifact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string previewRes = 3;
  if (has_previewres()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->previewres().data(), this->previewres().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->previewres(), output);
  }

  // optional int32 professionID = 4;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->professionid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional string activeDesc = 6;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->activedesc(), output);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  // optional int64 starId = 8;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->starid(), output);
  }

  // optional string starNum = 9;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->starnum(), output);
  }

  // optional int32 starUp = 10;
  if (has_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->starup(), output);
  }

  // optional int32 starBer = 11;
  if (has_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->starber(), output);
  }

  // optional int64 skill = 12;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->skill(), output);
  }

  // optional string skillUi = 13;
  if (has_skillui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillui().data(), this->skillui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->skillui(), output);
  }

  // optional int32 artifactType = 14;
  if (has_artifacttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->artifacttype(), output);
  }

  // repeated .proto_ff.artifactartifactattributeDesc attribute = 15;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* artifactartifact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional string previewRes = 3;
  if (has_previewres()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->previewres().data(), this->previewres().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->previewres(), target);
  }

  // optional int32 professionID = 4;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->professionid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional string activeDesc = 6;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->activedesc(), target);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  // optional int64 starId = 8;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->starid(), target);
  }

  // optional string starNum = 9;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->starnum(), target);
  }

  // optional int32 starUp = 10;
  if (has_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->starup(), target);
  }

  // optional int32 starBer = 11;
  if (has_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->starber(), target);
  }

  // optional int64 skill = 12;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->skill(), target);
  }

  // optional string skillUi = 13;
  if (has_skillui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillui().data(), this->skillui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->skillui(), target);
  }

  // optional int32 artifactType = 14;
  if (has_artifacttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->artifacttype(), target);
  }

  // repeated .proto_ff.artifactartifactattributeDesc attribute = 15;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int artifactartifact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string previewRes = 3;
    if (has_previewres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previewres());
    }

    // optional int32 professionID = 4;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 6;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 starId = 8;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string starNum = 9;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

    // optional int32 starUp = 10;
    if (has_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starup());
    }

    // optional int32 starBer = 11;
    if (has_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starber());
    }

    // optional int64 skill = 12;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skill());
    }

    // optional string skillUi = 13;
    if (has_skillui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillui());
    }

    // optional int32 artifactType = 14;
    if (has_artifacttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->artifacttype());
    }

  }
  // repeated .proto_ff.artifactartifactattributeDesc attribute = 15;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void artifactartifact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const artifactartifact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const artifactartifact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void artifactartifact::MergeFrom(const artifactartifact& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_previewres()) {
      set_previewres(from.previewres());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_starup()) {
      set_starup(from.starup());
    }
    if (from.has_starber()) {
      set_starber(from.starber());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_skillui()) {
      set_skillui(from.skillui());
    }
    if (from.has_artifacttype()) {
      set_artifacttype(from.artifacttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void artifactartifact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void artifactartifact::CopyFrom(const artifactartifact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool artifactartifact::IsInitialized() const {

  return true;
}

void artifactartifact::Swap(artifactartifact* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(previewres_, other->previewres_);
    std::swap(professionid_, other->professionid_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(quality_, other->quality_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(starup_, other->starup_);
    std::swap(starber_, other->starber_);
    std::swap(skill_, other->skill_);
    std::swap(skillui_, other->skillui_);
    std::swap(artifacttype_, other->artifacttype_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata artifactartifact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = artifactartifact_descriptor_;
  metadata.reflection = artifactartifact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_artifactartifact::kArtifactartifactListFieldNumber;
#endif  // !_MSC_VER

Sheet_artifactartifact::Sheet_artifactartifact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_artifactartifact::InitAsDefaultInstance() {
}

Sheet_artifactartifact::Sheet_artifactartifact(const Sheet_artifactartifact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_artifactartifact::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_artifactartifact::~Sheet_artifactartifact() {
  SharedDtor();
}

void Sheet_artifactartifact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_artifactartifact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_artifactartifact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_artifactartifact_descriptor_;
}

const Sheet_artifactartifact& Sheet_artifactartifact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();
  return *default_instance_;
}

Sheet_artifactartifact* Sheet_artifactartifact::default_instance_ = NULL;

Sheet_artifactartifact* Sheet_artifactartifact::New() const {
  return new Sheet_artifactartifact;
}

void Sheet_artifactartifact::Clear() {
  artifactartifact_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_artifactartifact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.artifactartifact artifactartifact_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artifactartifact_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_artifactartifact_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_artifactartifact_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_artifactartifact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.artifactartifact artifactartifact_List = 1;
  for (int i = 0; i < this->artifactartifact_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->artifactartifact_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_artifactartifact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.artifactartifact artifactartifact_List = 1;
  for (int i = 0; i < this->artifactartifact_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->artifactartifact_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_artifactartifact::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.artifactartifact artifactartifact_List = 1;
  total_size += 1 * this->artifactartifact_list_size();
  for (int i = 0; i < this->artifactartifact_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->artifactartifact_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_artifactartifact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_artifactartifact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_artifactartifact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_artifactartifact::MergeFrom(const Sheet_artifactartifact& from) {
  GOOGLE_CHECK_NE(&from, this);
  artifactartifact_list_.MergeFrom(from.artifactartifact_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_artifactartifact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_artifactartifact::CopyFrom(const Sheet_artifactartifact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_artifactartifact::IsInitialized() const {

  return true;
}

void Sheet_artifactartifact::Swap(Sheet_artifactartifact* other) {
  if (other != this) {
    artifactartifact_list_.Swap(&other->artifactartifact_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_artifactartifact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_artifactartifact_descriptor_;
  metadata.reflection = Sheet_artifactartifact_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
