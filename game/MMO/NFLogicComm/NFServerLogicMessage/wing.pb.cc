// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* wingwingattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingwingattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingwing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingwing_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_wingwing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_wingwing_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingchangeattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingchangeattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_wingchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_wingchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingfragmentattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingfragmentattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingfragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingfragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_wingfragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_wingfragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingstarUpupAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingstarUpupAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* wingstarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wingstarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_wingstarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_wingstarUp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wing_2eproto() {
  protobuf_AddDesc_wing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wing.proto");
  GOOGLE_CHECK(file != NULL);
  wingwingattributeDesc_descriptor_ = file->message_type(0);
  static const int wingwingattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwingattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwingattributeDesc, value_),
  };
  wingwingattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingwingattributeDesc_descriptor_,
      wingwingattributeDesc::default_instance_,
      wingwingattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwingattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwingattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingwingattributeDesc));
  wingwing_descriptor_ = file->message_type(1);
  static const int wingwing_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, reallevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, materialexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, breakmaterialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, breakmaterialcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, fragmentid_),
  };
  wingwing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingwing_descriptor_,
      wingwing::default_instance_,
      wingwing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingwing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingwing));
  Sheet_wingwing_descriptor_ = file->message_type(2);
  static const int Sheet_wingwing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingwing, wingwing_list_),
  };
  Sheet_wingwing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_wingwing_descriptor_,
      Sheet_wingwing::default_instance_,
      Sheet_wingwing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingwing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingwing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_wingwing));
  wingchangeattributeDesc_descriptor_ = file->message_type(3);
  static const int wingchangeattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchangeattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchangeattributeDesc, value_),
  };
  wingchangeattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingchangeattributeDesc_descriptor_,
      wingchangeattributeDesc::default_instance_,
      wingchangeattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchangeattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchangeattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingchangeattributeDesc));
  wingchange_descriptor_ = file->message_type(4);
  static const int wingchange_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, attribute_),
  };
  wingchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingchange_descriptor_,
      wingchange::default_instance_,
      wingchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingchange));
  Sheet_wingchange_descriptor_ = file->message_type(5);
  static const int Sheet_wingchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingchange, wingchange_list_),
  };
  Sheet_wingchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_wingchange_descriptor_,
      Sheet_wingchange::default_instance_,
      Sheet_wingchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_wingchange));
  wingfragmentattributeDesc_descriptor_ = file->message_type(6);
  static const int wingfragmentattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragmentattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragmentattributeDesc, value_),
  };
  wingfragmentattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingfragmentattributeDesc_descriptor_,
      wingfragmentattributeDesc::default_instance_,
      wingfragmentattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragmentattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragmentattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingfragmentattributeDesc));
  wingfragment_descriptor_ = file->message_type(7);
  static const int wingfragment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragment, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragment, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragment, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragment, attribute_),
  };
  wingfragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingfragment_descriptor_,
      wingfragment::default_instance_,
      wingfragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingfragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingfragment));
  Sheet_wingfragment_descriptor_ = file->message_type(8);
  static const int Sheet_wingfragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingfragment, wingfragment_list_),
  };
  Sheet_wingfragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_wingfragment_descriptor_,
      Sheet_wingfragment::default_instance_,
      Sheet_wingfragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingfragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingfragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_wingfragment));
  wingstarUpupAttributeDesc_descriptor_ = file->message_type(9);
  static const int wingstarUpupAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUpupAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUpupAttributeDesc, value_),
  };
  wingstarUpupAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingstarUpupAttributeDesc_descriptor_,
      wingstarUpupAttributeDesc::default_instance_,
      wingstarUpupAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUpupAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUpupAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingstarUpupAttributeDesc));
  wingstarUp_descriptor_ = file->message_type(10);
  static const int wingstarUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUp, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUp, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUp, upattribute_),
  };
  wingstarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wingstarUp_descriptor_,
      wingstarUp::default_instance_,
      wingstarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wingstarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wingstarUp));
  Sheet_wingstarUp_descriptor_ = file->message_type(11);
  static const int Sheet_wingstarUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingstarUp, wingstarup_list_),
  };
  Sheet_wingstarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_wingstarUp_descriptor_,
      Sheet_wingstarUp::default_instance_,
      Sheet_wingstarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingstarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_wingstarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_wingstarUp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingwingattributeDesc_descriptor_, &wingwingattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingwing_descriptor_, &wingwing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_wingwing_descriptor_, &Sheet_wingwing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingchangeattributeDesc_descriptor_, &wingchangeattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingchange_descriptor_, &wingchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_wingchange_descriptor_, &Sheet_wingchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingfragmentattributeDesc_descriptor_, &wingfragmentattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingfragment_descriptor_, &wingfragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_wingfragment_descriptor_, &Sheet_wingfragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingstarUpupAttributeDesc_descriptor_, &wingstarUpupAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wingstarUp_descriptor_, &wingstarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_wingstarUp_descriptor_, &Sheet_wingstarUp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wing_2eproto() {
  delete wingwingattributeDesc::default_instance_;
  delete wingwingattributeDesc_reflection_;
  delete wingwing::default_instance_;
  delete wingwing_reflection_;
  delete Sheet_wingwing::default_instance_;
  delete Sheet_wingwing_reflection_;
  delete wingchangeattributeDesc::default_instance_;
  delete wingchangeattributeDesc_reflection_;
  delete wingchange::default_instance_;
  delete wingchange_reflection_;
  delete Sheet_wingchange::default_instance_;
  delete Sheet_wingchange_reflection_;
  delete wingfragmentattributeDesc::default_instance_;
  delete wingfragmentattributeDesc_reflection_;
  delete wingfragment::default_instance_;
  delete wingfragment_reflection_;
  delete Sheet_wingfragment::default_instance_;
  delete Sheet_wingfragment_reflection_;
  delete wingstarUpupAttributeDesc::default_instance_;
  delete wingstarUpupAttributeDesc_reflection_;
  delete wingstarUp::default_instance_;
  delete wingstarUp_reflection_;
  delete Sheet_wingstarUp::default_instance_;
  delete Sheet_wingstarUp_reflection_;
}

void protobuf_AddDesc_wing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nwing.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"E\n\025wingwingattributeDesc\022\024\n\004type\030\001"
    " \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\247\004\n"
    "\010wingwing\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\347\277\205\350\206\200ID\022&\n\010r"
    "esource\030\002 \001(\tB\024\302\377\024\014\350\265\204\346\272\220\345\275\242\350\261\241\220\301\024 \022\034\n\004n"
    "ame\030\003 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024 \022(\n\nactiveDesc\030"
    "\004 \001(\tB\024\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260\220\301\0243\022\035\n\trealLevel"
    "\030\005 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022&\n\nmaterialID\030\006 \001(\003B\022"
    "\302\377\024\016\350\277\233\351\230\266\346\235\220\346\226\231ID\022.\n\013materialEXP\030\007 \001(\005B"
    "\031\302\377\024\025\350\277\233\351\230\266\346\235\220\346\226\231\347\273\217\351\252\214\345\200\274\022#\n\003exp\030\010 \001(\005B"
    "\026\302\377\024\022\347\277\205\350\206\200\345\215\207\347\272\247\347\273\217\351\252\214\022#\n\007skillID\030\t \001(\003"
    "B\022\302\377\024\016\350\247\243\351\224\201\346\212\200\350\203\275ID\022+\n\017BreakMaterialID\030"
    "\n \001(\003B\022\302\377\024\016\347\252\201\347\240\264\346\235\220\346\226\231ID\0221\n\021BreakMateri"
    "alCost\030\013 \001(\005B\026\302\377\024\022\347\252\201\347\240\264\346\235\220\346\226\231\346\225\260\351\207\217\022H\n\t"
    "attribute\030\014 \003(\0132\037.proto_ff.wingwingattri"
    "buteDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\022&\n\nfragme"
    "ntID\030\r \003(\003B\022\302\377\024\016\345\205\263\350\201\224\347\242\216\347\211\207ID\"B\n\016Sheet_"
    "wingwing\0220\n\rwingwing_List\030\001 \003(\0132\022.proto_"
    "ff.wingwingB\005\210\301\024\310\004\"G\n\027wingchangeattribut"
    "eDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001"
    "(\005B\007\302\377\024\003\345\200\274\"\345\003\n\nwingchange\022\030\n\002id\030\001 \001(\003B\014"
    "\302\377\024\010\347\277\205\350\206\200ID\022&\n\010resource\030\002 \001(\tB\024\302\377\024\014\350\265\204\346"
    "\272\220\345\275\242\350\261\241\220\301\024 \022\034\n\004name\030\003 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301"
    "\024 \022(\n\nactiveDesc\030\004 \001(\tB\024\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260"
    "\220\301\024W\022\033\n\007quality\030\005 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022\"\n\006sta"
    "rId\030\006 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022,\n\007starNum"
    "\030\007 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\227\001\022&\n\006s"
    "tarUp\030\010 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022<\n\007s"
    "tarBer\030\t \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345\261\236\346\200\247\345\242\236\345"
    "\212\240\347\232\204\344\270\207\345\210\206\346\257\224\345\200\274\022,\n\rupAttributeId\030\n \001(\003"
    "B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022J\n\tattribute\030\013 \003"
    "(\0132!.proto_ff.wingchangeattributeDescB\024\302"
    "\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\005\"H\n\020Sheet_wingchange\022"
    "4\n\017wingchange_List\030\001 \003(\0132\024.proto_ff.wing"
    "changeB\005\210\301\024\204\001\"I\n\031wingfragmentattributeDe"
    "sc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B"
    "\007\302\377\024\003\345\200\274\"\303\001\n\014wingfragment\022 \n\nfragmentID\030"
    "\001 \001(\003B\014\302\377\024\010\347\242\216\347\211\207ID\022\032\n\004item\030\002 \001(\003B\014\302\377\024\010\347"
    "\211\251\345\223\201ID\022\'\n\007itemNum\030\003 \001(\005B\026\302\377\024\022\347\242\216\347\211\207\344\275\277\347"
    "\224\250\344\270\212\351\231\220\022L\n\tattribute\030\004 \003(\0132#.proto_ff.w"
    "ingfragmentattributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346"
    "\200\247\210\301\024\003\"M\n\022Sheet_wingfragment\0227\n\021wingfrag"
    "ment_List\030\001 \003(\0132\026.proto_ff.wingfragmentB"
    "\004\210\301\024k\"I\n\031wingstarUpupAttributeDesc\022\024\n\004ty"
    "pe\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274"
    "\"\300\001\n\nwingstarUp\022\030\n\002ID\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200I"
    "D\022,\n\rupAttributeId\030\002 \001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346"
    "\200\247\347\273\204ID\022\032\n\006starID\030\003 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022N\n\013u"
    "pAttribute\030\004 \003(\0132#.proto_ff.wingstarUpup"
    "AttributeDescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\002\"G\n\020S"
    "heet_wingstarUp\0223\n\017wingstarUp_List\030\001 \003(\013"
    "2\024.proto_ff.wingstarUpB\004\210\301\024|", 2068);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wing.proto", &protobuf_RegisterTypes);
  wingwingattributeDesc::default_instance_ = new wingwingattributeDesc();
  wingwing::default_instance_ = new wingwing();
  Sheet_wingwing::default_instance_ = new Sheet_wingwing();
  wingchangeattributeDesc::default_instance_ = new wingchangeattributeDesc();
  wingchange::default_instance_ = new wingchange();
  Sheet_wingchange::default_instance_ = new Sheet_wingchange();
  wingfragmentattributeDesc::default_instance_ = new wingfragmentattributeDesc();
  wingfragment::default_instance_ = new wingfragment();
  Sheet_wingfragment::default_instance_ = new Sheet_wingfragment();
  wingstarUpupAttributeDesc::default_instance_ = new wingstarUpupAttributeDesc();
  wingstarUp::default_instance_ = new wingstarUp();
  Sheet_wingstarUp::default_instance_ = new Sheet_wingstarUp();
  wingwingattributeDesc::default_instance_->InitAsDefaultInstance();
  wingwing::default_instance_->InitAsDefaultInstance();
  Sheet_wingwing::default_instance_->InitAsDefaultInstance();
  wingchangeattributeDesc::default_instance_->InitAsDefaultInstance();
  wingchange::default_instance_->InitAsDefaultInstance();
  Sheet_wingchange::default_instance_->InitAsDefaultInstance();
  wingfragmentattributeDesc::default_instance_->InitAsDefaultInstance();
  wingfragment::default_instance_->InitAsDefaultInstance();
  Sheet_wingfragment::default_instance_->InitAsDefaultInstance();
  wingstarUpupAttributeDesc::default_instance_->InitAsDefaultInstance();
  wingstarUp::default_instance_->InitAsDefaultInstance();
  Sheet_wingstarUp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wing_2eproto {
  StaticDescriptorInitializer_wing_2eproto() {
    protobuf_AddDesc_wing_2eproto();
  }
} static_descriptor_initializer_wing_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int wingwingattributeDesc::kTypeFieldNumber;
const int wingwingattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

wingwingattributeDesc::wingwingattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wingwingattributeDesc::InitAsDefaultInstance() {
}

wingwingattributeDesc::wingwingattributeDesc(const wingwingattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wingwingattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingwingattributeDesc::~wingwingattributeDesc() {
  SharedDtor();
}

void wingwingattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wingwingattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingwingattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingwingattributeDesc_descriptor_;
}

const wingwingattributeDesc& wingwingattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

wingwingattributeDesc* wingwingattributeDesc::default_instance_ = NULL;

wingwingattributeDesc* wingwingattributeDesc::New() const {
  return new wingwingattributeDesc;
}

void wingwingattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingwingattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wingwingattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wingwingattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wingwingattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingwingattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingwingattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingwingattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingwingattributeDesc::MergeFrom(const wingwingattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingwingattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingwingattributeDesc::CopyFrom(const wingwingattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingwingattributeDesc::IsInitialized() const {

  return true;
}

void wingwingattributeDesc::Swap(wingwingattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingwingattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingwingattributeDesc_descriptor_;
  metadata.reflection = wingwingattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wingwing::kIdFieldNumber;
const int wingwing::kResourceFieldNumber;
const int wingwing::kNameFieldNumber;
const int wingwing::kActiveDescFieldNumber;
const int wingwing::kRealLevelFieldNumber;
const int wingwing::kMaterialIDFieldNumber;
const int wingwing::kMaterialEXPFieldNumber;
const int wingwing::kExpFieldNumber;
const int wingwing::kSkillIDFieldNumber;
const int wingwing::kBreakMaterialIDFieldNumber;
const int wingwing::kBreakMaterialCostFieldNumber;
const int wingwing::kAttributeFieldNumber;
const int wingwing::kFragmentIDFieldNumber;
#endif  // !_MSC_VER

wingwing::wingwing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wingwing::InitAsDefaultInstance() {
}

wingwing::wingwing(const wingwing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wingwing::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reallevel_ = 0;
  materialid_ = GOOGLE_LONGLONG(0);
  materialexp_ = 0;
  exp_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  breakmaterialid_ = GOOGLE_LONGLONG(0);
  breakmaterialcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingwing::~wingwing() {
  SharedDtor();
}

void wingwing::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (this != default_instance_) {
  }
}

void wingwing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingwing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingwing_descriptor_;
}

const wingwing& wingwing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

wingwing* wingwing::default_instance_ = NULL;

wingwing* wingwing::New() const {
  return new wingwing;
}

void wingwing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    reallevel_ = 0;
    materialid_ = GOOGLE_LONGLONG(0);
    materialexp_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skillid_ = GOOGLE_LONGLONG(0);
    breakmaterialid_ = GOOGLE_LONGLONG(0);
    breakmaterialcost_ = 0;
  }
  attribute_.Clear();
  fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingwing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_realLevel;
        break;
      }

      // optional int32 realLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reallevel_)));
          set_has_reallevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_materialID;
        break;
      }

      // optional int64 materialID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_materialEXP;
        break;
      }

      // optional int32 materialEXP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materialEXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialexp_)));
          set_has_materialexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skillID;
        break;
      }

      // optional int64 skillID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BreakMaterialID;
        break;
      }

      // optional int64 BreakMaterialID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BreakMaterialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &breakmaterialid_)));
          set_has_breakmaterialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_BreakMaterialCost;
        break;
      }

      // optional int32 BreakMaterialCost = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BreakMaterialCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breakmaterialcost_)));
          set_has_breakmaterialcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.wingwingattributeDesc attribute = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_attribute;
        if (input->ExpectTag(104)) goto parse_fragmentID;
        break;
      }

      // repeated int64 fragmentID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 104, input, this->mutable_fragmentid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fragmentid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fragmentID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wingwing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activedesc(), output);
  }

  // optional int32 realLevel = 5;
  if (has_reallevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reallevel(), output);
  }

  // optional int64 materialID = 6;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->materialid(), output);
  }

  // optional int32 materialEXP = 7;
  if (has_materialexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->materialexp(), output);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // optional int64 skillID = 9;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->skillid(), output);
  }

  // optional int64 BreakMaterialID = 10;
  if (has_breakmaterialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->breakmaterialid(), output);
  }

  // optional int32 BreakMaterialCost = 11;
  if (has_breakmaterialcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->breakmaterialcost(), output);
  }

  // repeated .proto_ff.wingwingattributeDesc attribute = 12;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attribute(i), output);
  }

  // repeated int64 fragmentID = 13;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      13, this->fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wingwing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activedesc(), target);
  }

  // optional int32 realLevel = 5;
  if (has_reallevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reallevel(), target);
  }

  // optional int64 materialID = 6;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->materialid(), target);
  }

  // optional int32 materialEXP = 7;
  if (has_materialexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->materialexp(), target);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // optional int64 skillID = 9;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->skillid(), target);
  }

  // optional int64 BreakMaterialID = 10;
  if (has_breakmaterialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->breakmaterialid(), target);
  }

  // optional int32 BreakMaterialCost = 11;
  if (has_breakmaterialcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->breakmaterialcost(), target);
  }

  // repeated .proto_ff.wingwingattributeDesc attribute = 12;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->attribute(i), target);
  }

  // repeated int64 fragmentID = 13;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(13, this->fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wingwing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 4;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional int32 realLevel = 5;
    if (has_reallevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reallevel());
    }

    // optional int64 materialID = 6;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->materialid());
    }

    // optional int32 materialEXP = 7;
    if (has_materialexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialexp());
    }

    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 skillID = 9;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

    // optional int64 BreakMaterialID = 10;
    if (has_breakmaterialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->breakmaterialid());
    }

    // optional int32 BreakMaterialCost = 11;
    if (has_breakmaterialcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breakmaterialcost());
    }

  }
  // repeated .proto_ff.wingwingattributeDesc attribute = 12;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated int64 fragmentID = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fragmentid(i));
    }
    total_size += 1 * this->fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingwing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingwing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingwing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingwing::MergeFrom(const wingwing& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  fragmentid_.MergeFrom(from.fragmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_reallevel()) {
      set_reallevel(from.reallevel());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_materialexp()) {
      set_materialexp(from.materialexp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_breakmaterialid()) {
      set_breakmaterialid(from.breakmaterialid());
    }
    if (from.has_breakmaterialcost()) {
      set_breakmaterialcost(from.breakmaterialcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingwing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingwing::CopyFrom(const wingwing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingwing::IsInitialized() const {

  return true;
}

void wingwing::Swap(wingwing* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(reallevel_, other->reallevel_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialexp_, other->materialexp_);
    std::swap(exp_, other->exp_);
    std::swap(skillid_, other->skillid_);
    std::swap(breakmaterialid_, other->breakmaterialid_);
    std::swap(breakmaterialcost_, other->breakmaterialcost_);
    attribute_.Swap(&other->attribute_);
    fragmentid_.Swap(&other->fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingwing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingwing_descriptor_;
  metadata.reflection = wingwing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_wingwing::kWingwingListFieldNumber;
#endif  // !_MSC_VER

Sheet_wingwing::Sheet_wingwing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_wingwing::InitAsDefaultInstance() {
}

Sheet_wingwing::Sheet_wingwing(const Sheet_wingwing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_wingwing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_wingwing::~Sheet_wingwing() {
  SharedDtor();
}

void Sheet_wingwing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_wingwing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_wingwing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_wingwing_descriptor_;
}

const Sheet_wingwing& Sheet_wingwing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

Sheet_wingwing* Sheet_wingwing::default_instance_ = NULL;

Sheet_wingwing* Sheet_wingwing::New() const {
  return new Sheet_wingwing;
}

void Sheet_wingwing::Clear() {
  wingwing_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_wingwing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.wingwing wingwing_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingwing_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wingwing_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wingwing_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_wingwing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.wingwing wingwing_List = 1;
  for (int i = 0; i < this->wingwing_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wingwing_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_wingwing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.wingwing wingwing_List = 1;
  for (int i = 0; i < this->wingwing_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wingwing_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_wingwing::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.wingwing wingwing_List = 1;
  total_size += 1 * this->wingwing_list_size();
  for (int i = 0; i < this->wingwing_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wingwing_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_wingwing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_wingwing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_wingwing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_wingwing::MergeFrom(const Sheet_wingwing& from) {
  GOOGLE_CHECK_NE(&from, this);
  wingwing_list_.MergeFrom(from.wingwing_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_wingwing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_wingwing::CopyFrom(const Sheet_wingwing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_wingwing::IsInitialized() const {

  return true;
}

void Sheet_wingwing::Swap(Sheet_wingwing* other) {
  if (other != this) {
    wingwing_list_.Swap(&other->wingwing_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_wingwing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_wingwing_descriptor_;
  metadata.reflection = Sheet_wingwing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wingchangeattributeDesc::kTypeFieldNumber;
const int wingchangeattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

wingchangeattributeDesc::wingchangeattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wingchangeattributeDesc::InitAsDefaultInstance() {
}

wingchangeattributeDesc::wingchangeattributeDesc(const wingchangeattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wingchangeattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingchangeattributeDesc::~wingchangeattributeDesc() {
  SharedDtor();
}

void wingchangeattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wingchangeattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingchangeattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingchangeattributeDesc_descriptor_;
}

const wingchangeattributeDesc& wingchangeattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

wingchangeattributeDesc* wingchangeattributeDesc::default_instance_ = NULL;

wingchangeattributeDesc* wingchangeattributeDesc::New() const {
  return new wingchangeattributeDesc;
}

void wingchangeattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingchangeattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wingchangeattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wingchangeattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wingchangeattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingchangeattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingchangeattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingchangeattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingchangeattributeDesc::MergeFrom(const wingchangeattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingchangeattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingchangeattributeDesc::CopyFrom(const wingchangeattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingchangeattributeDesc::IsInitialized() const {

  return true;
}

void wingchangeattributeDesc::Swap(wingchangeattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingchangeattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingchangeattributeDesc_descriptor_;
  metadata.reflection = wingchangeattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wingchange::kIdFieldNumber;
const int wingchange::kResourceFieldNumber;
const int wingchange::kNameFieldNumber;
const int wingchange::kActiveDescFieldNumber;
const int wingchange::kQualityFieldNumber;
const int wingchange::kStarIdFieldNumber;
const int wingchange::kStarNumFieldNumber;
const int wingchange::kStarUpFieldNumber;
const int wingchange::kStarBerFieldNumber;
const int wingchange::kUpAttributeIdFieldNumber;
const int wingchange::kAttributeFieldNumber;
#endif  // !_MSC_VER

wingchange::wingchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wingchange::InitAsDefaultInstance() {
}

wingchange::wingchange(const wingchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wingchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starup_ = 0;
  starber_ = 0;
  upattributeid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingchange::~wingchange() {
  SharedDtor();
}

void wingchange::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (this != default_instance_) {
  }
}

void wingchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingchange_descriptor_;
}

const wingchange& wingchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

wingchange* wingchange::default_instance_ = NULL;

wingchange* wingchange::New() const {
  return new wingchange;
}

void wingchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    quality_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
    starup_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starber_ = 0;
    upattributeid_ = GOOGLE_LONGLONG(0);
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // optional string resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // optional int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_starId;
        break;
      }

      // optional int64 starId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_starNum;
        break;
      }

      // optional string starNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_starUp;
        break;
      }

      // optional int32 starUp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starup_)));
          set_has_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_starBer;
        break;
      }

      // optional int32 starBer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starber_)));
          set_has_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.wingchangeattributeDesc attribute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wingchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resource(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->activedesc(), output);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // optional int64 starId = 6;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->starid(), output);
  }

  // optional string starNum = 7;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->starnum(), output);
  }

  // optional int32 starUp = 8;
  if (has_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->starup(), output);
  }

  // optional int32 starBer = 9;
  if (has_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->starber(), output);
  }

  // optional int64 upAttributeId = 10;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->upattributeid(), output);
  }

  // repeated .proto_ff.wingchangeattributeDesc attribute = 11;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wingchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string resource = 2;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resource(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string activeDesc = 4;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activedesc(), target);
  }

  // optional int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // optional int64 starId = 6;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->starid(), target);
  }

  // optional string starNum = 7;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->starnum(), target);
  }

  // optional int32 starUp = 8;
  if (has_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->starup(), target);
  }

  // optional int32 starBer = 9;
  if (has_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->starber(), target);
  }

  // optional int64 upAttributeId = 10;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->upattributeid(), target);
  }

  // repeated .proto_ff.wingchangeattributeDesc attribute = 11;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wingchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string resource = 2;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 4;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 starId = 6;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

    // optional string starNum = 7;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

    // optional int32 starUp = 8;
    if (has_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starup());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 starBer = 9;
    if (has_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starber());
    }

    // optional int64 upAttributeId = 10;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

  }
  // repeated .proto_ff.wingchangeattributeDesc attribute = 11;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingchange::MergeFrom(const wingchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_starup()) {
      set_starup(from.starup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starber()) {
      set_starber(from.starber());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingchange::CopyFrom(const wingchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingchange::IsInitialized() const {

  return true;
}

void wingchange::Swap(wingchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(resource_, other->resource_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(quality_, other->quality_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(starup_, other->starup_);
    std::swap(starber_, other->starber_);
    std::swap(upattributeid_, other->upattributeid_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingchange_descriptor_;
  metadata.reflection = wingchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_wingchange::kWingchangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_wingchange::Sheet_wingchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_wingchange::InitAsDefaultInstance() {
}

Sheet_wingchange::Sheet_wingchange(const Sheet_wingchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_wingchange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_wingchange::~Sheet_wingchange() {
  SharedDtor();
}

void Sheet_wingchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_wingchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_wingchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_wingchange_descriptor_;
}

const Sheet_wingchange& Sheet_wingchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

Sheet_wingchange* Sheet_wingchange::default_instance_ = NULL;

Sheet_wingchange* Sheet_wingchange::New() const {
  return new Sheet_wingchange;
}

void Sheet_wingchange::Clear() {
  wingchange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_wingchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.wingchange wingchange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingchange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wingchange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wingchange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_wingchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.wingchange wingchange_List = 1;
  for (int i = 0; i < this->wingchange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wingchange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_wingchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.wingchange wingchange_List = 1;
  for (int i = 0; i < this->wingchange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wingchange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_wingchange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.wingchange wingchange_List = 1;
  total_size += 1 * this->wingchange_list_size();
  for (int i = 0; i < this->wingchange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wingchange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_wingchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_wingchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_wingchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_wingchange::MergeFrom(const Sheet_wingchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  wingchange_list_.MergeFrom(from.wingchange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_wingchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_wingchange::CopyFrom(const Sheet_wingchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_wingchange::IsInitialized() const {

  return true;
}

void Sheet_wingchange::Swap(Sheet_wingchange* other) {
  if (other != this) {
    wingchange_list_.Swap(&other->wingchange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_wingchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_wingchange_descriptor_;
  metadata.reflection = Sheet_wingchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wingfragmentattributeDesc::kTypeFieldNumber;
const int wingfragmentattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

wingfragmentattributeDesc::wingfragmentattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wingfragmentattributeDesc::InitAsDefaultInstance() {
}

wingfragmentattributeDesc::wingfragmentattributeDesc(const wingfragmentattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wingfragmentattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingfragmentattributeDesc::~wingfragmentattributeDesc() {
  SharedDtor();
}

void wingfragmentattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wingfragmentattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingfragmentattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingfragmentattributeDesc_descriptor_;
}

const wingfragmentattributeDesc& wingfragmentattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

wingfragmentattributeDesc* wingfragmentattributeDesc::default_instance_ = NULL;

wingfragmentattributeDesc* wingfragmentattributeDesc::New() const {
  return new wingfragmentattributeDesc;
}

void wingfragmentattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingfragmentattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wingfragmentattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wingfragmentattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wingfragmentattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingfragmentattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingfragmentattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingfragmentattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingfragmentattributeDesc::MergeFrom(const wingfragmentattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingfragmentattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingfragmentattributeDesc::CopyFrom(const wingfragmentattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingfragmentattributeDesc::IsInitialized() const {

  return true;
}

void wingfragmentattributeDesc::Swap(wingfragmentattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingfragmentattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingfragmentattributeDesc_descriptor_;
  metadata.reflection = wingfragmentattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wingfragment::kFragmentIDFieldNumber;
const int wingfragment::kItemFieldNumber;
const int wingfragment::kItemNumFieldNumber;
const int wingfragment::kAttributeFieldNumber;
#endif  // !_MSC_VER

wingfragment::wingfragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wingfragment::InitAsDefaultInstance() {
}

wingfragment::wingfragment(const wingfragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wingfragment::SharedCtor() {
  _cached_size_ = 0;
  fragmentid_ = GOOGLE_LONGLONG(0);
  item_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingfragment::~wingfragment() {
  SharedDtor();
}

void wingfragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wingfragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingfragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingfragment_descriptor_;
}

const wingfragment& wingfragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

wingfragment* wingfragment::default_instance_ = NULL;

wingfragment* wingfragment::New() const {
  return new wingfragment;
}

void wingfragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragmentid_ = GOOGLE_LONGLONG(0);
    item_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingfragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fragmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional int64 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.wingfragmentattributeDesc attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wingfragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 fragmentID = 1;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fragmentid(), output);
  }

  // optional int64 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // repeated .proto_ff.wingfragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wingfragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 fragmentID = 1;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fragmentid(), target);
  }

  // optional int64 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->item(), target);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // repeated .proto_ff.wingfragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wingfragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 fragmentID = 1;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fragmentid());
    }

    // optional int64 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  // repeated .proto_ff.wingfragmentattributeDesc attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingfragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingfragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingfragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingfragment::MergeFrom(const wingfragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingfragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingfragment::CopyFrom(const wingfragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingfragment::IsInitialized() const {

  return true;
}

void wingfragment::Swap(wingfragment* other) {
  if (other != this) {
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(item_, other->item_);
    std::swap(itemnum_, other->itemnum_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingfragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingfragment_descriptor_;
  metadata.reflection = wingfragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_wingfragment::kWingfragmentListFieldNumber;
#endif  // !_MSC_VER

Sheet_wingfragment::Sheet_wingfragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_wingfragment::InitAsDefaultInstance() {
}

Sheet_wingfragment::Sheet_wingfragment(const Sheet_wingfragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_wingfragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_wingfragment::~Sheet_wingfragment() {
  SharedDtor();
}

void Sheet_wingfragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_wingfragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_wingfragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_wingfragment_descriptor_;
}

const Sheet_wingfragment& Sheet_wingfragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

Sheet_wingfragment* Sheet_wingfragment::default_instance_ = NULL;

Sheet_wingfragment* Sheet_wingfragment::New() const {
  return new Sheet_wingfragment;
}

void Sheet_wingfragment::Clear() {
  wingfragment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_wingfragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.wingfragment wingfragment_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingfragment_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wingfragment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wingfragment_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_wingfragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.wingfragment wingfragment_List = 1;
  for (int i = 0; i < this->wingfragment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wingfragment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_wingfragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.wingfragment wingfragment_List = 1;
  for (int i = 0; i < this->wingfragment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wingfragment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_wingfragment::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.wingfragment wingfragment_List = 1;
  total_size += 1 * this->wingfragment_list_size();
  for (int i = 0; i < this->wingfragment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wingfragment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_wingfragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_wingfragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_wingfragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_wingfragment::MergeFrom(const Sheet_wingfragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  wingfragment_list_.MergeFrom(from.wingfragment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_wingfragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_wingfragment::CopyFrom(const Sheet_wingfragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_wingfragment::IsInitialized() const {

  return true;
}

void Sheet_wingfragment::Swap(Sheet_wingfragment* other) {
  if (other != this) {
    wingfragment_list_.Swap(&other->wingfragment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_wingfragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_wingfragment_descriptor_;
  metadata.reflection = Sheet_wingfragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wingstarUpupAttributeDesc::kTypeFieldNumber;
const int wingstarUpupAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

wingstarUpupAttributeDesc::wingstarUpupAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wingstarUpupAttributeDesc::InitAsDefaultInstance() {
}

wingstarUpupAttributeDesc::wingstarUpupAttributeDesc(const wingstarUpupAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wingstarUpupAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingstarUpupAttributeDesc::~wingstarUpupAttributeDesc() {
  SharedDtor();
}

void wingstarUpupAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wingstarUpupAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingstarUpupAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingstarUpupAttributeDesc_descriptor_;
}

const wingstarUpupAttributeDesc& wingstarUpupAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

wingstarUpupAttributeDesc* wingstarUpupAttributeDesc::default_instance_ = NULL;

wingstarUpupAttributeDesc* wingstarUpupAttributeDesc::New() const {
  return new wingstarUpupAttributeDesc;
}

void wingstarUpupAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingstarUpupAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wingstarUpupAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wingstarUpupAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wingstarUpupAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingstarUpupAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingstarUpupAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingstarUpupAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingstarUpupAttributeDesc::MergeFrom(const wingstarUpupAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingstarUpupAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingstarUpupAttributeDesc::CopyFrom(const wingstarUpupAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingstarUpupAttributeDesc::IsInitialized() const {

  return true;
}

void wingstarUpupAttributeDesc::Swap(wingstarUpupAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingstarUpupAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingstarUpupAttributeDesc_descriptor_;
  metadata.reflection = wingstarUpupAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wingstarUp::kIDFieldNumber;
const int wingstarUp::kUpAttributeIdFieldNumber;
const int wingstarUp::kStarIDFieldNumber;
const int wingstarUp::kUpAttributeFieldNumber;
#endif  // !_MSC_VER

wingstarUp::wingstarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wingstarUp::InitAsDefaultInstance() {
}

wingstarUp::wingstarUp(const wingstarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wingstarUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  upattributeid_ = GOOGLE_LONGLONG(0);
  starid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wingstarUp::~wingstarUp() {
  SharedDtor();
}

void wingstarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wingstarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wingstarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wingstarUp_descriptor_;
}

const wingstarUp& wingstarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

wingstarUp* wingstarUp::default_instance_ = NULL;

wingstarUp* wingstarUp::New() const {
  return new wingstarUp;
}

void wingstarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    upattributeid_ = GOOGLE_LONGLONG(0);
    starid_ = 0;
  }
  upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wingstarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starID;
        break;
      }

      // optional int32 starID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upAttribute;
        break;
      }

      // repeated .proto_ff.wingstarUpupAttributeDesc upAttribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wingstarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->upattributeid(), output);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starid(), output);
  }

  // repeated .proto_ff.wingstarUpupAttributeDesc upAttribute = 4;
  for (int i = 0; i < this->upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wingstarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->upattributeid(), target);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starid(), target);
  }

  // repeated .proto_ff.wingstarUpupAttributeDesc upAttribute = 4;
  for (int i = 0; i < this->upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wingstarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 upAttributeId = 2;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

    // optional int32 starID = 3;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }

  }
  // repeated .proto_ff.wingstarUpupAttributeDesc upAttribute = 4;
  total_size += 1 * this->upattribute_size();
  for (int i = 0; i < this->upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wingstarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wingstarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wingstarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wingstarUp::MergeFrom(const wingstarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  upattribute_.MergeFrom(from.upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wingstarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wingstarUp::CopyFrom(const wingstarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wingstarUp::IsInitialized() const {

  return true;
}

void wingstarUp::Swap(wingstarUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upattributeid_, other->upattributeid_);
    std::swap(starid_, other->starid_);
    upattribute_.Swap(&other->upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wingstarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wingstarUp_descriptor_;
  metadata.reflection = wingstarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_wingstarUp::kWingstarUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_wingstarUp::Sheet_wingstarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_wingstarUp::InitAsDefaultInstance() {
}

Sheet_wingstarUp::Sheet_wingstarUp(const Sheet_wingstarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_wingstarUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_wingstarUp::~Sheet_wingstarUp() {
  SharedDtor();
}

void Sheet_wingstarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_wingstarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_wingstarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_wingstarUp_descriptor_;
}

const Sheet_wingstarUp& Sheet_wingstarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wing_2eproto();
  return *default_instance_;
}

Sheet_wingstarUp* Sheet_wingstarUp::default_instance_ = NULL;

Sheet_wingstarUp* Sheet_wingstarUp::New() const {
  return new Sheet_wingstarUp;
}

void Sheet_wingstarUp::Clear() {
  wingstarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_wingstarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.wingstarUp wingstarUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingstarUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wingstarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wingstarUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_wingstarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.wingstarUp wingstarUp_List = 1;
  for (int i = 0; i < this->wingstarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wingstarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_wingstarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.wingstarUp wingstarUp_List = 1;
  for (int i = 0; i < this->wingstarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wingstarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_wingstarUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.wingstarUp wingstarUp_List = 1;
  total_size += 1 * this->wingstarup_list_size();
  for (int i = 0; i < this->wingstarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wingstarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_wingstarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_wingstarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_wingstarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_wingstarUp::MergeFrom(const Sheet_wingstarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  wingstarup_list_.MergeFrom(from.wingstarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_wingstarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_wingstarUp::CopyFrom(const Sheet_wingstarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_wingstarUp::IsInitialized() const {

  return true;
}

void Sheet_wingstarUp::Swap(Sheet_wingstarUp* other) {
  if (other != this) {
    wingstarup_list_.Swap(&other->wingstarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_wingstarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_wingstarUp_descriptor_;
  metadata.reflection = Sheet_wingstarUp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
