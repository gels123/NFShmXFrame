// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FactionWar.proto

#ifndef PROTOBUF_FactionWar_2eproto__INCLUDED
#define PROTOBUF_FactionWar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Com.pb.h"
#include "ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FactionWar_2eproto();
void protobuf_AssignDesc_FactionWar_2eproto();
void protobuf_ShutdownFile_FactionWar_2eproto();

class RaceFactionProto;
class RaceFactionMatchProto;
class RaceProto;
class RaceListProto;
class RaceMatchProto;
class RaceMatchListProto;
class WarRankProto;
class WarRankListProto;
class WarTowerProto;
class WarTowerListProto;
class WarScoreRankProto;
class WarScoreRankListProto;
class WarFightProto;
class WarLeaderInfo;
class FactionWar_RaceReq;
class FactionWar_RaceRsp;
class FactionWar_MatchRsp;
class FactionWar_RankReq;
class FactionWar_RankRsp;
class FactionWar_EnterBattleReq;
class FactionWar_EnterBattleRsp;
class FactionWar_BattleInfoRsp;
class FactionWar_TowerHpRsp;
class FactionWar_ScoreRankRsp;
class FactionWar_ScoreRsp;
class FactionWar_ResultRsp;
class FactionWar_WinInfoReq;
class FactionWar_WinInfoRsp;
class FactionWar_WinLeaderReq;
class FactionWar_WinLeaderRsp;
class FactionWar_WinFetchReq;
class FactionWar_WinFetchRsp;
class FactionWar_IsFetchRsp;
class PullFactionProto;
class FactionWarProto;
class FactionWarRankProto;
class FactionWar_S2C_PullReq;
class FactionWar_C2S_PullRsp;
class FactionWar_S2L_InfoRsp;
class FactionWar_S2L_WarResultRsp;
class FactionWar_S2C_RankRewardRsp;
class FactionWar_S2C_EndWinRewardRsp;
class FactionWar_S2C_WinInfoRsp;
class FactionWar_S2C_DelWinRsp;
class FactionWar_S2C_LeaderInfoReq;
class FactionWar_S2C_LeaderInfoRsp;
class FactionWar_C2L_FetchWinRewardReq;
class FactionWar_C2S_WinDismissRsp;

// ===================================================================

class RaceFactionProto : public ::google::protobuf::Message {
 public:
  RaceFactionProto();
  virtual ~RaceFactionProto();

  RaceFactionProto(const RaceFactionProto& from);

  inline RaceFactionProto& operator=(const RaceFactionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceFactionProto& default_instance();

  void Swap(RaceFactionProto* other);

  // implements Message ----------------------------------------------

  RaceFactionProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceFactionProto& from);
  void MergeFrom(const RaceFactionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RaceFactionProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static RaceFactionProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceFactionMatchProto : public ::google::protobuf::Message {
 public:
  RaceFactionMatchProto();
  virtual ~RaceFactionMatchProto();

  RaceFactionMatchProto(const RaceFactionMatchProto& from);

  inline RaceFactionMatchProto& operator=(const RaceFactionMatchProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceFactionMatchProto& default_instance();

  void Swap(RaceFactionMatchProto* other);

  // implements Message ----------------------------------------------

  RaceFactionMatchProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceFactionMatchProto& from);
  void MergeFrom(const RaceFactionMatchProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RaceFactionProto match = 1;
  inline int match_size() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 1;
  inline const ::proto_ff::RaceFactionProto& match(int index) const;
  inline ::proto_ff::RaceFactionProto* mutable_match(int index);
  inline ::proto_ff::RaceFactionProto* add_match();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto >&
      match() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto >*
      mutable_match();

  // optional uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RaceFactionMatchProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto > match_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static RaceFactionMatchProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceProto : public ::google::protobuf::Message {
 public:
  RaceProto();
  virtual ~RaceProto();

  RaceProto(const RaceProto& from);

  inline RaceProto& operator=(const RaceProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceProto& default_instance();

  void Swap(RaceProto* other);

  // implements Message ----------------------------------------------

  RaceProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceProto& from);
  void MergeFrom(const RaceProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 race = 1;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 1;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // repeated .proto_ff.RaceFactionProto info_lst = 2;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 2;
  inline const ::proto_ff::RaceFactionProto& info_lst(int index) const;
  inline ::proto_ff::RaceFactionProto* mutable_info_lst(int index);
  inline ::proto_ff::RaceFactionProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto >*
      mutable_info_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.RaceProto)
 private:
  inline void set_has_race();
  inline void clear_has_race();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto > info_lst_;
  ::google::protobuf::int32 race_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static RaceProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceListProto : public ::google::protobuf::Message {
 public:
  RaceListProto();
  virtual ~RaceListProto();

  RaceListProto(const RaceListProto& from);

  inline RaceListProto& operator=(const RaceListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceListProto& default_instance();

  void Swap(RaceListProto* other);

  // implements Message ----------------------------------------------

  RaceListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceListProto& from);
  void MergeFrom(const RaceListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RaceProto race_lst = 1;
  inline int race_lst_size() const;
  inline void clear_race_lst();
  static const int kRaceLstFieldNumber = 1;
  inline const ::proto_ff::RaceProto& race_lst(int index) const;
  inline ::proto_ff::RaceProto* mutable_race_lst(int index);
  inline ::proto_ff::RaceProto* add_race_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceProto >&
      race_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceProto >*
      mutable_race_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.RaceListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceProto > race_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static RaceListProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceMatchProto : public ::google::protobuf::Message {
 public:
  RaceMatchProto();
  virtual ~RaceMatchProto();

  RaceMatchProto(const RaceMatchProto& from);

  inline RaceMatchProto& operator=(const RaceMatchProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceMatchProto& default_instance();

  void Swap(RaceMatchProto* other);

  // implements Message ----------------------------------------------

  RaceMatchProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceMatchProto& from);
  void MergeFrom(const RaceMatchProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 race = 1;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 1;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // repeated .proto_ff.RaceFactionMatchProto info_lst = 2;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 2;
  inline const ::proto_ff::RaceFactionMatchProto& info_lst(int index) const;
  inline ::proto_ff::RaceFactionMatchProto* mutable_info_lst(int index);
  inline ::proto_ff::RaceFactionMatchProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionMatchProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionMatchProto >*
      mutable_info_lst();

  // optional uint32 faction_id = 3;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RaceMatchProto)
 private:
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionMatchProto > info_lst_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static RaceMatchProto* default_instance_;
};
// -------------------------------------------------------------------

class RaceMatchListProto : public ::google::protobuf::Message {
 public:
  RaceMatchListProto();
  virtual ~RaceMatchListProto();

  RaceMatchListProto(const RaceMatchListProto& from);

  inline RaceMatchListProto& operator=(const RaceMatchListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceMatchListProto& default_instance();

  void Swap(RaceMatchListProto* other);

  // implements Message ----------------------------------------------

  RaceMatchListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceMatchListProto& from);
  void MergeFrom(const RaceMatchListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RaceMatchProto info_lst = 1;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 1;
  inline const ::proto_ff::RaceMatchProto& info_lst(int index) const;
  inline ::proto_ff::RaceMatchProto* mutable_info_lst(int index);
  inline ::proto_ff::RaceMatchProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceMatchProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceMatchProto >*
      mutable_info_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.RaceMatchListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceMatchProto > info_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static RaceMatchListProto* default_instance_;
};
// -------------------------------------------------------------------

class WarRankProto : public ::google::protobuf::Message {
 public:
  WarRankProto();
  virtual ~WarRankProto();

  WarRankProto(const WarRankProto& from);

  inline WarRankProto& operator=(const WarRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarRankProto& default_instance();

  void Swap(WarRankProto* other);

  // implements Message ----------------------------------------------

  WarRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarRankProto& from);
  void MergeFrom(const WarRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.WarRankProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 faction_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static WarRankProto* default_instance_;
};
// -------------------------------------------------------------------

class WarRankListProto : public ::google::protobuf::Message {
 public:
  WarRankListProto();
  virtual ~WarRankListProto();

  WarRankListProto(const WarRankListProto& from);

  inline WarRankListProto& operator=(const WarRankListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarRankListProto& default_instance();

  void Swap(WarRankListProto* other);

  // implements Message ----------------------------------------------

  WarRankListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarRankListProto& from);
  void MergeFrom(const WarRankListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.WarRankProto info_lst = 1;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 1;
  inline const ::proto_ff::WarRankProto& info_lst(int index) const;
  inline ::proto_ff::WarRankProto* mutable_info_lst(int index);
  inline ::proto_ff::WarRankProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankProto >*
      mutable_info_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.WarRankListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankProto > info_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static WarRankListProto* default_instance_;
};
// -------------------------------------------------------------------

class WarTowerProto : public ::google::protobuf::Message {
 public:
  WarTowerProto();
  virtual ~WarTowerProto();

  WarTowerProto(const WarTowerProto& from);

  inline WarTowerProto& operator=(const WarTowerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarTowerProto& default_instance();

  void Swap(WarTowerProto* other);

  // implements Message ----------------------------------------------

  WarTowerProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarTowerProto& from);
  void MergeFrom(const WarTowerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 mons_id = 1;
  inline bool has_mons_id() const;
  inline void clear_mons_id();
  static const int kMonsIdFieldNumber = 1;
  inline ::google::protobuf::uint64 mons_id() const;
  inline void set_mons_id(::google::protobuf::uint64 value);

  // optional bool is_dead = 2;
  inline bool has_is_dead() const;
  inline void clear_is_dead();
  static const int kIsDeadFieldNumber = 2;
  inline bool is_dead() const;
  inline void set_is_dead(bool value);

  // optional int64 hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::int64 hp() const;
  inline void set_hp(::google::protobuf::int64 value);

  // optional int64 maxhp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxhpFieldNumber = 4;
  inline ::google::protobuf::int64 maxhp() const;
  inline void set_maxhp(::google::protobuf::int64 value);

  // optional .proto_ff.Vector3PB pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // @@protoc_insertion_point(class_scope:proto_ff.WarTowerProto)
 private:
  inline void set_has_mons_id();
  inline void clear_has_mons_id();
  inline void set_has_is_dead();
  inline void clear_has_is_dead();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mons_id_;
  ::google::protobuf::int64 hp_;
  ::google::protobuf::int64 maxhp_;
  ::proto_ff::Vector3PB* pos_;
  bool is_dead_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static WarTowerProto* default_instance_;
};
// -------------------------------------------------------------------

class WarTowerListProto : public ::google::protobuf::Message {
 public:
  WarTowerListProto();
  virtual ~WarTowerListProto();

  WarTowerListProto(const WarTowerListProto& from);

  inline WarTowerListProto& operator=(const WarTowerListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarTowerListProto& default_instance();

  void Swap(WarTowerListProto* other);

  // implements Message ----------------------------------------------

  WarTowerListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarTowerListProto& from);
  void MergeFrom(const WarTowerListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.WarTowerProto info_lst = 1;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 1;
  inline const ::proto_ff::WarTowerProto& info_lst(int index) const;
  inline ::proto_ff::WarTowerProto* mutable_info_lst(int index);
  inline ::proto_ff::WarTowerProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarTowerProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarTowerProto >*
      mutable_info_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.WarTowerListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::WarTowerProto > info_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static WarTowerListProto* default_instance_;
};
// -------------------------------------------------------------------

class WarScoreRankProto : public ::google::protobuf::Message {
 public:
  WarScoreRankProto();
  virtual ~WarScoreRankProto();

  WarScoreRankProto(const WarScoreRankProto& from);

  inline WarScoreRankProto& operator=(const WarScoreRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarScoreRankProto& default_instance();

  void Swap(WarScoreRankProto* other);

  // implements Message ----------------------------------------------

  WarScoreRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarScoreRankProto& from);
  void MergeFrom(const WarScoreRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.WarScoreRankProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static WarScoreRankProto* default_instance_;
};
// -------------------------------------------------------------------

class WarScoreRankListProto : public ::google::protobuf::Message {
 public:
  WarScoreRankListProto();
  virtual ~WarScoreRankListProto();

  WarScoreRankListProto(const WarScoreRankListProto& from);

  inline WarScoreRankListProto& operator=(const WarScoreRankListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarScoreRankListProto& default_instance();

  void Swap(WarScoreRankListProto* other);

  // implements Message ----------------------------------------------

  WarScoreRankListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarScoreRankListProto& from);
  void MergeFrom(const WarScoreRankListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.WarScoreRankProto info_lst = 1;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 1;
  inline const ::proto_ff::WarScoreRankProto& info_lst(int index) const;
  inline ::proto_ff::WarScoreRankProto* mutable_info_lst(int index);
  inline ::proto_ff::WarScoreRankProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarScoreRankProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarScoreRankProto >*
      mutable_info_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.WarScoreRankListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::WarScoreRankProto > info_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static WarScoreRankListProto* default_instance_;
};
// -------------------------------------------------------------------

class WarFightProto : public ::google::protobuf::Message {
 public:
  WarFightProto();
  virtual ~WarFightProto();

  WarFightProto(const WarFightProto& from);

  inline WarFightProto& operator=(const WarFightProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarFightProto& default_instance();

  void Swap(WarFightProto* other);

  // implements Message ----------------------------------------------

  WarFightProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarFightProto& from);
  void MergeFrom(const WarFightProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 5;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 5;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional int32 kill = 6;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 6;
  inline ::google::protobuf::int32 kill() const;
  inline void set_kill(::google::protobuf::int32 value);

  // optional int32 dead = 7;
  inline bool has_dead() const;
  inline void clear_dead();
  static const int kDeadFieldNumber = 7;
  inline ::google::protobuf::int32 dead() const;
  inline void set_dead(::google::protobuf::int32 value);

  // optional int32 tower = 8;
  inline bool has_tower() const;
  inline void clear_tower();
  static const int kTowerFieldNumber = 8;
  inline ::google::protobuf::int32 tower() const;
  inline void set_tower(::google::protobuf::int32 value);

  // repeated .proto_ff.ComItem reward = 9;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 9;
  inline const ::proto_ff::ComItem& reward(int index) const;
  inline ::proto_ff::ComItem* mutable_reward(int index);
  inline ::proto_ff::ComItem* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.WarFightProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_kill();
  inline void clear_has_kill();
  inline void set_has_dead();
  inline void clear_has_dead();
  inline void set_has_tower();
  inline void clear_has_tower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 kill_;
  ::google::protobuf::int32 dead_;
  ::google::protobuf::int32 tower_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem > reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static WarFightProto* default_instance_;
};
// -------------------------------------------------------------------

class WarLeaderInfo : public ::google::protobuf::Message {
 public:
  WarLeaderInfo();
  virtual ~WarLeaderInfo();

  WarLeaderInfo(const WarLeaderInfo& from);

  inline WarLeaderInfo& operator=(const WarLeaderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarLeaderInfo& default_instance();

  void Swap(WarLeaderInfo* other);

  // implements Message ----------------------------------------------

  WarLeaderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarLeaderInfo& from);
  void MergeFrom(const WarLeaderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleFacadeProto facade = 4;
  inline bool has_facade() const;
  inline void clear_facade();
  static const int kFacadeFieldNumber = 4;
  inline const ::proto_ff::RoleFacadeProto& facade() const;
  inline ::proto_ff::RoleFacadeProto* mutable_facade();
  inline ::proto_ff::RoleFacadeProto* release_facade();
  inline void set_allocated_facade(::proto_ff::RoleFacadeProto* facade);

  // @@protoc_insertion_point(class_scope:proto_ff.WarLeaderInfo)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_facade();
  inline void clear_has_facade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::proto_ff::RoleFacadeProto* facade_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static WarLeaderInfo* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_RaceReq : public ::google::protobuf::Message {
 public:
  FactionWar_RaceReq();
  virtual ~FactionWar_RaceReq();

  FactionWar_RaceReq(const FactionWar_RaceReq& from);

  inline FactionWar_RaceReq& operator=(const FactionWar_RaceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_RaceReq& default_instance();

  void Swap(FactionWar_RaceReq* other);

  // implements Message ----------------------------------------------

  FactionWar_RaceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_RaceReq& from);
  void MergeFrom(const FactionWar_RaceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_RaceReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_RaceReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_RaceRsp : public ::google::protobuf::Message {
 public:
  FactionWar_RaceRsp();
  virtual ~FactionWar_RaceRsp();

  FactionWar_RaceRsp(const FactionWar_RaceRsp& from);

  inline FactionWar_RaceRsp& operator=(const FactionWar_RaceRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_RaceRsp& default_instance();

  void Swap(FactionWar_RaceRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_RaceRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_RaceRsp& from);
  void MergeFrom(const FactionWar_RaceRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.RaceListProto race = 1;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 1;
  inline const ::proto_ff::RaceListProto& race() const;
  inline ::proto_ff::RaceListProto* mutable_race();
  inline ::proto_ff::RaceListProto* release_race();
  inline void set_allocated_race(::proto_ff::RaceListProto* race);

  // optional .proto_ff.RaceMatchListProto match = 2;
  inline bool has_match() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 2;
  inline const ::proto_ff::RaceMatchListProto& match() const;
  inline ::proto_ff::RaceMatchListProto* mutable_match();
  inline ::proto_ff::RaceMatchListProto* release_match();
  inline void set_allocated_match(::proto_ff::RaceMatchListProto* match);

  // optional int32 stage = 3;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 3;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_RaceRsp)
 private:
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_match();
  inline void clear_has_match();
  inline void set_has_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RaceListProto* race_;
  ::proto_ff::RaceMatchListProto* match_;
  ::google::protobuf::int32 stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_RaceRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_MatchRsp : public ::google::protobuf::Message {
 public:
  FactionWar_MatchRsp();
  virtual ~FactionWar_MatchRsp();

  FactionWar_MatchRsp(const FactionWar_MatchRsp& from);

  inline FactionWar_MatchRsp& operator=(const FactionWar_MatchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_MatchRsp& default_instance();

  void Swap(FactionWar_MatchRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_MatchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_MatchRsp& from);
  void MergeFrom(const FactionWar_MatchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.RaceMatchListProto match = 1;
  inline bool has_match() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 1;
  inline const ::proto_ff::RaceMatchListProto& match() const;
  inline ::proto_ff::RaceMatchListProto* mutable_match();
  inline ::proto_ff::RaceMatchListProto* release_match();
  inline void set_allocated_match(::proto_ff::RaceMatchListProto* match);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_MatchRsp)
 private:
  inline void set_has_match();
  inline void clear_has_match();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RaceMatchListProto* match_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_MatchRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_RankReq : public ::google::protobuf::Message {
 public:
  FactionWar_RankReq();
  virtual ~FactionWar_RankReq();

  FactionWar_RankReq(const FactionWar_RankReq& from);

  inline FactionWar_RankReq& operator=(const FactionWar_RankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_RankReq& default_instance();

  void Swap(FactionWar_RankReq* other);

  // implements Message ----------------------------------------------

  FactionWar_RankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_RankReq& from);
  void MergeFrom(const FactionWar_RankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_RankReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_RankReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_RankRsp : public ::google::protobuf::Message {
 public:
  FactionWar_RankRsp();
  virtual ~FactionWar_RankRsp();

  FactionWar_RankRsp(const FactionWar_RankRsp& from);

  inline FactionWar_RankRsp& operator=(const FactionWar_RankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_RankRsp& default_instance();

  void Swap(FactionWar_RankRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_RankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_RankRsp& from);
  void MergeFrom(const FactionWar_RankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.WarRankListProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::WarRankListProto& info() const;
  inline ::proto_ff::WarRankListProto* mutable_info();
  inline ::proto_ff::WarRankListProto* release_info();
  inline void set_allocated_info(::proto_ff::WarRankListProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_RankRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::WarRankListProto* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_RankRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_EnterBattleReq : public ::google::protobuf::Message {
 public:
  FactionWar_EnterBattleReq();
  virtual ~FactionWar_EnterBattleReq();

  FactionWar_EnterBattleReq(const FactionWar_EnterBattleReq& from);

  inline FactionWar_EnterBattleReq& operator=(const FactionWar_EnterBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_EnterBattleReq& default_instance();

  void Swap(FactionWar_EnterBattleReq* other);

  // implements Message ----------------------------------------------

  FactionWar_EnterBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_EnterBattleReq& from);
  void MergeFrom(const FactionWar_EnterBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_EnterBattleReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_EnterBattleReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_EnterBattleRsp : public ::google::protobuf::Message {
 public:
  FactionWar_EnterBattleRsp();
  virtual ~FactionWar_EnterBattleRsp();

  FactionWar_EnterBattleRsp(const FactionWar_EnterBattleRsp& from);

  inline FactionWar_EnterBattleRsp& operator=(const FactionWar_EnterBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_EnterBattleRsp& default_instance();

  void Swap(FactionWar_EnterBattleRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_EnterBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_EnterBattleRsp& from);
  void MergeFrom(const FactionWar_EnterBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_EnterBattleRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_EnterBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_BattleInfoRsp : public ::google::protobuf::Message {
 public:
  FactionWar_BattleInfoRsp();
  virtual ~FactionWar_BattleInfoRsp();

  FactionWar_BattleInfoRsp(const FactionWar_BattleInfoRsp& from);

  inline FactionWar_BattleInfoRsp& operator=(const FactionWar_BattleInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_BattleInfoRsp& default_instance();

  void Swap(FactionWar_BattleInfoRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_BattleInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_BattleInfoRsp& from);
  void MergeFrom(const FactionWar_BattleInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 car_num = 3;
  inline bool has_car_num() const;
  inline void clear_car_num();
  static const int kCarNumFieldNumber = 3;
  inline ::google::protobuf::int32 car_num() const;
  inline void set_car_num(::google::protobuf::int32 value);

  // optional int32 camp = 4;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 4;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_BattleInfoRsp)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_car_num();
  inline void clear_has_car_num();
  inline void set_has_camp();
  inline void clear_has_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 car_num_;
  ::google::protobuf::int32 camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_BattleInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_TowerHpRsp : public ::google::protobuf::Message {
 public:
  FactionWar_TowerHpRsp();
  virtual ~FactionWar_TowerHpRsp();

  FactionWar_TowerHpRsp(const FactionWar_TowerHpRsp& from);

  inline FactionWar_TowerHpRsp& operator=(const FactionWar_TowerHpRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_TowerHpRsp& default_instance();

  void Swap(FactionWar_TowerHpRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_TowerHpRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_TowerHpRsp& from);
  void MergeFrom(const FactionWar_TowerHpRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.WarTowerListProto tower = 1;
  inline bool has_tower() const;
  inline void clear_tower();
  static const int kTowerFieldNumber = 1;
  inline const ::proto_ff::WarTowerListProto& tower() const;
  inline ::proto_ff::WarTowerListProto* mutable_tower();
  inline ::proto_ff::WarTowerListProto* release_tower();
  inline void set_allocated_tower(::proto_ff::WarTowerListProto* tower);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_TowerHpRsp)
 private:
  inline void set_has_tower();
  inline void clear_has_tower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::WarTowerListProto* tower_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_TowerHpRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_ScoreRankRsp : public ::google::protobuf::Message {
 public:
  FactionWar_ScoreRankRsp();
  virtual ~FactionWar_ScoreRankRsp();

  FactionWar_ScoreRankRsp(const FactionWar_ScoreRankRsp& from);

  inline FactionWar_ScoreRankRsp& operator=(const FactionWar_ScoreRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_ScoreRankRsp& default_instance();

  void Swap(FactionWar_ScoreRankRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_ScoreRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_ScoreRankRsp& from);
  void MergeFrom(const FactionWar_ScoreRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.WarScoreRankListProto rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::WarScoreRankListProto& rank() const;
  inline ::proto_ff::WarScoreRankListProto* mutable_rank();
  inline ::proto_ff::WarScoreRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::WarScoreRankListProto* rank);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_ScoreRankRsp)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::WarScoreRankListProto* rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_ScoreRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_ScoreRsp : public ::google::protobuf::Message {
 public:
  FactionWar_ScoreRsp();
  virtual ~FactionWar_ScoreRsp();

  FactionWar_ScoreRsp(const FactionWar_ScoreRsp& from);

  inline FactionWar_ScoreRsp& operator=(const FactionWar_ScoreRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_ScoreRsp& default_instance();

  void Swap(FactionWar_ScoreRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_ScoreRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_ScoreRsp& from);
  void MergeFrom(const FactionWar_ScoreRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 blue_score = 1;
  inline bool has_blue_score() const;
  inline void clear_blue_score();
  static const int kBlueScoreFieldNumber = 1;
  inline ::google::protobuf::int32 blue_score() const;
  inline void set_blue_score(::google::protobuf::int32 value);

  // optional int32 red_score = 2;
  inline bool has_red_score() const;
  inline void clear_red_score();
  static const int kRedScoreFieldNumber = 2;
  inline ::google::protobuf::int32 red_score() const;
  inline void set_red_score(::google::protobuf::int32 value);

  // optional int32 blue_num = 3;
  inline bool has_blue_num() const;
  inline void clear_blue_num();
  static const int kBlueNumFieldNumber = 3;
  inline ::google::protobuf::int32 blue_num() const;
  inline void set_blue_num(::google::protobuf::int32 value);

  // optional int32 red_num = 4;
  inline bool has_red_num() const;
  inline void clear_red_num();
  static const int kRedNumFieldNumber = 4;
  inline ::google::protobuf::int32 red_num() const;
  inline void set_red_num(::google::protobuf::int32 value);

  // optional bytes blue_name = 5;
  inline bool has_blue_name() const;
  inline void clear_blue_name();
  static const int kBlueNameFieldNumber = 5;
  inline const ::std::string& blue_name() const;
  inline void set_blue_name(const ::std::string& value);
  inline void set_blue_name(const char* value);
  inline void set_blue_name(const void* value, size_t size);
  inline ::std::string* mutable_blue_name();
  inline ::std::string* release_blue_name();
  inline void set_allocated_blue_name(::std::string* blue_name);

  // optional bytes red_name = 6;
  inline bool has_red_name() const;
  inline void clear_red_name();
  static const int kRedNameFieldNumber = 6;
  inline const ::std::string& red_name() const;
  inline void set_red_name(const ::std::string& value);
  inline void set_red_name(const char* value);
  inline void set_red_name(const void* value, size_t size);
  inline ::std::string* mutable_red_name();
  inline ::std::string* release_red_name();
  inline void set_allocated_red_name(::std::string* red_name);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_ScoreRsp)
 private:
  inline void set_has_blue_score();
  inline void clear_has_blue_score();
  inline void set_has_red_score();
  inline void clear_has_red_score();
  inline void set_has_blue_num();
  inline void clear_has_blue_num();
  inline void set_has_red_num();
  inline void clear_has_red_num();
  inline void set_has_blue_name();
  inline void clear_has_blue_name();
  inline void set_has_red_name();
  inline void clear_has_red_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 blue_score_;
  ::google::protobuf::int32 red_score_;
  ::google::protobuf::int32 blue_num_;
  ::google::protobuf::int32 red_num_;
  ::std::string* blue_name_;
  ::std::string* red_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_ScoreRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_ResultRsp : public ::google::protobuf::Message {
 public:
  FactionWar_ResultRsp();
  virtual ~FactionWar_ResultRsp();

  FactionWar_ResultRsp(const FactionWar_ResultRsp& from);

  inline FactionWar_ResultRsp& operator=(const FactionWar_ResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_ResultRsp& default_instance();

  void Swap(FactionWar_ResultRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_ResultRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_ResultRsp& from);
  void MergeFrom(const FactionWar_ResultRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .proto_ff.WarFightProto info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::WarFightProto& info(int index) const;
  inline ::proto_ff::WarFightProto* mutable_info(int index);
  inline ::proto_ff::WarFightProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarFightProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarFightProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_ResultRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::WarFightProto > info_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_ResultRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_WinInfoReq : public ::google::protobuf::Message {
 public:
  FactionWar_WinInfoReq();
  virtual ~FactionWar_WinInfoReq();

  FactionWar_WinInfoReq(const FactionWar_WinInfoReq& from);

  inline FactionWar_WinInfoReq& operator=(const FactionWar_WinInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_WinInfoReq& default_instance();

  void Swap(FactionWar_WinInfoReq* other);

  // implements Message ----------------------------------------------

  FactionWar_WinInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_WinInfoReq& from);
  void MergeFrom(const FactionWar_WinInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_WinInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_WinInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_WinInfoRsp : public ::google::protobuf::Message {
 public:
  FactionWar_WinInfoRsp();
  virtual ~FactionWar_WinInfoRsp();

  FactionWar_WinInfoRsp(const FactionWar_WinInfoRsp& from);

  inline FactionWar_WinInfoRsp& operator=(const FactionWar_WinInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_WinInfoRsp& default_instance();

  void Swap(FactionWar_WinInfoRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_WinInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_WinInfoRsp& from);
  void MergeFrom(const FactionWar_WinInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 win_num = 3;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 3;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_WinInfoRsp)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_win_num();
  inline void clear_has_win_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 win_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_WinInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_WinLeaderReq : public ::google::protobuf::Message {
 public:
  FactionWar_WinLeaderReq();
  virtual ~FactionWar_WinLeaderReq();

  FactionWar_WinLeaderReq(const FactionWar_WinLeaderReq& from);

  inline FactionWar_WinLeaderReq& operator=(const FactionWar_WinLeaderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_WinLeaderReq& default_instance();

  void Swap(FactionWar_WinLeaderReq* other);

  // implements Message ----------------------------------------------

  FactionWar_WinLeaderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_WinLeaderReq& from);
  void MergeFrom(const FactionWar_WinLeaderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_WinLeaderReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_WinLeaderReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_WinLeaderRsp : public ::google::protobuf::Message {
 public:
  FactionWar_WinLeaderRsp();
  virtual ~FactionWar_WinLeaderRsp();

  FactionWar_WinLeaderRsp(const FactionWar_WinLeaderRsp& from);

  inline FactionWar_WinLeaderRsp& operator=(const FactionWar_WinLeaderRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_WinLeaderRsp& default_instance();

  void Swap(FactionWar_WinLeaderRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_WinLeaderRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_WinLeaderRsp& from);
  void MergeFrom(const FactionWar_WinLeaderRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.WarLeaderInfo leader = 1;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 1;
  inline const ::proto_ff::WarLeaderInfo& leader() const;
  inline ::proto_ff::WarLeaderInfo* mutable_leader();
  inline ::proto_ff::WarLeaderInfo* release_leader();
  inline void set_allocated_leader(::proto_ff::WarLeaderInfo* leader);

  // optional .proto_ff.WarLeaderInfo wife = 2;
  inline bool has_wife() const;
  inline void clear_wife();
  static const int kWifeFieldNumber = 2;
  inline const ::proto_ff::WarLeaderInfo& wife() const;
  inline ::proto_ff::WarLeaderInfo* mutable_wife();
  inline ::proto_ff::WarLeaderInfo* release_wife();
  inline void set_allocated_wife(::proto_ff::WarLeaderInfo* wife);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_WinLeaderRsp)
 private:
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_wife();
  inline void clear_has_wife();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::WarLeaderInfo* leader_;
  ::proto_ff::WarLeaderInfo* wife_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_WinLeaderRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_WinFetchReq : public ::google::protobuf::Message {
 public:
  FactionWar_WinFetchReq();
  virtual ~FactionWar_WinFetchReq();

  FactionWar_WinFetchReq(const FactionWar_WinFetchReq& from);

  inline FactionWar_WinFetchReq& operator=(const FactionWar_WinFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_WinFetchReq& default_instance();

  void Swap(FactionWar_WinFetchReq* other);

  // implements Message ----------------------------------------------

  FactionWar_WinFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_WinFetchReq& from);
  void MergeFrom(const FactionWar_WinFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_WinFetchReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_WinFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_WinFetchRsp : public ::google::protobuf::Message {
 public:
  FactionWar_WinFetchRsp();
  virtual ~FactionWar_WinFetchRsp();

  FactionWar_WinFetchRsp(const FactionWar_WinFetchRsp& from);

  inline FactionWar_WinFetchRsp& operator=(const FactionWar_WinFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_WinFetchRsp& default_instance();

  void Swap(FactionWar_WinFetchRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_WinFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_WinFetchRsp& from);
  void MergeFrom(const FactionWar_WinFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_WinFetchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_WinFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_IsFetchRsp : public ::google::protobuf::Message {
 public:
  FactionWar_IsFetchRsp();
  virtual ~FactionWar_IsFetchRsp();

  FactionWar_IsFetchRsp(const FactionWar_IsFetchRsp& from);

  inline FactionWar_IsFetchRsp& operator=(const FactionWar_IsFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_IsFetchRsp& default_instance();

  void Swap(FactionWar_IsFetchRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_IsFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_IsFetchRsp& from);
  void MergeFrom(const FactionWar_IsFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fetch_war = 1;
  inline bool has_fetch_war() const;
  inline void clear_fetch_war();
  static const int kFetchWarFieldNumber = 1;
  inline ::google::protobuf::int32 fetch_war() const;
  inline void set_fetch_war(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_IsFetchRsp)
 private:
  inline void set_has_fetch_war();
  inline void clear_has_fetch_war();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fetch_war_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_IsFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class PullFactionProto : public ::google::protobuf::Message {
 public:
  PullFactionProto();
  virtual ~PullFactionProto();

  PullFactionProto(const PullFactionProto& from);

  inline PullFactionProto& operator=(const PullFactionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PullFactionProto& default_instance();

  void Swap(PullFactionProto* other);

  // implements Message ----------------------------------------------

  PullFactionProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PullFactionProto& from);
  void MergeFrom(const PullFactionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.PullFactionProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static PullFactionProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionWarProto : public ::google::protobuf::Message {
 public:
  FactionWarProto();
  virtual ~FactionWarProto();

  FactionWarProto(const FactionWarProto& from);

  inline FactionWarProto& operator=(const FactionWarProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWarProto& default_instance();

  void Swap(FactionWarProto* other);

  // implements Message ----------------------------------------------

  FactionWarProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWarProto& from);
  void MergeFrom(const FactionWarProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint64 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // repeated uint64 cid_lst = 5;
  inline int cid_lst_size() const;
  inline void clear_cid_lst();
  static const int kCidLstFieldNumber = 5;
  inline ::google::protobuf::uint64 cid_lst(int index) const;
  inline void set_cid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWarProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWarProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionWarRankProto : public ::google::protobuf::Message {
 public:
  FactionWarRankProto();
  virtual ~FactionWarRankProto();

  FactionWarRankProto(const FactionWarRankProto& from);

  inline FactionWarRankProto& operator=(const FactionWarRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWarRankProto& default_instance();

  void Swap(FactionWarRankProto* other);

  // implements Message ----------------------------------------------

  FactionWarRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWarRankProto& from);
  void MergeFrom(const FactionWarRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWarRankProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWarRankProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2C_PullReq : public ::google::protobuf::Message {
 public:
  FactionWar_S2C_PullReq();
  virtual ~FactionWar_S2C_PullReq();

  FactionWar_S2C_PullReq(const FactionWar_S2C_PullReq& from);

  inline FactionWar_S2C_PullReq& operator=(const FactionWar_S2C_PullReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2C_PullReq& default_instance();

  void Swap(FactionWar_S2C_PullReq* other);

  // implements Message ----------------------------------------------

  FactionWar_S2C_PullReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2C_PullReq& from);
  void MergeFrom(const FactionWar_S2C_PullReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2C_PullReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2C_PullReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_C2S_PullRsp : public ::google::protobuf::Message {
 public:
  FactionWar_C2S_PullRsp();
  virtual ~FactionWar_C2S_PullRsp();

  FactionWar_C2S_PullRsp(const FactionWar_C2S_PullRsp& from);

  inline FactionWar_C2S_PullRsp& operator=(const FactionWar_C2S_PullRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_C2S_PullRsp& default_instance();

  void Swap(FactionWar_C2S_PullRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_C2S_PullRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_C2S_PullRsp& from);
  void MergeFrom(const FactionWar_C2S_PullRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 zid = 1;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 1;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // repeated .proto_ff.PullFactionProto info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::PullFactionProto& info(int index) const;
  inline ::proto_ff::PullFactionProto* mutable_info(int index);
  inline ::proto_ff::PullFactionProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PullFactionProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PullFactionProto >*
      mutable_info();

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_C2S_PullRsp)
 private:
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::PullFactionProto > info_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_C2S_PullRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2L_InfoRsp : public ::google::protobuf::Message {
 public:
  FactionWar_S2L_InfoRsp();
  virtual ~FactionWar_S2L_InfoRsp();

  FactionWar_S2L_InfoRsp(const FactionWar_S2L_InfoRsp& from);

  inline FactionWar_S2L_InfoRsp& operator=(const FactionWar_S2L_InfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2L_InfoRsp& default_instance();

  void Swap(FactionWar_S2L_InfoRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_S2L_InfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2L_InfoRsp& from);
  void MergeFrom(const FactionWar_S2L_InfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 sceneid = 1;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 1;
  inline ::google::protobuf::uint64 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint64 value);

  // repeated .proto_ff.FactionWarProto info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::FactionWarProto& info(int index) const;
  inline ::proto_ff::FactionWarProto* mutable_info(int index);
  inline ::proto_ff::FactionWarProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionWarProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionWarProto >*
      mutable_info();

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 race = 4;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 4;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional uint32 win_id = 6;
  inline bool has_win_id() const;
  inline void clear_win_id();
  static const int kWinIdFieldNumber = 6;
  inline ::google::protobuf::uint32 win_id() const;
  inline void set_win_id(::google::protobuf::uint32 value);

  // optional uint32 win_num = 7;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 7;
  inline ::google::protobuf::uint32 win_num() const;
  inline void set_win_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2L_InfoRsp)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_win_id();
  inline void clear_has_win_id();
  inline void set_has_win_num();
  inline void clear_has_win_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sceneid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionWarProto > info_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::uint32 win_id_;
  ::google::protobuf::uint32 win_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2L_InfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2L_WarResultRsp : public ::google::protobuf::Message {
 public:
  FactionWar_S2L_WarResultRsp();
  virtual ~FactionWar_S2L_WarResultRsp();

  FactionWar_S2L_WarResultRsp(const FactionWar_S2L_WarResultRsp& from);

  inline FactionWar_S2L_WarResultRsp& operator=(const FactionWar_S2L_WarResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2L_WarResultRsp& default_instance();

  void Swap(FactionWar_S2L_WarResultRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_S2L_WarResultRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2L_WarResultRsp& from);
  void MergeFrom(const FactionWar_S2L_WarResultRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 race = 2;
  inline bool has_race() const;
  inline void clear_race();
  static const int kRaceFieldNumber = 2;
  inline ::google::protobuf::int32 race() const;
  inline void set_race(::google::protobuf::int32 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional uint32 faction_id1 = 4;
  inline bool has_faction_id1() const;
  inline void clear_faction_id1();
  static const int kFactionId1FieldNumber = 4;
  inline ::google::protobuf::uint32 faction_id1() const;
  inline void set_faction_id1(::google::protobuf::uint32 value);

  // optional uint32 faction_id2 = 5;
  inline bool has_faction_id2() const;
  inline void clear_faction_id2();
  static const int kFactionId2FieldNumber = 5;
  inline ::google::protobuf::uint32 faction_id2() const;
  inline void set_faction_id2(::google::protobuf::uint32 value);

  // optional uint32 success_id = 6;
  inline bool has_success_id() const;
  inline void clear_success_id();
  static const int kSuccessIdFieldNumber = 6;
  inline ::google::protobuf::uint32 success_id() const;
  inline void set_success_id(::google::protobuf::uint32 value);

  // repeated uint64 cid_lst1 = 7;
  inline int cid_lst1_size() const;
  inline void clear_cid_lst1();
  static const int kCidLst1FieldNumber = 7;
  inline ::google::protobuf::uint64 cid_lst1(int index) const;
  inline void set_cid_lst1(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst1(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst1();

  // repeated uint64 cid_lst2 = 8;
  inline int cid_lst2_size() const;
  inline void clear_cid_lst2();
  static const int kCidLst2FieldNumber = 8;
  inline ::google::protobuf::uint64 cid_lst2(int index) const;
  inline void set_cid_lst2(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst2(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst2();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2L_WarResultRsp)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_faction_id1();
  inline void clear_has_faction_id1();
  inline void set_has_faction_id2();
  inline void clear_has_faction_id2();
  inline void set_has_success_id();
  inline void clear_has_success_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 race_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::uint32 faction_id1_;
  ::google::protobuf::uint32 faction_id2_;
  ::google::protobuf::uint32 success_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2L_WarResultRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2C_RankRewardRsp : public ::google::protobuf::Message {
 public:
  FactionWar_S2C_RankRewardRsp();
  virtual ~FactionWar_S2C_RankRewardRsp();

  FactionWar_S2C_RankRewardRsp(const FactionWar_S2C_RankRewardRsp& from);

  inline FactionWar_S2C_RankRewardRsp& operator=(const FactionWar_S2C_RankRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2C_RankRewardRsp& default_instance();

  void Swap(FactionWar_S2C_RankRewardRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_S2C_RankRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2C_RankRewardRsp& from);
  void MergeFrom(const FactionWar_S2C_RankRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // repeated uint64 cids = 3;
  inline int cids_size() const;
  inline void clear_cids();
  static const int kCidsFieldNumber = 3;
  inline ::google::protobuf::uint64 cids(int index) const;
  inline void set_cids(int index, ::google::protobuf::uint64 value);
  inline void add_cids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cids();

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2C_RankRewardRsp)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cids_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2C_RankRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2C_EndWinRewardRsp : public ::google::protobuf::Message {
 public:
  FactionWar_S2C_EndWinRewardRsp();
  virtual ~FactionWar_S2C_EndWinRewardRsp();

  FactionWar_S2C_EndWinRewardRsp(const FactionWar_S2C_EndWinRewardRsp& from);

  inline FactionWar_S2C_EndWinRewardRsp& operator=(const FactionWar_S2C_EndWinRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2C_EndWinRewardRsp& default_instance();

  void Swap(FactionWar_S2C_EndWinRewardRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_S2C_EndWinRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2C_EndWinRewardRsp& from);
  void MergeFrom(const FactionWar_S2C_EndWinRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional int32 win_num = 2;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 2;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional uint32 win_zid = 3;
  inline bool has_win_zid() const;
  inline void clear_win_zid();
  static const int kWinZidFieldNumber = 3;
  inline ::google::protobuf::uint32 win_zid() const;
  inline void set_win_zid(::google::protobuf::uint32 value);

  // optional uint32 fa_id = 4;
  inline bool has_fa_id() const;
  inline void clear_fa_id();
  static const int kFaIdFieldNumber = 4;
  inline ::google::protobuf::uint32 fa_id() const;
  inline void set_fa_id(::google::protobuf::uint32 value);

  // repeated uint64 cids = 5;
  inline int cids_size() const;
  inline void clear_cids();
  static const int kCidsFieldNumber = 5;
  inline ::google::protobuf::uint64 cids(int index) const;
  inline void set_cids(int index, ::google::protobuf::uint64 value);
  inline void add_cids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cids();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2C_EndWinRewardRsp)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_win_zid();
  inline void clear_has_win_zid();
  inline void set_has_fa_id();
  inline void clear_has_fa_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::uint32 win_zid_;
  ::google::protobuf::uint32 fa_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2C_EndWinRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2C_WinInfoRsp : public ::google::protobuf::Message {
 public:
  FactionWar_S2C_WinInfoRsp();
  virtual ~FactionWar_S2C_WinInfoRsp();

  FactionWar_S2C_WinInfoRsp(const FactionWar_S2C_WinInfoRsp& from);

  inline FactionWar_S2C_WinInfoRsp& operator=(const FactionWar_S2C_WinInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2C_WinInfoRsp& default_instance();

  void Swap(FactionWar_S2C_WinInfoRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_S2C_WinInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2C_WinInfoRsp& from);
  void MergeFrom(const FactionWar_S2C_WinInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional int32 win_num = 2;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 2;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);

  // optional bool reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline bool reward() const;
  inline void set_reward(bool value);

  // repeated uint64 cids = 4;
  inline int cids_size() const;
  inline void clear_cids();
  static const int kCidsFieldNumber = 4;
  inline ::google::protobuf::uint64 cids(int index) const;
  inline void set_cids(int index, ::google::protobuf::uint64 value);
  inline void add_cids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cids();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2C_WinInfoRsp)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cids_;
  bool reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2C_WinInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2C_DelWinRsp : public ::google::protobuf::Message {
 public:
  FactionWar_S2C_DelWinRsp();
  virtual ~FactionWar_S2C_DelWinRsp();

  FactionWar_S2C_DelWinRsp(const FactionWar_S2C_DelWinRsp& from);

  inline FactionWar_S2C_DelWinRsp& operator=(const FactionWar_S2C_DelWinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2C_DelWinRsp& default_instance();

  void Swap(FactionWar_S2C_DelWinRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_S2C_DelWinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2C_DelWinRsp& from);
  void MergeFrom(const FactionWar_S2C_DelWinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2C_DelWinRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2C_DelWinRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2C_LeaderInfoReq : public ::google::protobuf::Message {
 public:
  FactionWar_S2C_LeaderInfoReq();
  virtual ~FactionWar_S2C_LeaderInfoReq();

  FactionWar_S2C_LeaderInfoReq(const FactionWar_S2C_LeaderInfoReq& from);

  inline FactionWar_S2C_LeaderInfoReq& operator=(const FactionWar_S2C_LeaderInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2C_LeaderInfoReq& default_instance();

  void Swap(FactionWar_S2C_LeaderInfoReq* other);

  // implements Message ----------------------------------------------

  FactionWar_S2C_LeaderInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2C_LeaderInfoReq& from);
  void MergeFrom(const FactionWar_S2C_LeaderInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2C_LeaderInfoReq)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2C_LeaderInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_S2C_LeaderInfoRsp : public ::google::protobuf::Message {
 public:
  FactionWar_S2C_LeaderInfoRsp();
  virtual ~FactionWar_S2C_LeaderInfoRsp();

  FactionWar_S2C_LeaderInfoRsp(const FactionWar_S2C_LeaderInfoRsp& from);

  inline FactionWar_S2C_LeaderInfoRsp& operator=(const FactionWar_S2C_LeaderInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_S2C_LeaderInfoRsp& default_instance();

  void Swap(FactionWar_S2C_LeaderInfoRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_S2C_LeaderInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_S2C_LeaderInfoRsp& from);
  void MergeFrom(const FactionWar_S2C_LeaderInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional .proto_ff.WarLeaderInfo leader = 2;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 2;
  inline const ::proto_ff::WarLeaderInfo& leader() const;
  inline ::proto_ff::WarLeaderInfo* mutable_leader();
  inline ::proto_ff::WarLeaderInfo* release_leader();
  inline void set_allocated_leader(::proto_ff::WarLeaderInfo* leader);

  // optional .proto_ff.WarLeaderInfo wife = 3;
  inline bool has_wife() const;
  inline void clear_wife();
  static const int kWifeFieldNumber = 3;
  inline const ::proto_ff::WarLeaderInfo& wife() const;
  inline ::proto_ff::WarLeaderInfo* mutable_wife();
  inline ::proto_ff::WarLeaderInfo* release_wife();
  inline void set_allocated_wife(::proto_ff::WarLeaderInfo* wife);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_S2C_LeaderInfoRsp)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_wife();
  inline void clear_has_wife();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::WarLeaderInfo* leader_;
  ::proto_ff::WarLeaderInfo* wife_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_S2C_LeaderInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_C2L_FetchWinRewardReq : public ::google::protobuf::Message {
 public:
  FactionWar_C2L_FetchWinRewardReq();
  virtual ~FactionWar_C2L_FetchWinRewardReq();

  FactionWar_C2L_FetchWinRewardReq(const FactionWar_C2L_FetchWinRewardReq& from);

  inline FactionWar_C2L_FetchWinRewardReq& operator=(const FactionWar_C2L_FetchWinRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_C2L_FetchWinRewardReq& default_instance();

  void Swap(FactionWar_C2L_FetchWinRewardReq* other);

  // implements Message ----------------------------------------------

  FactionWar_C2L_FetchWinRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_C2L_FetchWinRewardReq& from);
  void MergeFrom(const FactionWar_C2L_FetchWinRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_C2L_FetchWinRewardReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_C2L_FetchWinRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionWar_C2S_WinDismissRsp : public ::google::protobuf::Message {
 public:
  FactionWar_C2S_WinDismissRsp();
  virtual ~FactionWar_C2S_WinDismissRsp();

  FactionWar_C2S_WinDismissRsp(const FactionWar_C2S_WinDismissRsp& from);

  inline FactionWar_C2S_WinDismissRsp& operator=(const FactionWar_C2S_WinDismissRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionWar_C2S_WinDismissRsp& default_instance();

  void Swap(FactionWar_C2S_WinDismissRsp* other);

  // implements Message ----------------------------------------------

  FactionWar_C2S_WinDismissRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionWar_C2S_WinDismissRsp& from);
  void MergeFrom(const FactionWar_C2S_WinDismissRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionWar_C2S_WinDismissRsp)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FactionWar_2eproto();
  friend void protobuf_AssignDesc_FactionWar_2eproto();
  friend void protobuf_ShutdownFile_FactionWar_2eproto();

  void InitAsDefaultInstance();
  static FactionWar_C2S_WinDismissRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// RaceFactionProto

// optional uint32 faction_id = 1;
inline bool RaceFactionProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceFactionProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceFactionProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceFactionProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 RaceFactionProto::faction_id() const {
  return faction_id_;
}
inline void RaceFactionProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool RaceFactionProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceFactionProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceFactionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceFactionProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RaceFactionProto::name() const {
  return *name_;
}
inline void RaceFactionProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RaceFactionProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RaceFactionProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RaceFactionProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RaceFactionProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RaceFactionProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 3;
inline bool RaceFactionProto::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceFactionProto::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceFactionProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceFactionProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RaceFactionProto::zid() const {
  return zid_;
}
inline void RaceFactionProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// RaceFactionMatchProto

// repeated .proto_ff.RaceFactionProto match = 1;
inline int RaceFactionMatchProto::match_size() const {
  return match_.size();
}
inline void RaceFactionMatchProto::clear_match() {
  match_.Clear();
}
inline const ::proto_ff::RaceFactionProto& RaceFactionMatchProto::match(int index) const {
  return match_.Get(index);
}
inline ::proto_ff::RaceFactionProto* RaceFactionMatchProto::mutable_match(int index) {
  return match_.Mutable(index);
}
inline ::proto_ff::RaceFactionProto* RaceFactionMatchProto::add_match() {
  return match_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto >&
RaceFactionMatchProto::match() const {
  return match_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto >*
RaceFactionMatchProto::mutable_match() {
  return &match_;
}

// optional uint32 faction_id = 2;
inline bool RaceFactionMatchProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceFactionMatchProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceFactionMatchProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceFactionMatchProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 RaceFactionMatchProto::faction_id() const {
  return faction_id_;
}
inline void RaceFactionMatchProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// RaceProto

// optional int32 race = 1;
inline bool RaceProto::has_race() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceProto::set_has_race() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceProto::clear_has_race() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceProto::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 RaceProto::race() const {
  return race_;
}
inline void RaceProto::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// repeated .proto_ff.RaceFactionProto info_lst = 2;
inline int RaceProto::info_lst_size() const {
  return info_lst_.size();
}
inline void RaceProto::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::RaceFactionProto& RaceProto::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::RaceFactionProto* RaceProto::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::RaceFactionProto* RaceProto::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto >&
RaceProto::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionProto >*
RaceProto::mutable_info_lst() {
  return &info_lst_;
}

// -------------------------------------------------------------------

// RaceListProto

// repeated .proto_ff.RaceProto race_lst = 1;
inline int RaceListProto::race_lst_size() const {
  return race_lst_.size();
}
inline void RaceListProto::clear_race_lst() {
  race_lst_.Clear();
}
inline const ::proto_ff::RaceProto& RaceListProto::race_lst(int index) const {
  return race_lst_.Get(index);
}
inline ::proto_ff::RaceProto* RaceListProto::mutable_race_lst(int index) {
  return race_lst_.Mutable(index);
}
inline ::proto_ff::RaceProto* RaceListProto::add_race_lst() {
  return race_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceProto >&
RaceListProto::race_lst() const {
  return race_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceProto >*
RaceListProto::mutable_race_lst() {
  return &race_lst_;
}

// -------------------------------------------------------------------

// RaceMatchProto

// optional int32 race = 1;
inline bool RaceMatchProto::has_race() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceMatchProto::set_has_race() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceMatchProto::clear_has_race() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceMatchProto::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 RaceMatchProto::race() const {
  return race_;
}
inline void RaceMatchProto::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// repeated .proto_ff.RaceFactionMatchProto info_lst = 2;
inline int RaceMatchProto::info_lst_size() const {
  return info_lst_.size();
}
inline void RaceMatchProto::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::RaceFactionMatchProto& RaceMatchProto::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::RaceFactionMatchProto* RaceMatchProto::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::RaceFactionMatchProto* RaceMatchProto::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionMatchProto >&
RaceMatchProto::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceFactionMatchProto >*
RaceMatchProto::mutable_info_lst() {
  return &info_lst_;
}

// optional uint32 faction_id = 3;
inline bool RaceMatchProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceMatchProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceMatchProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceMatchProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 RaceMatchProto::faction_id() const {
  return faction_id_;
}
inline void RaceMatchProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// RaceMatchListProto

// repeated .proto_ff.RaceMatchProto info_lst = 1;
inline int RaceMatchListProto::info_lst_size() const {
  return info_lst_.size();
}
inline void RaceMatchListProto::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::RaceMatchProto& RaceMatchListProto::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::RaceMatchProto* RaceMatchListProto::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::RaceMatchProto* RaceMatchListProto::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceMatchProto >&
RaceMatchListProto::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RaceMatchProto >*
RaceMatchListProto::mutable_info_lst() {
  return &info_lst_;
}

// -------------------------------------------------------------------

// WarRankProto

// optional int32 rank = 1;
inline bool WarRankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarRankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarRankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarRankProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 WarRankProto::rank() const {
  return rank_;
}
inline void WarRankProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 faction_id = 2;
inline bool WarRankProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarRankProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarRankProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarRankProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 WarRankProto::faction_id() const {
  return faction_id_;
}
inline void WarRankProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 3;
inline bool WarRankProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarRankProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarRankProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarRankProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WarRankProto::name() const {
  return *name_;
}
inline void WarRankProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarRankProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarRankProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WarRankProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WarRankProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WarRankProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 4;
inline bool WarRankProto::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarRankProto::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarRankProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarRankProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 WarRankProto::zid() const {
  return zid_;
}
inline void WarRankProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// WarRankListProto

// repeated .proto_ff.WarRankProto info_lst = 1;
inline int WarRankListProto::info_lst_size() const {
  return info_lst_.size();
}
inline void WarRankListProto::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::WarRankProto& WarRankListProto::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::WarRankProto* WarRankListProto::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::WarRankProto* WarRankListProto::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankProto >&
WarRankListProto::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarRankProto >*
WarRankListProto::mutable_info_lst() {
  return &info_lst_;
}

// -------------------------------------------------------------------

// WarTowerProto

// optional uint64 mons_id = 1;
inline bool WarTowerProto::has_mons_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarTowerProto::set_has_mons_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarTowerProto::clear_has_mons_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarTowerProto::clear_mons_id() {
  mons_id_ = GOOGLE_ULONGLONG(0);
  clear_has_mons_id();
}
inline ::google::protobuf::uint64 WarTowerProto::mons_id() const {
  return mons_id_;
}
inline void WarTowerProto::set_mons_id(::google::protobuf::uint64 value) {
  set_has_mons_id();
  mons_id_ = value;
}

// optional bool is_dead = 2;
inline bool WarTowerProto::has_is_dead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarTowerProto::set_has_is_dead() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarTowerProto::clear_has_is_dead() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarTowerProto::clear_is_dead() {
  is_dead_ = false;
  clear_has_is_dead();
}
inline bool WarTowerProto::is_dead() const {
  return is_dead_;
}
inline void WarTowerProto::set_is_dead(bool value) {
  set_has_is_dead();
  is_dead_ = value;
}

// optional int64 hp = 3;
inline bool WarTowerProto::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarTowerProto::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarTowerProto::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarTowerProto::clear_hp() {
  hp_ = GOOGLE_LONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::int64 WarTowerProto::hp() const {
  return hp_;
}
inline void WarTowerProto::set_hp(::google::protobuf::int64 value) {
  set_has_hp();
  hp_ = value;
}

// optional int64 maxhp = 4;
inline bool WarTowerProto::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarTowerProto::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarTowerProto::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarTowerProto::clear_maxhp() {
  maxhp_ = GOOGLE_LONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::int64 WarTowerProto::maxhp() const {
  return maxhp_;
}
inline void WarTowerProto::set_maxhp(::google::protobuf::int64 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional .proto_ff.Vector3PB pos = 5;
inline bool WarTowerProto::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WarTowerProto::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WarTowerProto::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WarTowerProto::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& WarTowerProto::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* WarTowerProto::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* WarTowerProto::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void WarTowerProto::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// WarTowerListProto

// repeated .proto_ff.WarTowerProto info_lst = 1;
inline int WarTowerListProto::info_lst_size() const {
  return info_lst_.size();
}
inline void WarTowerListProto::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::WarTowerProto& WarTowerListProto::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::WarTowerProto* WarTowerListProto::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::WarTowerProto* WarTowerListProto::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarTowerProto >&
WarTowerListProto::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarTowerProto >*
WarTowerListProto::mutable_info_lst() {
  return &info_lst_;
}

// -------------------------------------------------------------------

// WarScoreRankProto

// optional int32 rank = 1;
inline bool WarScoreRankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarScoreRankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarScoreRankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarScoreRankProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 WarScoreRankProto::rank() const {
  return rank_;
}
inline void WarScoreRankProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 cid = 2;
inline bool WarScoreRankProto::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarScoreRankProto::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarScoreRankProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarScoreRankProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 WarScoreRankProto::cid() const {
  return cid_;
}
inline void WarScoreRankProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 3;
inline bool WarScoreRankProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarScoreRankProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarScoreRankProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarScoreRankProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WarScoreRankProto::name() const {
  return *name_;
}
inline void WarScoreRankProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarScoreRankProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarScoreRankProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WarScoreRankProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WarScoreRankProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WarScoreRankProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 score = 4;
inline bool WarScoreRankProto::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarScoreRankProto::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarScoreRankProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarScoreRankProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 WarScoreRankProto::score() const {
  return score_;
}
inline void WarScoreRankProto::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// WarScoreRankListProto

// repeated .proto_ff.WarScoreRankProto info_lst = 1;
inline int WarScoreRankListProto::info_lst_size() const {
  return info_lst_.size();
}
inline void WarScoreRankListProto::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::WarScoreRankProto& WarScoreRankListProto::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::WarScoreRankProto* WarScoreRankListProto::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::WarScoreRankProto* WarScoreRankListProto::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarScoreRankProto >&
WarScoreRankListProto::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarScoreRankProto >*
WarScoreRankListProto::mutable_info_lst() {
  return &info_lst_;
}

// -------------------------------------------------------------------

// WarFightProto

// optional int32 rank = 1;
inline bool WarFightProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarFightProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarFightProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarFightProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 WarFightProto::rank() const {
  return rank_;
}
inline void WarFightProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 score = 2;
inline bool WarFightProto::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarFightProto::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarFightProto::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarFightProto::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 WarFightProto::score() const {
  return score_;
}
inline void WarFightProto::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional uint64 cid = 3;
inline bool WarFightProto::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarFightProto::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarFightProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarFightProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 WarFightProto::cid() const {
  return cid_;
}
inline void WarFightProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 4;
inline bool WarFightProto::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarFightProto::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarFightProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarFightProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WarFightProto::name() const {
  return *name_;
}
inline void WarFightProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarFightProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarFightProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WarFightProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WarFightProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WarFightProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 5;
inline bool WarFightProto::has_zid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WarFightProto::set_has_zid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WarFightProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WarFightProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 WarFightProto::zid() const {
  return zid_;
}
inline void WarFightProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 kill = 6;
inline bool WarFightProto::has_kill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WarFightProto::set_has_kill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WarFightProto::clear_has_kill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WarFightProto::clear_kill() {
  kill_ = 0;
  clear_has_kill();
}
inline ::google::protobuf::int32 WarFightProto::kill() const {
  return kill_;
}
inline void WarFightProto::set_kill(::google::protobuf::int32 value) {
  set_has_kill();
  kill_ = value;
}

// optional int32 dead = 7;
inline bool WarFightProto::has_dead() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WarFightProto::set_has_dead() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WarFightProto::clear_has_dead() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WarFightProto::clear_dead() {
  dead_ = 0;
  clear_has_dead();
}
inline ::google::protobuf::int32 WarFightProto::dead() const {
  return dead_;
}
inline void WarFightProto::set_dead(::google::protobuf::int32 value) {
  set_has_dead();
  dead_ = value;
}

// optional int32 tower = 8;
inline bool WarFightProto::has_tower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WarFightProto::set_has_tower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WarFightProto::clear_has_tower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WarFightProto::clear_tower() {
  tower_ = 0;
  clear_has_tower();
}
inline ::google::protobuf::int32 WarFightProto::tower() const {
  return tower_;
}
inline void WarFightProto::set_tower(::google::protobuf::int32 value) {
  set_has_tower();
  tower_ = value;
}

// repeated .proto_ff.ComItem reward = 9;
inline int WarFightProto::reward_size() const {
  return reward_.size();
}
inline void WarFightProto::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::ComItem& WarFightProto::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::ComItem* WarFightProto::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::ComItem* WarFightProto::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
WarFightProto::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
WarFightProto::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// WarLeaderInfo

// optional uint64 cid = 1;
inline bool WarLeaderInfo::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarLeaderInfo::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarLeaderInfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarLeaderInfo::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 WarLeaderInfo::cid() const {
  return cid_;
}
inline void WarLeaderInfo::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool WarLeaderInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarLeaderInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarLeaderInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarLeaderInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WarLeaderInfo::name() const {
  return *name_;
}
inline void WarLeaderInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarLeaderInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WarLeaderInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WarLeaderInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WarLeaderInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WarLeaderInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 3;
inline bool WarLeaderInfo::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WarLeaderInfo::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WarLeaderInfo::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WarLeaderInfo::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 WarLeaderInfo::zid() const {
  return zid_;
}
inline void WarLeaderInfo::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional .proto_ff.RoleFacadeProto facade = 4;
inline bool WarLeaderInfo::has_facade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WarLeaderInfo::set_has_facade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WarLeaderInfo::clear_has_facade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WarLeaderInfo::clear_facade() {
  if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
  clear_has_facade();
}
inline const ::proto_ff::RoleFacadeProto& WarLeaderInfo::facade() const {
  return facade_ != NULL ? *facade_ : *default_instance_->facade_;
}
inline ::proto_ff::RoleFacadeProto* WarLeaderInfo::mutable_facade() {
  set_has_facade();
  if (facade_ == NULL) facade_ = new ::proto_ff::RoleFacadeProto;
  return facade_;
}
inline ::proto_ff::RoleFacadeProto* WarLeaderInfo::release_facade() {
  clear_has_facade();
  ::proto_ff::RoleFacadeProto* temp = facade_;
  facade_ = NULL;
  return temp;
}
inline void WarLeaderInfo::set_allocated_facade(::proto_ff::RoleFacadeProto* facade) {
  delete facade_;
  facade_ = facade;
  if (facade) {
    set_has_facade();
  } else {
    clear_has_facade();
  }
}

// -------------------------------------------------------------------

// FactionWar_RaceReq

// -------------------------------------------------------------------

// FactionWar_RaceRsp

// optional .proto_ff.RaceListProto race = 1;
inline bool FactionWar_RaceRsp::has_race() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_RaceRsp::set_has_race() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_RaceRsp::clear_has_race() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_RaceRsp::clear_race() {
  if (race_ != NULL) race_->::proto_ff::RaceListProto::Clear();
  clear_has_race();
}
inline const ::proto_ff::RaceListProto& FactionWar_RaceRsp::race() const {
  return race_ != NULL ? *race_ : *default_instance_->race_;
}
inline ::proto_ff::RaceListProto* FactionWar_RaceRsp::mutable_race() {
  set_has_race();
  if (race_ == NULL) race_ = new ::proto_ff::RaceListProto;
  return race_;
}
inline ::proto_ff::RaceListProto* FactionWar_RaceRsp::release_race() {
  clear_has_race();
  ::proto_ff::RaceListProto* temp = race_;
  race_ = NULL;
  return temp;
}
inline void FactionWar_RaceRsp::set_allocated_race(::proto_ff::RaceListProto* race) {
  delete race_;
  race_ = race;
  if (race) {
    set_has_race();
  } else {
    clear_has_race();
  }
}

// optional .proto_ff.RaceMatchListProto match = 2;
inline bool FactionWar_RaceRsp::has_match() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_RaceRsp::set_has_match() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_RaceRsp::clear_has_match() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_RaceRsp::clear_match() {
  if (match_ != NULL) match_->::proto_ff::RaceMatchListProto::Clear();
  clear_has_match();
}
inline const ::proto_ff::RaceMatchListProto& FactionWar_RaceRsp::match() const {
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
inline ::proto_ff::RaceMatchListProto* FactionWar_RaceRsp::mutable_match() {
  set_has_match();
  if (match_ == NULL) match_ = new ::proto_ff::RaceMatchListProto;
  return match_;
}
inline ::proto_ff::RaceMatchListProto* FactionWar_RaceRsp::release_match() {
  clear_has_match();
  ::proto_ff::RaceMatchListProto* temp = match_;
  match_ = NULL;
  return temp;
}
inline void FactionWar_RaceRsp::set_allocated_match(::proto_ff::RaceMatchListProto* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
}

// optional int32 stage = 3;
inline bool FactionWar_RaceRsp::has_stage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_RaceRsp::set_has_stage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_RaceRsp::clear_has_stage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_RaceRsp::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 FactionWar_RaceRsp::stage() const {
  return stage_;
}
inline void FactionWar_RaceRsp::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// -------------------------------------------------------------------

// FactionWar_MatchRsp

// optional .proto_ff.RaceMatchListProto match = 1;
inline bool FactionWar_MatchRsp::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_MatchRsp::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_MatchRsp::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_MatchRsp::clear_match() {
  if (match_ != NULL) match_->::proto_ff::RaceMatchListProto::Clear();
  clear_has_match();
}
inline const ::proto_ff::RaceMatchListProto& FactionWar_MatchRsp::match() const {
  return match_ != NULL ? *match_ : *default_instance_->match_;
}
inline ::proto_ff::RaceMatchListProto* FactionWar_MatchRsp::mutable_match() {
  set_has_match();
  if (match_ == NULL) match_ = new ::proto_ff::RaceMatchListProto;
  return match_;
}
inline ::proto_ff::RaceMatchListProto* FactionWar_MatchRsp::release_match() {
  clear_has_match();
  ::proto_ff::RaceMatchListProto* temp = match_;
  match_ = NULL;
  return temp;
}
inline void FactionWar_MatchRsp::set_allocated_match(::proto_ff::RaceMatchListProto* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
}

// -------------------------------------------------------------------

// FactionWar_RankReq

// -------------------------------------------------------------------

// FactionWar_RankRsp

// optional .proto_ff.WarRankListProto info = 1;
inline bool FactionWar_RankRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_RankRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_RankRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_RankRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::WarRankListProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::WarRankListProto& FactionWar_RankRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::WarRankListProto* FactionWar_RankRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::WarRankListProto;
  return info_;
}
inline ::proto_ff::WarRankListProto* FactionWar_RankRsp::release_info() {
  clear_has_info();
  ::proto_ff::WarRankListProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void FactionWar_RankRsp::set_allocated_info(::proto_ff::WarRankListProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// FactionWar_EnterBattleReq

// -------------------------------------------------------------------

// FactionWar_EnterBattleRsp

// required int32 ret = 1;
inline bool FactionWar_EnterBattleRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_EnterBattleRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_EnterBattleRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_EnterBattleRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FactionWar_EnterBattleRsp::ret() const {
  return ret_;
}
inline void FactionWar_EnterBattleRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// FactionWar_BattleInfoRsp

// optional int32 stage = 1;
inline bool FactionWar_BattleInfoRsp::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_BattleInfoRsp::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_BattleInfoRsp::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_BattleInfoRsp::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 FactionWar_BattleInfoRsp::stage() const {
  return stage_;
}
inline void FactionWar_BattleInfoRsp::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// optional int32 score = 2;
inline bool FactionWar_BattleInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_BattleInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_BattleInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_BattleInfoRsp::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 FactionWar_BattleInfoRsp::score() const {
  return score_;
}
inline void FactionWar_BattleInfoRsp::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 car_num = 3;
inline bool FactionWar_BattleInfoRsp::has_car_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_BattleInfoRsp::set_has_car_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_BattleInfoRsp::clear_has_car_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_BattleInfoRsp::clear_car_num() {
  car_num_ = 0;
  clear_has_car_num();
}
inline ::google::protobuf::int32 FactionWar_BattleInfoRsp::car_num() const {
  return car_num_;
}
inline void FactionWar_BattleInfoRsp::set_car_num(::google::protobuf::int32 value) {
  set_has_car_num();
  car_num_ = value;
}

// optional int32 camp = 4;
inline bool FactionWar_BattleInfoRsp::has_camp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionWar_BattleInfoRsp::set_has_camp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionWar_BattleInfoRsp::clear_has_camp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionWar_BattleInfoRsp::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 FactionWar_BattleInfoRsp::camp() const {
  return camp_;
}
inline void FactionWar_BattleInfoRsp::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// -------------------------------------------------------------------

// FactionWar_TowerHpRsp

// optional .proto_ff.WarTowerListProto tower = 1;
inline bool FactionWar_TowerHpRsp::has_tower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_TowerHpRsp::set_has_tower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_TowerHpRsp::clear_has_tower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_TowerHpRsp::clear_tower() {
  if (tower_ != NULL) tower_->::proto_ff::WarTowerListProto::Clear();
  clear_has_tower();
}
inline const ::proto_ff::WarTowerListProto& FactionWar_TowerHpRsp::tower() const {
  return tower_ != NULL ? *tower_ : *default_instance_->tower_;
}
inline ::proto_ff::WarTowerListProto* FactionWar_TowerHpRsp::mutable_tower() {
  set_has_tower();
  if (tower_ == NULL) tower_ = new ::proto_ff::WarTowerListProto;
  return tower_;
}
inline ::proto_ff::WarTowerListProto* FactionWar_TowerHpRsp::release_tower() {
  clear_has_tower();
  ::proto_ff::WarTowerListProto* temp = tower_;
  tower_ = NULL;
  return temp;
}
inline void FactionWar_TowerHpRsp::set_allocated_tower(::proto_ff::WarTowerListProto* tower) {
  delete tower_;
  tower_ = tower;
  if (tower) {
    set_has_tower();
  } else {
    clear_has_tower();
  }
}

// -------------------------------------------------------------------

// FactionWar_ScoreRankRsp

// optional .proto_ff.WarScoreRankListProto rank = 1;
inline bool FactionWar_ScoreRankRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_ScoreRankRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_ScoreRankRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_ScoreRankRsp::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::WarScoreRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::WarScoreRankListProto& FactionWar_ScoreRankRsp::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::WarScoreRankListProto* FactionWar_ScoreRankRsp::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::WarScoreRankListProto;
  return rank_;
}
inline ::proto_ff::WarScoreRankListProto* FactionWar_ScoreRankRsp::release_rank() {
  clear_has_rank();
  ::proto_ff::WarScoreRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void FactionWar_ScoreRankRsp::set_allocated_rank(::proto_ff::WarScoreRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// -------------------------------------------------------------------

// FactionWar_ScoreRsp

// optional int32 blue_score = 1;
inline bool FactionWar_ScoreRsp::has_blue_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_ScoreRsp::set_has_blue_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_ScoreRsp::clear_has_blue_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_ScoreRsp::clear_blue_score() {
  blue_score_ = 0;
  clear_has_blue_score();
}
inline ::google::protobuf::int32 FactionWar_ScoreRsp::blue_score() const {
  return blue_score_;
}
inline void FactionWar_ScoreRsp::set_blue_score(::google::protobuf::int32 value) {
  set_has_blue_score();
  blue_score_ = value;
}

// optional int32 red_score = 2;
inline bool FactionWar_ScoreRsp::has_red_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_ScoreRsp::set_has_red_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_ScoreRsp::clear_has_red_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_ScoreRsp::clear_red_score() {
  red_score_ = 0;
  clear_has_red_score();
}
inline ::google::protobuf::int32 FactionWar_ScoreRsp::red_score() const {
  return red_score_;
}
inline void FactionWar_ScoreRsp::set_red_score(::google::protobuf::int32 value) {
  set_has_red_score();
  red_score_ = value;
}

// optional int32 blue_num = 3;
inline bool FactionWar_ScoreRsp::has_blue_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_ScoreRsp::set_has_blue_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_ScoreRsp::clear_has_blue_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_ScoreRsp::clear_blue_num() {
  blue_num_ = 0;
  clear_has_blue_num();
}
inline ::google::protobuf::int32 FactionWar_ScoreRsp::blue_num() const {
  return blue_num_;
}
inline void FactionWar_ScoreRsp::set_blue_num(::google::protobuf::int32 value) {
  set_has_blue_num();
  blue_num_ = value;
}

// optional int32 red_num = 4;
inline bool FactionWar_ScoreRsp::has_red_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionWar_ScoreRsp::set_has_red_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionWar_ScoreRsp::clear_has_red_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionWar_ScoreRsp::clear_red_num() {
  red_num_ = 0;
  clear_has_red_num();
}
inline ::google::protobuf::int32 FactionWar_ScoreRsp::red_num() const {
  return red_num_;
}
inline void FactionWar_ScoreRsp::set_red_num(::google::protobuf::int32 value) {
  set_has_red_num();
  red_num_ = value;
}

// optional bytes blue_name = 5;
inline bool FactionWar_ScoreRsp::has_blue_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionWar_ScoreRsp::set_has_blue_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionWar_ScoreRsp::clear_has_blue_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionWar_ScoreRsp::clear_blue_name() {
  if (blue_name_ != &::google::protobuf::internal::kEmptyString) {
    blue_name_->clear();
  }
  clear_has_blue_name();
}
inline const ::std::string& FactionWar_ScoreRsp::blue_name() const {
  return *blue_name_;
}
inline void FactionWar_ScoreRsp::set_blue_name(const ::std::string& value) {
  set_has_blue_name();
  if (blue_name_ == &::google::protobuf::internal::kEmptyString) {
    blue_name_ = new ::std::string;
  }
  blue_name_->assign(value);
}
inline void FactionWar_ScoreRsp::set_blue_name(const char* value) {
  set_has_blue_name();
  if (blue_name_ == &::google::protobuf::internal::kEmptyString) {
    blue_name_ = new ::std::string;
  }
  blue_name_->assign(value);
}
inline void FactionWar_ScoreRsp::set_blue_name(const void* value, size_t size) {
  set_has_blue_name();
  if (blue_name_ == &::google::protobuf::internal::kEmptyString) {
    blue_name_ = new ::std::string;
  }
  blue_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionWar_ScoreRsp::mutable_blue_name() {
  set_has_blue_name();
  if (blue_name_ == &::google::protobuf::internal::kEmptyString) {
    blue_name_ = new ::std::string;
  }
  return blue_name_;
}
inline ::std::string* FactionWar_ScoreRsp::release_blue_name() {
  clear_has_blue_name();
  if (blue_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = blue_name_;
    blue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionWar_ScoreRsp::set_allocated_blue_name(::std::string* blue_name) {
  if (blue_name_ != &::google::protobuf::internal::kEmptyString) {
    delete blue_name_;
  }
  if (blue_name) {
    set_has_blue_name();
    blue_name_ = blue_name;
  } else {
    clear_has_blue_name();
    blue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes red_name = 6;
inline bool FactionWar_ScoreRsp::has_red_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionWar_ScoreRsp::set_has_red_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionWar_ScoreRsp::clear_has_red_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionWar_ScoreRsp::clear_red_name() {
  if (red_name_ != &::google::protobuf::internal::kEmptyString) {
    red_name_->clear();
  }
  clear_has_red_name();
}
inline const ::std::string& FactionWar_ScoreRsp::red_name() const {
  return *red_name_;
}
inline void FactionWar_ScoreRsp::set_red_name(const ::std::string& value) {
  set_has_red_name();
  if (red_name_ == &::google::protobuf::internal::kEmptyString) {
    red_name_ = new ::std::string;
  }
  red_name_->assign(value);
}
inline void FactionWar_ScoreRsp::set_red_name(const char* value) {
  set_has_red_name();
  if (red_name_ == &::google::protobuf::internal::kEmptyString) {
    red_name_ = new ::std::string;
  }
  red_name_->assign(value);
}
inline void FactionWar_ScoreRsp::set_red_name(const void* value, size_t size) {
  set_has_red_name();
  if (red_name_ == &::google::protobuf::internal::kEmptyString) {
    red_name_ = new ::std::string;
  }
  red_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionWar_ScoreRsp::mutable_red_name() {
  set_has_red_name();
  if (red_name_ == &::google::protobuf::internal::kEmptyString) {
    red_name_ = new ::std::string;
  }
  return red_name_;
}
inline ::std::string* FactionWar_ScoreRsp::release_red_name() {
  clear_has_red_name();
  if (red_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = red_name_;
    red_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionWar_ScoreRsp::set_allocated_red_name(::std::string* red_name) {
  if (red_name_ != &::google::protobuf::internal::kEmptyString) {
    delete red_name_;
  }
  if (red_name) {
    set_has_red_name();
    red_name_ = red_name;
  } else {
    clear_has_red_name();
    red_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FactionWar_ResultRsp

// optional int32 result = 1;
inline bool FactionWar_ResultRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_ResultRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_ResultRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_ResultRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 FactionWar_ResultRsp::result() const {
  return result_;
}
inline void FactionWar_ResultRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .proto_ff.WarFightProto info = 2;
inline int FactionWar_ResultRsp::info_size() const {
  return info_.size();
}
inline void FactionWar_ResultRsp::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::WarFightProto& FactionWar_ResultRsp::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::WarFightProto* FactionWar_ResultRsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::WarFightProto* FactionWar_ResultRsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::WarFightProto >&
FactionWar_ResultRsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::WarFightProto >*
FactionWar_ResultRsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FactionWar_WinInfoReq

// -------------------------------------------------------------------

// FactionWar_WinInfoRsp

// optional uint32 faction_id = 1;
inline bool FactionWar_WinInfoRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_WinInfoRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_WinInfoRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_WinInfoRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionWar_WinInfoRsp::faction_id() const {
  return faction_id_;
}
inline void FactionWar_WinInfoRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionWar_WinInfoRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_WinInfoRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_WinInfoRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_WinInfoRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionWar_WinInfoRsp::name() const {
  return *name_;
}
inline void FactionWar_WinInfoRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionWar_WinInfoRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionWar_WinInfoRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionWar_WinInfoRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionWar_WinInfoRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionWar_WinInfoRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 win_num = 3;
inline bool FactionWar_WinInfoRsp::has_win_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_WinInfoRsp::set_has_win_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_WinInfoRsp::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_WinInfoRsp::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 FactionWar_WinInfoRsp::win_num() const {
  return win_num_;
}
inline void FactionWar_WinInfoRsp::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// -------------------------------------------------------------------

// FactionWar_WinLeaderReq

// -------------------------------------------------------------------

// FactionWar_WinLeaderRsp

// optional .proto_ff.WarLeaderInfo leader = 1;
inline bool FactionWar_WinLeaderRsp::has_leader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_WinLeaderRsp::set_has_leader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_WinLeaderRsp::clear_has_leader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_WinLeaderRsp::clear_leader() {
  if (leader_ != NULL) leader_->::proto_ff::WarLeaderInfo::Clear();
  clear_has_leader();
}
inline const ::proto_ff::WarLeaderInfo& FactionWar_WinLeaderRsp::leader() const {
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::proto_ff::WarLeaderInfo* FactionWar_WinLeaderRsp::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::proto_ff::WarLeaderInfo;
  return leader_;
}
inline ::proto_ff::WarLeaderInfo* FactionWar_WinLeaderRsp::release_leader() {
  clear_has_leader();
  ::proto_ff::WarLeaderInfo* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void FactionWar_WinLeaderRsp::set_allocated_leader(::proto_ff::WarLeaderInfo* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
}

// optional .proto_ff.WarLeaderInfo wife = 2;
inline bool FactionWar_WinLeaderRsp::has_wife() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_WinLeaderRsp::set_has_wife() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_WinLeaderRsp::clear_has_wife() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_WinLeaderRsp::clear_wife() {
  if (wife_ != NULL) wife_->::proto_ff::WarLeaderInfo::Clear();
  clear_has_wife();
}
inline const ::proto_ff::WarLeaderInfo& FactionWar_WinLeaderRsp::wife() const {
  return wife_ != NULL ? *wife_ : *default_instance_->wife_;
}
inline ::proto_ff::WarLeaderInfo* FactionWar_WinLeaderRsp::mutable_wife() {
  set_has_wife();
  if (wife_ == NULL) wife_ = new ::proto_ff::WarLeaderInfo;
  return wife_;
}
inline ::proto_ff::WarLeaderInfo* FactionWar_WinLeaderRsp::release_wife() {
  clear_has_wife();
  ::proto_ff::WarLeaderInfo* temp = wife_;
  wife_ = NULL;
  return temp;
}
inline void FactionWar_WinLeaderRsp::set_allocated_wife(::proto_ff::WarLeaderInfo* wife) {
  delete wife_;
  wife_ = wife;
  if (wife) {
    set_has_wife();
  } else {
    clear_has_wife();
  }
}

// -------------------------------------------------------------------

// FactionWar_WinFetchReq

// -------------------------------------------------------------------

// FactionWar_WinFetchRsp

// required int32 ret = 1;
inline bool FactionWar_WinFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_WinFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_WinFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_WinFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FactionWar_WinFetchRsp::ret() const {
  return ret_;
}
inline void FactionWar_WinFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// FactionWar_IsFetchRsp

// optional int32 fetch_war = 1;
inline bool FactionWar_IsFetchRsp::has_fetch_war() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_IsFetchRsp::set_has_fetch_war() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_IsFetchRsp::clear_has_fetch_war() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_IsFetchRsp::clear_fetch_war() {
  fetch_war_ = 0;
  clear_has_fetch_war();
}
inline ::google::protobuf::int32 FactionWar_IsFetchRsp::fetch_war() const {
  return fetch_war_;
}
inline void FactionWar_IsFetchRsp::set_fetch_war(::google::protobuf::int32 value) {
  set_has_fetch_war();
  fetch_war_ = value;
}

// -------------------------------------------------------------------

// PullFactionProto

// optional uint32 faction_id = 1;
inline bool PullFactionProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullFactionProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PullFactionProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PullFactionProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 PullFactionProto::faction_id() const {
  return faction_id_;
}
inline void PullFactionProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool PullFactionProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PullFactionProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PullFactionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PullFactionProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PullFactionProto::name() const {
  return *name_;
}
inline void PullFactionProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PullFactionProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PullFactionProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PullFactionProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PullFactionProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PullFactionProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 fight = 3;
inline bool PullFactionProto::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PullFactionProto::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PullFactionProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PullFactionProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 PullFactionProto::fight() const {
  return fight_;
}
inline void PullFactionProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// FactionWarProto

// optional uint32 faction_id = 1;
inline bool FactionWarProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWarProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWarProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWarProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionWarProto::faction_id() const {
  return faction_id_;
}
inline void FactionWarProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionWarProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWarProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWarProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWarProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionWarProto::name() const {
  return *name_;
}
inline void FactionWarProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionWarProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionWarProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionWarProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionWarProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionWarProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 3;
inline bool FactionWarProto::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWarProto::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWarProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWarProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 FactionWarProto::zid() const {
  return zid_;
}
inline void FactionWarProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 fight = 4;
inline bool FactionWarProto::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionWarProto::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionWarProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionWarProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionWarProto::fight() const {
  return fight_;
}
inline void FactionWarProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// repeated uint64 cid_lst = 5;
inline int FactionWarProto::cid_lst_size() const {
  return cid_lst_.size();
}
inline void FactionWarProto::clear_cid_lst() {
  cid_lst_.Clear();
}
inline ::google::protobuf::uint64 FactionWarProto::cid_lst(int index) const {
  return cid_lst_.Get(index);
}
inline void FactionWarProto::set_cid_lst(int index, ::google::protobuf::uint64 value) {
  cid_lst_.Set(index, value);
}
inline void FactionWarProto::add_cid_lst(::google::protobuf::uint64 value) {
  cid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FactionWarProto::cid_lst() const {
  return cid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FactionWarProto::mutable_cid_lst() {
  return &cid_lst_;
}

// -------------------------------------------------------------------

// FactionWarRankProto

// optional uint32 faction_id = 1;
inline bool FactionWarRankProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWarRankProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWarRankProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWarRankProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionWarRankProto::faction_id() const {
  return faction_id_;
}
inline void FactionWarRankProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional int32 rank = 2;
inline bool FactionWarRankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWarRankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWarRankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWarRankProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionWarRankProto::rank() const {
  return rank_;
}
inline void FactionWarRankProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// FactionWar_S2C_PullReq

// optional int32 num = 1;
inline bool FactionWar_S2C_PullReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_S2C_PullReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_S2C_PullReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_S2C_PullReq::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 FactionWar_S2C_PullReq::num() const {
  return num_;
}
inline void FactionWar_S2C_PullReq::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 type = 2;
inline bool FactionWar_S2C_PullReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_S2C_PullReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_S2C_PullReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_S2C_PullReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FactionWar_S2C_PullReq::type() const {
  return type_;
}
inline void FactionWar_S2C_PullReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// FactionWar_C2S_PullRsp

// optional uint32 zid = 1;
inline bool FactionWar_C2S_PullRsp::has_zid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_C2S_PullRsp::set_has_zid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_C2S_PullRsp::clear_has_zid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_C2S_PullRsp::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 FactionWar_C2S_PullRsp::zid() const {
  return zid_;
}
inline void FactionWar_C2S_PullRsp::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// repeated .proto_ff.PullFactionProto info = 2;
inline int FactionWar_C2S_PullRsp::info_size() const {
  return info_.size();
}
inline void FactionWar_C2S_PullRsp::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::PullFactionProto& FactionWar_C2S_PullRsp::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::PullFactionProto* FactionWar_C2S_PullRsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::PullFactionProto* FactionWar_C2S_PullRsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::PullFactionProto >&
FactionWar_C2S_PullRsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::PullFactionProto >*
FactionWar_C2S_PullRsp::mutable_info() {
  return &info_;
}

// optional int32 type = 3;
inline bool FactionWar_C2S_PullRsp::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_C2S_PullRsp::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_C2S_PullRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_C2S_PullRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FactionWar_C2S_PullRsp::type() const {
  return type_;
}
inline void FactionWar_C2S_PullRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// FactionWar_S2L_InfoRsp

// optional uint64 sceneid = 1;
inline bool FactionWar_S2L_InfoRsp::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_S2L_InfoRsp::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_S2L_InfoRsp::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_S2L_InfoRsp::clear_sceneid() {
  sceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_sceneid();
}
inline ::google::protobuf::uint64 FactionWar_S2L_InfoRsp::sceneid() const {
  return sceneid_;
}
inline void FactionWar_S2L_InfoRsp::set_sceneid(::google::protobuf::uint64 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// repeated .proto_ff.FactionWarProto info = 2;
inline int FactionWar_S2L_InfoRsp::info_size() const {
  return info_.size();
}
inline void FactionWar_S2L_InfoRsp::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FactionWarProto& FactionWar_S2L_InfoRsp::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FactionWarProto* FactionWar_S2L_InfoRsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FactionWarProto* FactionWar_S2L_InfoRsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionWarProto >&
FactionWar_S2L_InfoRsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionWarProto >*
FactionWar_S2L_InfoRsp::mutable_info() {
  return &info_;
}

// optional int32 state = 3;
inline bool FactionWar_S2L_InfoRsp::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_S2L_InfoRsp::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_S2L_InfoRsp::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_S2L_InfoRsp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 FactionWar_S2L_InfoRsp::state() const {
  return state_;
}
inline void FactionWar_S2L_InfoRsp::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 race = 4;
inline bool FactionWar_S2L_InfoRsp::has_race() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionWar_S2L_InfoRsp::set_has_race() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionWar_S2L_InfoRsp::clear_has_race() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionWar_S2L_InfoRsp::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 FactionWar_S2L_InfoRsp::race() const {
  return race_;
}
inline void FactionWar_S2L_InfoRsp::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int32 index = 5;
inline bool FactionWar_S2L_InfoRsp::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionWar_S2L_InfoRsp::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionWar_S2L_InfoRsp::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionWar_S2L_InfoRsp::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 FactionWar_S2L_InfoRsp::index() const {
  return index_;
}
inline void FactionWar_S2L_InfoRsp::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 win_id = 6;
inline bool FactionWar_S2L_InfoRsp::has_win_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionWar_S2L_InfoRsp::set_has_win_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionWar_S2L_InfoRsp::clear_has_win_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionWar_S2L_InfoRsp::clear_win_id() {
  win_id_ = 0u;
  clear_has_win_id();
}
inline ::google::protobuf::uint32 FactionWar_S2L_InfoRsp::win_id() const {
  return win_id_;
}
inline void FactionWar_S2L_InfoRsp::set_win_id(::google::protobuf::uint32 value) {
  set_has_win_id();
  win_id_ = value;
}

// optional uint32 win_num = 7;
inline bool FactionWar_S2L_InfoRsp::has_win_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionWar_S2L_InfoRsp::set_has_win_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionWar_S2L_InfoRsp::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionWar_S2L_InfoRsp::clear_win_num() {
  win_num_ = 0u;
  clear_has_win_num();
}
inline ::google::protobuf::uint32 FactionWar_S2L_InfoRsp::win_num() const {
  return win_num_;
}
inline void FactionWar_S2L_InfoRsp::set_win_num(::google::protobuf::uint32 value) {
  set_has_win_num();
  win_num_ = value;
}

// -------------------------------------------------------------------

// FactionWar_S2L_WarResultRsp

// optional int32 index = 1;
inline bool FactionWar_S2L_WarResultRsp::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_S2L_WarResultRsp::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_S2L_WarResultRsp::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_S2L_WarResultRsp::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 FactionWar_S2L_WarResultRsp::index() const {
  return index_;
}
inline void FactionWar_S2L_WarResultRsp::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 race = 2;
inline bool FactionWar_S2L_WarResultRsp::has_race() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_S2L_WarResultRsp::set_has_race() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_S2L_WarResultRsp::clear_has_race() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_S2L_WarResultRsp::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::google::protobuf::int32 FactionWar_S2L_WarResultRsp::race() const {
  return race_;
}
inline void FactionWar_S2L_WarResultRsp::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
}

// optional int32 state = 3;
inline bool FactionWar_S2L_WarResultRsp::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_S2L_WarResultRsp::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_S2L_WarResultRsp::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_S2L_WarResultRsp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 FactionWar_S2L_WarResultRsp::state() const {
  return state_;
}
inline void FactionWar_S2L_WarResultRsp::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 faction_id1 = 4;
inline bool FactionWar_S2L_WarResultRsp::has_faction_id1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionWar_S2L_WarResultRsp::set_has_faction_id1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionWar_S2L_WarResultRsp::clear_has_faction_id1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionWar_S2L_WarResultRsp::clear_faction_id1() {
  faction_id1_ = 0u;
  clear_has_faction_id1();
}
inline ::google::protobuf::uint32 FactionWar_S2L_WarResultRsp::faction_id1() const {
  return faction_id1_;
}
inline void FactionWar_S2L_WarResultRsp::set_faction_id1(::google::protobuf::uint32 value) {
  set_has_faction_id1();
  faction_id1_ = value;
}

// optional uint32 faction_id2 = 5;
inline bool FactionWar_S2L_WarResultRsp::has_faction_id2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionWar_S2L_WarResultRsp::set_has_faction_id2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionWar_S2L_WarResultRsp::clear_has_faction_id2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionWar_S2L_WarResultRsp::clear_faction_id2() {
  faction_id2_ = 0u;
  clear_has_faction_id2();
}
inline ::google::protobuf::uint32 FactionWar_S2L_WarResultRsp::faction_id2() const {
  return faction_id2_;
}
inline void FactionWar_S2L_WarResultRsp::set_faction_id2(::google::protobuf::uint32 value) {
  set_has_faction_id2();
  faction_id2_ = value;
}

// optional uint32 success_id = 6;
inline bool FactionWar_S2L_WarResultRsp::has_success_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionWar_S2L_WarResultRsp::set_has_success_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionWar_S2L_WarResultRsp::clear_has_success_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionWar_S2L_WarResultRsp::clear_success_id() {
  success_id_ = 0u;
  clear_has_success_id();
}
inline ::google::protobuf::uint32 FactionWar_S2L_WarResultRsp::success_id() const {
  return success_id_;
}
inline void FactionWar_S2L_WarResultRsp::set_success_id(::google::protobuf::uint32 value) {
  set_has_success_id();
  success_id_ = value;
}

// repeated uint64 cid_lst1 = 7;
inline int FactionWar_S2L_WarResultRsp::cid_lst1_size() const {
  return cid_lst1_.size();
}
inline void FactionWar_S2L_WarResultRsp::clear_cid_lst1() {
  cid_lst1_.Clear();
}
inline ::google::protobuf::uint64 FactionWar_S2L_WarResultRsp::cid_lst1(int index) const {
  return cid_lst1_.Get(index);
}
inline void FactionWar_S2L_WarResultRsp::set_cid_lst1(int index, ::google::protobuf::uint64 value) {
  cid_lst1_.Set(index, value);
}
inline void FactionWar_S2L_WarResultRsp::add_cid_lst1(::google::protobuf::uint64 value) {
  cid_lst1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FactionWar_S2L_WarResultRsp::cid_lst1() const {
  return cid_lst1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FactionWar_S2L_WarResultRsp::mutable_cid_lst1() {
  return &cid_lst1_;
}

// repeated uint64 cid_lst2 = 8;
inline int FactionWar_S2L_WarResultRsp::cid_lst2_size() const {
  return cid_lst2_.size();
}
inline void FactionWar_S2L_WarResultRsp::clear_cid_lst2() {
  cid_lst2_.Clear();
}
inline ::google::protobuf::uint64 FactionWar_S2L_WarResultRsp::cid_lst2(int index) const {
  return cid_lst2_.Get(index);
}
inline void FactionWar_S2L_WarResultRsp::set_cid_lst2(int index, ::google::protobuf::uint64 value) {
  cid_lst2_.Set(index, value);
}
inline void FactionWar_S2L_WarResultRsp::add_cid_lst2(::google::protobuf::uint64 value) {
  cid_lst2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FactionWar_S2L_WarResultRsp::cid_lst2() const {
  return cid_lst2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FactionWar_S2L_WarResultRsp::mutable_cid_lst2() {
  return &cid_lst2_;
}

// -------------------------------------------------------------------

// FactionWar_S2C_RankRewardRsp

// optional uint32 faction_id = 1;
inline bool FactionWar_S2C_RankRewardRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_S2C_RankRewardRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_S2C_RankRewardRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_S2C_RankRewardRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionWar_S2C_RankRewardRsp::faction_id() const {
  return faction_id_;
}
inline void FactionWar_S2C_RankRewardRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional int32 rank = 2;
inline bool FactionWar_S2C_RankRewardRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_S2C_RankRewardRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_S2C_RankRewardRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_S2C_RankRewardRsp::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionWar_S2C_RankRewardRsp::rank() const {
  return rank_;
}
inline void FactionWar_S2C_RankRewardRsp::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated uint64 cids = 3;
inline int FactionWar_S2C_RankRewardRsp::cids_size() const {
  return cids_.size();
}
inline void FactionWar_S2C_RankRewardRsp::clear_cids() {
  cids_.Clear();
}
inline ::google::protobuf::uint64 FactionWar_S2C_RankRewardRsp::cids(int index) const {
  return cids_.Get(index);
}
inline void FactionWar_S2C_RankRewardRsp::set_cids(int index, ::google::protobuf::uint64 value) {
  cids_.Set(index, value);
}
inline void FactionWar_S2C_RankRewardRsp::add_cids(::google::protobuf::uint64 value) {
  cids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FactionWar_S2C_RankRewardRsp::cids() const {
  return cids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FactionWar_S2C_RankRewardRsp::mutable_cids() {
  return &cids_;
}

// optional int32 type = 4;
inline bool FactionWar_S2C_RankRewardRsp::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionWar_S2C_RankRewardRsp::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionWar_S2C_RankRewardRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionWar_S2C_RankRewardRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FactionWar_S2C_RankRewardRsp::type() const {
  return type_;
}
inline void FactionWar_S2C_RankRewardRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// FactionWar_S2C_EndWinRewardRsp

// optional uint32 faction_id = 1;
inline bool FactionWar_S2C_EndWinRewardRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_S2C_EndWinRewardRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionWar_S2C_EndWinRewardRsp::faction_id() const {
  return faction_id_;
}
inline void FactionWar_S2C_EndWinRewardRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional int32 win_num = 2;
inline bool FactionWar_S2C_EndWinRewardRsp::has_win_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_S2C_EndWinRewardRsp::set_has_win_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 FactionWar_S2C_EndWinRewardRsp::win_num() const {
  return win_num_;
}
inline void FactionWar_S2C_EndWinRewardRsp::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional uint32 win_zid = 3;
inline bool FactionWar_S2C_EndWinRewardRsp::has_win_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_S2C_EndWinRewardRsp::set_has_win_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_has_win_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_win_zid() {
  win_zid_ = 0u;
  clear_has_win_zid();
}
inline ::google::protobuf::uint32 FactionWar_S2C_EndWinRewardRsp::win_zid() const {
  return win_zid_;
}
inline void FactionWar_S2C_EndWinRewardRsp::set_win_zid(::google::protobuf::uint32 value) {
  set_has_win_zid();
  win_zid_ = value;
}

// optional uint32 fa_id = 4;
inline bool FactionWar_S2C_EndWinRewardRsp::has_fa_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionWar_S2C_EndWinRewardRsp::set_has_fa_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_has_fa_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_fa_id() {
  fa_id_ = 0u;
  clear_has_fa_id();
}
inline ::google::protobuf::uint32 FactionWar_S2C_EndWinRewardRsp::fa_id() const {
  return fa_id_;
}
inline void FactionWar_S2C_EndWinRewardRsp::set_fa_id(::google::protobuf::uint32 value) {
  set_has_fa_id();
  fa_id_ = value;
}

// repeated uint64 cids = 5;
inline int FactionWar_S2C_EndWinRewardRsp::cids_size() const {
  return cids_.size();
}
inline void FactionWar_S2C_EndWinRewardRsp::clear_cids() {
  cids_.Clear();
}
inline ::google::protobuf::uint64 FactionWar_S2C_EndWinRewardRsp::cids(int index) const {
  return cids_.Get(index);
}
inline void FactionWar_S2C_EndWinRewardRsp::set_cids(int index, ::google::protobuf::uint64 value) {
  cids_.Set(index, value);
}
inline void FactionWar_S2C_EndWinRewardRsp::add_cids(::google::protobuf::uint64 value) {
  cids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FactionWar_S2C_EndWinRewardRsp::cids() const {
  return cids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FactionWar_S2C_EndWinRewardRsp::mutable_cids() {
  return &cids_;
}

// -------------------------------------------------------------------

// FactionWar_S2C_WinInfoRsp

// optional uint32 faction_id = 1;
inline bool FactionWar_S2C_WinInfoRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_S2C_WinInfoRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_S2C_WinInfoRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_S2C_WinInfoRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionWar_S2C_WinInfoRsp::faction_id() const {
  return faction_id_;
}
inline void FactionWar_S2C_WinInfoRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional int32 win_num = 2;
inline bool FactionWar_S2C_WinInfoRsp::has_win_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_S2C_WinInfoRsp::set_has_win_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_S2C_WinInfoRsp::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_S2C_WinInfoRsp::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 FactionWar_S2C_WinInfoRsp::win_num() const {
  return win_num_;
}
inline void FactionWar_S2C_WinInfoRsp::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional bool reward = 3;
inline bool FactionWar_S2C_WinInfoRsp::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_S2C_WinInfoRsp::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_S2C_WinInfoRsp::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_S2C_WinInfoRsp::clear_reward() {
  reward_ = false;
  clear_has_reward();
}
inline bool FactionWar_S2C_WinInfoRsp::reward() const {
  return reward_;
}
inline void FactionWar_S2C_WinInfoRsp::set_reward(bool value) {
  set_has_reward();
  reward_ = value;
}

// repeated uint64 cids = 4;
inline int FactionWar_S2C_WinInfoRsp::cids_size() const {
  return cids_.size();
}
inline void FactionWar_S2C_WinInfoRsp::clear_cids() {
  cids_.Clear();
}
inline ::google::protobuf::uint64 FactionWar_S2C_WinInfoRsp::cids(int index) const {
  return cids_.Get(index);
}
inline void FactionWar_S2C_WinInfoRsp::set_cids(int index, ::google::protobuf::uint64 value) {
  cids_.Set(index, value);
}
inline void FactionWar_S2C_WinInfoRsp::add_cids(::google::protobuf::uint64 value) {
  cids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FactionWar_S2C_WinInfoRsp::cids() const {
  return cids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FactionWar_S2C_WinInfoRsp::mutable_cids() {
  return &cids_;
}

// -------------------------------------------------------------------

// FactionWar_S2C_DelWinRsp

// -------------------------------------------------------------------

// FactionWar_S2C_LeaderInfoReq

// optional uint32 index = 1;
inline bool FactionWar_S2C_LeaderInfoReq::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_S2C_LeaderInfoReq::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_S2C_LeaderInfoReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_S2C_LeaderInfoReq::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 FactionWar_S2C_LeaderInfoReq::index() const {
  return index_;
}
inline void FactionWar_S2C_LeaderInfoReq::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 faction_id = 2;
inline bool FactionWar_S2C_LeaderInfoReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_S2C_LeaderInfoReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_S2C_LeaderInfoReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_S2C_LeaderInfoReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionWar_S2C_LeaderInfoReq::faction_id() const {
  return faction_id_;
}
inline void FactionWar_S2C_LeaderInfoReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// FactionWar_S2C_LeaderInfoRsp

// optional uint32 index = 1;
inline bool FactionWar_S2C_LeaderInfoRsp::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_S2C_LeaderInfoRsp::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_S2C_LeaderInfoRsp::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_S2C_LeaderInfoRsp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 FactionWar_S2C_LeaderInfoRsp::index() const {
  return index_;
}
inline void FactionWar_S2C_LeaderInfoRsp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .proto_ff.WarLeaderInfo leader = 2;
inline bool FactionWar_S2C_LeaderInfoRsp::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_S2C_LeaderInfoRsp::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_S2C_LeaderInfoRsp::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_S2C_LeaderInfoRsp::clear_leader() {
  if (leader_ != NULL) leader_->::proto_ff::WarLeaderInfo::Clear();
  clear_has_leader();
}
inline const ::proto_ff::WarLeaderInfo& FactionWar_S2C_LeaderInfoRsp::leader() const {
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::proto_ff::WarLeaderInfo* FactionWar_S2C_LeaderInfoRsp::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::proto_ff::WarLeaderInfo;
  return leader_;
}
inline ::proto_ff::WarLeaderInfo* FactionWar_S2C_LeaderInfoRsp::release_leader() {
  clear_has_leader();
  ::proto_ff::WarLeaderInfo* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void FactionWar_S2C_LeaderInfoRsp::set_allocated_leader(::proto_ff::WarLeaderInfo* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
}

// optional .proto_ff.WarLeaderInfo wife = 3;
inline bool FactionWar_S2C_LeaderInfoRsp::has_wife() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionWar_S2C_LeaderInfoRsp::set_has_wife() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionWar_S2C_LeaderInfoRsp::clear_has_wife() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionWar_S2C_LeaderInfoRsp::clear_wife() {
  if (wife_ != NULL) wife_->::proto_ff::WarLeaderInfo::Clear();
  clear_has_wife();
}
inline const ::proto_ff::WarLeaderInfo& FactionWar_S2C_LeaderInfoRsp::wife() const {
  return wife_ != NULL ? *wife_ : *default_instance_->wife_;
}
inline ::proto_ff::WarLeaderInfo* FactionWar_S2C_LeaderInfoRsp::mutable_wife() {
  set_has_wife();
  if (wife_ == NULL) wife_ = new ::proto_ff::WarLeaderInfo;
  return wife_;
}
inline ::proto_ff::WarLeaderInfo* FactionWar_S2C_LeaderInfoRsp::release_wife() {
  clear_has_wife();
  ::proto_ff::WarLeaderInfo* temp = wife_;
  wife_ = NULL;
  return temp;
}
inline void FactionWar_S2C_LeaderInfoRsp::set_allocated_wife(::proto_ff::WarLeaderInfo* wife) {
  delete wife_;
  wife_ = wife;
  if (wife) {
    set_has_wife();
  } else {
    clear_has_wife();
  }
}

// -------------------------------------------------------------------

// FactionWar_C2L_FetchWinRewardReq

// optional uint64 cid = 1;
inline bool FactionWar_C2L_FetchWinRewardReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_C2L_FetchWinRewardReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_C2L_FetchWinRewardReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_C2L_FetchWinRewardReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionWar_C2L_FetchWinRewardReq::cid() const {
  return cid_;
}
inline void FactionWar_C2L_FetchWinRewardReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// FactionWar_C2S_WinDismissRsp

// optional uint32 faction_id = 1;
inline bool FactionWar_C2S_WinDismissRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionWar_C2S_WinDismissRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionWar_C2S_WinDismissRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionWar_C2S_WinDismissRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionWar_C2S_WinDismissRsp::faction_id() const {
  return faction_id_;
}
inline void FactionWar_C2S_WinDismissRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional uint32 zid = 2;
inline bool FactionWar_C2S_WinDismissRsp::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionWar_C2S_WinDismissRsp::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionWar_C2S_WinDismissRsp::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionWar_C2S_WinDismissRsp::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 FactionWar_C2S_WinDismissRsp::zid() const {
  return zid_;
}
inline void FactionWar_C2S_WinDismissRsp::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FactionWar_2eproto__INCLUDED
