// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* RankDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWRankDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWRankDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWUpdateRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWUpdateRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSUpdateRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSUpdateRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGRankDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGRankDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSRankDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSRankDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialRankOptTitleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialRankOptTitleReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rank_2eproto() {
  protobuf_AddDesc_Rank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Rank.proto");
  GOOGLE_CHECK(file != NULL);
  RankDataRequest_descriptor_ = file->message_type(0);
  static const int RankDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataRequest, ranktype_),
  };
  RankDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankDataRequest_descriptor_,
      RankDataRequest::default_instance_,
      RankDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankDataRequest));
  RankDataResponse_descriptor_ = file->message_type(1);
  static const int RankDataResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataResponse, info_),
  };
  RankDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankDataResponse_descriptor_,
      RankDataResponse::default_instance_,
      RankDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankDataResponse));
  GWRankDataReq_descriptor_ = file->message_type(2);
  static const int GWRankDataReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWRankDataReq, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWRankDataReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWRankDataReq, value_),
  };
  GWRankDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWRankDataReq_descriptor_,
      GWRankDataReq::default_instance_,
      GWRankDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWRankDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWRankDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWRankDataReq));
  GWUpdateRankReq_descriptor_ = file->message_type(3);
  static const int GWUpdateRankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateRankReq, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateRankReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateRankReq, value_),
  };
  GWUpdateRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWUpdateRankReq_descriptor_,
      GWUpdateRankReq::default_instance_,
      GWUpdateRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWUpdateRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWUpdateRankReq));
  GSUpdateRankReq_descriptor_ = file->message_type(4);
  static const int GSUpdateRankReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSUpdateRankReq, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSUpdateRankReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSUpdateRankReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSUpdateRankReq, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSUpdateRankReq, paramint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSUpdateRankReq, paramstr_),
  };
  GSUpdateRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSUpdateRankReq_descriptor_,
      GSUpdateRankReq::default_instance_,
      GSUpdateRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSUpdateRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSUpdateRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSUpdateRankReq));
  WGRankDataRequest_descriptor_ = file->message_type(5);
  static const int WGRankDataRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRankDataRequest, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRankDataRequest, charid_),
  };
  WGRankDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGRankDataRequest_descriptor_,
      WGRankDataRequest::default_instance_,
      WGRankDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRankDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGRankDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGRankDataRequest));
  GSRankDataRequest_descriptor_ = file->message_type(6);
  static const int GSRankDataRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSRankDataRequest, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSRankDataRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSRankDataRequest, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSRankDataRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSRankDataRequest, paramint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSRankDataRequest, paramstr_),
  };
  GSRankDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSRankDataRequest_descriptor_,
      GSRankDataRequest::default_instance_,
      GSRankDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSRankDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSRankDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSRankDataRequest));
  SocialRankOptTitleReq_descriptor_ = file->message_type(7);
  static const int SocialRankOptTitleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRankOptTitleReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRankOptTitleReq, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRankOptTitleReq, opt_),
  };
  SocialRankOptTitleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialRankOptTitleReq_descriptor_,
      SocialRankOptTitleReq::default_instance_,
      SocialRankOptTitleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRankOptTitleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRankOptTitleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialRankOptTitleReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankDataRequest_descriptor_, &RankDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankDataResponse_descriptor_, &RankDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWRankDataReq_descriptor_, &GWRankDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWUpdateRankReq_descriptor_, &GWUpdateRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSUpdateRankReq_descriptor_, &GSUpdateRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGRankDataRequest_descriptor_, &WGRankDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSRankDataRequest_descriptor_, &GSRankDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialRankOptTitleReq_descriptor_, &SocialRankOptTitleReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Rank_2eproto() {
  delete RankDataRequest::default_instance_;
  delete RankDataRequest_reflection_;
  delete RankDataResponse::default_instance_;
  delete RankDataResponse_reflection_;
  delete GWRankDataReq::default_instance_;
  delete GWRankDataReq_reflection_;
  delete GWUpdateRankReq::default_instance_;
  delete GWUpdateRankReq_reflection_;
  delete GSUpdateRankReq::default_instance_;
  delete GSUpdateRankReq_reflection_;
  delete WGRankDataRequest::default_instance_;
  delete WGRankDataRequest_reflection_;
  delete GSRankDataRequest::default_instance_;
  delete GSRankDataRequest_reflection_;
  delete SocialRankOptTitleReq::default_instance_;
  delete SocialRankOptTitleReq_reflection_;
}

void protobuf_AddDesc_Rank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nRank.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"#\n\017RankDataRequest\022\020\n\010rankTyp"
    "e\030\001 \002(\r\"8\n\020RankDataResponse\022$\n\004info\030\001 \001("
    "\0132\026.proto_ff.RankDataInfo\"@\n\rGWRankDataR"
    "eq\022\020\n\010rankType\030\001 \002(\r\022\016\n\006charId\030\002 \002(\004\022\r\n\005"
    "value\030\003 \002(\004\"B\n\017GWUpdateRankReq\022\020\n\010rankTy"
    "pe\030\001 \002(\r\022\016\n\006charId\030\002 \002(\004\022\r\n\005value\030\003 \002(\004\""
    "s\n\017GSUpdateRankReq\022\020\n\010rankType\030\001 \001(\r\022\016\n\006"
    "charId\030\002 \001(\004\022\013\n\003zid\030\003 \001(\005\022\r\n\005value\030\004 \001(\003"
    "\022\020\n\010paramInt\030\005 \003(\003\022\020\n\010paramStr\030\006 \003(\t\"5\n\021"
    "WGRankDataRequest\022\020\n\010rankType\030\001 \002(\r\022\016\n\006c"
    "harId\030\002 \001(\003\"z\n\021GSRankDataRequest\022\020\n\010rank"
    "Type\030\001 \002(\r\022\016\n\006charId\030\002 \001(\003\022\020\n\010charname\030\003"
    " \001(\t\022\r\n\005value\030\004 \001(\003\022\020\n\010paramInt\030\005 \003(\003\022\020\n"
    "\010paramStr\030\006 \003(\t\"C\n\025SocialRankOptTitleReq"
    "\022\016\n\006charId\030\001 \001(\003\022\r\n\005title\030\002 \001(\003\022\013\n\003opt\030\003"
    " \001(\005", 644);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Rank.proto", &protobuf_RegisterTypes);
  RankDataRequest::default_instance_ = new RankDataRequest();
  RankDataResponse::default_instance_ = new RankDataResponse();
  GWRankDataReq::default_instance_ = new GWRankDataReq();
  GWUpdateRankReq::default_instance_ = new GWUpdateRankReq();
  GSUpdateRankReq::default_instance_ = new GSUpdateRankReq();
  WGRankDataRequest::default_instance_ = new WGRankDataRequest();
  GSRankDataRequest::default_instance_ = new GSRankDataRequest();
  SocialRankOptTitleReq::default_instance_ = new SocialRankOptTitleReq();
  RankDataRequest::default_instance_->InitAsDefaultInstance();
  RankDataResponse::default_instance_->InitAsDefaultInstance();
  GWRankDataReq::default_instance_->InitAsDefaultInstance();
  GWUpdateRankReq::default_instance_->InitAsDefaultInstance();
  GSUpdateRankReq::default_instance_->InitAsDefaultInstance();
  WGRankDataRequest::default_instance_->InitAsDefaultInstance();
  GSRankDataRequest::default_instance_->InitAsDefaultInstance();
  SocialRankOptTitleReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Rank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Rank_2eproto {
  StaticDescriptorInitializer_Rank_2eproto() {
    protobuf_AddDesc_Rank_2eproto();
  }
} static_descriptor_initializer_Rank_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RankDataRequest::kRankTypeFieldNumber;
#endif  // !_MSC_VER

RankDataRequest::RankDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankDataRequest::InitAsDefaultInstance() {
}

RankDataRequest::RankDataRequest(const RankDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankDataRequest::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankDataRequest::~RankDataRequest() {
  SharedDtor();
}

void RankDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankDataRequest_descriptor_;
}

const RankDataRequest& RankDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

RankDataRequest* RankDataRequest::default_instance_ = NULL;

RankDataRequest* RankDataRequest::New() const {
  return new RankDataRequest;
}

void RankDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankDataRequest::MergeFrom(const RankDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankDataRequest::CopyFrom(const RankDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RankDataRequest::Swap(RankDataRequest* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankDataRequest_descriptor_;
  metadata.reflection = RankDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankDataResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

RankDataResponse::RankDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankDataResponse::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RankDataInfo*>(&::proto_ff::RankDataInfo::default_instance());
}

RankDataResponse::RankDataResponse(const RankDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankDataResponse::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankDataResponse::~RankDataResponse() {
  SharedDtor();
}

void RankDataResponse::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RankDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankDataResponse_descriptor_;
}

const RankDataResponse& RankDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

RankDataResponse* RankDataResponse::default_instance_ = NULL;

RankDataResponse* RankDataResponse::New() const {
  return new RankDataResponse;
}

void RankDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RankDataInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RankDataInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RankDataInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RankDataInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RankDataInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankDataResponse::MergeFrom(const RankDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::RankDataInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankDataResponse::CopyFrom(const RankDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankDataResponse::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RankDataResponse::Swap(RankDataResponse* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankDataResponse_descriptor_;
  metadata.reflection = RankDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWRankDataReq::kRankTypeFieldNumber;
const int GWRankDataReq::kCharIdFieldNumber;
const int GWRankDataReq::kValueFieldNumber;
#endif  // !_MSC_VER

GWRankDataReq::GWRankDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWRankDataReq::InitAsDefaultInstance() {
}

GWRankDataReq::GWRankDataReq(const GWRankDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWRankDataReq::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWRankDataReq::~GWRankDataReq() {
  SharedDtor();
}

void GWRankDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWRankDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWRankDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWRankDataReq_descriptor_;
}

const GWRankDataReq& GWRankDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GWRankDataReq* GWRankDataReq::default_instance_ = NULL;

GWRankDataReq* GWRankDataReq::New() const {
  return new GWRankDataReq;
}

void GWRankDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    charid_ = GOOGLE_ULONGLONG(0);
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWRankDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint64 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWRankDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint64 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWRankDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranktype(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint64 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWRankDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWRankDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWRankDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWRankDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWRankDataReq::MergeFrom(const GWRankDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWRankDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWRankDataReq::CopyFrom(const GWRankDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWRankDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GWRankDataReq::Swap(GWRankDataReq* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(charid_, other->charid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWRankDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWRankDataReq_descriptor_;
  metadata.reflection = GWRankDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWUpdateRankReq::kRankTypeFieldNumber;
const int GWUpdateRankReq::kCharIdFieldNumber;
const int GWUpdateRankReq::kValueFieldNumber;
#endif  // !_MSC_VER

GWUpdateRankReq::GWUpdateRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWUpdateRankReq::InitAsDefaultInstance() {
}

GWUpdateRankReq::GWUpdateRankReq(const GWUpdateRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWUpdateRankReq::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWUpdateRankReq::~GWUpdateRankReq() {
  SharedDtor();
}

void GWUpdateRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWUpdateRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWUpdateRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWUpdateRankReq_descriptor_;
}

const GWUpdateRankReq& GWUpdateRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GWUpdateRankReq* GWUpdateRankReq::default_instance_ = NULL;

GWUpdateRankReq* GWUpdateRankReq::New() const {
  return new GWUpdateRankReq;
}

void GWUpdateRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    charid_ = GOOGLE_ULONGLONG(0);
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWUpdateRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // required uint64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint64 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWUpdateRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required uint64 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWUpdateRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranktype(), target);
  }

  // required uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required uint64 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWUpdateRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // required uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint64 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWUpdateRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWUpdateRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWUpdateRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWUpdateRankReq::MergeFrom(const GWUpdateRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWUpdateRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWUpdateRankReq::CopyFrom(const GWUpdateRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWUpdateRankReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GWUpdateRankReq::Swap(GWUpdateRankReq* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(charid_, other->charid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWUpdateRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWUpdateRankReq_descriptor_;
  metadata.reflection = GWUpdateRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSUpdateRankReq::kRankTypeFieldNumber;
const int GSUpdateRankReq::kCharIdFieldNumber;
const int GSUpdateRankReq::kZidFieldNumber;
const int GSUpdateRankReq::kValueFieldNumber;
const int GSUpdateRankReq::kParamIntFieldNumber;
const int GSUpdateRankReq::kParamStrFieldNumber;
#endif  // !_MSC_VER

GSUpdateRankReq::GSUpdateRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSUpdateRankReq::InitAsDefaultInstance() {
}

GSUpdateRankReq::GSUpdateRankReq(const GSUpdateRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSUpdateRankReq::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSUpdateRankReq::~GSUpdateRankReq() {
  SharedDtor();
}

void GSUpdateRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GSUpdateRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSUpdateRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSUpdateRankReq_descriptor_;
}

const GSUpdateRankReq& GSUpdateRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GSUpdateRankReq* GSUpdateRankReq::default_instance_ = NULL;

GSUpdateRankReq* GSUpdateRankReq::New() const {
  return new GSUpdateRankReq;
}

void GSUpdateRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    charid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  paramint_.Clear();
  paramstr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSUpdateRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional int32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int64 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_paramInt;
        break;
      }

      // repeated int64 paramInt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paramInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_paramint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_paramint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_paramInt;
        if (input->ExpectTag(50)) goto parse_paramStr;
        break;
      }

      // repeated string paramStr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paramstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstr(this->paramstr_size() - 1).data(),
            this->paramstr(this->paramstr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_paramStr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSUpdateRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // optional uint64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zid(), output);
  }

  // optional int64 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->value(), output);
  }

  // repeated int64 paramInt = 5;
  for (int i = 0; i < this->paramint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->paramint(i), output);
  }

  // repeated string paramStr = 6;
  for (int i = 0; i < this->paramstr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->paramstr(i).data(), this->paramstr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->paramstr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSUpdateRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rankType = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranktype(), target);
  }

  // optional uint64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zid(), target);
  }

  // optional int64 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->value(), target);
  }

  // repeated int64 paramInt = 5;
  for (int i = 0; i < this->paramint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->paramint(i), target);
  }

  // repeated string paramStr = 6;
  for (int i = 0; i < this->paramstr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstr(i).data(), this->paramstr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->paramstr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSUpdateRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // optional uint64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional int64 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  // repeated int64 paramInt = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->paramint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->paramint(i));
    }
    total_size += 1 * this->paramint_size() + data_size;
  }

  // repeated string paramStr = 6;
  total_size += 1 * this->paramstr_size();
  for (int i = 0; i < this->paramstr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paramstr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSUpdateRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSUpdateRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSUpdateRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSUpdateRankReq::MergeFrom(const GSUpdateRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramint_.MergeFrom(from.paramint_);
  paramstr_.MergeFrom(from.paramstr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSUpdateRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSUpdateRankReq::CopyFrom(const GSUpdateRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSUpdateRankReq::IsInitialized() const {

  return true;
}

void GSUpdateRankReq::Swap(GSUpdateRankReq* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(charid_, other->charid_);
    std::swap(zid_, other->zid_);
    std::swap(value_, other->value_);
    paramint_.Swap(&other->paramint_);
    paramstr_.Swap(&other->paramstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSUpdateRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSUpdateRankReq_descriptor_;
  metadata.reflection = GSUpdateRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGRankDataRequest::kRankTypeFieldNumber;
const int WGRankDataRequest::kCharIdFieldNumber;
#endif  // !_MSC_VER

WGRankDataRequest::WGRankDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGRankDataRequest::InitAsDefaultInstance() {
}

WGRankDataRequest::WGRankDataRequest(const WGRankDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGRankDataRequest::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGRankDataRequest::~WGRankDataRequest() {
  SharedDtor();
}

void WGRankDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGRankDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGRankDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGRankDataRequest_descriptor_;
}

const WGRankDataRequest& WGRankDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

WGRankDataRequest* WGRankDataRequest::default_instance_ = NULL;

WGRankDataRequest* WGRankDataRequest::New() const {
  return new WGRankDataRequest;
}

void WGRankDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGRankDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional int64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGRankDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // optional int64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGRankDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranktype(), target);
  }

  // optional int64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGRankDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // optional int64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGRankDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGRankDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGRankDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGRankDataRequest::MergeFrom(const WGRankDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGRankDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGRankDataRequest::CopyFrom(const WGRankDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGRankDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WGRankDataRequest::Swap(WGRankDataRequest* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGRankDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGRankDataRequest_descriptor_;
  metadata.reflection = WGRankDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSRankDataRequest::kRankTypeFieldNumber;
const int GSRankDataRequest::kCharIdFieldNumber;
const int GSRankDataRequest::kCharnameFieldNumber;
const int GSRankDataRequest::kValueFieldNumber;
const int GSRankDataRequest::kParamIntFieldNumber;
const int GSRankDataRequest::kParamStrFieldNumber;
#endif  // !_MSC_VER

GSRankDataRequest::GSRankDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSRankDataRequest::InitAsDefaultInstance() {
}

GSRankDataRequest::GSRankDataRequest(const GSRankDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSRankDataRequest::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSRankDataRequest::~GSRankDataRequest() {
  SharedDtor();
}

void GSRankDataRequest::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void GSRankDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSRankDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSRankDataRequest_descriptor_;
}

const GSRankDataRequest& GSRankDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

GSRankDataRequest* GSRankDataRequest::default_instance_ = NULL;

GSRankDataRequest* GSRankDataRequest::New() const {
  return new GSRankDataRequest;
}

void GSRankDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    value_ = GOOGLE_LONGLONG(0);
  }
  paramint_.Clear();
  paramstr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSRankDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional int64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int64 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_paramInt;
        break;
      }

      // repeated int64 paramInt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paramInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_paramint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_paramint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_paramInt;
        if (input->ExpectTag(50)) goto parse_paramStr;
        break;
      }

      // repeated string paramStr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paramstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstr(this->paramstr_size() - 1).data(),
            this->paramstr(this->paramstr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_paramStr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSRankDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // optional int64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  // optional int64 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->value(), output);
  }

  // repeated int64 paramInt = 5;
  for (int i = 0; i < this->paramint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->paramint(i), output);
  }

  // repeated string paramStr = 6;
  for (int i = 0; i < this->paramstr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->paramstr(i).data(), this->paramstr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->paramstr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSRankDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankType = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ranktype(), target);
  }

  // optional int64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional int64 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->value(), target);
  }

  // repeated int64 paramInt = 5;
  for (int i = 0; i < this->paramint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->paramint(i), target);
  }

  // repeated string paramStr = 6;
  for (int i = 0; i < this->paramstr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstr(i).data(), this->paramstr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->paramstr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSRankDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // optional int64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int64 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  // repeated int64 paramInt = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->paramint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->paramint(i));
    }
    total_size += 1 * this->paramint_size() + data_size;
  }

  // repeated string paramStr = 6;
  total_size += 1 * this->paramstr_size();
  for (int i = 0; i < this->paramstr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paramstr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSRankDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSRankDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSRankDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSRankDataRequest::MergeFrom(const GSRankDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramint_.MergeFrom(from.paramint_);
  paramstr_.MergeFrom(from.paramstr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSRankDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSRankDataRequest::CopyFrom(const GSRankDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSRankDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GSRankDataRequest::Swap(GSRankDataRequest* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(value_, other->value_);
    paramint_.Swap(&other->paramint_);
    paramstr_.Swap(&other->paramstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSRankDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSRankDataRequest_descriptor_;
  metadata.reflection = GSRankDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialRankOptTitleReq::kCharIdFieldNumber;
const int SocialRankOptTitleReq::kTitleFieldNumber;
const int SocialRankOptTitleReq::kOptFieldNumber;
#endif  // !_MSC_VER

SocialRankOptTitleReq::SocialRankOptTitleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocialRankOptTitleReq::InitAsDefaultInstance() {
}

SocialRankOptTitleReq::SocialRankOptTitleReq(const SocialRankOptTitleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocialRankOptTitleReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  title_ = GOOGLE_LONGLONG(0);
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialRankOptTitleReq::~SocialRankOptTitleReq() {
  SharedDtor();
}

void SocialRankOptTitleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialRankOptTitleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialRankOptTitleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialRankOptTitleReq_descriptor_;
}

const SocialRankOptTitleReq& SocialRankOptTitleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rank_2eproto();
  return *default_instance_;
}

SocialRankOptTitleReq* SocialRankOptTitleReq::default_instance_ = NULL;

SocialRankOptTitleReq* SocialRankOptTitleReq::New() const {
  return new SocialRankOptTitleReq;
}

void SocialRankOptTitleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    title_ = GOOGLE_LONGLONG(0);
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialRankOptTitleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }

      // optional int64 title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional int32 opt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocialRankOptTitleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int64 title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->title(), output);
  }

  // optional int32 opt = 3;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocialRankOptTitleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int64 title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->title(), target);
  }

  // optional int32 opt = 3;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocialRankOptTitleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int64 title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->title());
    }

    // optional int32 opt = 3;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialRankOptTitleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialRankOptTitleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialRankOptTitleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialRankOptTitleReq::MergeFrom(const SocialRankOptTitleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialRankOptTitleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialRankOptTitleReq::CopyFrom(const SocialRankOptTitleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialRankOptTitleReq::IsInitialized() const {

  return true;
}

void SocialRankOptTitleReq::Swap(SocialRankOptTitleReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(title_, other->title_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialRankOptTitleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialRankOptTitleReq_descriptor_;
  metadata.reflection = SocialRankOptTitleReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
