// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CPet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CPet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyPetModuleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPetModuleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPetRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPetRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPetFetterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPetFetterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPetHatchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPetHatchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPetGetedListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPetGetedListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetLvUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetLvUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetLvUpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetLvUpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetStepLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetStepLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetStepLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetStepLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetStarLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetStarLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetStarLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetStarLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetAddHatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetAddHatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetAddHatchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetAddHatchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetHatchUnlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetHatchUnlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetHatchUnlockRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetHatchUnlockRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetHatchEggReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetHatchEggReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetHatchEggRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetHatchEggRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetActiveFetterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetActiveFetterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetActiveFetterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetActiveFetterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkillLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkillLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkillLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkillLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetRestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetRestReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetRestRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetRestRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetDecomposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetDecomposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetDecomposeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetDecomposeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetQuickHatchEggReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetQuickHatchEggReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetQuickHatchEggRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetQuickHatchEggRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetRestReViewReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetRestReViewReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetRestReViewRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetRestReViewRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CPet_2eproto() {
  protobuf_AddDesc_CPet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CPet.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyPetModuleRsp_descriptor_ = file->message_type(0);
  static const int NotifyPetModuleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetModuleRsp, fetter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetModuleRsp, pets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetModuleRsp, hatchs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetModuleRsp, cfgids_),
  };
  NotifyPetModuleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPetModuleRsp_descriptor_,
      NotifyPetModuleRsp::default_instance_,
      NotifyPetModuleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetModuleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetModuleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPetModuleRsp));
  NotifyPetRsp_descriptor_ = file->message_type(1);
  static const int NotifyPetRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetRsp, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetRsp, pets_),
  };
  NotifyPetRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPetRsp_descriptor_,
      NotifyPetRsp::default_instance_,
      NotifyPetRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPetRsp));
  NotifyPetFetterRsp_descriptor_ = file->message_type(2);
  static const int NotifyPetFetterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetFetterRsp, fetter_),
  };
  NotifyPetFetterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPetFetterRsp_descriptor_,
      NotifyPetFetterRsp::default_instance_,
      NotifyPetFetterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetFetterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetFetterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPetFetterRsp));
  NotifyPetHatchRsp_descriptor_ = file->message_type(3);
  static const int NotifyPetHatchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetHatchRsp, hatchs_),
  };
  NotifyPetHatchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPetHatchRsp_descriptor_,
      NotifyPetHatchRsp::default_instance_,
      NotifyPetHatchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetHatchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetHatchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPetHatchRsp));
  NotifyPetGetedListRsp_descriptor_ = file->message_type(4);
  static const int NotifyPetGetedListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetGetedListRsp, cfgids_),
  };
  NotifyPetGetedListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPetGetedListRsp_descriptor_,
      NotifyPetGetedListRsp::default_instance_,
      NotifyPetGetedListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetGetedListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPetGetedListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPetGetedListRsp));
  PetLvUpReq_descriptor_ = file->message_type(5);
  static const int PetLvUpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLvUpReq, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLvUpReq, itemid_),
  };
  PetLvUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetLvUpReq_descriptor_,
      PetLvUpReq::default_instance_,
      PetLvUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLvUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLvUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetLvUpReq));
  PetLvUpRsp_descriptor_ = file->message_type(6);
  static const int PetLvUpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLvUpRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLvUpRsp, instid_),
  };
  PetLvUpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetLvUpRsp_descriptor_,
      PetLvUpRsp::default_instance_,
      PetLvUpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLvUpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetLvUpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetLvUpRsp));
  PetStepLvReq_descriptor_ = file->message_type(7);
  static const int PetStepLvReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStepLvReq, instid_),
  };
  PetStepLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetStepLvReq_descriptor_,
      PetStepLvReq::default_instance_,
      PetStepLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStepLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStepLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetStepLvReq));
  PetStepLvRsp_descriptor_ = file->message_type(8);
  static const int PetStepLvRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStepLvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStepLvRsp, instid_),
  };
  PetStepLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetStepLvRsp_descriptor_,
      PetStepLvRsp::default_instance_,
      PetStepLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStepLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStepLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetStepLvRsp));
  PetStarLvReq_descriptor_ = file->message_type(9);
  static const int PetStarLvReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvReq, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvReq, costpetids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvReq, iscostitem_),
  };
  PetStarLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetStarLvReq_descriptor_,
      PetStarLvReq::default_instance_,
      PetStarLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetStarLvReq));
  PetStarLvRsp_descriptor_ = file->message_type(10);
  static const int PetStarLvRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvRsp, instid_),
  };
  PetStarLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetStarLvRsp_descriptor_,
      PetStarLvRsp::default_instance_,
      PetStarLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetStarLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetStarLvRsp));
  PetFormationReq_descriptor_ = file->message_type(11);
  static const int PetFormationReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationReq, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationReq, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationReq, slot_),
  };
  PetFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetFormationReq_descriptor_,
      PetFormationReq::default_instance_,
      PetFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetFormationReq));
  PetFormationRsp_descriptor_ = file->message_type(12);
  static const int PetFormationRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationRsp, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationRsp, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationRsp, slot_),
  };
  PetFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetFormationRsp_descriptor_,
      PetFormationRsp::default_instance_,
      PetFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetFormationRsp));
  PetAddHatchReq_descriptor_ = file->message_type(13);
  static const int PetAddHatchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAddHatchReq, pair_),
  };
  PetAddHatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetAddHatchReq_descriptor_,
      PetAddHatchReq::default_instance_,
      PetAddHatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAddHatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAddHatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetAddHatchReq));
  PetAddHatchRsp_descriptor_ = file->message_type(14);
  static const int PetAddHatchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAddHatchRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAddHatchRsp, pair_),
  };
  PetAddHatchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetAddHatchRsp_descriptor_,
      PetAddHatchRsp::default_instance_,
      PetAddHatchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAddHatchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAddHatchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetAddHatchRsp));
  PetHatchUnlockReq_descriptor_ = file->message_type(15);
  static const int PetHatchUnlockReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchUnlockReq, slot_),
  };
  PetHatchUnlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetHatchUnlockReq_descriptor_,
      PetHatchUnlockReq::default_instance_,
      PetHatchUnlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchUnlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchUnlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetHatchUnlockReq));
  PetHatchUnlockRsp_descriptor_ = file->message_type(16);
  static const int PetHatchUnlockRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchUnlockRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchUnlockRsp, slot_),
  };
  PetHatchUnlockRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetHatchUnlockRsp_descriptor_,
      PetHatchUnlockRsp::default_instance_,
      PetHatchUnlockRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchUnlockRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchUnlockRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetHatchUnlockRsp));
  PetHatchEggReq_descriptor_ = file->message_type(17);
  static const int PetHatchEggReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggReq, slots_),
  };
  PetHatchEggReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetHatchEggReq_descriptor_,
      PetHatchEggReq::default_instance_,
      PetHatchEggReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetHatchEggReq));
  PetHatchEggRsp_descriptor_ = file->message_type(18);
  static const int PetHatchEggRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggRsp, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggRsp, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggRsp, petinstids_),
  };
  PetHatchEggRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetHatchEggRsp_descriptor_,
      PetHatchEggRsp::default_instance_,
      PetHatchEggRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchEggRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetHatchEggRsp));
  PetActiveFetterReq_descriptor_ = file->message_type(19);
  static const int PetActiveFetterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetActiveFetterReq, id_),
  };
  PetActiveFetterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetActiveFetterReq_descriptor_,
      PetActiveFetterReq::default_instance_,
      PetActiveFetterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetActiveFetterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetActiveFetterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetActiveFetterReq));
  PetActiveFetterRsp_descriptor_ = file->message_type(20);
  static const int PetActiveFetterRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetActiveFetterRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetActiveFetterRsp, id_),
  };
  PetActiveFetterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetActiveFetterRsp_descriptor_,
      PetActiveFetterRsp::default_instance_,
      PetActiveFetterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetActiveFetterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetActiveFetterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetActiveFetterRsp));
  PetSkillLvReq_descriptor_ = file->message_type(21);
  static const int PetSkillLvReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvReq, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvReq, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvReq, skill_id_),
  };
  PetSkillLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkillLvReq_descriptor_,
      PetSkillLvReq::default_instance_,
      PetSkillLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkillLvReq));
  PetSkillLvRsp_descriptor_ = file->message_type(22);
  static const int PetSkillLvRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvRsp, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvRsp, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvRsp, skill_id_),
  };
  PetSkillLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkillLvRsp_descriptor_,
      PetSkillLvRsp::default_instance_,
      PetSkillLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkillLvRsp));
  PetRestReq_descriptor_ = file->message_type(23);
  static const int PetRestReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReq, instid_),
  };
  PetRestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetRestReq_descriptor_,
      PetRestReq::default_instance_,
      PetRestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetRestReq));
  PetRestRsp_descriptor_ = file->message_type(24);
  static const int PetRestRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestRsp, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestRsp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestRsp, pets_),
  };
  PetRestRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetRestRsp_descriptor_,
      PetRestRsp::default_instance_,
      PetRestRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetRestRsp));
  PetDecomposeReq_descriptor_ = file->message_type(25);
  static const int PetDecomposeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDecomposeReq, instids_),
  };
  PetDecomposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetDecomposeReq_descriptor_,
      PetDecomposeReq::default_instance_,
      PetDecomposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDecomposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDecomposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetDecomposeReq));
  PetDecomposeRsp_descriptor_ = file->message_type(26);
  static const int PetDecomposeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDecomposeRsp, ret_),
  };
  PetDecomposeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetDecomposeRsp_descriptor_,
      PetDecomposeRsp::default_instance_,
      PetDecomposeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDecomposeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDecomposeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetDecomposeRsp));
  PetQuickHatchEggReq_descriptor_ = file->message_type(27);
  static const int PetQuickHatchEggReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetQuickHatchEggReq, slot_),
  };
  PetQuickHatchEggReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetQuickHatchEggReq_descriptor_,
      PetQuickHatchEggReq::default_instance_,
      PetQuickHatchEggReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetQuickHatchEggReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetQuickHatchEggReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetQuickHatchEggReq));
  PetQuickHatchEggRsp_descriptor_ = file->message_type(28);
  static const int PetQuickHatchEggRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetQuickHatchEggRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetQuickHatchEggRsp, slot_),
  };
  PetQuickHatchEggRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetQuickHatchEggRsp_descriptor_,
      PetQuickHatchEggRsp::default_instance_,
      PetQuickHatchEggRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetQuickHatchEggRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetQuickHatchEggRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetQuickHatchEggRsp));
  PetRestReViewReq_descriptor_ = file->message_type(29);
  static const int PetRestReViewReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewReq, instid_),
  };
  PetRestReViewReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetRestReViewReq_descriptor_,
      PetRestReViewReq::default_instance_,
      PetRestReViewReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetRestReViewReq));
  PetRestReViewRsp_descriptor_ = file->message_type(30);
  static const int PetRestReViewRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewRsp, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewRsp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewRsp, pets_),
  };
  PetRestReViewRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetRestReViewRsp_descriptor_,
      PetRestReViewRsp::default_instance_,
      PetRestReViewRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRestReViewRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetRestReViewRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CPet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPetModuleRsp_descriptor_, &NotifyPetModuleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPetRsp_descriptor_, &NotifyPetRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPetFetterRsp_descriptor_, &NotifyPetFetterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPetHatchRsp_descriptor_, &NotifyPetHatchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPetGetedListRsp_descriptor_, &NotifyPetGetedListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetLvUpReq_descriptor_, &PetLvUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetLvUpRsp_descriptor_, &PetLvUpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetStepLvReq_descriptor_, &PetStepLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetStepLvRsp_descriptor_, &PetStepLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetStarLvReq_descriptor_, &PetStarLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetStarLvRsp_descriptor_, &PetStarLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetFormationReq_descriptor_, &PetFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetFormationRsp_descriptor_, &PetFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetAddHatchReq_descriptor_, &PetAddHatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetAddHatchRsp_descriptor_, &PetAddHatchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetHatchUnlockReq_descriptor_, &PetHatchUnlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetHatchUnlockRsp_descriptor_, &PetHatchUnlockRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetHatchEggReq_descriptor_, &PetHatchEggReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetHatchEggRsp_descriptor_, &PetHatchEggRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetActiveFetterReq_descriptor_, &PetActiveFetterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetActiveFetterRsp_descriptor_, &PetActiveFetterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkillLvReq_descriptor_, &PetSkillLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkillLvRsp_descriptor_, &PetSkillLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetRestReq_descriptor_, &PetRestReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetRestRsp_descriptor_, &PetRestRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetDecomposeReq_descriptor_, &PetDecomposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetDecomposeRsp_descriptor_, &PetDecomposeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetQuickHatchEggReq_descriptor_, &PetQuickHatchEggReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetQuickHatchEggRsp_descriptor_, &PetQuickHatchEggRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetRestReViewReq_descriptor_, &PetRestReViewReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetRestReViewRsp_descriptor_, &PetRestReViewRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CPet_2eproto() {
  delete NotifyPetModuleRsp::default_instance_;
  delete NotifyPetModuleRsp_reflection_;
  delete NotifyPetRsp::default_instance_;
  delete NotifyPetRsp_reflection_;
  delete NotifyPetFetterRsp::default_instance_;
  delete NotifyPetFetterRsp_reflection_;
  delete NotifyPetHatchRsp::default_instance_;
  delete NotifyPetHatchRsp_reflection_;
  delete NotifyPetGetedListRsp::default_instance_;
  delete NotifyPetGetedListRsp_reflection_;
  delete PetLvUpReq::default_instance_;
  delete PetLvUpReq_reflection_;
  delete PetLvUpRsp::default_instance_;
  delete PetLvUpRsp_reflection_;
  delete PetStepLvReq::default_instance_;
  delete PetStepLvReq_reflection_;
  delete PetStepLvRsp::default_instance_;
  delete PetStepLvRsp_reflection_;
  delete PetStarLvReq::default_instance_;
  delete PetStarLvReq_reflection_;
  delete PetStarLvRsp::default_instance_;
  delete PetStarLvRsp_reflection_;
  delete PetFormationReq::default_instance_;
  delete PetFormationReq_reflection_;
  delete PetFormationRsp::default_instance_;
  delete PetFormationRsp_reflection_;
  delete PetAddHatchReq::default_instance_;
  delete PetAddHatchReq_reflection_;
  delete PetAddHatchRsp::default_instance_;
  delete PetAddHatchRsp_reflection_;
  delete PetHatchUnlockReq::default_instance_;
  delete PetHatchUnlockReq_reflection_;
  delete PetHatchUnlockRsp::default_instance_;
  delete PetHatchUnlockRsp_reflection_;
  delete PetHatchEggReq::default_instance_;
  delete PetHatchEggReq_reflection_;
  delete PetHatchEggRsp::default_instance_;
  delete PetHatchEggRsp_reflection_;
  delete PetActiveFetterReq::default_instance_;
  delete PetActiveFetterReq_reflection_;
  delete PetActiveFetterRsp::default_instance_;
  delete PetActiveFetterRsp_reflection_;
  delete PetSkillLvReq::default_instance_;
  delete PetSkillLvReq_reflection_;
  delete PetSkillLvRsp::default_instance_;
  delete PetSkillLvRsp_reflection_;
  delete PetRestReq::default_instance_;
  delete PetRestReq_reflection_;
  delete PetRestRsp::default_instance_;
  delete PetRestRsp_reflection_;
  delete PetDecomposeReq::default_instance_;
  delete PetDecomposeReq_reflection_;
  delete PetDecomposeRsp::default_instance_;
  delete PetDecomposeRsp_reflection_;
  delete PetQuickHatchEggReq::default_instance_;
  delete PetQuickHatchEggReq_reflection_;
  delete PetQuickHatchEggRsp::default_instance_;
  delete PetQuickHatchEggRsp_reflection_;
  delete PetRestReViewReq::default_instance_;
  delete PetRestReViewReq_reflection_;
  delete PetRestReViewRsp::default_instance_;
  delete PetRestReViewRsp_reflection_;
}

void protobuf_AddDesc_CPet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nCPet.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\032\022common_logic.proto\032\tCom.proto\"}\n\022"
    "NotifyPetModuleRsp\022\016\n\006fetter\030\001 \003(\005\022\037\n\004pe"
    "ts\030\002 \003(\0132\021.proto_ff.PetInfo\022&\n\006hatchs\030\003 "
    "\003(\0132\026.proto_ff.PetHatchInfo\022\016\n\006cfgids\030\004 "
    "\003(\003\"<\n\014NotifyPetRsp\022\013\n\003opt\030\001 \001(\005\022\037\n\004pets"
    "\030\002 \003(\0132\021.proto_ff.PetInfo\"$\n\022NotifyPetFe"
    "tterRsp\022\016\n\006fetter\030\001 \003(\005\";\n\021NotifyPetHatc"
    "hRsp\022&\n\006hatchs\030\001 \003(\0132\026.proto_ff.PetHatch"
    "Info\"\'\n\025NotifyPetGetedListRsp\022\016\n\006cfgids\030"
    "\001 \003(\003\",\n\nPetLvUpReq\022\016\n\006instId\030\001 \001(\005\022\016\n\006i"
    "temid\030\002 \001(\003\")\n\nPetLvUpRsp\022\013\n\003ret\030\001 \001(\005\022\016"
    "\n\006instId\030\002 \001(\005\"\036\n\014PetStepLvReq\022\016\n\006instId"
    "\030\001 \001(\005\"+\n\014PetStepLvRsp\022\013\n\003ret\030\001 \001(\005\022\016\n\006i"
    "nstId\030\002 \001(\005\"F\n\014PetStarLvReq\022\016\n\006instId\030\001 "
    "\001(\005\022\022\n\ncostPetIds\030\002 \003(\005\022\022\n\nisCostItem\030\003 "
    "\001(\005\"+\n\014PetStarLvRsp\022\013\n\003ret\030\001 \001(\005\022\016\n\006inst"
    "Id\030\002 \001(\005\"<\n\017PetFormationReq\022\013\n\003opt\030\001 \001(\005"
    "\022\016\n\006instId\030\002 \001(\005\022\014\n\004slot\030\003 \001(\005\"I\n\017PetFor"
    "mationRsp\022\013\n\003ret\030\001 \001(\005\022\013\n\003opt\030\002 \001(\005\022\016\n\006i"
    "nstId\030\003 \001(\005\022\014\n\004slot\030\004 \001(\005\"1\n\016PetAddHatch"
    "Req\022\037\n\004pair\030\001 \003(\0132\021.proto_ff.ComPair\">\n\016"
    "PetAddHatchRsp\022\013\n\003ret\030\001 \001(\005\022\037\n\004pair\030\002 \003("
    "\0132\021.proto_ff.ComPair\"!\n\021PetHatchUnlockRe"
    "q\022\014\n\004slot\030\001 \001(\005\".\n\021PetHatchUnlockRsp\022\013\n\003"
    "ret\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\"\037\n\016PetHatchEggRe"
    "q\022\r\n\005slots\030\001 \003(\005\"L\n\016PetHatchEggRsp\022\013\n\003re"
    "t\030\001 \001(\005\022\013\n\003opt\030\002 \001(\005\022\014\n\004slot\030\003 \003(\005\022\022\n\npe"
    "tInstIds\030\004 \003(\005\" \n\022PetActiveFetterReq\022\n\n\002"
    "id\030\001 \001(\005\"-\n\022PetActiveFetterRsp\022\013\n\003ret\030\001 "
    "\001(\005\022\n\n\002id\030\002 \001(\005\">\n\rPetSkillLvReq\022\013\n\003opt\030"
    "\001 \001(\005\022\016\n\006instId\030\002 \001(\005\022\020\n\010skill_id\030\003 \001(\005\""
    "K\n\rPetSkillLvRsp\022\013\n\003ret\030\001 \001(\005\022\013\n\003opt\030\002 \001"
    "(\005\022\016\n\006instId\030\003 \001(\005\022\020\n\010skill_id\030\004 \001(\005\"\034\n\n"
    "PetRestReq\022\016\n\006instId\030\001 \001(\005\"p\n\nPetRestRsp"
    "\022\013\n\003ret\030\001 \001(\005\022\016\n\006instId\030\002 \001(\005\022\"\n\005items\030\003"
    " \003(\0132\023.proto_ff.ComPair64\022!\n\004pets\030\004 \003(\0132"
    "\023.proto_ff.ComPair64\"\"\n\017PetDecomposeReq\022"
    "\017\n\007instIds\030\001 \003(\005\"\036\n\017PetDecomposeRsp\022\013\n\003r"
    "et\030\001 \001(\005\"#\n\023PetQuickHatchEggReq\022\014\n\004slot\030"
    "\001 \001(\005\"0\n\023PetQuickHatchEggRsp\022\013\n\003ret\030\001 \001("
    "\005\022\014\n\004slot\030\002 \001(\005\"\"\n\020PetRestReViewReq\022\016\n\006i"
    "nstId\030\001 \001(\005\"v\n\020PetRestReViewRsp\022\013\n\003ret\030\001"
    " \001(\005\022\016\n\006instId\030\002 \001(\005\022\"\n\005items\030\003 \003(\0132\023.pr"
    "oto_ff.ComPair64\022!\n\004pets\030\004 \003(\0132\023.proto_f"
    "f.ComPair64", 1811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CPet.proto", &protobuf_RegisterTypes);
  NotifyPetModuleRsp::default_instance_ = new NotifyPetModuleRsp();
  NotifyPetRsp::default_instance_ = new NotifyPetRsp();
  NotifyPetFetterRsp::default_instance_ = new NotifyPetFetterRsp();
  NotifyPetHatchRsp::default_instance_ = new NotifyPetHatchRsp();
  NotifyPetGetedListRsp::default_instance_ = new NotifyPetGetedListRsp();
  PetLvUpReq::default_instance_ = new PetLvUpReq();
  PetLvUpRsp::default_instance_ = new PetLvUpRsp();
  PetStepLvReq::default_instance_ = new PetStepLvReq();
  PetStepLvRsp::default_instance_ = new PetStepLvRsp();
  PetStarLvReq::default_instance_ = new PetStarLvReq();
  PetStarLvRsp::default_instance_ = new PetStarLvRsp();
  PetFormationReq::default_instance_ = new PetFormationReq();
  PetFormationRsp::default_instance_ = new PetFormationRsp();
  PetAddHatchReq::default_instance_ = new PetAddHatchReq();
  PetAddHatchRsp::default_instance_ = new PetAddHatchRsp();
  PetHatchUnlockReq::default_instance_ = new PetHatchUnlockReq();
  PetHatchUnlockRsp::default_instance_ = new PetHatchUnlockRsp();
  PetHatchEggReq::default_instance_ = new PetHatchEggReq();
  PetHatchEggRsp::default_instance_ = new PetHatchEggRsp();
  PetActiveFetterReq::default_instance_ = new PetActiveFetterReq();
  PetActiveFetterRsp::default_instance_ = new PetActiveFetterRsp();
  PetSkillLvReq::default_instance_ = new PetSkillLvReq();
  PetSkillLvRsp::default_instance_ = new PetSkillLvRsp();
  PetRestReq::default_instance_ = new PetRestReq();
  PetRestRsp::default_instance_ = new PetRestRsp();
  PetDecomposeReq::default_instance_ = new PetDecomposeReq();
  PetDecomposeRsp::default_instance_ = new PetDecomposeRsp();
  PetQuickHatchEggReq::default_instance_ = new PetQuickHatchEggReq();
  PetQuickHatchEggRsp::default_instance_ = new PetQuickHatchEggRsp();
  PetRestReViewReq::default_instance_ = new PetRestReViewReq();
  PetRestReViewRsp::default_instance_ = new PetRestReViewRsp();
  NotifyPetModuleRsp::default_instance_->InitAsDefaultInstance();
  NotifyPetRsp::default_instance_->InitAsDefaultInstance();
  NotifyPetFetterRsp::default_instance_->InitAsDefaultInstance();
  NotifyPetHatchRsp::default_instance_->InitAsDefaultInstance();
  NotifyPetGetedListRsp::default_instance_->InitAsDefaultInstance();
  PetLvUpReq::default_instance_->InitAsDefaultInstance();
  PetLvUpRsp::default_instance_->InitAsDefaultInstance();
  PetStepLvReq::default_instance_->InitAsDefaultInstance();
  PetStepLvRsp::default_instance_->InitAsDefaultInstance();
  PetStarLvReq::default_instance_->InitAsDefaultInstance();
  PetStarLvRsp::default_instance_->InitAsDefaultInstance();
  PetFormationReq::default_instance_->InitAsDefaultInstance();
  PetFormationRsp::default_instance_->InitAsDefaultInstance();
  PetAddHatchReq::default_instance_->InitAsDefaultInstance();
  PetAddHatchRsp::default_instance_->InitAsDefaultInstance();
  PetHatchUnlockReq::default_instance_->InitAsDefaultInstance();
  PetHatchUnlockRsp::default_instance_->InitAsDefaultInstance();
  PetHatchEggReq::default_instance_->InitAsDefaultInstance();
  PetHatchEggRsp::default_instance_->InitAsDefaultInstance();
  PetActiveFetterReq::default_instance_->InitAsDefaultInstance();
  PetActiveFetterRsp::default_instance_->InitAsDefaultInstance();
  PetSkillLvReq::default_instance_->InitAsDefaultInstance();
  PetSkillLvRsp::default_instance_->InitAsDefaultInstance();
  PetRestReq::default_instance_->InitAsDefaultInstance();
  PetRestRsp::default_instance_->InitAsDefaultInstance();
  PetDecomposeReq::default_instance_->InitAsDefaultInstance();
  PetDecomposeRsp::default_instance_->InitAsDefaultInstance();
  PetQuickHatchEggReq::default_instance_->InitAsDefaultInstance();
  PetQuickHatchEggRsp::default_instance_->InitAsDefaultInstance();
  PetRestReViewReq::default_instance_->InitAsDefaultInstance();
  PetRestReViewRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CPet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CPet_2eproto {
  StaticDescriptorInitializer_CPet_2eproto() {
    protobuf_AddDesc_CPet_2eproto();
  }
} static_descriptor_initializer_CPet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyPetModuleRsp::kFetterFieldNumber;
const int NotifyPetModuleRsp::kPetsFieldNumber;
const int NotifyPetModuleRsp::kHatchsFieldNumber;
const int NotifyPetModuleRsp::kCfgidsFieldNumber;
#endif  // !_MSC_VER

NotifyPetModuleRsp::NotifyPetModuleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPetModuleRsp::InitAsDefaultInstance() {
}

NotifyPetModuleRsp::NotifyPetModuleRsp(const NotifyPetModuleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPetModuleRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPetModuleRsp::~NotifyPetModuleRsp() {
  SharedDtor();
}

void NotifyPetModuleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPetModuleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPetModuleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPetModuleRsp_descriptor_;
}

const NotifyPetModuleRsp& NotifyPetModuleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

NotifyPetModuleRsp* NotifyPetModuleRsp::default_instance_ = NULL;

NotifyPetModuleRsp* NotifyPetModuleRsp::New() const {
  return new NotifyPetModuleRsp;
}

void NotifyPetModuleRsp::Clear() {
  fetter_.Clear();
  pets_.Clear();
  hatchs_.Clear();
  cfgids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPetModuleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fetter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fetter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fetter;
        if (input->ExpectTag(18)) goto parse_pets;
        break;
      }

      // repeated .proto_ff.PetInfo pets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pets;
        if (input->ExpectTag(26)) goto parse_hatchs;
        break;
      }

      // repeated .proto_ff.PetHatchInfo hatchs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hatchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hatchs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hatchs;
        if (input->ExpectTag(32)) goto parse_cfgids;
        break;
      }

      // repeated int64 cfgids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_cfgids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cfgids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cfgids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPetModuleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fetter = 1;
  for (int i = 0; i < this->fetter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fetter(i), output);
  }

  // repeated .proto_ff.PetInfo pets = 2;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pets(i), output);
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  for (int i = 0; i < this->hatchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hatchs(i), output);
  }

  // repeated int64 cfgids = 4;
  for (int i = 0; i < this->cfgids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->cfgids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPetModuleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fetter = 1;
  for (int i = 0; i < this->fetter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fetter(i), target);
  }

  // repeated .proto_ff.PetInfo pets = 2;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pets(i), target);
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  for (int i = 0; i < this->hatchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hatchs(i), target);
  }

  // repeated int64 cfgids = 4;
  for (int i = 0; i < this->cfgids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->cfgids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPetModuleRsp::ByteSize() const {
  int total_size = 0;

  // repeated int32 fetter = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetter(i));
    }
    total_size += 1 * this->fetter_size() + data_size;
  }

  // repeated .proto_ff.PetInfo pets = 2;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  total_size += 1 * this->hatchs_size();
  for (int i = 0; i < this->hatchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hatchs(i));
  }

  // repeated int64 cfgids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfgids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cfgids(i));
    }
    total_size += 1 * this->cfgids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPetModuleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPetModuleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPetModuleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPetModuleRsp::MergeFrom(const NotifyPetModuleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetter_.MergeFrom(from.fetter_);
  pets_.MergeFrom(from.pets_);
  hatchs_.MergeFrom(from.hatchs_);
  cfgids_.MergeFrom(from.cfgids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPetModuleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPetModuleRsp::CopyFrom(const NotifyPetModuleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPetModuleRsp::IsInitialized() const {

  return true;
}

void NotifyPetModuleRsp::Swap(NotifyPetModuleRsp* other) {
  if (other != this) {
    fetter_.Swap(&other->fetter_);
    pets_.Swap(&other->pets_);
    hatchs_.Swap(&other->hatchs_);
    cfgids_.Swap(&other->cfgids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPetModuleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPetModuleRsp_descriptor_;
  metadata.reflection = NotifyPetModuleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPetRsp::kOptFieldNumber;
const int NotifyPetRsp::kPetsFieldNumber;
#endif  // !_MSC_VER

NotifyPetRsp::NotifyPetRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPetRsp::InitAsDefaultInstance() {
}

NotifyPetRsp::NotifyPetRsp(const NotifyPetRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPetRsp::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPetRsp::~NotifyPetRsp() {
  SharedDtor();
}

void NotifyPetRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPetRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPetRsp_descriptor_;
}

const NotifyPetRsp& NotifyPetRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

NotifyPetRsp* NotifyPetRsp::default_instance_ = NULL;

NotifyPetRsp* NotifyPetRsp::New() const {
  return new NotifyPetRsp;
}

void NotifyPetRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pets;
        break;
      }

      // repeated .proto_ff.PetInfo pets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  // repeated .proto_ff.PetInfo pets = 2;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPetRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  // repeated .proto_ff.PetInfo pets = 2;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  // repeated .proto_ff.PetInfo pets = 2;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPetRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPetRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPetRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPetRsp::MergeFrom(const NotifyPetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pets_.MergeFrom(from.pets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPetRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPetRsp::CopyFrom(const NotifyPetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPetRsp::IsInitialized() const {

  return true;
}

void NotifyPetRsp::Swap(NotifyPetRsp* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    pets_.Swap(&other->pets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPetRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPetRsp_descriptor_;
  metadata.reflection = NotifyPetRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPetFetterRsp::kFetterFieldNumber;
#endif  // !_MSC_VER

NotifyPetFetterRsp::NotifyPetFetterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPetFetterRsp::InitAsDefaultInstance() {
}

NotifyPetFetterRsp::NotifyPetFetterRsp(const NotifyPetFetterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPetFetterRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPetFetterRsp::~NotifyPetFetterRsp() {
  SharedDtor();
}

void NotifyPetFetterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPetFetterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPetFetterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPetFetterRsp_descriptor_;
}

const NotifyPetFetterRsp& NotifyPetFetterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

NotifyPetFetterRsp* NotifyPetFetterRsp::default_instance_ = NULL;

NotifyPetFetterRsp* NotifyPetFetterRsp::New() const {
  return new NotifyPetFetterRsp;
}

void NotifyPetFetterRsp::Clear() {
  fetter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPetFetterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fetter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fetter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fetter;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPetFetterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fetter = 1;
  for (int i = 0; i < this->fetter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fetter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPetFetterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fetter = 1;
  for (int i = 0; i < this->fetter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fetter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPetFetterRsp::ByteSize() const {
  int total_size = 0;

  // repeated int32 fetter = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetter(i));
    }
    total_size += 1 * this->fetter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPetFetterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPetFetterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPetFetterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPetFetterRsp::MergeFrom(const NotifyPetFetterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetter_.MergeFrom(from.fetter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPetFetterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPetFetterRsp::CopyFrom(const NotifyPetFetterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPetFetterRsp::IsInitialized() const {

  return true;
}

void NotifyPetFetterRsp::Swap(NotifyPetFetterRsp* other) {
  if (other != this) {
    fetter_.Swap(&other->fetter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPetFetterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPetFetterRsp_descriptor_;
  metadata.reflection = NotifyPetFetterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPetHatchRsp::kHatchsFieldNumber;
#endif  // !_MSC_VER

NotifyPetHatchRsp::NotifyPetHatchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPetHatchRsp::InitAsDefaultInstance() {
}

NotifyPetHatchRsp::NotifyPetHatchRsp(const NotifyPetHatchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPetHatchRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPetHatchRsp::~NotifyPetHatchRsp() {
  SharedDtor();
}

void NotifyPetHatchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPetHatchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPetHatchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPetHatchRsp_descriptor_;
}

const NotifyPetHatchRsp& NotifyPetHatchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

NotifyPetHatchRsp* NotifyPetHatchRsp::default_instance_ = NULL;

NotifyPetHatchRsp* NotifyPetHatchRsp::New() const {
  return new NotifyPetHatchRsp;
}

void NotifyPetHatchRsp::Clear() {
  hatchs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPetHatchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.PetHatchInfo hatchs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hatchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hatchs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hatchs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPetHatchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.PetHatchInfo hatchs = 1;
  for (int i = 0; i < this->hatchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hatchs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPetHatchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.PetHatchInfo hatchs = 1;
  for (int i = 0; i < this->hatchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hatchs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPetHatchRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.PetHatchInfo hatchs = 1;
  total_size += 1 * this->hatchs_size();
  for (int i = 0; i < this->hatchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hatchs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPetHatchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPetHatchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPetHatchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPetHatchRsp::MergeFrom(const NotifyPetHatchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hatchs_.MergeFrom(from.hatchs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPetHatchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPetHatchRsp::CopyFrom(const NotifyPetHatchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPetHatchRsp::IsInitialized() const {

  return true;
}

void NotifyPetHatchRsp::Swap(NotifyPetHatchRsp* other) {
  if (other != this) {
    hatchs_.Swap(&other->hatchs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPetHatchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPetHatchRsp_descriptor_;
  metadata.reflection = NotifyPetHatchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPetGetedListRsp::kCfgidsFieldNumber;
#endif  // !_MSC_VER

NotifyPetGetedListRsp::NotifyPetGetedListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPetGetedListRsp::InitAsDefaultInstance() {
}

NotifyPetGetedListRsp::NotifyPetGetedListRsp(const NotifyPetGetedListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPetGetedListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPetGetedListRsp::~NotifyPetGetedListRsp() {
  SharedDtor();
}

void NotifyPetGetedListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPetGetedListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPetGetedListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPetGetedListRsp_descriptor_;
}

const NotifyPetGetedListRsp& NotifyPetGetedListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

NotifyPetGetedListRsp* NotifyPetGetedListRsp::default_instance_ = NULL;

NotifyPetGetedListRsp* NotifyPetGetedListRsp::New() const {
  return new NotifyPetGetedListRsp;
}

void NotifyPetGetedListRsp::Clear() {
  cfgids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPetGetedListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 cfgids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_cfgids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cfgids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cfgids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPetGetedListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 cfgids = 1;
  for (int i = 0; i < this->cfgids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->cfgids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPetGetedListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 cfgids = 1;
  for (int i = 0; i < this->cfgids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->cfgids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPetGetedListRsp::ByteSize() const {
  int total_size = 0;

  // repeated int64 cfgids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfgids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cfgids(i));
    }
    total_size += 1 * this->cfgids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPetGetedListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPetGetedListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPetGetedListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPetGetedListRsp::MergeFrom(const NotifyPetGetedListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgids_.MergeFrom(from.cfgids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPetGetedListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPetGetedListRsp::CopyFrom(const NotifyPetGetedListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPetGetedListRsp::IsInitialized() const {

  return true;
}

void NotifyPetGetedListRsp::Swap(NotifyPetGetedListRsp* other) {
  if (other != this) {
    cfgids_.Swap(&other->cfgids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPetGetedListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPetGetedListRsp_descriptor_;
  metadata.reflection = NotifyPetGetedListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetLvUpReq::kInstIdFieldNumber;
const int PetLvUpReq::kItemidFieldNumber;
#endif  // !_MSC_VER

PetLvUpReq::PetLvUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetLvUpReq::InitAsDefaultInstance() {
}

PetLvUpReq::PetLvUpReq(const PetLvUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetLvUpReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetLvUpReq::~PetLvUpReq() {
  SharedDtor();
}

void PetLvUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetLvUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetLvUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetLvUpReq_descriptor_;
}

const PetLvUpReq& PetLvUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetLvUpReq* PetLvUpReq::default_instance_ = NULL;

PetLvUpReq* PetLvUpReq::New() const {
  return new PetLvUpReq;
}

void PetLvUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetLvUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetLvUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetLvUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetLvUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetLvUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetLvUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetLvUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetLvUpReq::MergeFrom(const PetLvUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetLvUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetLvUpReq::CopyFrom(const PetLvUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetLvUpReq::IsInitialized() const {

  return true;
}

void PetLvUpReq::Swap(PetLvUpReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetLvUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetLvUpReq_descriptor_;
  metadata.reflection = PetLvUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetLvUpRsp::kRetFieldNumber;
const int PetLvUpRsp::kInstIdFieldNumber;
#endif  // !_MSC_VER

PetLvUpRsp::PetLvUpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetLvUpRsp::InitAsDefaultInstance() {
}

PetLvUpRsp::PetLvUpRsp(const PetLvUpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetLvUpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetLvUpRsp::~PetLvUpRsp() {
  SharedDtor();
}

void PetLvUpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetLvUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetLvUpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetLvUpRsp_descriptor_;
}

const PetLvUpRsp& PetLvUpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetLvUpRsp* PetLvUpRsp::default_instance_ = NULL;

PetLvUpRsp* PetLvUpRsp::New() const {
  return new PetLvUpRsp;
}

void PetLvUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetLvUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetLvUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetLvUpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetLvUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetLvUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetLvUpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetLvUpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetLvUpRsp::MergeFrom(const PetLvUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetLvUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetLvUpRsp::CopyFrom(const PetLvUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetLvUpRsp::IsInitialized() const {

  return true;
}

void PetLvUpRsp::Swap(PetLvUpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetLvUpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetLvUpRsp_descriptor_;
  metadata.reflection = PetLvUpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetStepLvReq::kInstIdFieldNumber;
#endif  // !_MSC_VER

PetStepLvReq::PetStepLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetStepLvReq::InitAsDefaultInstance() {
}

PetStepLvReq::PetStepLvReq(const PetStepLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetStepLvReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetStepLvReq::~PetStepLvReq() {
  SharedDtor();
}

void PetStepLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetStepLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetStepLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetStepLvReq_descriptor_;
}

const PetStepLvReq& PetStepLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetStepLvReq* PetStepLvReq::default_instance_ = NULL;

PetStepLvReq* PetStepLvReq::New() const {
  return new PetStepLvReq;
}

void PetStepLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetStepLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetStepLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetStepLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetStepLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetStepLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetStepLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetStepLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetStepLvReq::MergeFrom(const PetStepLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetStepLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetStepLvReq::CopyFrom(const PetStepLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetStepLvReq::IsInitialized() const {

  return true;
}

void PetStepLvReq::Swap(PetStepLvReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetStepLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetStepLvReq_descriptor_;
  metadata.reflection = PetStepLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetStepLvRsp::kRetFieldNumber;
const int PetStepLvRsp::kInstIdFieldNumber;
#endif  // !_MSC_VER

PetStepLvRsp::PetStepLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetStepLvRsp::InitAsDefaultInstance() {
}

PetStepLvRsp::PetStepLvRsp(const PetStepLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetStepLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetStepLvRsp::~PetStepLvRsp() {
  SharedDtor();
}

void PetStepLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetStepLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetStepLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetStepLvRsp_descriptor_;
}

const PetStepLvRsp& PetStepLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetStepLvRsp* PetStepLvRsp::default_instance_ = NULL;

PetStepLvRsp* PetStepLvRsp::New() const {
  return new PetStepLvRsp;
}

void PetStepLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetStepLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetStepLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetStepLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetStepLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetStepLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetStepLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetStepLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetStepLvRsp::MergeFrom(const PetStepLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetStepLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetStepLvRsp::CopyFrom(const PetStepLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetStepLvRsp::IsInitialized() const {

  return true;
}

void PetStepLvRsp::Swap(PetStepLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetStepLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetStepLvRsp_descriptor_;
  metadata.reflection = PetStepLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetStarLvReq::kInstIdFieldNumber;
const int PetStarLvReq::kCostPetIdsFieldNumber;
const int PetStarLvReq::kIsCostItemFieldNumber;
#endif  // !_MSC_VER

PetStarLvReq::PetStarLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetStarLvReq::InitAsDefaultInstance() {
}

PetStarLvReq::PetStarLvReq(const PetStarLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetStarLvReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  iscostitem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetStarLvReq::~PetStarLvReq() {
  SharedDtor();
}

void PetStarLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetStarLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetStarLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetStarLvReq_descriptor_;
}

const PetStarLvReq& PetStarLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetStarLvReq* PetStarLvReq::default_instance_ = NULL;

PetStarLvReq* PetStarLvReq::New() const {
  return new PetStarLvReq;
}

void PetStarLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
    iscostitem_ = 0;
  }
  costpetids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetStarLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_costPetIds;
        break;
      }

      // repeated int32 costPetIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costPetIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_costpetids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_costpetids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_costPetIds;
        if (input->ExpectTag(24)) goto parse_isCostItem;
        break;
      }

      // optional int32 isCostItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCostItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscostitem_)));
          set_has_iscostitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetStarLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  // repeated int32 costPetIds = 2;
  for (int i = 0; i < this->costpetids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->costpetids(i), output);
  }

  // optional int32 isCostItem = 3;
  if (has_iscostitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iscostitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetStarLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  // repeated int32 costPetIds = 2;
  for (int i = 0; i < this->costpetids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->costpetids(i), target);
  }

  // optional int32 isCostItem = 3;
  if (has_iscostitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iscostitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetStarLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int32 isCostItem = 3;
    if (has_iscostitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscostitem());
    }

  }
  // repeated int32 costPetIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->costpetids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->costpetids(i));
    }
    total_size += 1 * this->costpetids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetStarLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetStarLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetStarLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetStarLvReq::MergeFrom(const PetStarLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  costpetids_.MergeFrom(from.costpetids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_iscostitem()) {
      set_iscostitem(from.iscostitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetStarLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetStarLvReq::CopyFrom(const PetStarLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetStarLvReq::IsInitialized() const {

  return true;
}

void PetStarLvReq::Swap(PetStarLvReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    costpetids_.Swap(&other->costpetids_);
    std::swap(iscostitem_, other->iscostitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetStarLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetStarLvReq_descriptor_;
  metadata.reflection = PetStarLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetStarLvRsp::kRetFieldNumber;
const int PetStarLvRsp::kInstIdFieldNumber;
#endif  // !_MSC_VER

PetStarLvRsp::PetStarLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetStarLvRsp::InitAsDefaultInstance() {
}

PetStarLvRsp::PetStarLvRsp(const PetStarLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetStarLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetStarLvRsp::~PetStarLvRsp() {
  SharedDtor();
}

void PetStarLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetStarLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetStarLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetStarLvRsp_descriptor_;
}

const PetStarLvRsp& PetStarLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetStarLvRsp* PetStarLvRsp::default_instance_ = NULL;

PetStarLvRsp* PetStarLvRsp::New() const {
  return new PetStarLvRsp;
}

void PetStarLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetStarLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetStarLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetStarLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetStarLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetStarLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetStarLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetStarLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetStarLvRsp::MergeFrom(const PetStarLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetStarLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetStarLvRsp::CopyFrom(const PetStarLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetStarLvRsp::IsInitialized() const {

  return true;
}

void PetStarLvRsp::Swap(PetStarLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetStarLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetStarLvRsp_descriptor_;
  metadata.reflection = PetStarLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetFormationReq::kOptFieldNumber;
const int PetFormationReq::kInstIdFieldNumber;
const int PetFormationReq::kSlotFieldNumber;
#endif  // !_MSC_VER

PetFormationReq::PetFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetFormationReq::InitAsDefaultInstance() {
}

PetFormationReq::PetFormationReq(const PetFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetFormationReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  instid_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetFormationReq::~PetFormationReq() {
  SharedDtor();
}

void PetFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetFormationReq_descriptor_;
}

const PetFormationReq& PetFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetFormationReq* PetFormationReq::default_instance_ = NULL;

PetFormationReq* PetFormationReq::New() const {
  return new PetFormationReq;
}

void PetFormationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
    instid_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // optional int32 slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  // optional int32 slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  // optional int32 slot = 3;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetFormationReq::MergeFrom(const PetFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetFormationReq::CopyFrom(const PetFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetFormationReq::IsInitialized() const {

  return true;
}

void PetFormationReq::Swap(PetFormationReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(instid_, other->instid_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetFormationReq_descriptor_;
  metadata.reflection = PetFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetFormationRsp::kRetFieldNumber;
const int PetFormationRsp::kOptFieldNumber;
const int PetFormationRsp::kInstIdFieldNumber;
const int PetFormationRsp::kSlotFieldNumber;
#endif  // !_MSC_VER

PetFormationRsp::PetFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetFormationRsp::InitAsDefaultInstance() {
}

PetFormationRsp::PetFormationRsp(const PetFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  opt_ = 0;
  instid_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetFormationRsp::~PetFormationRsp() {
  SharedDtor();
}

void PetFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetFormationRsp_descriptor_;
}

const PetFormationRsp& PetFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetFormationRsp* PetFormationRsp::default_instance_ = NULL;

PetFormationRsp* PetFormationRsp::New() const {
  return new PetFormationRsp;
}

void PetFormationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    opt_ = 0;
    instid_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instId;
        break;
      }

      // optional int32 instId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot;
        break;
      }

      // optional int32 slot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  // optional int32 instId = 3;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instid(), output);
  }

  // optional int32 slot = 4;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  // optional int32 instId = 3;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instid(), target);
  }

  // optional int32 slot = 4;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetFormationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional int32 instId = 3;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int32 slot = 4;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetFormationRsp::MergeFrom(const PetFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetFormationRsp::CopyFrom(const PetFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetFormationRsp::IsInitialized() const {

  return true;
}

void PetFormationRsp::Swap(PetFormationRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(opt_, other->opt_);
    std::swap(instid_, other->instid_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetFormationRsp_descriptor_;
  metadata.reflection = PetFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetAddHatchReq::kPairFieldNumber;
#endif  // !_MSC_VER

PetAddHatchReq::PetAddHatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetAddHatchReq::InitAsDefaultInstance() {
}

PetAddHatchReq::PetAddHatchReq(const PetAddHatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetAddHatchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetAddHatchReq::~PetAddHatchReq() {
  SharedDtor();
}

void PetAddHatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetAddHatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetAddHatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetAddHatchReq_descriptor_;
}

const PetAddHatchReq& PetAddHatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetAddHatchReq* PetAddHatchReq::default_instance_ = NULL;

PetAddHatchReq* PetAddHatchReq::New() const {
  return new PetAddHatchReq;
}

void PetAddHatchReq::Clear() {
  pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetAddHatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetAddHatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetAddHatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetAddHatchReq::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair pair = 1;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetAddHatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetAddHatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetAddHatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetAddHatchReq::MergeFrom(const PetAddHatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetAddHatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetAddHatchReq::CopyFrom(const PetAddHatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetAddHatchReq::IsInitialized() const {

  return true;
}

void PetAddHatchReq::Swap(PetAddHatchReq* other) {
  if (other != this) {
    pair_.Swap(&other->pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetAddHatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetAddHatchReq_descriptor_;
  metadata.reflection = PetAddHatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetAddHatchRsp::kRetFieldNumber;
const int PetAddHatchRsp::kPairFieldNumber;
#endif  // !_MSC_VER

PetAddHatchRsp::PetAddHatchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetAddHatchRsp::InitAsDefaultInstance() {
}

PetAddHatchRsp::PetAddHatchRsp(const PetAddHatchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetAddHatchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetAddHatchRsp::~PetAddHatchRsp() {
  SharedDtor();
}

void PetAddHatchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetAddHatchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetAddHatchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetAddHatchRsp_descriptor_;
}

const PetAddHatchRsp& PetAddHatchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetAddHatchRsp* PetAddHatchRsp::default_instance_ = NULL;

PetAddHatchRsp* PetAddHatchRsp::New() const {
  return new PetAddHatchRsp;
}

void PetAddHatchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetAddHatchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pair;
        break;
      }

      // repeated .proto_ff.ComPair pair = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetAddHatchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.ComPair pair = 2;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetAddHatchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.ComPair pair = 2;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetAddHatchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .proto_ff.ComPair pair = 2;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetAddHatchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetAddHatchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetAddHatchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetAddHatchRsp::MergeFrom(const PetAddHatchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetAddHatchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetAddHatchRsp::CopyFrom(const PetAddHatchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetAddHatchRsp::IsInitialized() const {

  return true;
}

void PetAddHatchRsp::Swap(PetAddHatchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    pair_.Swap(&other->pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetAddHatchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetAddHatchRsp_descriptor_;
  metadata.reflection = PetAddHatchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetHatchUnlockReq::kSlotFieldNumber;
#endif  // !_MSC_VER

PetHatchUnlockReq::PetHatchUnlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetHatchUnlockReq::InitAsDefaultInstance() {
}

PetHatchUnlockReq::PetHatchUnlockReq(const PetHatchUnlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetHatchUnlockReq::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetHatchUnlockReq::~PetHatchUnlockReq() {
  SharedDtor();
}

void PetHatchUnlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetHatchUnlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetHatchUnlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetHatchUnlockReq_descriptor_;
}

const PetHatchUnlockReq& PetHatchUnlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetHatchUnlockReq* PetHatchUnlockReq::default_instance_ = NULL;

PetHatchUnlockReq* PetHatchUnlockReq::New() const {
  return new PetHatchUnlockReq;
}

void PetHatchUnlockReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetHatchUnlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetHatchUnlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetHatchUnlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetHatchUnlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetHatchUnlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetHatchUnlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetHatchUnlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetHatchUnlockReq::MergeFrom(const PetHatchUnlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetHatchUnlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetHatchUnlockReq::CopyFrom(const PetHatchUnlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetHatchUnlockReq::IsInitialized() const {

  return true;
}

void PetHatchUnlockReq::Swap(PetHatchUnlockReq* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetHatchUnlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetHatchUnlockReq_descriptor_;
  metadata.reflection = PetHatchUnlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetHatchUnlockRsp::kRetFieldNumber;
const int PetHatchUnlockRsp::kSlotFieldNumber;
#endif  // !_MSC_VER

PetHatchUnlockRsp::PetHatchUnlockRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetHatchUnlockRsp::InitAsDefaultInstance() {
}

PetHatchUnlockRsp::PetHatchUnlockRsp(const PetHatchUnlockRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetHatchUnlockRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetHatchUnlockRsp::~PetHatchUnlockRsp() {
  SharedDtor();
}

void PetHatchUnlockRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetHatchUnlockRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetHatchUnlockRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetHatchUnlockRsp_descriptor_;
}

const PetHatchUnlockRsp& PetHatchUnlockRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetHatchUnlockRsp* PetHatchUnlockRsp::default_instance_ = NULL;

PetHatchUnlockRsp* PetHatchUnlockRsp::New() const {
  return new PetHatchUnlockRsp;
}

void PetHatchUnlockRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetHatchUnlockRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetHatchUnlockRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetHatchUnlockRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetHatchUnlockRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetHatchUnlockRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetHatchUnlockRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetHatchUnlockRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetHatchUnlockRsp::MergeFrom(const PetHatchUnlockRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetHatchUnlockRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetHatchUnlockRsp::CopyFrom(const PetHatchUnlockRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetHatchUnlockRsp::IsInitialized() const {

  return true;
}

void PetHatchUnlockRsp::Swap(PetHatchUnlockRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetHatchUnlockRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetHatchUnlockRsp_descriptor_;
  metadata.reflection = PetHatchUnlockRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetHatchEggReq::kSlotsFieldNumber;
#endif  // !_MSC_VER

PetHatchEggReq::PetHatchEggReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetHatchEggReq::InitAsDefaultInstance() {
}

PetHatchEggReq::PetHatchEggReq(const PetHatchEggReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetHatchEggReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetHatchEggReq::~PetHatchEggReq() {
  SharedDtor();
}

void PetHatchEggReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetHatchEggReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetHatchEggReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetHatchEggReq_descriptor_;
}

const PetHatchEggReq& PetHatchEggReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetHatchEggReq* PetHatchEggReq::default_instance_ = NULL;

PetHatchEggReq* PetHatchEggReq::New() const {
  return new PetHatchEggReq;
}

void PetHatchEggReq::Clear() {
  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetHatchEggReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 slots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_slots())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_slots())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_slots;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetHatchEggReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 slots = 1;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->slots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetHatchEggReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 slots = 1;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->slots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetHatchEggReq::ByteSize() const {
  int total_size = 0;

  // repeated int32 slots = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->slots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->slots(i));
    }
    total_size += 1 * this->slots_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetHatchEggReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetHatchEggReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetHatchEggReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetHatchEggReq::MergeFrom(const PetHatchEggReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetHatchEggReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetHatchEggReq::CopyFrom(const PetHatchEggReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetHatchEggReq::IsInitialized() const {

  return true;
}

void PetHatchEggReq::Swap(PetHatchEggReq* other) {
  if (other != this) {
    slots_.Swap(&other->slots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetHatchEggReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetHatchEggReq_descriptor_;
  metadata.reflection = PetHatchEggReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetHatchEggRsp::kRetFieldNumber;
const int PetHatchEggRsp::kOptFieldNumber;
const int PetHatchEggRsp::kSlotFieldNumber;
const int PetHatchEggRsp::kPetInstIdsFieldNumber;
#endif  // !_MSC_VER

PetHatchEggRsp::PetHatchEggRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetHatchEggRsp::InitAsDefaultInstance() {
}

PetHatchEggRsp::PetHatchEggRsp(const PetHatchEggRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetHatchEggRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetHatchEggRsp::~PetHatchEggRsp() {
  SharedDtor();
}

void PetHatchEggRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetHatchEggRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetHatchEggRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetHatchEggRsp_descriptor_;
}

const PetHatchEggRsp& PetHatchEggRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetHatchEggRsp* PetHatchEggRsp::default_instance_ = NULL;

PetHatchEggRsp* PetHatchEggRsp::New() const {
  return new PetHatchEggRsp;
}

void PetHatchEggRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    opt_ = 0;
  }
  slot_.Clear();
  petinstids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetHatchEggRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // repeated int32 slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_slot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_slot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        if (input->ExpectTag(32)) goto parse_petInstIds;
        break;
      }

      // repeated int32 petInstIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petInstIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_petinstids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_petinstids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_petInstIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetHatchEggRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  // repeated int32 slot = 3;
  for (int i = 0; i < this->slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->slot(i), output);
  }

  // repeated int32 petInstIds = 4;
  for (int i = 0; i < this->petinstids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->petinstids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetHatchEggRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  // repeated int32 slot = 3;
  for (int i = 0; i < this->slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->slot(i), target);
  }

  // repeated int32 petInstIds = 4;
  for (int i = 0; i < this->petinstids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->petinstids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetHatchEggRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  // repeated int32 slot = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->slot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->slot(i));
    }
    total_size += 1 * this->slot_size() + data_size;
  }

  // repeated int32 petInstIds = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->petinstids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->petinstids(i));
    }
    total_size += 1 * this->petinstids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetHatchEggRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetHatchEggRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetHatchEggRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetHatchEggRsp::MergeFrom(const PetHatchEggRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  slot_.MergeFrom(from.slot_);
  petinstids_.MergeFrom(from.petinstids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetHatchEggRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetHatchEggRsp::CopyFrom(const PetHatchEggRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetHatchEggRsp::IsInitialized() const {

  return true;
}

void PetHatchEggRsp::Swap(PetHatchEggRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(opt_, other->opt_);
    slot_.Swap(&other->slot_);
    petinstids_.Swap(&other->petinstids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetHatchEggRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetHatchEggRsp_descriptor_;
  metadata.reflection = PetHatchEggRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetActiveFetterReq::kIdFieldNumber;
#endif  // !_MSC_VER

PetActiveFetterReq::PetActiveFetterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetActiveFetterReq::InitAsDefaultInstance() {
}

PetActiveFetterReq::PetActiveFetterReq(const PetActiveFetterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetActiveFetterReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetActiveFetterReq::~PetActiveFetterReq() {
  SharedDtor();
}

void PetActiveFetterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetActiveFetterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetActiveFetterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetActiveFetterReq_descriptor_;
}

const PetActiveFetterReq& PetActiveFetterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetActiveFetterReq* PetActiveFetterReq::default_instance_ = NULL;

PetActiveFetterReq* PetActiveFetterReq::New() const {
  return new PetActiveFetterReq;
}

void PetActiveFetterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetActiveFetterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetActiveFetterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetActiveFetterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetActiveFetterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetActiveFetterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetActiveFetterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetActiveFetterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetActiveFetterReq::MergeFrom(const PetActiveFetterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetActiveFetterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetActiveFetterReq::CopyFrom(const PetActiveFetterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetActiveFetterReq::IsInitialized() const {

  return true;
}

void PetActiveFetterReq::Swap(PetActiveFetterReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetActiveFetterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetActiveFetterReq_descriptor_;
  metadata.reflection = PetActiveFetterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetActiveFetterRsp::kRetFieldNumber;
const int PetActiveFetterRsp::kIdFieldNumber;
#endif  // !_MSC_VER

PetActiveFetterRsp::PetActiveFetterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetActiveFetterRsp::InitAsDefaultInstance() {
}

PetActiveFetterRsp::PetActiveFetterRsp(const PetActiveFetterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetActiveFetterRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetActiveFetterRsp::~PetActiveFetterRsp() {
  SharedDtor();
}

void PetActiveFetterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetActiveFetterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetActiveFetterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetActiveFetterRsp_descriptor_;
}

const PetActiveFetterRsp& PetActiveFetterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetActiveFetterRsp* PetActiveFetterRsp::default_instance_ = NULL;

PetActiveFetterRsp* PetActiveFetterRsp::New() const {
  return new PetActiveFetterRsp;
}

void PetActiveFetterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetActiveFetterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetActiveFetterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetActiveFetterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetActiveFetterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetActiveFetterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetActiveFetterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetActiveFetterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetActiveFetterRsp::MergeFrom(const PetActiveFetterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetActiveFetterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetActiveFetterRsp::CopyFrom(const PetActiveFetterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetActiveFetterRsp::IsInitialized() const {

  return true;
}

void PetActiveFetterRsp::Swap(PetActiveFetterRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetActiveFetterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetActiveFetterRsp_descriptor_;
  metadata.reflection = PetActiveFetterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkillLvReq::kOptFieldNumber;
const int PetSkillLvReq::kInstIdFieldNumber;
const int PetSkillLvReq::kSkillIdFieldNumber;
#endif  // !_MSC_VER

PetSkillLvReq::PetSkillLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkillLvReq::InitAsDefaultInstance() {
}

PetSkillLvReq::PetSkillLvReq(const PetSkillLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkillLvReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  instid_ = 0;
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkillLvReq::~PetSkillLvReq() {
  SharedDtor();
}

void PetSkillLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetSkillLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkillLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkillLvReq_descriptor_;
}

const PetSkillLvReq& PetSkillLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetSkillLvReq* PetSkillLvReq::default_instance_ = NULL;

PetSkillLvReq* PetSkillLvReq::New() const {
  return new PetSkillLvReq;
}

void PetSkillLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
    instid_ = 0;
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkillLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkillLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  // optional int32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkillLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  // optional int32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkillLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkillLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkillLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkillLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkillLvReq::MergeFrom(const PetSkillLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkillLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkillLvReq::CopyFrom(const PetSkillLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkillLvReq::IsInitialized() const {

  return true;
}

void PetSkillLvReq::Swap(PetSkillLvReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(instid_, other->instid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkillLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkillLvReq_descriptor_;
  metadata.reflection = PetSkillLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkillLvRsp::kRetFieldNumber;
const int PetSkillLvRsp::kOptFieldNumber;
const int PetSkillLvRsp::kInstIdFieldNumber;
const int PetSkillLvRsp::kSkillIdFieldNumber;
#endif  // !_MSC_VER

PetSkillLvRsp::PetSkillLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkillLvRsp::InitAsDefaultInstance() {
}

PetSkillLvRsp::PetSkillLvRsp(const PetSkillLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkillLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  opt_ = 0;
  instid_ = 0;
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkillLvRsp::~PetSkillLvRsp() {
  SharedDtor();
}

void PetSkillLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetSkillLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkillLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkillLvRsp_descriptor_;
}

const PetSkillLvRsp& PetSkillLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetSkillLvRsp* PetSkillLvRsp::default_instance_ = NULL;

PetSkillLvRsp* PetSkillLvRsp::New() const {
  return new PetSkillLvRsp;
}

void PetSkillLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    opt_ = 0;
    instid_ = 0;
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkillLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instId;
        break;
      }

      // optional int32 instId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkillLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  // optional int32 instId = 3;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instid(), output);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkillLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  // optional int32 instId = 3;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instid(), target);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkillLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional int32 instId = 3;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkillLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkillLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkillLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkillLvRsp::MergeFrom(const PetSkillLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkillLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkillLvRsp::CopyFrom(const PetSkillLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkillLvRsp::IsInitialized() const {

  return true;
}

void PetSkillLvRsp::Swap(PetSkillLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(opt_, other->opt_);
    std::swap(instid_, other->instid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkillLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkillLvRsp_descriptor_;
  metadata.reflection = PetSkillLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetRestReq::kInstIdFieldNumber;
#endif  // !_MSC_VER

PetRestReq::PetRestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetRestReq::InitAsDefaultInstance() {
}

PetRestReq::PetRestReq(const PetRestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetRestReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetRestReq::~PetRestReq() {
  SharedDtor();
}

void PetRestReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetRestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetRestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetRestReq_descriptor_;
}

const PetRestReq& PetRestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetRestReq* PetRestReq::default_instance_ = NULL;

PetRestReq* PetRestReq::New() const {
  return new PetRestReq;
}

void PetRestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetRestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetRestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetRestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetRestReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetRestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetRestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetRestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetRestReq::MergeFrom(const PetRestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetRestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetRestReq::CopyFrom(const PetRestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetRestReq::IsInitialized() const {

  return true;
}

void PetRestReq::Swap(PetRestReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetRestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetRestReq_descriptor_;
  metadata.reflection = PetRestReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetRestRsp::kRetFieldNumber;
const int PetRestRsp::kInstIdFieldNumber;
const int PetRestRsp::kItemsFieldNumber;
const int PetRestRsp::kPetsFieldNumber;
#endif  // !_MSC_VER

PetRestRsp::PetRestRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetRestRsp::InitAsDefaultInstance() {
}

PetRestRsp::PetRestRsp(const PetRestRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetRestRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetRestRsp::~PetRestRsp() {
  SharedDtor();
}

void PetRestRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetRestRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetRestRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetRestRsp_descriptor_;
}

const PetRestRsp& PetRestRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetRestRsp* PetRestRsp::default_instance_ = NULL;

PetRestRsp* PetRestRsp::New() const {
  return new PetRestRsp;
}

void PetRestRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  items_.Clear();
  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetRestRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(34)) goto parse_pets;
        break;
      }

      // repeated .proto_ff.ComPair64 pets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetRestRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  // repeated .proto_ff.ComPair64 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // repeated .proto_ff.ComPair64 pets = 4;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetRestRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  // repeated .proto_ff.ComPair64 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // repeated .proto_ff.ComPair64 pets = 4;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetRestRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  // repeated .proto_ff.ComPair64 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .proto_ff.ComPair64 pets = 4;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetRestRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetRestRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetRestRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetRestRsp::MergeFrom(const PetRestRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  pets_.MergeFrom(from.pets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetRestRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetRestRsp::CopyFrom(const PetRestRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetRestRsp::IsInitialized() const {

  return true;
}

void PetRestRsp::Swap(PetRestRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    items_.Swap(&other->items_);
    pets_.Swap(&other->pets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetRestRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetRestRsp_descriptor_;
  metadata.reflection = PetRestRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetDecomposeReq::kInstIdsFieldNumber;
#endif  // !_MSC_VER

PetDecomposeReq::PetDecomposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetDecomposeReq::InitAsDefaultInstance() {
}

PetDecomposeReq::PetDecomposeReq(const PetDecomposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetDecomposeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetDecomposeReq::~PetDecomposeReq() {
  SharedDtor();
}

void PetDecomposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetDecomposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetDecomposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetDecomposeReq_descriptor_;
}

const PetDecomposeReq& PetDecomposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetDecomposeReq* PetDecomposeReq::default_instance_ = NULL;

PetDecomposeReq* PetDecomposeReq::New() const {
  return new PetDecomposeReq;
}

void PetDecomposeReq::Clear() {
  instids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetDecomposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 instIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_instids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_instids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_instIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetDecomposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 instIds = 1;
  for (int i = 0; i < this->instids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->instids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetDecomposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 instIds = 1;
  for (int i = 0; i < this->instids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->instids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetDecomposeReq::ByteSize() const {
  int total_size = 0;

  // repeated int32 instIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->instids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->instids(i));
    }
    total_size += 1 * this->instids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetDecomposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetDecomposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetDecomposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetDecomposeReq::MergeFrom(const PetDecomposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  instids_.MergeFrom(from.instids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetDecomposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetDecomposeReq::CopyFrom(const PetDecomposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetDecomposeReq::IsInitialized() const {

  return true;
}

void PetDecomposeReq::Swap(PetDecomposeReq* other) {
  if (other != this) {
    instids_.Swap(&other->instids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetDecomposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetDecomposeReq_descriptor_;
  metadata.reflection = PetDecomposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetDecomposeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

PetDecomposeRsp::PetDecomposeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetDecomposeRsp::InitAsDefaultInstance() {
}

PetDecomposeRsp::PetDecomposeRsp(const PetDecomposeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetDecomposeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetDecomposeRsp::~PetDecomposeRsp() {
  SharedDtor();
}

void PetDecomposeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetDecomposeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetDecomposeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetDecomposeRsp_descriptor_;
}

const PetDecomposeRsp& PetDecomposeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetDecomposeRsp* PetDecomposeRsp::default_instance_ = NULL;

PetDecomposeRsp* PetDecomposeRsp::New() const {
  return new PetDecomposeRsp;
}

void PetDecomposeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetDecomposeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetDecomposeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetDecomposeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetDecomposeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetDecomposeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetDecomposeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetDecomposeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetDecomposeRsp::MergeFrom(const PetDecomposeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetDecomposeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetDecomposeRsp::CopyFrom(const PetDecomposeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetDecomposeRsp::IsInitialized() const {

  return true;
}

void PetDecomposeRsp::Swap(PetDecomposeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetDecomposeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetDecomposeRsp_descriptor_;
  metadata.reflection = PetDecomposeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetQuickHatchEggReq::kSlotFieldNumber;
#endif  // !_MSC_VER

PetQuickHatchEggReq::PetQuickHatchEggReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetQuickHatchEggReq::InitAsDefaultInstance() {
}

PetQuickHatchEggReq::PetQuickHatchEggReq(const PetQuickHatchEggReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetQuickHatchEggReq::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetQuickHatchEggReq::~PetQuickHatchEggReq() {
  SharedDtor();
}

void PetQuickHatchEggReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetQuickHatchEggReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetQuickHatchEggReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetQuickHatchEggReq_descriptor_;
}

const PetQuickHatchEggReq& PetQuickHatchEggReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetQuickHatchEggReq* PetQuickHatchEggReq::default_instance_ = NULL;

PetQuickHatchEggReq* PetQuickHatchEggReq::New() const {
  return new PetQuickHatchEggReq;
}

void PetQuickHatchEggReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetQuickHatchEggReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetQuickHatchEggReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetQuickHatchEggReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetQuickHatchEggReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetQuickHatchEggReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetQuickHatchEggReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetQuickHatchEggReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetQuickHatchEggReq::MergeFrom(const PetQuickHatchEggReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetQuickHatchEggReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetQuickHatchEggReq::CopyFrom(const PetQuickHatchEggReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetQuickHatchEggReq::IsInitialized() const {

  return true;
}

void PetQuickHatchEggReq::Swap(PetQuickHatchEggReq* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetQuickHatchEggReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetQuickHatchEggReq_descriptor_;
  metadata.reflection = PetQuickHatchEggReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetQuickHatchEggRsp::kRetFieldNumber;
const int PetQuickHatchEggRsp::kSlotFieldNumber;
#endif  // !_MSC_VER

PetQuickHatchEggRsp::PetQuickHatchEggRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetQuickHatchEggRsp::InitAsDefaultInstance() {
}

PetQuickHatchEggRsp::PetQuickHatchEggRsp(const PetQuickHatchEggRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetQuickHatchEggRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetQuickHatchEggRsp::~PetQuickHatchEggRsp() {
  SharedDtor();
}

void PetQuickHatchEggRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetQuickHatchEggRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetQuickHatchEggRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetQuickHatchEggRsp_descriptor_;
}

const PetQuickHatchEggRsp& PetQuickHatchEggRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetQuickHatchEggRsp* PetQuickHatchEggRsp::default_instance_ = NULL;

PetQuickHatchEggRsp* PetQuickHatchEggRsp::New() const {
  return new PetQuickHatchEggRsp;
}

void PetQuickHatchEggRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetQuickHatchEggRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetQuickHatchEggRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetQuickHatchEggRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetQuickHatchEggRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetQuickHatchEggRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetQuickHatchEggRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetQuickHatchEggRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetQuickHatchEggRsp::MergeFrom(const PetQuickHatchEggRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetQuickHatchEggRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetQuickHatchEggRsp::CopyFrom(const PetQuickHatchEggRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetQuickHatchEggRsp::IsInitialized() const {

  return true;
}

void PetQuickHatchEggRsp::Swap(PetQuickHatchEggRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetQuickHatchEggRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetQuickHatchEggRsp_descriptor_;
  metadata.reflection = PetQuickHatchEggRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetRestReViewReq::kInstIdFieldNumber;
#endif  // !_MSC_VER

PetRestReViewReq::PetRestReViewReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetRestReViewReq::InitAsDefaultInstance() {
}

PetRestReViewReq::PetRestReViewReq(const PetRestReViewReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetRestReViewReq::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetRestReViewReq::~PetRestReViewReq() {
  SharedDtor();
}

void PetRestReViewReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetRestReViewReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetRestReViewReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetRestReViewReq_descriptor_;
}

const PetRestReViewReq& PetRestReViewReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetRestReViewReq* PetRestReViewReq::default_instance_ = NULL;

PetRestReViewReq* PetRestReViewReq::New() const {
  return new PetRestReViewReq;
}

void PetRestReViewReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetRestReViewReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetRestReViewReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetRestReViewReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetRestReViewReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetRestReViewReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetRestReViewReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetRestReViewReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetRestReViewReq::MergeFrom(const PetRestReViewReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetRestReViewReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetRestReViewReq::CopyFrom(const PetRestReViewReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetRestReViewReq::IsInitialized() const {

  return true;
}

void PetRestReViewReq::Swap(PetRestReViewReq* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetRestReViewReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetRestReViewReq_descriptor_;
  metadata.reflection = PetRestReViewReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetRestReViewRsp::kRetFieldNumber;
const int PetRestReViewRsp::kInstIdFieldNumber;
const int PetRestReViewRsp::kItemsFieldNumber;
const int PetRestReViewRsp::kPetsFieldNumber;
#endif  // !_MSC_VER

PetRestReViewRsp::PetRestReViewRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetRestReViewRsp::InitAsDefaultInstance() {
}

PetRestReViewRsp::PetRestReViewRsp(const PetRestReViewRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetRestReViewRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetRestReViewRsp::~PetRestReViewRsp() {
  SharedDtor();
}

void PetRestReViewRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetRestReViewRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetRestReViewRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetRestReViewRsp_descriptor_;
}

const PetRestReViewRsp& PetRestReViewRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CPet_2eproto();
  return *default_instance_;
}

PetRestReViewRsp* PetRestReViewRsp::default_instance_ = NULL;

PetRestReViewRsp* PetRestReViewRsp::New() const {
  return new PetRestReViewRsp;
}

void PetRestReViewRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instid_ = 0;
  }
  items_.Clear();
  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetRestReViewRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(34)) goto parse_pets;
        break;
      }

      // repeated .proto_ff.ComPair64 pets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetRestReViewRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  // repeated .proto_ff.ComPair64 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // repeated .proto_ff.ComPair64 pets = 4;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetRestReViewRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  // repeated .proto_ff.ComPair64 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // repeated .proto_ff.ComPair64 pets = 4;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetRestReViewRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  // repeated .proto_ff.ComPair64 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .proto_ff.ComPair64 pets = 4;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetRestReViewRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetRestReViewRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetRestReViewRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetRestReViewRsp::MergeFrom(const PetRestReViewRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  pets_.MergeFrom(from.pets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetRestReViewRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetRestReViewRsp::CopyFrom(const PetRestReViewRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetRestReViewRsp::IsInitialized() const {

  return true;
}

void PetRestReViewRsp::Swap(PetRestReViewRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instid_, other->instid_);
    items_.Swap(&other->items_);
    pets_.Swap(&other->pets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetRestReViewRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetRestReViewRsp_descriptor_;
  metadata.reflection = PetRestReViewRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
