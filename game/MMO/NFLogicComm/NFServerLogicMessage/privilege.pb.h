// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: privilege.proto

#ifndef PROTOBUF_privilege_2eproto__INCLUDED
#define PROTOBUF_privilege_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_privilege_2eproto();
void protobuf_AssignDesc_privilege_2eproto();
void protobuf_ShutdownFile_privilege_2eproto();

class privilegeprivilege;
class Sheet_privilegeprivilege;

// ===================================================================

class privilegeprivilege : public ::google::protobuf::Message {
 public:
  privilegeprivilege();
  virtual ~privilegeprivilege();

  privilegeprivilege(const privilegeprivilege& from);

  inline privilegeprivilege& operator=(const privilegeprivilege& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const privilegeprivilege& default_instance();

  void Swap(privilegeprivilege* other);

  // implements Message ----------------------------------------------

  privilegeprivilege* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const privilegeprivilege& from);
  void MergeFrom(const privilegeprivilege& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 showType = 2;
  inline bool has_showtype() const;
  inline void clear_showtype();
  static const int kShowTypeFieldNumber = 2;
  inline ::google::protobuf::int32 showtype() const;
  inline void set_showtype(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 param = 4;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // optional string severParam = 5;
  inline bool has_severparam() const;
  inline void clear_severparam();
  static const int kSeverParamFieldNumber = 5;
  inline const ::std::string& severparam() const;
  inline void set_severparam(const ::std::string& value);
  inline void set_severparam(const char* value);
  inline void set_severparam(const char* value, size_t size);
  inline ::std::string* mutable_severparam();
  inline ::std::string* release_severparam();
  inline void set_allocated_severparam(::std::string* severparam);

  // optional int64 openReward = 6;
  inline bool has_openreward() const;
  inline void clear_openreward();
  static const int kOpenRewardFieldNumber = 6;
  inline ::google::protobuf::int64 openreward() const;
  inline void set_openreward(::google::protobuf::int64 value);

  // optional int64 dailyReward = 7;
  inline bool has_dailyreward() const;
  inline void clear_dailyreward();
  static const int kDailyRewardFieldNumber = 7;
  inline ::google::protobuf::int64 dailyreward() const;
  inline void set_dailyreward(::google::protobuf::int64 value);

  // optional int32 resourceLimit = 8;
  inline bool has_resourcelimit() const;
  inline void clear_resourcelimit();
  static const int kResourceLimitFieldNumber = 8;
  inline ::google::protobuf::int32 resourcelimit() const;
  inline void set_resourcelimit(::google::protobuf::int32 value);

  // optional int64 skillid = 9;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 9;
  inline ::google::protobuf::int64 skillid() const;
  inline void set_skillid(::google::protobuf::int64 value);

  // optional string privilege_id = 10;
  inline bool has_privilege_id() const;
  inline void clear_privilege_id();
  static const int kPrivilegeIdFieldNumber = 10;
  inline const ::std::string& privilege_id() const;
  inline void set_privilege_id(const ::std::string& value);
  inline void set_privilege_id(const char* value);
  inline void set_privilege_id(const char* value, size_t size);
  inline ::std::string* mutable_privilege_id();
  inline ::std::string* release_privilege_id();
  inline void set_allocated_privilege_id(::std::string* privilege_id);

  // @@protoc_insertion_point(class_scope:proto_ff.privilegeprivilege)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_showtype();
  inline void clear_has_showtype();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_severparam();
  inline void clear_has_severparam();
  inline void set_has_openreward();
  inline void clear_has_openreward();
  inline void set_has_dailyreward();
  inline void clear_has_dailyreward();
  inline void set_has_resourcelimit();
  inline void clear_has_resourcelimit();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_privilege_id();
  inline void clear_has_privilege_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 showtype_;
  ::google::protobuf::int32 type_;
  ::std::string* severparam_;
  ::google::protobuf::int64 openreward_;
  ::google::protobuf::int32 param_;
  ::google::protobuf::int32 resourcelimit_;
  ::google::protobuf::int64 dailyreward_;
  ::google::protobuf::int64 skillid_;
  ::std::string* privilege_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_privilege_2eproto();
  friend void protobuf_AssignDesc_privilege_2eproto();
  friend void protobuf_ShutdownFile_privilege_2eproto();

  void InitAsDefaultInstance();
  static privilegeprivilege* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_privilegeprivilege : public ::google::protobuf::Message {
 public:
  Sheet_privilegeprivilege();
  virtual ~Sheet_privilegeprivilege();

  Sheet_privilegeprivilege(const Sheet_privilegeprivilege& from);

  inline Sheet_privilegeprivilege& operator=(const Sheet_privilegeprivilege& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_privilegeprivilege& default_instance();

  void Swap(Sheet_privilegeprivilege* other);

  // implements Message ----------------------------------------------

  Sheet_privilegeprivilege* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_privilegeprivilege& from);
  void MergeFrom(const Sheet_privilegeprivilege& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.privilegeprivilege privilegeprivilege_List = 1;
  inline int privilegeprivilege_list_size() const;
  inline void clear_privilegeprivilege_list();
  static const int kPrivilegeprivilegeListFieldNumber = 1;
  inline const ::proto_ff::privilegeprivilege& privilegeprivilege_list(int index) const;
  inline ::proto_ff::privilegeprivilege* mutable_privilegeprivilege_list(int index);
  inline ::proto_ff::privilegeprivilege* add_privilegeprivilege_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::privilegeprivilege >&
      privilegeprivilege_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::privilegeprivilege >*
      mutable_privilegeprivilege_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_privilegeprivilege)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::privilegeprivilege > privilegeprivilege_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_privilege_2eproto();
  friend void protobuf_AssignDesc_privilege_2eproto();
  friend void protobuf_ShutdownFile_privilege_2eproto();

  void InitAsDefaultInstance();
  static Sheet_privilegeprivilege* default_instance_;
};
// ===================================================================


// ===================================================================

// privilegeprivilege

// optional int64 id = 1;
inline bool privilegeprivilege::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void privilegeprivilege::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void privilegeprivilege::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void privilegeprivilege::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 privilegeprivilege::id() const {
  return id_;
}
inline void privilegeprivilege::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 showType = 2;
inline bool privilegeprivilege::has_showtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void privilegeprivilege::set_has_showtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void privilegeprivilege::clear_has_showtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void privilegeprivilege::clear_showtype() {
  showtype_ = 0;
  clear_has_showtype();
}
inline ::google::protobuf::int32 privilegeprivilege::showtype() const {
  return showtype_;
}
inline void privilegeprivilege::set_showtype(::google::protobuf::int32 value) {
  set_has_showtype();
  showtype_ = value;
}

// optional int32 type = 3;
inline bool privilegeprivilege::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void privilegeprivilege::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void privilegeprivilege::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void privilegeprivilege::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 privilegeprivilege::type() const {
  return type_;
}
inline void privilegeprivilege::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 param = 4;
inline bool privilegeprivilege::has_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void privilegeprivilege::set_has_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void privilegeprivilege::clear_has_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void privilegeprivilege::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 privilegeprivilege::param() const {
  return param_;
}
inline void privilegeprivilege::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// optional string severParam = 5;
inline bool privilegeprivilege::has_severparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void privilegeprivilege::set_has_severparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void privilegeprivilege::clear_has_severparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void privilegeprivilege::clear_severparam() {
  if (severparam_ != &::google::protobuf::internal::kEmptyString) {
    severparam_->clear();
  }
  clear_has_severparam();
}
inline const ::std::string& privilegeprivilege::severparam() const {
  return *severparam_;
}
inline void privilegeprivilege::set_severparam(const ::std::string& value) {
  set_has_severparam();
  if (severparam_ == &::google::protobuf::internal::kEmptyString) {
    severparam_ = new ::std::string;
  }
  severparam_->assign(value);
}
inline void privilegeprivilege::set_severparam(const char* value) {
  set_has_severparam();
  if (severparam_ == &::google::protobuf::internal::kEmptyString) {
    severparam_ = new ::std::string;
  }
  severparam_->assign(value);
}
inline void privilegeprivilege::set_severparam(const char* value, size_t size) {
  set_has_severparam();
  if (severparam_ == &::google::protobuf::internal::kEmptyString) {
    severparam_ = new ::std::string;
  }
  severparam_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* privilegeprivilege::mutable_severparam() {
  set_has_severparam();
  if (severparam_ == &::google::protobuf::internal::kEmptyString) {
    severparam_ = new ::std::string;
  }
  return severparam_;
}
inline ::std::string* privilegeprivilege::release_severparam() {
  clear_has_severparam();
  if (severparam_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = severparam_;
    severparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void privilegeprivilege::set_allocated_severparam(::std::string* severparam) {
  if (severparam_ != &::google::protobuf::internal::kEmptyString) {
    delete severparam_;
  }
  if (severparam) {
    set_has_severparam();
    severparam_ = severparam;
  } else {
    clear_has_severparam();
    severparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 openReward = 6;
inline bool privilegeprivilege::has_openreward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void privilegeprivilege::set_has_openreward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void privilegeprivilege::clear_has_openreward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void privilegeprivilege::clear_openreward() {
  openreward_ = GOOGLE_LONGLONG(0);
  clear_has_openreward();
}
inline ::google::protobuf::int64 privilegeprivilege::openreward() const {
  return openreward_;
}
inline void privilegeprivilege::set_openreward(::google::protobuf::int64 value) {
  set_has_openreward();
  openreward_ = value;
}

// optional int64 dailyReward = 7;
inline bool privilegeprivilege::has_dailyreward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void privilegeprivilege::set_has_dailyreward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void privilegeprivilege::clear_has_dailyreward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void privilegeprivilege::clear_dailyreward() {
  dailyreward_ = GOOGLE_LONGLONG(0);
  clear_has_dailyreward();
}
inline ::google::protobuf::int64 privilegeprivilege::dailyreward() const {
  return dailyreward_;
}
inline void privilegeprivilege::set_dailyreward(::google::protobuf::int64 value) {
  set_has_dailyreward();
  dailyreward_ = value;
}

// optional int32 resourceLimit = 8;
inline bool privilegeprivilege::has_resourcelimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void privilegeprivilege::set_has_resourcelimit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void privilegeprivilege::clear_has_resourcelimit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void privilegeprivilege::clear_resourcelimit() {
  resourcelimit_ = 0;
  clear_has_resourcelimit();
}
inline ::google::protobuf::int32 privilegeprivilege::resourcelimit() const {
  return resourcelimit_;
}
inline void privilegeprivilege::set_resourcelimit(::google::protobuf::int32 value) {
  set_has_resourcelimit();
  resourcelimit_ = value;
}

// optional int64 skillid = 9;
inline bool privilegeprivilege::has_skillid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void privilegeprivilege::set_has_skillid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void privilegeprivilege::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void privilegeprivilege::clear_skillid() {
  skillid_ = GOOGLE_LONGLONG(0);
  clear_has_skillid();
}
inline ::google::protobuf::int64 privilegeprivilege::skillid() const {
  return skillid_;
}
inline void privilegeprivilege::set_skillid(::google::protobuf::int64 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional string privilege_id = 10;
inline bool privilegeprivilege::has_privilege_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void privilegeprivilege::set_has_privilege_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void privilegeprivilege::clear_has_privilege_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void privilegeprivilege::clear_privilege_id() {
  if (privilege_id_ != &::google::protobuf::internal::kEmptyString) {
    privilege_id_->clear();
  }
  clear_has_privilege_id();
}
inline const ::std::string& privilegeprivilege::privilege_id() const {
  return *privilege_id_;
}
inline void privilegeprivilege::set_privilege_id(const ::std::string& value) {
  set_has_privilege_id();
  if (privilege_id_ == &::google::protobuf::internal::kEmptyString) {
    privilege_id_ = new ::std::string;
  }
  privilege_id_->assign(value);
}
inline void privilegeprivilege::set_privilege_id(const char* value) {
  set_has_privilege_id();
  if (privilege_id_ == &::google::protobuf::internal::kEmptyString) {
    privilege_id_ = new ::std::string;
  }
  privilege_id_->assign(value);
}
inline void privilegeprivilege::set_privilege_id(const char* value, size_t size) {
  set_has_privilege_id();
  if (privilege_id_ == &::google::protobuf::internal::kEmptyString) {
    privilege_id_ = new ::std::string;
  }
  privilege_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* privilegeprivilege::mutable_privilege_id() {
  set_has_privilege_id();
  if (privilege_id_ == &::google::protobuf::internal::kEmptyString) {
    privilege_id_ = new ::std::string;
  }
  return privilege_id_;
}
inline ::std::string* privilegeprivilege::release_privilege_id() {
  clear_has_privilege_id();
  if (privilege_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = privilege_id_;
    privilege_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void privilegeprivilege::set_allocated_privilege_id(::std::string* privilege_id) {
  if (privilege_id_ != &::google::protobuf::internal::kEmptyString) {
    delete privilege_id_;
  }
  if (privilege_id) {
    set_has_privilege_id();
    privilege_id_ = privilege_id;
  } else {
    clear_has_privilege_id();
    privilege_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_privilegeprivilege

// repeated .proto_ff.privilegeprivilege privilegeprivilege_List = 1;
inline int Sheet_privilegeprivilege::privilegeprivilege_list_size() const {
  return privilegeprivilege_list_.size();
}
inline void Sheet_privilegeprivilege::clear_privilegeprivilege_list() {
  privilegeprivilege_list_.Clear();
}
inline const ::proto_ff::privilegeprivilege& Sheet_privilegeprivilege::privilegeprivilege_list(int index) const {
  return privilegeprivilege_list_.Get(index);
}
inline ::proto_ff::privilegeprivilege* Sheet_privilegeprivilege::mutable_privilegeprivilege_list(int index) {
  return privilegeprivilege_list_.Mutable(index);
}
inline ::proto_ff::privilegeprivilege* Sheet_privilegeprivilege::add_privilegeprivilege_list() {
  return privilegeprivilege_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::privilegeprivilege >&
Sheet_privilegeprivilege::privilegeprivilege_list() const {
  return privilegeprivilege_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::privilegeprivilege >*
Sheet_privilegeprivilege::mutable_privilegeprivilege_list() {
  return &privilegeprivilege_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_privilege_2eproto__INCLUDED
