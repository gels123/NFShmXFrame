// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamicexp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dynamicexp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* dynamicexpdynamicexpdynamicDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dynamicexpdynamicexpdynamicDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* dynamicexpdynamicexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dynamicexpdynamicexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_dynamicexpdynamicexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_dynamicexpdynamicexp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dynamicexp_2eproto() {
  protobuf_AddDesc_dynamicexp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dynamicexp.proto");
  GOOGLE_CHECK(file != NULL);
  dynamicexpdynamicexpdynamicDesc_descriptor_ = file->message_type(0);
  static const int dynamicexpdynamicexpdynamicDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dynamicexpdynamicexpdynamicDesc, exp_),
  };
  dynamicexpdynamicexpdynamicDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dynamicexpdynamicexpdynamicDesc_descriptor_,
      dynamicexpdynamicexpdynamicDesc::default_instance_,
      dynamicexpdynamicexpdynamicDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dynamicexpdynamicexpdynamicDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dynamicexpdynamicexpdynamicDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dynamicexpdynamicexpdynamicDesc));
  dynamicexpdynamicexp_descriptor_ = file->message_type(1);
  static const int dynamicexpdynamicexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dynamicexpdynamicexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dynamicexpdynamicexp, dynamic_),
  };
  dynamicexpdynamicexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dynamicexpdynamicexp_descriptor_,
      dynamicexpdynamicexp::default_instance_,
      dynamicexpdynamicexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dynamicexpdynamicexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dynamicexpdynamicexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dynamicexpdynamicexp));
  Sheet_dynamicexpdynamicexp_descriptor_ = file->message_type(2);
  static const int Sheet_dynamicexpdynamicexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dynamicexpdynamicexp, dynamicexpdynamicexp_list_),
  };
  Sheet_dynamicexpdynamicexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_dynamicexpdynamicexp_descriptor_,
      Sheet_dynamicexpdynamicexp::default_instance_,
      Sheet_dynamicexpdynamicexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dynamicexpdynamicexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dynamicexpdynamicexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_dynamicexpdynamicexp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dynamicexp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dynamicexpdynamicexpdynamicDesc_descriptor_, &dynamicexpdynamicexpdynamicDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dynamicexpdynamicexp_descriptor_, &dynamicexpdynamicexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_dynamicexpdynamicexp_descriptor_, &Sheet_dynamicexpdynamicexp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dynamicexp_2eproto() {
  delete dynamicexpdynamicexpdynamicDesc::default_instance_;
  delete dynamicexpdynamicexpdynamicDesc_reflection_;
  delete dynamicexpdynamicexp::default_instance_;
  delete dynamicexpdynamicexp_reflection_;
  delete Sheet_dynamicexpdynamicexp::default_instance_;
  delete Sheet_dynamicexpdynamicexp_reflection_;
}

void protobuf_AddDesc_dynamicexp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020dynamicexp.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\":\n\037dynamicexpdynamicexpdynam"
    "icDesc\022\027\n\003exp\030\001 \001(\003B\n\302\377\024\006\347\273\217\351\252\214\"\200\001\n\024dyna"
    "micexpdynamicexp\022\034\n\002lv\030\001 \001(\005B\020\302\377\024\014\350\247\222\350\211\262"
    "\347\255\211\347\272\247\022J\n\007dynamic\030\002 \003(\0132).proto_ff.dynam"
    "icexpdynamicexpdynamicDescB\016\302\377\024\006\345\212\250\346\200\201\210\301"
    "\024\005\"f\n\032Sheet_dynamicexpdynamicexp\022H\n\031dyna"
    "micexpdynamicexp_List\030\001 \003(\0132\036.proto_ff.d"
    "ynamicexpdynamicexpB\005\210\301\024\304\014", 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dynamicexp.proto", &protobuf_RegisterTypes);
  dynamicexpdynamicexpdynamicDesc::default_instance_ = new dynamicexpdynamicexpdynamicDesc();
  dynamicexpdynamicexp::default_instance_ = new dynamicexpdynamicexp();
  Sheet_dynamicexpdynamicexp::default_instance_ = new Sheet_dynamicexpdynamicexp();
  dynamicexpdynamicexpdynamicDesc::default_instance_->InitAsDefaultInstance();
  dynamicexpdynamicexp::default_instance_->InitAsDefaultInstance();
  Sheet_dynamicexpdynamicexp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dynamicexp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dynamicexp_2eproto {
  StaticDescriptorInitializer_dynamicexp_2eproto() {
    protobuf_AddDesc_dynamicexp_2eproto();
  }
} static_descriptor_initializer_dynamicexp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dynamicexpdynamicexpdynamicDesc::kExpFieldNumber;
#endif  // !_MSC_VER

dynamicexpdynamicexpdynamicDesc::dynamicexpdynamicexpdynamicDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dynamicexpdynamicexpdynamicDesc::InitAsDefaultInstance() {
}

dynamicexpdynamicexpdynamicDesc::dynamicexpdynamicexpdynamicDesc(const dynamicexpdynamicexpdynamicDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dynamicexpdynamicexpdynamicDesc::SharedCtor() {
  _cached_size_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dynamicexpdynamicexpdynamicDesc::~dynamicexpdynamicexpdynamicDesc() {
  SharedDtor();
}

void dynamicexpdynamicexpdynamicDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dynamicexpdynamicexpdynamicDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dynamicexpdynamicexpdynamicDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dynamicexpdynamicexpdynamicDesc_descriptor_;
}

const dynamicexpdynamicexpdynamicDesc& dynamicexpdynamicexpdynamicDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dynamicexp_2eproto();
  return *default_instance_;
}

dynamicexpdynamicexpdynamicDesc* dynamicexpdynamicexpdynamicDesc::default_instance_ = NULL;

dynamicexpdynamicexpdynamicDesc* dynamicexpdynamicexpdynamicDesc::New() const {
  return new dynamicexpdynamicexpdynamicDesc;
}

void dynamicexpdynamicexpdynamicDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dynamicexpdynamicexpdynamicDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dynamicexpdynamicexpdynamicDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dynamicexpdynamicexpdynamicDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dynamicexpdynamicexpdynamicDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dynamicexpdynamicexpdynamicDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dynamicexpdynamicexpdynamicDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dynamicexpdynamicexpdynamicDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dynamicexpdynamicexpdynamicDesc::MergeFrom(const dynamicexpdynamicexpdynamicDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dynamicexpdynamicexpdynamicDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dynamicexpdynamicexpdynamicDesc::CopyFrom(const dynamicexpdynamicexpdynamicDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dynamicexpdynamicexpdynamicDesc::IsInitialized() const {

  return true;
}

void dynamicexpdynamicexpdynamicDesc::Swap(dynamicexpdynamicexpdynamicDesc* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dynamicexpdynamicexpdynamicDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dynamicexpdynamicexpdynamicDesc_descriptor_;
  metadata.reflection = dynamicexpdynamicexpdynamicDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dynamicexpdynamicexp::kLvFieldNumber;
const int dynamicexpdynamicexp::kDynamicFieldNumber;
#endif  // !_MSC_VER

dynamicexpdynamicexp::dynamicexpdynamicexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dynamicexpdynamicexp::InitAsDefaultInstance() {
}

dynamicexpdynamicexp::dynamicexpdynamicexp(const dynamicexpdynamicexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dynamicexpdynamicexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dynamicexpdynamicexp::~dynamicexpdynamicexp() {
  SharedDtor();
}

void dynamicexpdynamicexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dynamicexpdynamicexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dynamicexpdynamicexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dynamicexpdynamicexp_descriptor_;
}

const dynamicexpdynamicexp& dynamicexpdynamicexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dynamicexp_2eproto();
  return *default_instance_;
}

dynamicexpdynamicexp* dynamicexpdynamicexp::default_instance_ = NULL;

dynamicexpdynamicexp* dynamicexpdynamicexp::New() const {
  return new dynamicexpdynamicexp;
}

void dynamicexpdynamicexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
  }
  dynamic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dynamicexpdynamicexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dynamic;
        break;
      }

      // repeated .proto_ff.dynamicexpdynamicexpdynamicDesc dynamic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dynamic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dynamic;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dynamicexpdynamicexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // repeated .proto_ff.dynamicexpdynamicexpdynamicDesc dynamic = 2;
  for (int i = 0; i < this->dynamic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dynamic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dynamicexpdynamicexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // repeated .proto_ff.dynamicexpdynamicexpdynamicDesc dynamic = 2;
  for (int i = 0; i < this->dynamic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dynamic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dynamicexpdynamicexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  // repeated .proto_ff.dynamicexpdynamicexpdynamicDesc dynamic = 2;
  total_size += 1 * this->dynamic_size();
  for (int i = 0; i < this->dynamic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dynamic(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dynamicexpdynamicexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dynamicexpdynamicexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dynamicexpdynamicexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dynamicexpdynamicexp::MergeFrom(const dynamicexpdynamicexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  dynamic_.MergeFrom(from.dynamic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dynamicexpdynamicexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dynamicexpdynamicexp::CopyFrom(const dynamicexpdynamicexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dynamicexpdynamicexp::IsInitialized() const {

  return true;
}

void dynamicexpdynamicexp::Swap(dynamicexpdynamicexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    dynamic_.Swap(&other->dynamic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dynamicexpdynamicexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dynamicexpdynamicexp_descriptor_;
  metadata.reflection = dynamicexpdynamicexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_dynamicexpdynamicexp::kDynamicexpdynamicexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_dynamicexpdynamicexp::Sheet_dynamicexpdynamicexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_dynamicexpdynamicexp::InitAsDefaultInstance() {
}

Sheet_dynamicexpdynamicexp::Sheet_dynamicexpdynamicexp(const Sheet_dynamicexpdynamicexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_dynamicexpdynamicexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_dynamicexpdynamicexp::~Sheet_dynamicexpdynamicexp() {
  SharedDtor();
}

void Sheet_dynamicexpdynamicexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_dynamicexpdynamicexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_dynamicexpdynamicexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_dynamicexpdynamicexp_descriptor_;
}

const Sheet_dynamicexpdynamicexp& Sheet_dynamicexpdynamicexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dynamicexp_2eproto();
  return *default_instance_;
}

Sheet_dynamicexpdynamicexp* Sheet_dynamicexpdynamicexp::default_instance_ = NULL;

Sheet_dynamicexpdynamicexp* Sheet_dynamicexpdynamicexp::New() const {
  return new Sheet_dynamicexpdynamicexp;
}

void Sheet_dynamicexpdynamicexp::Clear() {
  dynamicexpdynamicexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_dynamicexpdynamicexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.dynamicexpdynamicexp dynamicexpdynamicexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dynamicexpdynamicexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamicexpdynamicexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dynamicexpdynamicexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_dynamicexpdynamicexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.dynamicexpdynamicexp dynamicexpdynamicexp_List = 1;
  for (int i = 0; i < this->dynamicexpdynamicexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dynamicexpdynamicexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_dynamicexpdynamicexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.dynamicexpdynamicexp dynamicexpdynamicexp_List = 1;
  for (int i = 0; i < this->dynamicexpdynamicexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dynamicexpdynamicexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_dynamicexpdynamicexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.dynamicexpdynamicexp dynamicexpdynamicexp_List = 1;
  total_size += 1 * this->dynamicexpdynamicexp_list_size();
  for (int i = 0; i < this->dynamicexpdynamicexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dynamicexpdynamicexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_dynamicexpdynamicexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_dynamicexpdynamicexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_dynamicexpdynamicexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_dynamicexpdynamicexp::MergeFrom(const Sheet_dynamicexpdynamicexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  dynamicexpdynamicexp_list_.MergeFrom(from.dynamicexpdynamicexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_dynamicexpdynamicexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_dynamicexpdynamicexp::CopyFrom(const Sheet_dynamicexpdynamicexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_dynamicexpdynamicexp::IsInitialized() const {

  return true;
}

void Sheet_dynamicexpdynamicexp::Swap(Sheet_dynamicexpdynamicexp* other) {
  if (other != this) {
    dynamicexpdynamicexp_list_.Swap(&other->dynamicexpdynamicexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_dynamicexpdynamicexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_dynamicexpdynamicexp_descriptor_;
  metadata.reflection = Sheet_dynamicexpdynamicexp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
