// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskdynamic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taskdynamic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* taskdynamictaskdynamic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taskdynamictaskdynamic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_taskdynamictaskdynamic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_taskdynamictaskdynamic_reflection_ = NULL;
const ::google::protobuf::Descriptor* taskdynamictaskcomcond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taskdynamictaskcomcond_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_taskdynamictaskcomcond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_taskdynamictaskcomcond_reflection_ = NULL;
const ::google::protobuf::Descriptor* taskdynamictasktext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taskdynamictasktext_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_taskdynamictasktext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_taskdynamictasktext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_taskdynamic_2eproto() {
  protobuf_AddDesc_taskdynamic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "taskdynamic.proto");
  GOOGLE_CHECK(file != NULL);
  taskdynamictaskdynamic_descriptor_ = file->message_type(0);
  static const int taskdynamictaskdynamic_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, minlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, maxlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, rececount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, idlist_),
  };
  taskdynamictaskdynamic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taskdynamictaskdynamic_descriptor_,
      taskdynamictaskdynamic::default_instance_,
      taskdynamictaskdynamic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskdynamic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taskdynamictaskdynamic));
  Sheet_taskdynamictaskdynamic_descriptor_ = file->message_type(1);
  static const int Sheet_taskdynamictaskdynamic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictaskdynamic, taskdynamictaskdynamic_list_),
  };
  Sheet_taskdynamictaskdynamic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_taskdynamictaskdynamic_descriptor_,
      Sheet_taskdynamictaskdynamic::default_instance_,
      Sheet_taskdynamictaskdynamic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictaskdynamic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictaskdynamic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_taskdynamictaskdynamic));
  taskdynamictaskcomcond_descriptor_ = file->message_type(2);
  static const int taskdynamictaskcomcond_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, comcondid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, comcondtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, param5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, comcondrandomvalue_),
  };
  taskdynamictaskcomcond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taskdynamictaskcomcond_descriptor_,
      taskdynamictaskcomcond::default_instance_,
      taskdynamictaskcomcond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictaskcomcond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taskdynamictaskcomcond));
  Sheet_taskdynamictaskcomcond_descriptor_ = file->message_type(3);
  static const int Sheet_taskdynamictaskcomcond_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictaskcomcond, taskdynamictaskcomcond_list_),
  };
  Sheet_taskdynamictaskcomcond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_taskdynamictaskcomcond_descriptor_,
      Sheet_taskdynamictaskcomcond::default_instance_,
      Sheet_taskdynamictaskcomcond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictaskcomcond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictaskcomcond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_taskdynamictaskcomcond));
  taskdynamictasktext_descriptor_ = file->message_type(4);
  static const int taskdynamictasktext_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictasktext, textid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictasktext, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictasktext, comcondtype_),
  };
  taskdynamictasktext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taskdynamictasktext_descriptor_,
      taskdynamictasktext::default_instance_,
      taskdynamictasktext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictasktext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskdynamictasktext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taskdynamictasktext));
  Sheet_taskdynamictasktext_descriptor_ = file->message_type(5);
  static const int Sheet_taskdynamictasktext_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictasktext, taskdynamictasktext_list_),
  };
  Sheet_taskdynamictasktext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_taskdynamictasktext_descriptor_,
      Sheet_taskdynamictasktext::default_instance_,
      Sheet_taskdynamictasktext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictasktext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_taskdynamictasktext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_taskdynamictasktext));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_taskdynamic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taskdynamictaskdynamic_descriptor_, &taskdynamictaskdynamic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_taskdynamictaskdynamic_descriptor_, &Sheet_taskdynamictaskdynamic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taskdynamictaskcomcond_descriptor_, &taskdynamictaskcomcond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_taskdynamictaskcomcond_descriptor_, &Sheet_taskdynamictaskcomcond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taskdynamictasktext_descriptor_, &taskdynamictasktext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_taskdynamictasktext_descriptor_, &Sheet_taskdynamictasktext::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_taskdynamic_2eproto() {
  delete taskdynamictaskdynamic::default_instance_;
  delete taskdynamictaskdynamic_reflection_;
  delete Sheet_taskdynamictaskdynamic::default_instance_;
  delete Sheet_taskdynamictaskdynamic_reflection_;
  delete taskdynamictaskcomcond::default_instance_;
  delete taskdynamictaskcomcond_reflection_;
  delete Sheet_taskdynamictaskcomcond::default_instance_;
  delete Sheet_taskdynamictaskcomcond_reflection_;
  delete taskdynamictasktext::default_instance_;
  delete taskdynamictasktext_reflection_;
  delete Sheet_taskdynamictasktext::default_instance_;
  delete Sheet_taskdynamictasktext_reflection_;
}

void protobuf_AddDesc_taskdynamic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021taskdynamic.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"\215\002\n\026taskdynamictaskdynamic\022"
    "\026\n\006taskID\030\001 \001(\003B\006\302\377\024\002id\022$\n\006remark\030\002 \001(\tB"
    "\024\302\377\024\014\347\255\226\345\210\222\345\244\207\346\263\250\220\301\024 \022\"\n\010taskType\030\003 \001(\005B"
    "\020\302\377\024\014\344\273\273\345\212\241\347\261\273\345\236\213\022\037\n\005minlv\030\004 \001(\005B\020\302\377\024\014\346\234"
    "\200\344\275\216\347\255\211\347\272\247\022\037\n\005maxlv\030\005 \001(\005B\020\302\377\024\014\346\234\200\351\253\230\347\255\211"
    "\347\272\247\022&\n\treceCount\030\006 \001(\005B\023\302\377\024\017\345\217\257\346\216\245\345\217\226\346\225\260"
    "\351\207\217\022\'\n\006idList\030\007 \001(\tB\027\302\377\024\016\346\212\275\345\217\226id\345\210\227\350\241\250\220"
    "\301\024\263\001\"k\n\034Sheet_taskdynamictaskdynamic\022K\n\033"
    "taskdynamictaskdynamic_List\030\001 \003(\0132 .prot"
    "o_ff.taskdynamictaskdynamicB\004\210\301\024\177\"\306\002\n\026ta"
    "skdynamictaskcomcond\022\037\n\tcomcondID\030\001 \001(\003B"
    "\014\302\377\024\010\345\256\214\346\210\220id\022%\n\013comcondType\030\002 \001(\005B\020\302\377\024\014"
    "\346\235\241\344\273\266\347\261\273\345\236\213\022!\n\006param1\030\003 \001(\003B\021\302\377\024\r\346\235\241\344\273\266"
    "\345\217\202\346\225\260a\022!\n\006param2\030\004 \001(\003B\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225"
    "\260b\022!\n\006param3\030\005 \001(\003B\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225\260c\022!\n"
    "\006param4\030\006 \001(\003B\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225\260d\022!\n\006para"
    "m5\030\007 \001(\003B\021\302\377\024\r\346\235\241\344\273\266\345\217\202\346\225\260e\0225\n\022comcondRa"
    "ndomValue\030\010 \001(\005B\031\302\377\024\025\345\256\214\346\210\220\346\235\241\344\273\266\351\232\217\346\234\272\345"
    "\200\274\"l\n\034Sheet_taskdynamictaskcomcond\022L\n\033ta"
    "skdynamictaskcomcond_List\030\001 \003(\0132 .proto_"
    "ff.taskdynamictaskcomcondB\005\210\301\024\266\001\"\210\001\n\023tas"
    "kdynamictasktext\022\034\n\006textID\030\001 \001(\003B\014\302\377\024\010\346\226"
    "\207\346\234\254id\022&\n\010taskType\030\002 \001(\tB\024\302\377\024\014\344\273\273\345\212\241\347\261\273\345"
    "\236\213\220\301\024 \022+\n\013comcondType\030\003 \001(\005B\026\302\377\024\022\345\256\214\346\210\220\346"
    "\235\241\344\273\266\347\261\273\345\236\213\"b\n\031Sheet_taskdynamictasktext"
    "\022E\n\030taskdynamictasktext_List\030\001 \003(\0132\035.pro"
    "to_ff.taskdynamictasktextB\004\210\301\024l", 1111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taskdynamic.proto", &protobuf_RegisterTypes);
  taskdynamictaskdynamic::default_instance_ = new taskdynamictaskdynamic();
  Sheet_taskdynamictaskdynamic::default_instance_ = new Sheet_taskdynamictaskdynamic();
  taskdynamictaskcomcond::default_instance_ = new taskdynamictaskcomcond();
  Sheet_taskdynamictaskcomcond::default_instance_ = new Sheet_taskdynamictaskcomcond();
  taskdynamictasktext::default_instance_ = new taskdynamictasktext();
  Sheet_taskdynamictasktext::default_instance_ = new Sheet_taskdynamictasktext();
  taskdynamictaskdynamic::default_instance_->InitAsDefaultInstance();
  Sheet_taskdynamictaskdynamic::default_instance_->InitAsDefaultInstance();
  taskdynamictaskcomcond::default_instance_->InitAsDefaultInstance();
  Sheet_taskdynamictaskcomcond::default_instance_->InitAsDefaultInstance();
  taskdynamictasktext::default_instance_->InitAsDefaultInstance();
  Sheet_taskdynamictasktext::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_taskdynamic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_taskdynamic_2eproto {
  StaticDescriptorInitializer_taskdynamic_2eproto() {
    protobuf_AddDesc_taskdynamic_2eproto();
  }
} static_descriptor_initializer_taskdynamic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int taskdynamictaskdynamic::kTaskIDFieldNumber;
const int taskdynamictaskdynamic::kRemarkFieldNumber;
const int taskdynamictaskdynamic::kTaskTypeFieldNumber;
const int taskdynamictaskdynamic::kMinlvFieldNumber;
const int taskdynamictaskdynamic::kMaxlvFieldNumber;
const int taskdynamictaskdynamic::kReceCountFieldNumber;
const int taskdynamictaskdynamic::kIdListFieldNumber;
#endif  // !_MSC_VER

taskdynamictaskdynamic::taskdynamictaskdynamic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taskdynamictaskdynamic::InitAsDefaultInstance() {
}

taskdynamictaskdynamic::taskdynamictaskdynamic(const taskdynamictaskdynamic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taskdynamictaskdynamic::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_LONGLONG(0);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tasktype_ = 0;
  minlv_ = 0;
  maxlv_ = 0;
  rececount_ = 0;
  idlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taskdynamictaskdynamic::~taskdynamictaskdynamic() {
  SharedDtor();
}

void taskdynamictaskdynamic::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (idlist_ != &::google::protobuf::internal::kEmptyString) {
    delete idlist_;
  }
  if (this != default_instance_) {
  }
}

void taskdynamictaskdynamic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taskdynamictaskdynamic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taskdynamictaskdynamic_descriptor_;
}

const taskdynamictaskdynamic& taskdynamictaskdynamic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskdynamic_2eproto();
  return *default_instance_;
}

taskdynamictaskdynamic* taskdynamictaskdynamic::default_instance_ = NULL;

taskdynamictaskdynamic* taskdynamictaskdynamic::New() const {
  return new taskdynamictaskdynamic;
}

void taskdynamictaskdynamic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_LONGLONG(0);
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
    tasktype_ = 0;
    minlv_ = 0;
    maxlv_ = 0;
    rececount_ = 0;
    if (has_idlist()) {
      if (idlist_ != &::google::protobuf::internal::kEmptyString) {
        idlist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taskdynamictaskdynamic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remark;
        break;
      }

      // optional string remark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskType;
        break;
      }

      // optional int32 taskType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minlv;
        break;
      }

      // optional int32 minlv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlv_)));
          set_has_minlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxlv;
        break;
      }

      // optional int32 maxlv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlv_)));
          set_has_maxlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_receCount;
        break;
      }

      // optional int32 receCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rececount_)));
          set_has_rececount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_idList;
        break;
      }

      // optional string idList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idlist().data(), this->idlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taskdynamictaskdynamic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taskid(), output);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->remark(), output);
  }

  // optional int32 taskType = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tasktype(), output);
  }

  // optional int32 minlv = 4;
  if (has_minlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minlv(), output);
  }

  // optional int32 maxlv = 5;
  if (has_maxlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxlv(), output);
  }

  // optional int32 receCount = 6;
  if (has_rececount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rececount(), output);
  }

  // optional string idList = 7;
  if (has_idlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idlist().data(), this->idlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->idlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taskdynamictaskdynamic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taskid(), target);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->remark(), target);
  }

  // optional int32 taskType = 3;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tasktype(), target);
  }

  // optional int32 minlv = 4;
  if (has_minlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minlv(), target);
  }

  // optional int32 maxlv = 5;
  if (has_maxlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxlv(), target);
  }

  // optional int32 receCount = 6;
  if (has_rececount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rececount(), target);
  }

  // optional string idList = 7;
  if (has_idlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idlist().data(), this->idlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->idlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taskdynamictaskdynamic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }

    // optional string remark = 2;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional int32 taskType = 3;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }

    // optional int32 minlv = 4;
    if (has_minlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlv());
    }

    // optional int32 maxlv = 5;
    if (has_maxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlv());
    }

    // optional int32 receCount = 6;
    if (has_rececount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rececount());
    }

    // optional string idList = 7;
    if (has_idlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taskdynamictaskdynamic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taskdynamictaskdynamic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taskdynamictaskdynamic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taskdynamictaskdynamic::MergeFrom(const taskdynamictaskdynamic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_minlv()) {
      set_minlv(from.minlv());
    }
    if (from.has_maxlv()) {
      set_maxlv(from.maxlv());
    }
    if (from.has_rececount()) {
      set_rececount(from.rececount());
    }
    if (from.has_idlist()) {
      set_idlist(from.idlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taskdynamictaskdynamic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskdynamictaskdynamic::CopyFrom(const taskdynamictaskdynamic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskdynamictaskdynamic::IsInitialized() const {

  return true;
}

void taskdynamictaskdynamic::Swap(taskdynamictaskdynamic* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(remark_, other->remark_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(minlv_, other->minlv_);
    std::swap(maxlv_, other->maxlv_);
    std::swap(rececount_, other->rececount_);
    std::swap(idlist_, other->idlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taskdynamictaskdynamic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taskdynamictaskdynamic_descriptor_;
  metadata.reflection = taskdynamictaskdynamic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_taskdynamictaskdynamic::kTaskdynamictaskdynamicListFieldNumber;
#endif  // !_MSC_VER

Sheet_taskdynamictaskdynamic::Sheet_taskdynamictaskdynamic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_taskdynamictaskdynamic::InitAsDefaultInstance() {
}

Sheet_taskdynamictaskdynamic::Sheet_taskdynamictaskdynamic(const Sheet_taskdynamictaskdynamic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_taskdynamictaskdynamic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_taskdynamictaskdynamic::~Sheet_taskdynamictaskdynamic() {
  SharedDtor();
}

void Sheet_taskdynamictaskdynamic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_taskdynamictaskdynamic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_taskdynamictaskdynamic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_taskdynamictaskdynamic_descriptor_;
}

const Sheet_taskdynamictaskdynamic& Sheet_taskdynamictaskdynamic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskdynamic_2eproto();
  return *default_instance_;
}

Sheet_taskdynamictaskdynamic* Sheet_taskdynamictaskdynamic::default_instance_ = NULL;

Sheet_taskdynamictaskdynamic* Sheet_taskdynamictaskdynamic::New() const {
  return new Sheet_taskdynamictaskdynamic;
}

void Sheet_taskdynamictaskdynamic::Clear() {
  taskdynamictaskdynamic_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_taskdynamictaskdynamic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.taskdynamictaskdynamic taskdynamictaskdynamic_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskdynamictaskdynamic_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskdynamictaskdynamic_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskdynamictaskdynamic_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_taskdynamictaskdynamic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.taskdynamictaskdynamic taskdynamictaskdynamic_List = 1;
  for (int i = 0; i < this->taskdynamictaskdynamic_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskdynamictaskdynamic_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_taskdynamictaskdynamic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.taskdynamictaskdynamic taskdynamictaskdynamic_List = 1;
  for (int i = 0; i < this->taskdynamictaskdynamic_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskdynamictaskdynamic_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_taskdynamictaskdynamic::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.taskdynamictaskdynamic taskdynamictaskdynamic_List = 1;
  total_size += 1 * this->taskdynamictaskdynamic_list_size();
  for (int i = 0; i < this->taskdynamictaskdynamic_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskdynamictaskdynamic_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_taskdynamictaskdynamic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_taskdynamictaskdynamic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_taskdynamictaskdynamic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_taskdynamictaskdynamic::MergeFrom(const Sheet_taskdynamictaskdynamic& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskdynamictaskdynamic_list_.MergeFrom(from.taskdynamictaskdynamic_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_taskdynamictaskdynamic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_taskdynamictaskdynamic::CopyFrom(const Sheet_taskdynamictaskdynamic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_taskdynamictaskdynamic::IsInitialized() const {

  return true;
}

void Sheet_taskdynamictaskdynamic::Swap(Sheet_taskdynamictaskdynamic* other) {
  if (other != this) {
    taskdynamictaskdynamic_list_.Swap(&other->taskdynamictaskdynamic_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_taskdynamictaskdynamic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_taskdynamictaskdynamic_descriptor_;
  metadata.reflection = Sheet_taskdynamictaskdynamic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taskdynamictaskcomcond::kComcondIDFieldNumber;
const int taskdynamictaskcomcond::kComcondTypeFieldNumber;
const int taskdynamictaskcomcond::kParam1FieldNumber;
const int taskdynamictaskcomcond::kParam2FieldNumber;
const int taskdynamictaskcomcond::kParam3FieldNumber;
const int taskdynamictaskcomcond::kParam4FieldNumber;
const int taskdynamictaskcomcond::kParam5FieldNumber;
const int taskdynamictaskcomcond::kComcondRandomValueFieldNumber;
#endif  // !_MSC_VER

taskdynamictaskcomcond::taskdynamictaskcomcond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taskdynamictaskcomcond::InitAsDefaultInstance() {
}

taskdynamictaskcomcond::taskdynamictaskcomcond(const taskdynamictaskcomcond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taskdynamictaskcomcond::SharedCtor() {
  _cached_size_ = 0;
  comcondid_ = GOOGLE_LONGLONG(0);
  comcondtype_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  param2_ = GOOGLE_LONGLONG(0);
  param3_ = GOOGLE_LONGLONG(0);
  param4_ = GOOGLE_LONGLONG(0);
  param5_ = GOOGLE_LONGLONG(0);
  comcondrandomvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taskdynamictaskcomcond::~taskdynamictaskcomcond() {
  SharedDtor();
}

void taskdynamictaskcomcond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taskdynamictaskcomcond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taskdynamictaskcomcond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taskdynamictaskcomcond_descriptor_;
}

const taskdynamictaskcomcond& taskdynamictaskcomcond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskdynamic_2eproto();
  return *default_instance_;
}

taskdynamictaskcomcond* taskdynamictaskcomcond::default_instance_ = NULL;

taskdynamictaskcomcond* taskdynamictaskcomcond::New() const {
  return new taskdynamictaskcomcond;
}

void taskdynamictaskcomcond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    comcondid_ = GOOGLE_LONGLONG(0);
    comcondtype_ = 0;
    param1_ = GOOGLE_LONGLONG(0);
    param2_ = GOOGLE_LONGLONG(0);
    param3_ = GOOGLE_LONGLONG(0);
    param4_ = GOOGLE_LONGLONG(0);
    param5_ = GOOGLE_LONGLONG(0);
    comcondrandomvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taskdynamictaskcomcond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 comcondID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comcondid_)));
          set_has_comcondid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_comcondType;
        break;
      }

      // optional int32 comcondType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comcondType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comcondtype_)));
          set_has_comcondtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param2;
        break;
      }

      // optional int64 param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param3;
        break;
      }

      // optional int64 param3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param4;
        break;
      }

      // optional int64 param4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_param5;
        break;
      }

      // optional int64 param5 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param5_)));
          set_has_param5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_comcondRandomValue;
        break;
      }

      // optional int32 comcondRandomValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comcondRandomValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comcondrandomvalue_)));
          set_has_comcondrandomvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taskdynamictaskcomcond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 comcondID = 1;
  if (has_comcondid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->comcondid(), output);
  }

  // optional int32 comcondType = 2;
  if (has_comcondtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->comcondtype(), output);
  }

  // optional int64 param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->param1(), output);
  }

  // optional int64 param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param2(), output);
  }

  // optional int64 param3 = 5;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param3(), output);
  }

  // optional int64 param4 = 6;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->param4(), output);
  }

  // optional int64 param5 = 7;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->param5(), output);
  }

  // optional int32 comcondRandomValue = 8;
  if (has_comcondrandomvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->comcondrandomvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taskdynamictaskcomcond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 comcondID = 1;
  if (has_comcondid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->comcondid(), target);
  }

  // optional int32 comcondType = 2;
  if (has_comcondtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->comcondtype(), target);
  }

  // optional int64 param1 = 3;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->param1(), target);
  }

  // optional int64 param2 = 4;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param2(), target);
  }

  // optional int64 param3 = 5;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param3(), target);
  }

  // optional int64 param4 = 6;
  if (has_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->param4(), target);
  }

  // optional int64 param5 = 7;
  if (has_param5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->param5(), target);
  }

  // optional int32 comcondRandomValue = 8;
  if (has_comcondrandomvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->comcondrandomvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taskdynamictaskcomcond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 comcondID = 1;
    if (has_comcondid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comcondid());
    }

    // optional int32 comcondType = 2;
    if (has_comcondtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comcondtype());
    }

    // optional int64 param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

    // optional int64 param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param2());
    }

    // optional int64 param3 = 5;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param3());
    }

    // optional int64 param4 = 6;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param4());
    }

    // optional int64 param5 = 7;
    if (has_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param5());
    }

    // optional int32 comcondRandomValue = 8;
    if (has_comcondrandomvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comcondrandomvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taskdynamictaskcomcond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taskdynamictaskcomcond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taskdynamictaskcomcond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taskdynamictaskcomcond::MergeFrom(const taskdynamictaskcomcond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comcondid()) {
      set_comcondid(from.comcondid());
    }
    if (from.has_comcondtype()) {
      set_comcondtype(from.comcondtype());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
    if (from.has_comcondrandomvalue()) {
      set_comcondrandomvalue(from.comcondrandomvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taskdynamictaskcomcond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskdynamictaskcomcond::CopyFrom(const taskdynamictaskcomcond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskdynamictaskcomcond::IsInitialized() const {

  return true;
}

void taskdynamictaskcomcond::Swap(taskdynamictaskcomcond* other) {
  if (other != this) {
    std::swap(comcondid_, other->comcondid_);
    std::swap(comcondtype_, other->comcondtype_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(comcondrandomvalue_, other->comcondrandomvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taskdynamictaskcomcond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taskdynamictaskcomcond_descriptor_;
  metadata.reflection = taskdynamictaskcomcond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_taskdynamictaskcomcond::kTaskdynamictaskcomcondListFieldNumber;
#endif  // !_MSC_VER

Sheet_taskdynamictaskcomcond::Sheet_taskdynamictaskcomcond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_taskdynamictaskcomcond::InitAsDefaultInstance() {
}

Sheet_taskdynamictaskcomcond::Sheet_taskdynamictaskcomcond(const Sheet_taskdynamictaskcomcond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_taskdynamictaskcomcond::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_taskdynamictaskcomcond::~Sheet_taskdynamictaskcomcond() {
  SharedDtor();
}

void Sheet_taskdynamictaskcomcond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_taskdynamictaskcomcond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_taskdynamictaskcomcond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_taskdynamictaskcomcond_descriptor_;
}

const Sheet_taskdynamictaskcomcond& Sheet_taskdynamictaskcomcond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskdynamic_2eproto();
  return *default_instance_;
}

Sheet_taskdynamictaskcomcond* Sheet_taskdynamictaskcomcond::default_instance_ = NULL;

Sheet_taskdynamictaskcomcond* Sheet_taskdynamictaskcomcond::New() const {
  return new Sheet_taskdynamictaskcomcond;
}

void Sheet_taskdynamictaskcomcond::Clear() {
  taskdynamictaskcomcond_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_taskdynamictaskcomcond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.taskdynamictaskcomcond taskdynamictaskcomcond_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskdynamictaskcomcond_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskdynamictaskcomcond_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskdynamictaskcomcond_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_taskdynamictaskcomcond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.taskdynamictaskcomcond taskdynamictaskcomcond_List = 1;
  for (int i = 0; i < this->taskdynamictaskcomcond_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskdynamictaskcomcond_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_taskdynamictaskcomcond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.taskdynamictaskcomcond taskdynamictaskcomcond_List = 1;
  for (int i = 0; i < this->taskdynamictaskcomcond_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskdynamictaskcomcond_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_taskdynamictaskcomcond::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.taskdynamictaskcomcond taskdynamictaskcomcond_List = 1;
  total_size += 1 * this->taskdynamictaskcomcond_list_size();
  for (int i = 0; i < this->taskdynamictaskcomcond_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskdynamictaskcomcond_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_taskdynamictaskcomcond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_taskdynamictaskcomcond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_taskdynamictaskcomcond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_taskdynamictaskcomcond::MergeFrom(const Sheet_taskdynamictaskcomcond& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskdynamictaskcomcond_list_.MergeFrom(from.taskdynamictaskcomcond_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_taskdynamictaskcomcond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_taskdynamictaskcomcond::CopyFrom(const Sheet_taskdynamictaskcomcond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_taskdynamictaskcomcond::IsInitialized() const {

  return true;
}

void Sheet_taskdynamictaskcomcond::Swap(Sheet_taskdynamictaskcomcond* other) {
  if (other != this) {
    taskdynamictaskcomcond_list_.Swap(&other->taskdynamictaskcomcond_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_taskdynamictaskcomcond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_taskdynamictaskcomcond_descriptor_;
  metadata.reflection = Sheet_taskdynamictaskcomcond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taskdynamictasktext::kTextIDFieldNumber;
const int taskdynamictasktext::kTaskTypeFieldNumber;
const int taskdynamictasktext::kComcondTypeFieldNumber;
#endif  // !_MSC_VER

taskdynamictasktext::taskdynamictasktext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taskdynamictasktext::InitAsDefaultInstance() {
}

taskdynamictasktext::taskdynamictasktext(const taskdynamictasktext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taskdynamictasktext::SharedCtor() {
  _cached_size_ = 0;
  textid_ = GOOGLE_LONGLONG(0);
  tasktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comcondtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taskdynamictasktext::~taskdynamictasktext() {
  SharedDtor();
}

void taskdynamictasktext::SharedDtor() {
  if (tasktype_ != &::google::protobuf::internal::kEmptyString) {
    delete tasktype_;
  }
  if (this != default_instance_) {
  }
}

void taskdynamictasktext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taskdynamictasktext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taskdynamictasktext_descriptor_;
}

const taskdynamictasktext& taskdynamictasktext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskdynamic_2eproto();
  return *default_instance_;
}

taskdynamictasktext* taskdynamictasktext::default_instance_ = NULL;

taskdynamictasktext* taskdynamictasktext::New() const {
  return new taskdynamictasktext;
}

void taskdynamictasktext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    textid_ = GOOGLE_LONGLONG(0);
    if (has_tasktype()) {
      if (tasktype_ != &::google::protobuf::internal::kEmptyString) {
        tasktype_->clear();
      }
    }
    comcondtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taskdynamictasktext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 textID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &textid_)));
          set_has_textid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_taskType;
        break;
      }

      // optional string taskType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tasktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tasktype().data(), this->tasktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_comcondType;
        break;
      }

      // optional int32 comcondType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comcondType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comcondtype_)));
          set_has_comcondtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taskdynamictasktext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 textID = 1;
  if (has_textid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->textid(), output);
  }

  // optional string taskType = 2;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tasktype().data(), this->tasktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tasktype(), output);
  }

  // optional int32 comcondType = 3;
  if (has_comcondtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comcondtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taskdynamictasktext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 textID = 1;
  if (has_textid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->textid(), target);
  }

  // optional string taskType = 2;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tasktype().data(), this->tasktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tasktype(), target);
  }

  // optional int32 comcondType = 3;
  if (has_comcondtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->comcondtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taskdynamictasktext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 textID = 1;
    if (has_textid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->textid());
    }

    // optional string taskType = 2;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tasktype());
    }

    // optional int32 comcondType = 3;
    if (has_comcondtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comcondtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taskdynamictasktext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taskdynamictasktext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taskdynamictasktext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taskdynamictasktext::MergeFrom(const taskdynamictasktext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_textid()) {
      set_textid(from.textid());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_comcondtype()) {
      set_comcondtype(from.comcondtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taskdynamictasktext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskdynamictasktext::CopyFrom(const taskdynamictasktext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskdynamictasktext::IsInitialized() const {

  return true;
}

void taskdynamictasktext::Swap(taskdynamictasktext* other) {
  if (other != this) {
    std::swap(textid_, other->textid_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(comcondtype_, other->comcondtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taskdynamictasktext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taskdynamictasktext_descriptor_;
  metadata.reflection = taskdynamictasktext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_taskdynamictasktext::kTaskdynamictasktextListFieldNumber;
#endif  // !_MSC_VER

Sheet_taskdynamictasktext::Sheet_taskdynamictasktext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_taskdynamictasktext::InitAsDefaultInstance() {
}

Sheet_taskdynamictasktext::Sheet_taskdynamictasktext(const Sheet_taskdynamictasktext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_taskdynamictasktext::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_taskdynamictasktext::~Sheet_taskdynamictasktext() {
  SharedDtor();
}

void Sheet_taskdynamictasktext::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_taskdynamictasktext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_taskdynamictasktext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_taskdynamictasktext_descriptor_;
}

const Sheet_taskdynamictasktext& Sheet_taskdynamictasktext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskdynamic_2eproto();
  return *default_instance_;
}

Sheet_taskdynamictasktext* Sheet_taskdynamictasktext::default_instance_ = NULL;

Sheet_taskdynamictasktext* Sheet_taskdynamictasktext::New() const {
  return new Sheet_taskdynamictasktext;
}

void Sheet_taskdynamictasktext::Clear() {
  taskdynamictasktext_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_taskdynamictasktext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.taskdynamictasktext taskdynamictasktext_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskdynamictasktext_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskdynamictasktext_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskdynamictasktext_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_taskdynamictasktext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.taskdynamictasktext taskdynamictasktext_List = 1;
  for (int i = 0; i < this->taskdynamictasktext_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskdynamictasktext_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_taskdynamictasktext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.taskdynamictasktext taskdynamictasktext_List = 1;
  for (int i = 0; i < this->taskdynamictasktext_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskdynamictasktext_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_taskdynamictasktext::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.taskdynamictasktext taskdynamictasktext_List = 1;
  total_size += 1 * this->taskdynamictasktext_list_size();
  for (int i = 0; i < this->taskdynamictasktext_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskdynamictasktext_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_taskdynamictasktext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_taskdynamictasktext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_taskdynamictasktext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_taskdynamictasktext::MergeFrom(const Sheet_taskdynamictasktext& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskdynamictasktext_list_.MergeFrom(from.taskdynamictasktext_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_taskdynamictasktext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_taskdynamictasktext::CopyFrom(const Sheet_taskdynamictasktext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_taskdynamictasktext::IsInitialized() const {

  return true;
}

void Sheet_taskdynamictasktext::Swap(Sheet_taskdynamictasktext* other) {
  if (other != this) {
    taskdynamictasktext_list_.Swap(&other->taskdynamictasktext_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_taskdynamictasktext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_taskdynamictasktext_descriptor_;
  metadata.reflection = Sheet_taskdynamictasktext_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
