// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Assist.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Assist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* AssistInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HurtRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HurtRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAssistPoolList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAssistPoolList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRoleAssist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRoleAssist_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistHelpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistHelpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHelpDst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHelpDst_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistExitHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistExitHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistExitHelpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistExitHelpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAssistCmpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAssistCmpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistThankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistThankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistThankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistThankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAssistThank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAssistThank_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHelpHurtRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHelpHurtRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBossHurtRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBossHurtRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBossHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBossHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBossHelpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBossHelpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistRecvGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistRecvGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistRecvGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistRecvGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistRecvThankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistRecvThankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistRecvThankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistRecvThankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySendHelpState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySendHelpState_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBossGoBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBossGoBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CSynAssistReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CSynAssistReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CAssistHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CAssistHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LAssistCancelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LAssistCancelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LAssistAckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LAssistAckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LAssistRmvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LAssistRmvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CAssistThankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CAssistThankReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Assist_2eproto() {
  protobuf_AddDesc_Assist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Assist.proto");
  GOOGLE_CHECK(file != NULL);
  AssistInfo_descriptor_ = file->message_type(0);
  static const int AssistInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, time_),
  };
  AssistInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistInfo_descriptor_,
      AssistInfo::default_instance_,
      AssistInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistInfo));
  HurtRankInfo_descriptor_ = file->message_type(1);
  static const int HurtRankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, teamid_),
  };
  HurtRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HurtRankInfo_descriptor_,
      HurtRankInfo::default_instance_,
      HurtRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HurtRankInfo));
  NotifyAssistPoolList_descriptor_ = file->message_type(2);
  static const int NotifyAssistPoolList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistPoolList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistPoolList, infos_),
  };
  NotifyAssistPoolList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAssistPoolList_descriptor_,
      NotifyAssistPoolList::default_instance_,
      NotifyAssistPoolList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistPoolList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistPoolList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAssistPoolList));
  NotifyRoleAssist_descriptor_ = file->message_type(3);
  static const int NotifyRoleAssist_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, helpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, sendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, recvsendgiftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, recvhelpgiftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, rewardids_),
  };
  NotifyRoleAssist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRoleAssist_descriptor_,
      NotifyRoleAssist::default_instance_,
      NotifyRoleAssist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRoleAssist));
  AssistHelpReq_descriptor_ = file->message_type(4);
  static const int AssistHelpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpReq, sendercid_),
  };
  AssistHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistHelpReq_descriptor_,
      AssistHelpReq::default_instance_,
      AssistHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistHelpReq));
  AssistHelpRsp_descriptor_ = file->message_type(5);
  static const int AssistHelpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpRsp, sendercid_),
  };
  AssistHelpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistHelpRsp_descriptor_,
      AssistHelpRsp::default_instance_,
      AssistHelpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistHelpRsp));
  NotifyHelpDst_descriptor_ = file->message_type(6);
  static const int NotifyHelpDst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, reason_),
  };
  NotifyHelpDst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHelpDst_descriptor_,
      NotifyHelpDst::default_instance_,
      NotifyHelpDst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHelpDst));
  AssistExitHelpReq_descriptor_ = file->message_type(7);
  static const int AssistExitHelpReq_offsets_[1] = {
  };
  AssistExitHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistExitHelpReq_descriptor_,
      AssistExitHelpReq::default_instance_,
      AssistExitHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistExitHelpReq));
  AssistExitHelpRsp_descriptor_ = file->message_type(8);
  static const int AssistExitHelpRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpRsp, ret_),
  };
  AssistExitHelpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistExitHelpRsp_descriptor_,
      AssistExitHelpRsp::default_instance_,
      AssistExitHelpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistExitHelpRsp));
  NotifyAssistCmpt_descriptor_ = file->message_type(9);
  static const int NotifyAssistCmpt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistCmpt, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistCmpt, bossid_),
  };
  NotifyAssistCmpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAssistCmpt_descriptor_,
      NotifyAssistCmpt::default_instance_,
      NotifyAssistCmpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistCmpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistCmpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAssistCmpt));
  AssistThankReq_descriptor_ = file->message_type(10);
  static const int AssistThankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankReq, id_),
  };
  AssistThankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistThankReq_descriptor_,
      AssistThankReq::default_instance_,
      AssistThankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistThankReq));
  AssistThankRsp_descriptor_ = file->message_type(11);
  static const int AssistThankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankRsp, id_),
  };
  AssistThankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistThankRsp_descriptor_,
      AssistThankRsp::default_instance_,
      AssistThankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistThankRsp));
  NotifyAssistThank_descriptor_ = file->message_type(12);
  static const int NotifyAssistThank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, role_),
  };
  NotifyAssistThank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAssistThank_descriptor_,
      NotifyAssistThank::default_instance_,
      NotifyAssistThank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAssistThank));
  NotifyHelpHurtRank_descriptor_ = file->message_type(13);
  static const int NotifyHelpHurtRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpHurtRank, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpHurtRank, bossid_),
  };
  NotifyHelpHurtRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHelpHurtRank_descriptor_,
      NotifyHelpHurtRank::default_instance_,
      NotifyHelpHurtRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpHurtRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpHurtRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHelpHurtRank));
  NotifyBossHurtRank_descriptor_ = file->message_type(14);
  static const int NotifyBossHurtRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossHurtRank, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossHurtRank, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossHurtRank, myhurt_),
  };
  NotifyBossHurtRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBossHurtRank_descriptor_,
      NotifyBossHurtRank::default_instance_,
      NotifyBossHurtRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossHurtRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossHurtRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBossHurtRank));
  SendBossHelpReq_descriptor_ = file->message_type(15);
  static const int SendBossHelpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpReq, bossid_),
  };
  SendBossHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBossHelpReq_descriptor_,
      SendBossHelpReq::default_instance_,
      SendBossHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBossHelpReq));
  SendBossHelpRsp_descriptor_ = file->message_type(16);
  static const int SendBossHelpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpRsp, bossid_),
  };
  SendBossHelpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBossHelpRsp_descriptor_,
      SendBossHelpRsp::default_instance_,
      SendBossHelpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBossHelpRsp));
  AssistRecvGiftReq_descriptor_ = file->message_type(17);
  static const int AssistRecvGiftReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvGiftReq, id_),
  };
  AssistRecvGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistRecvGiftReq_descriptor_,
      AssistRecvGiftReq::default_instance_,
      AssistRecvGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistRecvGiftReq));
  AssistRecvGiftRsp_descriptor_ = file->message_type(18);
  static const int AssistRecvGiftRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvGiftRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvGiftRsp, id_),
  };
  AssistRecvGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistRecvGiftRsp_descriptor_,
      AssistRecvGiftRsp::default_instance_,
      AssistRecvGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistRecvGiftRsp));
  AssistRecvThankReq_descriptor_ = file->message_type(19);
  static const int AssistRecvThankReq_offsets_[1] = {
  };
  AssistRecvThankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistRecvThankReq_descriptor_,
      AssistRecvThankReq::default_instance_,
      AssistRecvThankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvThankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvThankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistRecvThankReq));
  AssistRecvThankRsp_descriptor_ = file->message_type(20);
  static const int AssistRecvThankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvThankRsp, ret_),
  };
  AssistRecvThankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistRecvThankRsp_descriptor_,
      AssistRecvThankRsp::default_instance_,
      AssistRecvThankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvThankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecvThankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistRecvThankRsp));
  NotifySendHelpState_descriptor_ = file->message_type(21);
  static const int NotifySendHelpState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySendHelpState, helpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySendHelpState, sendhelpstate_),
  };
  NotifySendHelpState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySendHelpState_descriptor_,
      NotifySendHelpState::default_instance_,
      NotifySendHelpState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySendHelpState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySendHelpState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySendHelpState));
  NotifyBossGoBack_descriptor_ = file->message_type(22);
  static const int NotifyBossGoBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossGoBack, bossid_),
  };
  NotifyBossGoBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBossGoBack_descriptor_,
      NotifyBossGoBack::default_instance_,
      NotifyBossGoBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossGoBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossGoBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBossGoBack));
  AssistRecord_descriptor_ = file->message_type(23);
  static const int AssistRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecord, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecord, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecord, helpers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecord, logicid_),
  };
  AssistRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistRecord_descriptor_,
      AssistRecord::default_instance_,
      AssistRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistRecord));
  L2CSynAssistReq_descriptor_ = file->message_type(24);
  static const int L2CSynAssistReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAssistReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAssistReq, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAssistReq, record_),
  };
  L2CSynAssistReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CSynAssistReq_descriptor_,
      L2CSynAssistReq::default_instance_,
      L2CSynAssistReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAssistReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CSynAssistReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CSynAssistReq));
  L2CAssistHelpReq_descriptor_ = file->message_type(25);
  static const int L2CAssistHelpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistHelpReq, helpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistHelpReq, sendhelpcid_),
  };
  L2CAssistHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CAssistHelpReq_descriptor_,
      L2CAssistHelpReq::default_instance_,
      L2CAssistHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CAssistHelpReq));
  C2LAssistCancelReq_descriptor_ = file->message_type(26);
  static const int C2LAssistCancelReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistCancelReq, helpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistCancelReq, sendhelpcid_),
  };
  C2LAssistCancelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LAssistCancelReq_descriptor_,
      C2LAssistCancelReq::default_instance_,
      C2LAssistCancelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistCancelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistCancelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LAssistCancelReq));
  C2LAssistAckReq_descriptor_ = file->message_type(27);
  static const int C2LAssistAckReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistAckReq, helpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistAckReq, sendhelpcid_),
  };
  C2LAssistAckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LAssistAckReq_descriptor_,
      C2LAssistAckReq::default_instance_,
      C2LAssistAckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistAckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistAckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LAssistAckReq));
  C2LAssistRmvReq_descriptor_ = file->message_type(28);
  static const int C2LAssistRmvReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistRmvReq, sendhelpcid_),
  };
  C2LAssistRmvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LAssistRmvReq_descriptor_,
      C2LAssistRmvReq::default_instance_,
      C2LAssistRmvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistRmvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LAssistRmvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LAssistRmvReq));
  L2CAssistThankReq_descriptor_ = file->message_type(29);
  static const int L2CAssistThankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistThankReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistThankReq, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistThankReq, src_),
  };
  L2CAssistThankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CAssistThankReq_descriptor_,
      L2CAssistThankReq::default_instance_,
      L2CAssistThankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistThankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CAssistThankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CAssistThankReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Assist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistInfo_descriptor_, &AssistInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HurtRankInfo_descriptor_, &HurtRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAssistPoolList_descriptor_, &NotifyAssistPoolList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRoleAssist_descriptor_, &NotifyRoleAssist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistHelpReq_descriptor_, &AssistHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistHelpRsp_descriptor_, &AssistHelpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHelpDst_descriptor_, &NotifyHelpDst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistExitHelpReq_descriptor_, &AssistExitHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistExitHelpRsp_descriptor_, &AssistExitHelpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAssistCmpt_descriptor_, &NotifyAssistCmpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistThankReq_descriptor_, &AssistThankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistThankRsp_descriptor_, &AssistThankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAssistThank_descriptor_, &NotifyAssistThank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHelpHurtRank_descriptor_, &NotifyHelpHurtRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBossHurtRank_descriptor_, &NotifyBossHurtRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBossHelpReq_descriptor_, &SendBossHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBossHelpRsp_descriptor_, &SendBossHelpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistRecvGiftReq_descriptor_, &AssistRecvGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistRecvGiftRsp_descriptor_, &AssistRecvGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistRecvThankReq_descriptor_, &AssistRecvThankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistRecvThankRsp_descriptor_, &AssistRecvThankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySendHelpState_descriptor_, &NotifySendHelpState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBossGoBack_descriptor_, &NotifyBossGoBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistRecord_descriptor_, &AssistRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CSynAssistReq_descriptor_, &L2CSynAssistReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CAssistHelpReq_descriptor_, &L2CAssistHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LAssistCancelReq_descriptor_, &C2LAssistCancelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LAssistAckReq_descriptor_, &C2LAssistAckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LAssistRmvReq_descriptor_, &C2LAssistRmvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CAssistThankReq_descriptor_, &L2CAssistThankReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Assist_2eproto() {
  delete AssistInfo::default_instance_;
  delete AssistInfo_reflection_;
  delete HurtRankInfo::default_instance_;
  delete HurtRankInfo_reflection_;
  delete NotifyAssistPoolList::default_instance_;
  delete NotifyAssistPoolList_reflection_;
  delete NotifyRoleAssist::default_instance_;
  delete NotifyRoleAssist_reflection_;
  delete AssistHelpReq::default_instance_;
  delete AssistHelpReq_reflection_;
  delete AssistHelpRsp::default_instance_;
  delete AssistHelpRsp_reflection_;
  delete NotifyHelpDst::default_instance_;
  delete NotifyHelpDst_reflection_;
  delete AssistExitHelpReq::default_instance_;
  delete AssistExitHelpReq_reflection_;
  delete AssistExitHelpRsp::default_instance_;
  delete AssistExitHelpRsp_reflection_;
  delete NotifyAssistCmpt::default_instance_;
  delete NotifyAssistCmpt_reflection_;
  delete AssistThankReq::default_instance_;
  delete AssistThankReq_reflection_;
  delete AssistThankRsp::default_instance_;
  delete AssistThankRsp_reflection_;
  delete NotifyAssistThank::default_instance_;
  delete NotifyAssistThank_reflection_;
  delete NotifyHelpHurtRank::default_instance_;
  delete NotifyHelpHurtRank_reflection_;
  delete NotifyBossHurtRank::default_instance_;
  delete NotifyBossHurtRank_reflection_;
  delete SendBossHelpReq::default_instance_;
  delete SendBossHelpReq_reflection_;
  delete SendBossHelpRsp::default_instance_;
  delete SendBossHelpRsp_reflection_;
  delete AssistRecvGiftReq::default_instance_;
  delete AssistRecvGiftReq_reflection_;
  delete AssistRecvGiftRsp::default_instance_;
  delete AssistRecvGiftRsp_reflection_;
  delete AssistRecvThankReq::default_instance_;
  delete AssistRecvThankReq_reflection_;
  delete AssistRecvThankRsp::default_instance_;
  delete AssistRecvThankRsp_reflection_;
  delete NotifySendHelpState::default_instance_;
  delete NotifySendHelpState_reflection_;
  delete NotifyBossGoBack::default_instance_;
  delete NotifyBossGoBack_reflection_;
  delete AssistRecord::default_instance_;
  delete AssistRecord_reflection_;
  delete L2CSynAssistReq::default_instance_;
  delete L2CSynAssistReq_reflection_;
  delete L2CAssistHelpReq::default_instance_;
  delete L2CAssistHelpReq_reflection_;
  delete C2LAssistCancelReq::default_instance_;
  delete C2LAssistCancelReq_reflection_;
  delete C2LAssistAckReq::default_instance_;
  delete C2LAssistAckReq_reflection_;
  delete C2LAssistRmvReq::default_instance_;
  delete C2LAssistRmvReq_reflection_;
  delete L2CAssistThankReq::default_instance_;
  delete L2CAssistThankReq_reflection_;
}

void protobuf_AddDesc_Assist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Assist.proto\022\010proto_ff\032\tCom.proto\032\017Com"
    "Define.proto\"V\n\nAssistInfo\022*\n\004role\030\001 \001(\013"
    "2\034.proto_ff.RolePlayerMiniInfo\022\016\n\006bossId"
    "\030\002 \001(\003\022\014\n\004time\030\003 \001(\005\"F\n\014HurtRankInfo\022\013\n\003"
    "cid\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\013\n\003val\030\003 \001(\003\022\016\n\006"
    "teamid\030\004 \001(\005\"I\n\024NotifyAssistPoolList\022\014\n\004"
    "type\030\001 \001(\005\022#\n\005infos\030\002 \003(\0132\024.proto_ff.Ass"
    "istInfo\"\213\001\n\020NotifyRoleAssist\022\020\n\010prestige"
    "\030\001 \001(\005\022\017\n\007helpNum\030\002 \001(\005\022\017\n\007sendNum\030\003 \001(\005"
    "\022\027\n\017recvSendGiftNum\030\004 \001(\005\022\027\n\017recvHelpGif"
    "tNum\030\005 \001(\005\022\021\n\trewardIds\030\006 \003(\005\"\"\n\rAssistH"
    "elpReq\022\021\n\tsenderCid\030\001 \001(\003\"/\n\rAssistHelpR"
    "sp\022\013\n\003ret\030\001 \001(\005\022\021\n\tsenderCid\030\002 \001(\003\"[\n\rNo"
    "tifyHelpDst\022*\n\004role\030\001 \001(\0132\034.proto_ff.Rol"
    "ePlayerMiniInfo\022\016\n\006bossId\030\002 \001(\003\022\016\n\006reaso"
    "n\030\003 \001(\005\"\023\n\021AssistExitHelpReq\" \n\021AssistEx"
    "itHelpRsp\022\013\n\003ret\030\001 \001(\005\"O\n\020NotifyAssistCm"
    "pt\022+\n\005roles\030\001 \003(\0132\034.proto_ff.RolePlayerM"
    "iniInfo\022\016\n\006bossId\030\002 \001(\003\"\034\n\016AssistThankRe"
    "q\022\n\n\002id\030\001 \001(\005\")\n\016AssistThankRsp\022\013\n\003ret\030\001"
    " \001(\005\022\n\n\002id\030\002 \001(\005\"[\n\021NotifyAssistThank\022\n\n"
    "\002id\030\001 \001(\005\022\016\n\006giftid\030\002 \001(\005\022*\n\004role\030\003 \001(\0132"
    "\034.proto_ff.RolePlayerMiniInfo\"K\n\022NotifyH"
    "elpHurtRank\022%\n\005infos\030\001 \003(\0132\026.proto_ff.Hu"
    "rtRankInfo\022\016\n\006bossId\030\002 \001(\003\"[\n\022NotifyBoss"
    "HurtRank\022%\n\005infos\030\001 \003(\0132\026.proto_ff.HurtR"
    "ankInfo\022\016\n\006bossId\030\002 \001(\003\022\016\n\006myhurt\030\003 \001(\003\""
    "!\n\017SendBossHelpReq\022\016\n\006bossId\030\001 \001(\003\".\n\017Se"
    "ndBossHelpRsp\022\013\n\003ret\030\001 \001(\005\022\016\n\006bossId\030\002 \001"
    "(\003\"\037\n\021AssistRecvGiftReq\022\n\n\002id\030\001 \001(\005\",\n\021A"
    "ssistRecvGiftRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002id\030\002 \001("
    "\005\"\024\n\022AssistRecvThankReq\"!\n\022AssistRecvTha"
    "nkRsp\022\013\n\003ret\030\001 \001(\005\"=\n\023NotifySendHelpStat"
    "e\022\017\n\007HelpNum\030\001 \001(\005\022\025\n\rSendHelpState\030\002 \001("
    "\005\"\"\n\020NotifyBossGoBack\022\016\n\006bossId\030\001 \001(\005\"[\n"
    "\014AssistRecord\022\013\n\003cid\030\001 \001(\003\022\016\n\006bossId\030\002 \001"
    "(\003\022\014\n\004time\030\003 \001(\003\022\017\n\007helpers\030\004 \003(\003\022\017\n\007log"
    "icId\030\005 \001(\005\"W\n\017L2CSynAssistReq\022\014\n\004type\030\001 "
    "\001(\005\022\016\n\006reason\030\002 \001(\005\022&\n\006record\030\003 \001(\0132\026.pr"
    "oto_ff.AssistRecord\"8\n\020L2CAssistHelpReq\022"
    "\017\n\007helpCid\030\001 \001(\003\022\023\n\013sendHelpCid\030\002 \001(\003\":\n"
    "\022C2LAssistCancelReq\022\017\n\007helpCid\030\001 \001(\003\022\023\n\013"
    "sendHelpCid\030\002 \001(\003\"7\n\017C2LAssistAckReq\022\017\n\007"
    "helpCid\030\001 \001(\003\022\023\n\013sendHelpCid\030\002 \001(\003\"&\n\017C2"
    "LAssistRmvReq\022\023\n\013sendHelpCid\030\001 \001(\003\"O\n\021L2"
    "CAssistThankReq\022\n\n\002id\030\001 \001(\005\022!\n\004pair\030\002 \003("
    "\0132\023.proto_ff.ComPair64\022\013\n\003src\030\003 \001(\003", 1875);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Assist.proto", &protobuf_RegisterTypes);
  AssistInfo::default_instance_ = new AssistInfo();
  HurtRankInfo::default_instance_ = new HurtRankInfo();
  NotifyAssistPoolList::default_instance_ = new NotifyAssistPoolList();
  NotifyRoleAssist::default_instance_ = new NotifyRoleAssist();
  AssistHelpReq::default_instance_ = new AssistHelpReq();
  AssistHelpRsp::default_instance_ = new AssistHelpRsp();
  NotifyHelpDst::default_instance_ = new NotifyHelpDst();
  AssistExitHelpReq::default_instance_ = new AssistExitHelpReq();
  AssistExitHelpRsp::default_instance_ = new AssistExitHelpRsp();
  NotifyAssistCmpt::default_instance_ = new NotifyAssistCmpt();
  AssistThankReq::default_instance_ = new AssistThankReq();
  AssistThankRsp::default_instance_ = new AssistThankRsp();
  NotifyAssistThank::default_instance_ = new NotifyAssistThank();
  NotifyHelpHurtRank::default_instance_ = new NotifyHelpHurtRank();
  NotifyBossHurtRank::default_instance_ = new NotifyBossHurtRank();
  SendBossHelpReq::default_instance_ = new SendBossHelpReq();
  SendBossHelpRsp::default_instance_ = new SendBossHelpRsp();
  AssistRecvGiftReq::default_instance_ = new AssistRecvGiftReq();
  AssistRecvGiftRsp::default_instance_ = new AssistRecvGiftRsp();
  AssistRecvThankReq::default_instance_ = new AssistRecvThankReq();
  AssistRecvThankRsp::default_instance_ = new AssistRecvThankRsp();
  NotifySendHelpState::default_instance_ = new NotifySendHelpState();
  NotifyBossGoBack::default_instance_ = new NotifyBossGoBack();
  AssistRecord::default_instance_ = new AssistRecord();
  L2CSynAssistReq::default_instance_ = new L2CSynAssistReq();
  L2CAssistHelpReq::default_instance_ = new L2CAssistHelpReq();
  C2LAssistCancelReq::default_instance_ = new C2LAssistCancelReq();
  C2LAssistAckReq::default_instance_ = new C2LAssistAckReq();
  C2LAssistRmvReq::default_instance_ = new C2LAssistRmvReq();
  L2CAssistThankReq::default_instance_ = new L2CAssistThankReq();
  AssistInfo::default_instance_->InitAsDefaultInstance();
  HurtRankInfo::default_instance_->InitAsDefaultInstance();
  NotifyAssistPoolList::default_instance_->InitAsDefaultInstance();
  NotifyRoleAssist::default_instance_->InitAsDefaultInstance();
  AssistHelpReq::default_instance_->InitAsDefaultInstance();
  AssistHelpRsp::default_instance_->InitAsDefaultInstance();
  NotifyHelpDst::default_instance_->InitAsDefaultInstance();
  AssistExitHelpReq::default_instance_->InitAsDefaultInstance();
  AssistExitHelpRsp::default_instance_->InitAsDefaultInstance();
  NotifyAssistCmpt::default_instance_->InitAsDefaultInstance();
  AssistThankReq::default_instance_->InitAsDefaultInstance();
  AssistThankRsp::default_instance_->InitAsDefaultInstance();
  NotifyAssistThank::default_instance_->InitAsDefaultInstance();
  NotifyHelpHurtRank::default_instance_->InitAsDefaultInstance();
  NotifyBossHurtRank::default_instance_->InitAsDefaultInstance();
  SendBossHelpReq::default_instance_->InitAsDefaultInstance();
  SendBossHelpRsp::default_instance_->InitAsDefaultInstance();
  AssistRecvGiftReq::default_instance_->InitAsDefaultInstance();
  AssistRecvGiftRsp::default_instance_->InitAsDefaultInstance();
  AssistRecvThankReq::default_instance_->InitAsDefaultInstance();
  AssistRecvThankRsp::default_instance_->InitAsDefaultInstance();
  NotifySendHelpState::default_instance_->InitAsDefaultInstance();
  NotifyBossGoBack::default_instance_->InitAsDefaultInstance();
  AssistRecord::default_instance_->InitAsDefaultInstance();
  L2CSynAssistReq::default_instance_->InitAsDefaultInstance();
  L2CAssistHelpReq::default_instance_->InitAsDefaultInstance();
  C2LAssistCancelReq::default_instance_->InitAsDefaultInstance();
  C2LAssistAckReq::default_instance_->InitAsDefaultInstance();
  C2LAssistRmvReq::default_instance_->InitAsDefaultInstance();
  L2CAssistThankReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Assist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Assist_2eproto {
  StaticDescriptorInitializer_Assist_2eproto() {
    protobuf_AddDesc_Assist_2eproto();
  }
} static_descriptor_initializer_Assist_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AssistInfo::kRoleFieldNumber;
const int AssistInfo::kBossIdFieldNumber;
const int AssistInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

AssistInfo::AssistInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistInfo::InitAsDefaultInstance() {
  role_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

AssistInfo::AssistInfo(const AssistInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistInfo::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  bossid_ = GOOGLE_LONGLONG(0);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistInfo::~AssistInfo() {
  SharedDtor();
}

void AssistInfo::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void AssistInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistInfo_descriptor_;
}

const AssistInfo& AssistInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistInfo* AssistInfo::default_instance_ = NULL;

AssistInfo* AssistInfo::New() const {
  return new AssistInfo;
}

void AssistInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role()) {
      if (role_ != NULL) role_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    bossid_ = GOOGLE_LONGLONG(0);
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistInfo::MergeFrom(const AssistInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      mutable_role()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.role());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistInfo::CopyFrom(const AssistInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistInfo::IsInitialized() const {

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void AssistInfo::Swap(AssistInfo* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(bossid_, other->bossid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistInfo_descriptor_;
  metadata.reflection = AssistInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HurtRankInfo::kCidFieldNumber;
const int HurtRankInfo::kNameFieldNumber;
const int HurtRankInfo::kValFieldNumber;
const int HurtRankInfo::kTeamidFieldNumber;
#endif  // !_MSC_VER

HurtRankInfo::HurtRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HurtRankInfo::InitAsDefaultInstance() {
}

HurtRankInfo::HurtRankInfo(const HurtRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HurtRankInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HurtRankInfo::~HurtRankInfo() {
  SharedDtor();
}

void HurtRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HurtRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HurtRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HurtRankInfo_descriptor_;
}

const HurtRankInfo& HurtRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

HurtRankInfo* HurtRankInfo::default_instance_ = NULL;

HurtRankInfo* HurtRankInfo::New() const {
  return new HurtRankInfo;
}

void HurtRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    val_ = GOOGLE_LONGLONG(0);
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HurtRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // optional int64 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HurtRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int64 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->val(), output);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HurtRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->val(), target);
  }

  // optional int32 teamid = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HurtRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val());
    }

    // optional int32 teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HurtRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HurtRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HurtRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HurtRankInfo::MergeFrom(const HurtRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HurtRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HurtRankInfo::CopyFrom(const HurtRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HurtRankInfo::IsInitialized() const {

  return true;
}

void HurtRankInfo::Swap(HurtRankInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(val_, other->val_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HurtRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HurtRankInfo_descriptor_;
  metadata.reflection = HurtRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAssistPoolList::kTypeFieldNumber;
const int NotifyAssistPoolList::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyAssistPoolList::NotifyAssistPoolList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAssistPoolList::InitAsDefaultInstance() {
}

NotifyAssistPoolList::NotifyAssistPoolList(const NotifyAssistPoolList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAssistPoolList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAssistPoolList::~NotifyAssistPoolList() {
  SharedDtor();
}

void NotifyAssistPoolList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAssistPoolList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAssistPoolList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAssistPoolList_descriptor_;
}

const NotifyAssistPoolList& NotifyAssistPoolList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyAssistPoolList* NotifyAssistPoolList::default_instance_ = NULL;

NotifyAssistPoolList* NotifyAssistPoolList::New() const {
  return new NotifyAssistPoolList;
}

void NotifyAssistPoolList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAssistPoolList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.AssistInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAssistPoolList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.AssistInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAssistPoolList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.AssistInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAssistPoolList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.AssistInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAssistPoolList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAssistPoolList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAssistPoolList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAssistPoolList::MergeFrom(const NotifyAssistPoolList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAssistPoolList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAssistPoolList::CopyFrom(const NotifyAssistPoolList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAssistPoolList::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyAssistPoolList::Swap(NotifyAssistPoolList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAssistPoolList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAssistPoolList_descriptor_;
  metadata.reflection = NotifyAssistPoolList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRoleAssist::kPrestigeFieldNumber;
const int NotifyRoleAssist::kHelpNumFieldNumber;
const int NotifyRoleAssist::kSendNumFieldNumber;
const int NotifyRoleAssist::kRecvSendGiftNumFieldNumber;
const int NotifyRoleAssist::kRecvHelpGiftNumFieldNumber;
const int NotifyRoleAssist::kRewardIdsFieldNumber;
#endif  // !_MSC_VER

NotifyRoleAssist::NotifyRoleAssist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRoleAssist::InitAsDefaultInstance() {
}

NotifyRoleAssist::NotifyRoleAssist(const NotifyRoleAssist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRoleAssist::SharedCtor() {
  _cached_size_ = 0;
  prestige_ = 0;
  helpnum_ = 0;
  sendnum_ = 0;
  recvsendgiftnum_ = 0;
  recvhelpgiftnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRoleAssist::~NotifyRoleAssist() {
  SharedDtor();
}

void NotifyRoleAssist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRoleAssist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRoleAssist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRoleAssist_descriptor_;
}

const NotifyRoleAssist& NotifyRoleAssist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyRoleAssist* NotifyRoleAssist::default_instance_ = NULL;

NotifyRoleAssist* NotifyRoleAssist::New() const {
  return new NotifyRoleAssist;
}

void NotifyRoleAssist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prestige_ = 0;
    helpnum_ = 0;
    sendnum_ = 0;
    recvsendgiftnum_ = 0;
    recvhelpgiftnum_ = 0;
  }
  rewardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRoleAssist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prestige = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_helpNum;
        break;
      }

      // optional int32 helpNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpnum_)));
          set_has_helpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendNum;
        break;
      }

      // optional int32 sendNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendnum_)));
          set_has_sendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recvSendGiftNum;
        break;
      }

      // optional int32 recvSendGiftNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvSendGiftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvsendgiftnum_)));
          set_has_recvsendgiftnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recvHelpGiftNum;
        break;
      }

      // optional int32 recvHelpGiftNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvHelpGiftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvhelpgiftnum_)));
          set_has_recvhelpgiftnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardIds;
        break;
      }

      // repeated int32 rewardIds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_rewardids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRoleAssist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prestige = 1;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prestige(), output);
  }

  // optional int32 helpNum = 2;
  if (has_helpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->helpnum(), output);
  }

  // optional int32 sendNum = 3;
  if (has_sendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sendnum(), output);
  }

  // optional int32 recvSendGiftNum = 4;
  if (has_recvsendgiftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recvsendgiftnum(), output);
  }

  // optional int32 recvHelpGiftNum = 5;
  if (has_recvhelpgiftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recvhelpgiftnum(), output);
  }

  // repeated int32 rewardIds = 6;
  for (int i = 0; i < this->rewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->rewardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRoleAssist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prestige = 1;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prestige(), target);
  }

  // optional int32 helpNum = 2;
  if (has_helpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->helpnum(), target);
  }

  // optional int32 sendNum = 3;
  if (has_sendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sendnum(), target);
  }

  // optional int32 recvSendGiftNum = 4;
  if (has_recvsendgiftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recvsendgiftnum(), target);
  }

  // optional int32 recvHelpGiftNum = 5;
  if (has_recvhelpgiftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recvhelpgiftnum(), target);
  }

  // repeated int32 rewardIds = 6;
  for (int i = 0; i < this->rewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->rewardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRoleAssist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prestige = 1;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestige());
    }

    // optional int32 helpNum = 2;
    if (has_helpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpnum());
    }

    // optional int32 sendNum = 3;
    if (has_sendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendnum());
    }

    // optional int32 recvSendGiftNum = 4;
    if (has_recvsendgiftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvsendgiftnum());
    }

    // optional int32 recvHelpGiftNum = 5;
    if (has_recvhelpgiftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvhelpgiftnum());
    }

  }
  // repeated int32 rewardIds = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardids(i));
    }
    total_size += 1 * this->rewardids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRoleAssist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRoleAssist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRoleAssist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRoleAssist::MergeFrom(const NotifyRoleAssist& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardids_.MergeFrom(from.rewardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_helpnum()) {
      set_helpnum(from.helpnum());
    }
    if (from.has_sendnum()) {
      set_sendnum(from.sendnum());
    }
    if (from.has_recvsendgiftnum()) {
      set_recvsendgiftnum(from.recvsendgiftnum());
    }
    if (from.has_recvhelpgiftnum()) {
      set_recvhelpgiftnum(from.recvhelpgiftnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRoleAssist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRoleAssist::CopyFrom(const NotifyRoleAssist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRoleAssist::IsInitialized() const {

  return true;
}

void NotifyRoleAssist::Swap(NotifyRoleAssist* other) {
  if (other != this) {
    std::swap(prestige_, other->prestige_);
    std::swap(helpnum_, other->helpnum_);
    std::swap(sendnum_, other->sendnum_);
    std::swap(recvsendgiftnum_, other->recvsendgiftnum_);
    std::swap(recvhelpgiftnum_, other->recvhelpgiftnum_);
    rewardids_.Swap(&other->rewardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRoleAssist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRoleAssist_descriptor_;
  metadata.reflection = NotifyRoleAssist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistHelpReq::kSenderCidFieldNumber;
#endif  // !_MSC_VER

AssistHelpReq::AssistHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistHelpReq::InitAsDefaultInstance() {
}

AssistHelpReq::AssistHelpReq(const AssistHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistHelpReq::SharedCtor() {
  _cached_size_ = 0;
  sendercid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistHelpReq::~AssistHelpReq() {
  SharedDtor();
}

void AssistHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistHelpReq_descriptor_;
}

const AssistHelpReq& AssistHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistHelpReq* AssistHelpReq::default_instance_ = NULL;

AssistHelpReq* AssistHelpReq::New() const {
  return new AssistHelpReq;
}

void AssistHelpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sendercid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 senderCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendercid_)));
          set_has_sendercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 senderCid = 1;
  if (has_sendercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sendercid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 senderCid = 1;
  if (has_sendercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sendercid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 senderCid = 1;
    if (has_sendercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendercid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistHelpReq::MergeFrom(const AssistHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendercid()) {
      set_sendercid(from.sendercid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistHelpReq::CopyFrom(const AssistHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistHelpReq::IsInitialized() const {

  return true;
}

void AssistHelpReq::Swap(AssistHelpReq* other) {
  if (other != this) {
    std::swap(sendercid_, other->sendercid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistHelpReq_descriptor_;
  metadata.reflection = AssistHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistHelpRsp::kRetFieldNumber;
const int AssistHelpRsp::kSenderCidFieldNumber;
#endif  // !_MSC_VER

AssistHelpRsp::AssistHelpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistHelpRsp::InitAsDefaultInstance() {
}

AssistHelpRsp::AssistHelpRsp(const AssistHelpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistHelpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  sendercid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistHelpRsp::~AssistHelpRsp() {
  SharedDtor();
}

void AssistHelpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistHelpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistHelpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistHelpRsp_descriptor_;
}

const AssistHelpRsp& AssistHelpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistHelpRsp* AssistHelpRsp::default_instance_ = NULL;

AssistHelpRsp* AssistHelpRsp::New() const {
  return new AssistHelpRsp;
}

void AssistHelpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    sendercid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistHelpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_senderCid;
        break;
      }

      // optional int64 senderCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendercid_)));
          set_has_sendercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistHelpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 senderCid = 2;
  if (has_sendercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sendercid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistHelpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 senderCid = 2;
  if (has_sendercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sendercid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistHelpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 senderCid = 2;
    if (has_sendercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendercid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistHelpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistHelpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistHelpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistHelpRsp::MergeFrom(const AssistHelpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sendercid()) {
      set_sendercid(from.sendercid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistHelpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistHelpRsp::CopyFrom(const AssistHelpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistHelpRsp::IsInitialized() const {

  return true;
}

void AssistHelpRsp::Swap(AssistHelpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(sendercid_, other->sendercid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistHelpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistHelpRsp_descriptor_;
  metadata.reflection = AssistHelpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHelpDst::kRoleFieldNumber;
const int NotifyHelpDst::kBossIdFieldNumber;
const int NotifyHelpDst::kReasonFieldNumber;
#endif  // !_MSC_VER

NotifyHelpDst::NotifyHelpDst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHelpDst::InitAsDefaultInstance() {
  role_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

NotifyHelpDst::NotifyHelpDst(const NotifyHelpDst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHelpDst::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  bossid_ = GOOGLE_LONGLONG(0);
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHelpDst::~NotifyHelpDst() {
  SharedDtor();
}

void NotifyHelpDst::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void NotifyHelpDst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHelpDst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHelpDst_descriptor_;
}

const NotifyHelpDst& NotifyHelpDst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyHelpDst* NotifyHelpDst::default_instance_ = NULL;

NotifyHelpDst* NotifyHelpDst::New() const {
  return new NotifyHelpDst;
}

void NotifyHelpDst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role()) {
      if (role_ != NULL) role_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    bossid_ = GOOGLE_LONGLONG(0);
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHelpDst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }

      // optional int32 reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHelpDst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  // optional int32 reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHelpDst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  // optional int32 reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHelpDst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHelpDst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHelpDst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHelpDst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHelpDst::MergeFrom(const NotifyHelpDst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      mutable_role()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.role());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHelpDst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHelpDst::CopyFrom(const NotifyHelpDst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHelpDst::IsInitialized() const {

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void NotifyHelpDst::Swap(NotifyHelpDst* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(bossid_, other->bossid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHelpDst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHelpDst_descriptor_;
  metadata.reflection = NotifyHelpDst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AssistExitHelpReq::AssistExitHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistExitHelpReq::InitAsDefaultInstance() {
}

AssistExitHelpReq::AssistExitHelpReq(const AssistExitHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistExitHelpReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistExitHelpReq::~AssistExitHelpReq() {
  SharedDtor();
}

void AssistExitHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistExitHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistExitHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistExitHelpReq_descriptor_;
}

const AssistExitHelpReq& AssistExitHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistExitHelpReq* AssistExitHelpReq::default_instance_ = NULL;

AssistExitHelpReq* AssistExitHelpReq::New() const {
  return new AssistExitHelpReq;
}

void AssistExitHelpReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistExitHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AssistExitHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistExitHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistExitHelpReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistExitHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistExitHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistExitHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistExitHelpReq::MergeFrom(const AssistExitHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistExitHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistExitHelpReq::CopyFrom(const AssistExitHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistExitHelpReq::IsInitialized() const {

  return true;
}

void AssistExitHelpReq::Swap(AssistExitHelpReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistExitHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistExitHelpReq_descriptor_;
  metadata.reflection = AssistExitHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistExitHelpRsp::kRetFieldNumber;
#endif  // !_MSC_VER

AssistExitHelpRsp::AssistExitHelpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistExitHelpRsp::InitAsDefaultInstance() {
}

AssistExitHelpRsp::AssistExitHelpRsp(const AssistExitHelpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistExitHelpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistExitHelpRsp::~AssistExitHelpRsp() {
  SharedDtor();
}

void AssistExitHelpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistExitHelpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistExitHelpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistExitHelpRsp_descriptor_;
}

const AssistExitHelpRsp& AssistExitHelpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistExitHelpRsp* AssistExitHelpRsp::default_instance_ = NULL;

AssistExitHelpRsp* AssistExitHelpRsp::New() const {
  return new AssistExitHelpRsp;
}

void AssistExitHelpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistExitHelpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistExitHelpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistExitHelpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistExitHelpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistExitHelpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistExitHelpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistExitHelpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistExitHelpRsp::MergeFrom(const AssistExitHelpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistExitHelpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistExitHelpRsp::CopyFrom(const AssistExitHelpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistExitHelpRsp::IsInitialized() const {

  return true;
}

void AssistExitHelpRsp::Swap(AssistExitHelpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistExitHelpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistExitHelpRsp_descriptor_;
  metadata.reflection = AssistExitHelpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAssistCmpt::kRolesFieldNumber;
const int NotifyAssistCmpt::kBossIdFieldNumber;
#endif  // !_MSC_VER

NotifyAssistCmpt::NotifyAssistCmpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAssistCmpt::InitAsDefaultInstance() {
}

NotifyAssistCmpt::NotifyAssistCmpt(const NotifyAssistCmpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAssistCmpt::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAssistCmpt::~NotifyAssistCmpt() {
  SharedDtor();
}

void NotifyAssistCmpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAssistCmpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAssistCmpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAssistCmpt_descriptor_;
}

const NotifyAssistCmpt& NotifyAssistCmpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyAssistCmpt* NotifyAssistCmpt::default_instance_ = NULL;

NotifyAssistCmpt* NotifyAssistCmpt::New() const {
  return new NotifyAssistCmpt;
}

void NotifyAssistCmpt::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bossid_ = GOOGLE_LONGLONG(0);
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAssistCmpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RolePlayerMiniInfo roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAssistCmpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RolePlayerMiniInfo roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAssistCmpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RolePlayerMiniInfo roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roles(i), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAssistCmpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAssistCmpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAssistCmpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAssistCmpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAssistCmpt::MergeFrom(const NotifyAssistCmpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAssistCmpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAssistCmpt::CopyFrom(const NotifyAssistCmpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAssistCmpt::IsInitialized() const {

  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyAssistCmpt::Swap(NotifyAssistCmpt* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAssistCmpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAssistCmpt_descriptor_;
  metadata.reflection = NotifyAssistCmpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistThankReq::kIdFieldNumber;
#endif  // !_MSC_VER

AssistThankReq::AssistThankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistThankReq::InitAsDefaultInstance() {
}

AssistThankReq::AssistThankReq(const AssistThankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistThankReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistThankReq::~AssistThankReq() {
  SharedDtor();
}

void AssistThankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistThankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistThankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistThankReq_descriptor_;
}

const AssistThankReq& AssistThankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistThankReq* AssistThankReq::default_instance_ = NULL;

AssistThankReq* AssistThankReq::New() const {
  return new AssistThankReq;
}

void AssistThankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistThankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistThankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistThankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistThankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistThankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistThankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistThankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistThankReq::MergeFrom(const AssistThankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistThankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistThankReq::CopyFrom(const AssistThankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistThankReq::IsInitialized() const {

  return true;
}

void AssistThankReq::Swap(AssistThankReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistThankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistThankReq_descriptor_;
  metadata.reflection = AssistThankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistThankRsp::kRetFieldNumber;
const int AssistThankRsp::kIdFieldNumber;
#endif  // !_MSC_VER

AssistThankRsp::AssistThankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistThankRsp::InitAsDefaultInstance() {
}

AssistThankRsp::AssistThankRsp(const AssistThankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistThankRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistThankRsp::~AssistThankRsp() {
  SharedDtor();
}

void AssistThankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistThankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistThankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistThankRsp_descriptor_;
}

const AssistThankRsp& AssistThankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistThankRsp* AssistThankRsp::default_instance_ = NULL;

AssistThankRsp* AssistThankRsp::New() const {
  return new AssistThankRsp;
}

void AssistThankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistThankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistThankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistThankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistThankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistThankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistThankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistThankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistThankRsp::MergeFrom(const AssistThankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistThankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistThankRsp::CopyFrom(const AssistThankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistThankRsp::IsInitialized() const {

  return true;
}

void AssistThankRsp::Swap(AssistThankRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistThankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistThankRsp_descriptor_;
  metadata.reflection = AssistThankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAssistThank::kIdFieldNumber;
const int NotifyAssistThank::kGiftidFieldNumber;
const int NotifyAssistThank::kRoleFieldNumber;
#endif  // !_MSC_VER

NotifyAssistThank::NotifyAssistThank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAssistThank::InitAsDefaultInstance() {
  role_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

NotifyAssistThank::NotifyAssistThank(const NotifyAssistThank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAssistThank::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  giftid_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAssistThank::~NotifyAssistThank() {
  SharedDtor();
}

void NotifyAssistThank::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void NotifyAssistThank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAssistThank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAssistThank_descriptor_;
}

const NotifyAssistThank& NotifyAssistThank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyAssistThank* NotifyAssistThank::default_instance_ = NULL;

NotifyAssistThank* NotifyAssistThank::New() const {
  return new NotifyAssistThank;
}

void NotifyAssistThank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    giftid_ = 0;
    if (has_role()) {
      if (role_ != NULL) role_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAssistThank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giftid;
        break;
      }

      // optional int32 giftid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // optional .proto_ff.RolePlayerMiniInfo role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAssistThank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 giftid = 2;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giftid(), output);
  }

  // optional .proto_ff.RolePlayerMiniInfo role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAssistThank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 giftid = 2;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->giftid(), target);
  }

  // optional .proto_ff.RolePlayerMiniInfo role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAssistThank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 giftid = 2;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

    // optional .proto_ff.RolePlayerMiniInfo role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAssistThank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAssistThank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAssistThank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAssistThank::MergeFrom(const NotifyAssistThank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_role()) {
      mutable_role()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAssistThank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAssistThank::CopyFrom(const NotifyAssistThank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAssistThank::IsInitialized() const {

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void NotifyAssistThank::Swap(NotifyAssistThank* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(giftid_, other->giftid_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAssistThank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAssistThank_descriptor_;
  metadata.reflection = NotifyAssistThank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHelpHurtRank::kInfosFieldNumber;
const int NotifyHelpHurtRank::kBossIdFieldNumber;
#endif  // !_MSC_VER

NotifyHelpHurtRank::NotifyHelpHurtRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHelpHurtRank::InitAsDefaultInstance() {
}

NotifyHelpHurtRank::NotifyHelpHurtRank(const NotifyHelpHurtRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHelpHurtRank::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHelpHurtRank::~NotifyHelpHurtRank() {
  SharedDtor();
}

void NotifyHelpHurtRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHelpHurtRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHelpHurtRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHelpHurtRank_descriptor_;
}

const NotifyHelpHurtRank& NotifyHelpHurtRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyHelpHurtRank* NotifyHelpHurtRank::default_instance_ = NULL;

NotifyHelpHurtRank* NotifyHelpHurtRank::New() const {
  return new NotifyHelpHurtRank;
}

void NotifyHelpHurtRank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bossid_ = GOOGLE_LONGLONG(0);
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHelpHurtRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.HurtRankInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHelpHurtRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.HurtRankInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHelpHurtRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.HurtRankInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHelpHurtRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

  }
  // repeated .proto_ff.HurtRankInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHelpHurtRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHelpHurtRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHelpHurtRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHelpHurtRank::MergeFrom(const NotifyHelpHurtRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHelpHurtRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHelpHurtRank::CopyFrom(const NotifyHelpHurtRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHelpHurtRank::IsInitialized() const {

  return true;
}

void NotifyHelpHurtRank::Swap(NotifyHelpHurtRank* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHelpHurtRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHelpHurtRank_descriptor_;
  metadata.reflection = NotifyHelpHurtRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBossHurtRank::kInfosFieldNumber;
const int NotifyBossHurtRank::kBossIdFieldNumber;
const int NotifyBossHurtRank::kMyhurtFieldNumber;
#endif  // !_MSC_VER

NotifyBossHurtRank::NotifyBossHurtRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBossHurtRank::InitAsDefaultInstance() {
}

NotifyBossHurtRank::NotifyBossHurtRank(const NotifyBossHurtRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBossHurtRank::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  myhurt_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBossHurtRank::~NotifyBossHurtRank() {
  SharedDtor();
}

void NotifyBossHurtRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBossHurtRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBossHurtRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBossHurtRank_descriptor_;
}

const NotifyBossHurtRank& NotifyBossHurtRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyBossHurtRank* NotifyBossHurtRank::default_instance_ = NULL;

NotifyBossHurtRank* NotifyBossHurtRank::New() const {
  return new NotifyBossHurtRank;
}

void NotifyBossHurtRank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bossid_ = GOOGLE_LONGLONG(0);
    myhurt_ = GOOGLE_LONGLONG(0);
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBossHurtRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.HurtRankInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myhurt;
        break;
      }

      // optional int64 myhurt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myhurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &myhurt_)));
          set_has_myhurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBossHurtRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.HurtRankInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  // optional int64 myhurt = 3;
  if (has_myhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->myhurt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBossHurtRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.HurtRankInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  // optional int64 myhurt = 3;
  if (has_myhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->myhurt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBossHurtRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int64 myhurt = 3;
    if (has_myhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->myhurt());
    }

  }
  // repeated .proto_ff.HurtRankInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBossHurtRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBossHurtRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBossHurtRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBossHurtRank::MergeFrom(const NotifyBossHurtRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_myhurt()) {
      set_myhurt(from.myhurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBossHurtRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBossHurtRank::CopyFrom(const NotifyBossHurtRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBossHurtRank::IsInitialized() const {

  return true;
}

void NotifyBossHurtRank::Swap(NotifyBossHurtRank* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(bossid_, other->bossid_);
    std::swap(myhurt_, other->myhurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBossHurtRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBossHurtRank_descriptor_;
  metadata.reflection = NotifyBossHurtRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBossHelpReq::kBossIdFieldNumber;
#endif  // !_MSC_VER

SendBossHelpReq::SendBossHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendBossHelpReq::InitAsDefaultInstance() {
}

SendBossHelpReq::SendBossHelpReq(const SendBossHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendBossHelpReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBossHelpReq::~SendBossHelpReq() {
  SharedDtor();
}

void SendBossHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendBossHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBossHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBossHelpReq_descriptor_;
}

const SendBossHelpReq& SendBossHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

SendBossHelpReq* SendBossHelpReq::default_instance_ = NULL;

SendBossHelpReq* SendBossHelpReq::New() const {
  return new SendBossHelpReq;
}

void SendBossHelpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBossHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendBossHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 bossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendBossHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 bossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendBossHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 bossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBossHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBossHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBossHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBossHelpReq::MergeFrom(const SendBossHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBossHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBossHelpReq::CopyFrom(const SendBossHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBossHelpReq::IsInitialized() const {

  return true;
}

void SendBossHelpReq::Swap(SendBossHelpReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBossHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBossHelpReq_descriptor_;
  metadata.reflection = SendBossHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBossHelpRsp::kRetFieldNumber;
const int SendBossHelpRsp::kBossIdFieldNumber;
#endif  // !_MSC_VER

SendBossHelpRsp::SendBossHelpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendBossHelpRsp::InitAsDefaultInstance() {
}

SendBossHelpRsp::SendBossHelpRsp(const SendBossHelpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendBossHelpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBossHelpRsp::~SendBossHelpRsp() {
  SharedDtor();
}

void SendBossHelpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendBossHelpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBossHelpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBossHelpRsp_descriptor_;
}

const SendBossHelpRsp& SendBossHelpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

SendBossHelpRsp* SendBossHelpRsp::default_instance_ = NULL;

SendBossHelpRsp* SendBossHelpRsp::New() const {
  return new SendBossHelpRsp;
}

void SendBossHelpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    bossid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBossHelpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendBossHelpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendBossHelpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendBossHelpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBossHelpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBossHelpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBossHelpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBossHelpRsp::MergeFrom(const SendBossHelpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBossHelpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBossHelpRsp::CopyFrom(const SendBossHelpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBossHelpRsp::IsInitialized() const {

  return true;
}

void SendBossHelpRsp::Swap(SendBossHelpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBossHelpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBossHelpRsp_descriptor_;
  metadata.reflection = SendBossHelpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistRecvGiftReq::kIdFieldNumber;
#endif  // !_MSC_VER

AssistRecvGiftReq::AssistRecvGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistRecvGiftReq::InitAsDefaultInstance() {
}

AssistRecvGiftReq::AssistRecvGiftReq(const AssistRecvGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistRecvGiftReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistRecvGiftReq::~AssistRecvGiftReq() {
  SharedDtor();
}

void AssistRecvGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistRecvGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistRecvGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistRecvGiftReq_descriptor_;
}

const AssistRecvGiftReq& AssistRecvGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistRecvGiftReq* AssistRecvGiftReq::default_instance_ = NULL;

AssistRecvGiftReq* AssistRecvGiftReq::New() const {
  return new AssistRecvGiftReq;
}

void AssistRecvGiftReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistRecvGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistRecvGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistRecvGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistRecvGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistRecvGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistRecvGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistRecvGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistRecvGiftReq::MergeFrom(const AssistRecvGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistRecvGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistRecvGiftReq::CopyFrom(const AssistRecvGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistRecvGiftReq::IsInitialized() const {

  return true;
}

void AssistRecvGiftReq::Swap(AssistRecvGiftReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistRecvGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistRecvGiftReq_descriptor_;
  metadata.reflection = AssistRecvGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistRecvGiftRsp::kRetFieldNumber;
const int AssistRecvGiftRsp::kIdFieldNumber;
#endif  // !_MSC_VER

AssistRecvGiftRsp::AssistRecvGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistRecvGiftRsp::InitAsDefaultInstance() {
}

AssistRecvGiftRsp::AssistRecvGiftRsp(const AssistRecvGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistRecvGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistRecvGiftRsp::~AssistRecvGiftRsp() {
  SharedDtor();
}

void AssistRecvGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistRecvGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistRecvGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistRecvGiftRsp_descriptor_;
}

const AssistRecvGiftRsp& AssistRecvGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistRecvGiftRsp* AssistRecvGiftRsp::default_instance_ = NULL;

AssistRecvGiftRsp* AssistRecvGiftRsp::New() const {
  return new AssistRecvGiftRsp;
}

void AssistRecvGiftRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistRecvGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistRecvGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistRecvGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistRecvGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistRecvGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistRecvGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistRecvGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistRecvGiftRsp::MergeFrom(const AssistRecvGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistRecvGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistRecvGiftRsp::CopyFrom(const AssistRecvGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistRecvGiftRsp::IsInitialized() const {

  return true;
}

void AssistRecvGiftRsp::Swap(AssistRecvGiftRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistRecvGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistRecvGiftRsp_descriptor_;
  metadata.reflection = AssistRecvGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AssistRecvThankReq::AssistRecvThankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistRecvThankReq::InitAsDefaultInstance() {
}

AssistRecvThankReq::AssistRecvThankReq(const AssistRecvThankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistRecvThankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistRecvThankReq::~AssistRecvThankReq() {
  SharedDtor();
}

void AssistRecvThankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistRecvThankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistRecvThankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistRecvThankReq_descriptor_;
}

const AssistRecvThankReq& AssistRecvThankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistRecvThankReq* AssistRecvThankReq::default_instance_ = NULL;

AssistRecvThankReq* AssistRecvThankReq::New() const {
  return new AssistRecvThankReq;
}

void AssistRecvThankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistRecvThankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AssistRecvThankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistRecvThankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistRecvThankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistRecvThankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistRecvThankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistRecvThankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistRecvThankReq::MergeFrom(const AssistRecvThankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistRecvThankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistRecvThankReq::CopyFrom(const AssistRecvThankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistRecvThankReq::IsInitialized() const {

  return true;
}

void AssistRecvThankReq::Swap(AssistRecvThankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistRecvThankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistRecvThankReq_descriptor_;
  metadata.reflection = AssistRecvThankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistRecvThankRsp::kRetFieldNumber;
#endif  // !_MSC_VER

AssistRecvThankRsp::AssistRecvThankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistRecvThankRsp::InitAsDefaultInstance() {
}

AssistRecvThankRsp::AssistRecvThankRsp(const AssistRecvThankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistRecvThankRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistRecvThankRsp::~AssistRecvThankRsp() {
  SharedDtor();
}

void AssistRecvThankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistRecvThankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistRecvThankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistRecvThankRsp_descriptor_;
}

const AssistRecvThankRsp& AssistRecvThankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistRecvThankRsp* AssistRecvThankRsp::default_instance_ = NULL;

AssistRecvThankRsp* AssistRecvThankRsp::New() const {
  return new AssistRecvThankRsp;
}

void AssistRecvThankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistRecvThankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistRecvThankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistRecvThankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistRecvThankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistRecvThankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistRecvThankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistRecvThankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistRecvThankRsp::MergeFrom(const AssistRecvThankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistRecvThankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistRecvThankRsp::CopyFrom(const AssistRecvThankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistRecvThankRsp::IsInitialized() const {

  return true;
}

void AssistRecvThankRsp::Swap(AssistRecvThankRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistRecvThankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistRecvThankRsp_descriptor_;
  metadata.reflection = AssistRecvThankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySendHelpState::kHelpNumFieldNumber;
const int NotifySendHelpState::kSendHelpStateFieldNumber;
#endif  // !_MSC_VER

NotifySendHelpState::NotifySendHelpState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySendHelpState::InitAsDefaultInstance() {
}

NotifySendHelpState::NotifySendHelpState(const NotifySendHelpState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySendHelpState::SharedCtor() {
  _cached_size_ = 0;
  helpnum_ = 0;
  sendhelpstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySendHelpState::~NotifySendHelpState() {
  SharedDtor();
}

void NotifySendHelpState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySendHelpState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySendHelpState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySendHelpState_descriptor_;
}

const NotifySendHelpState& NotifySendHelpState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifySendHelpState* NotifySendHelpState::default_instance_ = NULL;

NotifySendHelpState* NotifySendHelpState::New() const {
  return new NotifySendHelpState;
}

void NotifySendHelpState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helpnum_ = 0;
    sendhelpstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySendHelpState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HelpNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpnum_)));
          set_has_helpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SendHelpState;
        break;
      }

      // optional int32 SendHelpState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SendHelpState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendhelpstate_)));
          set_has_sendhelpstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySendHelpState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 HelpNum = 1;
  if (has_helpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->helpnum(), output);
  }

  // optional int32 SendHelpState = 2;
  if (has_sendhelpstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sendhelpstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySendHelpState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 HelpNum = 1;
  if (has_helpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->helpnum(), target);
  }

  // optional int32 SendHelpState = 2;
  if (has_sendhelpstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sendhelpstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySendHelpState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HelpNum = 1;
    if (has_helpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpnum());
    }

    // optional int32 SendHelpState = 2;
    if (has_sendhelpstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendhelpstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySendHelpState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySendHelpState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySendHelpState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySendHelpState::MergeFrom(const NotifySendHelpState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helpnum()) {
      set_helpnum(from.helpnum());
    }
    if (from.has_sendhelpstate()) {
      set_sendhelpstate(from.sendhelpstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySendHelpState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySendHelpState::CopyFrom(const NotifySendHelpState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySendHelpState::IsInitialized() const {

  return true;
}

void NotifySendHelpState::Swap(NotifySendHelpState* other) {
  if (other != this) {
    std::swap(helpnum_, other->helpnum_);
    std::swap(sendhelpstate_, other->sendhelpstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySendHelpState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySendHelpState_descriptor_;
  metadata.reflection = NotifySendHelpState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBossGoBack::kBossIdFieldNumber;
#endif  // !_MSC_VER

NotifyBossGoBack::NotifyBossGoBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBossGoBack::InitAsDefaultInstance() {
}

NotifyBossGoBack::NotifyBossGoBack(const NotifyBossGoBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBossGoBack::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBossGoBack::~NotifyBossGoBack() {
  SharedDtor();
}

void NotifyBossGoBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBossGoBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBossGoBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBossGoBack_descriptor_;
}

const NotifyBossGoBack& NotifyBossGoBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyBossGoBack* NotifyBossGoBack::default_instance_ = NULL;

NotifyBossGoBack* NotifyBossGoBack::New() const {
  return new NotifyBossGoBack;
}

void NotifyBossGoBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBossGoBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBossGoBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBossGoBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBossGoBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBossGoBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBossGoBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBossGoBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBossGoBack::MergeFrom(const NotifyBossGoBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBossGoBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBossGoBack::CopyFrom(const NotifyBossGoBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBossGoBack::IsInitialized() const {

  return true;
}

void NotifyBossGoBack::Swap(NotifyBossGoBack* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBossGoBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBossGoBack_descriptor_;
  metadata.reflection = NotifyBossGoBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistRecord::kCidFieldNumber;
const int AssistRecord::kBossIdFieldNumber;
const int AssistRecord::kTimeFieldNumber;
const int AssistRecord::kHelpersFieldNumber;
const int AssistRecord::kLogicIdFieldNumber;
#endif  // !_MSC_VER

AssistRecord::AssistRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistRecord::InitAsDefaultInstance() {
}

AssistRecord::AssistRecord(const AssistRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistRecord::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_LONGLONG(0);
  bossid_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  logicid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistRecord::~AssistRecord() {
  SharedDtor();
}

void AssistRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistRecord_descriptor_;
}

const AssistRecord& AssistRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistRecord* AssistRecord::default_instance_ = NULL;

AssistRecord* AssistRecord::New() const {
  return new AssistRecord;
}

void AssistRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_LONGLONG(0);
    bossid_ = GOOGLE_LONGLONG(0);
    time_ = GOOGLE_LONGLONG(0);
    logicid_ = 0;
  }
  helpers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_helpers;
        break;
      }

      // repeated int64 helpers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_helpers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_helpers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_helpers;
        if (input->ExpectTag(40)) goto parse_logicId;
        break;
      }

      // optional int32 logicId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cid(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // repeated int64 helpers = 4;
  for (int i = 0; i < this->helpers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->helpers(i), output);
  }

  // optional int32 logicId = 5;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cid(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // repeated int64 helpers = 4;
  for (int i = 0; i < this->helpers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->helpers(i), target);
  }

  // optional int32 logicId = 5;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 logicId = 5;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logicid());
    }

  }
  // repeated int64 helpers = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->helpers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->helpers(i));
    }
    total_size += 1 * this->helpers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistRecord::MergeFrom(const AssistRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  helpers_.MergeFrom(from.helpers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistRecord::CopyFrom(const AssistRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistRecord::IsInitialized() const {

  return true;
}

void AssistRecord::Swap(AssistRecord* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(bossid_, other->bossid_);
    std::swap(time_, other->time_);
    helpers_.Swap(&other->helpers_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistRecord_descriptor_;
  metadata.reflection = AssistRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CSynAssistReq::kTypeFieldNumber;
const int L2CSynAssistReq::kReasonFieldNumber;
const int L2CSynAssistReq::kRecordFieldNumber;
#endif  // !_MSC_VER

L2CSynAssistReq::L2CSynAssistReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CSynAssistReq::InitAsDefaultInstance() {
  record_ = const_cast< ::proto_ff::AssistRecord*>(&::proto_ff::AssistRecord::default_instance());
}

L2CSynAssistReq::L2CSynAssistReq(const L2CSynAssistReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CSynAssistReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  reason_ = 0;
  record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CSynAssistReq::~L2CSynAssistReq() {
  SharedDtor();
}

void L2CSynAssistReq::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void L2CSynAssistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CSynAssistReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CSynAssistReq_descriptor_;
}

const L2CSynAssistReq& L2CSynAssistReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

L2CSynAssistReq* L2CSynAssistReq::default_instance_ = NULL;

L2CSynAssistReq* L2CSynAssistReq::New() const {
  return new L2CSynAssistReq;
}

void L2CSynAssistReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    reason_ = 0;
    if (has_record()) {
      if (record_ != NULL) record_->::proto_ff::AssistRecord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CSynAssistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional int32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // optional .proto_ff.AssistRecord record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CSynAssistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  // optional .proto_ff.AssistRecord record = 3;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CSynAssistReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  // optional .proto_ff.AssistRecord record = 3;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CSynAssistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional .proto_ff.AssistRecord record = 3;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CSynAssistReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CSynAssistReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CSynAssistReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CSynAssistReq::MergeFrom(const L2CSynAssistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_record()) {
      mutable_record()->::proto_ff::AssistRecord::MergeFrom(from.record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CSynAssistReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CSynAssistReq::CopyFrom(const L2CSynAssistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CSynAssistReq::IsInitialized() const {

  return true;
}

void L2CSynAssistReq::Swap(L2CSynAssistReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(reason_, other->reason_);
    std::swap(record_, other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CSynAssistReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CSynAssistReq_descriptor_;
  metadata.reflection = L2CSynAssistReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CAssistHelpReq::kHelpCidFieldNumber;
const int L2CAssistHelpReq::kSendHelpCidFieldNumber;
#endif  // !_MSC_VER

L2CAssistHelpReq::L2CAssistHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CAssistHelpReq::InitAsDefaultInstance() {
}

L2CAssistHelpReq::L2CAssistHelpReq(const L2CAssistHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CAssistHelpReq::SharedCtor() {
  _cached_size_ = 0;
  helpcid_ = GOOGLE_LONGLONG(0);
  sendhelpcid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CAssistHelpReq::~L2CAssistHelpReq() {
  SharedDtor();
}

void L2CAssistHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CAssistHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CAssistHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CAssistHelpReq_descriptor_;
}

const L2CAssistHelpReq& L2CAssistHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

L2CAssistHelpReq* L2CAssistHelpReq::default_instance_ = NULL;

L2CAssistHelpReq* L2CAssistHelpReq::New() const {
  return new L2CAssistHelpReq;
}

void L2CAssistHelpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helpcid_ = GOOGLE_LONGLONG(0);
    sendhelpcid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CAssistHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 helpCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &helpcid_)));
          set_has_helpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendHelpCid;
        break;
      }

      // optional int64 sendHelpCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendHelpCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendhelpcid_)));
          set_has_sendhelpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CAssistHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 helpCid = 1;
  if (has_helpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->helpcid(), output);
  }

  // optional int64 sendHelpCid = 2;
  if (has_sendhelpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sendhelpcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CAssistHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 helpCid = 1;
  if (has_helpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->helpcid(), target);
  }

  // optional int64 sendHelpCid = 2;
  if (has_sendhelpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sendhelpcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CAssistHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 helpCid = 1;
    if (has_helpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->helpcid());
    }

    // optional int64 sendHelpCid = 2;
    if (has_sendhelpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendhelpcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CAssistHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CAssistHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CAssistHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CAssistHelpReq::MergeFrom(const L2CAssistHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helpcid()) {
      set_helpcid(from.helpcid());
    }
    if (from.has_sendhelpcid()) {
      set_sendhelpcid(from.sendhelpcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CAssistHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CAssistHelpReq::CopyFrom(const L2CAssistHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CAssistHelpReq::IsInitialized() const {

  return true;
}

void L2CAssistHelpReq::Swap(L2CAssistHelpReq* other) {
  if (other != this) {
    std::swap(helpcid_, other->helpcid_);
    std::swap(sendhelpcid_, other->sendhelpcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CAssistHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CAssistHelpReq_descriptor_;
  metadata.reflection = L2CAssistHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LAssistCancelReq::kHelpCidFieldNumber;
const int C2LAssistCancelReq::kSendHelpCidFieldNumber;
#endif  // !_MSC_VER

C2LAssistCancelReq::C2LAssistCancelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LAssistCancelReq::InitAsDefaultInstance() {
}

C2LAssistCancelReq::C2LAssistCancelReq(const C2LAssistCancelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LAssistCancelReq::SharedCtor() {
  _cached_size_ = 0;
  helpcid_ = GOOGLE_LONGLONG(0);
  sendhelpcid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LAssistCancelReq::~C2LAssistCancelReq() {
  SharedDtor();
}

void C2LAssistCancelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LAssistCancelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LAssistCancelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LAssistCancelReq_descriptor_;
}

const C2LAssistCancelReq& C2LAssistCancelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

C2LAssistCancelReq* C2LAssistCancelReq::default_instance_ = NULL;

C2LAssistCancelReq* C2LAssistCancelReq::New() const {
  return new C2LAssistCancelReq;
}

void C2LAssistCancelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helpcid_ = GOOGLE_LONGLONG(0);
    sendhelpcid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LAssistCancelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 helpCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &helpcid_)));
          set_has_helpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendHelpCid;
        break;
      }

      // optional int64 sendHelpCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendHelpCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendhelpcid_)));
          set_has_sendhelpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LAssistCancelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 helpCid = 1;
  if (has_helpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->helpcid(), output);
  }

  // optional int64 sendHelpCid = 2;
  if (has_sendhelpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sendhelpcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LAssistCancelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 helpCid = 1;
  if (has_helpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->helpcid(), target);
  }

  // optional int64 sendHelpCid = 2;
  if (has_sendhelpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sendhelpcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LAssistCancelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 helpCid = 1;
    if (has_helpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->helpcid());
    }

    // optional int64 sendHelpCid = 2;
    if (has_sendhelpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendhelpcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LAssistCancelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LAssistCancelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LAssistCancelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LAssistCancelReq::MergeFrom(const C2LAssistCancelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helpcid()) {
      set_helpcid(from.helpcid());
    }
    if (from.has_sendhelpcid()) {
      set_sendhelpcid(from.sendhelpcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LAssistCancelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LAssistCancelReq::CopyFrom(const C2LAssistCancelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LAssistCancelReq::IsInitialized() const {

  return true;
}

void C2LAssistCancelReq::Swap(C2LAssistCancelReq* other) {
  if (other != this) {
    std::swap(helpcid_, other->helpcid_);
    std::swap(sendhelpcid_, other->sendhelpcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LAssistCancelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LAssistCancelReq_descriptor_;
  metadata.reflection = C2LAssistCancelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LAssistAckReq::kHelpCidFieldNumber;
const int C2LAssistAckReq::kSendHelpCidFieldNumber;
#endif  // !_MSC_VER

C2LAssistAckReq::C2LAssistAckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LAssistAckReq::InitAsDefaultInstance() {
}

C2LAssistAckReq::C2LAssistAckReq(const C2LAssistAckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LAssistAckReq::SharedCtor() {
  _cached_size_ = 0;
  helpcid_ = GOOGLE_LONGLONG(0);
  sendhelpcid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LAssistAckReq::~C2LAssistAckReq() {
  SharedDtor();
}

void C2LAssistAckReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LAssistAckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LAssistAckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LAssistAckReq_descriptor_;
}

const C2LAssistAckReq& C2LAssistAckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

C2LAssistAckReq* C2LAssistAckReq::default_instance_ = NULL;

C2LAssistAckReq* C2LAssistAckReq::New() const {
  return new C2LAssistAckReq;
}

void C2LAssistAckReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    helpcid_ = GOOGLE_LONGLONG(0);
    sendhelpcid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LAssistAckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 helpCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &helpcid_)));
          set_has_helpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sendHelpCid;
        break;
      }

      // optional int64 sendHelpCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendHelpCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendhelpcid_)));
          set_has_sendhelpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LAssistAckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 helpCid = 1;
  if (has_helpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->helpcid(), output);
  }

  // optional int64 sendHelpCid = 2;
  if (has_sendhelpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sendhelpcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LAssistAckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 helpCid = 1;
  if (has_helpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->helpcid(), target);
  }

  // optional int64 sendHelpCid = 2;
  if (has_sendhelpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sendhelpcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LAssistAckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 helpCid = 1;
    if (has_helpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->helpcid());
    }

    // optional int64 sendHelpCid = 2;
    if (has_sendhelpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendhelpcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LAssistAckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LAssistAckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LAssistAckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LAssistAckReq::MergeFrom(const C2LAssistAckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_helpcid()) {
      set_helpcid(from.helpcid());
    }
    if (from.has_sendhelpcid()) {
      set_sendhelpcid(from.sendhelpcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LAssistAckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LAssistAckReq::CopyFrom(const C2LAssistAckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LAssistAckReq::IsInitialized() const {

  return true;
}

void C2LAssistAckReq::Swap(C2LAssistAckReq* other) {
  if (other != this) {
    std::swap(helpcid_, other->helpcid_);
    std::swap(sendhelpcid_, other->sendhelpcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LAssistAckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LAssistAckReq_descriptor_;
  metadata.reflection = C2LAssistAckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LAssistRmvReq::kSendHelpCidFieldNumber;
#endif  // !_MSC_VER

C2LAssistRmvReq::C2LAssistRmvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LAssistRmvReq::InitAsDefaultInstance() {
}

C2LAssistRmvReq::C2LAssistRmvReq(const C2LAssistRmvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LAssistRmvReq::SharedCtor() {
  _cached_size_ = 0;
  sendhelpcid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LAssistRmvReq::~C2LAssistRmvReq() {
  SharedDtor();
}

void C2LAssistRmvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LAssistRmvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LAssistRmvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LAssistRmvReq_descriptor_;
}

const C2LAssistRmvReq& C2LAssistRmvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

C2LAssistRmvReq* C2LAssistRmvReq::default_instance_ = NULL;

C2LAssistRmvReq* C2LAssistRmvReq::New() const {
  return new C2LAssistRmvReq;
}

void C2LAssistRmvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sendhelpcid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LAssistRmvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sendHelpCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendhelpcid_)));
          set_has_sendhelpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LAssistRmvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 sendHelpCid = 1;
  if (has_sendhelpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sendhelpcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LAssistRmvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 sendHelpCid = 1;
  if (has_sendhelpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sendhelpcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LAssistRmvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sendHelpCid = 1;
    if (has_sendhelpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendhelpcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LAssistRmvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LAssistRmvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LAssistRmvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LAssistRmvReq::MergeFrom(const C2LAssistRmvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendhelpcid()) {
      set_sendhelpcid(from.sendhelpcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LAssistRmvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LAssistRmvReq::CopyFrom(const C2LAssistRmvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LAssistRmvReq::IsInitialized() const {

  return true;
}

void C2LAssistRmvReq::Swap(C2LAssistRmvReq* other) {
  if (other != this) {
    std::swap(sendhelpcid_, other->sendhelpcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LAssistRmvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LAssistRmvReq_descriptor_;
  metadata.reflection = C2LAssistRmvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CAssistThankReq::kIdFieldNumber;
const int L2CAssistThankReq::kPairFieldNumber;
const int L2CAssistThankReq::kSrcFieldNumber;
#endif  // !_MSC_VER

L2CAssistThankReq::L2CAssistThankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CAssistThankReq::InitAsDefaultInstance() {
}

L2CAssistThankReq::L2CAssistThankReq(const L2CAssistThankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CAssistThankReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  src_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CAssistThankReq::~L2CAssistThankReq() {
  SharedDtor();
}

void L2CAssistThankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CAssistThankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CAssistThankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CAssistThankReq_descriptor_;
}

const L2CAssistThankReq& L2CAssistThankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

L2CAssistThankReq* L2CAssistThankReq::default_instance_ = NULL;

L2CAssistThankReq* L2CAssistThankReq::New() const {
  return new L2CAssistThankReq;
}

void L2CAssistThankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    src_ = GOOGLE_LONGLONG(0);
  }
  pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CAssistThankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pair;
        break;
      }

      // repeated .proto_ff.ComPair64 pair = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pair;
        if (input->ExpectTag(24)) goto parse_src;
        break;
      }

      // optional int64 src = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CAssistThankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .proto_ff.ComPair64 pair = 2;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pair(i), output);
  }

  // optional int64 src = 3;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CAssistThankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.ComPair64 pair = 2;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pair(i), target);
  }

  // optional int64 src = 3;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CAssistThankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 src = 3;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src());
    }

  }
  // repeated .proto_ff.ComPair64 pair = 2;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CAssistThankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CAssistThankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CAssistThankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CAssistThankReq::MergeFrom(const L2CAssistThankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CAssistThankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CAssistThankReq::CopyFrom(const L2CAssistThankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CAssistThankReq::IsInitialized() const {

  return true;
}

void L2CAssistThankReq::Swap(L2CAssistThankReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    pair_.Swap(&other->pair_);
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CAssistThankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CAssistThankReq_descriptor_;
  metadata.reflection = L2CAssistThankReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
