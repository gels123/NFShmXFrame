// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Assist.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Assist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* AssistInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HurtRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HurtRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAssistPoolList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAssistPoolList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRoleAssist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRoleAssist_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistHelpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistHelpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHelpDst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHelpDst_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistExitHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistExitHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistExitHelpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistExitHelpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAssistCmpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAssistCmpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistThankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistThankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistThankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistThankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAssistThank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAssistThank_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHelpHurtRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHelpHurtRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBossHurtRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBossHurtRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBossHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBossHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBossHelpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBossHelpRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Assist_2eproto() {
  protobuf_AddDesc_Assist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Assist.proto");
  GOOGLE_CHECK(file != NULL);
  AssistInfo_descriptor_ = file->message_type(0);
  static const int AssistInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, time_),
  };
  AssistInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistInfo_descriptor_,
      AssistInfo::default_instance_,
      AssistInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistInfo));
  HurtRankInfo_descriptor_ = file->message_type(1);
  static const int HurtRankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, teamid_),
  };
  HurtRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HurtRankInfo_descriptor_,
      HurtRankInfo::default_instance_,
      HurtRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HurtRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HurtRankInfo));
  NotifyAssistPoolList_descriptor_ = file->message_type(2);
  static const int NotifyAssistPoolList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistPoolList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistPoolList, infos_),
  };
  NotifyAssistPoolList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAssistPoolList_descriptor_,
      NotifyAssistPoolList::default_instance_,
      NotifyAssistPoolList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistPoolList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistPoolList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAssistPoolList));
  NotifyRoleAssist_descriptor_ = file->message_type(3);
  static const int NotifyRoleAssist_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, helpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, sendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, rewardids_),
  };
  NotifyRoleAssist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRoleAssist_descriptor_,
      NotifyRoleAssist::default_instance_,
      NotifyRoleAssist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleAssist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRoleAssist));
  AssistHelpReq_descriptor_ = file->message_type(4);
  static const int AssistHelpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpReq, sendercid_),
  };
  AssistHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistHelpReq_descriptor_,
      AssistHelpReq::default_instance_,
      AssistHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistHelpReq));
  AssistHelpRsp_descriptor_ = file->message_type(5);
  static const int AssistHelpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpRsp, sendercid_),
  };
  AssistHelpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistHelpRsp_descriptor_,
      AssistHelpRsp::default_instance_,
      AssistHelpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistHelpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistHelpRsp));
  NotifyHelpDst_descriptor_ = file->message_type(6);
  static const int NotifyHelpDst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, bossid_),
  };
  NotifyHelpDst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHelpDst_descriptor_,
      NotifyHelpDst::default_instance_,
      NotifyHelpDst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpDst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHelpDst));
  AssistExitHelpReq_descriptor_ = file->message_type(7);
  static const int AssistExitHelpReq_offsets_[1] = {
  };
  AssistExitHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistExitHelpReq_descriptor_,
      AssistExitHelpReq::default_instance_,
      AssistExitHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistExitHelpReq));
  AssistExitHelpRsp_descriptor_ = file->message_type(8);
  static const int AssistExitHelpRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpRsp, ret_),
  };
  AssistExitHelpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistExitHelpRsp_descriptor_,
      AssistExitHelpRsp::default_instance_,
      AssistExitHelpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistExitHelpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistExitHelpRsp));
  NotifyAssistCmpt_descriptor_ = file->message_type(9);
  static const int NotifyAssistCmpt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistCmpt, role_),
  };
  NotifyAssistCmpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAssistCmpt_descriptor_,
      NotifyAssistCmpt::default_instance_,
      NotifyAssistCmpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistCmpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistCmpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAssistCmpt));
  AssistThankReq_descriptor_ = file->message_type(10);
  static const int AssistThankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankReq, id_),
  };
  AssistThankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistThankReq_descriptor_,
      AssistThankReq::default_instance_,
      AssistThankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistThankReq));
  AssistThankRsp_descriptor_ = file->message_type(11);
  static const int AssistThankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankRsp, id_),
  };
  AssistThankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistThankRsp_descriptor_,
      AssistThankRsp::default_instance_,
      AssistThankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistThankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistThankRsp));
  NotifyAssistThank_descriptor_ = file->message_type(12);
  static const int NotifyAssistThank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, giftid_),
  };
  NotifyAssistThank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAssistThank_descriptor_,
      NotifyAssistThank::default_instance_,
      NotifyAssistThank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAssistThank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAssistThank));
  NotifyHelpHurtRank_descriptor_ = file->message_type(13);
  static const int NotifyHelpHurtRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpHurtRank, infos_),
  };
  NotifyHelpHurtRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyHelpHurtRank_descriptor_,
      NotifyHelpHurtRank::default_instance_,
      NotifyHelpHurtRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpHurtRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHelpHurtRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyHelpHurtRank));
  NotifyBossHurtRank_descriptor_ = file->message_type(14);
  static const int NotifyBossHurtRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossHurtRank, infos_),
  };
  NotifyBossHurtRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBossHurtRank_descriptor_,
      NotifyBossHurtRank::default_instance_,
      NotifyBossHurtRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossHurtRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBossHurtRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBossHurtRank));
  SendBossHelpReq_descriptor_ = file->message_type(15);
  static const int SendBossHelpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpReq, bossid_),
  };
  SendBossHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBossHelpReq_descriptor_,
      SendBossHelpReq::default_instance_,
      SendBossHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBossHelpReq));
  SendBossHelpRsp_descriptor_ = file->message_type(16);
  static const int SendBossHelpRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpRsp, bossid_),
  };
  SendBossHelpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBossHelpRsp_descriptor_,
      SendBossHelpRsp::default_instance_,
      SendBossHelpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBossHelpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBossHelpRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Assist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistInfo_descriptor_, &AssistInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HurtRankInfo_descriptor_, &HurtRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAssistPoolList_descriptor_, &NotifyAssistPoolList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRoleAssist_descriptor_, &NotifyRoleAssist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistHelpReq_descriptor_, &AssistHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistHelpRsp_descriptor_, &AssistHelpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHelpDst_descriptor_, &NotifyHelpDst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistExitHelpReq_descriptor_, &AssistExitHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistExitHelpRsp_descriptor_, &AssistExitHelpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAssistCmpt_descriptor_, &NotifyAssistCmpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistThankReq_descriptor_, &AssistThankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistThankRsp_descriptor_, &AssistThankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAssistThank_descriptor_, &NotifyAssistThank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyHelpHurtRank_descriptor_, &NotifyHelpHurtRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBossHurtRank_descriptor_, &NotifyBossHurtRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBossHelpReq_descriptor_, &SendBossHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBossHelpRsp_descriptor_, &SendBossHelpRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Assist_2eproto() {
  delete AssistInfo::default_instance_;
  delete AssistInfo_reflection_;
  delete HurtRankInfo::default_instance_;
  delete HurtRankInfo_reflection_;
  delete NotifyAssistPoolList::default_instance_;
  delete NotifyAssistPoolList_reflection_;
  delete NotifyRoleAssist::default_instance_;
  delete NotifyRoleAssist_reflection_;
  delete AssistHelpReq::default_instance_;
  delete AssistHelpReq_reflection_;
  delete AssistHelpRsp::default_instance_;
  delete AssistHelpRsp_reflection_;
  delete NotifyHelpDst::default_instance_;
  delete NotifyHelpDst_reflection_;
  delete AssistExitHelpReq::default_instance_;
  delete AssistExitHelpReq_reflection_;
  delete AssistExitHelpRsp::default_instance_;
  delete AssistExitHelpRsp_reflection_;
  delete NotifyAssistCmpt::default_instance_;
  delete NotifyAssistCmpt_reflection_;
  delete AssistThankReq::default_instance_;
  delete AssistThankReq_reflection_;
  delete AssistThankRsp::default_instance_;
  delete AssistThankRsp_reflection_;
  delete NotifyAssistThank::default_instance_;
  delete NotifyAssistThank_reflection_;
  delete NotifyHelpHurtRank::default_instance_;
  delete NotifyHelpHurtRank_reflection_;
  delete NotifyBossHurtRank::default_instance_;
  delete NotifyBossHurtRank_reflection_;
  delete SendBossHelpReq::default_instance_;
  delete SendBossHelpReq_reflection_;
  delete SendBossHelpRsp::default_instance_;
  delete SendBossHelpRsp_reflection_;
}

void protobuf_AddDesc_Assist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Assist.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\032\022common_logic.proto\032\tCom.proto\"V"
    "\n\nAssistInfo\022*\n\004role\030\001 \001(\0132\034.proto_ff.Ro"
    "lePlayerMiniInfo\022\016\n\006bossId\030\002 \001(\003\022\014\n\004time"
    "\030\003 \001(\005\"T\n\014HurtRankInfo\022\014\n\004rank\030\001 \001(\005\022\013\n\003"
    "cid\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\013\n\003val\030\004 \001(\003\022\016\n\006"
    "teamid\030\005 \001(\005\"I\n\024NotifyAssistPoolList\022\014\n\004"
    "type\030\001 \001(\005\022#\n\005infos\030\002 \003(\0132\024.proto_ff.Ass"
    "istInfo\"Y\n\020NotifyRoleAssist\022\020\n\010prestige\030"
    "\001 \001(\005\022\017\n\007helpNum\030\002 \001(\005\022\017\n\007sendNum\030\003 \001(\005\022"
    "\021\n\trewardIds\030\004 \003(\005\"\"\n\rAssistHelpReq\022\021\n\ts"
    "enderCid\030\001 \001(\003\"/\n\rAssistHelpRsp\022\013\n\003ret\030\001"
    " \001(\005\022\021\n\tsenderCid\030\002 \001(\003\"K\n\rNotifyHelpDst"
    "\022*\n\004role\030\001 \001(\0132\034.proto_ff.RolePlayerMini"
    "Info\022\016\n\006bossId\030\002 \001(\003\"\023\n\021AssistExitHelpRe"
    "q\" \n\021AssistExitHelpRsp\022\013\n\003ret\030\001 \001(\005\">\n\020N"
    "otifyAssistCmpt\022*\n\004role\030\001 \003(\0132\034.proto_ff"
    ".RolePlayerMiniInfo\"\034\n\016AssistThankReq\022\n\n"
    "\002id\030\001 \001(\005\")\n\016AssistThankRsp\022\013\n\003ret\030\001 \001(\005"
    "\022\n\n\002id\030\002 \001(\005\"/\n\021NotifyAssistThank\022\n\n\002id\030"
    "\001 \001(\005\022\016\n\006giftid\030\002 \001(\005\";\n\022NotifyHelpHurtR"
    "ank\022%\n\005infos\030\001 \001(\0132\026.proto_ff.HurtRankIn"
    "fo\";\n\022NotifyBossHurtRank\022%\n\005infos\030\001 \001(\0132"
    "\026.proto_ff.HurtRankInfo\"!\n\017SendBossHelpR"
    "eq\022\016\n\006bossId\030\001 \001(\003\".\n\017SendBossHelpRsp\022\013\n"
    "\003ret\030\001 \001(\005\022\016\n\006bossId\030\002 \001(\003", 1026);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Assist.proto", &protobuf_RegisterTypes);
  AssistInfo::default_instance_ = new AssistInfo();
  HurtRankInfo::default_instance_ = new HurtRankInfo();
  NotifyAssistPoolList::default_instance_ = new NotifyAssistPoolList();
  NotifyRoleAssist::default_instance_ = new NotifyRoleAssist();
  AssistHelpReq::default_instance_ = new AssistHelpReq();
  AssistHelpRsp::default_instance_ = new AssistHelpRsp();
  NotifyHelpDst::default_instance_ = new NotifyHelpDst();
  AssistExitHelpReq::default_instance_ = new AssistExitHelpReq();
  AssistExitHelpRsp::default_instance_ = new AssistExitHelpRsp();
  NotifyAssistCmpt::default_instance_ = new NotifyAssistCmpt();
  AssistThankReq::default_instance_ = new AssistThankReq();
  AssistThankRsp::default_instance_ = new AssistThankRsp();
  NotifyAssistThank::default_instance_ = new NotifyAssistThank();
  NotifyHelpHurtRank::default_instance_ = new NotifyHelpHurtRank();
  NotifyBossHurtRank::default_instance_ = new NotifyBossHurtRank();
  SendBossHelpReq::default_instance_ = new SendBossHelpReq();
  SendBossHelpRsp::default_instance_ = new SendBossHelpRsp();
  AssistInfo::default_instance_->InitAsDefaultInstance();
  HurtRankInfo::default_instance_->InitAsDefaultInstance();
  NotifyAssistPoolList::default_instance_->InitAsDefaultInstance();
  NotifyRoleAssist::default_instance_->InitAsDefaultInstance();
  AssistHelpReq::default_instance_->InitAsDefaultInstance();
  AssistHelpRsp::default_instance_->InitAsDefaultInstance();
  NotifyHelpDst::default_instance_->InitAsDefaultInstance();
  AssistExitHelpReq::default_instance_->InitAsDefaultInstance();
  AssistExitHelpRsp::default_instance_->InitAsDefaultInstance();
  NotifyAssistCmpt::default_instance_->InitAsDefaultInstance();
  AssistThankReq::default_instance_->InitAsDefaultInstance();
  AssistThankRsp::default_instance_->InitAsDefaultInstance();
  NotifyAssistThank::default_instance_->InitAsDefaultInstance();
  NotifyHelpHurtRank::default_instance_->InitAsDefaultInstance();
  NotifyBossHurtRank::default_instance_->InitAsDefaultInstance();
  SendBossHelpReq::default_instance_->InitAsDefaultInstance();
  SendBossHelpRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Assist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Assist_2eproto {
  StaticDescriptorInitializer_Assist_2eproto() {
    protobuf_AddDesc_Assist_2eproto();
  }
} static_descriptor_initializer_Assist_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AssistInfo::kRoleFieldNumber;
const int AssistInfo::kBossIdFieldNumber;
const int AssistInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

AssistInfo::AssistInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistInfo::InitAsDefaultInstance() {
  role_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

AssistInfo::AssistInfo(const AssistInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistInfo::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  bossid_ = GOOGLE_LONGLONG(0);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistInfo::~AssistInfo() {
  SharedDtor();
}

void AssistInfo::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void AssistInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistInfo_descriptor_;
}

const AssistInfo& AssistInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistInfo* AssistInfo::default_instance_ = NULL;

AssistInfo* AssistInfo::New() const {
  return new AssistInfo;
}

void AssistInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role()) {
      if (role_ != NULL) role_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    bossid_ = GOOGLE_LONGLONG(0);
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistInfo::MergeFrom(const AssistInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      mutable_role()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.role());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistInfo::CopyFrom(const AssistInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistInfo::IsInitialized() const {

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void AssistInfo::Swap(AssistInfo* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(bossid_, other->bossid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistInfo_descriptor_;
  metadata.reflection = AssistInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HurtRankInfo::kRankFieldNumber;
const int HurtRankInfo::kCidFieldNumber;
const int HurtRankInfo::kNameFieldNumber;
const int HurtRankInfo::kValFieldNumber;
const int HurtRankInfo::kTeamidFieldNumber;
#endif  // !_MSC_VER

HurtRankInfo::HurtRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HurtRankInfo::InitAsDefaultInstance() {
}

HurtRankInfo::HurtRankInfo(const HurtRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HurtRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  cid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = GOOGLE_LONGLONG(0);
  teamid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HurtRankInfo::~HurtRankInfo() {
  SharedDtor();
}

void HurtRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HurtRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HurtRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HurtRankInfo_descriptor_;
}

const HurtRankInfo& HurtRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

HurtRankInfo* HurtRankInfo::default_instance_ = NULL;

HurtRankInfo* HurtRankInfo::New() const {
  return new HurtRankInfo;
}

void HurtRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    cid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    val_ = GOOGLE_LONGLONG(0);
    teamid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HurtRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional int64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_val;
        break;
      }

      // optional int64 val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HurtRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int64 val = 4;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->val(), output);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HurtRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int64 val = 4;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->val(), target);
  }

  // optional int32 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HurtRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 val = 4;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val());
    }

    // optional int32 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HurtRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HurtRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HurtRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HurtRankInfo::MergeFrom(const HurtRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HurtRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HurtRankInfo::CopyFrom(const HurtRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HurtRankInfo::IsInitialized() const {

  return true;
}

void HurtRankInfo::Swap(HurtRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(val_, other->val_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HurtRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HurtRankInfo_descriptor_;
  metadata.reflection = HurtRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAssistPoolList::kTypeFieldNumber;
const int NotifyAssistPoolList::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyAssistPoolList::NotifyAssistPoolList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAssistPoolList::InitAsDefaultInstance() {
}

NotifyAssistPoolList::NotifyAssistPoolList(const NotifyAssistPoolList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAssistPoolList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAssistPoolList::~NotifyAssistPoolList() {
  SharedDtor();
}

void NotifyAssistPoolList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAssistPoolList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAssistPoolList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAssistPoolList_descriptor_;
}

const NotifyAssistPoolList& NotifyAssistPoolList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyAssistPoolList* NotifyAssistPoolList::default_instance_ = NULL;

NotifyAssistPoolList* NotifyAssistPoolList::New() const {
  return new NotifyAssistPoolList;
}

void NotifyAssistPoolList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAssistPoolList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.AssistInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAssistPoolList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.AssistInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAssistPoolList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.AssistInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAssistPoolList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.AssistInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAssistPoolList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAssistPoolList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAssistPoolList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAssistPoolList::MergeFrom(const NotifyAssistPoolList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAssistPoolList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAssistPoolList::CopyFrom(const NotifyAssistPoolList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAssistPoolList::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyAssistPoolList::Swap(NotifyAssistPoolList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAssistPoolList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAssistPoolList_descriptor_;
  metadata.reflection = NotifyAssistPoolList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRoleAssist::kPrestigeFieldNumber;
const int NotifyRoleAssist::kHelpNumFieldNumber;
const int NotifyRoleAssist::kSendNumFieldNumber;
const int NotifyRoleAssist::kRewardIdsFieldNumber;
#endif  // !_MSC_VER

NotifyRoleAssist::NotifyRoleAssist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRoleAssist::InitAsDefaultInstance() {
}

NotifyRoleAssist::NotifyRoleAssist(const NotifyRoleAssist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRoleAssist::SharedCtor() {
  _cached_size_ = 0;
  prestige_ = 0;
  helpnum_ = 0;
  sendnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRoleAssist::~NotifyRoleAssist() {
  SharedDtor();
}

void NotifyRoleAssist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRoleAssist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRoleAssist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRoleAssist_descriptor_;
}

const NotifyRoleAssist& NotifyRoleAssist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyRoleAssist* NotifyRoleAssist::default_instance_ = NULL;

NotifyRoleAssist* NotifyRoleAssist::New() const {
  return new NotifyRoleAssist;
}

void NotifyRoleAssist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prestige_ = 0;
    helpnum_ = 0;
    sendnum_ = 0;
  }
  rewardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRoleAssist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prestige = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_helpNum;
        break;
      }

      // optional int32 helpNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpnum_)));
          set_has_helpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendNum;
        break;
      }

      // optional int32 sendNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendnum_)));
          set_has_sendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardIds;
        break;
      }

      // repeated int32 rewardIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_rewardids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRoleAssist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prestige = 1;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prestige(), output);
  }

  // optional int32 helpNum = 2;
  if (has_helpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->helpnum(), output);
  }

  // optional int32 sendNum = 3;
  if (has_sendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sendnum(), output);
  }

  // repeated int32 rewardIds = 4;
  for (int i = 0; i < this->rewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->rewardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRoleAssist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prestige = 1;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prestige(), target);
  }

  // optional int32 helpNum = 2;
  if (has_helpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->helpnum(), target);
  }

  // optional int32 sendNum = 3;
  if (has_sendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sendnum(), target);
  }

  // repeated int32 rewardIds = 4;
  for (int i = 0; i < this->rewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->rewardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRoleAssist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prestige = 1;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestige());
    }

    // optional int32 helpNum = 2;
    if (has_helpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpnum());
    }

    // optional int32 sendNum = 3;
    if (has_sendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendnum());
    }

  }
  // repeated int32 rewardIds = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardids(i));
    }
    total_size += 1 * this->rewardids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRoleAssist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRoleAssist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRoleAssist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRoleAssist::MergeFrom(const NotifyRoleAssist& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardids_.MergeFrom(from.rewardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_helpnum()) {
      set_helpnum(from.helpnum());
    }
    if (from.has_sendnum()) {
      set_sendnum(from.sendnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRoleAssist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRoleAssist::CopyFrom(const NotifyRoleAssist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRoleAssist::IsInitialized() const {

  return true;
}

void NotifyRoleAssist::Swap(NotifyRoleAssist* other) {
  if (other != this) {
    std::swap(prestige_, other->prestige_);
    std::swap(helpnum_, other->helpnum_);
    std::swap(sendnum_, other->sendnum_);
    rewardids_.Swap(&other->rewardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRoleAssist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRoleAssist_descriptor_;
  metadata.reflection = NotifyRoleAssist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistHelpReq::kSenderCidFieldNumber;
#endif  // !_MSC_VER

AssistHelpReq::AssistHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistHelpReq::InitAsDefaultInstance() {
}

AssistHelpReq::AssistHelpReq(const AssistHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistHelpReq::SharedCtor() {
  _cached_size_ = 0;
  sendercid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistHelpReq::~AssistHelpReq() {
  SharedDtor();
}

void AssistHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistHelpReq_descriptor_;
}

const AssistHelpReq& AssistHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistHelpReq* AssistHelpReq::default_instance_ = NULL;

AssistHelpReq* AssistHelpReq::New() const {
  return new AssistHelpReq;
}

void AssistHelpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sendercid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 senderCid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendercid_)));
          set_has_sendercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 senderCid = 1;
  if (has_sendercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sendercid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 senderCid = 1;
  if (has_sendercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sendercid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 senderCid = 1;
    if (has_sendercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendercid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistHelpReq::MergeFrom(const AssistHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendercid()) {
      set_sendercid(from.sendercid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistHelpReq::CopyFrom(const AssistHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistHelpReq::IsInitialized() const {

  return true;
}

void AssistHelpReq::Swap(AssistHelpReq* other) {
  if (other != this) {
    std::swap(sendercid_, other->sendercid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistHelpReq_descriptor_;
  metadata.reflection = AssistHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistHelpRsp::kRetFieldNumber;
const int AssistHelpRsp::kSenderCidFieldNumber;
#endif  // !_MSC_VER

AssistHelpRsp::AssistHelpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistHelpRsp::InitAsDefaultInstance() {
}

AssistHelpRsp::AssistHelpRsp(const AssistHelpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistHelpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  sendercid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistHelpRsp::~AssistHelpRsp() {
  SharedDtor();
}

void AssistHelpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistHelpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistHelpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistHelpRsp_descriptor_;
}

const AssistHelpRsp& AssistHelpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistHelpRsp* AssistHelpRsp::default_instance_ = NULL;

AssistHelpRsp* AssistHelpRsp::New() const {
  return new AssistHelpRsp;
}

void AssistHelpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    sendercid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistHelpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_senderCid;
        break;
      }

      // optional int64 senderCid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendercid_)));
          set_has_sendercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistHelpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 senderCid = 2;
  if (has_sendercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sendercid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistHelpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 senderCid = 2;
  if (has_sendercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sendercid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistHelpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 senderCid = 2;
    if (has_sendercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendercid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistHelpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistHelpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistHelpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistHelpRsp::MergeFrom(const AssistHelpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sendercid()) {
      set_sendercid(from.sendercid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistHelpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistHelpRsp::CopyFrom(const AssistHelpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistHelpRsp::IsInitialized() const {

  return true;
}

void AssistHelpRsp::Swap(AssistHelpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(sendercid_, other->sendercid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistHelpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistHelpRsp_descriptor_;
  metadata.reflection = AssistHelpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHelpDst::kRoleFieldNumber;
const int NotifyHelpDst::kBossIdFieldNumber;
#endif  // !_MSC_VER

NotifyHelpDst::NotifyHelpDst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHelpDst::InitAsDefaultInstance() {
  role_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

NotifyHelpDst::NotifyHelpDst(const NotifyHelpDst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHelpDst::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  bossid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHelpDst::~NotifyHelpDst() {
  SharedDtor();
}

void NotifyHelpDst::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void NotifyHelpDst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHelpDst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHelpDst_descriptor_;
}

const NotifyHelpDst& NotifyHelpDst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyHelpDst* NotifyHelpDst::default_instance_ = NULL;

NotifyHelpDst* NotifyHelpDst::New() const {
  return new NotifyHelpDst;
}

void NotifyHelpDst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role()) {
      if (role_ != NULL) role_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    bossid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHelpDst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHelpDst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHelpDst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHelpDst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHelpDst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHelpDst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHelpDst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHelpDst::MergeFrom(const NotifyHelpDst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      mutable_role()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.role());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHelpDst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHelpDst::CopyFrom(const NotifyHelpDst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHelpDst::IsInitialized() const {

  if (has_role()) {
    if (!this->role().IsInitialized()) return false;
  }
  return true;
}

void NotifyHelpDst::Swap(NotifyHelpDst* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHelpDst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHelpDst_descriptor_;
  metadata.reflection = NotifyHelpDst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AssistExitHelpReq::AssistExitHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistExitHelpReq::InitAsDefaultInstance() {
}

AssistExitHelpReq::AssistExitHelpReq(const AssistExitHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistExitHelpReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistExitHelpReq::~AssistExitHelpReq() {
  SharedDtor();
}

void AssistExitHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistExitHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistExitHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistExitHelpReq_descriptor_;
}

const AssistExitHelpReq& AssistExitHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistExitHelpReq* AssistExitHelpReq::default_instance_ = NULL;

AssistExitHelpReq* AssistExitHelpReq::New() const {
  return new AssistExitHelpReq;
}

void AssistExitHelpReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistExitHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AssistExitHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistExitHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistExitHelpReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistExitHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistExitHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistExitHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistExitHelpReq::MergeFrom(const AssistExitHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistExitHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistExitHelpReq::CopyFrom(const AssistExitHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistExitHelpReq::IsInitialized() const {

  return true;
}

void AssistExitHelpReq::Swap(AssistExitHelpReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistExitHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistExitHelpReq_descriptor_;
  metadata.reflection = AssistExitHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistExitHelpRsp::kRetFieldNumber;
#endif  // !_MSC_VER

AssistExitHelpRsp::AssistExitHelpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistExitHelpRsp::InitAsDefaultInstance() {
}

AssistExitHelpRsp::AssistExitHelpRsp(const AssistExitHelpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistExitHelpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistExitHelpRsp::~AssistExitHelpRsp() {
  SharedDtor();
}

void AssistExitHelpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistExitHelpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistExitHelpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistExitHelpRsp_descriptor_;
}

const AssistExitHelpRsp& AssistExitHelpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistExitHelpRsp* AssistExitHelpRsp::default_instance_ = NULL;

AssistExitHelpRsp* AssistExitHelpRsp::New() const {
  return new AssistExitHelpRsp;
}

void AssistExitHelpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistExitHelpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistExitHelpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistExitHelpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistExitHelpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistExitHelpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistExitHelpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistExitHelpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistExitHelpRsp::MergeFrom(const AssistExitHelpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistExitHelpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistExitHelpRsp::CopyFrom(const AssistExitHelpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistExitHelpRsp::IsInitialized() const {

  return true;
}

void AssistExitHelpRsp::Swap(AssistExitHelpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistExitHelpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistExitHelpRsp_descriptor_;
  metadata.reflection = AssistExitHelpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAssistCmpt::kRoleFieldNumber;
#endif  // !_MSC_VER

NotifyAssistCmpt::NotifyAssistCmpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAssistCmpt::InitAsDefaultInstance() {
}

NotifyAssistCmpt::NotifyAssistCmpt(const NotifyAssistCmpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAssistCmpt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAssistCmpt::~NotifyAssistCmpt() {
  SharedDtor();
}

void NotifyAssistCmpt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAssistCmpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAssistCmpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAssistCmpt_descriptor_;
}

const NotifyAssistCmpt& NotifyAssistCmpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyAssistCmpt* NotifyAssistCmpt::default_instance_ = NULL;

NotifyAssistCmpt* NotifyAssistCmpt::New() const {
  return new NotifyAssistCmpt;
}

void NotifyAssistCmpt::Clear() {
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAssistCmpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RolePlayerMiniInfo role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_role;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAssistCmpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RolePlayerMiniInfo role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAssistCmpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RolePlayerMiniInfo role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAssistCmpt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RolePlayerMiniInfo role = 1;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAssistCmpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAssistCmpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAssistCmpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAssistCmpt::MergeFrom(const NotifyAssistCmpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAssistCmpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAssistCmpt::CopyFrom(const NotifyAssistCmpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAssistCmpt::IsInitialized() const {

  for (int i = 0; i < role_size(); i++) {
    if (!this->role(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyAssistCmpt::Swap(NotifyAssistCmpt* other) {
  if (other != this) {
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAssistCmpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAssistCmpt_descriptor_;
  metadata.reflection = NotifyAssistCmpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistThankReq::kIdFieldNumber;
#endif  // !_MSC_VER

AssistThankReq::AssistThankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistThankReq::InitAsDefaultInstance() {
}

AssistThankReq::AssistThankReq(const AssistThankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistThankReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistThankReq::~AssistThankReq() {
  SharedDtor();
}

void AssistThankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistThankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistThankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistThankReq_descriptor_;
}

const AssistThankReq& AssistThankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistThankReq* AssistThankReq::default_instance_ = NULL;

AssistThankReq* AssistThankReq::New() const {
  return new AssistThankReq;
}

void AssistThankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistThankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistThankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistThankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistThankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistThankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistThankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistThankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistThankReq::MergeFrom(const AssistThankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistThankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistThankReq::CopyFrom(const AssistThankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistThankReq::IsInitialized() const {

  return true;
}

void AssistThankReq::Swap(AssistThankReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistThankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistThankReq_descriptor_;
  metadata.reflection = AssistThankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistThankRsp::kRetFieldNumber;
const int AssistThankRsp::kIdFieldNumber;
#endif  // !_MSC_VER

AssistThankRsp::AssistThankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistThankRsp::InitAsDefaultInstance() {
}

AssistThankRsp::AssistThankRsp(const AssistThankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistThankRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistThankRsp::~AssistThankRsp() {
  SharedDtor();
}

void AssistThankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistThankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistThankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistThankRsp_descriptor_;
}

const AssistThankRsp& AssistThankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

AssistThankRsp* AssistThankRsp::default_instance_ = NULL;

AssistThankRsp* AssistThankRsp::New() const {
  return new AssistThankRsp;
}

void AssistThankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistThankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistThankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistThankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistThankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistThankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistThankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistThankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistThankRsp::MergeFrom(const AssistThankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistThankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistThankRsp::CopyFrom(const AssistThankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistThankRsp::IsInitialized() const {

  return true;
}

void AssistThankRsp::Swap(AssistThankRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistThankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistThankRsp_descriptor_;
  metadata.reflection = AssistThankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAssistThank::kIdFieldNumber;
const int NotifyAssistThank::kGiftidFieldNumber;
#endif  // !_MSC_VER

NotifyAssistThank::NotifyAssistThank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAssistThank::InitAsDefaultInstance() {
}

NotifyAssistThank::NotifyAssistThank(const NotifyAssistThank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAssistThank::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  giftid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAssistThank::~NotifyAssistThank() {
  SharedDtor();
}

void NotifyAssistThank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAssistThank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAssistThank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAssistThank_descriptor_;
}

const NotifyAssistThank& NotifyAssistThank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyAssistThank* NotifyAssistThank::default_instance_ = NULL;

NotifyAssistThank* NotifyAssistThank::New() const {
  return new NotifyAssistThank;
}

void NotifyAssistThank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    giftid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAssistThank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giftid;
        break;
      }

      // optional int32 giftid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAssistThank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 giftid = 2;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giftid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAssistThank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 giftid = 2;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->giftid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAssistThank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 giftid = 2;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAssistThank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAssistThank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAssistThank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAssistThank::MergeFrom(const NotifyAssistThank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAssistThank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAssistThank::CopyFrom(const NotifyAssistThank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAssistThank::IsInitialized() const {

  return true;
}

void NotifyAssistThank::Swap(NotifyAssistThank* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(giftid_, other->giftid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAssistThank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAssistThank_descriptor_;
  metadata.reflection = NotifyAssistThank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyHelpHurtRank::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyHelpHurtRank::NotifyHelpHurtRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyHelpHurtRank::InitAsDefaultInstance() {
  infos_ = const_cast< ::proto_ff::HurtRankInfo*>(&::proto_ff::HurtRankInfo::default_instance());
}

NotifyHelpHurtRank::NotifyHelpHurtRank(const NotifyHelpHurtRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyHelpHurtRank::SharedCtor() {
  _cached_size_ = 0;
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyHelpHurtRank::~NotifyHelpHurtRank() {
  SharedDtor();
}

void NotifyHelpHurtRank::SharedDtor() {
  if (this != default_instance_) {
    delete infos_;
  }
}

void NotifyHelpHurtRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHelpHurtRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHelpHurtRank_descriptor_;
}

const NotifyHelpHurtRank& NotifyHelpHurtRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyHelpHurtRank* NotifyHelpHurtRank::default_instance_ = NULL;

NotifyHelpHurtRank* NotifyHelpHurtRank::New() const {
  return new NotifyHelpHurtRank;
}

void NotifyHelpHurtRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_infos()) {
      if (infos_ != NULL) infos_->::proto_ff::HurtRankInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyHelpHurtRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.HurtRankInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyHelpHurtRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.HurtRankInfo infos = 1;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyHelpHurtRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.HurtRankInfo infos = 1;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyHelpHurtRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.HurtRankInfo infos = 1;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHelpHurtRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyHelpHurtRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyHelpHurtRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyHelpHurtRank::MergeFrom(const NotifyHelpHurtRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infos()) {
      mutable_infos()->::proto_ff::HurtRankInfo::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyHelpHurtRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHelpHurtRank::CopyFrom(const NotifyHelpHurtRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHelpHurtRank::IsInitialized() const {

  return true;
}

void NotifyHelpHurtRank::Swap(NotifyHelpHurtRank* other) {
  if (other != this) {
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyHelpHurtRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHelpHurtRank_descriptor_;
  metadata.reflection = NotifyHelpHurtRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBossHurtRank::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyBossHurtRank::NotifyBossHurtRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBossHurtRank::InitAsDefaultInstance() {
  infos_ = const_cast< ::proto_ff::HurtRankInfo*>(&::proto_ff::HurtRankInfo::default_instance());
}

NotifyBossHurtRank::NotifyBossHurtRank(const NotifyBossHurtRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBossHurtRank::SharedCtor() {
  _cached_size_ = 0;
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBossHurtRank::~NotifyBossHurtRank() {
  SharedDtor();
}

void NotifyBossHurtRank::SharedDtor() {
  if (this != default_instance_) {
    delete infos_;
  }
}

void NotifyBossHurtRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBossHurtRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBossHurtRank_descriptor_;
}

const NotifyBossHurtRank& NotifyBossHurtRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

NotifyBossHurtRank* NotifyBossHurtRank::default_instance_ = NULL;

NotifyBossHurtRank* NotifyBossHurtRank::New() const {
  return new NotifyBossHurtRank;
}

void NotifyBossHurtRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_infos()) {
      if (infos_ != NULL) infos_->::proto_ff::HurtRankInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBossHurtRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.HurtRankInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBossHurtRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.HurtRankInfo infos = 1;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBossHurtRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.HurtRankInfo infos = 1;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBossHurtRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.HurtRankInfo infos = 1;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBossHurtRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBossHurtRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBossHurtRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBossHurtRank::MergeFrom(const NotifyBossHurtRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infos()) {
      mutable_infos()->::proto_ff::HurtRankInfo::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBossHurtRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBossHurtRank::CopyFrom(const NotifyBossHurtRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBossHurtRank::IsInitialized() const {

  return true;
}

void NotifyBossHurtRank::Swap(NotifyBossHurtRank* other) {
  if (other != this) {
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBossHurtRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBossHurtRank_descriptor_;
  metadata.reflection = NotifyBossHurtRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBossHelpReq::kBossIdFieldNumber;
#endif  // !_MSC_VER

SendBossHelpReq::SendBossHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendBossHelpReq::InitAsDefaultInstance() {
}

SendBossHelpReq::SendBossHelpReq(const SendBossHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendBossHelpReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBossHelpReq::~SendBossHelpReq() {
  SharedDtor();
}

void SendBossHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendBossHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBossHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBossHelpReq_descriptor_;
}

const SendBossHelpReq& SendBossHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

SendBossHelpReq* SendBossHelpReq::default_instance_ = NULL;

SendBossHelpReq* SendBossHelpReq::New() const {
  return new SendBossHelpReq;
}

void SendBossHelpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBossHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendBossHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 bossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendBossHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 bossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendBossHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 bossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBossHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBossHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBossHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBossHelpReq::MergeFrom(const SendBossHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBossHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBossHelpReq::CopyFrom(const SendBossHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBossHelpReq::IsInitialized() const {

  return true;
}

void SendBossHelpReq::Swap(SendBossHelpReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBossHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBossHelpReq_descriptor_;
  metadata.reflection = SendBossHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBossHelpRsp::kRetFieldNumber;
const int SendBossHelpRsp::kBossIdFieldNumber;
#endif  // !_MSC_VER

SendBossHelpRsp::SendBossHelpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendBossHelpRsp::InitAsDefaultInstance() {
}

SendBossHelpRsp::SendBossHelpRsp(const SendBossHelpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendBossHelpRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBossHelpRsp::~SendBossHelpRsp() {
  SharedDtor();
}

void SendBossHelpRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendBossHelpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBossHelpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBossHelpRsp_descriptor_;
}

const SendBossHelpRsp& SendBossHelpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Assist_2eproto();
  return *default_instance_;
}

SendBossHelpRsp* SendBossHelpRsp::default_instance_ = NULL;

SendBossHelpRsp* SendBossHelpRsp::New() const {
  return new SendBossHelpRsp;
}

void SendBossHelpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    bossid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBossHelpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendBossHelpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendBossHelpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendBossHelpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBossHelpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBossHelpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBossHelpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBossHelpRsp::MergeFrom(const SendBossHelpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBossHelpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBossHelpRsp::CopyFrom(const SendBossHelpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBossHelpRsp::IsInitialized() const {

  return true;
}

void SendBossHelpRsp::Swap(SendBossHelpRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBossHelpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBossHelpRsp_descriptor_;
  metadata.reflection = SendBossHelpRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
