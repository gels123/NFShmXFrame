// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: headPortrait.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "headPortrait.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* headPortraitheadattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  headPortraitheadattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* headPortraithead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  headPortraithead_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_headPortraithead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_headPortraithead_reflection_ = NULL;
const ::google::protobuf::Descriptor* headPortraitframeattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  headPortraitframeattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* headPortraitframe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  headPortraitframe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_headPortraitframe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_headPortraitframe_reflection_ = NULL;
const ::google::protobuf::Descriptor* headPortraitbubbleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  headPortraitbubbleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* headPortraitbubble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  headPortraitbubble_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_headPortraitbubble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_headPortraitbubble_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_headPortrait_2eproto() {
  protobuf_AddDesc_headPortrait_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "headPortrait.proto");
  GOOGLE_CHECK(file != NULL);
  headPortraitheadattributeDesc_descriptor_ = file->message_type(0);
  static const int headPortraitheadattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitheadattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitheadattributeDesc, value_),
  };
  headPortraitheadattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      headPortraitheadattributeDesc_descriptor_,
      headPortraitheadattributeDesc::default_instance_,
      headPortraitheadattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitheadattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitheadattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(headPortraitheadattributeDesc));
  headPortraithead_descriptor_ = file->message_type(1);
  static const int headPortraithead_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, professionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, attribute_),
  };
  headPortraithead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      headPortraithead_descriptor_,
      headPortraithead::default_instance_,
      headPortraithead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraithead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(headPortraithead));
  Sheet_headPortraithead_descriptor_ = file->message_type(2);
  static const int Sheet_headPortraithead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraithead, headportraithead_list_),
  };
  Sheet_headPortraithead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_headPortraithead_descriptor_,
      Sheet_headPortraithead::default_instance_,
      Sheet_headPortraithead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraithead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraithead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_headPortraithead));
  headPortraitframeattributeDesc_descriptor_ = file->message_type(3);
  static const int headPortraitframeattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframeattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframeattributeDesc, value_),
  };
  headPortraitframeattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      headPortraitframeattributeDesc_descriptor_,
      headPortraitframeattributeDesc::default_instance_,
      headPortraitframeattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframeattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframeattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(headPortraitframeattributeDesc));
  headPortraitframe_descriptor_ = file->message_type(4);
  static const int headPortraitframe_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, professionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, attribute_),
  };
  headPortraitframe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      headPortraitframe_descriptor_,
      headPortraitframe::default_instance_,
      headPortraitframe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitframe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(headPortraitframe));
  Sheet_headPortraitframe_descriptor_ = file->message_type(5);
  static const int Sheet_headPortraitframe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraitframe, headportraitframe_list_),
  };
  Sheet_headPortraitframe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_headPortraitframe_descriptor_,
      Sheet_headPortraitframe::default_instance_,
      Sheet_headPortraitframe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraitframe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraitframe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_headPortraitframe));
  headPortraitbubbleattributeDesc_descriptor_ = file->message_type(6);
  static const int headPortraitbubbleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubbleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubbleattributeDesc, value_),
  };
  headPortraitbubbleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      headPortraitbubbleattributeDesc_descriptor_,
      headPortraitbubbleattributeDesc::default_instance_,
      headPortraitbubbleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubbleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubbleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(headPortraitbubbleattributeDesc));
  headPortraitbubble_descriptor_ = file->message_type(7);
  static const int headPortraitbubble_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, professionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, attribute_),
  };
  headPortraitbubble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      headPortraitbubble_descriptor_,
      headPortraitbubble::default_instance_,
      headPortraitbubble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(headPortraitbubble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(headPortraitbubble));
  Sheet_headPortraitbubble_descriptor_ = file->message_type(8);
  static const int Sheet_headPortraitbubble_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraitbubble, headportraitbubble_list_),
  };
  Sheet_headPortraitbubble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_headPortraitbubble_descriptor_,
      Sheet_headPortraitbubble::default_instance_,
      Sheet_headPortraitbubble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraitbubble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_headPortraitbubble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_headPortraitbubble));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_headPortrait_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    headPortraitheadattributeDesc_descriptor_, &headPortraitheadattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    headPortraithead_descriptor_, &headPortraithead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_headPortraithead_descriptor_, &Sheet_headPortraithead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    headPortraitframeattributeDesc_descriptor_, &headPortraitframeattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    headPortraitframe_descriptor_, &headPortraitframe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_headPortraitframe_descriptor_, &Sheet_headPortraitframe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    headPortraitbubbleattributeDesc_descriptor_, &headPortraitbubbleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    headPortraitbubble_descriptor_, &headPortraitbubble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_headPortraitbubble_descriptor_, &Sheet_headPortraitbubble::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_headPortrait_2eproto() {
  delete headPortraitheadattributeDesc::default_instance_;
  delete headPortraitheadattributeDesc_reflection_;
  delete headPortraithead::default_instance_;
  delete headPortraithead_reflection_;
  delete Sheet_headPortraithead::default_instance_;
  delete Sheet_headPortraithead_reflection_;
  delete headPortraitframeattributeDesc::default_instance_;
  delete headPortraitframeattributeDesc_reflection_;
  delete headPortraitframe::default_instance_;
  delete headPortraitframe_reflection_;
  delete Sheet_headPortraitframe::default_instance_;
  delete Sheet_headPortraitframe_reflection_;
  delete headPortraitbubbleattributeDesc::default_instance_;
  delete headPortraitbubbleattributeDesc_reflection_;
  delete headPortraitbubble::default_instance_;
  delete headPortraitbubble_reflection_;
  delete Sheet_headPortraitbubble::default_instance_;
  delete Sheet_headPortraitbubble_reflection_;
}

void protobuf_AddDesc_headPortrait_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022headPortrait.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"Q\n\035headPortraitheadattribu"
    "teDesc\022\030\n\004type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005valu"
    "e\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\201\004\n\020headPortraithead\022\030\n"
    "\002ID\030\001 \001(\003B\014\302\377\024\010\345\244\264\345\203\217ID\022\"\n\004name\030\002 \001(\tB\024\302"
    "\377\024\014\345\244\264\345\203\217\345\220\215\347\247\260\220\301\024<\022!\n\007quality\030\003 \001(\005B\020\302\377"
    "\024\014\345\244\264\345\203\217\345\223\201\350\264\250\022-\n\017professionLimit\030\004 \001(\tB"
    "\024\302\377\024\014\350\201\214\344\270\232\351\231\220\345\210\266\220\301\024<\022*\n\016activationItem\030"
    "\005 \001(\003B\022\302\377\024\016\346\277\200\346\264\273\351\201\223\345\205\267ID\022-\n\ractivationN"
    "um\030\006 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\022\"\n\006star"
    "Id\030\007 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022,\n\007starNum\030"
    "\010 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\310\001\022&\n\006st"
    "arUp\030\t \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022<\n\007st"
    "arBer\030\n \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345\261\236\346\200\247\345\242\236\345\212"
    "\240\347\232\204\347\231\276\345\210\206\346\257\224\345\200\274\022J\n\tattribute\030\013 \003(\0132\'.pr"
    "oto_ff.headPortraitheadattributeDescB\016\302\377"
    "\024\006\345\261\236\346\200\247\210\301\024\006\"Y\n\026Sheet_headPortraithead\022\?"
    "\n\025headPortraithead_List\030\001 \003(\0132\032.proto_ff"
    ".headPortraitheadB\004\210\301\024\024\"R\n\036headPortraitf"
    "rameattributeDesc\022\030\n\004type\030\001 \001(\005B\n\302\377\024\006\347\261\273"
    "\345\236\213\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\203\004\n\021headPort"
    "raitframe\022\030\n\002ID\030\001 \001(\003B\014\302\377\024\010\350\276\271\346\241\206ID\022\"\n\004n"
    "ame\030\002 \001(\tB\024\302\377\024\014\350\276\271\346\241\206\345\220\215\347\247\260\220\301\024<\022!\n\007quali"
    "ty\030\003 \001(\005B\020\302\377\024\014\350\276\271\346\241\206\345\223\201\350\264\250\022-\n\017profession"
    "Limit\030\004 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\351\231\220\345\210\266\220\301\024<\022*\n\016act"
    "ivationItem\030\005 \001(\003B\022\302\377\024\016\346\277\200\346\264\273\351\201\223\345\205\267ID\022-\n"
    "\ractivationNum\030\006 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225"
    "\260\351\207\217\022\"\n\006starId\030\007 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id"
    "\022,\n\007starNum\030\010 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207"
    "\217\220\301\024\310\001\022&\n\006starUp\030\t \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247"
    "\344\270\212\351\231\220\022<\n\007starBer\030\n \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230"
    "\237\345\261\236\346\200\247\345\242\236\345\212\240\347\232\204\347\231\276\345\210\206\346\257\224\345\200\274\022K\n\tattribut"
    "e\030\013 \003(\0132(.proto_ff.headPortraitframeattr"
    "ibuteDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006\"\\\n\027Sheet_headP"
    "ortraitframe\022A\n\026headPortraitframe_List\030\001"
    " \003(\0132\033.proto_ff.headPortraitframeB\004\210\301\024\024\""
    "S\n\037headPortraitbubbleattributeDesc\022\030\n\004ty"
    "pe\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005value\030\002 \001(\005B\007\302\377\024"
    "\003\345\200\274\"\205\004\n\022headPortraitbubble\022\030\n\002ID\030\001 \001(\003B"
    "\014\302\377\024\010\346\260\224\346\263\241ID\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\346\260\224\346\263\241\345"
    "\220\215\347\247\260\220\301\024<\022!\n\007quality\030\003 \001(\005B\020\302\377\024\014\346\260\224\346\263\241\345\223"
    "\201\350\264\250\022-\n\017professionLimit\030\004 \001(\tB\024\302\377\024\014\350\201\214\344\270"
    "\232\351\231\220\345\210\266\220\301\024<\022*\n\016activationItem\030\005 \001(\003B\022\302\377\024"
    "\016\346\277\200\346\264\273\351\201\223\345\205\267ID\022-\n\ractivationNum\030\006 \001(\005B\026"
    "\302\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\022\"\n\006starId\030\007 \001(\003B\022"
    "\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022,\n\007starNum\030\010 \001(\tB\033\302\377\024"
    "\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\310\001\022&\n\006starUp\030\t \001(\005"
    "B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022<\n\007starBer\030\n \001("
    "\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345\261\236\346\200\247\345\242\236\345\212\240\347\232\204\347\231\276\345\210\206"
    "\346\257\224\345\200\274\022L\n\tattribute\030\013 \003(\0132).proto_ff.hea"
    "dPortraitbubbleattributeDescB\016\302\377\024\006\345\261\236\346\200\247"
    "\210\301\024\006\"_\n\030Sheet_headPortraitbubble\022C\n\027head"
    "Portraitbubble_List\030\001 \003(\0132\034.proto_ff.hea"
    "dPortraitbubbleB\004\210\301\024\024", 2141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "headPortrait.proto", &protobuf_RegisterTypes);
  headPortraitheadattributeDesc::default_instance_ = new headPortraitheadattributeDesc();
  headPortraithead::default_instance_ = new headPortraithead();
  Sheet_headPortraithead::default_instance_ = new Sheet_headPortraithead();
  headPortraitframeattributeDesc::default_instance_ = new headPortraitframeattributeDesc();
  headPortraitframe::default_instance_ = new headPortraitframe();
  Sheet_headPortraitframe::default_instance_ = new Sheet_headPortraitframe();
  headPortraitbubbleattributeDesc::default_instance_ = new headPortraitbubbleattributeDesc();
  headPortraitbubble::default_instance_ = new headPortraitbubble();
  Sheet_headPortraitbubble::default_instance_ = new Sheet_headPortraitbubble();
  headPortraitheadattributeDesc::default_instance_->InitAsDefaultInstance();
  headPortraithead::default_instance_->InitAsDefaultInstance();
  Sheet_headPortraithead::default_instance_->InitAsDefaultInstance();
  headPortraitframeattributeDesc::default_instance_->InitAsDefaultInstance();
  headPortraitframe::default_instance_->InitAsDefaultInstance();
  Sheet_headPortraitframe::default_instance_->InitAsDefaultInstance();
  headPortraitbubbleattributeDesc::default_instance_->InitAsDefaultInstance();
  headPortraitbubble::default_instance_->InitAsDefaultInstance();
  Sheet_headPortraitbubble::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_headPortrait_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_headPortrait_2eproto {
  StaticDescriptorInitializer_headPortrait_2eproto() {
    protobuf_AddDesc_headPortrait_2eproto();
  }
} static_descriptor_initializer_headPortrait_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int headPortraitheadattributeDesc::kTypeFieldNumber;
const int headPortraitheadattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

headPortraitheadattributeDesc::headPortraitheadattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void headPortraitheadattributeDesc::InitAsDefaultInstance() {
}

headPortraitheadattributeDesc::headPortraitheadattributeDesc(const headPortraitheadattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void headPortraitheadattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

headPortraitheadattributeDesc::~headPortraitheadattributeDesc() {
  SharedDtor();
}

void headPortraitheadattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void headPortraitheadattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* headPortraitheadattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return headPortraitheadattributeDesc_descriptor_;
}

const headPortraitheadattributeDesc& headPortraitheadattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

headPortraitheadattributeDesc* headPortraitheadattributeDesc::default_instance_ = NULL;

headPortraitheadattributeDesc* headPortraitheadattributeDesc::New() const {
  return new headPortraitheadattributeDesc;
}

void headPortraitheadattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool headPortraitheadattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void headPortraitheadattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* headPortraitheadattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int headPortraitheadattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void headPortraitheadattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const headPortraitheadattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const headPortraitheadattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void headPortraitheadattributeDesc::MergeFrom(const headPortraitheadattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void headPortraitheadattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void headPortraitheadattributeDesc::CopyFrom(const headPortraitheadattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool headPortraitheadattributeDesc::IsInitialized() const {

  return true;
}

void headPortraitheadattributeDesc::Swap(headPortraitheadattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata headPortraitheadattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = headPortraitheadattributeDesc_descriptor_;
  metadata.reflection = headPortraitheadattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int headPortraithead::kIDFieldNumber;
const int headPortraithead::kNameFieldNumber;
const int headPortraithead::kQualityFieldNumber;
const int headPortraithead::kProfessionLimitFieldNumber;
const int headPortraithead::kActivationItemFieldNumber;
const int headPortraithead::kActivationNumFieldNumber;
const int headPortraithead::kStarIdFieldNumber;
const int headPortraithead::kStarNumFieldNumber;
const int headPortraithead::kStarUpFieldNumber;
const int headPortraithead::kStarBerFieldNumber;
const int headPortraithead::kAttributeFieldNumber;
#endif  // !_MSC_VER

headPortraithead::headPortraithead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void headPortraithead::InitAsDefaultInstance() {
}

headPortraithead::headPortraithead(const headPortraithead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void headPortraithead::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  professionlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activationitem_ = GOOGLE_LONGLONG(0);
  activationnum_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starup_ = 0;
  starber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

headPortraithead::~headPortraithead() {
  SharedDtor();
}

void headPortraithead::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (professionlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete professionlimit_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (this != default_instance_) {
  }
}

void headPortraithead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* headPortraithead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return headPortraithead_descriptor_;
}

const headPortraithead& headPortraithead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

headPortraithead* headPortraithead::default_instance_ = NULL;

headPortraithead* headPortraithead::New() const {
  return new headPortraithead;
}

void headPortraithead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    if (has_professionlimit()) {
      if (professionlimit_ != &::google::protobuf::internal::kEmptyString) {
        professionlimit_->clear();
      }
    }
    activationitem_ = GOOGLE_LONGLONG(0);
    activationnum_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starup_ = 0;
    starber_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool headPortraithead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_professionLimit;
        break;
      }

      // optional string professionLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_professionLimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_professionlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->professionlimit().data(), this->professionlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_activationItem;
        break;
      }

      // optional int64 activationItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activationItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activationitem_)));
          set_has_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_activationNum;
        break;
      }

      // optional int32 activationNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activationNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activationnum_)));
          set_has_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_starId;
        break;
      }

      // optional int64 starId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_starNum;
        break;
      }

      // optional string starNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_starUp;
        break;
      }

      // optional int32 starUp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starup_)));
          set_has_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_starBer;
        break;
      }

      // optional int32 starBer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starber_)));
          set_has_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.headPortraitheadattributeDesc attribute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void headPortraithead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional string professionLimit = 4;
  if (has_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionlimit().data(), this->professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->professionlimit(), output);
  }

  // optional int64 activationItem = 5;
  if (has_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->activationitem(), output);
  }

  // optional int32 activationNum = 6;
  if (has_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activationnum(), output);
  }

  // optional int64 starId = 7;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->starid(), output);
  }

  // optional string starNum = 8;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->starnum(), output);
  }

  // optional int32 starUp = 9;
  if (has_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->starup(), output);
  }

  // optional int32 starBer = 10;
  if (has_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->starber(), output);
  }

  // repeated .proto_ff.headPortraitheadattributeDesc attribute = 11;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* headPortraithead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional string professionLimit = 4;
  if (has_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionlimit().data(), this->professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->professionlimit(), target);
  }

  // optional int64 activationItem = 5;
  if (has_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->activationitem(), target);
  }

  // optional int32 activationNum = 6;
  if (has_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activationnum(), target);
  }

  // optional int64 starId = 7;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->starid(), target);
  }

  // optional string starNum = 8;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->starnum(), target);
  }

  // optional int32 starUp = 9;
  if (has_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->starup(), target);
  }

  // optional int32 starBer = 10;
  if (has_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->starber(), target);
  }

  // repeated .proto_ff.headPortraitheadattributeDesc attribute = 11;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int headPortraithead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional string professionLimit = 4;
    if (has_professionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->professionlimit());
    }

    // optional int64 activationItem = 5;
    if (has_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activationitem());
    }

    // optional int32 activationNum = 6;
    if (has_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activationnum());
    }

    // optional int64 starId = 7;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

    // optional string starNum = 8;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 starUp = 9;
    if (has_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starup());
    }

    // optional int32 starBer = 10;
    if (has_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starber());
    }

  }
  // repeated .proto_ff.headPortraitheadattributeDesc attribute = 11;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void headPortraithead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const headPortraithead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const headPortraithead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void headPortraithead::MergeFrom(const headPortraithead& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_professionlimit()) {
      set_professionlimit(from.professionlimit());
    }
    if (from.has_activationitem()) {
      set_activationitem(from.activationitem());
    }
    if (from.has_activationnum()) {
      set_activationnum(from.activationnum());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starup()) {
      set_starup(from.starup());
    }
    if (from.has_starber()) {
      set_starber(from.starber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void headPortraithead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void headPortraithead::CopyFrom(const headPortraithead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool headPortraithead::IsInitialized() const {

  return true;
}

void headPortraithead::Swap(headPortraithead* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(professionlimit_, other->professionlimit_);
    std::swap(activationitem_, other->activationitem_);
    std::swap(activationnum_, other->activationnum_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(starup_, other->starup_);
    std::swap(starber_, other->starber_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata headPortraithead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = headPortraithead_descriptor_;
  metadata.reflection = headPortraithead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_headPortraithead::kHeadPortraitheadListFieldNumber;
#endif  // !_MSC_VER

Sheet_headPortraithead::Sheet_headPortraithead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_headPortraithead::InitAsDefaultInstance() {
}

Sheet_headPortraithead::Sheet_headPortraithead(const Sheet_headPortraithead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_headPortraithead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_headPortraithead::~Sheet_headPortraithead() {
  SharedDtor();
}

void Sheet_headPortraithead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_headPortraithead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_headPortraithead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_headPortraithead_descriptor_;
}

const Sheet_headPortraithead& Sheet_headPortraithead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

Sheet_headPortraithead* Sheet_headPortraithead::default_instance_ = NULL;

Sheet_headPortraithead* Sheet_headPortraithead::New() const {
  return new Sheet_headPortraithead;
}

void Sheet_headPortraithead::Clear() {
  headportraithead_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_headPortraithead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.headPortraithead headPortraithead_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headPortraithead_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headportraithead_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_headPortraithead_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_headPortraithead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.headPortraithead headPortraithead_List = 1;
  for (int i = 0; i < this->headportraithead_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->headportraithead_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_headPortraithead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.headPortraithead headPortraithead_List = 1;
  for (int i = 0; i < this->headportraithead_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->headportraithead_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_headPortraithead::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.headPortraithead headPortraithead_List = 1;
  total_size += 1 * this->headportraithead_list_size();
  for (int i = 0; i < this->headportraithead_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headportraithead_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_headPortraithead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_headPortraithead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_headPortraithead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_headPortraithead::MergeFrom(const Sheet_headPortraithead& from) {
  GOOGLE_CHECK_NE(&from, this);
  headportraithead_list_.MergeFrom(from.headportraithead_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_headPortraithead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_headPortraithead::CopyFrom(const Sheet_headPortraithead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_headPortraithead::IsInitialized() const {

  return true;
}

void Sheet_headPortraithead::Swap(Sheet_headPortraithead* other) {
  if (other != this) {
    headportraithead_list_.Swap(&other->headportraithead_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_headPortraithead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_headPortraithead_descriptor_;
  metadata.reflection = Sheet_headPortraithead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int headPortraitframeattributeDesc::kTypeFieldNumber;
const int headPortraitframeattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

headPortraitframeattributeDesc::headPortraitframeattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void headPortraitframeattributeDesc::InitAsDefaultInstance() {
}

headPortraitframeattributeDesc::headPortraitframeattributeDesc(const headPortraitframeattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void headPortraitframeattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

headPortraitframeattributeDesc::~headPortraitframeattributeDesc() {
  SharedDtor();
}

void headPortraitframeattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void headPortraitframeattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* headPortraitframeattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return headPortraitframeattributeDesc_descriptor_;
}

const headPortraitframeattributeDesc& headPortraitframeattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

headPortraitframeattributeDesc* headPortraitframeattributeDesc::default_instance_ = NULL;

headPortraitframeattributeDesc* headPortraitframeattributeDesc::New() const {
  return new headPortraitframeattributeDesc;
}

void headPortraitframeattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool headPortraitframeattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void headPortraitframeattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* headPortraitframeattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int headPortraitframeattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void headPortraitframeattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const headPortraitframeattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const headPortraitframeattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void headPortraitframeattributeDesc::MergeFrom(const headPortraitframeattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void headPortraitframeattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void headPortraitframeattributeDesc::CopyFrom(const headPortraitframeattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool headPortraitframeattributeDesc::IsInitialized() const {

  return true;
}

void headPortraitframeattributeDesc::Swap(headPortraitframeattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata headPortraitframeattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = headPortraitframeattributeDesc_descriptor_;
  metadata.reflection = headPortraitframeattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int headPortraitframe::kIDFieldNumber;
const int headPortraitframe::kNameFieldNumber;
const int headPortraitframe::kQualityFieldNumber;
const int headPortraitframe::kProfessionLimitFieldNumber;
const int headPortraitframe::kActivationItemFieldNumber;
const int headPortraitframe::kActivationNumFieldNumber;
const int headPortraitframe::kStarIdFieldNumber;
const int headPortraitframe::kStarNumFieldNumber;
const int headPortraitframe::kStarUpFieldNumber;
const int headPortraitframe::kStarBerFieldNumber;
const int headPortraitframe::kAttributeFieldNumber;
#endif  // !_MSC_VER

headPortraitframe::headPortraitframe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void headPortraitframe::InitAsDefaultInstance() {
}

headPortraitframe::headPortraitframe(const headPortraitframe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void headPortraitframe::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  professionlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activationitem_ = GOOGLE_LONGLONG(0);
  activationnum_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starup_ = 0;
  starber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

headPortraitframe::~headPortraitframe() {
  SharedDtor();
}

void headPortraitframe::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (professionlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete professionlimit_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (this != default_instance_) {
  }
}

void headPortraitframe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* headPortraitframe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return headPortraitframe_descriptor_;
}

const headPortraitframe& headPortraitframe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

headPortraitframe* headPortraitframe::default_instance_ = NULL;

headPortraitframe* headPortraitframe::New() const {
  return new headPortraitframe;
}

void headPortraitframe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    if (has_professionlimit()) {
      if (professionlimit_ != &::google::protobuf::internal::kEmptyString) {
        professionlimit_->clear();
      }
    }
    activationitem_ = GOOGLE_LONGLONG(0);
    activationnum_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starup_ = 0;
    starber_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool headPortraitframe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_professionLimit;
        break;
      }

      // optional string professionLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_professionLimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_professionlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->professionlimit().data(), this->professionlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_activationItem;
        break;
      }

      // optional int64 activationItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activationItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activationitem_)));
          set_has_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_activationNum;
        break;
      }

      // optional int32 activationNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activationNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activationnum_)));
          set_has_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_starId;
        break;
      }

      // optional int64 starId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_starNum;
        break;
      }

      // optional string starNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_starUp;
        break;
      }

      // optional int32 starUp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starup_)));
          set_has_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_starBer;
        break;
      }

      // optional int32 starBer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starber_)));
          set_has_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.headPortraitframeattributeDesc attribute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void headPortraitframe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional string professionLimit = 4;
  if (has_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionlimit().data(), this->professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->professionlimit(), output);
  }

  // optional int64 activationItem = 5;
  if (has_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->activationitem(), output);
  }

  // optional int32 activationNum = 6;
  if (has_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activationnum(), output);
  }

  // optional int64 starId = 7;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->starid(), output);
  }

  // optional string starNum = 8;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->starnum(), output);
  }

  // optional int32 starUp = 9;
  if (has_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->starup(), output);
  }

  // optional int32 starBer = 10;
  if (has_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->starber(), output);
  }

  // repeated .proto_ff.headPortraitframeattributeDesc attribute = 11;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* headPortraitframe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional string professionLimit = 4;
  if (has_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionlimit().data(), this->professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->professionlimit(), target);
  }

  // optional int64 activationItem = 5;
  if (has_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->activationitem(), target);
  }

  // optional int32 activationNum = 6;
  if (has_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activationnum(), target);
  }

  // optional int64 starId = 7;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->starid(), target);
  }

  // optional string starNum = 8;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->starnum(), target);
  }

  // optional int32 starUp = 9;
  if (has_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->starup(), target);
  }

  // optional int32 starBer = 10;
  if (has_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->starber(), target);
  }

  // repeated .proto_ff.headPortraitframeattributeDesc attribute = 11;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int headPortraitframe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional string professionLimit = 4;
    if (has_professionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->professionlimit());
    }

    // optional int64 activationItem = 5;
    if (has_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activationitem());
    }

    // optional int32 activationNum = 6;
    if (has_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activationnum());
    }

    // optional int64 starId = 7;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

    // optional string starNum = 8;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 starUp = 9;
    if (has_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starup());
    }

    // optional int32 starBer = 10;
    if (has_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starber());
    }

  }
  // repeated .proto_ff.headPortraitframeattributeDesc attribute = 11;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void headPortraitframe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const headPortraitframe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const headPortraitframe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void headPortraitframe::MergeFrom(const headPortraitframe& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_professionlimit()) {
      set_professionlimit(from.professionlimit());
    }
    if (from.has_activationitem()) {
      set_activationitem(from.activationitem());
    }
    if (from.has_activationnum()) {
      set_activationnum(from.activationnum());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starup()) {
      set_starup(from.starup());
    }
    if (from.has_starber()) {
      set_starber(from.starber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void headPortraitframe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void headPortraitframe::CopyFrom(const headPortraitframe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool headPortraitframe::IsInitialized() const {

  return true;
}

void headPortraitframe::Swap(headPortraitframe* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(professionlimit_, other->professionlimit_);
    std::swap(activationitem_, other->activationitem_);
    std::swap(activationnum_, other->activationnum_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(starup_, other->starup_);
    std::swap(starber_, other->starber_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata headPortraitframe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = headPortraitframe_descriptor_;
  metadata.reflection = headPortraitframe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_headPortraitframe::kHeadPortraitframeListFieldNumber;
#endif  // !_MSC_VER

Sheet_headPortraitframe::Sheet_headPortraitframe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_headPortraitframe::InitAsDefaultInstance() {
}

Sheet_headPortraitframe::Sheet_headPortraitframe(const Sheet_headPortraitframe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_headPortraitframe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_headPortraitframe::~Sheet_headPortraitframe() {
  SharedDtor();
}

void Sheet_headPortraitframe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_headPortraitframe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_headPortraitframe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_headPortraitframe_descriptor_;
}

const Sheet_headPortraitframe& Sheet_headPortraitframe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

Sheet_headPortraitframe* Sheet_headPortraitframe::default_instance_ = NULL;

Sheet_headPortraitframe* Sheet_headPortraitframe::New() const {
  return new Sheet_headPortraitframe;
}

void Sheet_headPortraitframe::Clear() {
  headportraitframe_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_headPortraitframe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.headPortraitframe headPortraitframe_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headPortraitframe_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headportraitframe_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_headPortraitframe_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_headPortraitframe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.headPortraitframe headPortraitframe_List = 1;
  for (int i = 0; i < this->headportraitframe_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->headportraitframe_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_headPortraitframe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.headPortraitframe headPortraitframe_List = 1;
  for (int i = 0; i < this->headportraitframe_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->headportraitframe_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_headPortraitframe::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.headPortraitframe headPortraitframe_List = 1;
  total_size += 1 * this->headportraitframe_list_size();
  for (int i = 0; i < this->headportraitframe_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headportraitframe_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_headPortraitframe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_headPortraitframe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_headPortraitframe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_headPortraitframe::MergeFrom(const Sheet_headPortraitframe& from) {
  GOOGLE_CHECK_NE(&from, this);
  headportraitframe_list_.MergeFrom(from.headportraitframe_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_headPortraitframe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_headPortraitframe::CopyFrom(const Sheet_headPortraitframe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_headPortraitframe::IsInitialized() const {

  return true;
}

void Sheet_headPortraitframe::Swap(Sheet_headPortraitframe* other) {
  if (other != this) {
    headportraitframe_list_.Swap(&other->headportraitframe_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_headPortraitframe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_headPortraitframe_descriptor_;
  metadata.reflection = Sheet_headPortraitframe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int headPortraitbubbleattributeDesc::kTypeFieldNumber;
const int headPortraitbubbleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

headPortraitbubbleattributeDesc::headPortraitbubbleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void headPortraitbubbleattributeDesc::InitAsDefaultInstance() {
}

headPortraitbubbleattributeDesc::headPortraitbubbleattributeDesc(const headPortraitbubbleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void headPortraitbubbleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

headPortraitbubbleattributeDesc::~headPortraitbubbleattributeDesc() {
  SharedDtor();
}

void headPortraitbubbleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void headPortraitbubbleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* headPortraitbubbleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return headPortraitbubbleattributeDesc_descriptor_;
}

const headPortraitbubbleattributeDesc& headPortraitbubbleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

headPortraitbubbleattributeDesc* headPortraitbubbleattributeDesc::default_instance_ = NULL;

headPortraitbubbleattributeDesc* headPortraitbubbleattributeDesc::New() const {
  return new headPortraitbubbleattributeDesc;
}

void headPortraitbubbleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool headPortraitbubbleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void headPortraitbubbleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* headPortraitbubbleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int headPortraitbubbleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void headPortraitbubbleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const headPortraitbubbleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const headPortraitbubbleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void headPortraitbubbleattributeDesc::MergeFrom(const headPortraitbubbleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void headPortraitbubbleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void headPortraitbubbleattributeDesc::CopyFrom(const headPortraitbubbleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool headPortraitbubbleattributeDesc::IsInitialized() const {

  return true;
}

void headPortraitbubbleattributeDesc::Swap(headPortraitbubbleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata headPortraitbubbleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = headPortraitbubbleattributeDesc_descriptor_;
  metadata.reflection = headPortraitbubbleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int headPortraitbubble::kIDFieldNumber;
const int headPortraitbubble::kNameFieldNumber;
const int headPortraitbubble::kQualityFieldNumber;
const int headPortraitbubble::kProfessionLimitFieldNumber;
const int headPortraitbubble::kActivationItemFieldNumber;
const int headPortraitbubble::kActivationNumFieldNumber;
const int headPortraitbubble::kStarIdFieldNumber;
const int headPortraitbubble::kStarNumFieldNumber;
const int headPortraitbubble::kStarUpFieldNumber;
const int headPortraitbubble::kStarBerFieldNumber;
const int headPortraitbubble::kAttributeFieldNumber;
#endif  // !_MSC_VER

headPortraitbubble::headPortraitbubble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void headPortraitbubble::InitAsDefaultInstance() {
}

headPortraitbubble::headPortraitbubble(const headPortraitbubble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void headPortraitbubble::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  professionlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activationitem_ = GOOGLE_LONGLONG(0);
  activationnum_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starup_ = 0;
  starber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

headPortraitbubble::~headPortraitbubble() {
  SharedDtor();
}

void headPortraitbubble::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (professionlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete professionlimit_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (this != default_instance_) {
  }
}

void headPortraitbubble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* headPortraitbubble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return headPortraitbubble_descriptor_;
}

const headPortraitbubble& headPortraitbubble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

headPortraitbubble* headPortraitbubble::default_instance_ = NULL;

headPortraitbubble* headPortraitbubble::New() const {
  return new headPortraitbubble;
}

void headPortraitbubble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    if (has_professionlimit()) {
      if (professionlimit_ != &::google::protobuf::internal::kEmptyString) {
        professionlimit_->clear();
      }
    }
    activationitem_ = GOOGLE_LONGLONG(0);
    activationnum_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    starup_ = 0;
    starber_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool headPortraitbubble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_professionLimit;
        break;
      }

      // optional string professionLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_professionLimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_professionlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->professionlimit().data(), this->professionlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_activationItem;
        break;
      }

      // optional int64 activationItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activationItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activationitem_)));
          set_has_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_activationNum;
        break;
      }

      // optional int32 activationNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activationNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activationnum_)));
          set_has_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_starId;
        break;
      }

      // optional int64 starId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_starNum;
        break;
      }

      // optional string starNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_starUp;
        break;
      }

      // optional int32 starUp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starup_)));
          set_has_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_starBer;
        break;
      }

      // optional int32 starBer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starber_)));
          set_has_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.headPortraitbubbleattributeDesc attribute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void headPortraitbubble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional string professionLimit = 4;
  if (has_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionlimit().data(), this->professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->professionlimit(), output);
  }

  // optional int64 activationItem = 5;
  if (has_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->activationitem(), output);
  }

  // optional int32 activationNum = 6;
  if (has_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activationnum(), output);
  }

  // optional int64 starId = 7;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->starid(), output);
  }

  // optional string starNum = 8;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->starnum(), output);
  }

  // optional int32 starUp = 9;
  if (has_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->starup(), output);
  }

  // optional int32 starBer = 10;
  if (has_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->starber(), output);
  }

  // repeated .proto_ff.headPortraitbubbleattributeDesc attribute = 11;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* headPortraitbubble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional string professionLimit = 4;
  if (has_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionlimit().data(), this->professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->professionlimit(), target);
  }

  // optional int64 activationItem = 5;
  if (has_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->activationitem(), target);
  }

  // optional int32 activationNum = 6;
  if (has_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activationnum(), target);
  }

  // optional int64 starId = 7;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->starid(), target);
  }

  // optional string starNum = 8;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->starnum(), target);
  }

  // optional int32 starUp = 9;
  if (has_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->starup(), target);
  }

  // optional int32 starBer = 10;
  if (has_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->starber(), target);
  }

  // repeated .proto_ff.headPortraitbubbleattributeDesc attribute = 11;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int headPortraitbubble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional string professionLimit = 4;
    if (has_professionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->professionlimit());
    }

    // optional int64 activationItem = 5;
    if (has_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activationitem());
    }

    // optional int32 activationNum = 6;
    if (has_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activationnum());
    }

    // optional int64 starId = 7;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

    // optional string starNum = 8;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 starUp = 9;
    if (has_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starup());
    }

    // optional int32 starBer = 10;
    if (has_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starber());
    }

  }
  // repeated .proto_ff.headPortraitbubbleattributeDesc attribute = 11;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void headPortraitbubble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const headPortraitbubble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const headPortraitbubble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void headPortraitbubble::MergeFrom(const headPortraitbubble& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_professionlimit()) {
      set_professionlimit(from.professionlimit());
    }
    if (from.has_activationitem()) {
      set_activationitem(from.activationitem());
    }
    if (from.has_activationnum()) {
      set_activationnum(from.activationnum());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_starup()) {
      set_starup(from.starup());
    }
    if (from.has_starber()) {
      set_starber(from.starber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void headPortraitbubble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void headPortraitbubble::CopyFrom(const headPortraitbubble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool headPortraitbubble::IsInitialized() const {

  return true;
}

void headPortraitbubble::Swap(headPortraitbubble* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(professionlimit_, other->professionlimit_);
    std::swap(activationitem_, other->activationitem_);
    std::swap(activationnum_, other->activationnum_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(starup_, other->starup_);
    std::swap(starber_, other->starber_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata headPortraitbubble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = headPortraitbubble_descriptor_;
  metadata.reflection = headPortraitbubble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_headPortraitbubble::kHeadPortraitbubbleListFieldNumber;
#endif  // !_MSC_VER

Sheet_headPortraitbubble::Sheet_headPortraitbubble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_headPortraitbubble::InitAsDefaultInstance() {
}

Sheet_headPortraitbubble::Sheet_headPortraitbubble(const Sheet_headPortraitbubble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_headPortraitbubble::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_headPortraitbubble::~Sheet_headPortraitbubble() {
  SharedDtor();
}

void Sheet_headPortraitbubble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_headPortraitbubble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_headPortraitbubble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_headPortraitbubble_descriptor_;
}

const Sheet_headPortraitbubble& Sheet_headPortraitbubble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

Sheet_headPortraitbubble* Sheet_headPortraitbubble::default_instance_ = NULL;

Sheet_headPortraitbubble* Sheet_headPortraitbubble::New() const {
  return new Sheet_headPortraitbubble;
}

void Sheet_headPortraitbubble::Clear() {
  headportraitbubble_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_headPortraitbubble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.headPortraitbubble headPortraitbubble_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headPortraitbubble_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headportraitbubble_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_headPortraitbubble_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_headPortraitbubble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.headPortraitbubble headPortraitbubble_List = 1;
  for (int i = 0; i < this->headportraitbubble_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->headportraitbubble_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_headPortraitbubble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.headPortraitbubble headPortraitbubble_List = 1;
  for (int i = 0; i < this->headportraitbubble_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->headportraitbubble_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_headPortraitbubble::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.headPortraitbubble headPortraitbubble_List = 1;
  total_size += 1 * this->headportraitbubble_list_size();
  for (int i = 0; i < this->headportraitbubble_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headportraitbubble_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_headPortraitbubble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_headPortraitbubble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_headPortraitbubble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_headPortraitbubble::MergeFrom(const Sheet_headPortraitbubble& from) {
  GOOGLE_CHECK_NE(&from, this);
  headportraitbubble_list_.MergeFrom(from.headportraitbubble_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_headPortraitbubble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_headPortraitbubble::CopyFrom(const Sheet_headPortraitbubble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_headPortraitbubble::IsInitialized() const {

  return true;
}

void Sheet_headPortraitbubble::Swap(Sheet_headPortraitbubble* other) {
  if (other != this) {
    headportraitbubble_list_.Swap(&other->headportraitbubble_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_headPortraitbubble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_headPortraitbubble_descriptor_;
  metadata.reflection = Sheet_headPortraitbubble_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
