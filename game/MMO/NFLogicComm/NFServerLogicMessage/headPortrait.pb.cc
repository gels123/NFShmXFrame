// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: headPortrait.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "headPortrait.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_HeadportraitHeadAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_HeadportraitHeadAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_HeadportraitHeadActiveattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_HeadportraitHeadActiveattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_HeadportraitHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_HeadportraitHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_HeadportraitHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_HeadportraitHead_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_headPortrait_2eproto() {
  protobuf_AddDesc_headPortrait_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "headPortrait.proto");
  GOOGLE_CHECK(file != NULL);
  E_HeadportraitHeadAttributeDesc_descriptor_ = file->message_type(0);
  static const int E_HeadportraitHeadAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHeadAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHeadAttributeDesc, m_value_),
  };
  E_HeadportraitHeadAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_HeadportraitHeadAttributeDesc_descriptor_,
      E_HeadportraitHeadAttributeDesc::default_instance_,
      E_HeadportraitHeadAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHeadAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHeadAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_HeadportraitHeadAttributeDesc));
  E_HeadportraitHeadActiveattributeDesc_descriptor_ = file->message_type(1);
  static const int E_HeadportraitHeadActiveattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHeadActiveattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHeadActiveattributeDesc, m_value_),
  };
  E_HeadportraitHeadActiveattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_HeadportraitHeadActiveattributeDesc_descriptor_,
      E_HeadportraitHeadActiveattributeDesc::default_instance_,
      E_HeadportraitHeadActiveattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHeadActiveattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHeadActiveattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_HeadportraitHeadActiveattributeDesc));
  E_HeadportraitHead_descriptor_ = file->message_type(2);
  static const int E_HeadportraitHead_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_professionlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, m_activeattribute_),
  };
  E_HeadportraitHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_HeadportraitHead_descriptor_,
      E_HeadportraitHead::default_instance_,
      E_HeadportraitHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_HeadportraitHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_HeadportraitHead));
  Sheet_HeadportraitHead_descriptor_ = file->message_type(3);
  static const int Sheet_HeadportraitHead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_HeadportraitHead, e_headportraithead_list_),
  };
  Sheet_HeadportraitHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_HeadportraitHead_descriptor_,
      Sheet_HeadportraitHead::default_instance_,
      Sheet_HeadportraitHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_HeadportraitHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_HeadportraitHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_HeadportraitHead));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_headPortrait_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_HeadportraitHeadAttributeDesc_descriptor_, &E_HeadportraitHeadAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_HeadportraitHeadActiveattributeDesc_descriptor_, &E_HeadportraitHeadActiveattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_HeadportraitHead_descriptor_, &E_HeadportraitHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_HeadportraitHead_descriptor_, &Sheet_HeadportraitHead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_headPortrait_2eproto() {
  delete E_HeadportraitHeadAttributeDesc::default_instance_;
  delete E_HeadportraitHeadAttributeDesc_reflection_;
  delete E_HeadportraitHeadActiveattributeDesc::default_instance_;
  delete E_HeadportraitHeadActiveattributeDesc_reflection_;
  delete E_HeadportraitHead::default_instance_;
  delete E_HeadportraitHead_reflection_;
  delete Sheet_HeadportraitHead::default_instance_;
  delete Sheet_HeadportraitHead_reflection_;
}

void protobuf_AddDesc_headPortrait_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022headPortrait.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"W\n\037E_HeadportraitHeadAttri"
    "buteDesc\022\032\n\006m_type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\030\n\007"
    "m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"]\n%E_Headportrait"
    "HeadActiveattributeDesc\022\032\n\006m_type\030\001 \001(\005B"
    "\n\302\377\024\006\347\261\273\345\236\213\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\231\005"
    "\n\022E_HeadportraitHead\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010"
    "\345\244\264\345\203\217ID\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\345\244\264\345\203\217\345\220\215\347"
    "\247\260\220\301\024<\022 \n\006m_type\030\003 \001(\005B\020\302\377\024\014\345\244\226\350\247\202\347\261\273\345\236\213"
    "\022#\n\tm_quality\030\004 \001(\005B\020\302\377\024\014\345\244\264\345\203\217\345\223\201\350\264\250\022/\n"
    "\021m_professionlimit\030\005 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\351\231\220\345"
    "\210\266\220\301\024<\022,\n\020m_activationitem\030\006 \001(\003B\022\302\377\024\016\346\277"
    "\200\346\264\273\351\201\223\345\205\267ID\022/\n\017m_activationnum\030\007 \001(\005B\026\302"
    "\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\022$\n\010m_starid\030\010 \001(\003B"
    "\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022.\n\tm_starnum\030\t \001(\tB\033"
    "\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\254\002\022(\n\010m_starup\030"
    "\n \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022>\n\tm_starb"
    "er\030\013 \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345\261\236\346\200\247\345\242\236\345\212\240\347\232"
    "\204\347\231\276\345\210\206\346\257\224\345\200\274\022N\n\013m_attribute\030\014 \003(\0132).pro"
    "to_ff.E_HeadportraitHeadAttributeDescB\016\302"
    "\377\024\006\345\261\236\346\200\247\210\301\024\006\022Z\n\021m_activeattribute\030\r \003(\013"
    "2/.proto_ff.E_HeadportraitHeadActiveattr"
    "ibuteDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006\"]\n\026Sheet_Headp"
    "ortraitHead\022C\n\027E_HeadportraitHead_List\030\001"
    " \003(\0132\034.proto_ff.E_HeadportraitHeadB\004\210\301\024d", 1000);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "headPortrait.proto", &protobuf_RegisterTypes);
  E_HeadportraitHeadAttributeDesc::default_instance_ = new E_HeadportraitHeadAttributeDesc();
  E_HeadportraitHeadActiveattributeDesc::default_instance_ = new E_HeadportraitHeadActiveattributeDesc();
  E_HeadportraitHead::default_instance_ = new E_HeadportraitHead();
  Sheet_HeadportraitHead::default_instance_ = new Sheet_HeadportraitHead();
  E_HeadportraitHeadAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_HeadportraitHeadActiveattributeDesc::default_instance_->InitAsDefaultInstance();
  E_HeadportraitHead::default_instance_->InitAsDefaultInstance();
  Sheet_HeadportraitHead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_headPortrait_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_headPortrait_2eproto {
  StaticDescriptorInitializer_headPortrait_2eproto() {
    protobuf_AddDesc_headPortrait_2eproto();
  }
} static_descriptor_initializer_headPortrait_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_HeadportraitHeadAttributeDesc::kMTypeFieldNumber;
const int E_HeadportraitHeadAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_HeadportraitHeadAttributeDesc::E_HeadportraitHeadAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_HeadportraitHeadAttributeDesc::InitAsDefaultInstance() {
}

E_HeadportraitHeadAttributeDesc::E_HeadportraitHeadAttributeDesc(const E_HeadportraitHeadAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_HeadportraitHeadAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_HeadportraitHeadAttributeDesc::~E_HeadportraitHeadAttributeDesc() {
  SharedDtor();
}

void E_HeadportraitHeadAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_HeadportraitHeadAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_HeadportraitHeadAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_HeadportraitHeadAttributeDesc_descriptor_;
}

const E_HeadportraitHeadAttributeDesc& E_HeadportraitHeadAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

E_HeadportraitHeadAttributeDesc* E_HeadportraitHeadAttributeDesc::default_instance_ = NULL;

E_HeadportraitHeadAttributeDesc* E_HeadportraitHeadAttributeDesc::New() const {
  return new E_HeadportraitHeadAttributeDesc;
}

void E_HeadportraitHeadAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_HeadportraitHeadAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_HeadportraitHeadAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_HeadportraitHeadAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_HeadportraitHeadAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_HeadportraitHeadAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_HeadportraitHeadAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_HeadportraitHeadAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_HeadportraitHeadAttributeDesc::MergeFrom(const E_HeadportraitHeadAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_HeadportraitHeadAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_HeadportraitHeadAttributeDesc::CopyFrom(const E_HeadportraitHeadAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_HeadportraitHeadAttributeDesc::IsInitialized() const {

  return true;
}

void E_HeadportraitHeadAttributeDesc::Swap(E_HeadportraitHeadAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_HeadportraitHeadAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_HeadportraitHeadAttributeDesc_descriptor_;
  metadata.reflection = E_HeadportraitHeadAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_HeadportraitHeadActiveattributeDesc::kMTypeFieldNumber;
const int E_HeadportraitHeadActiveattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_HeadportraitHeadActiveattributeDesc::E_HeadportraitHeadActiveattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_HeadportraitHeadActiveattributeDesc::InitAsDefaultInstance() {
}

E_HeadportraitHeadActiveattributeDesc::E_HeadportraitHeadActiveattributeDesc(const E_HeadportraitHeadActiveattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_HeadportraitHeadActiveattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_HeadportraitHeadActiveattributeDesc::~E_HeadportraitHeadActiveattributeDesc() {
  SharedDtor();
}

void E_HeadportraitHeadActiveattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_HeadportraitHeadActiveattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_HeadportraitHeadActiveattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_HeadportraitHeadActiveattributeDesc_descriptor_;
}

const E_HeadportraitHeadActiveattributeDesc& E_HeadportraitHeadActiveattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

E_HeadportraitHeadActiveattributeDesc* E_HeadportraitHeadActiveattributeDesc::default_instance_ = NULL;

E_HeadportraitHeadActiveattributeDesc* E_HeadportraitHeadActiveattributeDesc::New() const {
  return new E_HeadportraitHeadActiveattributeDesc;
}

void E_HeadportraitHeadActiveattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_HeadportraitHeadActiveattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_HeadportraitHeadActiveattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_HeadportraitHeadActiveattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_HeadportraitHeadActiveattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_HeadportraitHeadActiveattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_HeadportraitHeadActiveattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_HeadportraitHeadActiveattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_HeadportraitHeadActiveattributeDesc::MergeFrom(const E_HeadportraitHeadActiveattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_HeadportraitHeadActiveattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_HeadportraitHeadActiveattributeDesc::CopyFrom(const E_HeadportraitHeadActiveattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_HeadportraitHeadActiveattributeDesc::IsInitialized() const {

  return true;
}

void E_HeadportraitHeadActiveattributeDesc::Swap(E_HeadportraitHeadActiveattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_HeadportraitHeadActiveattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_HeadportraitHeadActiveattributeDesc_descriptor_;
  metadata.reflection = E_HeadportraitHeadActiveattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_HeadportraitHead::kMIdFieldNumber;
const int E_HeadportraitHead::kMNameFieldNumber;
const int E_HeadportraitHead::kMTypeFieldNumber;
const int E_HeadportraitHead::kMQualityFieldNumber;
const int E_HeadportraitHead::kMProfessionlimitFieldNumber;
const int E_HeadportraitHead::kMActivationitemFieldNumber;
const int E_HeadportraitHead::kMActivationnumFieldNumber;
const int E_HeadportraitHead::kMStaridFieldNumber;
const int E_HeadportraitHead::kMStarnumFieldNumber;
const int E_HeadportraitHead::kMStarupFieldNumber;
const int E_HeadportraitHead::kMStarberFieldNumber;
const int E_HeadportraitHead::kMAttributeFieldNumber;
const int E_HeadportraitHead::kMActiveattributeFieldNumber;
#endif  // !_MSC_VER

E_HeadportraitHead::E_HeadportraitHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_HeadportraitHead::InitAsDefaultInstance() {
}

E_HeadportraitHead::E_HeadportraitHead(const E_HeadportraitHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_HeadportraitHead::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_type_ = 0;
  m_quality_ = 0;
  m_professionlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_activationitem_ = GOOGLE_LONGLONG(0);
  m_activationnum_ = 0;
  m_starid_ = GOOGLE_LONGLONG(0);
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starup_ = 0;
  m_starber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_HeadportraitHead::~E_HeadportraitHead() {
  SharedDtor();
}

void E_HeadportraitHead::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_professionlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete m_professionlimit_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (this != default_instance_) {
  }
}

void E_HeadportraitHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_HeadportraitHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_HeadportraitHead_descriptor_;
}

const E_HeadportraitHead& E_HeadportraitHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

E_HeadportraitHead* E_HeadportraitHead::default_instance_ = NULL;

E_HeadportraitHead* E_HeadportraitHead::New() const {
  return new E_HeadportraitHead;
}

void E_HeadportraitHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_type_ = 0;
    m_quality_ = 0;
    if (has_m_professionlimit()) {
      if (m_professionlimit_ != &::google::protobuf::internal::kEmptyString) {
        m_professionlimit_->clear();
      }
    }
    m_activationitem_ = GOOGLE_LONGLONG(0);
    m_activationnum_ = 0;
    m_starid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
    m_starup_ = 0;
    m_starber_ = 0;
  }
  m_attribute_.Clear();
  m_activeattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_HeadportraitHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_professionlimit;
        break;
      }

      // optional string m_professionlimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_professionlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_professionlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_professionlimit().data(), this->m_professionlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_activationitem;
        break;
      }

      // optional int64 m_activationitem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_activationitem_)));
          set_has_m_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_activationnum;
        break;
      }

      // optional int32 m_activationnum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activationnum_)));
          set_has_m_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_starid;
        break;
      }

      // optional int64 m_starid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_starnum;
        break;
      }

      // optional string m_starnum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_starup;
        break;
      }

      // optional int32 m_starup = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starup_)));
          set_has_m_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_starber;
        break;
      }

      // optional int32 m_starber = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starber_)));
          set_has_m_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_HeadportraitHeadAttributeDesc m_attribute = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_attribute;
        if (input->ExpectTag(106)) goto parse_m_activeattribute;
        break;
      }

      // repeated .proto_ff.E_HeadportraitHeadActiveattributeDesc m_activeattribute = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activeattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_activeattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_activeattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_HeadportraitHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quality(), output);
  }

  // optional string m_professionlimit = 5;
  if (has_m_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_professionlimit().data(), this->m_professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_professionlimit(), output);
  }

  // optional int64 m_activationitem = 6;
  if (has_m_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->m_activationitem(), output);
  }

  // optional int32 m_activationnum = 7;
  if (has_m_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_activationnum(), output);
  }

  // optional int64 m_starid = 8;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_starid(), output);
  }

  // optional string m_starnum = 9;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_starnum(), output);
  }

  // optional int32 m_starup = 10;
  if (has_m_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_starup(), output);
  }

  // optional int32 m_starber = 11;
  if (has_m_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_starber(), output);
  }

  // repeated .proto_ff.E_HeadportraitHeadAttributeDesc m_attribute = 12;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_attribute(i), output);
  }

  // repeated .proto_ff.E_HeadportraitHeadActiveattributeDesc m_activeattribute = 13;
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_activeattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_HeadportraitHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quality(), target);
  }

  // optional string m_professionlimit = 5;
  if (has_m_professionlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_professionlimit().data(), this->m_professionlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_professionlimit(), target);
  }

  // optional int64 m_activationitem = 6;
  if (has_m_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->m_activationitem(), target);
  }

  // optional int32 m_activationnum = 7;
  if (has_m_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_activationnum(), target);
  }

  // optional int64 m_starid = 8;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_starid(), target);
  }

  // optional string m_starnum = 9;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_starnum(), target);
  }

  // optional int32 m_starup = 10;
  if (has_m_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_starup(), target);
  }

  // optional int32 m_starber = 11;
  if (has_m_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_starber(), target);
  }

  // repeated .proto_ff.E_HeadportraitHeadAttributeDesc m_attribute = 12;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_attribute(i), target);
  }

  // repeated .proto_ff.E_HeadportraitHeadActiveattributeDesc m_activeattribute = 13;
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_activeattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_HeadportraitHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_quality = 4;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional string m_professionlimit = 5;
    if (has_m_professionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_professionlimit());
    }

    // optional int64 m_activationitem = 6;
    if (has_m_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_activationitem());
    }

    // optional int32 m_activationnum = 7;
    if (has_m_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activationnum());
    }

    // optional int64 m_starid = 8;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_starid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_starnum = 9;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

    // optional int32 m_starup = 10;
    if (has_m_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starup());
    }

    // optional int32 m_starber = 11;
    if (has_m_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starber());
    }

  }
  // repeated .proto_ff.E_HeadportraitHeadAttributeDesc m_attribute = 12;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated .proto_ff.E_HeadportraitHeadActiveattributeDesc m_activeattribute = 13;
  total_size += 1 * this->m_activeattribute_size();
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_activeattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_HeadportraitHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_HeadportraitHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_HeadportraitHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_HeadportraitHead::MergeFrom(const E_HeadportraitHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_activeattribute_.MergeFrom(from.m_activeattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_professionlimit()) {
      set_m_professionlimit(from.m_professionlimit());
    }
    if (from.has_m_activationitem()) {
      set_m_activationitem(from.m_activationitem());
    }
    if (from.has_m_activationnum()) {
      set_m_activationnum(from.m_activationnum());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_starup()) {
      set_m_starup(from.m_starup());
    }
    if (from.has_m_starber()) {
      set_m_starber(from.m_starber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_HeadportraitHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_HeadportraitHead::CopyFrom(const E_HeadportraitHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_HeadportraitHead::IsInitialized() const {

  return true;
}

void E_HeadportraitHead::Swap(E_HeadportraitHead* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_professionlimit_, other->m_professionlimit_);
    std::swap(m_activationitem_, other->m_activationitem_);
    std::swap(m_activationnum_, other->m_activationnum_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_starup_, other->m_starup_);
    std::swap(m_starber_, other->m_starber_);
    m_attribute_.Swap(&other->m_attribute_);
    m_activeattribute_.Swap(&other->m_activeattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_HeadportraitHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_HeadportraitHead_descriptor_;
  metadata.reflection = E_HeadportraitHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_HeadportraitHead::kEHeadportraitHeadListFieldNumber;
#endif  // !_MSC_VER

Sheet_HeadportraitHead::Sheet_HeadportraitHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_HeadportraitHead::InitAsDefaultInstance() {
}

Sheet_HeadportraitHead::Sheet_HeadportraitHead(const Sheet_HeadportraitHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_HeadportraitHead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_HeadportraitHead::~Sheet_HeadportraitHead() {
  SharedDtor();
}

void Sheet_HeadportraitHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_HeadportraitHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_HeadportraitHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_HeadportraitHead_descriptor_;
}

const Sheet_HeadportraitHead& Sheet_HeadportraitHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_headPortrait_2eproto();
  return *default_instance_;
}

Sheet_HeadportraitHead* Sheet_HeadportraitHead::default_instance_ = NULL;

Sheet_HeadportraitHead* Sheet_HeadportraitHead::New() const {
  return new Sheet_HeadportraitHead;
}

void Sheet_HeadportraitHead::Clear() {
  e_headportraithead_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_HeadportraitHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_HeadportraitHead E_HeadportraitHead_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_HeadportraitHead_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_headportraithead_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_HeadportraitHead_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_HeadportraitHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_HeadportraitHead E_HeadportraitHead_List = 1;
  for (int i = 0; i < this->e_headportraithead_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_headportraithead_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_HeadportraitHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_HeadportraitHead E_HeadportraitHead_List = 1;
  for (int i = 0; i < this->e_headportraithead_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_headportraithead_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_HeadportraitHead::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_HeadportraitHead E_HeadportraitHead_List = 1;
  total_size += 1 * this->e_headportraithead_list_size();
  for (int i = 0; i < this->e_headportraithead_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_headportraithead_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_HeadportraitHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_HeadportraitHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_HeadportraitHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_HeadportraitHead::MergeFrom(const Sheet_HeadportraitHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_headportraithead_list_.MergeFrom(from.e_headportraithead_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_HeadportraitHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_HeadportraitHead::CopyFrom(const Sheet_HeadportraitHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_HeadportraitHead::IsInitialized() const {

  return true;
}

void Sheet_HeadportraitHead::Swap(Sheet_HeadportraitHead* other) {
  if (other != this) {
    e_headportraithead_list_.Swap(&other->e_headportraithead_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_HeadportraitHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_HeadportraitHead_descriptor_;
  metadata.reflection = Sheet_HeadportraitHead_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
