// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serveropenactive.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serveropenactive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* serveropenactiveserviceActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serveropenactiveserviceActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_serveropenactiveserviceActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_serveropenactiveserviceActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* serveropenactivepageBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serveropenactivepageBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_serveropenactivepageBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_serveropenactivepageBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* serveropenactivepage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serveropenactivepage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_serveropenactivepage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_serveropenactivepage_reflection_ = NULL;
const ::google::protobuf::Descriptor* serveropenactivemRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serveropenactivemRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_serveropenactivemRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_serveropenactivemRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* serveropenactivemAdvanced_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serveropenactivemAdvanced_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_serveropenactivemAdvanced_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_serveropenactivemAdvanced_reflection_ = NULL;
const ::google::protobuf::Descriptor* serveropenactivemRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serveropenactivemRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_serveropenactivemRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_serveropenactivemRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* serveropenactivemGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serveropenactivemGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_serveropenactivemGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_serveropenactivemGoods_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_serveropenactive_2eproto() {
  protobuf_AddDesc_serveropenactive_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serveropenactive.proto");
  GOOGLE_CHECK(file != NULL);
  serveropenactiveserviceActivity_descriptor_ = file->message_type(0);
  static const int serveropenactiveserviceActivity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactiveserviceActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactiveserviceActivity, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactiveserviceActivity, timea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactiveserviceActivity, timeb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactiveserviceActivity, pageid_),
  };
  serveropenactiveserviceActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serveropenactiveserviceActivity_descriptor_,
      serveropenactiveserviceActivity::default_instance_,
      serveropenactiveserviceActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactiveserviceActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactiveserviceActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serveropenactiveserviceActivity));
  Sheet_serveropenactiveserviceActivity_descriptor_ = file->message_type(1);
  static const int Sheet_serveropenactiveserviceActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactiveserviceActivity, serveropenactiveserviceactivity_list_),
  };
  Sheet_serveropenactiveserviceActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_serveropenactiveserviceActivity_descriptor_,
      Sheet_serveropenactiveserviceActivity::default_instance_,
      Sheet_serveropenactiveserviceActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactiveserviceActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactiveserviceActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_serveropenactiveserviceActivity));
  serveropenactivepageBook_descriptor_ = file->message_type(2);
  static const int serveropenactivepageBook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepageBook, id_),
  };
  serveropenactivepageBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serveropenactivepageBook_descriptor_,
      serveropenactivepageBook::default_instance_,
      serveropenactivepageBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepageBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepageBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serveropenactivepageBook));
  Sheet_serveropenactivepageBook_descriptor_ = file->message_type(3);
  static const int Sheet_serveropenactivepageBook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivepageBook, serveropenactivepagebook_list_),
  };
  Sheet_serveropenactivepageBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_serveropenactivepageBook_descriptor_,
      Sheet_serveropenactivepageBook::default_instance_,
      Sheet_serveropenactivepageBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivepageBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivepageBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_serveropenactivepageBook));
  serveropenactivepage_descriptor_ = file->message_type(4);
  static const int serveropenactivepage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, mcanshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, tiaojianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, youjianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, nonstandardmailid_),
  };
  serveropenactivepage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serveropenactivepage_descriptor_,
      serveropenactivepage::default_instance_,
      serveropenactivepage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivepage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serveropenactivepage));
  Sheet_serveropenactivepage_descriptor_ = file->message_type(5);
  static const int Sheet_serveropenactivepage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivepage, serveropenactivepage_list_),
  };
  Sheet_serveropenactivepage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_serveropenactivepage_descriptor_,
      Sheet_serveropenactivepage::default_instance_,
      Sheet_serveropenactivepage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivepage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivepage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_serveropenactivepage));
  serveropenactivemRank_descriptor_ = file->message_type(6);
  static const int serveropenactivemRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRank, randtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRank, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRank, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRank, canshu_),
  };
  serveropenactivemRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serveropenactivemRank_descriptor_,
      serveropenactivemRank::default_instance_,
      serveropenactivemRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serveropenactivemRank));
  Sheet_serveropenactivemRank_descriptor_ = file->message_type(7);
  static const int Sheet_serveropenactivemRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemRank, serveropenactivemrank_list_),
  };
  Sheet_serveropenactivemRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_serveropenactivemRank_descriptor_,
      Sheet_serveropenactivemRank::default_instance_,
      Sheet_serveropenactivemRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_serveropenactivemRank));
  serveropenactivemAdvanced_descriptor_ = file->message_type(8);
  static const int serveropenactivemAdvanced_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemAdvanced, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemAdvanced, advancedtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemAdvanced, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemAdvanced, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemAdvanced, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemAdvanced, jiangli_),
  };
  serveropenactivemAdvanced_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serveropenactivemAdvanced_descriptor_,
      serveropenactivemAdvanced::default_instance_,
      serveropenactivemAdvanced_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemAdvanced, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemAdvanced, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serveropenactivemAdvanced));
  Sheet_serveropenactivemAdvanced_descriptor_ = file->message_type(9);
  static const int Sheet_serveropenactivemAdvanced_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemAdvanced, serveropenactivemadvanced_list_),
  };
  Sheet_serveropenactivemAdvanced_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_serveropenactivemAdvanced_descriptor_,
      Sheet_serveropenactivemAdvanced::default_instance_,
      Sheet_serveropenactivemAdvanced_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemAdvanced, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemAdvanced, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_serveropenactivemAdvanced));
  serveropenactivemRecharge_descriptor_ = file->message_type(10);
  static const int serveropenactivemRecharge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRecharge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRecharge, numtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRecharge, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRecharge, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRecharge, jiangli_),
  };
  serveropenactivemRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serveropenactivemRecharge_descriptor_,
      serveropenactivemRecharge::default_instance_,
      serveropenactivemRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serveropenactivemRecharge));
  Sheet_serveropenactivemRecharge_descriptor_ = file->message_type(11);
  static const int Sheet_serveropenactivemRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemRecharge, serveropenactivemrecharge_list_),
  };
  Sheet_serveropenactivemRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_serveropenactivemRecharge_descriptor_,
      Sheet_serveropenactivemRecharge::default_instance_,
      Sheet_serveropenactivemRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_serveropenactivemRecharge));
  serveropenactivemGoods_descriptor_ = file->message_type(12);
  static const int serveropenactivemGoods_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemGoods, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemGoods, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemGoods, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemGoods, pricea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemGoods, priceb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemGoods, quantity_),
  };
  serveropenactivemGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      serveropenactivemGoods_descriptor_,
      serveropenactivemGoods::default_instance_,
      serveropenactivemGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serveropenactivemGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(serveropenactivemGoods));
  Sheet_serveropenactivemGoods_descriptor_ = file->message_type(13);
  static const int Sheet_serveropenactivemGoods_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemGoods, serveropenactivemgoods_list_),
  };
  Sheet_serveropenactivemGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_serveropenactivemGoods_descriptor_,
      Sheet_serveropenactivemGoods::default_instance_,
      Sheet_serveropenactivemGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_serveropenactivemGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_serveropenactivemGoods));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serveropenactive_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serveropenactiveserviceActivity_descriptor_, &serveropenactiveserviceActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_serveropenactiveserviceActivity_descriptor_, &Sheet_serveropenactiveserviceActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serveropenactivepageBook_descriptor_, &serveropenactivepageBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_serveropenactivepageBook_descriptor_, &Sheet_serveropenactivepageBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serveropenactivepage_descriptor_, &serveropenactivepage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_serveropenactivepage_descriptor_, &Sheet_serveropenactivepage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serveropenactivemRank_descriptor_, &serveropenactivemRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_serveropenactivemRank_descriptor_, &Sheet_serveropenactivemRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serveropenactivemAdvanced_descriptor_, &serveropenactivemAdvanced::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_serveropenactivemAdvanced_descriptor_, &Sheet_serveropenactivemAdvanced::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serveropenactivemRecharge_descriptor_, &serveropenactivemRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_serveropenactivemRecharge_descriptor_, &Sheet_serveropenactivemRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    serveropenactivemGoods_descriptor_, &serveropenactivemGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_serveropenactivemGoods_descriptor_, &Sheet_serveropenactivemGoods::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serveropenactive_2eproto() {
  delete serveropenactiveserviceActivity::default_instance_;
  delete serveropenactiveserviceActivity_reflection_;
  delete Sheet_serveropenactiveserviceActivity::default_instance_;
  delete Sheet_serveropenactiveserviceActivity_reflection_;
  delete serveropenactivepageBook::default_instance_;
  delete serveropenactivepageBook_reflection_;
  delete Sheet_serveropenactivepageBook::default_instance_;
  delete Sheet_serveropenactivepageBook_reflection_;
  delete serveropenactivepage::default_instance_;
  delete serveropenactivepage_reflection_;
  delete Sheet_serveropenactivepage::default_instance_;
  delete Sheet_serveropenactivepage_reflection_;
  delete serveropenactivemRank::default_instance_;
  delete serveropenactivemRank_reflection_;
  delete Sheet_serveropenactivemRank::default_instance_;
  delete Sheet_serveropenactivemRank_reflection_;
  delete serveropenactivemAdvanced::default_instance_;
  delete serveropenactivemAdvanced_reflection_;
  delete Sheet_serveropenactivemAdvanced::default_instance_;
  delete Sheet_serveropenactivemAdvanced_reflection_;
  delete serveropenactivemRecharge::default_instance_;
  delete serveropenactivemRecharge_reflection_;
  delete Sheet_serveropenactivemRecharge::default_instance_;
  delete Sheet_serveropenactivemRecharge_reflection_;
  delete serveropenactivemGoods::default_instance_;
  delete serveropenactivemGoods_reflection_;
  delete Sheet_serveropenactivemGoods::default_instance_;
  delete Sheet_serveropenactivemGoods_reflection_;
}

void protobuf_AddDesc_serveropenactive_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026serveropenactive.proto\022\010proto_ff\032\025yd_f"
    "ieldoptions.proto\"\315\001\n\037serveropenactivese"
    "rviceActivity\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\346\264\273\345\212\250id\022"
    "\'\n\nservertype\030\002 \001(\005B\023\302\377\024\017\346\234\215\345\212\241\345\231\250\347\261\273\345\236\213"
    "\022\037\n\005timeA\030\003 \001(\005B\020\302\377\024\014\345\274\200\345\220\257\346\227\266\351\227\264\022\037\n\005tim"
    "eB\030\004 \001(\005B\020\302\377\024\014\345\205\263\351\227\255\346\227\266\351\227\264\022%\n\006pageId\030\005 \001"
    "(\tB\025\302\377\024\014\351\241\265\347\255\276\345\217\202\346\225\260\220\301\024\254\002\"\206\001\n%Sheet_serv"
    "eropenactiveserviceActivity\022]\n$serverope"
    "nactiveserviceActivity_List\030\001 \003(\0132).prot"
    "o_ff.serveropenactiveserviceActivityB\004\210\301"
    "\024\024\"4\n\030serveropenactivepageBook\022\030\n\002Id\030\001 \001"
    "(\005B\014\302\377\024\010\351\241\265\347\255\276id\"q\n\036Sheet_serveropenacti"
    "vepageBook\022O\n\035serveropenactivepageBook_L"
    "ist\030\001 \003(\0132\".proto_ff.serveropenactivepag"
    "eBookB\004\210\301\024\024\"\370\002\n\024serveropenactivepage\022\030\n\002"
    "Id\030\001 \001(\003B\014\302\377\024\010\351\241\265\347\255\276id\022\037\n\005mType\030\002 \001(\005B\020\302"
    "\377\024\014\346\250\241\346\235\277\347\261\273\345\236\213\022!\n\007mCanshu\030\003 \001(\005B\020\302\377\024\014\346\250"
    "\241\346\235\277\345\217\202\346\225\260\022#\n\005start\030\004 \001(\tB\024\302\377\024\014\345\274\200\345\247\213\346\227\266"
    "\351\227\264\220\301\024<\022$\n\006finish\030\005 \001(\tB\024\302\377\024\014\347\273\223\346\235\237\346\227\266\351\227"
    "\264\220\301\024<\022 \n\007miaoshu\030\006 \001(\tB\017\302\377\024\006\346\217\217\350\277\260\220\301\024\310\001\022"
    "\"\n\ntiaojianId\030\007 \001(\tB\016\302\377\024\006\346\235\241\344\273\266\220\301\024P\022\034\n\006m"
    "ailid\030\010 \001(\003B\014\302\377\024\010\351\202\256\344\273\266id\022#\n\tyoujianid\030\t"
    " \001(\003B\020\302\377\024\014\346\231\256\351\200\232\351\202\256\344\273\266\022.\n\021nonstandardmai"
    "lid\030\n \001(\003B\023\302\377\024\017\346\234\252\350\276\276\346\240\207\351\202\256\344\273\266\"f\n\032Sheet_"
    "serveropenactivepage\022H\n\031serveropenactive"
    "page_List\030\001 \003(\0132\036.proto_ff.serveropenact"
    "ivepageB\005\210\301\024\214\001\"\263\001\n\025serveropenactivemRank"
    "\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\010randtype\030\002 \001(\005B\020"
    "\302\377\024\014\345\206\262\346\246\234\347\261\273\345\236\213\022%\n\007miaoshu\030\003 \001(\tB\024\302\377\024\014\347"
    "\233\256\346\240\207\346\217\217\350\277\260\220\301\024d\022\033\n\005boxid\030\004 \001(\003B\014\302\377\024\010\345\245\226\345"
    "\212\261id\022\036\n\006canshu\030\005 \003(\003B\016\302\377\024\006\345\217\202\346\225\260\210\301\024\002\"i\n\033"
    "Sheet_serveropenactivemRank\022J\n\032serverope"
    "nactivemRank_List\030\001 \003(\0132\037.proto_ff.serve"
    "ropenactivemRankB\005\210\301\024\310\001\"\325\001\n\031serveropenac"
    "tivemAdvanced\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022&\n\014adv"
    "ancedType\030\002 \001(\005B\020\302\377\024\014\350\277\233\351\230\266\347\261\273\345\236\213\022\035\n\003num"
    "\030\003 \001(\003B\020\302\377\024\014\350\277\233\351\230\266\345\217\202\346\225\260\022\035\n\tparameter\030\004 "
    "\001(\003B\n\302\377\024\006\345\217\202\346\225\260\022\037\n\007miaoshu\030\005 \001(\tB\016\302\377\024\006\346\217"
    "\217\350\277\260\220\301\024<\022\035\n\007jiangLi\030\006 \001(\003B\014\302\377\024\010\345\245\226\345\212\261id\""
    "u\n\037Sheet_serveropenactivemAdvanced\022R\n\036se"
    "rveropenactivemAdvanced_List\030\001 \003(\0132#.pro"
    "to_ff.serveropenactivemAdvancedB\005\210\301\024\240\001\"\267"
    "\001\n\031serveropenactivemRecharge\022\030\n\002id\030\001 \001(\005"
    "B\014\302\377\024\010\346\241\243\344\275\215id\022!\n\007numType\030\002 \001(\005B\020\302\377\024\014\350\256\241"
    "\346\225\260\347\261\273\345\236\213\022\035\n\003num\030\003 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\345\205\203\346\225\260"
    "\022\037\n\007miaoshu\030\004 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024<\022\035\n\007jia"
    "ngLi\030\005 \001(\003B\014\302\377\024\010\345\245\226\345\212\261id\"u\n\037Sheet_server"
    "openactivemRecharge\022R\n\036serveropenactivem"
    "Recharge_List\030\001 \003(\0132#.proto_ff.serverope"
    "nactivemRechargeB\005\210\301\024\310\001\"\323\001\n\026serveropenac"
    "tivemGoods\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\346\235\241\344\273\266id\022\034\n\006"
    "itemid\030\002 \001(\003B\014\302\377\024\010\345\225\206\345\223\201id\022\"\n\010currency\030\003"
    " \001(\005B\020\302\377\024\014\350\264\247\345\270\201\345\215\225\344\275\215\022\032\n\006priceA\030\004 \001(\005B\n"
    "\302\377\024\006\345\216\237\344\273\267\022\032\n\006priceB\030\005 \001(\005B\n\302\377\024\006\347\216\260\344\273\267\022%"
    "\n\010quantity\030\006 \001(\005B\023\302\377\024\017\344\270\252\344\272\272\351\231\220\350\264\255\346\225\260\"l\n"
    "\034Sheet_serveropenactivemGoods\022L\n\033servero"
    "penactivemGoods_List\030\001 \003(\0132 .proto_ff.se"
    "rveropenactivemGoodsB\005\210\301\024\240\001", 2307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serveropenactive.proto", &protobuf_RegisterTypes);
  serveropenactiveserviceActivity::default_instance_ = new serveropenactiveserviceActivity();
  Sheet_serveropenactiveserviceActivity::default_instance_ = new Sheet_serveropenactiveserviceActivity();
  serveropenactivepageBook::default_instance_ = new serveropenactivepageBook();
  Sheet_serveropenactivepageBook::default_instance_ = new Sheet_serveropenactivepageBook();
  serveropenactivepage::default_instance_ = new serveropenactivepage();
  Sheet_serveropenactivepage::default_instance_ = new Sheet_serveropenactivepage();
  serveropenactivemRank::default_instance_ = new serveropenactivemRank();
  Sheet_serveropenactivemRank::default_instance_ = new Sheet_serveropenactivemRank();
  serveropenactivemAdvanced::default_instance_ = new serveropenactivemAdvanced();
  Sheet_serveropenactivemAdvanced::default_instance_ = new Sheet_serveropenactivemAdvanced();
  serveropenactivemRecharge::default_instance_ = new serveropenactivemRecharge();
  Sheet_serveropenactivemRecharge::default_instance_ = new Sheet_serveropenactivemRecharge();
  serveropenactivemGoods::default_instance_ = new serveropenactivemGoods();
  Sheet_serveropenactivemGoods::default_instance_ = new Sheet_serveropenactivemGoods();
  serveropenactiveserviceActivity::default_instance_->InitAsDefaultInstance();
  Sheet_serveropenactiveserviceActivity::default_instance_->InitAsDefaultInstance();
  serveropenactivepageBook::default_instance_->InitAsDefaultInstance();
  Sheet_serveropenactivepageBook::default_instance_->InitAsDefaultInstance();
  serveropenactivepage::default_instance_->InitAsDefaultInstance();
  Sheet_serveropenactivepage::default_instance_->InitAsDefaultInstance();
  serveropenactivemRank::default_instance_->InitAsDefaultInstance();
  Sheet_serveropenactivemRank::default_instance_->InitAsDefaultInstance();
  serveropenactivemAdvanced::default_instance_->InitAsDefaultInstance();
  Sheet_serveropenactivemAdvanced::default_instance_->InitAsDefaultInstance();
  serveropenactivemRecharge::default_instance_->InitAsDefaultInstance();
  Sheet_serveropenactivemRecharge::default_instance_->InitAsDefaultInstance();
  serveropenactivemGoods::default_instance_->InitAsDefaultInstance();
  Sheet_serveropenactivemGoods::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serveropenactive_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serveropenactive_2eproto {
  StaticDescriptorInitializer_serveropenactive_2eproto() {
    protobuf_AddDesc_serveropenactive_2eproto();
  }
} static_descriptor_initializer_serveropenactive_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int serveropenactiveserviceActivity::kIdFieldNumber;
const int serveropenactiveserviceActivity::kServertypeFieldNumber;
const int serveropenactiveserviceActivity::kTimeAFieldNumber;
const int serveropenactiveserviceActivity::kTimeBFieldNumber;
const int serveropenactiveserviceActivity::kPageIdFieldNumber;
#endif  // !_MSC_VER

serveropenactiveserviceActivity::serveropenactiveserviceActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serveropenactiveserviceActivity::InitAsDefaultInstance() {
}

serveropenactiveserviceActivity::serveropenactiveserviceActivity(const serveropenactiveserviceActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serveropenactiveserviceActivity::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  servertype_ = 0;
  timea_ = 0;
  timeb_ = 0;
  pageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serveropenactiveserviceActivity::~serveropenactiveserviceActivity() {
  SharedDtor();
}

void serveropenactiveserviceActivity::SharedDtor() {
  if (pageid_ != &::google::protobuf::internal::kEmptyString) {
    delete pageid_;
  }
  if (this != default_instance_) {
  }
}

void serveropenactiveserviceActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serveropenactiveserviceActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serveropenactiveserviceActivity_descriptor_;
}

const serveropenactiveserviceActivity& serveropenactiveserviceActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

serveropenactiveserviceActivity* serveropenactiveserviceActivity::default_instance_ = NULL;

serveropenactiveserviceActivity* serveropenactiveserviceActivity::New() const {
  return new serveropenactiveserviceActivity;
}

void serveropenactiveserviceActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    servertype_ = 0;
    timea_ = 0;
    timeb_ = 0;
    if (has_pageid()) {
      if (pageid_ != &::google::protobuf::internal::kEmptyString) {
        pageid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serveropenactiveserviceActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_servertype;
        break;
      }

      // optional int32 servertype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeA;
        break;
      }

      // optional int32 timeA = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timea_)));
          set_has_timea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeB;
        break;
      }

      // optional int32 timeB = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeb_)));
          set_has_timeb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pageId;
        break;
      }

      // optional string pageId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pageid().data(), this->pageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serveropenactiveserviceActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 servertype = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->servertype(), output);
  }

  // optional int32 timeA = 3;
  if (has_timea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timea(), output);
  }

  // optional int32 timeB = 4;
  if (has_timeb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeb(), output);
  }

  // optional string pageId = 5;
  if (has_pageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pageid().data(), this->pageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serveropenactiveserviceActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 servertype = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->servertype(), target);
  }

  // optional int32 timeA = 3;
  if (has_timea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timea(), target);
  }

  // optional int32 timeB = 4;
  if (has_timeb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeb(), target);
  }

  // optional string pageId = 5;
  if (has_pageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pageid().data(), this->pageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serveropenactiveserviceActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 servertype = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional int32 timeA = 3;
    if (has_timea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timea());
    }

    // optional int32 timeB = 4;
    if (has_timeb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeb());
    }

    // optional string pageId = 5;
    if (has_pageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serveropenactiveserviceActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serveropenactiveserviceActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serveropenactiveserviceActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serveropenactiveserviceActivity::MergeFrom(const serveropenactiveserviceActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_timea()) {
      set_timea(from.timea());
    }
    if (from.has_timeb()) {
      set_timeb(from.timeb());
    }
    if (from.has_pageid()) {
      set_pageid(from.pageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serveropenactiveserviceActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serveropenactiveserviceActivity::CopyFrom(const serveropenactiveserviceActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serveropenactiveserviceActivity::IsInitialized() const {

  return true;
}

void serveropenactiveserviceActivity::Swap(serveropenactiveserviceActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(servertype_, other->servertype_);
    std::swap(timea_, other->timea_);
    std::swap(timeb_, other->timeb_);
    std::swap(pageid_, other->pageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serveropenactiveserviceActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serveropenactiveserviceActivity_descriptor_;
  metadata.reflection = serveropenactiveserviceActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_serveropenactiveserviceActivity::kServeropenactiveserviceActivityListFieldNumber;
#endif  // !_MSC_VER

Sheet_serveropenactiveserviceActivity::Sheet_serveropenactiveserviceActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_serveropenactiveserviceActivity::InitAsDefaultInstance() {
}

Sheet_serveropenactiveserviceActivity::Sheet_serveropenactiveserviceActivity(const Sheet_serveropenactiveserviceActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_serveropenactiveserviceActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_serveropenactiveserviceActivity::~Sheet_serveropenactiveserviceActivity() {
  SharedDtor();
}

void Sheet_serveropenactiveserviceActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_serveropenactiveserviceActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_serveropenactiveserviceActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_serveropenactiveserviceActivity_descriptor_;
}

const Sheet_serveropenactiveserviceActivity& Sheet_serveropenactiveserviceActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

Sheet_serveropenactiveserviceActivity* Sheet_serveropenactiveserviceActivity::default_instance_ = NULL;

Sheet_serveropenactiveserviceActivity* Sheet_serveropenactiveserviceActivity::New() const {
  return new Sheet_serveropenactiveserviceActivity;
}

void Sheet_serveropenactiveserviceActivity::Clear() {
  serveropenactiveserviceactivity_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_serveropenactiveserviceActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.serveropenactiveserviceActivity serveropenactiveserviceActivity_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serveropenactiveserviceActivity_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveropenactiveserviceactivity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serveropenactiveserviceActivity_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_serveropenactiveserviceActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.serveropenactiveserviceActivity serveropenactiveserviceActivity_List = 1;
  for (int i = 0; i < this->serveropenactiveserviceactivity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveropenactiveserviceactivity_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_serveropenactiveserviceActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.serveropenactiveserviceActivity serveropenactiveserviceActivity_List = 1;
  for (int i = 0; i < this->serveropenactiveserviceactivity_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveropenactiveserviceactivity_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_serveropenactiveserviceActivity::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.serveropenactiveserviceActivity serveropenactiveserviceActivity_List = 1;
  total_size += 1 * this->serveropenactiveserviceactivity_list_size();
  for (int i = 0; i < this->serveropenactiveserviceactivity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveropenactiveserviceactivity_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_serveropenactiveserviceActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_serveropenactiveserviceActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_serveropenactiveserviceActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_serveropenactiveserviceActivity::MergeFrom(const Sheet_serveropenactiveserviceActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveropenactiveserviceactivity_list_.MergeFrom(from.serveropenactiveserviceactivity_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_serveropenactiveserviceActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_serveropenactiveserviceActivity::CopyFrom(const Sheet_serveropenactiveserviceActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_serveropenactiveserviceActivity::IsInitialized() const {

  return true;
}

void Sheet_serveropenactiveserviceActivity::Swap(Sheet_serveropenactiveserviceActivity* other) {
  if (other != this) {
    serveropenactiveserviceactivity_list_.Swap(&other->serveropenactiveserviceactivity_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_serveropenactiveserviceActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_serveropenactiveserviceActivity_descriptor_;
  metadata.reflection = Sheet_serveropenactiveserviceActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int serveropenactivepageBook::kIdFieldNumber;
#endif  // !_MSC_VER

serveropenactivepageBook::serveropenactivepageBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serveropenactivepageBook::InitAsDefaultInstance() {
}

serveropenactivepageBook::serveropenactivepageBook(const serveropenactivepageBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serveropenactivepageBook::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serveropenactivepageBook::~serveropenactivepageBook() {
  SharedDtor();
}

void serveropenactivepageBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void serveropenactivepageBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serveropenactivepageBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serveropenactivepageBook_descriptor_;
}

const serveropenactivepageBook& serveropenactivepageBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

serveropenactivepageBook* serveropenactivepageBook::default_instance_ = NULL;

serveropenactivepageBook* serveropenactivepageBook::New() const {
  return new serveropenactivepageBook;
}

void serveropenactivepageBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serveropenactivepageBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serveropenactivepageBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serveropenactivepageBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serveropenactivepageBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serveropenactivepageBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serveropenactivepageBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serveropenactivepageBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serveropenactivepageBook::MergeFrom(const serveropenactivepageBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serveropenactivepageBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serveropenactivepageBook::CopyFrom(const serveropenactivepageBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serveropenactivepageBook::IsInitialized() const {

  return true;
}

void serveropenactivepageBook::Swap(serveropenactivepageBook* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serveropenactivepageBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serveropenactivepageBook_descriptor_;
  metadata.reflection = serveropenactivepageBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_serveropenactivepageBook::kServeropenactivepageBookListFieldNumber;
#endif  // !_MSC_VER

Sheet_serveropenactivepageBook::Sheet_serveropenactivepageBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_serveropenactivepageBook::InitAsDefaultInstance() {
}

Sheet_serveropenactivepageBook::Sheet_serveropenactivepageBook(const Sheet_serveropenactivepageBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_serveropenactivepageBook::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_serveropenactivepageBook::~Sheet_serveropenactivepageBook() {
  SharedDtor();
}

void Sheet_serveropenactivepageBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_serveropenactivepageBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_serveropenactivepageBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_serveropenactivepageBook_descriptor_;
}

const Sheet_serveropenactivepageBook& Sheet_serveropenactivepageBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

Sheet_serveropenactivepageBook* Sheet_serveropenactivepageBook::default_instance_ = NULL;

Sheet_serveropenactivepageBook* Sheet_serveropenactivepageBook::New() const {
  return new Sheet_serveropenactivepageBook;
}

void Sheet_serveropenactivepageBook::Clear() {
  serveropenactivepagebook_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_serveropenactivepageBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.serveropenactivepageBook serveropenactivepageBook_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serveropenactivepageBook_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveropenactivepagebook_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serveropenactivepageBook_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_serveropenactivepageBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.serveropenactivepageBook serveropenactivepageBook_List = 1;
  for (int i = 0; i < this->serveropenactivepagebook_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveropenactivepagebook_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_serveropenactivepageBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.serveropenactivepageBook serveropenactivepageBook_List = 1;
  for (int i = 0; i < this->serveropenactivepagebook_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveropenactivepagebook_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_serveropenactivepageBook::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.serveropenactivepageBook serveropenactivepageBook_List = 1;
  total_size += 1 * this->serveropenactivepagebook_list_size();
  for (int i = 0; i < this->serveropenactivepagebook_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveropenactivepagebook_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_serveropenactivepageBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_serveropenactivepageBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_serveropenactivepageBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_serveropenactivepageBook::MergeFrom(const Sheet_serveropenactivepageBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveropenactivepagebook_list_.MergeFrom(from.serveropenactivepagebook_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_serveropenactivepageBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_serveropenactivepageBook::CopyFrom(const Sheet_serveropenactivepageBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_serveropenactivepageBook::IsInitialized() const {

  return true;
}

void Sheet_serveropenactivepageBook::Swap(Sheet_serveropenactivepageBook* other) {
  if (other != this) {
    serveropenactivepagebook_list_.Swap(&other->serveropenactivepagebook_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_serveropenactivepageBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_serveropenactivepageBook_descriptor_;
  metadata.reflection = Sheet_serveropenactivepageBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int serveropenactivepage::kIdFieldNumber;
const int serveropenactivepage::kMTypeFieldNumber;
const int serveropenactivepage::kMCanshuFieldNumber;
const int serveropenactivepage::kStartFieldNumber;
const int serveropenactivepage::kFinishFieldNumber;
const int serveropenactivepage::kMiaoshuFieldNumber;
const int serveropenactivepage::kTiaojianIdFieldNumber;
const int serveropenactivepage::kMailidFieldNumber;
const int serveropenactivepage::kYoujianidFieldNumber;
const int serveropenactivepage::kNonstandardmailidFieldNumber;
#endif  // !_MSC_VER

serveropenactivepage::serveropenactivepage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serveropenactivepage::InitAsDefaultInstance() {
}

serveropenactivepage::serveropenactivepage(const serveropenactivepage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serveropenactivepage::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  mtype_ = 0;
  mcanshu_ = 0;
  start_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tiaojianid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailid_ = GOOGLE_LONGLONG(0);
  youjianid_ = GOOGLE_LONGLONG(0);
  nonstandardmailid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serveropenactivepage::~serveropenactivepage() {
  SharedDtor();
}

void serveropenactivepage::SharedDtor() {
  if (start_ != &::google::protobuf::internal::kEmptyString) {
    delete start_;
  }
  if (finish_ != &::google::protobuf::internal::kEmptyString) {
    delete finish_;
  }
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (tiaojianid_ != &::google::protobuf::internal::kEmptyString) {
    delete tiaojianid_;
  }
  if (this != default_instance_) {
  }
}

void serveropenactivepage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serveropenactivepage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serveropenactivepage_descriptor_;
}

const serveropenactivepage& serveropenactivepage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

serveropenactivepage* serveropenactivepage::default_instance_ = NULL;

serveropenactivepage* serveropenactivepage::New() const {
  return new serveropenactivepage;
}

void serveropenactivepage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    mtype_ = 0;
    mcanshu_ = 0;
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::kEmptyString) {
        start_->clear();
      }
    }
    if (has_finish()) {
      if (finish_ != &::google::protobuf::internal::kEmptyString) {
        finish_->clear();
      }
    }
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    if (has_tiaojianid()) {
      if (tiaojianid_ != &::google::protobuf::internal::kEmptyString) {
        tiaojianid_->clear();
      }
    }
    mailid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    youjianid_ = GOOGLE_LONGLONG(0);
    nonstandardmailid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serveropenactivepage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mType;
        break;
      }

      // optional int32 mType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtype_)));
          set_has_mtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mCanshu;
        break;
      }

      // optional int32 mCanshu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mCanshu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mcanshu_)));
          set_has_mcanshu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // optional string start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start().data(), this->start().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_finish;
        break;
      }

      // optional string finish = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finish()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->finish().data(), this->finish().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tiaojianId;
        break;
      }

      // optional string tiaojianId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiaojianId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiaojianid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiaojianid().data(), this->tiaojianid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mailid;
        break;
      }

      // optional int64 mailid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_youjianid;
        break;
      }

      // optional int64 youjianid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youjianid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &youjianid_)));
          set_has_youjianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_nonstandardmailid;
        break;
      }

      // optional int64 nonstandardmailid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonstandardmailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonstandardmailid_)));
          set_has_nonstandardmailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serveropenactivepage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 mType = 2;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mtype(), output);
  }

  // optional int32 mCanshu = 3;
  if (has_mcanshu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mcanshu(), output);
  }

  // optional string start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start().data(), this->start().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->start(), output);
  }

  // optional string finish = 5;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finish().data(), this->finish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->finish(), output);
  }

  // optional string miaoshu = 6;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->miaoshu(), output);
  }

  // optional string tiaojianId = 7;
  if (has_tiaojianid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiaojianid().data(), this->tiaojianid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tiaojianid(), output);
  }

  // optional int64 mailid = 8;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->mailid(), output);
  }

  // optional int64 youjianid = 9;
  if (has_youjianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->youjianid(), output);
  }

  // optional int64 nonstandardmailid = 10;
  if (has_nonstandardmailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->nonstandardmailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serveropenactivepage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 mType = 2;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mtype(), target);
  }

  // optional int32 mCanshu = 3;
  if (has_mcanshu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mcanshu(), target);
  }

  // optional string start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start().data(), this->start().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->start(), target);
  }

  // optional string finish = 5;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finish().data(), this->finish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->finish(), target);
  }

  // optional string miaoshu = 6;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->miaoshu(), target);
  }

  // optional string tiaojianId = 7;
  if (has_tiaojianid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiaojianid().data(), this->tiaojianid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tiaojianid(), target);
  }

  // optional int64 mailid = 8;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->mailid(), target);
  }

  // optional int64 youjianid = 9;
  if (has_youjianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->youjianid(), target);
  }

  // optional int64 nonstandardmailid = 10;
  if (has_nonstandardmailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->nonstandardmailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serveropenactivepage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 mType = 2;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtype());
    }

    // optional int32 mCanshu = 3;
    if (has_mcanshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mcanshu());
    }

    // optional string start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start());
    }

    // optional string finish = 5;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finish());
    }

    // optional string miaoshu = 6;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional string tiaojianId = 7;
    if (has_tiaojianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiaojianid());
    }

    // optional int64 mailid = 8;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 youjianid = 9;
    if (has_youjianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->youjianid());
    }

    // optional int64 nonstandardmailid = 10;
    if (has_nonstandardmailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nonstandardmailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serveropenactivepage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serveropenactivepage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serveropenactivepage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serveropenactivepage::MergeFrom(const serveropenactivepage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
    if (from.has_mcanshu()) {
      set_mcanshu(from.mcanshu());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_tiaojianid()) {
      set_tiaojianid(from.tiaojianid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_youjianid()) {
      set_youjianid(from.youjianid());
    }
    if (from.has_nonstandardmailid()) {
      set_nonstandardmailid(from.nonstandardmailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serveropenactivepage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serveropenactivepage::CopyFrom(const serveropenactivepage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serveropenactivepage::IsInitialized() const {

  return true;
}

void serveropenactivepage::Swap(serveropenactivepage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mtype_, other->mtype_);
    std::swap(mcanshu_, other->mcanshu_);
    std::swap(start_, other->start_);
    std::swap(finish_, other->finish_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(tiaojianid_, other->tiaojianid_);
    std::swap(mailid_, other->mailid_);
    std::swap(youjianid_, other->youjianid_);
    std::swap(nonstandardmailid_, other->nonstandardmailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serveropenactivepage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serveropenactivepage_descriptor_;
  metadata.reflection = serveropenactivepage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_serveropenactivepage::kServeropenactivepageListFieldNumber;
#endif  // !_MSC_VER

Sheet_serveropenactivepage::Sheet_serveropenactivepage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_serveropenactivepage::InitAsDefaultInstance() {
}

Sheet_serveropenactivepage::Sheet_serveropenactivepage(const Sheet_serveropenactivepage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_serveropenactivepage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_serveropenactivepage::~Sheet_serveropenactivepage() {
  SharedDtor();
}

void Sheet_serveropenactivepage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_serveropenactivepage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_serveropenactivepage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_serveropenactivepage_descriptor_;
}

const Sheet_serveropenactivepage& Sheet_serveropenactivepage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

Sheet_serveropenactivepage* Sheet_serveropenactivepage::default_instance_ = NULL;

Sheet_serveropenactivepage* Sheet_serveropenactivepage::New() const {
  return new Sheet_serveropenactivepage;
}

void Sheet_serveropenactivepage::Clear() {
  serveropenactivepage_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_serveropenactivepage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.serveropenactivepage serveropenactivepage_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serveropenactivepage_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveropenactivepage_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serveropenactivepage_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_serveropenactivepage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.serveropenactivepage serveropenactivepage_List = 1;
  for (int i = 0; i < this->serveropenactivepage_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveropenactivepage_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_serveropenactivepage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.serveropenactivepage serveropenactivepage_List = 1;
  for (int i = 0; i < this->serveropenactivepage_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveropenactivepage_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_serveropenactivepage::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.serveropenactivepage serveropenactivepage_List = 1;
  total_size += 1 * this->serveropenactivepage_list_size();
  for (int i = 0; i < this->serveropenactivepage_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveropenactivepage_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_serveropenactivepage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_serveropenactivepage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_serveropenactivepage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_serveropenactivepage::MergeFrom(const Sheet_serveropenactivepage& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveropenactivepage_list_.MergeFrom(from.serveropenactivepage_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_serveropenactivepage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_serveropenactivepage::CopyFrom(const Sheet_serveropenactivepage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_serveropenactivepage::IsInitialized() const {

  return true;
}

void Sheet_serveropenactivepage::Swap(Sheet_serveropenactivepage* other) {
  if (other != this) {
    serveropenactivepage_list_.Swap(&other->serveropenactivepage_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_serveropenactivepage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_serveropenactivepage_descriptor_;
  metadata.reflection = Sheet_serveropenactivepage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int serveropenactivemRank::kIdFieldNumber;
const int serveropenactivemRank::kRandtypeFieldNumber;
const int serveropenactivemRank::kMiaoshuFieldNumber;
const int serveropenactivemRank::kBoxidFieldNumber;
const int serveropenactivemRank::kCanshuFieldNumber;
#endif  // !_MSC_VER

serveropenactivemRank::serveropenactivemRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serveropenactivemRank::InitAsDefaultInstance() {
}

serveropenactivemRank::serveropenactivemRank(const serveropenactivemRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serveropenactivemRank::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  randtype_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serveropenactivemRank::~serveropenactivemRank() {
  SharedDtor();
}

void serveropenactivemRank::SharedDtor() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void serveropenactivemRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serveropenactivemRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serveropenactivemRank_descriptor_;
}

const serveropenactivemRank& serveropenactivemRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

serveropenactivemRank* serveropenactivemRank::default_instance_ = NULL;

serveropenactivemRank* serveropenactivemRank::New() const {
  return new serveropenactivemRank;
}

void serveropenactivemRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    randtype_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    boxid_ = GOOGLE_LONGLONG(0);
  }
  canshu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serveropenactivemRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_randtype;
        break;
      }

      // optional int32 randtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randtype_)));
          set_has_randtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_canshu;
        break;
      }

      // repeated int64 canshu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canshu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_canshu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_canshu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_canshu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serveropenactivemRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 randtype = 2;
  if (has_randtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->randtype(), output);
  }

  // optional string miaoshu = 3;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->miaoshu(), output);
  }

  // optional int64 boxid = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->boxid(), output);
  }

  // repeated int64 canshu = 5;
  for (int i = 0; i < this->canshu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->canshu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serveropenactivemRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 randtype = 2;
  if (has_randtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->randtype(), target);
  }

  // optional string miaoshu = 3;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->miaoshu(), target);
  }

  // optional int64 boxid = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->boxid(), target);
  }

  // repeated int64 canshu = 5;
  for (int i = 0; i < this->canshu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->canshu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serveropenactivemRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 randtype = 2;
    if (has_randtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randtype());
    }

    // optional string miaoshu = 3;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 boxid = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  // repeated int64 canshu = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->canshu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->canshu(i));
    }
    total_size += 1 * this->canshu_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serveropenactivemRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serveropenactivemRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serveropenactivemRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serveropenactivemRank::MergeFrom(const serveropenactivemRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  canshu_.MergeFrom(from.canshu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_randtype()) {
      set_randtype(from.randtype());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serveropenactivemRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serveropenactivemRank::CopyFrom(const serveropenactivemRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serveropenactivemRank::IsInitialized() const {

  return true;
}

void serveropenactivemRank::Swap(serveropenactivemRank* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(randtype_, other->randtype_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(boxid_, other->boxid_);
    canshu_.Swap(&other->canshu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serveropenactivemRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serveropenactivemRank_descriptor_;
  metadata.reflection = serveropenactivemRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_serveropenactivemRank::kServeropenactivemRankListFieldNumber;
#endif  // !_MSC_VER

Sheet_serveropenactivemRank::Sheet_serveropenactivemRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_serveropenactivemRank::InitAsDefaultInstance() {
}

Sheet_serveropenactivemRank::Sheet_serveropenactivemRank(const Sheet_serveropenactivemRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_serveropenactivemRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_serveropenactivemRank::~Sheet_serveropenactivemRank() {
  SharedDtor();
}

void Sheet_serveropenactivemRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_serveropenactivemRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_serveropenactivemRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_serveropenactivemRank_descriptor_;
}

const Sheet_serveropenactivemRank& Sheet_serveropenactivemRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

Sheet_serveropenactivemRank* Sheet_serveropenactivemRank::default_instance_ = NULL;

Sheet_serveropenactivemRank* Sheet_serveropenactivemRank::New() const {
  return new Sheet_serveropenactivemRank;
}

void Sheet_serveropenactivemRank::Clear() {
  serveropenactivemrank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_serveropenactivemRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.serveropenactivemRank serveropenactivemRank_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serveropenactivemRank_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveropenactivemrank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serveropenactivemRank_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_serveropenactivemRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.serveropenactivemRank serveropenactivemRank_List = 1;
  for (int i = 0; i < this->serveropenactivemrank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveropenactivemrank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_serveropenactivemRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.serveropenactivemRank serveropenactivemRank_List = 1;
  for (int i = 0; i < this->serveropenactivemrank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveropenactivemrank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_serveropenactivemRank::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.serveropenactivemRank serveropenactivemRank_List = 1;
  total_size += 1 * this->serveropenactivemrank_list_size();
  for (int i = 0; i < this->serveropenactivemrank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveropenactivemrank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_serveropenactivemRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_serveropenactivemRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_serveropenactivemRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_serveropenactivemRank::MergeFrom(const Sheet_serveropenactivemRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveropenactivemrank_list_.MergeFrom(from.serveropenactivemrank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_serveropenactivemRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_serveropenactivemRank::CopyFrom(const Sheet_serveropenactivemRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_serveropenactivemRank::IsInitialized() const {

  return true;
}

void Sheet_serveropenactivemRank::Swap(Sheet_serveropenactivemRank* other) {
  if (other != this) {
    serveropenactivemrank_list_.Swap(&other->serveropenactivemrank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_serveropenactivemRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_serveropenactivemRank_descriptor_;
  metadata.reflection = Sheet_serveropenactivemRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int serveropenactivemAdvanced::kIdFieldNumber;
const int serveropenactivemAdvanced::kAdvancedTypeFieldNumber;
const int serveropenactivemAdvanced::kNumFieldNumber;
const int serveropenactivemAdvanced::kParameterFieldNumber;
const int serveropenactivemAdvanced::kMiaoshuFieldNumber;
const int serveropenactivemAdvanced::kJiangLiFieldNumber;
#endif  // !_MSC_VER

serveropenactivemAdvanced::serveropenactivemAdvanced()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serveropenactivemAdvanced::InitAsDefaultInstance() {
}

serveropenactivemAdvanced::serveropenactivemAdvanced(const serveropenactivemAdvanced& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serveropenactivemAdvanced::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  advancedtype_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  parameter_ = GOOGLE_LONGLONG(0);
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serveropenactivemAdvanced::~serveropenactivemAdvanced() {
  SharedDtor();
}

void serveropenactivemAdvanced::SharedDtor() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void serveropenactivemAdvanced::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serveropenactivemAdvanced::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serveropenactivemAdvanced_descriptor_;
}

const serveropenactivemAdvanced& serveropenactivemAdvanced::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

serveropenactivemAdvanced* serveropenactivemAdvanced::default_instance_ = NULL;

serveropenactivemAdvanced* serveropenactivemAdvanced::New() const {
  return new serveropenactivemAdvanced;
}

void serveropenactivemAdvanced::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    advancedtype_ = 0;
    num_ = GOOGLE_LONGLONG(0);
    parameter_ = GOOGLE_LONGLONG(0);
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serveropenactivemAdvanced::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advancedType;
        break;
      }

      // optional int32 advancedType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advancedType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advancedtype_)));
          set_has_advancedtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int64 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parameter;
        break;
      }

      // optional int64 parameter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serveropenactivemAdvanced::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 advancedType = 2;
  if (has_advancedtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->advancedtype(), output);
  }

  // optional int64 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num(), output);
  }

  // optional int64 parameter = 4;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->parameter(), output);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 6;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->jiangli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serveropenactivemAdvanced::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 advancedType = 2;
  if (has_advancedtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->advancedtype(), target);
  }

  // optional int64 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num(), target);
  }

  // optional int64 parameter = 4;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->parameter(), target);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 6;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->jiangli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serveropenactivemAdvanced::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 advancedType = 2;
    if (has_advancedtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advancedtype());
    }

    // optional int64 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int64 parameter = 4;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parameter());
    }

    // optional string miaoshu = 5;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 6;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serveropenactivemAdvanced::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serveropenactivemAdvanced* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serveropenactivemAdvanced*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serveropenactivemAdvanced::MergeFrom(const serveropenactivemAdvanced& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_advancedtype()) {
      set_advancedtype(from.advancedtype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serveropenactivemAdvanced::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serveropenactivemAdvanced::CopyFrom(const serveropenactivemAdvanced& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serveropenactivemAdvanced::IsInitialized() const {

  return true;
}

void serveropenactivemAdvanced::Swap(serveropenactivemAdvanced* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(advancedtype_, other->advancedtype_);
    std::swap(num_, other->num_);
    std::swap(parameter_, other->parameter_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serveropenactivemAdvanced::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serveropenactivemAdvanced_descriptor_;
  metadata.reflection = serveropenactivemAdvanced_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_serveropenactivemAdvanced::kServeropenactivemAdvancedListFieldNumber;
#endif  // !_MSC_VER

Sheet_serveropenactivemAdvanced::Sheet_serveropenactivemAdvanced()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_serveropenactivemAdvanced::InitAsDefaultInstance() {
}

Sheet_serveropenactivemAdvanced::Sheet_serveropenactivemAdvanced(const Sheet_serveropenactivemAdvanced& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_serveropenactivemAdvanced::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_serveropenactivemAdvanced::~Sheet_serveropenactivemAdvanced() {
  SharedDtor();
}

void Sheet_serveropenactivemAdvanced::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_serveropenactivemAdvanced::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_serveropenactivemAdvanced::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_serveropenactivemAdvanced_descriptor_;
}

const Sheet_serveropenactivemAdvanced& Sheet_serveropenactivemAdvanced::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

Sheet_serveropenactivemAdvanced* Sheet_serveropenactivemAdvanced::default_instance_ = NULL;

Sheet_serveropenactivemAdvanced* Sheet_serveropenactivemAdvanced::New() const {
  return new Sheet_serveropenactivemAdvanced;
}

void Sheet_serveropenactivemAdvanced::Clear() {
  serveropenactivemadvanced_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_serveropenactivemAdvanced::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.serveropenactivemAdvanced serveropenactivemAdvanced_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serveropenactivemAdvanced_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveropenactivemadvanced_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serveropenactivemAdvanced_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_serveropenactivemAdvanced::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.serveropenactivemAdvanced serveropenactivemAdvanced_List = 1;
  for (int i = 0; i < this->serveropenactivemadvanced_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveropenactivemadvanced_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_serveropenactivemAdvanced::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.serveropenactivemAdvanced serveropenactivemAdvanced_List = 1;
  for (int i = 0; i < this->serveropenactivemadvanced_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveropenactivemadvanced_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_serveropenactivemAdvanced::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.serveropenactivemAdvanced serveropenactivemAdvanced_List = 1;
  total_size += 1 * this->serveropenactivemadvanced_list_size();
  for (int i = 0; i < this->serveropenactivemadvanced_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveropenactivemadvanced_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_serveropenactivemAdvanced::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_serveropenactivemAdvanced* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_serveropenactivemAdvanced*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_serveropenactivemAdvanced::MergeFrom(const Sheet_serveropenactivemAdvanced& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveropenactivemadvanced_list_.MergeFrom(from.serveropenactivemadvanced_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_serveropenactivemAdvanced::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_serveropenactivemAdvanced::CopyFrom(const Sheet_serveropenactivemAdvanced& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_serveropenactivemAdvanced::IsInitialized() const {

  return true;
}

void Sheet_serveropenactivemAdvanced::Swap(Sheet_serveropenactivemAdvanced* other) {
  if (other != this) {
    serveropenactivemadvanced_list_.Swap(&other->serveropenactivemadvanced_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_serveropenactivemAdvanced::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_serveropenactivemAdvanced_descriptor_;
  metadata.reflection = Sheet_serveropenactivemAdvanced_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int serveropenactivemRecharge::kIdFieldNumber;
const int serveropenactivemRecharge::kNumTypeFieldNumber;
const int serveropenactivemRecharge::kNumFieldNumber;
const int serveropenactivemRecharge::kMiaoshuFieldNumber;
const int serveropenactivemRecharge::kJiangLiFieldNumber;
#endif  // !_MSC_VER

serveropenactivemRecharge::serveropenactivemRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serveropenactivemRecharge::InitAsDefaultInstance() {
}

serveropenactivemRecharge::serveropenactivemRecharge(const serveropenactivemRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serveropenactivemRecharge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  numtype_ = 0;
  num_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serveropenactivemRecharge::~serveropenactivemRecharge() {
  SharedDtor();
}

void serveropenactivemRecharge::SharedDtor() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void serveropenactivemRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serveropenactivemRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serveropenactivemRecharge_descriptor_;
}

const serveropenactivemRecharge& serveropenactivemRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

serveropenactivemRecharge* serveropenactivemRecharge::default_instance_ = NULL;

serveropenactivemRecharge* serveropenactivemRecharge::New() const {
  return new serveropenactivemRecharge;
}

void serveropenactivemRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    numtype_ = 0;
    num_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serveropenactivemRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numType;
        break;
      }

      // optional int32 numType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtype_)));
          set_has_numtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serveropenactivemRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 numType = 2;
  if (has_numtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numtype(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional string miaoshu = 4;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 5;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->jiangli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serveropenactivemRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 numType = 2;
  if (has_numtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numtype(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional string miaoshu = 4;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 5;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->jiangli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serveropenactivemRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 numType = 2;
    if (has_numtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtype());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string miaoshu = 4;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 5;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serveropenactivemRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serveropenactivemRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serveropenactivemRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serveropenactivemRecharge::MergeFrom(const serveropenactivemRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_numtype()) {
      set_numtype(from.numtype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serveropenactivemRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serveropenactivemRecharge::CopyFrom(const serveropenactivemRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serveropenactivemRecharge::IsInitialized() const {

  return true;
}

void serveropenactivemRecharge::Swap(serveropenactivemRecharge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(numtype_, other->numtype_);
    std::swap(num_, other->num_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serveropenactivemRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serveropenactivemRecharge_descriptor_;
  metadata.reflection = serveropenactivemRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_serveropenactivemRecharge::kServeropenactivemRechargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_serveropenactivemRecharge::Sheet_serveropenactivemRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_serveropenactivemRecharge::InitAsDefaultInstance() {
}

Sheet_serveropenactivemRecharge::Sheet_serveropenactivemRecharge(const Sheet_serveropenactivemRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_serveropenactivemRecharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_serveropenactivemRecharge::~Sheet_serveropenactivemRecharge() {
  SharedDtor();
}

void Sheet_serveropenactivemRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_serveropenactivemRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_serveropenactivemRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_serveropenactivemRecharge_descriptor_;
}

const Sheet_serveropenactivemRecharge& Sheet_serveropenactivemRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

Sheet_serveropenactivemRecharge* Sheet_serveropenactivemRecharge::default_instance_ = NULL;

Sheet_serveropenactivemRecharge* Sheet_serveropenactivemRecharge::New() const {
  return new Sheet_serveropenactivemRecharge;
}

void Sheet_serveropenactivemRecharge::Clear() {
  serveropenactivemrecharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_serveropenactivemRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.serveropenactivemRecharge serveropenactivemRecharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serveropenactivemRecharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveropenactivemrecharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serveropenactivemRecharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_serveropenactivemRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.serveropenactivemRecharge serveropenactivemRecharge_List = 1;
  for (int i = 0; i < this->serveropenactivemrecharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveropenactivemrecharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_serveropenactivemRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.serveropenactivemRecharge serveropenactivemRecharge_List = 1;
  for (int i = 0; i < this->serveropenactivemrecharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveropenactivemrecharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_serveropenactivemRecharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.serveropenactivemRecharge serveropenactivemRecharge_List = 1;
  total_size += 1 * this->serveropenactivemrecharge_list_size();
  for (int i = 0; i < this->serveropenactivemrecharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveropenactivemrecharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_serveropenactivemRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_serveropenactivemRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_serveropenactivemRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_serveropenactivemRecharge::MergeFrom(const Sheet_serveropenactivemRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveropenactivemrecharge_list_.MergeFrom(from.serveropenactivemrecharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_serveropenactivemRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_serveropenactivemRecharge::CopyFrom(const Sheet_serveropenactivemRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_serveropenactivemRecharge::IsInitialized() const {

  return true;
}

void Sheet_serveropenactivemRecharge::Swap(Sheet_serveropenactivemRecharge* other) {
  if (other != this) {
    serveropenactivemrecharge_list_.Swap(&other->serveropenactivemrecharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_serveropenactivemRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_serveropenactivemRecharge_descriptor_;
  metadata.reflection = Sheet_serveropenactivemRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int serveropenactivemGoods::kIdFieldNumber;
const int serveropenactivemGoods::kItemidFieldNumber;
const int serveropenactivemGoods::kCurrencyFieldNumber;
const int serveropenactivemGoods::kPriceAFieldNumber;
const int serveropenactivemGoods::kPriceBFieldNumber;
const int serveropenactivemGoods::kQuantityFieldNumber;
#endif  // !_MSC_VER

serveropenactivemGoods::serveropenactivemGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void serveropenactivemGoods::InitAsDefaultInstance() {
}

serveropenactivemGoods::serveropenactivemGoods(const serveropenactivemGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void serveropenactivemGoods::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  itemid_ = GOOGLE_LONGLONG(0);
  currency_ = 0;
  pricea_ = 0;
  priceb_ = 0;
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

serveropenactivemGoods::~serveropenactivemGoods() {
  SharedDtor();
}

void serveropenactivemGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void serveropenactivemGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serveropenactivemGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serveropenactivemGoods_descriptor_;
}

const serveropenactivemGoods& serveropenactivemGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

serveropenactivemGoods* serveropenactivemGoods::default_instance_ = NULL;

serveropenactivemGoods* serveropenactivemGoods::New() const {
  return new serveropenactivemGoods;
}

void serveropenactivemGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    itemid_ = GOOGLE_LONGLONG(0);
    currency_ = 0;
    pricea_ = 0;
    priceb_ = 0;
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool serveropenactivemGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currency;
        break;
      }

      // optional int32 currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_priceA;
        break;
      }

      // optional int32 priceA = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricea_)));
          set_has_pricea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_priceB;
        break;
      }

      // optional int32 priceB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priceb_)));
          set_has_priceb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quantity;
        break;
      }

      // optional int32 quantity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void serveropenactivemGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }

  // optional int32 priceA = 4;
  if (has_pricea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pricea(), output);
  }

  // optional int32 priceB = 5;
  if (has_priceb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priceb(), output);
  }

  // optional int32 quantity = 6;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* serveropenactivemGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 currency = 3;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currency(), target);
  }

  // optional int32 priceA = 4;
  if (has_pricea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pricea(), target);
  }

  // optional int32 priceB = 5;
  if (has_priceb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->priceb(), target);
  }

  // optional int32 quantity = 6;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int serveropenactivemGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 priceA = 4;
    if (has_pricea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricea());
    }

    // optional int32 priceB = 5;
    if (has_priceb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priceb());
    }

    // optional int32 quantity = 6;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serveropenactivemGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const serveropenactivemGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serveropenactivemGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serveropenactivemGoods::MergeFrom(const serveropenactivemGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_pricea()) {
      set_pricea(from.pricea());
    }
    if (from.has_priceb()) {
      set_priceb(from.priceb());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void serveropenactivemGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serveropenactivemGoods::CopyFrom(const serveropenactivemGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serveropenactivemGoods::IsInitialized() const {

  return true;
}

void serveropenactivemGoods::Swap(serveropenactivemGoods* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(currency_, other->currency_);
    std::swap(pricea_, other->pricea_);
    std::swap(priceb_, other->priceb_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata serveropenactivemGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serveropenactivemGoods_descriptor_;
  metadata.reflection = serveropenactivemGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_serveropenactivemGoods::kServeropenactivemGoodsListFieldNumber;
#endif  // !_MSC_VER

Sheet_serveropenactivemGoods::Sheet_serveropenactivemGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_serveropenactivemGoods::InitAsDefaultInstance() {
}

Sheet_serveropenactivemGoods::Sheet_serveropenactivemGoods(const Sheet_serveropenactivemGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_serveropenactivemGoods::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_serveropenactivemGoods::~Sheet_serveropenactivemGoods() {
  SharedDtor();
}

void Sheet_serveropenactivemGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_serveropenactivemGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_serveropenactivemGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_serveropenactivemGoods_descriptor_;
}

const Sheet_serveropenactivemGoods& Sheet_serveropenactivemGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serveropenactive_2eproto();
  return *default_instance_;
}

Sheet_serveropenactivemGoods* Sheet_serveropenactivemGoods::default_instance_ = NULL;

Sheet_serveropenactivemGoods* Sheet_serveropenactivemGoods::New() const {
  return new Sheet_serveropenactivemGoods;
}

void Sheet_serveropenactivemGoods::Clear() {
  serveropenactivemgoods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_serveropenactivemGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.serveropenactivemGoods serveropenactivemGoods_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serveropenactivemGoods_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveropenactivemgoods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serveropenactivemGoods_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_serveropenactivemGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.serveropenactivemGoods serveropenactivemGoods_List = 1;
  for (int i = 0; i < this->serveropenactivemgoods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveropenactivemgoods_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_serveropenactivemGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.serveropenactivemGoods serveropenactivemGoods_List = 1;
  for (int i = 0; i < this->serveropenactivemgoods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveropenactivemgoods_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_serveropenactivemGoods::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.serveropenactivemGoods serveropenactivemGoods_List = 1;
  total_size += 1 * this->serveropenactivemgoods_list_size();
  for (int i = 0; i < this->serveropenactivemgoods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveropenactivemgoods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_serveropenactivemGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_serveropenactivemGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_serveropenactivemGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_serveropenactivemGoods::MergeFrom(const Sheet_serveropenactivemGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveropenactivemgoods_list_.MergeFrom(from.serveropenactivemgoods_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_serveropenactivemGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_serveropenactivemGoods::CopyFrom(const Sheet_serveropenactivemGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_serveropenactivemGoods::IsInitialized() const {

  return true;
}

void Sheet_serveropenactivemGoods::Swap(Sheet_serveropenactivemGoods* other) {
  if (other != this) {
    serveropenactivemgoods_list_.Swap(&other->serveropenactivemgoods_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_serveropenactivemGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_serveropenactivemGoods_descriptor_;
  metadata.reflection = Sheet_serveropenactivemGoods_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
