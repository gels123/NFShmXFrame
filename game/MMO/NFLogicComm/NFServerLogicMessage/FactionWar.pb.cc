// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FactionWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FactionWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* RaceFactionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceFactionProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceFactionMatchProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceFactionMatchProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceMatchProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceMatchProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceMatchListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceMatchListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarRankListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarRankListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarTowerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarTowerProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarTowerListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarTowerListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarScoreRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarScoreRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarScoreRankListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarScoreRankListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarFightProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarFightProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarLeaderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarLeaderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_RaceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_RaceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_RaceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_RaceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_MatchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_MatchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_RankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_RankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_RankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_RankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_EnterBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_EnterBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_EnterBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_EnterBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_BattleInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_BattleInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_TowerHpRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_TowerHpRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_ScoreRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_ScoreRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_ScoreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_ScoreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_ResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_ResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_WinInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_WinInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_WinInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_WinInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_WinLeaderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_WinLeaderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_WinLeaderRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_WinLeaderRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_WinFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_WinFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_WinFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_WinFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_IsFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_IsFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullFactionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullFactionProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWarProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWarProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWarRankProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWarRankProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2C_PullReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2C_PullReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_C2S_PullRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_C2S_PullRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2L_InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2L_InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2L_WarResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2L_WarResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2C_RankRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2C_RankRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2C_EndWinRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2C_EndWinRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2C_WinInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2C_WinInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2C_DelWinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2C_DelWinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2C_LeaderInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2C_LeaderInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_S2C_LeaderInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_S2C_LeaderInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_C2L_FetchWinRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_C2L_FetchWinRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWar_C2S_WinDismissRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWar_C2S_WinDismissRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FactionWar_2eproto() {
  protobuf_AddDesc_FactionWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FactionWar.proto");
  GOOGLE_CHECK(file != NULL);
  RaceFactionProto_descriptor_ = file->message_type(0);
  static const int RaceFactionProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionProto, zid_),
  };
  RaceFactionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceFactionProto_descriptor_,
      RaceFactionProto::default_instance_,
      RaceFactionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceFactionProto));
  RaceFactionMatchProto_descriptor_ = file->message_type(1);
  static const int RaceFactionMatchProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionMatchProto, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionMatchProto, faction_id_),
  };
  RaceFactionMatchProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceFactionMatchProto_descriptor_,
      RaceFactionMatchProto::default_instance_,
      RaceFactionMatchProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionMatchProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionMatchProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceFactionMatchProto));
  RaceProto_descriptor_ = file->message_type(2);
  static const int RaceProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, info_lst_),
  };
  RaceProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceProto_descriptor_,
      RaceProto::default_instance_,
      RaceProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceProto));
  RaceListProto_descriptor_ = file->message_type(3);
  static const int RaceListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceListProto, race_lst_),
  };
  RaceListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceListProto_descriptor_,
      RaceListProto::default_instance_,
      RaceListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceListProto));
  RaceMatchProto_descriptor_ = file->message_type(4);
  static const int RaceMatchProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchProto, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchProto, faction_id_),
  };
  RaceMatchProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceMatchProto_descriptor_,
      RaceMatchProto::default_instance_,
      RaceMatchProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceMatchProto));
  RaceMatchListProto_descriptor_ = file->message_type(5);
  static const int RaceMatchListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchListProto, info_lst_),
  };
  RaceMatchListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceMatchListProto_descriptor_,
      RaceMatchListProto::default_instance_,
      RaceMatchListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceMatchListProto));
  WarRankProto_descriptor_ = file->message_type(6);
  static const int WarRankProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankProto, zid_),
  };
  WarRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarRankProto_descriptor_,
      WarRankProto::default_instance_,
      WarRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarRankProto));
  WarRankListProto_descriptor_ = file->message_type(7);
  static const int WarRankListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankListProto, info_lst_),
  };
  WarRankListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarRankListProto_descriptor_,
      WarRankListProto::default_instance_,
      WarRankListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarRankListProto));
  WarTowerProto_descriptor_ = file->message_type(8);
  static const int WarTowerProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerProto, mons_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerProto, is_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerProto, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerProto, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerProto, pos_),
  };
  WarTowerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarTowerProto_descriptor_,
      WarTowerProto::default_instance_,
      WarTowerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarTowerProto));
  WarTowerListProto_descriptor_ = file->message_type(9);
  static const int WarTowerListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerListProto, info_lst_),
  };
  WarTowerListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarTowerListProto_descriptor_,
      WarTowerListProto::default_instance_,
      WarTowerListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarTowerListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarTowerListProto));
  WarScoreRankProto_descriptor_ = file->message_type(10);
  static const int WarScoreRankProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankProto, score_),
  };
  WarScoreRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarScoreRankProto_descriptor_,
      WarScoreRankProto::default_instance_,
      WarScoreRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarScoreRankProto));
  WarScoreRankListProto_descriptor_ = file->message_type(11);
  static const int WarScoreRankListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankListProto, info_lst_),
  };
  WarScoreRankListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarScoreRankListProto_descriptor_,
      WarScoreRankListProto::default_instance_,
      WarScoreRankListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarScoreRankListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarScoreRankListProto));
  WarFightProto_descriptor_ = file->message_type(12);
  static const int WarFightProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, reward_),
  };
  WarFightProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarFightProto_descriptor_,
      WarFightProto::default_instance_,
      WarFightProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarFightProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarFightProto));
  WarLeaderInfo_descriptor_ = file->message_type(13);
  static const int WarLeaderInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarLeaderInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarLeaderInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarLeaderInfo, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarLeaderInfo, facade_),
  };
  WarLeaderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarLeaderInfo_descriptor_,
      WarLeaderInfo::default_instance_,
      WarLeaderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarLeaderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarLeaderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarLeaderInfo));
  FactionWar_RaceReq_descriptor_ = file->message_type(14);
  static const int FactionWar_RaceReq_offsets_[1] = {
  };
  FactionWar_RaceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_RaceReq_descriptor_,
      FactionWar_RaceReq::default_instance_,
      FactionWar_RaceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RaceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RaceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_RaceReq));
  FactionWar_RaceRsp_descriptor_ = file->message_type(15);
  static const int FactionWar_RaceRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RaceRsp, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RaceRsp, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RaceRsp, stage_),
  };
  FactionWar_RaceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_RaceRsp_descriptor_,
      FactionWar_RaceRsp::default_instance_,
      FactionWar_RaceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RaceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RaceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_RaceRsp));
  FactionWar_MatchRsp_descriptor_ = file->message_type(16);
  static const int FactionWar_MatchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_MatchRsp, match_),
  };
  FactionWar_MatchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_MatchRsp_descriptor_,
      FactionWar_MatchRsp::default_instance_,
      FactionWar_MatchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_MatchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_MatchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_MatchRsp));
  FactionWar_RankReq_descriptor_ = file->message_type(17);
  static const int FactionWar_RankReq_offsets_[1] = {
  };
  FactionWar_RankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_RankReq_descriptor_,
      FactionWar_RankReq::default_instance_,
      FactionWar_RankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_RankReq));
  FactionWar_RankRsp_descriptor_ = file->message_type(18);
  static const int FactionWar_RankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RankRsp, info_),
  };
  FactionWar_RankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_RankRsp_descriptor_,
      FactionWar_RankRsp::default_instance_,
      FactionWar_RankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_RankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_RankRsp));
  FactionWar_EnterBattleReq_descriptor_ = file->message_type(19);
  static const int FactionWar_EnterBattleReq_offsets_[1] = {
  };
  FactionWar_EnterBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_EnterBattleReq_descriptor_,
      FactionWar_EnterBattleReq::default_instance_,
      FactionWar_EnterBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_EnterBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_EnterBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_EnterBattleReq));
  FactionWar_EnterBattleRsp_descriptor_ = file->message_type(20);
  static const int FactionWar_EnterBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_EnterBattleRsp, ret_),
  };
  FactionWar_EnterBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_EnterBattleRsp_descriptor_,
      FactionWar_EnterBattleRsp::default_instance_,
      FactionWar_EnterBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_EnterBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_EnterBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_EnterBattleRsp));
  FactionWar_BattleInfoRsp_descriptor_ = file->message_type(21);
  static const int FactionWar_BattleInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_BattleInfoRsp, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_BattleInfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_BattleInfoRsp, car_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_BattleInfoRsp, camp_),
  };
  FactionWar_BattleInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_BattleInfoRsp_descriptor_,
      FactionWar_BattleInfoRsp::default_instance_,
      FactionWar_BattleInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_BattleInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_BattleInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_BattleInfoRsp));
  FactionWar_TowerHpRsp_descriptor_ = file->message_type(22);
  static const int FactionWar_TowerHpRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_TowerHpRsp, tower_),
  };
  FactionWar_TowerHpRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_TowerHpRsp_descriptor_,
      FactionWar_TowerHpRsp::default_instance_,
      FactionWar_TowerHpRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_TowerHpRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_TowerHpRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_TowerHpRsp));
  FactionWar_ScoreRankRsp_descriptor_ = file->message_type(23);
  static const int FactionWar_ScoreRankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRankRsp, rank_),
  };
  FactionWar_ScoreRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_ScoreRankRsp_descriptor_,
      FactionWar_ScoreRankRsp::default_instance_,
      FactionWar_ScoreRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_ScoreRankRsp));
  FactionWar_ScoreRsp_descriptor_ = file->message_type(24);
  static const int FactionWar_ScoreRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRsp, blue_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRsp, red_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRsp, blue_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRsp, red_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRsp, blue_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRsp, red_name_),
  };
  FactionWar_ScoreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_ScoreRsp_descriptor_,
      FactionWar_ScoreRsp::default_instance_,
      FactionWar_ScoreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ScoreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_ScoreRsp));
  FactionWar_ResultRsp_descriptor_ = file->message_type(25);
  static const int FactionWar_ResultRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ResultRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ResultRsp, info_),
  };
  FactionWar_ResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_ResultRsp_descriptor_,
      FactionWar_ResultRsp::default_instance_,
      FactionWar_ResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_ResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_ResultRsp));
  FactionWar_WinInfoReq_descriptor_ = file->message_type(26);
  static const int FactionWar_WinInfoReq_offsets_[1] = {
  };
  FactionWar_WinInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_WinInfoReq_descriptor_,
      FactionWar_WinInfoReq::default_instance_,
      FactionWar_WinInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_WinInfoReq));
  FactionWar_WinInfoRsp_descriptor_ = file->message_type(27);
  static const int FactionWar_WinInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinInfoRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinInfoRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinInfoRsp, win_num_),
  };
  FactionWar_WinInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_WinInfoRsp_descriptor_,
      FactionWar_WinInfoRsp::default_instance_,
      FactionWar_WinInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_WinInfoRsp));
  FactionWar_WinLeaderReq_descriptor_ = file->message_type(28);
  static const int FactionWar_WinLeaderReq_offsets_[1] = {
  };
  FactionWar_WinLeaderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_WinLeaderReq_descriptor_,
      FactionWar_WinLeaderReq::default_instance_,
      FactionWar_WinLeaderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinLeaderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinLeaderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_WinLeaderReq));
  FactionWar_WinLeaderRsp_descriptor_ = file->message_type(29);
  static const int FactionWar_WinLeaderRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinLeaderRsp, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinLeaderRsp, wife_),
  };
  FactionWar_WinLeaderRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_WinLeaderRsp_descriptor_,
      FactionWar_WinLeaderRsp::default_instance_,
      FactionWar_WinLeaderRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinLeaderRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinLeaderRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_WinLeaderRsp));
  FactionWar_WinFetchReq_descriptor_ = file->message_type(30);
  static const int FactionWar_WinFetchReq_offsets_[1] = {
  };
  FactionWar_WinFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_WinFetchReq_descriptor_,
      FactionWar_WinFetchReq::default_instance_,
      FactionWar_WinFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_WinFetchReq));
  FactionWar_WinFetchRsp_descriptor_ = file->message_type(31);
  static const int FactionWar_WinFetchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinFetchRsp, ret_),
  };
  FactionWar_WinFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_WinFetchRsp_descriptor_,
      FactionWar_WinFetchRsp::default_instance_,
      FactionWar_WinFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_WinFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_WinFetchRsp));
  FactionWar_IsFetchRsp_descriptor_ = file->message_type(32);
  static const int FactionWar_IsFetchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_IsFetchRsp, fetch_war_),
  };
  FactionWar_IsFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_IsFetchRsp_descriptor_,
      FactionWar_IsFetchRsp::default_instance_,
      FactionWar_IsFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_IsFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_IsFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_IsFetchRsp));
  PullFactionProto_descriptor_ = file->message_type(33);
  static const int PullFactionProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullFactionProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullFactionProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullFactionProto, fight_),
  };
  PullFactionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullFactionProto_descriptor_,
      PullFactionProto::default_instance_,
      PullFactionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullFactionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullFactionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullFactionProto));
  FactionWarProto_descriptor_ = file->message_type(34);
  static const int FactionWarProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarProto, fight_),
  };
  FactionWarProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWarProto_descriptor_,
      FactionWarProto::default_instance_,
      FactionWarProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWarProto));
  FactionWarRankProto_descriptor_ = file->message_type(35);
  static const int FactionWarRankProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarRankProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarRankProto, rank_),
  };
  FactionWarRankProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWarRankProto_descriptor_,
      FactionWarRankProto::default_instance_,
      FactionWarRankProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarRankProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarRankProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWarRankProto));
  FactionWar_S2C_PullReq_descriptor_ = file->message_type(36);
  static const int FactionWar_S2C_PullReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_PullReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_PullReq, type_),
  };
  FactionWar_S2C_PullReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2C_PullReq_descriptor_,
      FactionWar_S2C_PullReq::default_instance_,
      FactionWar_S2C_PullReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_PullReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_PullReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2C_PullReq));
  FactionWar_C2S_PullRsp_descriptor_ = file->message_type(37);
  static const int FactionWar_C2S_PullRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_PullRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_PullRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_PullRsp, type_),
  };
  FactionWar_C2S_PullRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_C2S_PullRsp_descriptor_,
      FactionWar_C2S_PullRsp::default_instance_,
      FactionWar_C2S_PullRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_PullRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_PullRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_C2S_PullRsp));
  FactionWar_S2L_InfoRsp_descriptor_ = file->message_type(38);
  static const int FactionWar_S2L_InfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, win_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, win_num_),
  };
  FactionWar_S2L_InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2L_InfoRsp_descriptor_,
      FactionWar_S2L_InfoRsp::default_instance_,
      FactionWar_S2L_InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2L_InfoRsp));
  FactionWar_S2L_WarResultRsp_descriptor_ = file->message_type(39);
  static const int FactionWar_S2L_WarResultRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, faction_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, faction_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, success_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, cid_lst1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, cid_lst2_),
  };
  FactionWar_S2L_WarResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2L_WarResultRsp_descriptor_,
      FactionWar_S2L_WarResultRsp::default_instance_,
      FactionWar_S2L_WarResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2L_WarResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2L_WarResultRsp));
  FactionWar_S2C_RankRewardRsp_descriptor_ = file->message_type(40);
  static const int FactionWar_S2C_RankRewardRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_RankRewardRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_RankRewardRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_RankRewardRsp, cids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_RankRewardRsp, type_),
  };
  FactionWar_S2C_RankRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2C_RankRewardRsp_descriptor_,
      FactionWar_S2C_RankRewardRsp::default_instance_,
      FactionWar_S2C_RankRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_RankRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_RankRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2C_RankRewardRsp));
  FactionWar_S2C_EndWinRewardRsp_descriptor_ = file->message_type(41);
  static const int FactionWar_S2C_EndWinRewardRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_EndWinRewardRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_EndWinRewardRsp, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_EndWinRewardRsp, win_zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_EndWinRewardRsp, fa_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_EndWinRewardRsp, cids_),
  };
  FactionWar_S2C_EndWinRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2C_EndWinRewardRsp_descriptor_,
      FactionWar_S2C_EndWinRewardRsp::default_instance_,
      FactionWar_S2C_EndWinRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_EndWinRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_EndWinRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2C_EndWinRewardRsp));
  FactionWar_S2C_WinInfoRsp_descriptor_ = file->message_type(42);
  static const int FactionWar_S2C_WinInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_WinInfoRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_WinInfoRsp, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_WinInfoRsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_WinInfoRsp, cids_),
  };
  FactionWar_S2C_WinInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2C_WinInfoRsp_descriptor_,
      FactionWar_S2C_WinInfoRsp::default_instance_,
      FactionWar_S2C_WinInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_WinInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_WinInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2C_WinInfoRsp));
  FactionWar_S2C_DelWinRsp_descriptor_ = file->message_type(43);
  static const int FactionWar_S2C_DelWinRsp_offsets_[1] = {
  };
  FactionWar_S2C_DelWinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2C_DelWinRsp_descriptor_,
      FactionWar_S2C_DelWinRsp::default_instance_,
      FactionWar_S2C_DelWinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_DelWinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_DelWinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2C_DelWinRsp));
  FactionWar_S2C_LeaderInfoReq_descriptor_ = file->message_type(44);
  static const int FactionWar_S2C_LeaderInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoReq, faction_id_),
  };
  FactionWar_S2C_LeaderInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2C_LeaderInfoReq_descriptor_,
      FactionWar_S2C_LeaderInfoReq::default_instance_,
      FactionWar_S2C_LeaderInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2C_LeaderInfoReq));
  FactionWar_S2C_LeaderInfoRsp_descriptor_ = file->message_type(45);
  static const int FactionWar_S2C_LeaderInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoRsp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoRsp, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoRsp, wife_),
  };
  FactionWar_S2C_LeaderInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_S2C_LeaderInfoRsp_descriptor_,
      FactionWar_S2C_LeaderInfoRsp::default_instance_,
      FactionWar_S2C_LeaderInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_S2C_LeaderInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_S2C_LeaderInfoRsp));
  FactionWar_C2L_FetchWinRewardReq_descriptor_ = file->message_type(46);
  static const int FactionWar_C2L_FetchWinRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2L_FetchWinRewardReq, cid_),
  };
  FactionWar_C2L_FetchWinRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_C2L_FetchWinRewardReq_descriptor_,
      FactionWar_C2L_FetchWinRewardReq::default_instance_,
      FactionWar_C2L_FetchWinRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2L_FetchWinRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2L_FetchWinRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_C2L_FetchWinRewardReq));
  FactionWar_C2S_WinDismissRsp_descriptor_ = file->message_type(47);
  static const int FactionWar_C2S_WinDismissRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_WinDismissRsp, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_WinDismissRsp, zid_),
  };
  FactionWar_C2S_WinDismissRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWar_C2S_WinDismissRsp_descriptor_,
      FactionWar_C2S_WinDismissRsp::default_instance_,
      FactionWar_C2S_WinDismissRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_WinDismissRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWar_C2S_WinDismissRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWar_C2S_WinDismissRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FactionWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceFactionProto_descriptor_, &RaceFactionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceFactionMatchProto_descriptor_, &RaceFactionMatchProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceProto_descriptor_, &RaceProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceListProto_descriptor_, &RaceListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceMatchProto_descriptor_, &RaceMatchProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceMatchListProto_descriptor_, &RaceMatchListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarRankProto_descriptor_, &WarRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarRankListProto_descriptor_, &WarRankListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarTowerProto_descriptor_, &WarTowerProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarTowerListProto_descriptor_, &WarTowerListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarScoreRankProto_descriptor_, &WarScoreRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarScoreRankListProto_descriptor_, &WarScoreRankListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarFightProto_descriptor_, &WarFightProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarLeaderInfo_descriptor_, &WarLeaderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_RaceReq_descriptor_, &FactionWar_RaceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_RaceRsp_descriptor_, &FactionWar_RaceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_MatchRsp_descriptor_, &FactionWar_MatchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_RankReq_descriptor_, &FactionWar_RankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_RankRsp_descriptor_, &FactionWar_RankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_EnterBattleReq_descriptor_, &FactionWar_EnterBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_EnterBattleRsp_descriptor_, &FactionWar_EnterBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_BattleInfoRsp_descriptor_, &FactionWar_BattleInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_TowerHpRsp_descriptor_, &FactionWar_TowerHpRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_ScoreRankRsp_descriptor_, &FactionWar_ScoreRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_ScoreRsp_descriptor_, &FactionWar_ScoreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_ResultRsp_descriptor_, &FactionWar_ResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_WinInfoReq_descriptor_, &FactionWar_WinInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_WinInfoRsp_descriptor_, &FactionWar_WinInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_WinLeaderReq_descriptor_, &FactionWar_WinLeaderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_WinLeaderRsp_descriptor_, &FactionWar_WinLeaderRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_WinFetchReq_descriptor_, &FactionWar_WinFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_WinFetchRsp_descriptor_, &FactionWar_WinFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_IsFetchRsp_descriptor_, &FactionWar_IsFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullFactionProto_descriptor_, &PullFactionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWarProto_descriptor_, &FactionWarProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWarRankProto_descriptor_, &FactionWarRankProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2C_PullReq_descriptor_, &FactionWar_S2C_PullReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_C2S_PullRsp_descriptor_, &FactionWar_C2S_PullRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2L_InfoRsp_descriptor_, &FactionWar_S2L_InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2L_WarResultRsp_descriptor_, &FactionWar_S2L_WarResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2C_RankRewardRsp_descriptor_, &FactionWar_S2C_RankRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2C_EndWinRewardRsp_descriptor_, &FactionWar_S2C_EndWinRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2C_WinInfoRsp_descriptor_, &FactionWar_S2C_WinInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2C_DelWinRsp_descriptor_, &FactionWar_S2C_DelWinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2C_LeaderInfoReq_descriptor_, &FactionWar_S2C_LeaderInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_S2C_LeaderInfoRsp_descriptor_, &FactionWar_S2C_LeaderInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_C2L_FetchWinRewardReq_descriptor_, &FactionWar_C2L_FetchWinRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWar_C2S_WinDismissRsp_descriptor_, &FactionWar_C2S_WinDismissRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FactionWar_2eproto() {
  delete RaceFactionProto::default_instance_;
  delete RaceFactionProto_reflection_;
  delete RaceFactionMatchProto::default_instance_;
  delete RaceFactionMatchProto_reflection_;
  delete RaceProto::default_instance_;
  delete RaceProto_reflection_;
  delete RaceListProto::default_instance_;
  delete RaceListProto_reflection_;
  delete RaceMatchProto::default_instance_;
  delete RaceMatchProto_reflection_;
  delete RaceMatchListProto::default_instance_;
  delete RaceMatchListProto_reflection_;
  delete WarRankProto::default_instance_;
  delete WarRankProto_reflection_;
  delete WarRankListProto::default_instance_;
  delete WarRankListProto_reflection_;
  delete WarTowerProto::default_instance_;
  delete WarTowerProto_reflection_;
  delete WarTowerListProto::default_instance_;
  delete WarTowerListProto_reflection_;
  delete WarScoreRankProto::default_instance_;
  delete WarScoreRankProto_reflection_;
  delete WarScoreRankListProto::default_instance_;
  delete WarScoreRankListProto_reflection_;
  delete WarFightProto::default_instance_;
  delete WarFightProto_reflection_;
  delete WarLeaderInfo::default_instance_;
  delete WarLeaderInfo_reflection_;
  delete FactionWar_RaceReq::default_instance_;
  delete FactionWar_RaceReq_reflection_;
  delete FactionWar_RaceRsp::default_instance_;
  delete FactionWar_RaceRsp_reflection_;
  delete FactionWar_MatchRsp::default_instance_;
  delete FactionWar_MatchRsp_reflection_;
  delete FactionWar_RankReq::default_instance_;
  delete FactionWar_RankReq_reflection_;
  delete FactionWar_RankRsp::default_instance_;
  delete FactionWar_RankRsp_reflection_;
  delete FactionWar_EnterBattleReq::default_instance_;
  delete FactionWar_EnterBattleReq_reflection_;
  delete FactionWar_EnterBattleRsp::default_instance_;
  delete FactionWar_EnterBattleRsp_reflection_;
  delete FactionWar_BattleInfoRsp::default_instance_;
  delete FactionWar_BattleInfoRsp_reflection_;
  delete FactionWar_TowerHpRsp::default_instance_;
  delete FactionWar_TowerHpRsp_reflection_;
  delete FactionWar_ScoreRankRsp::default_instance_;
  delete FactionWar_ScoreRankRsp_reflection_;
  delete FactionWar_ScoreRsp::default_instance_;
  delete FactionWar_ScoreRsp_reflection_;
  delete FactionWar_ResultRsp::default_instance_;
  delete FactionWar_ResultRsp_reflection_;
  delete FactionWar_WinInfoReq::default_instance_;
  delete FactionWar_WinInfoReq_reflection_;
  delete FactionWar_WinInfoRsp::default_instance_;
  delete FactionWar_WinInfoRsp_reflection_;
  delete FactionWar_WinLeaderReq::default_instance_;
  delete FactionWar_WinLeaderReq_reflection_;
  delete FactionWar_WinLeaderRsp::default_instance_;
  delete FactionWar_WinLeaderRsp_reflection_;
  delete FactionWar_WinFetchReq::default_instance_;
  delete FactionWar_WinFetchReq_reflection_;
  delete FactionWar_WinFetchRsp::default_instance_;
  delete FactionWar_WinFetchRsp_reflection_;
  delete FactionWar_IsFetchRsp::default_instance_;
  delete FactionWar_IsFetchRsp_reflection_;
  delete PullFactionProto::default_instance_;
  delete PullFactionProto_reflection_;
  delete FactionWarProto::default_instance_;
  delete FactionWarProto_reflection_;
  delete FactionWarRankProto::default_instance_;
  delete FactionWarRankProto_reflection_;
  delete FactionWar_S2C_PullReq::default_instance_;
  delete FactionWar_S2C_PullReq_reflection_;
  delete FactionWar_C2S_PullRsp::default_instance_;
  delete FactionWar_C2S_PullRsp_reflection_;
  delete FactionWar_S2L_InfoRsp::default_instance_;
  delete FactionWar_S2L_InfoRsp_reflection_;
  delete FactionWar_S2L_WarResultRsp::default_instance_;
  delete FactionWar_S2L_WarResultRsp_reflection_;
  delete FactionWar_S2C_RankRewardRsp::default_instance_;
  delete FactionWar_S2C_RankRewardRsp_reflection_;
  delete FactionWar_S2C_EndWinRewardRsp::default_instance_;
  delete FactionWar_S2C_EndWinRewardRsp_reflection_;
  delete FactionWar_S2C_WinInfoRsp::default_instance_;
  delete FactionWar_S2C_WinInfoRsp_reflection_;
  delete FactionWar_S2C_DelWinRsp::default_instance_;
  delete FactionWar_S2C_DelWinRsp_reflection_;
  delete FactionWar_S2C_LeaderInfoReq::default_instance_;
  delete FactionWar_S2C_LeaderInfoReq_reflection_;
  delete FactionWar_S2C_LeaderInfoRsp::default_instance_;
  delete FactionWar_S2C_LeaderInfoRsp_reflection_;
  delete FactionWar_C2L_FetchWinRewardReq::default_instance_;
  delete FactionWar_C2L_FetchWinRewardReq_reflection_;
  delete FactionWar_C2S_WinDismissRsp::default_instance_;
  delete FactionWar_C2S_WinDismissRsp_reflection_;
}

void protobuf_AddDesc_FactionWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020FactionWar.proto\022\010proto_ff\032\tCom.proto\032"
    "\017ComDefine.proto\"A\n\020RaceFactionProto\022\022\n\n"
    "faction_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003zid\030\003 "
    "\001(\r\"V\n\025RaceFactionMatchProto\022)\n\005match\030\001 "
    "\003(\0132\032.proto_ff.RaceFactionProto\022\022\n\nfacti"
    "on_id\030\002 \001(\r\"G\n\tRaceProto\022\014\n\004race\030\001 \001(\005\022,"
    "\n\010info_lst\030\002 \003(\0132\032.proto_ff.RaceFactionP"
    "roto\"6\n\rRaceListProto\022%\n\010race_lst\030\001 \003(\0132"
    "\023.proto_ff.RaceProto\"e\n\016RaceMatchProto\022\014"
    "\n\004race\030\001 \001(\005\0221\n\010info_lst\030\002 \003(\0132\037.proto_f"
    "f.RaceFactionMatchProto\022\022\n\nfaction_id\030\003 "
    "\001(\r\"@\n\022RaceMatchListProto\022*\n\010info_lst\030\001 "
    "\003(\0132\030.proto_ff.RaceMatchProto\"K\n\014WarRank"
    "Proto\022\014\n\004rank\030\001 \001(\005\022\022\n\nfaction_id\030\002 \001(\r\022"
    "\014\n\004name\030\003 \001(\014\022\013\n\003zid\030\004 \001(\r\"<\n\020WarRankLis"
    "tProto\022(\n\010info_lst\030\001 \003(\0132\026.proto_ff.WarR"
    "ankProto\"n\n\rWarTowerProto\022\017\n\007mons_id\030\001 \001"
    "(\004\022\017\n\007is_dead\030\002 \001(\010\022\n\n\002hp\030\003 \001(\003\022\r\n\005maxhp"
    "\030\004 \001(\003\022 \n\003pos\030\005 \001(\0132\023.proto_ff.Vector3PB"
    "\">\n\021WarTowerListProto\022)\n\010info_lst\030\001 \003(\0132"
    "\027.proto_ff.WarTowerProto\"K\n\021WarScoreRank"
    "Proto\022\014\n\004rank\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022\014\n\004name"
    "\030\003 \001(\014\022\r\n\005score\030\004 \001(\005\"F\n\025WarScoreRankLis"
    "tProto\022-\n\010info_lst\030\001 \003(\0132\033.proto_ff.WarS"
    "coreRankProto\"\242\001\n\rWarFightProto\022\014\n\004rank\030"
    "\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\013\n\003cid\030\003 \001(\004\022\014\n\004nam"
    "e\030\004 \001(\014\022\013\n\003zid\030\005 \001(\r\022\014\n\004kill\030\006 \001(\005\022\014\n\004de"
    "ad\030\007 \001(\005\022\r\n\005tower\030\010 \001(\005\022!\n\006reward\030\t \003(\0132"
    "\021.proto_ff.ComItem\"b\n\rWarLeaderInfo\022\013\n\003c"
    "id\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\013\n\003zid\030\003 \001(\r\022)\n\006f"
    "acade\030\004 \001(\0132\031.proto_ff.RoleFacadeProto\"\024"
    "\n\022FactionWar_RaceReq\"w\n\022FactionWar_RaceR"
    "sp\022%\n\004race\030\001 \001(\0132\027.proto_ff.RaceListProt"
    "o\022+\n\005match\030\002 \001(\0132\034.proto_ff.RaceMatchLis"
    "tProto\022\r\n\005stage\030\003 \001(\005\"B\n\023FactionWar_Matc"
    "hRsp\022+\n\005match\030\001 \001(\0132\034.proto_ff.RaceMatch"
    "ListProto\"\024\n\022FactionWar_RankReq\">\n\022Facti"
    "onWar_RankRsp\022(\n\004info\030\001 \001(\0132\032.proto_ff.W"
    "arRankListProto\"\033\n\031FactionWar_EnterBattl"
    "eReq\"(\n\031FactionWar_EnterBattleRsp\022\013\n\003ret"
    "\030\001 \002(\005\"W\n\030FactionWar_BattleInfoRsp\022\r\n\005st"
    "age\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\017\n\007car_num\030\003 \001("
    "\005\022\014\n\004camp\030\004 \001(\005\"C\n\025FactionWar_TowerHpRsp"
    "\022*\n\005tower\030\001 \001(\0132\033.proto_ff.WarTowerListP"
    "roto\"H\n\027FactionWar_ScoreRankRsp\022-\n\004rank\030"
    "\001 \001(\0132\037.proto_ff.WarScoreRankListProto\"\204"
    "\001\n\023FactionWar_ScoreRsp\022\022\n\nblue_score\030\001 \001"
    "(\005\022\021\n\tred_score\030\002 \001(\005\022\020\n\010blue_num\030\003 \001(\005\022"
    "\017\n\007red_num\030\004 \001(\005\022\021\n\tblue_name\030\005 \001(\014\022\020\n\010r"
    "ed_name\030\006 \001(\014\"M\n\024FactionWar_ResultRsp\022\016\n"
    "\006result\030\001 \001(\005\022%\n\004info\030\002 \003(\0132\027.proto_ff.W"
    "arFightProto\"\027\n\025FactionWar_WinInfoReq\"J\n"
    "\025FactionWar_WinInfoRsp\022\022\n\nfaction_id\030\001 \001"
    "(\r\022\014\n\004name\030\002 \001(\014\022\017\n\007win_num\030\003 \001(\005\"\031\n\027Fac"
    "tionWar_WinLeaderReq\"i\n\027FactionWar_WinLe"
    "aderRsp\022\'\n\006leader\030\001 \001(\0132\027.proto_ff.WarLe"
    "aderInfo\022%\n\004wife\030\002 \001(\0132\027.proto_ff.WarLea"
    "derInfo\"\030\n\026FactionWar_WinFetchReq\"%\n\026Fac"
    "tionWar_WinFetchRsp\022\013\n\003ret\030\001 \002(\005\"*\n\025Fact"
    "ionWar_IsFetchRsp\022\021\n\tfetch_war\030\001 \001(\005\"C\n\020"
    "PullFactionProto\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\014\022\r\n\005fight\030\003 \001(\004\"O\n\017FactionWarP"
    "roto\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\013"
    "\n\003zid\030\003 \001(\r\022\r\n\005fight\030\004 \001(\004\"7\n\023FactionWar"
    "RankProto\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004rank\030\002 "
    "\001(\005\"3\n\026FactionWar_S2C_PullReq\022\013\n\003num\030\001 \001"
    "(\005\022\014\n\004type\030\002 \001(\005\"]\n\026FactionWar_C2S_PullR"
    "sp\022\013\n\003zid\030\001 \001(\r\022(\n\004info\030\002 \003(\0132\032.proto_ff"
    ".PullFactionProto\022\014\n\004type\030\003 \001(\005\"\237\001\n\026Fact"
    "ionWar_S2L_InfoRsp\022\017\n\007sceneid\030\001 \001(\004\022\'\n\004i"
    "nfo\030\002 \003(\0132\031.proto_ff.FactionWarProto\022\r\n\005"
    "state\030\003 \001(\005\022\014\n\004race\030\004 \001(\005\022\r\n\005index\030\005 \001(\005"
    "\022\016\n\006win_id\030\006 \001(\r\022\017\n\007win_num\030\007 \001(\r\"\253\001\n\033Fa"
    "ctionWar_S2L_WarResultRsp\022\r\n\005index\030\001 \001(\005"
    "\022\014\n\004race\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\023\n\013faction"
    "_id1\030\004 \001(\r\022\023\n\013faction_id2\030\005 \001(\r\022\022\n\nsucce"
    "ss_id\030\006 \001(\r\022\020\n\010cid_lst1\030\007 \003(\004\022\020\n\010cid_lst"
    "2\030\010 \003(\004\"\\\n\034FactionWar_S2C_RankRewardRsp\022"
    "\022\n\nfaction_id\030\001 \001(\r\022\014\n\004rank\030\002 \001(\005\022\014\n\004cid"
    "s\030\003 \003(\004\022\014\n\004type\030\004 \001(\005\"s\n\036FactionWar_S2C_"
    "EndWinRewardRsp\022\022\n\nfaction_id\030\001 \001(\r\022\017\n\007w"
    "in_num\030\002 \001(\005\022\017\n\007win_zid\030\003 \001(\r\022\r\n\005fa_id\030\004"
    " \001(\r\022\014\n\004cids\030\005 \003(\004\"^\n\031FactionWar_S2C_Win"
    "InfoRsp\022\022\n\nfaction_id\030\001 \001(\r\022\017\n\007win_num\030\002"
    " \001(\005\022\016\n\006reward\030\003 \001(\010\022\014\n\004cids\030\004 \003(\004\"\032\n\030Fa"
    "ctionWar_S2C_DelWinRsp\"A\n\034FactionWar_S2C"
    "_LeaderInfoReq\022\r\n\005index\030\001 \001(\r\022\022\n\nfaction"
    "_id\030\002 \001(\r\"}\n\034FactionWar_S2C_LeaderInfoRs"
    "p\022\r\n\005index\030\001 \001(\r\022\'\n\006leader\030\002 \001(\0132\027.proto"
    "_ff.WarLeaderInfo\022%\n\004wife\030\003 \001(\0132\027.proto_"
    "ff.WarLeaderInfo\"/\n FactionWar_C2L_Fetch"
    "WinRewardReq\022\013\n\003cid\030\001 \001(\004\"\?\n\034FactionWar_"
    "C2S_WinDismissRsp\022\022\n\nfaction_id\030\001 \001(\r\022\013\n"
    "\003zid\030\002 \001(\r", 3730);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FactionWar.proto", &protobuf_RegisterTypes);
  RaceFactionProto::default_instance_ = new RaceFactionProto();
  RaceFactionMatchProto::default_instance_ = new RaceFactionMatchProto();
  RaceProto::default_instance_ = new RaceProto();
  RaceListProto::default_instance_ = new RaceListProto();
  RaceMatchProto::default_instance_ = new RaceMatchProto();
  RaceMatchListProto::default_instance_ = new RaceMatchListProto();
  WarRankProto::default_instance_ = new WarRankProto();
  WarRankListProto::default_instance_ = new WarRankListProto();
  WarTowerProto::default_instance_ = new WarTowerProto();
  WarTowerListProto::default_instance_ = new WarTowerListProto();
  WarScoreRankProto::default_instance_ = new WarScoreRankProto();
  WarScoreRankListProto::default_instance_ = new WarScoreRankListProto();
  WarFightProto::default_instance_ = new WarFightProto();
  WarLeaderInfo::default_instance_ = new WarLeaderInfo();
  FactionWar_RaceReq::default_instance_ = new FactionWar_RaceReq();
  FactionWar_RaceRsp::default_instance_ = new FactionWar_RaceRsp();
  FactionWar_MatchRsp::default_instance_ = new FactionWar_MatchRsp();
  FactionWar_RankReq::default_instance_ = new FactionWar_RankReq();
  FactionWar_RankRsp::default_instance_ = new FactionWar_RankRsp();
  FactionWar_EnterBattleReq::default_instance_ = new FactionWar_EnterBattleReq();
  FactionWar_EnterBattleRsp::default_instance_ = new FactionWar_EnterBattleRsp();
  FactionWar_BattleInfoRsp::default_instance_ = new FactionWar_BattleInfoRsp();
  FactionWar_TowerHpRsp::default_instance_ = new FactionWar_TowerHpRsp();
  FactionWar_ScoreRankRsp::default_instance_ = new FactionWar_ScoreRankRsp();
  FactionWar_ScoreRsp::default_instance_ = new FactionWar_ScoreRsp();
  FactionWar_ResultRsp::default_instance_ = new FactionWar_ResultRsp();
  FactionWar_WinInfoReq::default_instance_ = new FactionWar_WinInfoReq();
  FactionWar_WinInfoRsp::default_instance_ = new FactionWar_WinInfoRsp();
  FactionWar_WinLeaderReq::default_instance_ = new FactionWar_WinLeaderReq();
  FactionWar_WinLeaderRsp::default_instance_ = new FactionWar_WinLeaderRsp();
  FactionWar_WinFetchReq::default_instance_ = new FactionWar_WinFetchReq();
  FactionWar_WinFetchRsp::default_instance_ = new FactionWar_WinFetchRsp();
  FactionWar_IsFetchRsp::default_instance_ = new FactionWar_IsFetchRsp();
  PullFactionProto::default_instance_ = new PullFactionProto();
  FactionWarProto::default_instance_ = new FactionWarProto();
  FactionWarRankProto::default_instance_ = new FactionWarRankProto();
  FactionWar_S2C_PullReq::default_instance_ = new FactionWar_S2C_PullReq();
  FactionWar_C2S_PullRsp::default_instance_ = new FactionWar_C2S_PullRsp();
  FactionWar_S2L_InfoRsp::default_instance_ = new FactionWar_S2L_InfoRsp();
  FactionWar_S2L_WarResultRsp::default_instance_ = new FactionWar_S2L_WarResultRsp();
  FactionWar_S2C_RankRewardRsp::default_instance_ = new FactionWar_S2C_RankRewardRsp();
  FactionWar_S2C_EndWinRewardRsp::default_instance_ = new FactionWar_S2C_EndWinRewardRsp();
  FactionWar_S2C_WinInfoRsp::default_instance_ = new FactionWar_S2C_WinInfoRsp();
  FactionWar_S2C_DelWinRsp::default_instance_ = new FactionWar_S2C_DelWinRsp();
  FactionWar_S2C_LeaderInfoReq::default_instance_ = new FactionWar_S2C_LeaderInfoReq();
  FactionWar_S2C_LeaderInfoRsp::default_instance_ = new FactionWar_S2C_LeaderInfoRsp();
  FactionWar_C2L_FetchWinRewardReq::default_instance_ = new FactionWar_C2L_FetchWinRewardReq();
  FactionWar_C2S_WinDismissRsp::default_instance_ = new FactionWar_C2S_WinDismissRsp();
  RaceFactionProto::default_instance_->InitAsDefaultInstance();
  RaceFactionMatchProto::default_instance_->InitAsDefaultInstance();
  RaceProto::default_instance_->InitAsDefaultInstance();
  RaceListProto::default_instance_->InitAsDefaultInstance();
  RaceMatchProto::default_instance_->InitAsDefaultInstance();
  RaceMatchListProto::default_instance_->InitAsDefaultInstance();
  WarRankProto::default_instance_->InitAsDefaultInstance();
  WarRankListProto::default_instance_->InitAsDefaultInstance();
  WarTowerProto::default_instance_->InitAsDefaultInstance();
  WarTowerListProto::default_instance_->InitAsDefaultInstance();
  WarScoreRankProto::default_instance_->InitAsDefaultInstance();
  WarScoreRankListProto::default_instance_->InitAsDefaultInstance();
  WarFightProto::default_instance_->InitAsDefaultInstance();
  WarLeaderInfo::default_instance_->InitAsDefaultInstance();
  FactionWar_RaceReq::default_instance_->InitAsDefaultInstance();
  FactionWar_RaceRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_MatchRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_RankReq::default_instance_->InitAsDefaultInstance();
  FactionWar_RankRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_EnterBattleReq::default_instance_->InitAsDefaultInstance();
  FactionWar_EnterBattleRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_BattleInfoRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_TowerHpRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_ScoreRankRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_ScoreRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_ResultRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_WinInfoReq::default_instance_->InitAsDefaultInstance();
  FactionWar_WinInfoRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_WinLeaderReq::default_instance_->InitAsDefaultInstance();
  FactionWar_WinLeaderRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_WinFetchReq::default_instance_->InitAsDefaultInstance();
  FactionWar_WinFetchRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_IsFetchRsp::default_instance_->InitAsDefaultInstance();
  PullFactionProto::default_instance_->InitAsDefaultInstance();
  FactionWarProto::default_instance_->InitAsDefaultInstance();
  FactionWarRankProto::default_instance_->InitAsDefaultInstance();
  FactionWar_S2C_PullReq::default_instance_->InitAsDefaultInstance();
  FactionWar_C2S_PullRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_S2L_InfoRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_S2L_WarResultRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_S2C_RankRewardRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_S2C_EndWinRewardRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_S2C_WinInfoRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_S2C_DelWinRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_S2C_LeaderInfoReq::default_instance_->InitAsDefaultInstance();
  FactionWar_S2C_LeaderInfoRsp::default_instance_->InitAsDefaultInstance();
  FactionWar_C2L_FetchWinRewardReq::default_instance_->InitAsDefaultInstance();
  FactionWar_C2S_WinDismissRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FactionWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FactionWar_2eproto {
  StaticDescriptorInitializer_FactionWar_2eproto() {
    protobuf_AddDesc_FactionWar_2eproto();
  }
} static_descriptor_initializer_FactionWar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RaceFactionProto::kFactionIdFieldNumber;
const int RaceFactionProto::kNameFieldNumber;
const int RaceFactionProto::kZidFieldNumber;
#endif  // !_MSC_VER

RaceFactionProto::RaceFactionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceFactionProto::InitAsDefaultInstance() {
}

RaceFactionProto::RaceFactionProto(const RaceFactionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceFactionProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceFactionProto::~RaceFactionProto() {
  SharedDtor();
}

void RaceFactionProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RaceFactionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceFactionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceFactionProto_descriptor_;
}

const RaceFactionProto& RaceFactionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

RaceFactionProto* RaceFactionProto::default_instance_ = NULL;

RaceFactionProto* RaceFactionProto::New() const {
  return new RaceFactionProto;
}

void RaceFactionProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceFactionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceFactionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceFactionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceFactionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceFactionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceFactionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceFactionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceFactionProto::MergeFrom(const RaceFactionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceFactionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceFactionProto::CopyFrom(const RaceFactionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceFactionProto::IsInitialized() const {

  return true;
}

void RaceFactionProto::Swap(RaceFactionProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceFactionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceFactionProto_descriptor_;
  metadata.reflection = RaceFactionProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceFactionMatchProto::kMatchFieldNumber;
const int RaceFactionMatchProto::kFactionIdFieldNumber;
#endif  // !_MSC_VER

RaceFactionMatchProto::RaceFactionMatchProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceFactionMatchProto::InitAsDefaultInstance() {
}

RaceFactionMatchProto::RaceFactionMatchProto(const RaceFactionMatchProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceFactionMatchProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceFactionMatchProto::~RaceFactionMatchProto() {
  SharedDtor();
}

void RaceFactionMatchProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceFactionMatchProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceFactionMatchProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceFactionMatchProto_descriptor_;
}

const RaceFactionMatchProto& RaceFactionMatchProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

RaceFactionMatchProto* RaceFactionMatchProto::default_instance_ = NULL;

RaceFactionMatchProto* RaceFactionMatchProto::New() const {
  return new RaceFactionMatchProto;
}

void RaceFactionMatchProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    faction_id_ = 0u;
  }
  match_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceFactionMatchProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RaceFactionProto match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_match;
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceFactionMatchProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RaceFactionProto match = 1;
  for (int i = 0; i < this->match_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(i), output);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceFactionMatchProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RaceFactionProto match = 1;
  for (int i = 0; i < this->match_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->match(i), target);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceFactionMatchProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  // repeated .proto_ff.RaceFactionProto match = 1;
  total_size += 1 * this->match_size();
  for (int i = 0; i < this->match_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceFactionMatchProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceFactionMatchProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceFactionMatchProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceFactionMatchProto::MergeFrom(const RaceFactionMatchProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  match_.MergeFrom(from.match_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceFactionMatchProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceFactionMatchProto::CopyFrom(const RaceFactionMatchProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceFactionMatchProto::IsInitialized() const {

  return true;
}

void RaceFactionMatchProto::Swap(RaceFactionMatchProto* other) {
  if (other != this) {
    match_.Swap(&other->match_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceFactionMatchProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceFactionMatchProto_descriptor_;
  metadata.reflection = RaceFactionMatchProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceProto::kRaceFieldNumber;
const int RaceProto::kInfoLstFieldNumber;
#endif  // !_MSC_VER

RaceProto::RaceProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceProto::InitAsDefaultInstance() {
}

RaceProto::RaceProto(const RaceProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceProto::SharedCtor() {
  _cached_size_ = 0;
  race_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceProto::~RaceProto() {
  SharedDtor();
}

void RaceProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceProto_descriptor_;
}

const RaceProto& RaceProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

RaceProto* RaceProto::default_instance_ = NULL;

RaceProto* RaceProto::New() const {
  return new RaceProto;
}

void RaceProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    race_ = 0;
  }
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 race = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_lst;
        break;
      }

      // repeated .proto_ff.RaceFactionProto info_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 race = 1;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->race(), output);
  }

  // repeated .proto_ff.RaceFactionProto info_lst = 2;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 race = 1;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->race(), target);
  }

  // repeated .proto_ff.RaceFactionProto info_lst = 2;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 race = 1;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

  }
  // repeated .proto_ff.RaceFactionProto info_lst = 2;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceProto::MergeFrom(const RaceProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_race()) {
      set_race(from.race());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceProto::CopyFrom(const RaceProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceProto::IsInitialized() const {

  return true;
}

void RaceProto::Swap(RaceProto* other) {
  if (other != this) {
    std::swap(race_, other->race_);
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceProto_descriptor_;
  metadata.reflection = RaceProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceListProto::kRaceLstFieldNumber;
#endif  // !_MSC_VER

RaceListProto::RaceListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceListProto::InitAsDefaultInstance() {
}

RaceListProto::RaceListProto(const RaceListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceListProto::~RaceListProto() {
  SharedDtor();
}

void RaceListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceListProto_descriptor_;
}

const RaceListProto& RaceListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

RaceListProto* RaceListProto::default_instance_ = NULL;

RaceListProto* RaceListProto::New() const {
  return new RaceListProto;
}

void RaceListProto::Clear() {
  race_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RaceProto race_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_race_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_race_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_race_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RaceProto race_lst = 1;
  for (int i = 0; i < this->race_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->race_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RaceProto race_lst = 1;
  for (int i = 0; i < this->race_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->race_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RaceProto race_lst = 1;
  total_size += 1 * this->race_lst_size();
  for (int i = 0; i < this->race_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->race_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceListProto::MergeFrom(const RaceListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  race_lst_.MergeFrom(from.race_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceListProto::CopyFrom(const RaceListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceListProto::IsInitialized() const {

  return true;
}

void RaceListProto::Swap(RaceListProto* other) {
  if (other != this) {
    race_lst_.Swap(&other->race_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceListProto_descriptor_;
  metadata.reflection = RaceListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceMatchProto::kRaceFieldNumber;
const int RaceMatchProto::kInfoLstFieldNumber;
const int RaceMatchProto::kFactionIdFieldNumber;
#endif  // !_MSC_VER

RaceMatchProto::RaceMatchProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceMatchProto::InitAsDefaultInstance() {
}

RaceMatchProto::RaceMatchProto(const RaceMatchProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceMatchProto::SharedCtor() {
  _cached_size_ = 0;
  race_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceMatchProto::~RaceMatchProto() {
  SharedDtor();
}

void RaceMatchProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceMatchProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceMatchProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceMatchProto_descriptor_;
}

const RaceMatchProto& RaceMatchProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

RaceMatchProto* RaceMatchProto::default_instance_ = NULL;

RaceMatchProto* RaceMatchProto::New() const {
  return new RaceMatchProto;
}

void RaceMatchProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    race_ = 0;
    faction_id_ = 0u;
  }
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceMatchProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 race = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_lst;
        break;
      }

      // repeated .proto_ff.RaceFactionMatchProto info_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_lst;
        if (input->ExpectTag(24)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceMatchProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 race = 1;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->race(), output);
  }

  // repeated .proto_ff.RaceFactionMatchProto info_lst = 2;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_lst(i), output);
  }

  // optional uint32 faction_id = 3;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceMatchProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 race = 1;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->race(), target);
  }

  // repeated .proto_ff.RaceFactionMatchProto info_lst = 2;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_lst(i), target);
  }

  // optional uint32 faction_id = 3;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceMatchProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 race = 1;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional uint32 faction_id = 3;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  // repeated .proto_ff.RaceFactionMatchProto info_lst = 2;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceMatchProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceMatchProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceMatchProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceMatchProto::MergeFrom(const RaceMatchProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceMatchProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceMatchProto::CopyFrom(const RaceMatchProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceMatchProto::IsInitialized() const {

  return true;
}

void RaceMatchProto::Swap(RaceMatchProto* other) {
  if (other != this) {
    std::swap(race_, other->race_);
    info_lst_.Swap(&other->info_lst_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceMatchProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceMatchProto_descriptor_;
  metadata.reflection = RaceMatchProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceMatchListProto::kInfoLstFieldNumber;
#endif  // !_MSC_VER

RaceMatchListProto::RaceMatchListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceMatchListProto::InitAsDefaultInstance() {
}

RaceMatchListProto::RaceMatchListProto(const RaceMatchListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceMatchListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceMatchListProto::~RaceMatchListProto() {
  SharedDtor();
}

void RaceMatchListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceMatchListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceMatchListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceMatchListProto_descriptor_;
}

const RaceMatchListProto& RaceMatchListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

RaceMatchListProto* RaceMatchListProto::default_instance_ = NULL;

RaceMatchListProto* RaceMatchListProto::New() const {
  return new RaceMatchListProto;
}

void RaceMatchListProto::Clear() {
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceMatchListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RaceMatchProto info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceMatchListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RaceMatchProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceMatchListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RaceMatchProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceMatchListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RaceMatchProto info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceMatchListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceMatchListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceMatchListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceMatchListProto::MergeFrom(const RaceMatchListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceMatchListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceMatchListProto::CopyFrom(const RaceMatchListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceMatchListProto::IsInitialized() const {

  return true;
}

void RaceMatchListProto::Swap(RaceMatchListProto* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceMatchListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceMatchListProto_descriptor_;
  metadata.reflection = RaceMatchListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarRankProto::kRankFieldNumber;
const int WarRankProto::kFactionIdFieldNumber;
const int WarRankProto::kNameFieldNumber;
const int WarRankProto::kZidFieldNumber;
#endif  // !_MSC_VER

WarRankProto::WarRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarRankProto::InitAsDefaultInstance() {
}

WarRankProto::WarRankProto(const WarRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarRankProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarRankProto::~WarRankProto() {
  SharedDtor();
}

void WarRankProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WarRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarRankProto_descriptor_;
}

const WarRankProto& WarRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

WarRankProto* WarRankProto::default_instance_ = NULL;

WarRankProto* WarRankProto::New() const {
  return new WarRankProto;
}

void WarRankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarRankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarRankProto::MergeFrom(const WarRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarRankProto::CopyFrom(const WarRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarRankProto::IsInitialized() const {

  return true;
}

void WarRankProto::Swap(WarRankProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarRankProto_descriptor_;
  metadata.reflection = WarRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarRankListProto::kInfoLstFieldNumber;
#endif  // !_MSC_VER

WarRankListProto::WarRankListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarRankListProto::InitAsDefaultInstance() {
}

WarRankListProto::WarRankListProto(const WarRankListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarRankListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarRankListProto::~WarRankListProto() {
  SharedDtor();
}

void WarRankListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarRankListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarRankListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarRankListProto_descriptor_;
}

const WarRankListProto& WarRankListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

WarRankListProto* WarRankListProto::default_instance_ = NULL;

WarRankListProto* WarRankListProto::New() const {
  return new WarRankListProto;
}

void WarRankListProto::Clear() {
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarRankListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.WarRankProto info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarRankListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.WarRankProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarRankListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.WarRankProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarRankListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.WarRankProto info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarRankListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarRankListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarRankListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarRankListProto::MergeFrom(const WarRankListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarRankListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarRankListProto::CopyFrom(const WarRankListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarRankListProto::IsInitialized() const {

  return true;
}

void WarRankListProto::Swap(WarRankListProto* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarRankListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarRankListProto_descriptor_;
  metadata.reflection = WarRankListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarTowerProto::kMonsIdFieldNumber;
const int WarTowerProto::kIsDeadFieldNumber;
const int WarTowerProto::kHpFieldNumber;
const int WarTowerProto::kMaxhpFieldNumber;
const int WarTowerProto::kPosFieldNumber;
#endif  // !_MSC_VER

WarTowerProto::WarTowerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarTowerProto::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

WarTowerProto::WarTowerProto(const WarTowerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarTowerProto::SharedCtor() {
  _cached_size_ = 0;
  mons_id_ = GOOGLE_ULONGLONG(0);
  is_dead_ = false;
  hp_ = GOOGLE_LONGLONG(0);
  maxhp_ = GOOGLE_LONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarTowerProto::~WarTowerProto() {
  SharedDtor();
}

void WarTowerProto::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void WarTowerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarTowerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarTowerProto_descriptor_;
}

const WarTowerProto& WarTowerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

WarTowerProto* WarTowerProto::default_instance_ = NULL;

WarTowerProto* WarTowerProto::New() const {
  return new WarTowerProto;
}

void WarTowerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mons_id_ = GOOGLE_ULONGLONG(0);
    is_dead_ = false;
    hp_ = GOOGLE_LONGLONG(0);
    maxhp_ = GOOGLE_LONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarTowerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mons_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mons_id_)));
          set_has_mons_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_dead;
        break;
      }

      // optional bool is_dead = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
          set_has_is_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // optional int64 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxhp;
        break;
      }

      // optional int64 maxhp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarTowerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mons_id = 1;
  if (has_mons_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mons_id(), output);
  }

  // optional bool is_dead = 2;
  if (has_is_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_dead(), output);
  }

  // optional int64 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hp(), output);
  }

  // optional int64 maxhp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->maxhp(), output);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarTowerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mons_id = 1;
  if (has_mons_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mons_id(), target);
  }

  // optional bool is_dead = 2;
  if (has_is_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_dead(), target);
  }

  // optional int64 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hp(), target);
  }

  // optional int64 maxhp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->maxhp(), target);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarTowerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mons_id = 1;
    if (has_mons_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mons_id());
    }

    // optional bool is_dead = 2;
    if (has_is_dead()) {
      total_size += 1 + 1;
    }

    // optional int64 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 maxhp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxhp());
    }

    // optional .proto_ff.Vector3PB pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarTowerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarTowerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarTowerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarTowerProto::MergeFrom(const WarTowerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mons_id()) {
      set_mons_id(from.mons_id());
    }
    if (from.has_is_dead()) {
      set_is_dead(from.is_dead());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarTowerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarTowerProto::CopyFrom(const WarTowerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarTowerProto::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void WarTowerProto::Swap(WarTowerProto* other) {
  if (other != this) {
    std::swap(mons_id_, other->mons_id_);
    std::swap(is_dead_, other->is_dead_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarTowerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarTowerProto_descriptor_;
  metadata.reflection = WarTowerProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarTowerListProto::kInfoLstFieldNumber;
#endif  // !_MSC_VER

WarTowerListProto::WarTowerListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarTowerListProto::InitAsDefaultInstance() {
}

WarTowerListProto::WarTowerListProto(const WarTowerListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarTowerListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarTowerListProto::~WarTowerListProto() {
  SharedDtor();
}

void WarTowerListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarTowerListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarTowerListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarTowerListProto_descriptor_;
}

const WarTowerListProto& WarTowerListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

WarTowerListProto* WarTowerListProto::default_instance_ = NULL;

WarTowerListProto* WarTowerListProto::New() const {
  return new WarTowerListProto;
}

void WarTowerListProto::Clear() {
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarTowerListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.WarTowerProto info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarTowerListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.WarTowerProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarTowerListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.WarTowerProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarTowerListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.WarTowerProto info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarTowerListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarTowerListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarTowerListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarTowerListProto::MergeFrom(const WarTowerListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarTowerListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarTowerListProto::CopyFrom(const WarTowerListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarTowerListProto::IsInitialized() const {

  for (int i = 0; i < info_lst_size(); i++) {
    if (!this->info_lst(i).IsInitialized()) return false;
  }
  return true;
}

void WarTowerListProto::Swap(WarTowerListProto* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarTowerListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarTowerListProto_descriptor_;
  metadata.reflection = WarTowerListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarScoreRankProto::kRankFieldNumber;
const int WarScoreRankProto::kCidFieldNumber;
const int WarScoreRankProto::kNameFieldNumber;
const int WarScoreRankProto::kScoreFieldNumber;
#endif  // !_MSC_VER

WarScoreRankProto::WarScoreRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarScoreRankProto::InitAsDefaultInstance() {
}

WarScoreRankProto::WarScoreRankProto(const WarScoreRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarScoreRankProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarScoreRankProto::~WarScoreRankProto() {
  SharedDtor();
}

void WarScoreRankProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WarScoreRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarScoreRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarScoreRankProto_descriptor_;
}

const WarScoreRankProto& WarScoreRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

WarScoreRankProto* WarScoreRankProto::default_instance_ = NULL;

WarScoreRankProto* WarScoreRankProto::New() const {
  return new WarScoreRankProto;
}

void WarScoreRankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarScoreRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarScoreRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarScoreRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarScoreRankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarScoreRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarScoreRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarScoreRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarScoreRankProto::MergeFrom(const WarScoreRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarScoreRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarScoreRankProto::CopyFrom(const WarScoreRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarScoreRankProto::IsInitialized() const {

  return true;
}

void WarScoreRankProto::Swap(WarScoreRankProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarScoreRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarScoreRankProto_descriptor_;
  metadata.reflection = WarScoreRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarScoreRankListProto::kInfoLstFieldNumber;
#endif  // !_MSC_VER

WarScoreRankListProto::WarScoreRankListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarScoreRankListProto::InitAsDefaultInstance() {
}

WarScoreRankListProto::WarScoreRankListProto(const WarScoreRankListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarScoreRankListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarScoreRankListProto::~WarScoreRankListProto() {
  SharedDtor();
}

void WarScoreRankListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WarScoreRankListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarScoreRankListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarScoreRankListProto_descriptor_;
}

const WarScoreRankListProto& WarScoreRankListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

WarScoreRankListProto* WarScoreRankListProto::default_instance_ = NULL;

WarScoreRankListProto* WarScoreRankListProto::New() const {
  return new WarScoreRankListProto;
}

void WarScoreRankListProto::Clear() {
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarScoreRankListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.WarScoreRankProto info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarScoreRankListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.WarScoreRankProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarScoreRankListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.WarScoreRankProto info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarScoreRankListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.WarScoreRankProto info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarScoreRankListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarScoreRankListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarScoreRankListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarScoreRankListProto::MergeFrom(const WarScoreRankListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarScoreRankListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarScoreRankListProto::CopyFrom(const WarScoreRankListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarScoreRankListProto::IsInitialized() const {

  return true;
}

void WarScoreRankListProto::Swap(WarScoreRankListProto* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarScoreRankListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarScoreRankListProto_descriptor_;
  metadata.reflection = WarScoreRankListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarFightProto::kRankFieldNumber;
const int WarFightProto::kScoreFieldNumber;
const int WarFightProto::kCidFieldNumber;
const int WarFightProto::kNameFieldNumber;
const int WarFightProto::kZidFieldNumber;
const int WarFightProto::kKillFieldNumber;
const int WarFightProto::kDeadFieldNumber;
const int WarFightProto::kTowerFieldNumber;
const int WarFightProto::kRewardFieldNumber;
#endif  // !_MSC_VER

WarFightProto::WarFightProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarFightProto::InitAsDefaultInstance() {
}

WarFightProto::WarFightProto(const WarFightProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarFightProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  score_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  kill_ = 0;
  dead_ = 0;
  tower_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarFightProto::~WarFightProto() {
  SharedDtor();
}

void WarFightProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WarFightProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarFightProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarFightProto_descriptor_;
}

const WarFightProto& WarFightProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

WarFightProto* WarFightProto::default_instance_ = NULL;

WarFightProto* WarFightProto::New() const {
  return new WarFightProto;
}

void WarFightProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    score_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    kill_ = 0;
    dead_ = 0;
    tower_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarFightProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kill;
        break;
      }

      // optional int32 kill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dead;
        break;
      }

      // optional int32 dead = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_)));
          set_has_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tower;
        break;
      }

      // optional int32 tower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower_)));
          set_has_tower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.ComItem reward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarFightProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional uint32 zid = 5;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zid(), output);
  }

  // optional int32 kill = 6;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->kill(), output);
  }

  // optional int32 dead = 7;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dead(), output);
  }

  // optional int32 tower = 8;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tower(), output);
  }

  // repeated .proto_ff.ComItem reward = 9;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarFightProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional uint32 zid = 5;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zid(), target);
  }

  // optional int32 kill = 6;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->kill(), target);
  }

  // optional int32 dead = 7;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dead(), target);
  }

  // optional int32 tower = 8;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tower(), target);
  }

  // repeated .proto_ff.ComItem reward = 9;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarFightProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 5;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 kill = 6;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

    // optional int32 dead = 7;
    if (has_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead());
    }

    // optional int32 tower = 8;
    if (has_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower());
    }

  }
  // repeated .proto_ff.ComItem reward = 9;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarFightProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarFightProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarFightProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarFightProto::MergeFrom(const WarFightProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_dead()) {
      set_dead(from.dead());
    }
    if (from.has_tower()) {
      set_tower(from.tower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarFightProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarFightProto::CopyFrom(const WarFightProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarFightProto::IsInitialized() const {

  return true;
}

void WarFightProto::Swap(WarFightProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(kill_, other->kill_);
    std::swap(dead_, other->dead_);
    std::swap(tower_, other->tower_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarFightProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarFightProto_descriptor_;
  metadata.reflection = WarFightProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarLeaderInfo::kCidFieldNumber;
const int WarLeaderInfo::kNameFieldNumber;
const int WarLeaderInfo::kZidFieldNumber;
const int WarLeaderInfo::kFacadeFieldNumber;
#endif  // !_MSC_VER

WarLeaderInfo::WarLeaderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarLeaderInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

WarLeaderInfo::WarLeaderInfo(const WarLeaderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarLeaderInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  facade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarLeaderInfo::~WarLeaderInfo() {
  SharedDtor();
}

void WarLeaderInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void WarLeaderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarLeaderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarLeaderInfo_descriptor_;
}

const WarLeaderInfo& WarLeaderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

WarLeaderInfo* WarLeaderInfo::default_instance_ = NULL;

WarLeaderInfo* WarLeaderInfo::New() const {
  return new WarLeaderInfo;
}

void WarLeaderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarLeaderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarLeaderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 4;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->facade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarLeaderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 4;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->facade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarLeaderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional .proto_ff.RoleFacadeProto facade = 4;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarLeaderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarLeaderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarLeaderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarLeaderInfo::MergeFrom(const WarLeaderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarLeaderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarLeaderInfo::CopyFrom(const WarLeaderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarLeaderInfo::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void WarLeaderInfo::Swap(WarLeaderInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(facade_, other->facade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarLeaderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarLeaderInfo_descriptor_;
  metadata.reflection = WarLeaderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionWar_RaceReq::FactionWar_RaceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_RaceReq::InitAsDefaultInstance() {
}

FactionWar_RaceReq::FactionWar_RaceReq(const FactionWar_RaceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_RaceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_RaceReq::~FactionWar_RaceReq() {
  SharedDtor();
}

void FactionWar_RaceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_RaceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_RaceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_RaceReq_descriptor_;
}

const FactionWar_RaceReq& FactionWar_RaceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_RaceReq* FactionWar_RaceReq::default_instance_ = NULL;

FactionWar_RaceReq* FactionWar_RaceReq::New() const {
  return new FactionWar_RaceReq;
}

void FactionWar_RaceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_RaceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionWar_RaceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_RaceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_RaceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_RaceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_RaceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_RaceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_RaceReq::MergeFrom(const FactionWar_RaceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_RaceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_RaceReq::CopyFrom(const FactionWar_RaceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_RaceReq::IsInitialized() const {

  return true;
}

void FactionWar_RaceReq::Swap(FactionWar_RaceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_RaceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_RaceReq_descriptor_;
  metadata.reflection = FactionWar_RaceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_RaceRsp::kRaceFieldNumber;
const int FactionWar_RaceRsp::kMatchFieldNumber;
const int FactionWar_RaceRsp::kStageFieldNumber;
#endif  // !_MSC_VER

FactionWar_RaceRsp::FactionWar_RaceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_RaceRsp::InitAsDefaultInstance() {
  race_ = const_cast< ::proto_ff::RaceListProto*>(&::proto_ff::RaceListProto::default_instance());
  match_ = const_cast< ::proto_ff::RaceMatchListProto*>(&::proto_ff::RaceMatchListProto::default_instance());
}

FactionWar_RaceRsp::FactionWar_RaceRsp(const FactionWar_RaceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_RaceRsp::SharedCtor() {
  _cached_size_ = 0;
  race_ = NULL;
  match_ = NULL;
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_RaceRsp::~FactionWar_RaceRsp() {
  SharedDtor();
}

void FactionWar_RaceRsp::SharedDtor() {
  if (this != default_instance_) {
    delete race_;
    delete match_;
  }
}

void FactionWar_RaceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_RaceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_RaceRsp_descriptor_;
}

const FactionWar_RaceRsp& FactionWar_RaceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_RaceRsp* FactionWar_RaceRsp::default_instance_ = NULL;

FactionWar_RaceRsp* FactionWar_RaceRsp::New() const {
  return new FactionWar_RaceRsp;
}

void FactionWar_RaceRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_race()) {
      if (race_ != NULL) race_->::proto_ff::RaceListProto::Clear();
    }
    if (has_match()) {
      if (match_ != NULL) match_->::proto_ff::RaceMatchListProto::Clear();
    }
    stage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_RaceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RaceListProto race = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_race()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_match;
        break;
      }

      // optional .proto_ff.RaceMatchListProto match = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stage;
        break;
      }

      // optional int32 stage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_RaceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RaceListProto race = 1;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->race(), output);
  }

  // optional .proto_ff.RaceMatchListProto match = 2;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->match(), output);
  }

  // optional int32 stage = 3;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_RaceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RaceListProto race = 1;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->race(), target);
  }

  // optional .proto_ff.RaceMatchListProto match = 2;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->match(), target);
  }

  // optional int32 stage = 3;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_RaceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RaceListProto race = 1;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->race());
    }

    // optional .proto_ff.RaceMatchListProto match = 2;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match());
    }

    // optional int32 stage = 3;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_RaceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_RaceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_RaceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_RaceRsp::MergeFrom(const FactionWar_RaceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_race()) {
      mutable_race()->::proto_ff::RaceListProto::MergeFrom(from.race());
    }
    if (from.has_match()) {
      mutable_match()->::proto_ff::RaceMatchListProto::MergeFrom(from.match());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_RaceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_RaceRsp::CopyFrom(const FactionWar_RaceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_RaceRsp::IsInitialized() const {

  return true;
}

void FactionWar_RaceRsp::Swap(FactionWar_RaceRsp* other) {
  if (other != this) {
    std::swap(race_, other->race_);
    std::swap(match_, other->match_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_RaceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_RaceRsp_descriptor_;
  metadata.reflection = FactionWar_RaceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_MatchRsp::kMatchFieldNumber;
#endif  // !_MSC_VER

FactionWar_MatchRsp::FactionWar_MatchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_MatchRsp::InitAsDefaultInstance() {
  match_ = const_cast< ::proto_ff::RaceMatchListProto*>(&::proto_ff::RaceMatchListProto::default_instance());
}

FactionWar_MatchRsp::FactionWar_MatchRsp(const FactionWar_MatchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_MatchRsp::SharedCtor() {
  _cached_size_ = 0;
  match_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_MatchRsp::~FactionWar_MatchRsp() {
  SharedDtor();
}

void FactionWar_MatchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete match_;
  }
}

void FactionWar_MatchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_MatchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_MatchRsp_descriptor_;
}

const FactionWar_MatchRsp& FactionWar_MatchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_MatchRsp* FactionWar_MatchRsp::default_instance_ = NULL;

FactionWar_MatchRsp* FactionWar_MatchRsp::New() const {
  return new FactionWar_MatchRsp;
}

void FactionWar_MatchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_match()) {
      if (match_ != NULL) match_->::proto_ff::RaceMatchListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_MatchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RaceMatchListProto match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_MatchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RaceMatchListProto match = 1;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_MatchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RaceMatchListProto match = 1;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->match(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_MatchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RaceMatchListProto match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_MatchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_MatchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_MatchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_MatchRsp::MergeFrom(const FactionWar_MatchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match()) {
      mutable_match()->::proto_ff::RaceMatchListProto::MergeFrom(from.match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_MatchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_MatchRsp::CopyFrom(const FactionWar_MatchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_MatchRsp::IsInitialized() const {

  return true;
}

void FactionWar_MatchRsp::Swap(FactionWar_MatchRsp* other) {
  if (other != this) {
    std::swap(match_, other->match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_MatchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_MatchRsp_descriptor_;
  metadata.reflection = FactionWar_MatchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionWar_RankReq::FactionWar_RankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_RankReq::InitAsDefaultInstance() {
}

FactionWar_RankReq::FactionWar_RankReq(const FactionWar_RankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_RankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_RankReq::~FactionWar_RankReq() {
  SharedDtor();
}

void FactionWar_RankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_RankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_RankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_RankReq_descriptor_;
}

const FactionWar_RankReq& FactionWar_RankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_RankReq* FactionWar_RankReq::default_instance_ = NULL;

FactionWar_RankReq* FactionWar_RankReq::New() const {
  return new FactionWar_RankReq;
}

void FactionWar_RankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_RankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionWar_RankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_RankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_RankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_RankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_RankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_RankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_RankReq::MergeFrom(const FactionWar_RankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_RankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_RankReq::CopyFrom(const FactionWar_RankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_RankReq::IsInitialized() const {

  return true;
}

void FactionWar_RankReq::Swap(FactionWar_RankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_RankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_RankReq_descriptor_;
  metadata.reflection = FactionWar_RankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_RankRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

FactionWar_RankRsp::FactionWar_RankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_RankRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::WarRankListProto*>(&::proto_ff::WarRankListProto::default_instance());
}

FactionWar_RankRsp::FactionWar_RankRsp(const FactionWar_RankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_RankRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_RankRsp::~FactionWar_RankRsp() {
  SharedDtor();
}

void FactionWar_RankRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void FactionWar_RankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_RankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_RankRsp_descriptor_;
}

const FactionWar_RankRsp& FactionWar_RankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_RankRsp* FactionWar_RankRsp::default_instance_ = NULL;

FactionWar_RankRsp* FactionWar_RankRsp::New() const {
  return new FactionWar_RankRsp;
}

void FactionWar_RankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::WarRankListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_RankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.WarRankListProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_RankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.WarRankListProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_RankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.WarRankListProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_RankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.WarRankListProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_RankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_RankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_RankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_RankRsp::MergeFrom(const FactionWar_RankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::WarRankListProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_RankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_RankRsp::CopyFrom(const FactionWar_RankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_RankRsp::IsInitialized() const {

  return true;
}

void FactionWar_RankRsp::Swap(FactionWar_RankRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_RankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_RankRsp_descriptor_;
  metadata.reflection = FactionWar_RankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionWar_EnterBattleReq::FactionWar_EnterBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_EnterBattleReq::InitAsDefaultInstance() {
}

FactionWar_EnterBattleReq::FactionWar_EnterBattleReq(const FactionWar_EnterBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_EnterBattleReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_EnterBattleReq::~FactionWar_EnterBattleReq() {
  SharedDtor();
}

void FactionWar_EnterBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_EnterBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_EnterBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_EnterBattleReq_descriptor_;
}

const FactionWar_EnterBattleReq& FactionWar_EnterBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_EnterBattleReq* FactionWar_EnterBattleReq::default_instance_ = NULL;

FactionWar_EnterBattleReq* FactionWar_EnterBattleReq::New() const {
  return new FactionWar_EnterBattleReq;
}

void FactionWar_EnterBattleReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_EnterBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionWar_EnterBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_EnterBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_EnterBattleReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_EnterBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_EnterBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_EnterBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_EnterBattleReq::MergeFrom(const FactionWar_EnterBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_EnterBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_EnterBattleReq::CopyFrom(const FactionWar_EnterBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_EnterBattleReq::IsInitialized() const {

  return true;
}

void FactionWar_EnterBattleReq::Swap(FactionWar_EnterBattleReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_EnterBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_EnterBattleReq_descriptor_;
  metadata.reflection = FactionWar_EnterBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_EnterBattleRsp::kRetFieldNumber;
#endif  // !_MSC_VER

FactionWar_EnterBattleRsp::FactionWar_EnterBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_EnterBattleRsp::InitAsDefaultInstance() {
}

FactionWar_EnterBattleRsp::FactionWar_EnterBattleRsp(const FactionWar_EnterBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_EnterBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_EnterBattleRsp::~FactionWar_EnterBattleRsp() {
  SharedDtor();
}

void FactionWar_EnterBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_EnterBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_EnterBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_EnterBattleRsp_descriptor_;
}

const FactionWar_EnterBattleRsp& FactionWar_EnterBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_EnterBattleRsp* FactionWar_EnterBattleRsp::default_instance_ = NULL;

FactionWar_EnterBattleRsp* FactionWar_EnterBattleRsp::New() const {
  return new FactionWar_EnterBattleRsp;
}

void FactionWar_EnterBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_EnterBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_EnterBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_EnterBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_EnterBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_EnterBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_EnterBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_EnterBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_EnterBattleRsp::MergeFrom(const FactionWar_EnterBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_EnterBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_EnterBattleRsp::CopyFrom(const FactionWar_EnterBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_EnterBattleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FactionWar_EnterBattleRsp::Swap(FactionWar_EnterBattleRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_EnterBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_EnterBattleRsp_descriptor_;
  metadata.reflection = FactionWar_EnterBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_BattleInfoRsp::kStageFieldNumber;
const int FactionWar_BattleInfoRsp::kScoreFieldNumber;
const int FactionWar_BattleInfoRsp::kCarNumFieldNumber;
const int FactionWar_BattleInfoRsp::kCampFieldNumber;
#endif  // !_MSC_VER

FactionWar_BattleInfoRsp::FactionWar_BattleInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_BattleInfoRsp::InitAsDefaultInstance() {
}

FactionWar_BattleInfoRsp::FactionWar_BattleInfoRsp(const FactionWar_BattleInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_BattleInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  score_ = 0;
  car_num_ = 0;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_BattleInfoRsp::~FactionWar_BattleInfoRsp() {
  SharedDtor();
}

void FactionWar_BattleInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_BattleInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_BattleInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_BattleInfoRsp_descriptor_;
}

const FactionWar_BattleInfoRsp& FactionWar_BattleInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_BattleInfoRsp* FactionWar_BattleInfoRsp::default_instance_ = NULL;

FactionWar_BattleInfoRsp* FactionWar_BattleInfoRsp::New() const {
  return new FactionWar_BattleInfoRsp;
}

void FactionWar_BattleInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    score_ = 0;
    car_num_ = 0;
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_BattleInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_car_num;
        break;
      }

      // optional int32 car_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_car_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &car_num_)));
          set_has_car_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_camp;
        break;
      }

      // optional int32 camp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_BattleInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 car_num = 3;
  if (has_car_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->car_num(), output);
  }

  // optional int32 camp = 4;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_BattleInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 car_num = 3;
  if (has_car_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->car_num(), target);
  }

  // optional int32 camp = 4;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_BattleInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 car_num = 3;
    if (has_car_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->car_num());
    }

    // optional int32 camp = 4;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_BattleInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_BattleInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_BattleInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_BattleInfoRsp::MergeFrom(const FactionWar_BattleInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_car_num()) {
      set_car_num(from.car_num());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_BattleInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_BattleInfoRsp::CopyFrom(const FactionWar_BattleInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_BattleInfoRsp::IsInitialized() const {

  return true;
}

void FactionWar_BattleInfoRsp::Swap(FactionWar_BattleInfoRsp* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(score_, other->score_);
    std::swap(car_num_, other->car_num_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_BattleInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_BattleInfoRsp_descriptor_;
  metadata.reflection = FactionWar_BattleInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_TowerHpRsp::kTowerFieldNumber;
#endif  // !_MSC_VER

FactionWar_TowerHpRsp::FactionWar_TowerHpRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_TowerHpRsp::InitAsDefaultInstance() {
  tower_ = const_cast< ::proto_ff::WarTowerListProto*>(&::proto_ff::WarTowerListProto::default_instance());
}

FactionWar_TowerHpRsp::FactionWar_TowerHpRsp(const FactionWar_TowerHpRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_TowerHpRsp::SharedCtor() {
  _cached_size_ = 0;
  tower_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_TowerHpRsp::~FactionWar_TowerHpRsp() {
  SharedDtor();
}

void FactionWar_TowerHpRsp::SharedDtor() {
  if (this != default_instance_) {
    delete tower_;
  }
}

void FactionWar_TowerHpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_TowerHpRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_TowerHpRsp_descriptor_;
}

const FactionWar_TowerHpRsp& FactionWar_TowerHpRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_TowerHpRsp* FactionWar_TowerHpRsp::default_instance_ = NULL;

FactionWar_TowerHpRsp* FactionWar_TowerHpRsp::New() const {
  return new FactionWar_TowerHpRsp;
}

void FactionWar_TowerHpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tower()) {
      if (tower_ != NULL) tower_->::proto_ff::WarTowerListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_TowerHpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.WarTowerListProto tower = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_TowerHpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.WarTowerListProto tower = 1;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_TowerHpRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.WarTowerListProto tower = 1;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_TowerHpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.WarTowerListProto tower = 1;
    if (has_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_TowerHpRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_TowerHpRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_TowerHpRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_TowerHpRsp::MergeFrom(const FactionWar_TowerHpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tower()) {
      mutable_tower()->::proto_ff::WarTowerListProto::MergeFrom(from.tower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_TowerHpRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_TowerHpRsp::CopyFrom(const FactionWar_TowerHpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_TowerHpRsp::IsInitialized() const {

  if (has_tower()) {
    if (!this->tower().IsInitialized()) return false;
  }
  return true;
}

void FactionWar_TowerHpRsp::Swap(FactionWar_TowerHpRsp* other) {
  if (other != this) {
    std::swap(tower_, other->tower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_TowerHpRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_TowerHpRsp_descriptor_;
  metadata.reflection = FactionWar_TowerHpRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_ScoreRankRsp::kRankFieldNumber;
#endif  // !_MSC_VER

FactionWar_ScoreRankRsp::FactionWar_ScoreRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_ScoreRankRsp::InitAsDefaultInstance() {
  rank_ = const_cast< ::proto_ff::WarScoreRankListProto*>(&::proto_ff::WarScoreRankListProto::default_instance());
}

FactionWar_ScoreRankRsp::FactionWar_ScoreRankRsp(const FactionWar_ScoreRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_ScoreRankRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_ScoreRankRsp::~FactionWar_ScoreRankRsp() {
  SharedDtor();
}

void FactionWar_ScoreRankRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rank_;
  }
}

void FactionWar_ScoreRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_ScoreRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_ScoreRankRsp_descriptor_;
}

const FactionWar_ScoreRankRsp& FactionWar_ScoreRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_ScoreRankRsp* FactionWar_ScoreRankRsp::default_instance_ = NULL;

FactionWar_ScoreRankRsp* FactionWar_ScoreRankRsp::New() const {
  return new FactionWar_ScoreRankRsp;
}

void FactionWar_ScoreRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != NULL) rank_->::proto_ff::WarScoreRankListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_ScoreRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.WarScoreRankListProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_ScoreRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.WarScoreRankListProto rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_ScoreRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.WarScoreRankListProto rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_ScoreRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.WarScoreRankListProto rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_ScoreRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_ScoreRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_ScoreRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_ScoreRankRsp::MergeFrom(const FactionWar_ScoreRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      mutable_rank()->::proto_ff::WarScoreRankListProto::MergeFrom(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_ScoreRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_ScoreRankRsp::CopyFrom(const FactionWar_ScoreRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_ScoreRankRsp::IsInitialized() const {

  return true;
}

void FactionWar_ScoreRankRsp::Swap(FactionWar_ScoreRankRsp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_ScoreRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_ScoreRankRsp_descriptor_;
  metadata.reflection = FactionWar_ScoreRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_ScoreRsp::kBlueScoreFieldNumber;
const int FactionWar_ScoreRsp::kRedScoreFieldNumber;
const int FactionWar_ScoreRsp::kBlueNumFieldNumber;
const int FactionWar_ScoreRsp::kRedNumFieldNumber;
const int FactionWar_ScoreRsp::kBlueNameFieldNumber;
const int FactionWar_ScoreRsp::kRedNameFieldNumber;
#endif  // !_MSC_VER

FactionWar_ScoreRsp::FactionWar_ScoreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_ScoreRsp::InitAsDefaultInstance() {
}

FactionWar_ScoreRsp::FactionWar_ScoreRsp(const FactionWar_ScoreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_ScoreRsp::SharedCtor() {
  _cached_size_ = 0;
  blue_score_ = 0;
  red_score_ = 0;
  blue_num_ = 0;
  red_num_ = 0;
  blue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  red_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_ScoreRsp::~FactionWar_ScoreRsp() {
  SharedDtor();
}

void FactionWar_ScoreRsp::SharedDtor() {
  if (blue_name_ != &::google::protobuf::internal::kEmptyString) {
    delete blue_name_;
  }
  if (red_name_ != &::google::protobuf::internal::kEmptyString) {
    delete red_name_;
  }
  if (this != default_instance_) {
  }
}

void FactionWar_ScoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_ScoreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_ScoreRsp_descriptor_;
}

const FactionWar_ScoreRsp& FactionWar_ScoreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_ScoreRsp* FactionWar_ScoreRsp::default_instance_ = NULL;

FactionWar_ScoreRsp* FactionWar_ScoreRsp::New() const {
  return new FactionWar_ScoreRsp;
}

void FactionWar_ScoreRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blue_score_ = 0;
    red_score_ = 0;
    blue_num_ = 0;
    red_num_ = 0;
    if (has_blue_name()) {
      if (blue_name_ != &::google::protobuf::internal::kEmptyString) {
        blue_name_->clear();
      }
    }
    if (has_red_name()) {
      if (red_name_ != &::google::protobuf::internal::kEmptyString) {
        red_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_ScoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 blue_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_score_)));
          set_has_blue_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_red_score;
        break;
      }

      // optional int32 red_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_score_)));
          set_has_red_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blue_num;
        break;
      }

      // optional int32 blue_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_num_)));
          set_has_blue_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_red_num;
        break;
      }

      // optional int32 red_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_num_)));
          set_has_red_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_blue_name;
        break;
      }

      // optional bytes blue_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blue_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_red_name;
        break;
      }

      // optional bytes red_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_red_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_ScoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 blue_score = 1;
  if (has_blue_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blue_score(), output);
  }

  // optional int32 red_score = 2;
  if (has_red_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->red_score(), output);
  }

  // optional int32 blue_num = 3;
  if (has_blue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blue_num(), output);
  }

  // optional int32 red_num = 4;
  if (has_red_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->red_num(), output);
  }

  // optional bytes blue_name = 5;
  if (has_blue_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->blue_name(), output);
  }

  // optional bytes red_name = 6;
  if (has_red_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->red_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_ScoreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 blue_score = 1;
  if (has_blue_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blue_score(), target);
  }

  // optional int32 red_score = 2;
  if (has_red_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->red_score(), target);
  }

  // optional int32 blue_num = 3;
  if (has_blue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blue_num(), target);
  }

  // optional int32 red_num = 4;
  if (has_red_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->red_num(), target);
  }

  // optional bytes blue_name = 5;
  if (has_blue_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->blue_name(), target);
  }

  // optional bytes red_name = 6;
  if (has_red_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->red_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_ScoreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 blue_score = 1;
    if (has_blue_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue_score());
    }

    // optional int32 red_score = 2;
    if (has_red_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->red_score());
    }

    // optional int32 blue_num = 3;
    if (has_blue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue_num());
    }

    // optional int32 red_num = 4;
    if (has_red_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->red_num());
    }

    // optional bytes blue_name = 5;
    if (has_blue_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blue_name());
    }

    // optional bytes red_name = 6;
    if (has_red_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->red_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_ScoreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_ScoreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_ScoreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_ScoreRsp::MergeFrom(const FactionWar_ScoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blue_score()) {
      set_blue_score(from.blue_score());
    }
    if (from.has_red_score()) {
      set_red_score(from.red_score());
    }
    if (from.has_blue_num()) {
      set_blue_num(from.blue_num());
    }
    if (from.has_red_num()) {
      set_red_num(from.red_num());
    }
    if (from.has_blue_name()) {
      set_blue_name(from.blue_name());
    }
    if (from.has_red_name()) {
      set_red_name(from.red_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_ScoreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_ScoreRsp::CopyFrom(const FactionWar_ScoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_ScoreRsp::IsInitialized() const {

  return true;
}

void FactionWar_ScoreRsp::Swap(FactionWar_ScoreRsp* other) {
  if (other != this) {
    std::swap(blue_score_, other->blue_score_);
    std::swap(red_score_, other->red_score_);
    std::swap(blue_num_, other->blue_num_);
    std::swap(red_num_, other->red_num_);
    std::swap(blue_name_, other->blue_name_);
    std::swap(red_name_, other->red_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_ScoreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_ScoreRsp_descriptor_;
  metadata.reflection = FactionWar_ScoreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_ResultRsp::kResultFieldNumber;
const int FactionWar_ResultRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

FactionWar_ResultRsp::FactionWar_ResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_ResultRsp::InitAsDefaultInstance() {
}

FactionWar_ResultRsp::FactionWar_ResultRsp(const FactionWar_ResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_ResultRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_ResultRsp::~FactionWar_ResultRsp() {
  SharedDtor();
}

void FactionWar_ResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_ResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_ResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_ResultRsp_descriptor_;
}

const FactionWar_ResultRsp& FactionWar_ResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_ResultRsp* FactionWar_ResultRsp::default_instance_ = NULL;

FactionWar_ResultRsp* FactionWar_ResultRsp::New() const {
  return new FactionWar_ResultRsp;
}

void FactionWar_ResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_ResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.WarFightProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_ResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto_ff.WarFightProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_ResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto_ff.WarFightProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_ResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto_ff.WarFightProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_ResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_ResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_ResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_ResultRsp::MergeFrom(const FactionWar_ResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_ResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_ResultRsp::CopyFrom(const FactionWar_ResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_ResultRsp::IsInitialized() const {

  return true;
}

void FactionWar_ResultRsp::Swap(FactionWar_ResultRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_ResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_ResultRsp_descriptor_;
  metadata.reflection = FactionWar_ResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionWar_WinInfoReq::FactionWar_WinInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_WinInfoReq::InitAsDefaultInstance() {
}

FactionWar_WinInfoReq::FactionWar_WinInfoReq(const FactionWar_WinInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_WinInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_WinInfoReq::~FactionWar_WinInfoReq() {
  SharedDtor();
}

void FactionWar_WinInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_WinInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_WinInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_WinInfoReq_descriptor_;
}

const FactionWar_WinInfoReq& FactionWar_WinInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_WinInfoReq* FactionWar_WinInfoReq::default_instance_ = NULL;

FactionWar_WinInfoReq* FactionWar_WinInfoReq::New() const {
  return new FactionWar_WinInfoReq;
}

void FactionWar_WinInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_WinInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionWar_WinInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_WinInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_WinInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_WinInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_WinInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_WinInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_WinInfoReq::MergeFrom(const FactionWar_WinInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_WinInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_WinInfoReq::CopyFrom(const FactionWar_WinInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_WinInfoReq::IsInitialized() const {

  return true;
}

void FactionWar_WinInfoReq::Swap(FactionWar_WinInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_WinInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_WinInfoReq_descriptor_;
  metadata.reflection = FactionWar_WinInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_WinInfoRsp::kFactionIdFieldNumber;
const int FactionWar_WinInfoRsp::kNameFieldNumber;
const int FactionWar_WinInfoRsp::kWinNumFieldNumber;
#endif  // !_MSC_VER

FactionWar_WinInfoRsp::FactionWar_WinInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_WinInfoRsp::InitAsDefaultInstance() {
}

FactionWar_WinInfoRsp::FactionWar_WinInfoRsp(const FactionWar_WinInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_WinInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_WinInfoRsp::~FactionWar_WinInfoRsp() {
  SharedDtor();
}

void FactionWar_WinInfoRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionWar_WinInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_WinInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_WinInfoRsp_descriptor_;
}

const FactionWar_WinInfoRsp& FactionWar_WinInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_WinInfoRsp* FactionWar_WinInfoRsp::default_instance_ = NULL;

FactionWar_WinInfoRsp* FactionWar_WinInfoRsp::New() const {
  return new FactionWar_WinInfoRsp;
}

void FactionWar_WinInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    win_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_WinInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_WinInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_WinInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_WinInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 win_num = 3;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_WinInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_WinInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_WinInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_WinInfoRsp::MergeFrom(const FactionWar_WinInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_WinInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_WinInfoRsp::CopyFrom(const FactionWar_WinInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_WinInfoRsp::IsInitialized() const {

  return true;
}

void FactionWar_WinInfoRsp::Swap(FactionWar_WinInfoRsp* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(win_num_, other->win_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_WinInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_WinInfoRsp_descriptor_;
  metadata.reflection = FactionWar_WinInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionWar_WinLeaderReq::FactionWar_WinLeaderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_WinLeaderReq::InitAsDefaultInstance() {
}

FactionWar_WinLeaderReq::FactionWar_WinLeaderReq(const FactionWar_WinLeaderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_WinLeaderReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_WinLeaderReq::~FactionWar_WinLeaderReq() {
  SharedDtor();
}

void FactionWar_WinLeaderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_WinLeaderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_WinLeaderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_WinLeaderReq_descriptor_;
}

const FactionWar_WinLeaderReq& FactionWar_WinLeaderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_WinLeaderReq* FactionWar_WinLeaderReq::default_instance_ = NULL;

FactionWar_WinLeaderReq* FactionWar_WinLeaderReq::New() const {
  return new FactionWar_WinLeaderReq;
}

void FactionWar_WinLeaderReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_WinLeaderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionWar_WinLeaderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_WinLeaderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_WinLeaderReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_WinLeaderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_WinLeaderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_WinLeaderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_WinLeaderReq::MergeFrom(const FactionWar_WinLeaderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_WinLeaderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_WinLeaderReq::CopyFrom(const FactionWar_WinLeaderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_WinLeaderReq::IsInitialized() const {

  return true;
}

void FactionWar_WinLeaderReq::Swap(FactionWar_WinLeaderReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_WinLeaderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_WinLeaderReq_descriptor_;
  metadata.reflection = FactionWar_WinLeaderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_WinLeaderRsp::kLeaderFieldNumber;
const int FactionWar_WinLeaderRsp::kWifeFieldNumber;
#endif  // !_MSC_VER

FactionWar_WinLeaderRsp::FactionWar_WinLeaderRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_WinLeaderRsp::InitAsDefaultInstance() {
  leader_ = const_cast< ::proto_ff::WarLeaderInfo*>(&::proto_ff::WarLeaderInfo::default_instance());
  wife_ = const_cast< ::proto_ff::WarLeaderInfo*>(&::proto_ff::WarLeaderInfo::default_instance());
}

FactionWar_WinLeaderRsp::FactionWar_WinLeaderRsp(const FactionWar_WinLeaderRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_WinLeaderRsp::SharedCtor() {
  _cached_size_ = 0;
  leader_ = NULL;
  wife_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_WinLeaderRsp::~FactionWar_WinLeaderRsp() {
  SharedDtor();
}

void FactionWar_WinLeaderRsp::SharedDtor() {
  if (this != default_instance_) {
    delete leader_;
    delete wife_;
  }
}

void FactionWar_WinLeaderRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_WinLeaderRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_WinLeaderRsp_descriptor_;
}

const FactionWar_WinLeaderRsp& FactionWar_WinLeaderRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_WinLeaderRsp* FactionWar_WinLeaderRsp::default_instance_ = NULL;

FactionWar_WinLeaderRsp* FactionWar_WinLeaderRsp::New() const {
  return new FactionWar_WinLeaderRsp;
}

void FactionWar_WinLeaderRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_leader()) {
      if (leader_ != NULL) leader_->::proto_ff::WarLeaderInfo::Clear();
    }
    if (has_wife()) {
      if (wife_ != NULL) wife_->::proto_ff::WarLeaderInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_WinLeaderRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.WarLeaderInfo leader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wife;
        break;
      }

      // optional .proto_ff.WarLeaderInfo wife = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wife:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wife()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_WinLeaderRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.WarLeaderInfo leader = 1;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leader(), output);
  }

  // optional .proto_ff.WarLeaderInfo wife = 2;
  if (has_wife()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wife(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_WinLeaderRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.WarLeaderInfo leader = 1;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leader(), target);
  }

  // optional .proto_ff.WarLeaderInfo wife = 2;
  if (has_wife()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wife(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_WinLeaderRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.WarLeaderInfo leader = 1;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

    // optional .proto_ff.WarLeaderInfo wife = 2;
    if (has_wife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wife());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_WinLeaderRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_WinLeaderRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_WinLeaderRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_WinLeaderRsp::MergeFrom(const FactionWar_WinLeaderRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader()) {
      mutable_leader()->::proto_ff::WarLeaderInfo::MergeFrom(from.leader());
    }
    if (from.has_wife()) {
      mutable_wife()->::proto_ff::WarLeaderInfo::MergeFrom(from.wife());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_WinLeaderRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_WinLeaderRsp::CopyFrom(const FactionWar_WinLeaderRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_WinLeaderRsp::IsInitialized() const {

  if (has_leader()) {
    if (!this->leader().IsInitialized()) return false;
  }
  if (has_wife()) {
    if (!this->wife().IsInitialized()) return false;
  }
  return true;
}

void FactionWar_WinLeaderRsp::Swap(FactionWar_WinLeaderRsp* other) {
  if (other != this) {
    std::swap(leader_, other->leader_);
    std::swap(wife_, other->wife_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_WinLeaderRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_WinLeaderRsp_descriptor_;
  metadata.reflection = FactionWar_WinLeaderRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionWar_WinFetchReq::FactionWar_WinFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_WinFetchReq::InitAsDefaultInstance() {
}

FactionWar_WinFetchReq::FactionWar_WinFetchReq(const FactionWar_WinFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_WinFetchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_WinFetchReq::~FactionWar_WinFetchReq() {
  SharedDtor();
}

void FactionWar_WinFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_WinFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_WinFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_WinFetchReq_descriptor_;
}

const FactionWar_WinFetchReq& FactionWar_WinFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_WinFetchReq* FactionWar_WinFetchReq::default_instance_ = NULL;

FactionWar_WinFetchReq* FactionWar_WinFetchReq::New() const {
  return new FactionWar_WinFetchReq;
}

void FactionWar_WinFetchReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_WinFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionWar_WinFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_WinFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_WinFetchReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_WinFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_WinFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_WinFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_WinFetchReq::MergeFrom(const FactionWar_WinFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_WinFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_WinFetchReq::CopyFrom(const FactionWar_WinFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_WinFetchReq::IsInitialized() const {

  return true;
}

void FactionWar_WinFetchReq::Swap(FactionWar_WinFetchReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_WinFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_WinFetchReq_descriptor_;
  metadata.reflection = FactionWar_WinFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_WinFetchRsp::kRetFieldNumber;
#endif  // !_MSC_VER

FactionWar_WinFetchRsp::FactionWar_WinFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_WinFetchRsp::InitAsDefaultInstance() {
}

FactionWar_WinFetchRsp::FactionWar_WinFetchRsp(const FactionWar_WinFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_WinFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_WinFetchRsp::~FactionWar_WinFetchRsp() {
  SharedDtor();
}

void FactionWar_WinFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_WinFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_WinFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_WinFetchRsp_descriptor_;
}

const FactionWar_WinFetchRsp& FactionWar_WinFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_WinFetchRsp* FactionWar_WinFetchRsp::default_instance_ = NULL;

FactionWar_WinFetchRsp* FactionWar_WinFetchRsp::New() const {
  return new FactionWar_WinFetchRsp;
}

void FactionWar_WinFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_WinFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_WinFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_WinFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_WinFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_WinFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_WinFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_WinFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_WinFetchRsp::MergeFrom(const FactionWar_WinFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_WinFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_WinFetchRsp::CopyFrom(const FactionWar_WinFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_WinFetchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FactionWar_WinFetchRsp::Swap(FactionWar_WinFetchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_WinFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_WinFetchRsp_descriptor_;
  metadata.reflection = FactionWar_WinFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_IsFetchRsp::kFetchWarFieldNumber;
#endif  // !_MSC_VER

FactionWar_IsFetchRsp::FactionWar_IsFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_IsFetchRsp::InitAsDefaultInstance() {
}

FactionWar_IsFetchRsp::FactionWar_IsFetchRsp(const FactionWar_IsFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_IsFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  fetch_war_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_IsFetchRsp::~FactionWar_IsFetchRsp() {
  SharedDtor();
}

void FactionWar_IsFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_IsFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_IsFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_IsFetchRsp_descriptor_;
}

const FactionWar_IsFetchRsp& FactionWar_IsFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_IsFetchRsp* FactionWar_IsFetchRsp::default_instance_ = NULL;

FactionWar_IsFetchRsp* FactionWar_IsFetchRsp::New() const {
  return new FactionWar_IsFetchRsp;
}

void FactionWar_IsFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fetch_war_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_IsFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fetch_war = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_war_)));
          set_has_fetch_war();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_IsFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fetch_war = 1;
  if (has_fetch_war()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fetch_war(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_IsFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fetch_war = 1;
  if (has_fetch_war()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fetch_war(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_IsFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fetch_war = 1;
    if (has_fetch_war()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch_war());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_IsFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_IsFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_IsFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_IsFetchRsp::MergeFrom(const FactionWar_IsFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetch_war()) {
      set_fetch_war(from.fetch_war());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_IsFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_IsFetchRsp::CopyFrom(const FactionWar_IsFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_IsFetchRsp::IsInitialized() const {

  return true;
}

void FactionWar_IsFetchRsp::Swap(FactionWar_IsFetchRsp* other) {
  if (other != this) {
    std::swap(fetch_war_, other->fetch_war_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_IsFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_IsFetchRsp_descriptor_;
  metadata.reflection = FactionWar_IsFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PullFactionProto::kFactionIdFieldNumber;
const int PullFactionProto::kNameFieldNumber;
const int PullFactionProto::kFightFieldNumber;
#endif  // !_MSC_VER

PullFactionProto::PullFactionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullFactionProto::InitAsDefaultInstance() {
}

PullFactionProto::PullFactionProto(const PullFactionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullFactionProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullFactionProto::~PullFactionProto() {
  SharedDtor();
}

void PullFactionProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PullFactionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullFactionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullFactionProto_descriptor_;
}

const PullFactionProto& PullFactionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

PullFactionProto* PullFactionProto::default_instance_ = NULL;

PullFactionProto* PullFactionProto::New() const {
  return new PullFactionProto;
}

void PullFactionProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullFactionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullFactionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullFactionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullFactionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullFactionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullFactionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullFactionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullFactionProto::MergeFrom(const PullFactionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullFactionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullFactionProto::CopyFrom(const PullFactionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullFactionProto::IsInitialized() const {

  return true;
}

void PullFactionProto::Swap(PullFactionProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullFactionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullFactionProto_descriptor_;
  metadata.reflection = PullFactionProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWarProto::kFactionIdFieldNumber;
const int FactionWarProto::kNameFieldNumber;
const int FactionWarProto::kZidFieldNumber;
const int FactionWarProto::kFightFieldNumber;
#endif  // !_MSC_VER

FactionWarProto::FactionWarProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWarProto::InitAsDefaultInstance() {
}

FactionWarProto::FactionWarProto(const FactionWarProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWarProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWarProto::~FactionWarProto() {
  SharedDtor();
}

void FactionWarProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionWarProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWarProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWarProto_descriptor_;
}

const FactionWarProto& FactionWarProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWarProto* FactionWarProto::default_instance_ = NULL;

FactionWarProto* FactionWarProto::New() const {
  return new FactionWarProto;
}

void FactionWarProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWarProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWarProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWarProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWarProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWarProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWarProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWarProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWarProto::MergeFrom(const FactionWarProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWarProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWarProto::CopyFrom(const FactionWarProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWarProto::IsInitialized() const {

  return true;
}

void FactionWarProto::Swap(FactionWarProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWarProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWarProto_descriptor_;
  metadata.reflection = FactionWarProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWarRankProto::kFactionIdFieldNumber;
const int FactionWarRankProto::kRankFieldNumber;
#endif  // !_MSC_VER

FactionWarRankProto::FactionWarRankProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWarRankProto::InitAsDefaultInstance() {
}

FactionWarRankProto::FactionWarRankProto(const FactionWarRankProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWarRankProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWarRankProto::~FactionWarRankProto() {
  SharedDtor();
}

void FactionWarRankProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWarRankProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWarRankProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWarRankProto_descriptor_;
}

const FactionWarRankProto& FactionWarRankProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWarRankProto* FactionWarRankProto::default_instance_ = NULL;

FactionWarRankProto* FactionWarRankProto::New() const {
  return new FactionWarRankProto;
}

void FactionWarRankProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWarRankProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWarRankProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWarRankProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWarRankProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWarRankProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWarRankProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWarRankProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWarRankProto::MergeFrom(const FactionWarRankProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWarRankProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWarRankProto::CopyFrom(const FactionWarRankProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWarRankProto::IsInitialized() const {

  return true;
}

void FactionWarRankProto::Swap(FactionWarRankProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWarRankProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWarRankProto_descriptor_;
  metadata.reflection = FactionWarRankProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_S2C_PullReq::kNumFieldNumber;
const int FactionWar_S2C_PullReq::kTypeFieldNumber;
#endif  // !_MSC_VER

FactionWar_S2C_PullReq::FactionWar_S2C_PullReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2C_PullReq::InitAsDefaultInstance() {
}

FactionWar_S2C_PullReq::FactionWar_S2C_PullReq(const FactionWar_S2C_PullReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2C_PullReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2C_PullReq::~FactionWar_S2C_PullReq() {
  SharedDtor();
}

void FactionWar_S2C_PullReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_S2C_PullReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2C_PullReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2C_PullReq_descriptor_;
}

const FactionWar_S2C_PullReq& FactionWar_S2C_PullReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2C_PullReq* FactionWar_S2C_PullReq::default_instance_ = NULL;

FactionWar_S2C_PullReq* FactionWar_S2C_PullReq::New() const {
  return new FactionWar_S2C_PullReq;
}

void FactionWar_S2C_PullReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2C_PullReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_S2C_PullReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2C_PullReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2C_PullReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2C_PullReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2C_PullReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2C_PullReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2C_PullReq::MergeFrom(const FactionWar_S2C_PullReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2C_PullReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2C_PullReq::CopyFrom(const FactionWar_S2C_PullReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2C_PullReq::IsInitialized() const {

  return true;
}

void FactionWar_S2C_PullReq::Swap(FactionWar_S2C_PullReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2C_PullReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2C_PullReq_descriptor_;
  metadata.reflection = FactionWar_S2C_PullReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_C2S_PullRsp::kZidFieldNumber;
const int FactionWar_C2S_PullRsp::kInfoFieldNumber;
const int FactionWar_C2S_PullRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

FactionWar_C2S_PullRsp::FactionWar_C2S_PullRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_C2S_PullRsp::InitAsDefaultInstance() {
}

FactionWar_C2S_PullRsp::FactionWar_C2S_PullRsp(const FactionWar_C2S_PullRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_C2S_PullRsp::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_C2S_PullRsp::~FactionWar_C2S_PullRsp() {
  SharedDtor();
}

void FactionWar_C2S_PullRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_C2S_PullRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_C2S_PullRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_C2S_PullRsp_descriptor_;
}

const FactionWar_C2S_PullRsp& FactionWar_C2S_PullRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_C2S_PullRsp* FactionWar_C2S_PullRsp::default_instance_ = NULL;

FactionWar_C2S_PullRsp* FactionWar_C2S_PullRsp::New() const {
  return new FactionWar_C2S_PullRsp;
}

void FactionWar_C2S_PullRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    type_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_C2S_PullRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.PullFactionProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_C2S_PullRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // repeated .proto_ff.PullFactionProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_C2S_PullRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // repeated .proto_ff.PullFactionProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_C2S_PullRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.PullFactionProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_C2S_PullRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_C2S_PullRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_C2S_PullRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_C2S_PullRsp::MergeFrom(const FactionWar_C2S_PullRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_C2S_PullRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_C2S_PullRsp::CopyFrom(const FactionWar_C2S_PullRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_C2S_PullRsp::IsInitialized() const {

  return true;
}

void FactionWar_C2S_PullRsp::Swap(FactionWar_C2S_PullRsp* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    info_.Swap(&other->info_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_C2S_PullRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_C2S_PullRsp_descriptor_;
  metadata.reflection = FactionWar_C2S_PullRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_S2L_InfoRsp::kSceneidFieldNumber;
const int FactionWar_S2L_InfoRsp::kInfoFieldNumber;
const int FactionWar_S2L_InfoRsp::kStateFieldNumber;
const int FactionWar_S2L_InfoRsp::kRaceFieldNumber;
const int FactionWar_S2L_InfoRsp::kIndexFieldNumber;
const int FactionWar_S2L_InfoRsp::kWinIdFieldNumber;
const int FactionWar_S2L_InfoRsp::kWinNumFieldNumber;
#endif  // !_MSC_VER

FactionWar_S2L_InfoRsp::FactionWar_S2L_InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2L_InfoRsp::InitAsDefaultInstance() {
}

FactionWar_S2L_InfoRsp::FactionWar_S2L_InfoRsp(const FactionWar_S2L_InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2L_InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  race_ = 0;
  index_ = 0;
  win_id_ = 0u;
  win_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2L_InfoRsp::~FactionWar_S2L_InfoRsp() {
  SharedDtor();
}

void FactionWar_S2L_InfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_S2L_InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2L_InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2L_InfoRsp_descriptor_;
}

const FactionWar_S2L_InfoRsp& FactionWar_S2L_InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2L_InfoRsp* FactionWar_S2L_InfoRsp::default_instance_ = NULL;

FactionWar_S2L_InfoRsp* FactionWar_S2L_InfoRsp::New() const {
  return new FactionWar_S2L_InfoRsp;
}

void FactionWar_S2L_InfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
    race_ = 0;
    index_ = 0;
    win_id_ = 0u;
    win_num_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2L_InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.FactionWarProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_race;
        break;
      }

      // optional int32 race = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_id;
        break;
      }

      // optional uint32 win_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_id_)));
          set_has_win_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_win_num;
        break;
      }

      // optional uint32 win_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_S2L_InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // repeated .proto_ff.FactionWarProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 race = 4;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->race(), output);
  }

  // optional int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  // optional uint32 win_id = 6;
  if (has_win_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->win_id(), output);
  }

  // optional uint32 win_num = 7;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->win_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2L_InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // repeated .proto_ff.FactionWarProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 race = 4;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->race(), target);
  }

  // optional int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  // optional uint32 win_id = 6;
  if (has_win_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->win_id(), target);
  }

  // optional uint32 win_num = 7;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->win_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2L_InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 race = 4;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional uint32 win_id = 6;
    if (has_win_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_id());
    }

    // optional uint32 win_num = 7;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_num());
    }

  }
  // repeated .proto_ff.FactionWarProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2L_InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2L_InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2L_InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2L_InfoRsp::MergeFrom(const FactionWar_S2L_InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_win_id()) {
      set_win_id(from.win_id());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2L_InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2L_InfoRsp::CopyFrom(const FactionWar_S2L_InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2L_InfoRsp::IsInitialized() const {

  return true;
}

void FactionWar_S2L_InfoRsp::Swap(FactionWar_S2L_InfoRsp* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    info_.Swap(&other->info_);
    std::swap(state_, other->state_);
    std::swap(race_, other->race_);
    std::swap(index_, other->index_);
    std::swap(win_id_, other->win_id_);
    std::swap(win_num_, other->win_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2L_InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2L_InfoRsp_descriptor_;
  metadata.reflection = FactionWar_S2L_InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_S2L_WarResultRsp::kIndexFieldNumber;
const int FactionWar_S2L_WarResultRsp::kRaceFieldNumber;
const int FactionWar_S2L_WarResultRsp::kStateFieldNumber;
const int FactionWar_S2L_WarResultRsp::kFactionId1FieldNumber;
const int FactionWar_S2L_WarResultRsp::kFactionId2FieldNumber;
const int FactionWar_S2L_WarResultRsp::kSuccessIdFieldNumber;
const int FactionWar_S2L_WarResultRsp::kCidLst1FieldNumber;
const int FactionWar_S2L_WarResultRsp::kCidLst2FieldNumber;
#endif  // !_MSC_VER

FactionWar_S2L_WarResultRsp::FactionWar_S2L_WarResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2L_WarResultRsp::InitAsDefaultInstance() {
}

FactionWar_S2L_WarResultRsp::FactionWar_S2L_WarResultRsp(const FactionWar_S2L_WarResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2L_WarResultRsp::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  race_ = 0;
  state_ = 0;
  faction_id1_ = 0u;
  faction_id2_ = 0u;
  success_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2L_WarResultRsp::~FactionWar_S2L_WarResultRsp() {
  SharedDtor();
}

void FactionWar_S2L_WarResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_S2L_WarResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2L_WarResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2L_WarResultRsp_descriptor_;
}

const FactionWar_S2L_WarResultRsp& FactionWar_S2L_WarResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2L_WarResultRsp* FactionWar_S2L_WarResultRsp::default_instance_ = NULL;

FactionWar_S2L_WarResultRsp* FactionWar_S2L_WarResultRsp::New() const {
  return new FactionWar_S2L_WarResultRsp;
}

void FactionWar_S2L_WarResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    race_ = 0;
    state_ = 0;
    faction_id1_ = 0u;
    faction_id2_ = 0u;
    success_id_ = 0u;
  }
  cid_lst1_.Clear();
  cid_lst2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2L_WarResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_race;
        break;
      }

      // optional int32 race = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_faction_id1;
        break;
      }

      // optional uint32 faction_id1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id1_)));
          set_has_faction_id1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_faction_id2;
        break;
      }

      // optional uint32 faction_id2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id2_)));
          set_has_faction_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_success_id;
        break;
      }

      // optional uint32 success_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &success_id_)));
          set_has_success_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cid_lst1;
        break;
      }

      // repeated uint64 cid_lst1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_cid_lst1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cid_lst1;
        if (input->ExpectTag(64)) goto parse_cid_lst2;
        break;
      }

      // repeated uint64 cid_lst2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_cid_lst2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cid_lst2;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_S2L_WarResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 race = 2;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->race(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional uint32 faction_id1 = 4;
  if (has_faction_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->faction_id1(), output);
  }

  // optional uint32 faction_id2 = 5;
  if (has_faction_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->faction_id2(), output);
  }

  // optional uint32 success_id = 6;
  if (has_success_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->success_id(), output);
  }

  // repeated uint64 cid_lst1 = 7;
  for (int i = 0; i < this->cid_lst1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->cid_lst1(i), output);
  }

  // repeated uint64 cid_lst2 = 8;
  for (int i = 0; i < this->cid_lst2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->cid_lst2(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2L_WarResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 race = 2;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->race(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional uint32 faction_id1 = 4;
  if (has_faction_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->faction_id1(), target);
  }

  // optional uint32 faction_id2 = 5;
  if (has_faction_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->faction_id2(), target);
  }

  // optional uint32 success_id = 6;
  if (has_success_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->success_id(), target);
  }

  // repeated uint64 cid_lst1 = 7;
  for (int i = 0; i < this->cid_lst1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->cid_lst1(i), target);
  }

  // repeated uint64 cid_lst2 = 8;
  for (int i = 0; i < this->cid_lst2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->cid_lst2(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2L_WarResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 race = 2;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint32 faction_id1 = 4;
    if (has_faction_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id1());
    }

    // optional uint32 faction_id2 = 5;
    if (has_faction_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id2());
    }

    // optional uint32 success_id = 6;
    if (has_success_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->success_id());
    }

  }
  // repeated uint64 cid_lst1 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst1(i));
    }
    total_size += 1 * this->cid_lst1_size() + data_size;
  }

  // repeated uint64 cid_lst2 = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst2(i));
    }
    total_size += 1 * this->cid_lst2_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2L_WarResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2L_WarResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2L_WarResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2L_WarResultRsp::MergeFrom(const FactionWar_S2L_WarResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst1_.MergeFrom(from.cid_lst1_);
  cid_lst2_.MergeFrom(from.cid_lst2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_faction_id1()) {
      set_faction_id1(from.faction_id1());
    }
    if (from.has_faction_id2()) {
      set_faction_id2(from.faction_id2());
    }
    if (from.has_success_id()) {
      set_success_id(from.success_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2L_WarResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2L_WarResultRsp::CopyFrom(const FactionWar_S2L_WarResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2L_WarResultRsp::IsInitialized() const {

  return true;
}

void FactionWar_S2L_WarResultRsp::Swap(FactionWar_S2L_WarResultRsp* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(race_, other->race_);
    std::swap(state_, other->state_);
    std::swap(faction_id1_, other->faction_id1_);
    std::swap(faction_id2_, other->faction_id2_);
    std::swap(success_id_, other->success_id_);
    cid_lst1_.Swap(&other->cid_lst1_);
    cid_lst2_.Swap(&other->cid_lst2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2L_WarResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2L_WarResultRsp_descriptor_;
  metadata.reflection = FactionWar_S2L_WarResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_S2C_RankRewardRsp::kFactionIdFieldNumber;
const int FactionWar_S2C_RankRewardRsp::kRankFieldNumber;
const int FactionWar_S2C_RankRewardRsp::kCidsFieldNumber;
const int FactionWar_S2C_RankRewardRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

FactionWar_S2C_RankRewardRsp::FactionWar_S2C_RankRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2C_RankRewardRsp::InitAsDefaultInstance() {
}

FactionWar_S2C_RankRewardRsp::FactionWar_S2C_RankRewardRsp(const FactionWar_S2C_RankRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2C_RankRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  rank_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2C_RankRewardRsp::~FactionWar_S2C_RankRewardRsp() {
  SharedDtor();
}

void FactionWar_S2C_RankRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_S2C_RankRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2C_RankRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2C_RankRewardRsp_descriptor_;
}

const FactionWar_S2C_RankRewardRsp& FactionWar_S2C_RankRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2C_RankRewardRsp* FactionWar_S2C_RankRewardRsp::default_instance_ = NULL;

FactionWar_S2C_RankRewardRsp* FactionWar_S2C_RankRewardRsp::New() const {
  return new FactionWar_S2C_RankRewardRsp;
}

void FactionWar_S2C_RankRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    rank_ = 0;
    type_ = 0;
  }
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2C_RankRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cids;
        break;
      }

      // repeated uint64 cids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cids;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_S2C_RankRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // repeated uint64 cids = 3;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->cids(i), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2C_RankRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // repeated uint64 cids = 3;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->cids(i), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2C_RankRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated uint64 cids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2C_RankRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2C_RankRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2C_RankRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2C_RankRewardRsp::MergeFrom(const FactionWar_S2C_RankRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2C_RankRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2C_RankRewardRsp::CopyFrom(const FactionWar_S2C_RankRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2C_RankRewardRsp::IsInitialized() const {

  return true;
}

void FactionWar_S2C_RankRewardRsp::Swap(FactionWar_S2C_RankRewardRsp* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(rank_, other->rank_);
    cids_.Swap(&other->cids_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2C_RankRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2C_RankRewardRsp_descriptor_;
  metadata.reflection = FactionWar_S2C_RankRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_S2C_EndWinRewardRsp::kFactionIdFieldNumber;
const int FactionWar_S2C_EndWinRewardRsp::kWinNumFieldNumber;
const int FactionWar_S2C_EndWinRewardRsp::kWinZidFieldNumber;
const int FactionWar_S2C_EndWinRewardRsp::kFaIdFieldNumber;
const int FactionWar_S2C_EndWinRewardRsp::kCidsFieldNumber;
#endif  // !_MSC_VER

FactionWar_S2C_EndWinRewardRsp::FactionWar_S2C_EndWinRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2C_EndWinRewardRsp::InitAsDefaultInstance() {
}

FactionWar_S2C_EndWinRewardRsp::FactionWar_S2C_EndWinRewardRsp(const FactionWar_S2C_EndWinRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2C_EndWinRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  win_num_ = 0;
  win_zid_ = 0u;
  fa_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2C_EndWinRewardRsp::~FactionWar_S2C_EndWinRewardRsp() {
  SharedDtor();
}

void FactionWar_S2C_EndWinRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_S2C_EndWinRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2C_EndWinRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2C_EndWinRewardRsp_descriptor_;
}

const FactionWar_S2C_EndWinRewardRsp& FactionWar_S2C_EndWinRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2C_EndWinRewardRsp* FactionWar_S2C_EndWinRewardRsp::default_instance_ = NULL;

FactionWar_S2C_EndWinRewardRsp* FactionWar_S2C_EndWinRewardRsp::New() const {
  return new FactionWar_S2C_EndWinRewardRsp;
}

void FactionWar_S2C_EndWinRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    win_num_ = 0;
    win_zid_ = 0u;
    fa_id_ = 0u;
  }
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2C_EndWinRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_zid;
        break;
      }

      // optional uint32 win_zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_zid_)));
          set_has_win_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fa_id;
        break;
      }

      // optional uint32 fa_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fa_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fa_id_)));
          set_has_fa_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cids;
        break;
      }

      // repeated uint64 cids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_S2C_EndWinRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional int32 win_num = 2;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_num(), output);
  }

  // optional uint32 win_zid = 3;
  if (has_win_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win_zid(), output);
  }

  // optional uint32 fa_id = 4;
  if (has_fa_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fa_id(), output);
  }

  // repeated uint64 cids = 5;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2C_EndWinRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional int32 win_num = 2;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_num(), target);
  }

  // optional uint32 win_zid = 3;
  if (has_win_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->win_zid(), target);
  }

  // optional uint32 fa_id = 4;
  if (has_fa_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fa_id(), target);
  }

  // repeated uint64 cids = 5;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2C_EndWinRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional int32 win_num = 2;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional uint32 win_zid = 3;
    if (has_win_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_zid());
    }

    // optional uint32 fa_id = 4;
    if (has_fa_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fa_id());
    }

  }
  // repeated uint64 cids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2C_EndWinRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2C_EndWinRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2C_EndWinRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2C_EndWinRewardRsp::MergeFrom(const FactionWar_S2C_EndWinRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_win_zid()) {
      set_win_zid(from.win_zid());
    }
    if (from.has_fa_id()) {
      set_fa_id(from.fa_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2C_EndWinRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2C_EndWinRewardRsp::CopyFrom(const FactionWar_S2C_EndWinRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2C_EndWinRewardRsp::IsInitialized() const {

  return true;
}

void FactionWar_S2C_EndWinRewardRsp::Swap(FactionWar_S2C_EndWinRewardRsp* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(win_num_, other->win_num_);
    std::swap(win_zid_, other->win_zid_);
    std::swap(fa_id_, other->fa_id_);
    cids_.Swap(&other->cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2C_EndWinRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2C_EndWinRewardRsp_descriptor_;
  metadata.reflection = FactionWar_S2C_EndWinRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_S2C_WinInfoRsp::kFactionIdFieldNumber;
const int FactionWar_S2C_WinInfoRsp::kWinNumFieldNumber;
const int FactionWar_S2C_WinInfoRsp::kRewardFieldNumber;
const int FactionWar_S2C_WinInfoRsp::kCidsFieldNumber;
#endif  // !_MSC_VER

FactionWar_S2C_WinInfoRsp::FactionWar_S2C_WinInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2C_WinInfoRsp::InitAsDefaultInstance() {
}

FactionWar_S2C_WinInfoRsp::FactionWar_S2C_WinInfoRsp(const FactionWar_S2C_WinInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2C_WinInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  win_num_ = 0;
  reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2C_WinInfoRsp::~FactionWar_S2C_WinInfoRsp() {
  SharedDtor();
}

void FactionWar_S2C_WinInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_S2C_WinInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2C_WinInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2C_WinInfoRsp_descriptor_;
}

const FactionWar_S2C_WinInfoRsp& FactionWar_S2C_WinInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2C_WinInfoRsp* FactionWar_S2C_WinInfoRsp::default_instance_ = NULL;

FactionWar_S2C_WinInfoRsp* FactionWar_S2C_WinInfoRsp::New() const {
  return new FactionWar_S2C_WinInfoRsp;
}

void FactionWar_S2C_WinInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    win_num_ = 0;
    reward_ = false;
  }
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2C_WinInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional bool reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cids;
        break;
      }

      // repeated uint64 cids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_S2C_WinInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional int32 win_num = 2;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_num(), output);
  }

  // optional bool reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reward(), output);
  }

  // repeated uint64 cids = 4;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2C_WinInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional int32 win_num = 2;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_num(), target);
  }

  // optional bool reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reward(), target);
  }

  // repeated uint64 cids = 4;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2C_WinInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional int32 win_num = 2;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional bool reward = 3;
    if (has_reward()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 cids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2C_WinInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2C_WinInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2C_WinInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2C_WinInfoRsp::MergeFrom(const FactionWar_S2C_WinInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2C_WinInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2C_WinInfoRsp::CopyFrom(const FactionWar_S2C_WinInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2C_WinInfoRsp::IsInitialized() const {

  return true;
}

void FactionWar_S2C_WinInfoRsp::Swap(FactionWar_S2C_WinInfoRsp* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(win_num_, other->win_num_);
    std::swap(reward_, other->reward_);
    cids_.Swap(&other->cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2C_WinInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2C_WinInfoRsp_descriptor_;
  metadata.reflection = FactionWar_S2C_WinInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionWar_S2C_DelWinRsp::FactionWar_S2C_DelWinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2C_DelWinRsp::InitAsDefaultInstance() {
}

FactionWar_S2C_DelWinRsp::FactionWar_S2C_DelWinRsp(const FactionWar_S2C_DelWinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2C_DelWinRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2C_DelWinRsp::~FactionWar_S2C_DelWinRsp() {
  SharedDtor();
}

void FactionWar_S2C_DelWinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_S2C_DelWinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2C_DelWinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2C_DelWinRsp_descriptor_;
}

const FactionWar_S2C_DelWinRsp& FactionWar_S2C_DelWinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2C_DelWinRsp* FactionWar_S2C_DelWinRsp::default_instance_ = NULL;

FactionWar_S2C_DelWinRsp* FactionWar_S2C_DelWinRsp::New() const {
  return new FactionWar_S2C_DelWinRsp;
}

void FactionWar_S2C_DelWinRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2C_DelWinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionWar_S2C_DelWinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2C_DelWinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2C_DelWinRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2C_DelWinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2C_DelWinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2C_DelWinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2C_DelWinRsp::MergeFrom(const FactionWar_S2C_DelWinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2C_DelWinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2C_DelWinRsp::CopyFrom(const FactionWar_S2C_DelWinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2C_DelWinRsp::IsInitialized() const {

  return true;
}

void FactionWar_S2C_DelWinRsp::Swap(FactionWar_S2C_DelWinRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2C_DelWinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2C_DelWinRsp_descriptor_;
  metadata.reflection = FactionWar_S2C_DelWinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_S2C_LeaderInfoReq::kIndexFieldNumber;
const int FactionWar_S2C_LeaderInfoReq::kFactionIdFieldNumber;
#endif  // !_MSC_VER

FactionWar_S2C_LeaderInfoReq::FactionWar_S2C_LeaderInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2C_LeaderInfoReq::InitAsDefaultInstance() {
}

FactionWar_S2C_LeaderInfoReq::FactionWar_S2C_LeaderInfoReq(const FactionWar_S2C_LeaderInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2C_LeaderInfoReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2C_LeaderInfoReq::~FactionWar_S2C_LeaderInfoReq() {
  SharedDtor();
}

void FactionWar_S2C_LeaderInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_S2C_LeaderInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2C_LeaderInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2C_LeaderInfoReq_descriptor_;
}

const FactionWar_S2C_LeaderInfoReq& FactionWar_S2C_LeaderInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2C_LeaderInfoReq* FactionWar_S2C_LeaderInfoReq::default_instance_ = NULL;

FactionWar_S2C_LeaderInfoReq* FactionWar_S2C_LeaderInfoReq::New() const {
  return new FactionWar_S2C_LeaderInfoReq;
}

void FactionWar_S2C_LeaderInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2C_LeaderInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_S2C_LeaderInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2C_LeaderInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2C_LeaderInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2C_LeaderInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2C_LeaderInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2C_LeaderInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2C_LeaderInfoReq::MergeFrom(const FactionWar_S2C_LeaderInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2C_LeaderInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2C_LeaderInfoReq::CopyFrom(const FactionWar_S2C_LeaderInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2C_LeaderInfoReq::IsInitialized() const {

  return true;
}

void FactionWar_S2C_LeaderInfoReq::Swap(FactionWar_S2C_LeaderInfoReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2C_LeaderInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2C_LeaderInfoReq_descriptor_;
  metadata.reflection = FactionWar_S2C_LeaderInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_S2C_LeaderInfoRsp::kIndexFieldNumber;
const int FactionWar_S2C_LeaderInfoRsp::kLeaderFieldNumber;
const int FactionWar_S2C_LeaderInfoRsp::kWifeFieldNumber;
#endif  // !_MSC_VER

FactionWar_S2C_LeaderInfoRsp::FactionWar_S2C_LeaderInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_S2C_LeaderInfoRsp::InitAsDefaultInstance() {
  leader_ = const_cast< ::proto_ff::WarLeaderInfo*>(&::proto_ff::WarLeaderInfo::default_instance());
  wife_ = const_cast< ::proto_ff::WarLeaderInfo*>(&::proto_ff::WarLeaderInfo::default_instance());
}

FactionWar_S2C_LeaderInfoRsp::FactionWar_S2C_LeaderInfoRsp(const FactionWar_S2C_LeaderInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_S2C_LeaderInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  leader_ = NULL;
  wife_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_S2C_LeaderInfoRsp::~FactionWar_S2C_LeaderInfoRsp() {
  SharedDtor();
}

void FactionWar_S2C_LeaderInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete leader_;
    delete wife_;
  }
}

void FactionWar_S2C_LeaderInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_S2C_LeaderInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_S2C_LeaderInfoRsp_descriptor_;
}

const FactionWar_S2C_LeaderInfoRsp& FactionWar_S2C_LeaderInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_S2C_LeaderInfoRsp* FactionWar_S2C_LeaderInfoRsp::default_instance_ = NULL;

FactionWar_S2C_LeaderInfoRsp* FactionWar_S2C_LeaderInfoRsp::New() const {
  return new FactionWar_S2C_LeaderInfoRsp;
}

void FactionWar_S2C_LeaderInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_leader()) {
      if (leader_ != NULL) leader_->::proto_ff::WarLeaderInfo::Clear();
    }
    if (has_wife()) {
      if (wife_ != NULL) wife_->::proto_ff::WarLeaderInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_S2C_LeaderInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .proto_ff.WarLeaderInfo leader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_wife;
        break;
      }

      // optional .proto_ff.WarLeaderInfo wife = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wife:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wife()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_S2C_LeaderInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .proto_ff.WarLeaderInfo leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leader(), output);
  }

  // optional .proto_ff.WarLeaderInfo wife = 3;
  if (has_wife()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wife(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_S2C_LeaderInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .proto_ff.WarLeaderInfo leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leader(), target);
  }

  // optional .proto_ff.WarLeaderInfo wife = 3;
  if (has_wife()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wife(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_S2C_LeaderInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .proto_ff.WarLeaderInfo leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

    // optional .proto_ff.WarLeaderInfo wife = 3;
    if (has_wife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wife());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_S2C_LeaderInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_S2C_LeaderInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_S2C_LeaderInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_S2C_LeaderInfoRsp::MergeFrom(const FactionWar_S2C_LeaderInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_leader()) {
      mutable_leader()->::proto_ff::WarLeaderInfo::MergeFrom(from.leader());
    }
    if (from.has_wife()) {
      mutable_wife()->::proto_ff::WarLeaderInfo::MergeFrom(from.wife());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_S2C_LeaderInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_S2C_LeaderInfoRsp::CopyFrom(const FactionWar_S2C_LeaderInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_S2C_LeaderInfoRsp::IsInitialized() const {

  if (has_leader()) {
    if (!this->leader().IsInitialized()) return false;
  }
  if (has_wife()) {
    if (!this->wife().IsInitialized()) return false;
  }
  return true;
}

void FactionWar_S2C_LeaderInfoRsp::Swap(FactionWar_S2C_LeaderInfoRsp* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(leader_, other->leader_);
    std::swap(wife_, other->wife_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_S2C_LeaderInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_S2C_LeaderInfoRsp_descriptor_;
  metadata.reflection = FactionWar_S2C_LeaderInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_C2L_FetchWinRewardReq::kCidFieldNumber;
#endif  // !_MSC_VER

FactionWar_C2L_FetchWinRewardReq::FactionWar_C2L_FetchWinRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_C2L_FetchWinRewardReq::InitAsDefaultInstance() {
}

FactionWar_C2L_FetchWinRewardReq::FactionWar_C2L_FetchWinRewardReq(const FactionWar_C2L_FetchWinRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_C2L_FetchWinRewardReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_C2L_FetchWinRewardReq::~FactionWar_C2L_FetchWinRewardReq() {
  SharedDtor();
}

void FactionWar_C2L_FetchWinRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_C2L_FetchWinRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_C2L_FetchWinRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_C2L_FetchWinRewardReq_descriptor_;
}

const FactionWar_C2L_FetchWinRewardReq& FactionWar_C2L_FetchWinRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_C2L_FetchWinRewardReq* FactionWar_C2L_FetchWinRewardReq::default_instance_ = NULL;

FactionWar_C2L_FetchWinRewardReq* FactionWar_C2L_FetchWinRewardReq::New() const {
  return new FactionWar_C2L_FetchWinRewardReq;
}

void FactionWar_C2L_FetchWinRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_C2L_FetchWinRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_C2L_FetchWinRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_C2L_FetchWinRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_C2L_FetchWinRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_C2L_FetchWinRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_C2L_FetchWinRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_C2L_FetchWinRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_C2L_FetchWinRewardReq::MergeFrom(const FactionWar_C2L_FetchWinRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_C2L_FetchWinRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_C2L_FetchWinRewardReq::CopyFrom(const FactionWar_C2L_FetchWinRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_C2L_FetchWinRewardReq::IsInitialized() const {

  return true;
}

void FactionWar_C2L_FetchWinRewardReq::Swap(FactionWar_C2L_FetchWinRewardReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_C2L_FetchWinRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_C2L_FetchWinRewardReq_descriptor_;
  metadata.reflection = FactionWar_C2L_FetchWinRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWar_C2S_WinDismissRsp::kFactionIdFieldNumber;
const int FactionWar_C2S_WinDismissRsp::kZidFieldNumber;
#endif  // !_MSC_VER

FactionWar_C2S_WinDismissRsp::FactionWar_C2S_WinDismissRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWar_C2S_WinDismissRsp::InitAsDefaultInstance() {
}

FactionWar_C2S_WinDismissRsp::FactionWar_C2S_WinDismissRsp(const FactionWar_C2S_WinDismissRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWar_C2S_WinDismissRsp::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWar_C2S_WinDismissRsp::~FactionWar_C2S_WinDismissRsp() {
  SharedDtor();
}

void FactionWar_C2S_WinDismissRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionWar_C2S_WinDismissRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWar_C2S_WinDismissRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWar_C2S_WinDismissRsp_descriptor_;
}

const FactionWar_C2S_WinDismissRsp& FactionWar_C2S_WinDismissRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FactionWar_2eproto();
  return *default_instance_;
}

FactionWar_C2S_WinDismissRsp* FactionWar_C2S_WinDismissRsp::default_instance_ = NULL;

FactionWar_C2S_WinDismissRsp* FactionWar_C2S_WinDismissRsp::New() const {
  return new FactionWar_C2S_WinDismissRsp;
}

void FactionWar_C2S_WinDismissRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWar_C2S_WinDismissRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWar_C2S_WinDismissRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWar_C2S_WinDismissRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWar_C2S_WinDismissRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWar_C2S_WinDismissRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWar_C2S_WinDismissRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWar_C2S_WinDismissRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWar_C2S_WinDismissRsp::MergeFrom(const FactionWar_C2S_WinDismissRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWar_C2S_WinDismissRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWar_C2S_WinDismissRsp::CopyFrom(const FactionWar_C2S_WinDismissRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWar_C2S_WinDismissRsp::IsInitialized() const {

  return true;
}

void FactionWar_C2S_WinDismissRsp::Swap(FactionWar_C2S_WinDismissRsp* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWar_C2S_WinDismissRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWar_C2S_WinDismissRsp_descriptor_;
  metadata.reflection = FactionWar_C2S_WinDismissRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
