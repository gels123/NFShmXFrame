// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Relation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Relation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* WCRelationSyncNotifyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCRelationSyncNotifyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCRelationSyncDelNotifyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCRelationSyncDelNotifyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWRelationDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWRelationDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCRelationDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCRelationDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCRealtionOnlineNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCRealtionOnlineNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAddFriendApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAddFriendApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCAddFriendApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCAddFriendApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAgreeFriendApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAgreeFriendApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCAgreeFriendApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCAgreeFriendApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAddBlackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAddBlackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAddBlackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAddBlackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAddShieldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAddShieldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAddShieldRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAddShieldRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWDeleteRelationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWDeleteRelationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCDeleteRelationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCDeleteRelationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWRecommendFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWRecommendFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCRecommendFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCRecommendFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGNotifyAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGNotifyAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWAddHateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWAddHateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWAddRecentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWAddRecentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiftGivingRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiftGivingRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWGetGiftGivingRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWGetGiftGivingRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCGetGiftGivingRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCGetGiftGivingRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWGivingGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWGivingGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCGivingGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCGivingGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCGivingGiftNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCGivingGiftNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCThankGiving_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCThankGiving_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWGivingGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWGivingGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WGGivingGiftErrorNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WGGivingGiftErrorNotice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Relation_2eproto() {
  protobuf_AddDesc_Relation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Relation.proto");
  GOOGLE_CHECK(file != NULL);
  WCRelationSyncNotifyRsp_descriptor_ = file->message_type(0);
  static const int WCRelationSyncNotifyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationSyncNotifyRsp, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationSyncNotifyRsp, friendinfo_),
  };
  WCRelationSyncNotifyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCRelationSyncNotifyRsp_descriptor_,
      WCRelationSyncNotifyRsp::default_instance_,
      WCRelationSyncNotifyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationSyncNotifyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationSyncNotifyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCRelationSyncNotifyRsp));
  WCRelationSyncDelNotifyRsp_descriptor_ = file->message_type(1);
  static const int WCRelationSyncDelNotifyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationSyncDelNotifyRsp, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationSyncDelNotifyRsp, playeridlist_),
  };
  WCRelationSyncDelNotifyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCRelationSyncDelNotifyRsp_descriptor_,
      WCRelationSyncDelNotifyRsp::default_instance_,
      WCRelationSyncDelNotifyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationSyncDelNotifyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationSyncDelNotifyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCRelationSyncDelNotifyRsp));
  CWRelationDataReq_descriptor_ = file->message_type(2);
  static const int CWRelationDataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRelationDataReq, groupindex_),
  };
  CWRelationDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWRelationDataReq_descriptor_,
      CWRelationDataReq::default_instance_,
      CWRelationDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRelationDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRelationDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWRelationDataReq));
  WCRelationDataRsp_descriptor_ = file->message_type(3);
  static const int WCRelationDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationDataRsp, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationDataRsp, friendinfo_),
  };
  WCRelationDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCRelationDataRsp_descriptor_,
      WCRelationDataRsp::default_instance_,
      WCRelationDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRelationDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCRelationDataRsp));
  WCRealtionOnlineNotify_descriptor_ = file->message_type(4);
  static const int WCRealtionOnlineNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRealtionOnlineNotify, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRealtionOnlineNotify, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRealtionOnlineNotify, offlinetime_),
  };
  WCRealtionOnlineNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCRealtionOnlineNotify_descriptor_,
      WCRealtionOnlineNotify::default_instance_,
      WCRealtionOnlineNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRealtionOnlineNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRealtionOnlineNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCRealtionOnlineNotify));
  CWAddFriendApplyReq_descriptor_ = file->message_type(5);
  static const int CWAddFriendApplyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddFriendApplyReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddFriendApplyReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddFriendApplyReq, content_),
  };
  CWAddFriendApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAddFriendApplyReq_descriptor_,
      CWAddFriendApplyReq::default_instance_,
      CWAddFriendApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddFriendApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddFriendApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAddFriendApplyReq));
  WCAddFriendApplyRsp_descriptor_ = file->message_type(6);
  static const int WCAddFriendApplyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAddFriendApplyRsp, ret_),
  };
  WCAddFriendApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCAddFriendApplyRsp_descriptor_,
      WCAddFriendApplyRsp::default_instance_,
      WCAddFriendApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAddFriendApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAddFriendApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCAddFriendApplyRsp));
  CWAgreeFriendApplyReq_descriptor_ = file->message_type(7);
  static const int CWAgreeFriendApplyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAgreeFriendApplyReq, playeridlist_),
  };
  CWAgreeFriendApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAgreeFriendApplyReq_descriptor_,
      CWAgreeFriendApplyReq::default_instance_,
      CWAgreeFriendApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAgreeFriendApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAgreeFriendApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAgreeFriendApplyReq));
  WCAgreeFriendApplyRsp_descriptor_ = file->message_type(8);
  static const int WCAgreeFriendApplyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAgreeFriendApplyRsp, ret_),
  };
  WCAgreeFriendApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCAgreeFriendApplyRsp_descriptor_,
      WCAgreeFriendApplyRsp::default_instance_,
      WCAgreeFriendApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAgreeFriendApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAgreeFriendApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCAgreeFriendApplyRsp));
  CWAddBlackReq_descriptor_ = file->message_type(9);
  static const int CWAddBlackReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddBlackReq, playerid_),
  };
  CWAddBlackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAddBlackReq_descriptor_,
      CWAddBlackReq::default_instance_,
      CWAddBlackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddBlackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddBlackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAddBlackReq));
  CWAddBlackRsp_descriptor_ = file->message_type(10);
  static const int CWAddBlackRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddBlackRsp, ret_),
  };
  CWAddBlackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAddBlackRsp_descriptor_,
      CWAddBlackRsp::default_instance_,
      CWAddBlackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddBlackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddBlackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAddBlackRsp));
  CWAddShieldReq_descriptor_ = file->message_type(11);
  static const int CWAddShieldReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddShieldReq, playerid_),
  };
  CWAddShieldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAddShieldReq_descriptor_,
      CWAddShieldReq::default_instance_,
      CWAddShieldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddShieldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddShieldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAddShieldReq));
  CWAddShieldRsp_descriptor_ = file->message_type(12);
  static const int CWAddShieldRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddShieldRsp, ret_),
  };
  CWAddShieldRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAddShieldRsp_descriptor_,
      CWAddShieldRsp::default_instance_,
      CWAddShieldRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddShieldRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAddShieldRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAddShieldRsp));
  CWDeleteRelationReq_descriptor_ = file->message_type(13);
  static const int CWDeleteRelationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationReq, groupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationReq, playeridlist_),
  };
  CWDeleteRelationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWDeleteRelationReq_descriptor_,
      CWDeleteRelationReq::default_instance_,
      CWDeleteRelationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWDeleteRelationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWDeleteRelationReq));
  WCDeleteRelationRsp_descriptor_ = file->message_type(14);
  static const int WCDeleteRelationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCDeleteRelationRsp, ret_),
  };
  WCDeleteRelationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCDeleteRelationRsp_descriptor_,
      WCDeleteRelationRsp::default_instance_,
      WCDeleteRelationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCDeleteRelationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCDeleteRelationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCDeleteRelationRsp));
  CWRecommendFriendReq_descriptor_ = file->message_type(15);
  static const int CWRecommendFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRecommendFriendReq, again_),
  };
  CWRecommendFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWRecommendFriendReq_descriptor_,
      CWRecommendFriendReq::default_instance_,
      CWRecommendFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRecommendFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWRecommendFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWRecommendFriendReq));
  WCRecommendFriendRsp_descriptor_ = file->message_type(16);
  static const int WCRecommendFriendRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRecommendFriendRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRecommendFriendRsp, recommend_),
  };
  WCRecommendFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCRecommendFriendRsp_descriptor_,
      WCRecommendFriendRsp::default_instance_,
      WCRecommendFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRecommendFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCRecommendFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCRecommendFriendRsp));
  WGNotifyAddFriend_descriptor_ = file->message_type(17);
  static const int WGNotifyAddFriend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGNotifyAddFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGNotifyAddFriend, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGNotifyAddFriend, addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGNotifyAddFriend, curnum_),
  };
  WGNotifyAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGNotifyAddFriend_descriptor_,
      WGNotifyAddFriend::default_instance_,
      WGNotifyAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGNotifyAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGNotifyAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGNotifyAddFriend));
  GWAddHateReq_descriptor_ = file->message_type(18);
  static const int GWAddHateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddHateReq, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddHateReq, dstid_),
  };
  GWAddHateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWAddHateReq_descriptor_,
      GWAddHateReq::default_instance_,
      GWAddHateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddHateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddHateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWAddHateReq));
  GWAddRecentReq_descriptor_ = file->message_type(19);
  static const int GWAddRecentReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddRecentReq, srcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddRecentReq, dstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddRecentReq, ntype_),
  };
  GWAddRecentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWAddRecentReq_descriptor_,
      GWAddRecentReq::default_instance_,
      GWAddRecentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddRecentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWAddRecentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWAddRecentReq));
  GiftGivingRecord_descriptor_ = file->message_type(20);
  static const int GiftGivingRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftGivingRecord, nrecordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftGivingRecord, sname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftGivingRecord, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftGivingRecord, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftGivingRecord, bthank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftGivingRecord, sendtype_),
  };
  GiftGivingRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiftGivingRecord_descriptor_,
      GiftGivingRecord::default_instance_,
      GiftGivingRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftGivingRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftGivingRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiftGivingRecord));
  CWGetGiftGivingRecordReq_descriptor_ = file->message_type(21);
  static const int CWGetGiftGivingRecordReq_offsets_[1] = {
  };
  CWGetGiftGivingRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWGetGiftGivingRecordReq_descriptor_,
      CWGetGiftGivingRecordReq::default_instance_,
      CWGetGiftGivingRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetGiftGivingRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGetGiftGivingRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWGetGiftGivingRecordReq));
  WCGetGiftGivingRecordRsp_descriptor_ = file->message_type(22);
  static const int WCGetGiftGivingRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetGiftGivingRecordRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetGiftGivingRecordRsp, records_),
  };
  WCGetGiftGivingRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCGetGiftGivingRecordRsp_descriptor_,
      WCGetGiftGivingRecordRsp::default_instance_,
      WCGetGiftGivingRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetGiftGivingRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGetGiftGivingRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCGetGiftGivingRecordRsp));
  CWGivingGiftReq_descriptor_ = file->message_type(23);
  static const int CWGivingGiftReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGivingGiftReq, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGivingGiftReq, playerid_),
  };
  CWGivingGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWGivingGiftReq_descriptor_,
      CWGivingGiftReq::default_instance_,
      CWGivingGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGivingGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWGivingGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWGivingGiftReq));
  WCGivingGiftRsp_descriptor_ = file->message_type(24);
  static const int WCGivingGiftRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftRsp, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftRsp, closeness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftRsp, itemid_),
  };
  WCGivingGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCGivingGiftRsp_descriptor_,
      WCGivingGiftRsp::default_instance_,
      WCGivingGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCGivingGiftRsp));
  WCGivingGiftNotice_descriptor_ = file->message_type(25);
  static const int WCGivingGiftNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftNotice, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftNotice, itemid_),
  };
  WCGivingGiftNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCGivingGiftNotice_descriptor_,
      WCGivingGiftNotice::default_instance_,
      WCGivingGiftNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCGivingGiftNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCGivingGiftNotice));
  WCThankGiving_descriptor_ = file->message_type(26);
  static const int WCThankGiving_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCThankGiving, nrecordid_),
  };
  WCThankGiving_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCThankGiving_descriptor_,
      WCThankGiving::default_instance_,
      WCThankGiving_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCThankGiving, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCThankGiving, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCThankGiving));
  GWGivingGiftReq_descriptor_ = file->message_type(27);
  static const int GWGivingGiftReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWGivingGiftReq, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWGivingGiftReq, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWGivingGiftReq, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWGivingGiftReq, useitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWGivingGiftReq, usediamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWGivingGiftReq, usebinddiamond_),
  };
  GWGivingGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWGivingGiftReq_descriptor_,
      GWGivingGiftReq::default_instance_,
      GWGivingGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWGivingGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWGivingGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWGivingGiftReq));
  WGGivingGiftErrorNotice_descriptor_ = file->message_type(28);
  static const int WGGivingGiftErrorNotice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGivingGiftErrorNotice, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGivingGiftErrorNotice, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGivingGiftErrorNotice, useitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGivingGiftErrorNotice, usediamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGivingGiftErrorNotice, usebinddiamond_),
  };
  WGGivingGiftErrorNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WGGivingGiftErrorNotice_descriptor_,
      WGGivingGiftErrorNotice::default_instance_,
      WGGivingGiftErrorNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGivingGiftErrorNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WGGivingGiftErrorNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WGGivingGiftErrorNotice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Relation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCRelationSyncNotifyRsp_descriptor_, &WCRelationSyncNotifyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCRelationSyncDelNotifyRsp_descriptor_, &WCRelationSyncDelNotifyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWRelationDataReq_descriptor_, &CWRelationDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCRelationDataRsp_descriptor_, &WCRelationDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCRealtionOnlineNotify_descriptor_, &WCRealtionOnlineNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAddFriendApplyReq_descriptor_, &CWAddFriendApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCAddFriendApplyRsp_descriptor_, &WCAddFriendApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAgreeFriendApplyReq_descriptor_, &CWAgreeFriendApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCAgreeFriendApplyRsp_descriptor_, &WCAgreeFriendApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAddBlackReq_descriptor_, &CWAddBlackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAddBlackRsp_descriptor_, &CWAddBlackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAddShieldReq_descriptor_, &CWAddShieldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAddShieldRsp_descriptor_, &CWAddShieldRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWDeleteRelationReq_descriptor_, &CWDeleteRelationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCDeleteRelationRsp_descriptor_, &WCDeleteRelationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWRecommendFriendReq_descriptor_, &CWRecommendFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCRecommendFriendRsp_descriptor_, &WCRecommendFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGNotifyAddFriend_descriptor_, &WGNotifyAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWAddHateReq_descriptor_, &GWAddHateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWAddRecentReq_descriptor_, &GWAddRecentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiftGivingRecord_descriptor_, &GiftGivingRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWGetGiftGivingRecordReq_descriptor_, &CWGetGiftGivingRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCGetGiftGivingRecordRsp_descriptor_, &WCGetGiftGivingRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWGivingGiftReq_descriptor_, &CWGivingGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCGivingGiftRsp_descriptor_, &WCGivingGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCGivingGiftNotice_descriptor_, &WCGivingGiftNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCThankGiving_descriptor_, &WCThankGiving::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWGivingGiftReq_descriptor_, &GWGivingGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WGGivingGiftErrorNotice_descriptor_, &WGGivingGiftErrorNotice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Relation_2eproto() {
  delete WCRelationSyncNotifyRsp::default_instance_;
  delete WCRelationSyncNotifyRsp_reflection_;
  delete WCRelationSyncDelNotifyRsp::default_instance_;
  delete WCRelationSyncDelNotifyRsp_reflection_;
  delete CWRelationDataReq::default_instance_;
  delete CWRelationDataReq_reflection_;
  delete WCRelationDataRsp::default_instance_;
  delete WCRelationDataRsp_reflection_;
  delete WCRealtionOnlineNotify::default_instance_;
  delete WCRealtionOnlineNotify_reflection_;
  delete CWAddFriendApplyReq::default_instance_;
  delete CWAddFriendApplyReq_reflection_;
  delete WCAddFriendApplyRsp::default_instance_;
  delete WCAddFriendApplyRsp_reflection_;
  delete CWAgreeFriendApplyReq::default_instance_;
  delete CWAgreeFriendApplyReq_reflection_;
  delete WCAgreeFriendApplyRsp::default_instance_;
  delete WCAgreeFriendApplyRsp_reflection_;
  delete CWAddBlackReq::default_instance_;
  delete CWAddBlackReq_reflection_;
  delete CWAddBlackRsp::default_instance_;
  delete CWAddBlackRsp_reflection_;
  delete CWAddShieldReq::default_instance_;
  delete CWAddShieldReq_reflection_;
  delete CWAddShieldRsp::default_instance_;
  delete CWAddShieldRsp_reflection_;
  delete CWDeleteRelationReq::default_instance_;
  delete CWDeleteRelationReq_reflection_;
  delete WCDeleteRelationRsp::default_instance_;
  delete WCDeleteRelationRsp_reflection_;
  delete CWRecommendFriendReq::default_instance_;
  delete CWRecommendFriendReq_reflection_;
  delete WCRecommendFriendRsp::default_instance_;
  delete WCRecommendFriendRsp_reflection_;
  delete WGNotifyAddFriend::default_instance_;
  delete WGNotifyAddFriend_reflection_;
  delete GWAddHateReq::default_instance_;
  delete GWAddHateReq_reflection_;
  delete GWAddRecentReq::default_instance_;
  delete GWAddRecentReq_reflection_;
  delete GiftGivingRecord::default_instance_;
  delete GiftGivingRecord_reflection_;
  delete CWGetGiftGivingRecordReq::default_instance_;
  delete CWGetGiftGivingRecordReq_reflection_;
  delete WCGetGiftGivingRecordRsp::default_instance_;
  delete WCGetGiftGivingRecordRsp_reflection_;
  delete CWGivingGiftReq::default_instance_;
  delete CWGivingGiftReq_reflection_;
  delete WCGivingGiftRsp::default_instance_;
  delete WCGivingGiftRsp_reflection_;
  delete WCGivingGiftNotice::default_instance_;
  delete WCGivingGiftNotice_reflection_;
  delete WCThankGiving::default_instance_;
  delete WCThankGiving_reflection_;
  delete GWGivingGiftReq::default_instance_;
  delete GWGivingGiftReq_reflection_;
  delete WGGivingGiftErrorNotice::default_instance_;
  delete WGGivingGiftErrorNotice_reflection_;
}

void protobuf_AddDesc_Relation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Relation.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\032\022common_logic.proto\032\tCom.proto"
    "\"_\n\027WCRelationSyncNotifyRsp\022\022\n\ngroupInde"
    "x\030\001 \002(\r\0220\n\nfriendInfo\030\002 \002(\0132\034.proto_ff.R"
    "olePlayerMiniInfo\"F\n\032WCRelationSyncDelNo"
    "tifyRsp\022\022\n\ngroupIndex\030\001 \002(\r\022\024\n\014playerIdL"
    "ist\030\002 \003(\004\"\'\n\021CWRelationDataReq\022\022\n\ngroupI"
    "ndex\030\001 \002(\r\"Y\n\021WCRelationDataRsp\022\022\n\ngroup"
    "Index\030\001 \002(\r\0220\n\nfriendInfo\030\002 \003(\0132\034.proto_"
    "ff.RolePlayerMiniInfo\"Q\n\026WCRealtionOnlin"
    "eNotify\022\020\n\010playerId\030\001 \002(\004\022\020\n\010isOnline\030\002 "
    "\002(\010\022\023\n\013offlineTime\030\003 \001(\004\"F\n\023CWAddFriendA"
    "pplyReq\022\020\n\010playerId\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022"
    "\017\n\007content\030\003 \001(\t\"\"\n\023WCAddFriendApplyRsp\022"
    "\013\n\003ret\030\001 \002(\r\"-\n\025CWAgreeFriendApplyReq\022\024\n"
    "\014playerIdList\030\001 \003(\004\"$\n\025WCAgreeFriendAppl"
    "yRsp\022\013\n\003ret\030\001 \002(\r\"!\n\rCWAddBlackReq\022\020\n\010pl"
    "ayerId\030\001 \002(\004\"\034\n\rCWAddBlackRsp\022\013\n\003ret\030\001 \002"
    "(\r\"\"\n\016CWAddShieldReq\022\020\n\010playerId\030\001 \002(\004\"\035"
    "\n\016CWAddShieldRsp\022\013\n\003ret\030\001 \002(\r\"\?\n\023CWDelet"
    "eRelationReq\022\022\n\ngroupIndex\030\001 \002(\r\022\024\n\014play"
    "erIdList\030\002 \003(\004\"\"\n\023WCDeleteRelationRsp\022\013\n"
    "\003ret\030\001 \002(\r\"%\n\024CWRecommendFriendReq\022\r\n\005ag"
    "ain\030\001 \002(\010\"T\n\024WCRecommendFriendRsp\022\013\n\003ret"
    "\030\001 \002(\r\022/\n\trecommend\030\002 \003(\0132\034.proto_ff.Rol"
    "ePlayerMiniInfo\"Y\n\021WGNotifyAddFriend\022\016\n\006"
    "charId\030\001 \002(\004\022\024\n\014operate_type\030\002 \002(\r\022\016\n\006ad"
    "dNum\030\003 \001(\r\022\016\n\006curNum\030\004 \001(\r\",\n\014GWAddHateR"
    "eq\022\r\n\005srcID\030\001 \002(\004\022\r\n\005dstID\030\002 \002(\004\"=\n\016GWAd"
    "dRecentReq\022\r\n\005srcID\030\001 \002(\004\022\r\n\005dstID\030\002 \002(\004"
    "\022\r\n\005nType\030\003 \001(\r\"x\n\020GiftGivingRecord\022\021\n\tn"
    "RecordId\030\001 \001(\r\022\r\n\005sName\030\002 \001(\t\022\020\n\010playerI"
    "d\030\003 \001(\004\022\016\n\006itemId\030\004 \001(\004\022\016\n\006bThank\030\005 \001(\010\022"
    "\020\n\010sendType\030\006 \001(\r\"\032\n\030CWGetGiftGivingReco"
    "rdReq\"T\n\030WCGetGiftGivingRecordRsp\022\013\n\003ret"
    "\030\001 \001(\r\022+\n\007records\030\002 \003(\0132\032.proto_ff.GiftG"
    "ivingRecord\"3\n\017CWGivingGiftReq\022\016\n\006itemId"
    "\030\001 \001(\004\022\020\n\010playerId\030\002 \001(\004\"S\n\017WCGivingGift"
    "Rsp\022\013\n\003ret\030\001 \001(\r\022\020\n\010playerId\030\002 \001(\004\022\021\n\tcl"
    "oseness\030\003 \001(\004\022\016\n\006itemId\030\004 \001(\004\"6\n\022WCGivin"
    "gGiftNotice\022\020\n\010userName\030\001 \001(\t\022\016\n\006itemId\030"
    "\002 \001(\004\"\"\n\rWCThankGiving\022\021\n\tnRecordId\030\001 \001("
    "\r\"\203\001\n\017GWGivingGiftReq\022\016\n\006selfId\030\001 \001(\004\022\020\n"
    "\010targetId\030\002 \001(\004\022\016\n\006itemId\030\003 \001(\004\022\022\n\nuseIt"
    "emNum\030\004 \001(\r\022\022\n\nuseDiamond\030\005 \001(\004\022\026\n\016useBi"
    "ndDiamond\030\006 \001(\004\"y\n\027WGGivingGiftErrorNoti"
    "ce\022\016\n\006selfId\030\001 \001(\004\022\016\n\006itemId\030\002 \001(\004\022\022\n\nus"
    "eItemNum\030\003 \001(\r\022\022\n\nuseDiamond\030\004 \001(\004\022\026\n\016us"
    "eBindDiamond\030\005 \001(\004", 1938);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Relation.proto", &protobuf_RegisterTypes);
  WCRelationSyncNotifyRsp::default_instance_ = new WCRelationSyncNotifyRsp();
  WCRelationSyncDelNotifyRsp::default_instance_ = new WCRelationSyncDelNotifyRsp();
  CWRelationDataReq::default_instance_ = new CWRelationDataReq();
  WCRelationDataRsp::default_instance_ = new WCRelationDataRsp();
  WCRealtionOnlineNotify::default_instance_ = new WCRealtionOnlineNotify();
  CWAddFriendApplyReq::default_instance_ = new CWAddFriendApplyReq();
  WCAddFriendApplyRsp::default_instance_ = new WCAddFriendApplyRsp();
  CWAgreeFriendApplyReq::default_instance_ = new CWAgreeFriendApplyReq();
  WCAgreeFriendApplyRsp::default_instance_ = new WCAgreeFriendApplyRsp();
  CWAddBlackReq::default_instance_ = new CWAddBlackReq();
  CWAddBlackRsp::default_instance_ = new CWAddBlackRsp();
  CWAddShieldReq::default_instance_ = new CWAddShieldReq();
  CWAddShieldRsp::default_instance_ = new CWAddShieldRsp();
  CWDeleteRelationReq::default_instance_ = new CWDeleteRelationReq();
  WCDeleteRelationRsp::default_instance_ = new WCDeleteRelationRsp();
  CWRecommendFriendReq::default_instance_ = new CWRecommendFriendReq();
  WCRecommendFriendRsp::default_instance_ = new WCRecommendFriendRsp();
  WGNotifyAddFriend::default_instance_ = new WGNotifyAddFriend();
  GWAddHateReq::default_instance_ = new GWAddHateReq();
  GWAddRecentReq::default_instance_ = new GWAddRecentReq();
  GiftGivingRecord::default_instance_ = new GiftGivingRecord();
  CWGetGiftGivingRecordReq::default_instance_ = new CWGetGiftGivingRecordReq();
  WCGetGiftGivingRecordRsp::default_instance_ = new WCGetGiftGivingRecordRsp();
  CWGivingGiftReq::default_instance_ = new CWGivingGiftReq();
  WCGivingGiftRsp::default_instance_ = new WCGivingGiftRsp();
  WCGivingGiftNotice::default_instance_ = new WCGivingGiftNotice();
  WCThankGiving::default_instance_ = new WCThankGiving();
  GWGivingGiftReq::default_instance_ = new GWGivingGiftReq();
  WGGivingGiftErrorNotice::default_instance_ = new WGGivingGiftErrorNotice();
  WCRelationSyncNotifyRsp::default_instance_->InitAsDefaultInstance();
  WCRelationSyncDelNotifyRsp::default_instance_->InitAsDefaultInstance();
  CWRelationDataReq::default_instance_->InitAsDefaultInstance();
  WCRelationDataRsp::default_instance_->InitAsDefaultInstance();
  WCRealtionOnlineNotify::default_instance_->InitAsDefaultInstance();
  CWAddFriendApplyReq::default_instance_->InitAsDefaultInstance();
  WCAddFriendApplyRsp::default_instance_->InitAsDefaultInstance();
  CWAgreeFriendApplyReq::default_instance_->InitAsDefaultInstance();
  WCAgreeFriendApplyRsp::default_instance_->InitAsDefaultInstance();
  CWAddBlackReq::default_instance_->InitAsDefaultInstance();
  CWAddBlackRsp::default_instance_->InitAsDefaultInstance();
  CWAddShieldReq::default_instance_->InitAsDefaultInstance();
  CWAddShieldRsp::default_instance_->InitAsDefaultInstance();
  CWDeleteRelationReq::default_instance_->InitAsDefaultInstance();
  WCDeleteRelationRsp::default_instance_->InitAsDefaultInstance();
  CWRecommendFriendReq::default_instance_->InitAsDefaultInstance();
  WCRecommendFriendRsp::default_instance_->InitAsDefaultInstance();
  WGNotifyAddFriend::default_instance_->InitAsDefaultInstance();
  GWAddHateReq::default_instance_->InitAsDefaultInstance();
  GWAddRecentReq::default_instance_->InitAsDefaultInstance();
  GiftGivingRecord::default_instance_->InitAsDefaultInstance();
  CWGetGiftGivingRecordReq::default_instance_->InitAsDefaultInstance();
  WCGetGiftGivingRecordRsp::default_instance_->InitAsDefaultInstance();
  CWGivingGiftReq::default_instance_->InitAsDefaultInstance();
  WCGivingGiftRsp::default_instance_->InitAsDefaultInstance();
  WCGivingGiftNotice::default_instance_->InitAsDefaultInstance();
  WCThankGiving::default_instance_->InitAsDefaultInstance();
  GWGivingGiftReq::default_instance_->InitAsDefaultInstance();
  WGGivingGiftErrorNotice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Relation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Relation_2eproto {
  StaticDescriptorInitializer_Relation_2eproto() {
    protobuf_AddDesc_Relation_2eproto();
  }
} static_descriptor_initializer_Relation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WCRelationSyncNotifyRsp::kGroupIndexFieldNumber;
const int WCRelationSyncNotifyRsp::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

WCRelationSyncNotifyRsp::WCRelationSyncNotifyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCRelationSyncNotifyRsp::InitAsDefaultInstance() {
  friendinfo_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

WCRelationSyncNotifyRsp::WCRelationSyncNotifyRsp(const WCRelationSyncNotifyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCRelationSyncNotifyRsp::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  friendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCRelationSyncNotifyRsp::~WCRelationSyncNotifyRsp() {
  SharedDtor();
}

void WCRelationSyncNotifyRsp::SharedDtor() {
  if (this != default_instance_) {
    delete friendinfo_;
  }
}

void WCRelationSyncNotifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCRelationSyncNotifyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCRelationSyncNotifyRsp_descriptor_;
}

const WCRelationSyncNotifyRsp& WCRelationSyncNotifyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCRelationSyncNotifyRsp* WCRelationSyncNotifyRsp::default_instance_ = NULL;

WCRelationSyncNotifyRsp* WCRelationSyncNotifyRsp::New() const {
  return new WCRelationSyncNotifyRsp;
}

void WCRelationSyncNotifyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCRelationSyncNotifyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendInfo;
        break;
      }

      // required .proto_ff.RolePlayerMiniInfo friendInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCRelationSyncNotifyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  // required .proto_ff.RolePlayerMiniInfo friendInfo = 2;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCRelationSyncNotifyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  // required .proto_ff.RolePlayerMiniInfo friendInfo = 2;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCRelationSyncNotifyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

    // required .proto_ff.RolePlayerMiniInfo friendInfo = 2;
    if (has_friendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCRelationSyncNotifyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCRelationSyncNotifyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCRelationSyncNotifyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCRelationSyncNotifyRsp::MergeFrom(const WCRelationSyncNotifyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.friendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCRelationSyncNotifyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCRelationSyncNotifyRsp::CopyFrom(const WCRelationSyncNotifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCRelationSyncNotifyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WCRelationSyncNotifyRsp::Swap(WCRelationSyncNotifyRsp* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCRelationSyncNotifyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCRelationSyncNotifyRsp_descriptor_;
  metadata.reflection = WCRelationSyncNotifyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCRelationSyncDelNotifyRsp::kGroupIndexFieldNumber;
const int WCRelationSyncDelNotifyRsp::kPlayerIdListFieldNumber;
#endif  // !_MSC_VER

WCRelationSyncDelNotifyRsp::WCRelationSyncDelNotifyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCRelationSyncDelNotifyRsp::InitAsDefaultInstance() {
}

WCRelationSyncDelNotifyRsp::WCRelationSyncDelNotifyRsp(const WCRelationSyncDelNotifyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCRelationSyncDelNotifyRsp::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCRelationSyncDelNotifyRsp::~WCRelationSyncDelNotifyRsp() {
  SharedDtor();
}

void WCRelationSyncDelNotifyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCRelationSyncDelNotifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCRelationSyncDelNotifyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCRelationSyncDelNotifyRsp_descriptor_;
}

const WCRelationSyncDelNotifyRsp& WCRelationSyncDelNotifyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCRelationSyncDelNotifyRsp* WCRelationSyncDelNotifyRsp::default_instance_ = NULL;

WCRelationSyncDelNotifyRsp* WCRelationSyncDelNotifyRsp::New() const {
  return new WCRelationSyncDelNotifyRsp;
}

void WCRelationSyncDelNotifyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
  }
  playeridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCRelationSyncDelNotifyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerIdList;
        break;
      }

      // repeated uint64 playerIdList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_playeridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_playeridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerIdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCRelationSyncDelNotifyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  // repeated uint64 playerIdList = 2;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->playeridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCRelationSyncDelNotifyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  // repeated uint64 playerIdList = 2;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->playeridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCRelationSyncDelNotifyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  // repeated uint64 playerIdList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->playeridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->playeridlist(i));
    }
    total_size += 1 * this->playeridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCRelationSyncDelNotifyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCRelationSyncDelNotifyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCRelationSyncDelNotifyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCRelationSyncDelNotifyRsp::MergeFrom(const WCRelationSyncDelNotifyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  playeridlist_.MergeFrom(from.playeridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCRelationSyncDelNotifyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCRelationSyncDelNotifyRsp::CopyFrom(const WCRelationSyncDelNotifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCRelationSyncDelNotifyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WCRelationSyncDelNotifyRsp::Swap(WCRelationSyncDelNotifyRsp* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    playeridlist_.Swap(&other->playeridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCRelationSyncDelNotifyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCRelationSyncDelNotifyRsp_descriptor_;
  metadata.reflection = WCRelationSyncDelNotifyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWRelationDataReq::kGroupIndexFieldNumber;
#endif  // !_MSC_VER

CWRelationDataReq::CWRelationDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWRelationDataReq::InitAsDefaultInstance() {
}

CWRelationDataReq::CWRelationDataReq(const CWRelationDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWRelationDataReq::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWRelationDataReq::~CWRelationDataReq() {
  SharedDtor();
}

void CWRelationDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWRelationDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWRelationDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWRelationDataReq_descriptor_;
}

const CWRelationDataReq& CWRelationDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWRelationDataReq* CWRelationDataReq::default_instance_ = NULL;

CWRelationDataReq* CWRelationDataReq::New() const {
  return new CWRelationDataReq;
}

void CWRelationDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWRelationDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWRelationDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWRelationDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWRelationDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWRelationDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWRelationDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWRelationDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWRelationDataReq::MergeFrom(const CWRelationDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWRelationDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWRelationDataReq::CopyFrom(const CWRelationDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWRelationDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CWRelationDataReq::Swap(CWRelationDataReq* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWRelationDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWRelationDataReq_descriptor_;
  metadata.reflection = CWRelationDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCRelationDataRsp::kGroupIndexFieldNumber;
const int WCRelationDataRsp::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

WCRelationDataRsp::WCRelationDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCRelationDataRsp::InitAsDefaultInstance() {
}

WCRelationDataRsp::WCRelationDataRsp(const WCRelationDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCRelationDataRsp::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCRelationDataRsp::~WCRelationDataRsp() {
  SharedDtor();
}

void WCRelationDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCRelationDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCRelationDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCRelationDataRsp_descriptor_;
}

const WCRelationDataRsp& WCRelationDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCRelationDataRsp* WCRelationDataRsp::default_instance_ = NULL;

WCRelationDataRsp* WCRelationDataRsp::New() const {
  return new WCRelationDataRsp;
}

void WCRelationDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
  }
  friendinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCRelationDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendInfo;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo friendInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCRelationDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo friendInfo = 2;
  for (int i = 0; i < this->friendinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCRelationDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo friendInfo = 2;
  for (int i = 0; i < this->friendinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCRelationDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo friendInfo = 2;
  total_size += 1 * this->friendinfo_size();
  for (int i = 0; i < this->friendinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCRelationDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCRelationDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCRelationDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCRelationDataRsp::MergeFrom(const WCRelationDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendinfo_.MergeFrom(from.friendinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCRelationDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCRelationDataRsp::CopyFrom(const WCRelationDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCRelationDataRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WCRelationDataRsp::Swap(WCRelationDataRsp* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    friendinfo_.Swap(&other->friendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCRelationDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCRelationDataRsp_descriptor_;
  metadata.reflection = WCRelationDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCRealtionOnlineNotify::kPlayerIdFieldNumber;
const int WCRealtionOnlineNotify::kIsOnlineFieldNumber;
const int WCRealtionOnlineNotify::kOfflineTimeFieldNumber;
#endif  // !_MSC_VER

WCRealtionOnlineNotify::WCRealtionOnlineNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCRealtionOnlineNotify::InitAsDefaultInstance() {
}

WCRealtionOnlineNotify::WCRealtionOnlineNotify(const WCRealtionOnlineNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCRealtionOnlineNotify::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  isonline_ = false;
  offlinetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCRealtionOnlineNotify::~WCRealtionOnlineNotify() {
  SharedDtor();
}

void WCRealtionOnlineNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCRealtionOnlineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCRealtionOnlineNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCRealtionOnlineNotify_descriptor_;
}

const WCRealtionOnlineNotify& WCRealtionOnlineNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCRealtionOnlineNotify* WCRealtionOnlineNotify::default_instance_ = NULL;

WCRealtionOnlineNotify* WCRealtionOnlineNotify::New() const {
  return new WCRealtionOnlineNotify;
}

void WCRealtionOnlineNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    isonline_ = false;
    offlinetime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCRealtionOnlineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOnline;
        break;
      }

      // required bool isOnline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offlineTime;
        break;
      }

      // optional uint64 offlineTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCRealtionOnlineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required bool isOnline = 2;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isonline(), output);
  }

  // optional uint64 offlineTime = 3;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCRealtionOnlineNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required bool isOnline = 2;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isonline(), target);
  }

  // optional uint64 offlineTime = 3;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCRealtionOnlineNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required bool isOnline = 2;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // optional uint64 offlineTime = 3;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCRealtionOnlineNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCRealtionOnlineNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCRealtionOnlineNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCRealtionOnlineNotify::MergeFrom(const WCRealtionOnlineNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCRealtionOnlineNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCRealtionOnlineNotify::CopyFrom(const WCRealtionOnlineNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCRealtionOnlineNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WCRealtionOnlineNotify::Swap(WCRealtionOnlineNotify* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(isonline_, other->isonline_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCRealtionOnlineNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCRealtionOnlineNotify_descriptor_;
  metadata.reflection = WCRealtionOnlineNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAddFriendApplyReq::kPlayerIdFieldNumber;
const int CWAddFriendApplyReq::kNameFieldNumber;
const int CWAddFriendApplyReq::kContentFieldNumber;
#endif  // !_MSC_VER

CWAddFriendApplyReq::CWAddFriendApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAddFriendApplyReq::InitAsDefaultInstance() {
}

CWAddFriendApplyReq::CWAddFriendApplyReq(const CWAddFriendApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAddFriendApplyReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAddFriendApplyReq::~CWAddFriendApplyReq() {
  SharedDtor();
}

void CWAddFriendApplyReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CWAddFriendApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAddFriendApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAddFriendApplyReq_descriptor_;
}

const CWAddFriendApplyReq& CWAddFriendApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWAddFriendApplyReq* CWAddFriendApplyReq::default_instance_ = NULL;

CWAddFriendApplyReq* CWAddFriendApplyReq::New() const {
  return new CWAddFriendApplyReq;
}

void CWAddFriendApplyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAddFriendApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAddFriendApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAddFriendApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAddFriendApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAddFriendApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAddFriendApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAddFriendApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAddFriendApplyReq::MergeFrom(const CWAddFriendApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAddFriendApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAddFriendApplyReq::CopyFrom(const CWAddFriendApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAddFriendApplyReq::IsInitialized() const {

  return true;
}

void CWAddFriendApplyReq::Swap(CWAddFriendApplyReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAddFriendApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAddFriendApplyReq_descriptor_;
  metadata.reflection = CWAddFriendApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCAddFriendApplyRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WCAddFriendApplyRsp::WCAddFriendApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCAddFriendApplyRsp::InitAsDefaultInstance() {
}

WCAddFriendApplyRsp::WCAddFriendApplyRsp(const WCAddFriendApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCAddFriendApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCAddFriendApplyRsp::~WCAddFriendApplyRsp() {
  SharedDtor();
}

void WCAddFriendApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCAddFriendApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCAddFriendApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCAddFriendApplyRsp_descriptor_;
}

const WCAddFriendApplyRsp& WCAddFriendApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCAddFriendApplyRsp* WCAddFriendApplyRsp::default_instance_ = NULL;

WCAddFriendApplyRsp* WCAddFriendApplyRsp::New() const {
  return new WCAddFriendApplyRsp;
}

void WCAddFriendApplyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCAddFriendApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCAddFriendApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCAddFriendApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCAddFriendApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCAddFriendApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCAddFriendApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCAddFriendApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCAddFriendApplyRsp::MergeFrom(const WCAddFriendApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCAddFriendApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCAddFriendApplyRsp::CopyFrom(const WCAddFriendApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCAddFriendApplyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WCAddFriendApplyRsp::Swap(WCAddFriendApplyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCAddFriendApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCAddFriendApplyRsp_descriptor_;
  metadata.reflection = WCAddFriendApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAgreeFriendApplyReq::kPlayerIdListFieldNumber;
#endif  // !_MSC_VER

CWAgreeFriendApplyReq::CWAgreeFriendApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAgreeFriendApplyReq::InitAsDefaultInstance() {
}

CWAgreeFriendApplyReq::CWAgreeFriendApplyReq(const CWAgreeFriendApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAgreeFriendApplyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAgreeFriendApplyReq::~CWAgreeFriendApplyReq() {
  SharedDtor();
}

void CWAgreeFriendApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAgreeFriendApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAgreeFriendApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAgreeFriendApplyReq_descriptor_;
}

const CWAgreeFriendApplyReq& CWAgreeFriendApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWAgreeFriendApplyReq* CWAgreeFriendApplyReq::default_instance_ = NULL;

CWAgreeFriendApplyReq* CWAgreeFriendApplyReq::New() const {
  return new CWAgreeFriendApplyReq;
}

void CWAgreeFriendApplyReq::Clear() {
  playeridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAgreeFriendApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 playerIdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_playeridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_playeridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerIdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAgreeFriendApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 playerIdList = 1;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->playeridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAgreeFriendApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 playerIdList = 1;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->playeridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAgreeFriendApplyReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 playerIdList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playeridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->playeridlist(i));
    }
    total_size += 1 * this->playeridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAgreeFriendApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAgreeFriendApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAgreeFriendApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAgreeFriendApplyReq::MergeFrom(const CWAgreeFriendApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  playeridlist_.MergeFrom(from.playeridlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAgreeFriendApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAgreeFriendApplyReq::CopyFrom(const CWAgreeFriendApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAgreeFriendApplyReq::IsInitialized() const {

  return true;
}

void CWAgreeFriendApplyReq::Swap(CWAgreeFriendApplyReq* other) {
  if (other != this) {
    playeridlist_.Swap(&other->playeridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAgreeFriendApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAgreeFriendApplyReq_descriptor_;
  metadata.reflection = CWAgreeFriendApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCAgreeFriendApplyRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WCAgreeFriendApplyRsp::WCAgreeFriendApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCAgreeFriendApplyRsp::InitAsDefaultInstance() {
}

WCAgreeFriendApplyRsp::WCAgreeFriendApplyRsp(const WCAgreeFriendApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCAgreeFriendApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCAgreeFriendApplyRsp::~WCAgreeFriendApplyRsp() {
  SharedDtor();
}

void WCAgreeFriendApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCAgreeFriendApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCAgreeFriendApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCAgreeFriendApplyRsp_descriptor_;
}

const WCAgreeFriendApplyRsp& WCAgreeFriendApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCAgreeFriendApplyRsp* WCAgreeFriendApplyRsp::default_instance_ = NULL;

WCAgreeFriendApplyRsp* WCAgreeFriendApplyRsp::New() const {
  return new WCAgreeFriendApplyRsp;
}

void WCAgreeFriendApplyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCAgreeFriendApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCAgreeFriendApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCAgreeFriendApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCAgreeFriendApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCAgreeFriendApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCAgreeFriendApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCAgreeFriendApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCAgreeFriendApplyRsp::MergeFrom(const WCAgreeFriendApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCAgreeFriendApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCAgreeFriendApplyRsp::CopyFrom(const WCAgreeFriendApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCAgreeFriendApplyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WCAgreeFriendApplyRsp::Swap(WCAgreeFriendApplyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCAgreeFriendApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCAgreeFriendApplyRsp_descriptor_;
  metadata.reflection = WCAgreeFriendApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAddBlackReq::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CWAddBlackReq::CWAddBlackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAddBlackReq::InitAsDefaultInstance() {
}

CWAddBlackReq::CWAddBlackReq(const CWAddBlackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAddBlackReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAddBlackReq::~CWAddBlackReq() {
  SharedDtor();
}

void CWAddBlackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAddBlackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAddBlackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAddBlackReq_descriptor_;
}

const CWAddBlackReq& CWAddBlackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWAddBlackReq* CWAddBlackReq::default_instance_ = NULL;

CWAddBlackReq* CWAddBlackReq::New() const {
  return new CWAddBlackReq;
}

void CWAddBlackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAddBlackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAddBlackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAddBlackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAddBlackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAddBlackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAddBlackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAddBlackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAddBlackReq::MergeFrom(const CWAddBlackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAddBlackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAddBlackReq::CopyFrom(const CWAddBlackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAddBlackReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CWAddBlackReq::Swap(CWAddBlackReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAddBlackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAddBlackReq_descriptor_;
  metadata.reflection = CWAddBlackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAddBlackRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CWAddBlackRsp::CWAddBlackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAddBlackRsp::InitAsDefaultInstance() {
}

CWAddBlackRsp::CWAddBlackRsp(const CWAddBlackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAddBlackRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAddBlackRsp::~CWAddBlackRsp() {
  SharedDtor();
}

void CWAddBlackRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAddBlackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAddBlackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAddBlackRsp_descriptor_;
}

const CWAddBlackRsp& CWAddBlackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWAddBlackRsp* CWAddBlackRsp::default_instance_ = NULL;

CWAddBlackRsp* CWAddBlackRsp::New() const {
  return new CWAddBlackRsp;
}

void CWAddBlackRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAddBlackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAddBlackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAddBlackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAddBlackRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAddBlackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAddBlackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAddBlackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAddBlackRsp::MergeFrom(const CWAddBlackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAddBlackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAddBlackRsp::CopyFrom(const CWAddBlackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAddBlackRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CWAddBlackRsp::Swap(CWAddBlackRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAddBlackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAddBlackRsp_descriptor_;
  metadata.reflection = CWAddBlackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAddShieldReq::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CWAddShieldReq::CWAddShieldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAddShieldReq::InitAsDefaultInstance() {
}

CWAddShieldReq::CWAddShieldReq(const CWAddShieldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAddShieldReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAddShieldReq::~CWAddShieldReq() {
  SharedDtor();
}

void CWAddShieldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAddShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAddShieldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAddShieldReq_descriptor_;
}

const CWAddShieldReq& CWAddShieldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWAddShieldReq* CWAddShieldReq::default_instance_ = NULL;

CWAddShieldReq* CWAddShieldReq::New() const {
  return new CWAddShieldReq;
}

void CWAddShieldReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAddShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAddShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAddShieldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAddShieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAddShieldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAddShieldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAddShieldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAddShieldReq::MergeFrom(const CWAddShieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAddShieldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAddShieldReq::CopyFrom(const CWAddShieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAddShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CWAddShieldReq::Swap(CWAddShieldReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAddShieldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAddShieldReq_descriptor_;
  metadata.reflection = CWAddShieldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAddShieldRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CWAddShieldRsp::CWAddShieldRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAddShieldRsp::InitAsDefaultInstance() {
}

CWAddShieldRsp::CWAddShieldRsp(const CWAddShieldRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAddShieldRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAddShieldRsp::~CWAddShieldRsp() {
  SharedDtor();
}

void CWAddShieldRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAddShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAddShieldRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAddShieldRsp_descriptor_;
}

const CWAddShieldRsp& CWAddShieldRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWAddShieldRsp* CWAddShieldRsp::default_instance_ = NULL;

CWAddShieldRsp* CWAddShieldRsp::New() const {
  return new CWAddShieldRsp;
}

void CWAddShieldRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAddShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAddShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAddShieldRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAddShieldRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAddShieldRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAddShieldRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAddShieldRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAddShieldRsp::MergeFrom(const CWAddShieldRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAddShieldRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAddShieldRsp::CopyFrom(const CWAddShieldRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAddShieldRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CWAddShieldRsp::Swap(CWAddShieldRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAddShieldRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAddShieldRsp_descriptor_;
  metadata.reflection = CWAddShieldRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWDeleteRelationReq::kGroupIndexFieldNumber;
const int CWDeleteRelationReq::kPlayerIdListFieldNumber;
#endif  // !_MSC_VER

CWDeleteRelationReq::CWDeleteRelationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWDeleteRelationReq::InitAsDefaultInstance() {
}

CWDeleteRelationReq::CWDeleteRelationReq(const CWDeleteRelationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWDeleteRelationReq::SharedCtor() {
  _cached_size_ = 0;
  groupindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWDeleteRelationReq::~CWDeleteRelationReq() {
  SharedDtor();
}

void CWDeleteRelationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWDeleteRelationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWDeleteRelationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWDeleteRelationReq_descriptor_;
}

const CWDeleteRelationReq& CWDeleteRelationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWDeleteRelationReq* CWDeleteRelationReq::default_instance_ = NULL;

CWDeleteRelationReq* CWDeleteRelationReq::New() const {
  return new CWDeleteRelationReq;
}

void CWDeleteRelationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupindex_ = 0u;
  }
  playeridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWDeleteRelationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 groupIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
          set_has_groupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerIdList;
        break;
      }

      // repeated uint64 playerIdList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_playeridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_playeridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerIdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWDeleteRelationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupindex(), output);
  }

  // repeated uint64 playerIdList = 2;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->playeridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWDeleteRelationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 groupIndex = 1;
  if (has_groupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupindex(), target);
  }

  // repeated uint64 playerIdList = 2;
  for (int i = 0; i < this->playeridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->playeridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWDeleteRelationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 groupIndex = 1;
    if (has_groupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupindex());
    }

  }
  // repeated uint64 playerIdList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->playeridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->playeridlist(i));
    }
    total_size += 1 * this->playeridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWDeleteRelationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWDeleteRelationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWDeleteRelationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWDeleteRelationReq::MergeFrom(const CWDeleteRelationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  playeridlist_.MergeFrom(from.playeridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupindex()) {
      set_groupindex(from.groupindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWDeleteRelationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWDeleteRelationReq::CopyFrom(const CWDeleteRelationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWDeleteRelationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CWDeleteRelationReq::Swap(CWDeleteRelationReq* other) {
  if (other != this) {
    std::swap(groupindex_, other->groupindex_);
    playeridlist_.Swap(&other->playeridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWDeleteRelationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWDeleteRelationReq_descriptor_;
  metadata.reflection = CWDeleteRelationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCDeleteRelationRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WCDeleteRelationRsp::WCDeleteRelationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCDeleteRelationRsp::InitAsDefaultInstance() {
}

WCDeleteRelationRsp::WCDeleteRelationRsp(const WCDeleteRelationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCDeleteRelationRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCDeleteRelationRsp::~WCDeleteRelationRsp() {
  SharedDtor();
}

void WCDeleteRelationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCDeleteRelationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCDeleteRelationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCDeleteRelationRsp_descriptor_;
}

const WCDeleteRelationRsp& WCDeleteRelationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCDeleteRelationRsp* WCDeleteRelationRsp::default_instance_ = NULL;

WCDeleteRelationRsp* WCDeleteRelationRsp::New() const {
  return new WCDeleteRelationRsp;
}

void WCDeleteRelationRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCDeleteRelationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCDeleteRelationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCDeleteRelationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCDeleteRelationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCDeleteRelationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCDeleteRelationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCDeleteRelationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCDeleteRelationRsp::MergeFrom(const WCDeleteRelationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCDeleteRelationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCDeleteRelationRsp::CopyFrom(const WCDeleteRelationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCDeleteRelationRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WCDeleteRelationRsp::Swap(WCDeleteRelationRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCDeleteRelationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCDeleteRelationRsp_descriptor_;
  metadata.reflection = WCDeleteRelationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWRecommendFriendReq::kAgainFieldNumber;
#endif  // !_MSC_VER

CWRecommendFriendReq::CWRecommendFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWRecommendFriendReq::InitAsDefaultInstance() {
}

CWRecommendFriendReq::CWRecommendFriendReq(const CWRecommendFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWRecommendFriendReq::SharedCtor() {
  _cached_size_ = 0;
  again_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWRecommendFriendReq::~CWRecommendFriendReq() {
  SharedDtor();
}

void CWRecommendFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWRecommendFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWRecommendFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWRecommendFriendReq_descriptor_;
}

const CWRecommendFriendReq& CWRecommendFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWRecommendFriendReq* CWRecommendFriendReq::default_instance_ = NULL;

CWRecommendFriendReq* CWRecommendFriendReq::New() const {
  return new CWRecommendFriendReq;
}

void CWRecommendFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    again_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWRecommendFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool again = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &again_)));
          set_has_again();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWRecommendFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool again = 1;
  if (has_again()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->again(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWRecommendFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool again = 1;
  if (has_again()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->again(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWRecommendFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool again = 1;
    if (has_again()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWRecommendFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWRecommendFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWRecommendFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWRecommendFriendReq::MergeFrom(const CWRecommendFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_again()) {
      set_again(from.again());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWRecommendFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWRecommendFriendReq::CopyFrom(const CWRecommendFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWRecommendFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CWRecommendFriendReq::Swap(CWRecommendFriendReq* other) {
  if (other != this) {
    std::swap(again_, other->again_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWRecommendFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWRecommendFriendReq_descriptor_;
  metadata.reflection = CWRecommendFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCRecommendFriendRsp::kRetFieldNumber;
const int WCRecommendFriendRsp::kRecommendFieldNumber;
#endif  // !_MSC_VER

WCRecommendFriendRsp::WCRecommendFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCRecommendFriendRsp::InitAsDefaultInstance() {
}

WCRecommendFriendRsp::WCRecommendFriendRsp(const WCRecommendFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCRecommendFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCRecommendFriendRsp::~WCRecommendFriendRsp() {
  SharedDtor();
}

void WCRecommendFriendRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCRecommendFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCRecommendFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCRecommendFriendRsp_descriptor_;
}

const WCRecommendFriendRsp& WCRecommendFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCRecommendFriendRsp* WCRecommendFriendRsp::default_instance_ = NULL;

WCRecommendFriendRsp* WCRecommendFriendRsp::New() const {
  return new WCRecommendFriendRsp;
}

void WCRecommendFriendRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  recommend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCRecommendFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recommend;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo recommend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recommend;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCRecommendFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo recommend = 2;
  for (int i = 0; i < this->recommend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recommend(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCRecommendFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo recommend = 2;
  for (int i = 0; i < this->recommend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recommend(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCRecommendFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo recommend = 2;
  total_size += 1 * this->recommend_size();
  for (int i = 0; i < this->recommend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommend(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCRecommendFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCRecommendFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCRecommendFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCRecommendFriendRsp::MergeFrom(const WCRecommendFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommend_.MergeFrom(from.recommend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCRecommendFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCRecommendFriendRsp::CopyFrom(const WCRecommendFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCRecommendFriendRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WCRecommendFriendRsp::Swap(WCRecommendFriendRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    recommend_.Swap(&other->recommend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCRecommendFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCRecommendFriendRsp_descriptor_;
  metadata.reflection = WCRecommendFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGNotifyAddFriend::kCharIdFieldNumber;
const int WGNotifyAddFriend::kOperateTypeFieldNumber;
const int WGNotifyAddFriend::kAddNumFieldNumber;
const int WGNotifyAddFriend::kCurNumFieldNumber;
#endif  // !_MSC_VER

WGNotifyAddFriend::WGNotifyAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGNotifyAddFriend::InitAsDefaultInstance() {
}

WGNotifyAddFriend::WGNotifyAddFriend(const WGNotifyAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGNotifyAddFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  operate_type_ = 0u;
  addnum_ = 0u;
  curnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGNotifyAddFriend::~WGNotifyAddFriend() {
  SharedDtor();
}

void WGNotifyAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGNotifyAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGNotifyAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGNotifyAddFriend_descriptor_;
}

const WGNotifyAddFriend& WGNotifyAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WGNotifyAddFriend* WGNotifyAddFriend::default_instance_ = NULL;

WGNotifyAddFriend* WGNotifyAddFriend::New() const {
  return new WGNotifyAddFriend;
}

void WGNotifyAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    operate_type_ = 0u;
    addnum_ = 0u;
    curnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGNotifyAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_type;
        break;
      }

      // required uint32 operate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addNum;
        break;
      }

      // optional uint32 addNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curNum;
        break;
      }

      // optional uint32 curNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));
          set_has_curnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGNotifyAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // required uint32 operate_type = 2;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate_type(), output);
  }

  // optional uint32 addNum = 3;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addnum(), output);
  }

  // optional uint32 curNum = 4;
  if (has_curnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGNotifyAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // required uint32 operate_type = 2;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate_type(), target);
  }

  // optional uint32 addNum = 3;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addnum(), target);
  }

  // optional uint32 curNum = 4;
  if (has_curnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGNotifyAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 operate_type = 2;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // optional uint32 addNum = 3;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addnum());
    }

    // optional uint32 curNum = 4;
    if (has_curnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGNotifyAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGNotifyAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGNotifyAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGNotifyAddFriend::MergeFrom(const WGNotifyAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
    if (from.has_curnum()) {
      set_curnum(from.curnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGNotifyAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGNotifyAddFriend::CopyFrom(const WGNotifyAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGNotifyAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WGNotifyAddFriend::Swap(WGNotifyAddFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(addnum_, other->addnum_);
    std::swap(curnum_, other->curnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGNotifyAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGNotifyAddFriend_descriptor_;
  metadata.reflection = WGNotifyAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWAddHateReq::kSrcIDFieldNumber;
const int GWAddHateReq::kDstIDFieldNumber;
#endif  // !_MSC_VER

GWAddHateReq::GWAddHateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWAddHateReq::InitAsDefaultInstance() {
}

GWAddHateReq::GWAddHateReq(const GWAddHateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWAddHateReq::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWAddHateReq::~GWAddHateReq() {
  SharedDtor();
}

void GWAddHateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWAddHateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWAddHateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWAddHateReq_descriptor_;
}

const GWAddHateReq& GWAddHateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

GWAddHateReq* GWAddHateReq::default_instance_ = NULL;

GWAddHateReq* GWAddHateReq::New() const {
  return new GWAddHateReq;
}

void GWAddHateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWAddHateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // required uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWAddHateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWAddHateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWAddHateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // required uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWAddHateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWAddHateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWAddHateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWAddHateReq::MergeFrom(const GWAddHateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWAddHateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWAddHateReq::CopyFrom(const GWAddHateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWAddHateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GWAddHateReq::Swap(GWAddHateReq* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWAddHateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWAddHateReq_descriptor_;
  metadata.reflection = GWAddHateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWAddRecentReq::kSrcIDFieldNumber;
const int GWAddRecentReq::kDstIDFieldNumber;
const int GWAddRecentReq::kNTypeFieldNumber;
#endif  // !_MSC_VER

GWAddRecentReq::GWAddRecentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWAddRecentReq::InitAsDefaultInstance() {
}

GWAddRecentReq::GWAddRecentReq(const GWAddRecentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWAddRecentReq::SharedCtor() {
  _cached_size_ = 0;
  srcid_ = GOOGLE_ULONGLONG(0);
  dstid_ = GOOGLE_ULONGLONG(0);
  ntype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWAddRecentReq::~GWAddRecentReq() {
  SharedDtor();
}

void GWAddRecentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWAddRecentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWAddRecentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWAddRecentReq_descriptor_;
}

const GWAddRecentReq& GWAddRecentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

GWAddRecentReq* GWAddRecentReq::default_instance_ = NULL;

GWAddRecentReq* GWAddRecentReq::New() const {
  return new GWAddRecentReq;
}

void GWAddRecentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcid_ = GOOGLE_ULONGLONG(0);
    dstid_ = GOOGLE_ULONGLONG(0);
    ntype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWAddRecentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 srcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcid_)));
          set_has_srcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstID;
        break;
      }

      // required uint64 dstID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstid_)));
          set_has_dstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nType;
        break;
      }

      // optional uint32 nType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWAddRecentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->srcid(), output);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstid(), output);
  }

  // optional uint32 nType = 3;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ntype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWAddRecentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 srcID = 1;
  if (has_srcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->srcid(), target);
  }

  // required uint64 dstID = 2;
  if (has_dstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstid(), target);
  }

  // optional uint32 nType = 3;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ntype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWAddRecentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 srcID = 1;
    if (has_srcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcid());
    }

    // required uint64 dstID = 2;
    if (has_dstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstid());
    }

    // optional uint32 nType = 3;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ntype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWAddRecentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWAddRecentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWAddRecentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWAddRecentReq::MergeFrom(const GWAddRecentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcid()) {
      set_srcid(from.srcid());
    }
    if (from.has_dstid()) {
      set_dstid(from.dstid());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWAddRecentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWAddRecentReq::CopyFrom(const GWAddRecentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWAddRecentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GWAddRecentReq::Swap(GWAddRecentReq* other) {
  if (other != this) {
    std::swap(srcid_, other->srcid_);
    std::swap(dstid_, other->dstid_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWAddRecentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWAddRecentReq_descriptor_;
  metadata.reflection = GWAddRecentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiftGivingRecord::kNRecordIdFieldNumber;
const int GiftGivingRecord::kSNameFieldNumber;
const int GiftGivingRecord::kPlayerIdFieldNumber;
const int GiftGivingRecord::kItemIdFieldNumber;
const int GiftGivingRecord::kBThankFieldNumber;
const int GiftGivingRecord::kSendTypeFieldNumber;
#endif  // !_MSC_VER

GiftGivingRecord::GiftGivingRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiftGivingRecord::InitAsDefaultInstance() {
}

GiftGivingRecord::GiftGivingRecord(const GiftGivingRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiftGivingRecord::SharedCtor() {
  _cached_size_ = 0;
  nrecordid_ = 0u;
  sname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = GOOGLE_ULONGLONG(0);
  itemid_ = GOOGLE_ULONGLONG(0);
  bthank_ = false;
  sendtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftGivingRecord::~GiftGivingRecord() {
  SharedDtor();
}

void GiftGivingRecord::SharedDtor() {
  if (sname_ != &::google::protobuf::internal::kEmptyString) {
    delete sname_;
  }
  if (this != default_instance_) {
  }
}

void GiftGivingRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftGivingRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftGivingRecord_descriptor_;
}

const GiftGivingRecord& GiftGivingRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

GiftGivingRecord* GiftGivingRecord::default_instance_ = NULL;

GiftGivingRecord* GiftGivingRecord::New() const {
  return new GiftGivingRecord;
}

void GiftGivingRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nrecordid_ = 0u;
    if (has_sname()) {
      if (sname_ != &::google::protobuf::internal::kEmptyString) {
        sname_->clear();
      }
    }
    playerid_ = GOOGLE_ULONGLONG(0);
    itemid_ = GOOGLE_ULONGLONG(0);
    bthank_ = false;
    sendtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiftGivingRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nRecordId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrecordid_)));
          set_has_nrecordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sName;
        break;
      }

      // optional string sName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sname().data(), this->sname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bThank;
        break;
      }

      // optional bool bThank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bThank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bthank_)));
          set_has_bthank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sendType;
        break;
      }

      // optional uint32 sendType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendtype_)));
          set_has_sendtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftGivingRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nRecordId = 1;
  if (has_nrecordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nrecordid(), output);
  }

  // optional string sName = 2;
  if (has_sname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sname(), output);
  }

  // optional uint64 playerId = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  // optional uint64 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->itemid(), output);
  }

  // optional bool bThank = 5;
  if (has_bthank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bthank(), output);
  }

  // optional uint32 sendType = 6;
  if (has_sendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sendtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiftGivingRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nRecordId = 1;
  if (has_nrecordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nrecordid(), target);
  }

  // optional string sName = 2;
  if (has_sname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sname(), target);
  }

  // optional uint64 playerId = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  // optional uint64 itemId = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->itemid(), target);
  }

  // optional bool bThank = 5;
  if (has_bthank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bthank(), target);
  }

  // optional uint32 sendType = 6;
  if (has_sendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sendtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiftGivingRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nRecordId = 1;
    if (has_nrecordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nrecordid());
    }

    // optional string sName = 2;
    if (has_sname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sname());
    }

    // optional uint64 playerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint64 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional bool bThank = 5;
    if (has_bthank()) {
      total_size += 1 + 1;
    }

    // optional uint32 sendType = 6;
    if (has_sendtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftGivingRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiftGivingRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiftGivingRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiftGivingRecord::MergeFrom(const GiftGivingRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nrecordid()) {
      set_nrecordid(from.nrecordid());
    }
    if (from.has_sname()) {
      set_sname(from.sname());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_bthank()) {
      set_bthank(from.bthank());
    }
    if (from.has_sendtype()) {
      set_sendtype(from.sendtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiftGivingRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftGivingRecord::CopyFrom(const GiftGivingRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftGivingRecord::IsInitialized() const {

  return true;
}

void GiftGivingRecord::Swap(GiftGivingRecord* other) {
  if (other != this) {
    std::swap(nrecordid_, other->nrecordid_);
    std::swap(sname_, other->sname_);
    std::swap(playerid_, other->playerid_);
    std::swap(itemid_, other->itemid_);
    std::swap(bthank_, other->bthank_);
    std::swap(sendtype_, other->sendtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiftGivingRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiftGivingRecord_descriptor_;
  metadata.reflection = GiftGivingRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CWGetGiftGivingRecordReq::CWGetGiftGivingRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWGetGiftGivingRecordReq::InitAsDefaultInstance() {
}

CWGetGiftGivingRecordReq::CWGetGiftGivingRecordReq(const CWGetGiftGivingRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWGetGiftGivingRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWGetGiftGivingRecordReq::~CWGetGiftGivingRecordReq() {
  SharedDtor();
}

void CWGetGiftGivingRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWGetGiftGivingRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWGetGiftGivingRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWGetGiftGivingRecordReq_descriptor_;
}

const CWGetGiftGivingRecordReq& CWGetGiftGivingRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWGetGiftGivingRecordReq* CWGetGiftGivingRecordReq::default_instance_ = NULL;

CWGetGiftGivingRecordReq* CWGetGiftGivingRecordReq::New() const {
  return new CWGetGiftGivingRecordReq;
}

void CWGetGiftGivingRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWGetGiftGivingRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CWGetGiftGivingRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWGetGiftGivingRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWGetGiftGivingRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWGetGiftGivingRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWGetGiftGivingRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWGetGiftGivingRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWGetGiftGivingRecordReq::MergeFrom(const CWGetGiftGivingRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWGetGiftGivingRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWGetGiftGivingRecordReq::CopyFrom(const CWGetGiftGivingRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWGetGiftGivingRecordReq::IsInitialized() const {

  return true;
}

void CWGetGiftGivingRecordReq::Swap(CWGetGiftGivingRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWGetGiftGivingRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWGetGiftGivingRecordReq_descriptor_;
  metadata.reflection = CWGetGiftGivingRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCGetGiftGivingRecordRsp::kRetFieldNumber;
const int WCGetGiftGivingRecordRsp::kRecordsFieldNumber;
#endif  // !_MSC_VER

WCGetGiftGivingRecordRsp::WCGetGiftGivingRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCGetGiftGivingRecordRsp::InitAsDefaultInstance() {
}

WCGetGiftGivingRecordRsp::WCGetGiftGivingRecordRsp(const WCGetGiftGivingRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCGetGiftGivingRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCGetGiftGivingRecordRsp::~WCGetGiftGivingRecordRsp() {
  SharedDtor();
}

void WCGetGiftGivingRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCGetGiftGivingRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCGetGiftGivingRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCGetGiftGivingRecordRsp_descriptor_;
}

const WCGetGiftGivingRecordRsp& WCGetGiftGivingRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCGetGiftGivingRecordRsp* WCGetGiftGivingRecordRsp::default_instance_ = NULL;

WCGetGiftGivingRecordRsp* WCGetGiftGivingRecordRsp::New() const {
  return new WCGetGiftGivingRecordRsp;
}

void WCGetGiftGivingRecordRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCGetGiftGivingRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_records;
        break;
      }

      // repeated .proto_ff.GiftGivingRecord records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCGetGiftGivingRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.GiftGivingRecord records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCGetGiftGivingRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.GiftGivingRecord records = 2;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCGetGiftGivingRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .proto_ff.GiftGivingRecord records = 2;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCGetGiftGivingRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCGetGiftGivingRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCGetGiftGivingRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCGetGiftGivingRecordRsp::MergeFrom(const WCGetGiftGivingRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCGetGiftGivingRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCGetGiftGivingRecordRsp::CopyFrom(const WCGetGiftGivingRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCGetGiftGivingRecordRsp::IsInitialized() const {

  return true;
}

void WCGetGiftGivingRecordRsp::Swap(WCGetGiftGivingRecordRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCGetGiftGivingRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCGetGiftGivingRecordRsp_descriptor_;
  metadata.reflection = WCGetGiftGivingRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWGivingGiftReq::kItemIdFieldNumber;
const int CWGivingGiftReq::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CWGivingGiftReq::CWGivingGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWGivingGiftReq::InitAsDefaultInstance() {
}

CWGivingGiftReq::CWGivingGiftReq(const CWGivingGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWGivingGiftReq::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWGivingGiftReq::~CWGivingGiftReq() {
  SharedDtor();
}

void CWGivingGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWGivingGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWGivingGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWGivingGiftReq_descriptor_;
}

const CWGivingGiftReq& CWGivingGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

CWGivingGiftReq* CWGivingGiftReq::default_instance_ = NULL;

CWGivingGiftReq* CWGivingGiftReq::New() const {
  return new CWGivingGiftReq;
}

void CWGivingGiftReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWGivingGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWGivingGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWGivingGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWGivingGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWGivingGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWGivingGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWGivingGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWGivingGiftReq::MergeFrom(const CWGivingGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWGivingGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWGivingGiftReq::CopyFrom(const CWGivingGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWGivingGiftReq::IsInitialized() const {

  return true;
}

void CWGivingGiftReq::Swap(CWGivingGiftReq* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWGivingGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWGivingGiftReq_descriptor_;
  metadata.reflection = CWGivingGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCGivingGiftRsp::kRetFieldNumber;
const int WCGivingGiftRsp::kPlayerIdFieldNumber;
const int WCGivingGiftRsp::kClosenessFieldNumber;
const int WCGivingGiftRsp::kItemIdFieldNumber;
#endif  // !_MSC_VER

WCGivingGiftRsp::WCGivingGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCGivingGiftRsp::InitAsDefaultInstance() {
}

WCGivingGiftRsp::WCGivingGiftRsp(const WCGivingGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCGivingGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  closeness_ = GOOGLE_ULONGLONG(0);
  itemid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCGivingGiftRsp::~WCGivingGiftRsp() {
  SharedDtor();
}

void WCGivingGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCGivingGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCGivingGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCGivingGiftRsp_descriptor_;
}

const WCGivingGiftRsp& WCGivingGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCGivingGiftRsp* WCGivingGiftRsp::default_instance_ = NULL;

WCGivingGiftRsp* WCGivingGiftRsp::New() const {
  return new WCGivingGiftRsp;
}

void WCGivingGiftRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
    closeness_ = GOOGLE_ULONGLONG(0);
    itemid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCGivingGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional uint64 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_closeness;
        break;
      }

      // optional uint64 closeness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &closeness_)));
          set_has_closeness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCGivingGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // optional uint64 closeness = 3;
  if (has_closeness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->closeness(), output);
  }

  // optional uint64 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCGivingGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // optional uint64 closeness = 3;
  if (has_closeness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->closeness(), target);
  }

  // optional uint64 itemId = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCGivingGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional uint64 closeness = 3;
    if (has_closeness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->closeness());
    }

    // optional uint64 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCGivingGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCGivingGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCGivingGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCGivingGiftRsp::MergeFrom(const WCGivingGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_closeness()) {
      set_closeness(from.closeness());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCGivingGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCGivingGiftRsp::CopyFrom(const WCGivingGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCGivingGiftRsp::IsInitialized() const {

  return true;
}

void WCGivingGiftRsp::Swap(WCGivingGiftRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(playerid_, other->playerid_);
    std::swap(closeness_, other->closeness_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCGivingGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCGivingGiftRsp_descriptor_;
  metadata.reflection = WCGivingGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCGivingGiftNotice::kUserNameFieldNumber;
const int WCGivingGiftNotice::kItemIdFieldNumber;
#endif  // !_MSC_VER

WCGivingGiftNotice::WCGivingGiftNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCGivingGiftNotice::InitAsDefaultInstance() {
}

WCGivingGiftNotice::WCGivingGiftNotice(const WCGivingGiftNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCGivingGiftNotice::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCGivingGiftNotice::~WCGivingGiftNotice() {
  SharedDtor();
}

void WCGivingGiftNotice::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void WCGivingGiftNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCGivingGiftNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCGivingGiftNotice_descriptor_;
}

const WCGivingGiftNotice& WCGivingGiftNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCGivingGiftNotice* WCGivingGiftNotice::default_instance_ = NULL;

WCGivingGiftNotice* WCGivingGiftNotice::New() const {
  return new WCGivingGiftNotice;
}

void WCGivingGiftNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    itemid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCGivingGiftNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCGivingGiftNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional uint64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCGivingGiftNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional uint64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCGivingGiftNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCGivingGiftNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCGivingGiftNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCGivingGiftNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCGivingGiftNotice::MergeFrom(const WCGivingGiftNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCGivingGiftNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCGivingGiftNotice::CopyFrom(const WCGivingGiftNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCGivingGiftNotice::IsInitialized() const {

  return true;
}

void WCGivingGiftNotice::Swap(WCGivingGiftNotice* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCGivingGiftNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCGivingGiftNotice_descriptor_;
  metadata.reflection = WCGivingGiftNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCThankGiving::kNRecordIdFieldNumber;
#endif  // !_MSC_VER

WCThankGiving::WCThankGiving()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCThankGiving::InitAsDefaultInstance() {
}

WCThankGiving::WCThankGiving(const WCThankGiving& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCThankGiving::SharedCtor() {
  _cached_size_ = 0;
  nrecordid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCThankGiving::~WCThankGiving() {
  SharedDtor();
}

void WCThankGiving::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCThankGiving::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCThankGiving::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCThankGiving_descriptor_;
}

const WCThankGiving& WCThankGiving::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WCThankGiving* WCThankGiving::default_instance_ = NULL;

WCThankGiving* WCThankGiving::New() const {
  return new WCThankGiving;
}

void WCThankGiving::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nrecordid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCThankGiving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nRecordId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrecordid_)));
          set_has_nrecordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCThankGiving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nRecordId = 1;
  if (has_nrecordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nrecordid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCThankGiving::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nRecordId = 1;
  if (has_nrecordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nrecordid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCThankGiving::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nRecordId = 1;
    if (has_nrecordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nrecordid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCThankGiving::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCThankGiving* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCThankGiving*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCThankGiving::MergeFrom(const WCThankGiving& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nrecordid()) {
      set_nrecordid(from.nrecordid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCThankGiving::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCThankGiving::CopyFrom(const WCThankGiving& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCThankGiving::IsInitialized() const {

  return true;
}

void WCThankGiving::Swap(WCThankGiving* other) {
  if (other != this) {
    std::swap(nrecordid_, other->nrecordid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCThankGiving::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCThankGiving_descriptor_;
  metadata.reflection = WCThankGiving_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWGivingGiftReq::kSelfIdFieldNumber;
const int GWGivingGiftReq::kTargetIdFieldNumber;
const int GWGivingGiftReq::kItemIdFieldNumber;
const int GWGivingGiftReq::kUseItemNumFieldNumber;
const int GWGivingGiftReq::kUseDiamondFieldNumber;
const int GWGivingGiftReq::kUseBindDiamondFieldNumber;
#endif  // !_MSC_VER

GWGivingGiftReq::GWGivingGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWGivingGiftReq::InitAsDefaultInstance() {
}

GWGivingGiftReq::GWGivingGiftReq(const GWGivingGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWGivingGiftReq::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  itemid_ = GOOGLE_ULONGLONG(0);
  useitemnum_ = 0u;
  usediamond_ = GOOGLE_ULONGLONG(0);
  usebinddiamond_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWGivingGiftReq::~GWGivingGiftReq() {
  SharedDtor();
}

void GWGivingGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWGivingGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWGivingGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWGivingGiftReq_descriptor_;
}

const GWGivingGiftReq& GWGivingGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

GWGivingGiftReq* GWGivingGiftReq::default_instance_ = NULL;

GWGivingGiftReq* GWGivingGiftReq::New() const {
  return new GWGivingGiftReq;
}

void GWGivingGiftReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfid_ = GOOGLE_ULONGLONG(0);
    targetid_ = GOOGLE_ULONGLONG(0);
    itemid_ = GOOGLE_ULONGLONG(0);
    useitemnum_ = 0u;
    usediamond_ = GOOGLE_ULONGLONG(0);
    usebinddiamond_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWGivingGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 selfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &selfid_)));
          set_has_selfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // optional uint64 targetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useItemNum;
        break;
      }

      // optional uint32 useItemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useitemnum_)));
          set_has_useitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useDiamond;
        break;
      }

      // optional uint64 useDiamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usediamond_)));
          set_has_usediamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_useBindDiamond;
        break;
      }

      // optional uint64 useBindDiamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useBindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usebinddiamond_)));
          set_has_usebinddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWGivingGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 selfId = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->selfid(), output);
  }

  // optional uint64 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->targetid(), output);
  }

  // optional uint64 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->itemid(), output);
  }

  // optional uint32 useItemNum = 4;
  if (has_useitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->useitemnum(), output);
  }

  // optional uint64 useDiamond = 5;
  if (has_usediamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->usediamond(), output);
  }

  // optional uint64 useBindDiamond = 6;
  if (has_usebinddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->usebinddiamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWGivingGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 selfId = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->selfid(), target);
  }

  // optional uint64 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->targetid(), target);
  }

  // optional uint64 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->itemid(), target);
  }

  // optional uint32 useItemNum = 4;
  if (has_useitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->useitemnum(), target);
  }

  // optional uint64 useDiamond = 5;
  if (has_usediamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->usediamond(), target);
  }

  // optional uint64 useBindDiamond = 6;
  if (has_usebinddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->usebinddiamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWGivingGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 selfId = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->selfid());
    }

    // optional uint64 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint64 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 useItemNum = 4;
    if (has_useitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useitemnum());
    }

    // optional uint64 useDiamond = 5;
    if (has_usediamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usediamond());
    }

    // optional uint64 useBindDiamond = 6;
    if (has_usebinddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usebinddiamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWGivingGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWGivingGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWGivingGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWGivingGiftReq::MergeFrom(const GWGivingGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      set_selfid(from.selfid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_useitemnum()) {
      set_useitemnum(from.useitemnum());
    }
    if (from.has_usediamond()) {
      set_usediamond(from.usediamond());
    }
    if (from.has_usebinddiamond()) {
      set_usebinddiamond(from.usebinddiamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWGivingGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWGivingGiftReq::CopyFrom(const GWGivingGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWGivingGiftReq::IsInitialized() const {

  return true;
}

void GWGivingGiftReq::Swap(GWGivingGiftReq* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(targetid_, other->targetid_);
    std::swap(itemid_, other->itemid_);
    std::swap(useitemnum_, other->useitemnum_);
    std::swap(usediamond_, other->usediamond_);
    std::swap(usebinddiamond_, other->usebinddiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWGivingGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWGivingGiftReq_descriptor_;
  metadata.reflection = GWGivingGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WGGivingGiftErrorNotice::kSelfIdFieldNumber;
const int WGGivingGiftErrorNotice::kItemIdFieldNumber;
const int WGGivingGiftErrorNotice::kUseItemNumFieldNumber;
const int WGGivingGiftErrorNotice::kUseDiamondFieldNumber;
const int WGGivingGiftErrorNotice::kUseBindDiamondFieldNumber;
#endif  // !_MSC_VER

WGGivingGiftErrorNotice::WGGivingGiftErrorNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WGGivingGiftErrorNotice::InitAsDefaultInstance() {
}

WGGivingGiftErrorNotice::WGGivingGiftErrorNotice(const WGGivingGiftErrorNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WGGivingGiftErrorNotice::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = GOOGLE_ULONGLONG(0);
  itemid_ = GOOGLE_ULONGLONG(0);
  useitemnum_ = 0u;
  usediamond_ = GOOGLE_ULONGLONG(0);
  usebinddiamond_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WGGivingGiftErrorNotice::~WGGivingGiftErrorNotice() {
  SharedDtor();
}

void WGGivingGiftErrorNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WGGivingGiftErrorNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WGGivingGiftErrorNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WGGivingGiftErrorNotice_descriptor_;
}

const WGGivingGiftErrorNotice& WGGivingGiftErrorNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Relation_2eproto();
  return *default_instance_;
}

WGGivingGiftErrorNotice* WGGivingGiftErrorNotice::default_instance_ = NULL;

WGGivingGiftErrorNotice* WGGivingGiftErrorNotice::New() const {
  return new WGGivingGiftErrorNotice;
}

void WGGivingGiftErrorNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfid_ = GOOGLE_ULONGLONG(0);
    itemid_ = GOOGLE_ULONGLONG(0);
    useitemnum_ = 0u;
    usediamond_ = GOOGLE_ULONGLONG(0);
    usebinddiamond_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WGGivingGiftErrorNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 selfId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &selfid_)));
          set_has_selfid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useItemNum;
        break;
      }

      // optional uint32 useItemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useitemnum_)));
          set_has_useitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useDiamond;
        break;
      }

      // optional uint64 useDiamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usediamond_)));
          set_has_usediamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useBindDiamond;
        break;
      }

      // optional uint64 useBindDiamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useBindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usebinddiamond_)));
          set_has_usebinddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WGGivingGiftErrorNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 selfId = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->selfid(), output);
  }

  // optional uint64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 useItemNum = 3;
  if (has_useitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->useitemnum(), output);
  }

  // optional uint64 useDiamond = 4;
  if (has_usediamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->usediamond(), output);
  }

  // optional uint64 useBindDiamond = 5;
  if (has_usebinddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->usebinddiamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WGGivingGiftErrorNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 selfId = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->selfid(), target);
  }

  // optional uint64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 useItemNum = 3;
  if (has_useitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->useitemnum(), target);
  }

  // optional uint64 useDiamond = 4;
  if (has_usediamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->usediamond(), target);
  }

  // optional uint64 useBindDiamond = 5;
  if (has_usebinddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->usebinddiamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WGGivingGiftErrorNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 selfId = 1;
    if (has_selfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->selfid());
    }

    // optional uint64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 useItemNum = 3;
    if (has_useitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useitemnum());
    }

    // optional uint64 useDiamond = 4;
    if (has_usediamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usediamond());
    }

    // optional uint64 useBindDiamond = 5;
    if (has_usebinddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usebinddiamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WGGivingGiftErrorNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WGGivingGiftErrorNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WGGivingGiftErrorNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WGGivingGiftErrorNotice::MergeFrom(const WGGivingGiftErrorNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      set_selfid(from.selfid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_useitemnum()) {
      set_useitemnum(from.useitemnum());
    }
    if (from.has_usediamond()) {
      set_usediamond(from.usediamond());
    }
    if (from.has_usebinddiamond()) {
      set_usebinddiamond(from.usebinddiamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WGGivingGiftErrorNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WGGivingGiftErrorNotice::CopyFrom(const WGGivingGiftErrorNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WGGivingGiftErrorNotice::IsInitialized() const {

  return true;
}

void WGGivingGiftErrorNotice::Swap(WGGivingGiftErrorNotice* other) {
  if (other != this) {
    std::swap(selfid_, other->selfid_);
    std::swap(itemid_, other->itemid_);
    std::swap(useitemnum_, other->useitemnum_);
    std::swap(usediamond_, other->usediamond_);
    std::swap(usebinddiamond_, other->usebinddiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WGGivingGiftErrorNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WGGivingGiftErrorNotice_descriptor_;
  metadata.reflection = WGGivingGiftErrorNotice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
