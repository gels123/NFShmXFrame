// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#ifndef PROTOBUF_Chat_2eproto__INCLUDED
#define PROTOBUF_Chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "common_logic.pb.h"
#include "Com.pb.h"
#include "ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Chat_2eproto();
void protobuf_AssignDesc_Chat_2eproto();
void protobuf_ShutdownFile_Chat_2eproto();

class ChatContentInfo;
class CGChatMsgReq;
class GCChatMsgRsp;
class GCSystemChatMsgNotify;
class CWAskOfflineMsgReq;
class WCAskOfflineMsgRsp;
class CWIntrvalAskOfflineMsgReq;
class OfflineMsg;
class WCIntrvalAskOfflineMsgRsp;
class GWChatMsgReq;
class GWSysChatMsgNotify;
class TransChatCrossServerProto;

enum CHAT_MSG_TYPE {
  CHAT_MSG_TYPE_NONE = 0,
  CHAT_MSG_TYPE_FIREWORK = 1
};
bool CHAT_MSG_TYPE_IsValid(int value);
const CHAT_MSG_TYPE CHAT_MSG_TYPE_MIN = CHAT_MSG_TYPE_NONE;
const CHAT_MSG_TYPE CHAT_MSG_TYPE_MAX = CHAT_MSG_TYPE_FIREWORK;
const int CHAT_MSG_TYPE_ARRAYSIZE = CHAT_MSG_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHAT_MSG_TYPE_descriptor();
inline const ::std::string& CHAT_MSG_TYPE_Name(CHAT_MSG_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHAT_MSG_TYPE_descriptor(), value);
}
inline bool CHAT_MSG_TYPE_Parse(
    const ::std::string& name, CHAT_MSG_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHAT_MSG_TYPE>(
    CHAT_MSG_TYPE_descriptor(), name, value);
}
// ===================================================================

class ChatContentInfo : public ::google::protobuf::Message {
 public:
  ChatContentInfo();
  virtual ~ChatContentInfo();

  ChatContentInfo(const ChatContentInfo& from);

  inline ChatContentInfo& operator=(const ChatContentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatContentInfo& default_instance();

  void Swap(ChatContentInfo* other);

  // implements Message ----------------------------------------------

  ChatContentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatContentInfo& from);
  void MergeFrom(const ChatContentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string describes = 1;
  inline bool has_describes() const;
  inline void clear_describes();
  static const int kDescribesFieldNumber = 1;
  inline const ::std::string& describes() const;
  inline void set_describes(const ::std::string& value);
  inline void set_describes(const char* value);
  inline void set_describes(const char* value, size_t size);
  inline ::std::string* mutable_describes();
  inline ::std::string* release_describes();
  inline void set_allocated_describes(::std::string* describes);

  // repeated .proto_ff.ItemProtoInfo itemInfo = 2;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 2;
  inline const ::proto_ff::ItemProtoInfo& iteminfo(int index) const;
  inline ::proto_ff::ItemProtoInfo* mutable_iteminfo(int index);
  inline ::proto_ff::ItemProtoInfo* add_iteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
      iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
      mutable_iteminfo();

  // optional int64 hornid = 3;
  inline bool has_hornid() const;
  inline void clear_hornid();
  static const int kHornidFieldNumber = 3;
  inline ::google::protobuf::int64 hornid() const;
  inline void set_hornid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ChatContentInfo)
 private:
  inline void set_has_describes();
  inline void clear_has_describes();
  inline void set_has_hornid();
  inline void clear_has_hornid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* describes_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo > iteminfo_;
  ::google::protobuf::int64 hornid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static ChatContentInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGChatMsgReq : public ::google::protobuf::Message {
 public:
  CGChatMsgReq();
  virtual ~CGChatMsgReq();

  CGChatMsgReq(const CGChatMsgReq& from);

  inline CGChatMsgReq& operator=(const CGChatMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGChatMsgReq& default_instance();

  void Swap(CGChatMsgReq* other);

  // implements Message ----------------------------------------------

  CGChatMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGChatMsgReq& from);
  void MergeFrom(const CGChatMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional .proto_ff.ChatContentInfo chatContent = 2;
  inline bool has_chatcontent() const;
  inline void clear_chatcontent();
  static const int kChatContentFieldNumber = 2;
  inline const ::proto_ff::ChatContentInfo& chatcontent() const;
  inline ::proto_ff::ChatContentInfo* mutable_chatcontent();
  inline ::proto_ff::ChatContentInfo* release_chatcontent();
  inline void set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent);

  // optional uint64 targetId = 3;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional uint64 msgType = 4;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 4;
  inline ::google::protobuf::uint64 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CGChatMsgReq)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_chatcontent();
  inline void clear_has_chatcontent();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::ChatContentInfo* chatcontent_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint64 msgtype_;
  ::google::protobuf::uint32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static CGChatMsgReq* default_instance_;
};
// -------------------------------------------------------------------

class GCChatMsgRsp : public ::google::protobuf::Message {
 public:
  GCChatMsgRsp();
  virtual ~GCChatMsgRsp();

  GCChatMsgRsp(const GCChatMsgRsp& from);

  inline GCChatMsgRsp& operator=(const GCChatMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCChatMsgRsp& default_instance();

  void Swap(GCChatMsgRsp* other);

  // implements Message ----------------------------------------------

  GCChatMsgRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCChatMsgRsp& from);
  void MergeFrom(const GCChatMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
  inline bool has_fromplayerinfo() const;
  inline void clear_fromplayerinfo();
  static const int kFromPlayerInfoFieldNumber = 2;
  inline const ::proto_ff::RolePlayerMiniInfo& fromplayerinfo() const;
  inline ::proto_ff::RolePlayerMiniInfo* mutable_fromplayerinfo();
  inline ::proto_ff::RolePlayerMiniInfo* release_fromplayerinfo();
  inline void set_allocated_fromplayerinfo(::proto_ff::RolePlayerMiniInfo* fromplayerinfo);

  // optional uint64 msgType = 3;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 3;
  inline ::google::protobuf::uint64 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint64 value);

  // required .proto_ff.ChatContentInfo chatContent = 4;
  inline bool has_chatcontent() const;
  inline void clear_chatcontent();
  static const int kChatContentFieldNumber = 4;
  inline const ::proto_ff::ChatContentInfo& chatcontent() const;
  inline ::proto_ff::ChatContentInfo* mutable_chatcontent();
  inline ::proto_ff::ChatContentInfo* release_chatcontent();
  inline void set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent);

  // optional uint64 time_tick = 5;
  inline bool has_time_tick() const;
  inline void clear_time_tick();
  static const int kTimeTickFieldNumber = 5;
  inline ::google::protobuf::uint64 time_tick() const;
  inline void set_time_tick(::google::protobuf::uint64 value);

  // optional uint32 ret = 6;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 6;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 msgVal = 7;
  inline bool has_msgval() const;
  inline void clear_msgval();
  static const int kMsgValFieldNumber = 7;
  inline ::google::protobuf::uint64 msgval() const;
  inline void set_msgval(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GCChatMsgRsp)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_fromplayerinfo();
  inline void clear_has_fromplayerinfo();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_chatcontent();
  inline void clear_has_chatcontent();
  inline void set_has_time_tick();
  inline void clear_has_time_tick();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_msgval();
  inline void clear_has_msgval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RolePlayerMiniInfo* fromplayerinfo_;
  ::google::protobuf::uint64 msgtype_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 ret_;
  ::proto_ff::ChatContentInfo* chatcontent_;
  ::google::protobuf::uint64 time_tick_;
  ::google::protobuf::uint64 msgval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static GCChatMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class GCSystemChatMsgNotify : public ::google::protobuf::Message {
 public:
  GCSystemChatMsgNotify();
  virtual ~GCSystemChatMsgNotify();

  GCSystemChatMsgNotify(const GCSystemChatMsgNotify& from);

  inline GCSystemChatMsgNotify& operator=(const GCSystemChatMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSystemChatMsgNotify& default_instance();

  void Swap(GCSystemChatMsgNotify* other);

  // implements Message ----------------------------------------------

  GCSystemChatMsgNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSystemChatMsgNotify& from);
  void MergeFrom(const GCSystemChatMsgNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint64 msgType = 2;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  inline ::google::protobuf::uint64 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint64 value);

  // repeated .proto_ff.RolePlayerMiniInfo players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline const ::proto_ff::RolePlayerMiniInfo& players(int index) const;
  inline ::proto_ff::RolePlayerMiniInfo* mutable_players(int index);
  inline ::proto_ff::RolePlayerMiniInfo* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >*
      mutable_players();

  // repeated string text = 4;
  inline int text_size() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text(int index) const;
  inline ::std::string* mutable_text(int index);
  inline void set_text(int index, const ::std::string& value);
  inline void set_text(int index, const char* value);
  inline void set_text(int index, const char* value, size_t size);
  inline ::std::string* add_text();
  inline void add_text(const ::std::string& value);
  inline void add_text(const char* value);
  inline void add_text(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& text() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_text();

  // repeated uint64 parmas = 5;
  inline int parmas_size() const;
  inline void clear_parmas();
  static const int kParmasFieldNumber = 5;
  inline ::google::protobuf::uint64 parmas(int index) const;
  inline void set_parmas(int index, ::google::protobuf::uint64 value);
  inline void add_parmas(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      parmas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_parmas();

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 rumorCount = 7;
  inline bool has_rumorcount() const;
  inline void clear_rumorcount();
  static const int kRumorCountFieldNumber = 7;
  inline ::google::protobuf::uint32 rumorcount() const;
  inline void set_rumorcount(::google::protobuf::uint32 value);

  // repeated .proto_ff.ItemProtoInfo items = 8;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 8;
  inline const ::proto_ff::ItemProtoInfo& items(int index) const;
  inline ::proto_ff::ItemProtoInfo* mutable_items(int index);
  inline ::proto_ff::ItemProtoInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:proto_ff.GCSystemChatMsgNotify)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_rumorcount();
  inline void clear_has_rumorcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 msgtype_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo > players_;
  ::google::protobuf::RepeatedPtrField< ::std::string> text_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 rumorcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > parmas_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static GCSystemChatMsgNotify* default_instance_;
};
// -------------------------------------------------------------------

class CWAskOfflineMsgReq : public ::google::protobuf::Message {
 public:
  CWAskOfflineMsgReq();
  virtual ~CWAskOfflineMsgReq();

  CWAskOfflineMsgReq(const CWAskOfflineMsgReq& from);

  inline CWAskOfflineMsgReq& operator=(const CWAskOfflineMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CWAskOfflineMsgReq& default_instance();

  void Swap(CWAskOfflineMsgReq* other);

  // implements Message ----------------------------------------------

  CWAskOfflineMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CWAskOfflineMsgReq& from);
  void MergeFrom(const CWAskOfflineMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CWAskOfflineMsgReq)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static CWAskOfflineMsgReq* default_instance_;
};
// -------------------------------------------------------------------

class WCAskOfflineMsgRsp : public ::google::protobuf::Message {
 public:
  WCAskOfflineMsgRsp();
  virtual ~WCAskOfflineMsgRsp();

  WCAskOfflineMsgRsp(const WCAskOfflineMsgRsp& from);

  inline WCAskOfflineMsgRsp& operator=(const WCAskOfflineMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WCAskOfflineMsgRsp& default_instance();

  void Swap(WCAskOfflineMsgRsp* other);

  // implements Message ----------------------------------------------

  WCAskOfflineMsgRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WCAskOfflineMsgRsp& from);
  void MergeFrom(const WCAskOfflineMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msgSize = 1;
  inline bool has_msgsize() const;
  inline void clear_msgsize();
  static const int kMsgSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 msgsize() const;
  inline void set_msgsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.WCAskOfflineMsgRsp)
 private:
  inline void set_has_msgsize();
  inline void clear_has_msgsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 msgsize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static WCAskOfflineMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class CWIntrvalAskOfflineMsgReq : public ::google::protobuf::Message {
 public:
  CWIntrvalAskOfflineMsgReq();
  virtual ~CWIntrvalAskOfflineMsgReq();

  CWIntrvalAskOfflineMsgReq(const CWIntrvalAskOfflineMsgReq& from);

  inline CWIntrvalAskOfflineMsgReq& operator=(const CWIntrvalAskOfflineMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CWIntrvalAskOfflineMsgReq& default_instance();

  void Swap(CWIntrvalAskOfflineMsgReq* other);

  // implements Message ----------------------------------------------

  CWIntrvalAskOfflineMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CWIntrvalAskOfflineMsgReq& from);
  void MergeFrom(const CWIntrvalAskOfflineMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CWIntrvalAskOfflineMsgReq)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static CWIntrvalAskOfflineMsgReq* default_instance_;
};
// -------------------------------------------------------------------

class OfflineMsg : public ::google::protobuf::Message {
 public:
  OfflineMsg();
  virtual ~OfflineMsg();

  OfflineMsg(const OfflineMsg& from);

  inline OfflineMsg& operator=(const OfflineMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineMsg& default_instance();

  void Swap(OfflineMsg* other);

  // implements Message ----------------------------------------------

  OfflineMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineMsg& from);
  void MergeFrom(const OfflineMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.RolePlayerMiniInfo playerInfo = 1;
  inline bool has_playerinfo() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::proto_ff::RolePlayerMiniInfo& playerinfo() const;
  inline ::proto_ff::RolePlayerMiniInfo* mutable_playerinfo();
  inline ::proto_ff::RolePlayerMiniInfo* release_playerinfo();
  inline void set_allocated_playerinfo(::proto_ff::RolePlayerMiniInfo* playerinfo);

  // required .proto_ff.ChatContentInfo chatContent = 2;
  inline bool has_chatcontent() const;
  inline void clear_chatcontent();
  static const int kChatContentFieldNumber = 2;
  inline const ::proto_ff::ChatContentInfo& chatcontent() const;
  inline ::proto_ff::ChatContentInfo* mutable_chatcontent();
  inline ::proto_ff::ChatContentInfo* release_chatcontent();
  inline void set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent);

  // optional uint64 sendTime = 3;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.OfflineMsg)
 private:
  inline void set_has_playerinfo();
  inline void clear_has_playerinfo();
  inline void set_has_chatcontent();
  inline void clear_has_chatcontent();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RolePlayerMiniInfo* playerinfo_;
  ::proto_ff::ChatContentInfo* chatcontent_;
  ::google::protobuf::uint64 sendtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static OfflineMsg* default_instance_;
};
// -------------------------------------------------------------------

class WCIntrvalAskOfflineMsgRsp : public ::google::protobuf::Message {
 public:
  WCIntrvalAskOfflineMsgRsp();
  virtual ~WCIntrvalAskOfflineMsgRsp();

  WCIntrvalAskOfflineMsgRsp(const WCIntrvalAskOfflineMsgRsp& from);

  inline WCIntrvalAskOfflineMsgRsp& operator=(const WCIntrvalAskOfflineMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WCIntrvalAskOfflineMsgRsp& default_instance();

  void Swap(WCIntrvalAskOfflineMsgRsp* other);

  // implements Message ----------------------------------------------

  WCIntrvalAskOfflineMsgRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WCIntrvalAskOfflineMsgRsp& from);
  void MergeFrom(const WCIntrvalAskOfflineMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.OfflineMsg offlineMsgList = 1;
  inline int offlinemsglist_size() const;
  inline void clear_offlinemsglist();
  static const int kOfflineMsgListFieldNumber = 1;
  inline const ::proto_ff::OfflineMsg& offlinemsglist(int index) const;
  inline ::proto_ff::OfflineMsg* mutable_offlinemsglist(int index);
  inline ::proto_ff::OfflineMsg* add_offlinemsglist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::OfflineMsg >&
      offlinemsglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::OfflineMsg >*
      mutable_offlinemsglist();

  // @@protoc_insertion_point(class_scope:proto_ff.WCIntrvalAskOfflineMsgRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::OfflineMsg > offlinemsglist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static WCIntrvalAskOfflineMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class GWChatMsgReq : public ::google::protobuf::Message {
 public:
  GWChatMsgReq();
  virtual ~GWChatMsgReq();

  GWChatMsgReq(const GWChatMsgReq& from);

  inline GWChatMsgReq& operator=(const GWChatMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GWChatMsgReq& default_instance();

  void Swap(GWChatMsgReq* other);

  // implements Message ----------------------------------------------

  GWChatMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GWChatMsgReq& from);
  void MergeFrom(const GWChatMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::proto_ff::CHAT_CHANNEL channel() const;
  inline void set_channel(::proto_ff::CHAT_CHANNEL value);

  // required .proto_ff.ChatContentInfo chatContent = 2;
  inline bool has_chatcontent() const;
  inline void clear_chatcontent();
  static const int kChatContentFieldNumber = 2;
  inline const ::proto_ff::ChatContentInfo& chatcontent() const;
  inline ::proto_ff::ChatContentInfo* mutable_chatcontent();
  inline ::proto_ff::ChatContentInfo* release_chatcontent();
  inline void set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent);

  // optional uint64 fromId = 3;
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromIdFieldNumber = 3;
  inline ::google::protobuf::uint64 fromid() const;
  inline void set_fromid(::google::protobuf::uint64 value);

  // optional uint64 targetId = 4;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional uint64 msgType = 5;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 5;
  inline ::google::protobuf::uint64 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint64 value);

  // optional uint64 msgVal = 6;
  inline bool has_msgval() const;
  inline void clear_msgval();
  static const int kMsgValFieldNumber = 6;
  inline ::google::protobuf::uint64 msgval() const;
  inline void set_msgval(::google::protobuf::uint64 value);

  // repeated uint64 cid_lst = 7;
  inline int cid_lst_size() const;
  inline void clear_cid_lst();
  static const int kCidLstFieldNumber = 7;
  inline ::google::protobuf::uint64 cid_lst(int index) const;
  inline void set_cid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.GWChatMsgReq)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_chatcontent();
  inline void clear_has_chatcontent();
  inline void set_has_fromid();
  inline void clear_has_fromid();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_msgval();
  inline void clear_has_msgval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::ChatContentInfo* chatcontent_;
  ::google::protobuf::uint64 fromid_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint64 msgtype_;
  ::google::protobuf::uint64 msgval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst_;
  int channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static GWChatMsgReq* default_instance_;
};
// -------------------------------------------------------------------

class GWSysChatMsgNotify : public ::google::protobuf::Message {
 public:
  GWSysChatMsgNotify();
  virtual ~GWSysChatMsgNotify();

  GWSysChatMsgNotify(const GWSysChatMsgNotify& from);

  inline GWSysChatMsgNotify& operator=(const GWSysChatMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GWSysChatMsgNotify& default_instance();

  void Swap(GWSysChatMsgNotify* other);

  // implements Message ----------------------------------------------

  GWSysChatMsgNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GWSysChatMsgNotify& from);
  void MergeFrom(const GWSysChatMsgNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::proto_ff::CHAT_CHANNEL channel() const;
  inline void set_channel(::proto_ff::CHAT_CHANNEL value);

  // optional uint64 msgType = 2;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  inline ::google::protobuf::uint64 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint64 value);

  // repeated .proto_ff.RolePlayerMiniInfo players = 3;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 3;
  inline const ::proto_ff::RolePlayerMiniInfo& players(int index) const;
  inline ::proto_ff::RolePlayerMiniInfo* mutable_players(int index);
  inline ::proto_ff::RolePlayerMiniInfo* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >*
      mutable_players();

  // repeated string text = 4;
  inline int text_size() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text(int index) const;
  inline ::std::string* mutable_text(int index);
  inline void set_text(int index, const ::std::string& value);
  inline void set_text(int index, const char* value);
  inline void set_text(int index, const char* value, size_t size);
  inline ::std::string* add_text();
  inline void add_text(const ::std::string& value);
  inline void add_text(const char* value);
  inline void add_text(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& text() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_text();

  // repeated uint64 parmas = 5;
  inline int parmas_size() const;
  inline void clear_parmas();
  static const int kParmasFieldNumber = 5;
  inline ::google::protobuf::uint64 parmas(int index) const;
  inline void set_parmas(int index, ::google::protobuf::uint64 value);
  inline void add_parmas(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      parmas() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_parmas();

  // optional uint64 extraid = 6;
  inline bool has_extraid() const;
  inline void clear_extraid();
  static const int kExtraidFieldNumber = 6;
  inline ::google::protobuf::uint64 extraid() const;
  inline void set_extraid(::google::protobuf::uint64 value);

  // repeated .proto_ff.ItemProtoInfo items = 7;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 7;
  inline const ::proto_ff::ItemProtoInfo& items(int index) const;
  inline ::proto_ff::ItemProtoInfo* mutable_items(int index);
  inline ::proto_ff::ItemProtoInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:proto_ff.GWSysChatMsgNotify)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_extraid();
  inline void clear_has_extraid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 msgtype_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo > players_;
  ::google::protobuf::RepeatedPtrField< ::std::string> text_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > parmas_;
  ::google::protobuf::uint64 extraid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo > items_;
  int channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static GWSysChatMsgNotify* default_instance_;
};
// -------------------------------------------------------------------

class TransChatCrossServerProto : public ::google::protobuf::Message {
 public:
  TransChatCrossServerProto();
  virtual ~TransChatCrossServerProto();

  TransChatCrossServerProto(const TransChatCrossServerProto& from);

  inline TransChatCrossServerProto& operator=(const TransChatCrossServerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransChatCrossServerProto& default_instance();

  void Swap(TransChatCrossServerProto* other);

  // implements Message ----------------------------------------------

  TransChatCrossServerProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransChatCrossServerProto& from);
  void MergeFrom(const TransChatCrossServerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::proto_ff::CHAT_CHANNEL channel() const;
  inline void set_channel(::proto_ff::CHAT_CHANNEL value);

  // required .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
  inline bool has_fromplayerinfo() const;
  inline void clear_fromplayerinfo();
  static const int kFromPlayerInfoFieldNumber = 2;
  inline const ::proto_ff::RolePlayerMiniInfo& fromplayerinfo() const;
  inline ::proto_ff::RolePlayerMiniInfo* mutable_fromplayerinfo();
  inline ::proto_ff::RolePlayerMiniInfo* release_fromplayerinfo();
  inline void set_allocated_fromplayerinfo(::proto_ff::RolePlayerMiniInfo* fromplayerinfo);

  // required .proto_ff.ChatContentInfo chatContent = 3;
  inline bool has_chatcontent() const;
  inline void clear_chatcontent();
  static const int kChatContentFieldNumber = 3;
  inline const ::proto_ff::ChatContentInfo& chatcontent() const;
  inline ::proto_ff::ChatContentInfo* mutable_chatcontent();
  inline ::proto_ff::ChatContentInfo* release_chatcontent();
  inline void set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent);

  // repeated uint64 toPlayers = 4;
  inline int toplayers_size() const;
  inline void clear_toplayers();
  static const int kToPlayersFieldNumber = 4;
  inline ::google::protobuf::uint64 toplayers(int index) const;
  inline void set_toplayers(int index, ::google::protobuf::uint64 value);
  inline void add_toplayers(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      toplayers() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_toplayers();

  // @@protoc_insertion_point(class_scope:proto_ff.TransChatCrossServerProto)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_fromplayerinfo();
  inline void clear_has_fromplayerinfo();
  inline void set_has_chatcontent();
  inline void clear_has_chatcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RolePlayerMiniInfo* fromplayerinfo_;
  ::proto_ff::ChatContentInfo* chatcontent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > toplayers_;
  int channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Chat_2eproto();
  friend void protobuf_AssignDesc_Chat_2eproto();
  friend void protobuf_ShutdownFile_Chat_2eproto();

  void InitAsDefaultInstance();
  static TransChatCrossServerProto* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatContentInfo

// required string describes = 1;
inline bool ChatContentInfo::has_describes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatContentInfo::set_has_describes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatContentInfo::clear_has_describes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatContentInfo::clear_describes() {
  if (describes_ != &::google::protobuf::internal::kEmptyString) {
    describes_->clear();
  }
  clear_has_describes();
}
inline const ::std::string& ChatContentInfo::describes() const {
  return *describes_;
}
inline void ChatContentInfo::set_describes(const ::std::string& value) {
  set_has_describes();
  if (describes_ == &::google::protobuf::internal::kEmptyString) {
    describes_ = new ::std::string;
  }
  describes_->assign(value);
}
inline void ChatContentInfo::set_describes(const char* value) {
  set_has_describes();
  if (describes_ == &::google::protobuf::internal::kEmptyString) {
    describes_ = new ::std::string;
  }
  describes_->assign(value);
}
inline void ChatContentInfo::set_describes(const char* value, size_t size) {
  set_has_describes();
  if (describes_ == &::google::protobuf::internal::kEmptyString) {
    describes_ = new ::std::string;
  }
  describes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatContentInfo::mutable_describes() {
  set_has_describes();
  if (describes_ == &::google::protobuf::internal::kEmptyString) {
    describes_ = new ::std::string;
  }
  return describes_;
}
inline ::std::string* ChatContentInfo::release_describes() {
  clear_has_describes();
  if (describes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = describes_;
    describes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatContentInfo::set_allocated_describes(::std::string* describes) {
  if (describes_ != &::google::protobuf::internal::kEmptyString) {
    delete describes_;
  }
  if (describes) {
    set_has_describes();
    describes_ = describes;
  } else {
    clear_has_describes();
    describes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.ItemProtoInfo itemInfo = 2;
inline int ChatContentInfo::iteminfo_size() const {
  return iteminfo_.size();
}
inline void ChatContentInfo::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::proto_ff::ItemProtoInfo& ChatContentInfo::iteminfo(int index) const {
  return iteminfo_.Get(index);
}
inline ::proto_ff::ItemProtoInfo* ChatContentInfo::mutable_iteminfo(int index) {
  return iteminfo_.Mutable(index);
}
inline ::proto_ff::ItemProtoInfo* ChatContentInfo::add_iteminfo() {
  return iteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
ChatContentInfo::iteminfo() const {
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
ChatContentInfo::mutable_iteminfo() {
  return &iteminfo_;
}

// optional int64 hornid = 3;
inline bool ChatContentInfo::has_hornid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatContentInfo::set_has_hornid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatContentInfo::clear_has_hornid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatContentInfo::clear_hornid() {
  hornid_ = GOOGLE_LONGLONG(0);
  clear_has_hornid();
}
inline ::google::protobuf::int64 ChatContentInfo::hornid() const {
  return hornid_;
}
inline void ChatContentInfo::set_hornid(::google::protobuf::int64 value) {
  set_has_hornid();
  hornid_ = value;
}

// -------------------------------------------------------------------

// CGChatMsgReq

// optional uint32 channel = 1;
inline bool CGChatMsgReq::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGChatMsgReq::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGChatMsgReq::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGChatMsgReq::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 CGChatMsgReq::channel() const {
  return channel_;
}
inline void CGChatMsgReq::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// optional .proto_ff.ChatContentInfo chatContent = 2;
inline bool CGChatMsgReq::has_chatcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGChatMsgReq::set_has_chatcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGChatMsgReq::clear_has_chatcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGChatMsgReq::clear_chatcontent() {
  if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
  clear_has_chatcontent();
}
inline const ::proto_ff::ChatContentInfo& CGChatMsgReq::chatcontent() const {
  return chatcontent_ != NULL ? *chatcontent_ : *default_instance_->chatcontent_;
}
inline ::proto_ff::ChatContentInfo* CGChatMsgReq::mutable_chatcontent() {
  set_has_chatcontent();
  if (chatcontent_ == NULL) chatcontent_ = new ::proto_ff::ChatContentInfo;
  return chatcontent_;
}
inline ::proto_ff::ChatContentInfo* CGChatMsgReq::release_chatcontent() {
  clear_has_chatcontent();
  ::proto_ff::ChatContentInfo* temp = chatcontent_;
  chatcontent_ = NULL;
  return temp;
}
inline void CGChatMsgReq::set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent) {
  delete chatcontent_;
  chatcontent_ = chatcontent;
  if (chatcontent) {
    set_has_chatcontent();
  } else {
    clear_has_chatcontent();
  }
}

// optional uint64 targetId = 3;
inline bool CGChatMsgReq::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGChatMsgReq::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGChatMsgReq::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGChatMsgReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 CGChatMsgReq::targetid() const {
  return targetid_;
}
inline void CGChatMsgReq::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
}

// optional uint64 msgType = 4;
inline bool CGChatMsgReq::has_msgtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGChatMsgReq::set_has_msgtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGChatMsgReq::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGChatMsgReq::clear_msgtype() {
  msgtype_ = GOOGLE_ULONGLONG(0);
  clear_has_msgtype();
}
inline ::google::protobuf::uint64 CGChatMsgReq::msgtype() const {
  return msgtype_;
}
inline void CGChatMsgReq::set_msgtype(::google::protobuf::uint64 value) {
  set_has_msgtype();
  msgtype_ = value;
}

// -------------------------------------------------------------------

// GCChatMsgRsp

// optional uint32 channel = 1;
inline bool GCChatMsgRsp::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCChatMsgRsp::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCChatMsgRsp::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCChatMsgRsp::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 GCChatMsgRsp::channel() const {
  return channel_;
}
inline void GCChatMsgRsp::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// optional .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
inline bool GCChatMsgRsp::has_fromplayerinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCChatMsgRsp::set_has_fromplayerinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCChatMsgRsp::clear_has_fromplayerinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCChatMsgRsp::clear_fromplayerinfo() {
  if (fromplayerinfo_ != NULL) fromplayerinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
  clear_has_fromplayerinfo();
}
inline const ::proto_ff::RolePlayerMiniInfo& GCChatMsgRsp::fromplayerinfo() const {
  return fromplayerinfo_ != NULL ? *fromplayerinfo_ : *default_instance_->fromplayerinfo_;
}
inline ::proto_ff::RolePlayerMiniInfo* GCChatMsgRsp::mutable_fromplayerinfo() {
  set_has_fromplayerinfo();
  if (fromplayerinfo_ == NULL) fromplayerinfo_ = new ::proto_ff::RolePlayerMiniInfo;
  return fromplayerinfo_;
}
inline ::proto_ff::RolePlayerMiniInfo* GCChatMsgRsp::release_fromplayerinfo() {
  clear_has_fromplayerinfo();
  ::proto_ff::RolePlayerMiniInfo* temp = fromplayerinfo_;
  fromplayerinfo_ = NULL;
  return temp;
}
inline void GCChatMsgRsp::set_allocated_fromplayerinfo(::proto_ff::RolePlayerMiniInfo* fromplayerinfo) {
  delete fromplayerinfo_;
  fromplayerinfo_ = fromplayerinfo;
  if (fromplayerinfo) {
    set_has_fromplayerinfo();
  } else {
    clear_has_fromplayerinfo();
  }
}

// optional uint64 msgType = 3;
inline bool GCChatMsgRsp::has_msgtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCChatMsgRsp::set_has_msgtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCChatMsgRsp::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCChatMsgRsp::clear_msgtype() {
  msgtype_ = GOOGLE_ULONGLONG(0);
  clear_has_msgtype();
}
inline ::google::protobuf::uint64 GCChatMsgRsp::msgtype() const {
  return msgtype_;
}
inline void GCChatMsgRsp::set_msgtype(::google::protobuf::uint64 value) {
  set_has_msgtype();
  msgtype_ = value;
}

// required .proto_ff.ChatContentInfo chatContent = 4;
inline bool GCChatMsgRsp::has_chatcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCChatMsgRsp::set_has_chatcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCChatMsgRsp::clear_has_chatcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCChatMsgRsp::clear_chatcontent() {
  if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
  clear_has_chatcontent();
}
inline const ::proto_ff::ChatContentInfo& GCChatMsgRsp::chatcontent() const {
  return chatcontent_ != NULL ? *chatcontent_ : *default_instance_->chatcontent_;
}
inline ::proto_ff::ChatContentInfo* GCChatMsgRsp::mutable_chatcontent() {
  set_has_chatcontent();
  if (chatcontent_ == NULL) chatcontent_ = new ::proto_ff::ChatContentInfo;
  return chatcontent_;
}
inline ::proto_ff::ChatContentInfo* GCChatMsgRsp::release_chatcontent() {
  clear_has_chatcontent();
  ::proto_ff::ChatContentInfo* temp = chatcontent_;
  chatcontent_ = NULL;
  return temp;
}
inline void GCChatMsgRsp::set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent) {
  delete chatcontent_;
  chatcontent_ = chatcontent;
  if (chatcontent) {
    set_has_chatcontent();
  } else {
    clear_has_chatcontent();
  }
}

// optional uint64 time_tick = 5;
inline bool GCChatMsgRsp::has_time_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCChatMsgRsp::set_has_time_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCChatMsgRsp::clear_has_time_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCChatMsgRsp::clear_time_tick() {
  time_tick_ = GOOGLE_ULONGLONG(0);
  clear_has_time_tick();
}
inline ::google::protobuf::uint64 GCChatMsgRsp::time_tick() const {
  return time_tick_;
}
inline void GCChatMsgRsp::set_time_tick(::google::protobuf::uint64 value) {
  set_has_time_tick();
  time_tick_ = value;
}

// optional uint32 ret = 6;
inline bool GCChatMsgRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCChatMsgRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCChatMsgRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCChatMsgRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GCChatMsgRsp::ret() const {
  return ret_;
}
inline void GCChatMsgRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 msgVal = 7;
inline bool GCChatMsgRsp::has_msgval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCChatMsgRsp::set_has_msgval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCChatMsgRsp::clear_has_msgval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCChatMsgRsp::clear_msgval() {
  msgval_ = GOOGLE_ULONGLONG(0);
  clear_has_msgval();
}
inline ::google::protobuf::uint64 GCChatMsgRsp::msgval() const {
  return msgval_;
}
inline void GCChatMsgRsp::set_msgval(::google::protobuf::uint64 value) {
  set_has_msgval();
  msgval_ = value;
}

// -------------------------------------------------------------------

// GCSystemChatMsgNotify

// optional uint32 channel = 1;
inline bool GCSystemChatMsgNotify::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSystemChatMsgNotify::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSystemChatMsgNotify::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSystemChatMsgNotify::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 GCSystemChatMsgNotify::channel() const {
  return channel_;
}
inline void GCSystemChatMsgNotify::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// optional uint64 msgType = 2;
inline bool GCSystemChatMsgNotify::has_msgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCSystemChatMsgNotify::set_has_msgtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCSystemChatMsgNotify::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCSystemChatMsgNotify::clear_msgtype() {
  msgtype_ = GOOGLE_ULONGLONG(0);
  clear_has_msgtype();
}
inline ::google::protobuf::uint64 GCSystemChatMsgNotify::msgtype() const {
  return msgtype_;
}
inline void GCSystemChatMsgNotify::set_msgtype(::google::protobuf::uint64 value) {
  set_has_msgtype();
  msgtype_ = value;
}

// repeated .proto_ff.RolePlayerMiniInfo players = 3;
inline int GCSystemChatMsgNotify::players_size() const {
  return players_.size();
}
inline void GCSystemChatMsgNotify::clear_players() {
  players_.Clear();
}
inline const ::proto_ff::RolePlayerMiniInfo& GCSystemChatMsgNotify::players(int index) const {
  return players_.Get(index);
}
inline ::proto_ff::RolePlayerMiniInfo* GCSystemChatMsgNotify::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto_ff::RolePlayerMiniInfo* GCSystemChatMsgNotify::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >&
GCSystemChatMsgNotify::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >*
GCSystemChatMsgNotify::mutable_players() {
  return &players_;
}

// repeated string text = 4;
inline int GCSystemChatMsgNotify::text_size() const {
  return text_.size();
}
inline void GCSystemChatMsgNotify::clear_text() {
  text_.Clear();
}
inline const ::std::string& GCSystemChatMsgNotify::text(int index) const {
  return text_.Get(index);
}
inline ::std::string* GCSystemChatMsgNotify::mutable_text(int index) {
  return text_.Mutable(index);
}
inline void GCSystemChatMsgNotify::set_text(int index, const ::std::string& value) {
  text_.Mutable(index)->assign(value);
}
inline void GCSystemChatMsgNotify::set_text(int index, const char* value) {
  text_.Mutable(index)->assign(value);
}
inline void GCSystemChatMsgNotify::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GCSystemChatMsgNotify::add_text() {
  return text_.Add();
}
inline void GCSystemChatMsgNotify::add_text(const ::std::string& value) {
  text_.Add()->assign(value);
}
inline void GCSystemChatMsgNotify::add_text(const char* value) {
  text_.Add()->assign(value);
}
inline void GCSystemChatMsgNotify::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GCSystemChatMsgNotify::text() const {
  return text_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GCSystemChatMsgNotify::mutable_text() {
  return &text_;
}

// repeated uint64 parmas = 5;
inline int GCSystemChatMsgNotify::parmas_size() const {
  return parmas_.size();
}
inline void GCSystemChatMsgNotify::clear_parmas() {
  parmas_.Clear();
}
inline ::google::protobuf::uint64 GCSystemChatMsgNotify::parmas(int index) const {
  return parmas_.Get(index);
}
inline void GCSystemChatMsgNotify::set_parmas(int index, ::google::protobuf::uint64 value) {
  parmas_.Set(index, value);
}
inline void GCSystemChatMsgNotify::add_parmas(::google::protobuf::uint64 value) {
  parmas_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GCSystemChatMsgNotify::parmas() const {
  return parmas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GCSystemChatMsgNotify::mutable_parmas() {
  return &parmas_;
}

// optional string content = 6;
inline bool GCSystemChatMsgNotify::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCSystemChatMsgNotify::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCSystemChatMsgNotify::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCSystemChatMsgNotify::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GCSystemChatMsgNotify::content() const {
  return *content_;
}
inline void GCSystemChatMsgNotify::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GCSystemChatMsgNotify::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GCSystemChatMsgNotify::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GCSystemChatMsgNotify::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* GCSystemChatMsgNotify::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GCSystemChatMsgNotify::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rumorCount = 7;
inline bool GCSystemChatMsgNotify::has_rumorcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCSystemChatMsgNotify::set_has_rumorcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCSystemChatMsgNotify::clear_has_rumorcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCSystemChatMsgNotify::clear_rumorcount() {
  rumorcount_ = 0u;
  clear_has_rumorcount();
}
inline ::google::protobuf::uint32 GCSystemChatMsgNotify::rumorcount() const {
  return rumorcount_;
}
inline void GCSystemChatMsgNotify::set_rumorcount(::google::protobuf::uint32 value) {
  set_has_rumorcount();
  rumorcount_ = value;
}

// repeated .proto_ff.ItemProtoInfo items = 8;
inline int GCSystemChatMsgNotify::items_size() const {
  return items_.size();
}
inline void GCSystemChatMsgNotify::clear_items() {
  items_.Clear();
}
inline const ::proto_ff::ItemProtoInfo& GCSystemChatMsgNotify::items(int index) const {
  return items_.Get(index);
}
inline ::proto_ff::ItemProtoInfo* GCSystemChatMsgNotify::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::proto_ff::ItemProtoInfo* GCSystemChatMsgNotify::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
GCSystemChatMsgNotify::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
GCSystemChatMsgNotify::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// CWAskOfflineMsgReq

// optional uint64 charID = 1;
inline bool CWAskOfflineMsgReq::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CWAskOfflineMsgReq::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CWAskOfflineMsgReq::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CWAskOfflineMsgReq::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CWAskOfflineMsgReq::charid() const {
  return charid_;
}
inline void CWAskOfflineMsgReq::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// WCAskOfflineMsgRsp

// optional uint32 msgSize = 1;
inline bool WCAskOfflineMsgRsp::has_msgsize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WCAskOfflineMsgRsp::set_has_msgsize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WCAskOfflineMsgRsp::clear_has_msgsize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WCAskOfflineMsgRsp::clear_msgsize() {
  msgsize_ = 0u;
  clear_has_msgsize();
}
inline ::google::protobuf::uint32 WCAskOfflineMsgRsp::msgsize() const {
  return msgsize_;
}
inline void WCAskOfflineMsgRsp::set_msgsize(::google::protobuf::uint32 value) {
  set_has_msgsize();
  msgsize_ = value;
}

// -------------------------------------------------------------------

// CWIntrvalAskOfflineMsgReq

// optional uint64 charID = 1;
inline bool CWIntrvalAskOfflineMsgReq::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CWIntrvalAskOfflineMsgReq::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CWIntrvalAskOfflineMsgReq::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CWIntrvalAskOfflineMsgReq::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CWIntrvalAskOfflineMsgReq::charid() const {
  return charid_;
}
inline void CWIntrvalAskOfflineMsgReq::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 size = 2;
inline bool CWIntrvalAskOfflineMsgReq::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CWIntrvalAskOfflineMsgReq::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CWIntrvalAskOfflineMsgReq::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CWIntrvalAskOfflineMsgReq::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 CWIntrvalAskOfflineMsgReq::size() const {
  return size_;
}
inline void CWIntrvalAskOfflineMsgReq::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// OfflineMsg

// optional .proto_ff.RolePlayerMiniInfo playerInfo = 1;
inline bool OfflineMsg::has_playerinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineMsg::set_has_playerinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineMsg::clear_has_playerinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineMsg::clear_playerinfo() {
  if (playerinfo_ != NULL) playerinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
  clear_has_playerinfo();
}
inline const ::proto_ff::RolePlayerMiniInfo& OfflineMsg::playerinfo() const {
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::proto_ff::RolePlayerMiniInfo* OfflineMsg::mutable_playerinfo() {
  set_has_playerinfo();
  if (playerinfo_ == NULL) playerinfo_ = new ::proto_ff::RolePlayerMiniInfo;
  return playerinfo_;
}
inline ::proto_ff::RolePlayerMiniInfo* OfflineMsg::release_playerinfo() {
  clear_has_playerinfo();
  ::proto_ff::RolePlayerMiniInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_playerinfo(::proto_ff::RolePlayerMiniInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    set_has_playerinfo();
  } else {
    clear_has_playerinfo();
  }
}

// required .proto_ff.ChatContentInfo chatContent = 2;
inline bool OfflineMsg::has_chatcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineMsg::set_has_chatcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineMsg::clear_has_chatcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineMsg::clear_chatcontent() {
  if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
  clear_has_chatcontent();
}
inline const ::proto_ff::ChatContentInfo& OfflineMsg::chatcontent() const {
  return chatcontent_ != NULL ? *chatcontent_ : *default_instance_->chatcontent_;
}
inline ::proto_ff::ChatContentInfo* OfflineMsg::mutable_chatcontent() {
  set_has_chatcontent();
  if (chatcontent_ == NULL) chatcontent_ = new ::proto_ff::ChatContentInfo;
  return chatcontent_;
}
inline ::proto_ff::ChatContentInfo* OfflineMsg::release_chatcontent() {
  clear_has_chatcontent();
  ::proto_ff::ChatContentInfo* temp = chatcontent_;
  chatcontent_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent) {
  delete chatcontent_;
  chatcontent_ = chatcontent;
  if (chatcontent) {
    set_has_chatcontent();
  } else {
    clear_has_chatcontent();
  }
}

// optional uint64 sendTime = 3;
inline bool OfflineMsg::has_sendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfflineMsg::set_has_sendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfflineMsg::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfflineMsg::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::uint64 OfflineMsg::sendtime() const {
  return sendtime_;
}
inline void OfflineMsg::set_sendtime(::google::protobuf::uint64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// -------------------------------------------------------------------

// WCIntrvalAskOfflineMsgRsp

// repeated .proto_ff.OfflineMsg offlineMsgList = 1;
inline int WCIntrvalAskOfflineMsgRsp::offlinemsglist_size() const {
  return offlinemsglist_.size();
}
inline void WCIntrvalAskOfflineMsgRsp::clear_offlinemsglist() {
  offlinemsglist_.Clear();
}
inline const ::proto_ff::OfflineMsg& WCIntrvalAskOfflineMsgRsp::offlinemsglist(int index) const {
  return offlinemsglist_.Get(index);
}
inline ::proto_ff::OfflineMsg* WCIntrvalAskOfflineMsgRsp::mutable_offlinemsglist(int index) {
  return offlinemsglist_.Mutable(index);
}
inline ::proto_ff::OfflineMsg* WCIntrvalAskOfflineMsgRsp::add_offlinemsglist() {
  return offlinemsglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::OfflineMsg >&
WCIntrvalAskOfflineMsgRsp::offlinemsglist() const {
  return offlinemsglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::OfflineMsg >*
WCIntrvalAskOfflineMsgRsp::mutable_offlinemsglist() {
  return &offlinemsglist_;
}

// -------------------------------------------------------------------

// GWChatMsgReq

// optional .proto_ff.CHAT_CHANNEL channel = 1;
inline bool GWChatMsgReq::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GWChatMsgReq::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GWChatMsgReq::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GWChatMsgReq::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::proto_ff::CHAT_CHANNEL GWChatMsgReq::channel() const {
  return static_cast< ::proto_ff::CHAT_CHANNEL >(channel_);
}
inline void GWChatMsgReq::set_channel(::proto_ff::CHAT_CHANNEL value) {
  assert(::proto_ff::CHAT_CHANNEL_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// required .proto_ff.ChatContentInfo chatContent = 2;
inline bool GWChatMsgReq::has_chatcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GWChatMsgReq::set_has_chatcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GWChatMsgReq::clear_has_chatcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GWChatMsgReq::clear_chatcontent() {
  if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
  clear_has_chatcontent();
}
inline const ::proto_ff::ChatContentInfo& GWChatMsgReq::chatcontent() const {
  return chatcontent_ != NULL ? *chatcontent_ : *default_instance_->chatcontent_;
}
inline ::proto_ff::ChatContentInfo* GWChatMsgReq::mutable_chatcontent() {
  set_has_chatcontent();
  if (chatcontent_ == NULL) chatcontent_ = new ::proto_ff::ChatContentInfo;
  return chatcontent_;
}
inline ::proto_ff::ChatContentInfo* GWChatMsgReq::release_chatcontent() {
  clear_has_chatcontent();
  ::proto_ff::ChatContentInfo* temp = chatcontent_;
  chatcontent_ = NULL;
  return temp;
}
inline void GWChatMsgReq::set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent) {
  delete chatcontent_;
  chatcontent_ = chatcontent;
  if (chatcontent) {
    set_has_chatcontent();
  } else {
    clear_has_chatcontent();
  }
}

// optional uint64 fromId = 3;
inline bool GWChatMsgReq::has_fromid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GWChatMsgReq::set_has_fromid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GWChatMsgReq::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GWChatMsgReq::clear_fromid() {
  fromid_ = GOOGLE_ULONGLONG(0);
  clear_has_fromid();
}
inline ::google::protobuf::uint64 GWChatMsgReq::fromid() const {
  return fromid_;
}
inline void GWChatMsgReq::set_fromid(::google::protobuf::uint64 value) {
  set_has_fromid();
  fromid_ = value;
}

// optional uint64 targetId = 4;
inline bool GWChatMsgReq::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GWChatMsgReq::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GWChatMsgReq::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GWChatMsgReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 GWChatMsgReq::targetid() const {
  return targetid_;
}
inline void GWChatMsgReq::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
}

// optional uint64 msgType = 5;
inline bool GWChatMsgReq::has_msgtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GWChatMsgReq::set_has_msgtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GWChatMsgReq::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GWChatMsgReq::clear_msgtype() {
  msgtype_ = GOOGLE_ULONGLONG(0);
  clear_has_msgtype();
}
inline ::google::protobuf::uint64 GWChatMsgReq::msgtype() const {
  return msgtype_;
}
inline void GWChatMsgReq::set_msgtype(::google::protobuf::uint64 value) {
  set_has_msgtype();
  msgtype_ = value;
}

// optional uint64 msgVal = 6;
inline bool GWChatMsgReq::has_msgval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GWChatMsgReq::set_has_msgval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GWChatMsgReq::clear_has_msgval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GWChatMsgReq::clear_msgval() {
  msgval_ = GOOGLE_ULONGLONG(0);
  clear_has_msgval();
}
inline ::google::protobuf::uint64 GWChatMsgReq::msgval() const {
  return msgval_;
}
inline void GWChatMsgReq::set_msgval(::google::protobuf::uint64 value) {
  set_has_msgval();
  msgval_ = value;
}

// repeated uint64 cid_lst = 7;
inline int GWChatMsgReq::cid_lst_size() const {
  return cid_lst_.size();
}
inline void GWChatMsgReq::clear_cid_lst() {
  cid_lst_.Clear();
}
inline ::google::protobuf::uint64 GWChatMsgReq::cid_lst(int index) const {
  return cid_lst_.Get(index);
}
inline void GWChatMsgReq::set_cid_lst(int index, ::google::protobuf::uint64 value) {
  cid_lst_.Set(index, value);
}
inline void GWChatMsgReq::add_cid_lst(::google::protobuf::uint64 value) {
  cid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GWChatMsgReq::cid_lst() const {
  return cid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GWChatMsgReq::mutable_cid_lst() {
  return &cid_lst_;
}

// -------------------------------------------------------------------

// GWSysChatMsgNotify

// optional .proto_ff.CHAT_CHANNEL channel = 1;
inline bool GWSysChatMsgNotify::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GWSysChatMsgNotify::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GWSysChatMsgNotify::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GWSysChatMsgNotify::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::proto_ff::CHAT_CHANNEL GWSysChatMsgNotify::channel() const {
  return static_cast< ::proto_ff::CHAT_CHANNEL >(channel_);
}
inline void GWSysChatMsgNotify::set_channel(::proto_ff::CHAT_CHANNEL value) {
  assert(::proto_ff::CHAT_CHANNEL_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// optional uint64 msgType = 2;
inline bool GWSysChatMsgNotify::has_msgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GWSysChatMsgNotify::set_has_msgtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GWSysChatMsgNotify::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GWSysChatMsgNotify::clear_msgtype() {
  msgtype_ = GOOGLE_ULONGLONG(0);
  clear_has_msgtype();
}
inline ::google::protobuf::uint64 GWSysChatMsgNotify::msgtype() const {
  return msgtype_;
}
inline void GWSysChatMsgNotify::set_msgtype(::google::protobuf::uint64 value) {
  set_has_msgtype();
  msgtype_ = value;
}

// repeated .proto_ff.RolePlayerMiniInfo players = 3;
inline int GWSysChatMsgNotify::players_size() const {
  return players_.size();
}
inline void GWSysChatMsgNotify::clear_players() {
  players_.Clear();
}
inline const ::proto_ff::RolePlayerMiniInfo& GWSysChatMsgNotify::players(int index) const {
  return players_.Get(index);
}
inline ::proto_ff::RolePlayerMiniInfo* GWSysChatMsgNotify::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto_ff::RolePlayerMiniInfo* GWSysChatMsgNotify::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >&
GWSysChatMsgNotify::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RolePlayerMiniInfo >*
GWSysChatMsgNotify::mutable_players() {
  return &players_;
}

// repeated string text = 4;
inline int GWSysChatMsgNotify::text_size() const {
  return text_.size();
}
inline void GWSysChatMsgNotify::clear_text() {
  text_.Clear();
}
inline const ::std::string& GWSysChatMsgNotify::text(int index) const {
  return text_.Get(index);
}
inline ::std::string* GWSysChatMsgNotify::mutable_text(int index) {
  return text_.Mutable(index);
}
inline void GWSysChatMsgNotify::set_text(int index, const ::std::string& value) {
  text_.Mutable(index)->assign(value);
}
inline void GWSysChatMsgNotify::set_text(int index, const char* value) {
  text_.Mutable(index)->assign(value);
}
inline void GWSysChatMsgNotify::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GWSysChatMsgNotify::add_text() {
  return text_.Add();
}
inline void GWSysChatMsgNotify::add_text(const ::std::string& value) {
  text_.Add()->assign(value);
}
inline void GWSysChatMsgNotify::add_text(const char* value) {
  text_.Add()->assign(value);
}
inline void GWSysChatMsgNotify::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GWSysChatMsgNotify::text() const {
  return text_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GWSysChatMsgNotify::mutable_text() {
  return &text_;
}

// repeated uint64 parmas = 5;
inline int GWSysChatMsgNotify::parmas_size() const {
  return parmas_.size();
}
inline void GWSysChatMsgNotify::clear_parmas() {
  parmas_.Clear();
}
inline ::google::protobuf::uint64 GWSysChatMsgNotify::parmas(int index) const {
  return parmas_.Get(index);
}
inline void GWSysChatMsgNotify::set_parmas(int index, ::google::protobuf::uint64 value) {
  parmas_.Set(index, value);
}
inline void GWSysChatMsgNotify::add_parmas(::google::protobuf::uint64 value) {
  parmas_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GWSysChatMsgNotify::parmas() const {
  return parmas_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GWSysChatMsgNotify::mutable_parmas() {
  return &parmas_;
}

// optional uint64 extraid = 6;
inline bool GWSysChatMsgNotify::has_extraid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GWSysChatMsgNotify::set_has_extraid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GWSysChatMsgNotify::clear_has_extraid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GWSysChatMsgNotify::clear_extraid() {
  extraid_ = GOOGLE_ULONGLONG(0);
  clear_has_extraid();
}
inline ::google::protobuf::uint64 GWSysChatMsgNotify::extraid() const {
  return extraid_;
}
inline void GWSysChatMsgNotify::set_extraid(::google::protobuf::uint64 value) {
  set_has_extraid();
  extraid_ = value;
}

// repeated .proto_ff.ItemProtoInfo items = 7;
inline int GWSysChatMsgNotify::items_size() const {
  return items_.size();
}
inline void GWSysChatMsgNotify::clear_items() {
  items_.Clear();
}
inline const ::proto_ff::ItemProtoInfo& GWSysChatMsgNotify::items(int index) const {
  return items_.Get(index);
}
inline ::proto_ff::ItemProtoInfo* GWSysChatMsgNotify::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::proto_ff::ItemProtoInfo* GWSysChatMsgNotify::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
GWSysChatMsgNotify::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
GWSysChatMsgNotify::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// TransChatCrossServerProto

// optional .proto_ff.CHAT_CHANNEL channel = 1;
inline bool TransChatCrossServerProto::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransChatCrossServerProto::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransChatCrossServerProto::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransChatCrossServerProto::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::proto_ff::CHAT_CHANNEL TransChatCrossServerProto::channel() const {
  return static_cast< ::proto_ff::CHAT_CHANNEL >(channel_);
}
inline void TransChatCrossServerProto::set_channel(::proto_ff::CHAT_CHANNEL value) {
  assert(::proto_ff::CHAT_CHANNEL_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// required .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
inline bool TransChatCrossServerProto::has_fromplayerinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransChatCrossServerProto::set_has_fromplayerinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransChatCrossServerProto::clear_has_fromplayerinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransChatCrossServerProto::clear_fromplayerinfo() {
  if (fromplayerinfo_ != NULL) fromplayerinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
  clear_has_fromplayerinfo();
}
inline const ::proto_ff::RolePlayerMiniInfo& TransChatCrossServerProto::fromplayerinfo() const {
  return fromplayerinfo_ != NULL ? *fromplayerinfo_ : *default_instance_->fromplayerinfo_;
}
inline ::proto_ff::RolePlayerMiniInfo* TransChatCrossServerProto::mutable_fromplayerinfo() {
  set_has_fromplayerinfo();
  if (fromplayerinfo_ == NULL) fromplayerinfo_ = new ::proto_ff::RolePlayerMiniInfo;
  return fromplayerinfo_;
}
inline ::proto_ff::RolePlayerMiniInfo* TransChatCrossServerProto::release_fromplayerinfo() {
  clear_has_fromplayerinfo();
  ::proto_ff::RolePlayerMiniInfo* temp = fromplayerinfo_;
  fromplayerinfo_ = NULL;
  return temp;
}
inline void TransChatCrossServerProto::set_allocated_fromplayerinfo(::proto_ff::RolePlayerMiniInfo* fromplayerinfo) {
  delete fromplayerinfo_;
  fromplayerinfo_ = fromplayerinfo;
  if (fromplayerinfo) {
    set_has_fromplayerinfo();
  } else {
    clear_has_fromplayerinfo();
  }
}

// required .proto_ff.ChatContentInfo chatContent = 3;
inline bool TransChatCrossServerProto::has_chatcontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransChatCrossServerProto::set_has_chatcontent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransChatCrossServerProto::clear_has_chatcontent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransChatCrossServerProto::clear_chatcontent() {
  if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
  clear_has_chatcontent();
}
inline const ::proto_ff::ChatContentInfo& TransChatCrossServerProto::chatcontent() const {
  return chatcontent_ != NULL ? *chatcontent_ : *default_instance_->chatcontent_;
}
inline ::proto_ff::ChatContentInfo* TransChatCrossServerProto::mutable_chatcontent() {
  set_has_chatcontent();
  if (chatcontent_ == NULL) chatcontent_ = new ::proto_ff::ChatContentInfo;
  return chatcontent_;
}
inline ::proto_ff::ChatContentInfo* TransChatCrossServerProto::release_chatcontent() {
  clear_has_chatcontent();
  ::proto_ff::ChatContentInfo* temp = chatcontent_;
  chatcontent_ = NULL;
  return temp;
}
inline void TransChatCrossServerProto::set_allocated_chatcontent(::proto_ff::ChatContentInfo* chatcontent) {
  delete chatcontent_;
  chatcontent_ = chatcontent;
  if (chatcontent) {
    set_has_chatcontent();
  } else {
    clear_has_chatcontent();
  }
}

// repeated uint64 toPlayers = 4;
inline int TransChatCrossServerProto::toplayers_size() const {
  return toplayers_.size();
}
inline void TransChatCrossServerProto::clear_toplayers() {
  toplayers_.Clear();
}
inline ::google::protobuf::uint64 TransChatCrossServerProto::toplayers(int index) const {
  return toplayers_.Get(index);
}
inline void TransChatCrossServerProto::set_toplayers(int index, ::google::protobuf::uint64 value) {
  toplayers_.Set(index, value);
}
inline void TransChatCrossServerProto::add_toplayers(::google::protobuf::uint64 value) {
  toplayers_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TransChatCrossServerProto::toplayers() const {
  return toplayers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TransChatCrossServerProto::mutable_toplayers() {
  return &toplayers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::CHAT_MSG_TYPE>() {
  return ::proto_ff::CHAT_MSG_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Chat_2eproto__INCLUDED
