// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Marry.proto

#ifndef PROTOBUF_E_5fMarry_2eproto__INCLUDED
#define PROTOBUF_E_5fMarry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fMarry_2eproto();
void protobuf_AssignDesc_E_5fMarry_2eproto();
void protobuf_ShutdownFile_E_5fMarry_2eproto();

class E_MarryMarriage;
class Sheet_MarryMarriage;
class E_MarryBanquet;
class Sheet_MarryBanquet;
class E_MarryLocklvAttributeDesc;
class E_MarryLocklvSkillDesc;
class E_MarryLocklv;
class Sheet_MarryLocklv;
class E_MarryLockskillSkillDesc;
class E_MarryLockskill;
class Sheet_MarryLockskill;
class E_MarryChildAttributeDesc;
class E_MarryChildStariattributeDesc;
class E_MarryChild;
class Sheet_MarryChild;
class E_MarryChildvalue;
class Sheet_MarryChildvalue;
class E_MarryChildexpGradeDesc;
class E_MarryChildexp;
class Sheet_MarryChildexp;
class E_MarryExpressAttributeDesc;
class E_MarryExpress;
class Sheet_MarryExpress;
class E_MarryExpresslanguage;
class Sheet_MarryExpresslanguage;
class E_MarryExpressshop;
class Sheet_MarryExpressshop;
class E_MarryConstantTourmonsterDesc;
class E_MarryConstant;
class Sheet_MarryConstant;
class E_MarryCommon;
class Sheet_MarryCommon;
class E_MarryWeddingStageDesc;
class E_MarryWeddingFireDesc;
class E_MarryWeddingMoodDesc;
class E_MarryWedding;
class Sheet_MarryWedding;
class E_MarryExp;
class Sheet_MarryExp;

// ===================================================================

class E_MarryMarriage : public ::google::protobuf::Message {
 public:
  E_MarryMarriage();
  virtual ~E_MarryMarriage();

  E_MarryMarriage(const E_MarryMarriage& from);

  inline E_MarryMarriage& operator=(const E_MarryMarriage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryMarriage& default_instance();

  void Swap(E_MarryMarriage* other);

  // implements Message ----------------------------------------------

  E_MarryMarriage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryMarriage& from);
  void MergeFrom(const E_MarryMarriage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_weddingName = 2;
  inline bool has_m_weddingname() const;
  inline void clear_m_weddingname();
  static const int kMWeddingNameFieldNumber = 2;
  inline const ::std::string& m_weddingname() const;
  inline void set_m_weddingname(const ::std::string& value);
  inline void set_m_weddingname(const char* value);
  inline void set_m_weddingname(const char* value, size_t size);
  inline ::std::string* mutable_m_weddingname();
  inline ::std::string* release_m_weddingname();
  inline void set_allocated_m_weddingname(::std::string* m_weddingname);

  // optional int32 m_banquet = 3;
  inline bool has_m_banquet() const;
  inline void clear_m_banquet();
  static const int kMBanquetFieldNumber = 3;
  inline ::google::protobuf::int32 m_banquet() const;
  inline void set_m_banquet(::google::protobuf::int32 value);

  // optional int32 m_cruise = 4;
  inline bool has_m_cruise() const;
  inline void clear_m_cruise();
  static const int kMCruiseFieldNumber = 4;
  inline ::google::protobuf::int32 m_cruise() const;
  inline void set_m_cruise(::google::protobuf::int32 value);

  // optional int32 m_money = 5;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 5;
  inline ::google::protobuf::int32 m_money() const;
  inline void set_m_money(::google::protobuf::int32 value);

  // optional int32 m_price = 6;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 6;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 m_firstboxID = 7;
  inline bool has_m_firstboxid() const;
  inline void clear_m_firstboxid();
  static const int kMFirstboxIDFieldNumber = 7;
  inline ::google::protobuf::int32 m_firstboxid() const;
  inline void set_m_firstboxid(::google::protobuf::int32 value);

  // optional int32 m_firstaddPower = 8;
  inline bool has_m_firstaddpower() const;
  inline void clear_m_firstaddpower();
  static const int kMFirstaddPowerFieldNumber = 8;
  inline ::google::protobuf::int32 m_firstaddpower() const;
  inline void set_m_firstaddpower(::google::protobuf::int32 value);

  // optional int32 m_repeatboxID = 9;
  inline bool has_m_repeatboxid() const;
  inline void clear_m_repeatboxid();
  static const int kMRepeatboxIDFieldNumber = 9;
  inline ::google::protobuf::int32 m_repeatboxid() const;
  inline void set_m_repeatboxid(::google::protobuf::int32 value);

  // optional int32 m_repeataddPower = 10;
  inline bool has_m_repeataddpower() const;
  inline void clear_m_repeataddpower();
  static const int kMRepeataddPowerFieldNumber = 10;
  inline ::google::protobuf::int32 m_repeataddpower() const;
  inline void set_m_repeataddpower(::google::protobuf::int32 value);

  // optional int32 m_titleID = 11;
  inline bool has_m_titleid() const;
  inline void clear_m_titleid();
  static const int kMTitleIDFieldNumber = 11;
  inline ::google::protobuf::int32 m_titleid() const;
  inline void set_m_titleid(::google::protobuf::int32 value);

  // optional int32 m_equip = 12;
  inline bool has_m_equip() const;
  inline void clear_m_equip();
  static const int kMEquipFieldNumber = 12;
  inline ::google::protobuf::int32 m_equip() const;
  inline void set_m_equip(::google::protobuf::int32 value);

  // optional int32 m_freeprice = 13;
  inline bool has_m_freeprice() const;
  inline void clear_m_freeprice();
  static const int kMFreepriceFieldNumber = 13;
  inline ::google::protobuf::int32 m_freeprice() const;
  inline void set_m_freeprice(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryMarriage)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_weddingname();
  inline void clear_has_m_weddingname();
  inline void set_has_m_banquet();
  inline void clear_has_m_banquet();
  inline void set_has_m_cruise();
  inline void clear_has_m_cruise();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_firstboxid();
  inline void clear_has_m_firstboxid();
  inline void set_has_m_firstaddpower();
  inline void clear_has_m_firstaddpower();
  inline void set_has_m_repeatboxid();
  inline void clear_has_m_repeatboxid();
  inline void set_has_m_repeataddpower();
  inline void clear_has_m_repeataddpower();
  inline void set_has_m_titleid();
  inline void clear_has_m_titleid();
  inline void set_has_m_equip();
  inline void clear_has_m_equip();
  inline void set_has_m_freeprice();
  inline void clear_has_m_freeprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_weddingname_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_banquet_;
  ::google::protobuf::int32 m_cruise_;
  ::google::protobuf::int32 m_money_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 m_firstboxid_;
  ::google::protobuf::int32 m_firstaddpower_;
  ::google::protobuf::int32 m_repeatboxid_;
  ::google::protobuf::int32 m_repeataddpower_;
  ::google::protobuf::int32 m_titleid_;
  ::google::protobuf::int32 m_equip_;
  ::google::protobuf::int32 m_freeprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryMarriage* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryMarriage : public ::google::protobuf::Message {
 public:
  Sheet_MarryMarriage();
  virtual ~Sheet_MarryMarriage();

  Sheet_MarryMarriage(const Sheet_MarryMarriage& from);

  inline Sheet_MarryMarriage& operator=(const Sheet_MarryMarriage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryMarriage& default_instance();

  void Swap(Sheet_MarryMarriage* other);

  // implements Message ----------------------------------------------

  Sheet_MarryMarriage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryMarriage& from);
  void MergeFrom(const Sheet_MarryMarriage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryMarriage E_MarryMarriage_List = 1;
  inline int e_marrymarriage_list_size() const;
  inline void clear_e_marrymarriage_list();
  static const int kEMarryMarriageListFieldNumber = 1;
  inline const ::proto_ff::E_MarryMarriage& e_marrymarriage_list(int index) const;
  inline ::proto_ff::E_MarryMarriage* mutable_e_marrymarriage_list(int index);
  inline ::proto_ff::E_MarryMarriage* add_e_marrymarriage_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryMarriage >&
      e_marrymarriage_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryMarriage >*
      mutable_e_marrymarriage_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryMarriage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryMarriage > e_marrymarriage_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryMarriage* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryBanquet : public ::google::protobuf::Message {
 public:
  E_MarryBanquet();
  virtual ~E_MarryBanquet();

  E_MarryBanquet(const E_MarryBanquet& from);

  inline E_MarryBanquet& operator=(const E_MarryBanquet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryBanquet& default_instance();

  void Swap(E_MarryBanquet* other);

  // implements Message ----------------------------------------------

  E_MarryBanquet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryBanquet& from);
  void MergeFrom(const E_MarryBanquet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_beginTime = 2;
  inline bool has_m_begintime() const;
  inline void clear_m_begintime();
  static const int kMBeginTimeFieldNumber = 2;
  inline const ::std::string& m_begintime() const;
  inline void set_m_begintime(const ::std::string& value);
  inline void set_m_begintime(const char* value);
  inline void set_m_begintime(const char* value, size_t size);
  inline ::std::string* mutable_m_begintime();
  inline ::std::string* release_m_begintime();
  inline void set_allocated_m_begintime(::std::string* m_begintime);

  // optional string m_finishTime = 3;
  inline bool has_m_finishtime() const;
  inline void clear_m_finishtime();
  static const int kMFinishTimeFieldNumber = 3;
  inline const ::std::string& m_finishtime() const;
  inline void set_m_finishtime(const ::std::string& value);
  inline void set_m_finishtime(const char* value);
  inline void set_m_finishtime(const char* value, size_t size);
  inline ::std::string* mutable_m_finishtime();
  inline ::std::string* release_m_finishtime();
  inline void set_allocated_m_finishtime(::std::string* m_finishtime);

  // optional int32 m_pre_broad_sec = 4;
  inline bool has_m_pre_broad_sec() const;
  inline void clear_m_pre_broad_sec();
  static const int kMPreBroadSecFieldNumber = 4;
  inline ::google::protobuf::int32 m_pre_broad_sec() const;
  inline void set_m_pre_broad_sec(::google::protobuf::int32 value);

  // optional int32 m_broad_inter_sec = 5;
  inline bool has_m_broad_inter_sec() const;
  inline void clear_m_broad_inter_sec();
  static const int kMBroadInterSecFieldNumber = 5;
  inline ::google::protobuf::int32 m_broad_inter_sec() const;
  inline void set_m_broad_inter_sec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryBanquet)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_begintime();
  inline void clear_has_m_begintime();
  inline void set_has_m_finishtime();
  inline void clear_has_m_finishtime();
  inline void set_has_m_pre_broad_sec();
  inline void clear_has_m_pre_broad_sec();
  inline void set_has_m_broad_inter_sec();
  inline void clear_has_m_broad_inter_sec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_begintime_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_pre_broad_sec_;
  ::std::string* m_finishtime_;
  ::google::protobuf::int32 m_broad_inter_sec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryBanquet* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryBanquet : public ::google::protobuf::Message {
 public:
  Sheet_MarryBanquet();
  virtual ~Sheet_MarryBanquet();

  Sheet_MarryBanquet(const Sheet_MarryBanquet& from);

  inline Sheet_MarryBanquet& operator=(const Sheet_MarryBanquet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryBanquet& default_instance();

  void Swap(Sheet_MarryBanquet* other);

  // implements Message ----------------------------------------------

  Sheet_MarryBanquet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryBanquet& from);
  void MergeFrom(const Sheet_MarryBanquet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryBanquet E_MarryBanquet_List = 1;
  inline int e_marrybanquet_list_size() const;
  inline void clear_e_marrybanquet_list();
  static const int kEMarryBanquetListFieldNumber = 1;
  inline const ::proto_ff::E_MarryBanquet& e_marrybanquet_list(int index) const;
  inline ::proto_ff::E_MarryBanquet* mutable_e_marrybanquet_list(int index);
  inline ::proto_ff::E_MarryBanquet* add_e_marrybanquet_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryBanquet >&
      e_marrybanquet_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryBanquet >*
      mutable_e_marrybanquet_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryBanquet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryBanquet > e_marrybanquet_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryBanquet* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryLocklvAttributeDesc : public ::google::protobuf::Message {
 public:
  E_MarryLocklvAttributeDesc();
  virtual ~E_MarryLocklvAttributeDesc();

  E_MarryLocklvAttributeDesc(const E_MarryLocklvAttributeDesc& from);

  inline E_MarryLocklvAttributeDesc& operator=(const E_MarryLocklvAttributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryLocklvAttributeDesc& default_instance();

  void Swap(E_MarryLocklvAttributeDesc* other);

  // implements Message ----------------------------------------------

  E_MarryLocklvAttributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryLocklvAttributeDesc& from);
  void MergeFrom(const E_MarryLocklvAttributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_value = 1;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 1;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryLocklvAttributeDesc)
 private:
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryLocklvAttributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryLocklvSkillDesc : public ::google::protobuf::Message {
 public:
  E_MarryLocklvSkillDesc();
  virtual ~E_MarryLocklvSkillDesc();

  E_MarryLocklvSkillDesc(const E_MarryLocklvSkillDesc& from);

  inline E_MarryLocklvSkillDesc& operator=(const E_MarryLocklvSkillDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryLocklvSkillDesc& default_instance();

  void Swap(E_MarryLocklvSkillDesc* other);

  // implements Message ----------------------------------------------

  E_MarryLocklvSkillDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryLocklvSkillDesc& from);
  void MergeFrom(const E_MarryLocklvSkillDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_skill = 2;
  inline bool has_m_skill() const;
  inline void clear_m_skill();
  static const int kMSkillFieldNumber = 2;
  inline ::google::protobuf::int32 m_skill() const;
  inline void set_m_skill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryLocklvSkillDesc)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_skill();
  inline void clear_has_m_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_skill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryLocklvSkillDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryLocklv : public ::google::protobuf::Message {
 public:
  E_MarryLocklv();
  virtual ~E_MarryLocklv();

  E_MarryLocklv(const E_MarryLocklv& from);

  inline E_MarryLocklv& operator=(const E_MarryLocklv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryLocklv& default_instance();

  void Swap(E_MarryLocklv* other);

  // implements Message ----------------------------------------------

  E_MarryLocklv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryLocklv& from);
  void MergeFrom(const E_MarryLocklv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_lv = 2;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 2;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_Exp = 3;
  inline bool has_m_exp() const;
  inline void clear_m_exp();
  static const int kMExpFieldNumber = 3;
  inline ::google::protobuf::int32 m_exp() const;
  inline void set_m_exp(::google::protobuf::int32 value);

  // repeated .proto_ff.E_MarryLocklvAttributeDesc m_Attribute = 4;
  inline int m_attribute_size() const;
  inline void clear_m_attribute();
  static const int kMAttributeFieldNumber = 4;
  inline const ::proto_ff::E_MarryLocklvAttributeDesc& m_attribute(int index) const;
  inline ::proto_ff::E_MarryLocklvAttributeDesc* mutable_m_attribute(int index);
  inline ::proto_ff::E_MarryLocklvAttributeDesc* add_m_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvAttributeDesc >&
      m_attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvAttributeDesc >*
      mutable_m_attribute();

  // repeated .proto_ff.E_MarryLocklvSkillDesc m_skill = 5;
  inline int m_skill_size() const;
  inline void clear_m_skill();
  static const int kMSkillFieldNumber = 5;
  inline const ::proto_ff::E_MarryLocklvSkillDesc& m_skill(int index) const;
  inline ::proto_ff::E_MarryLocklvSkillDesc* mutable_m_skill(int index);
  inline ::proto_ff::E_MarryLocklvSkillDesc* add_m_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvSkillDesc >&
      m_skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvSkillDesc >*
      mutable_m_skill();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryLocklv)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_exp();
  inline void clear_has_m_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvAttributeDesc > m_attribute_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvSkillDesc > m_skill_;
  ::google::protobuf::int32 m_exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryLocklv* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryLocklv : public ::google::protobuf::Message {
 public:
  Sheet_MarryLocklv();
  virtual ~Sheet_MarryLocklv();

  Sheet_MarryLocklv(const Sheet_MarryLocklv& from);

  inline Sheet_MarryLocklv& operator=(const Sheet_MarryLocklv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryLocklv& default_instance();

  void Swap(Sheet_MarryLocklv* other);

  // implements Message ----------------------------------------------

  Sheet_MarryLocklv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryLocklv& from);
  void MergeFrom(const Sheet_MarryLocklv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryLocklv E_MarryLocklv_List = 1;
  inline int e_marrylocklv_list_size() const;
  inline void clear_e_marrylocklv_list();
  static const int kEMarryLocklvListFieldNumber = 1;
  inline const ::proto_ff::E_MarryLocklv& e_marrylocklv_list(int index) const;
  inline ::proto_ff::E_MarryLocklv* mutable_e_marrylocklv_list(int index);
  inline ::proto_ff::E_MarryLocklv* add_e_marrylocklv_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklv >&
      e_marrylocklv_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklv >*
      mutable_e_marrylocklv_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryLocklv)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklv > e_marrylocklv_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryLocklv* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryLockskillSkillDesc : public ::google::protobuf::Message {
 public:
  E_MarryLockskillSkillDesc();
  virtual ~E_MarryLockskillSkillDesc();

  E_MarryLockskillSkillDesc(const E_MarryLockskillSkillDesc& from);

  inline E_MarryLockskillSkillDesc& operator=(const E_MarryLockskillSkillDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryLockskillSkillDesc& default_instance();

  void Swap(E_MarryLockskillSkillDesc* other);

  // implements Message ----------------------------------------------

  E_MarryLockskillSkillDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryLockskillSkillDesc& from);
  void MergeFrom(const E_MarryLockskillSkillDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_grade = 1;
  inline bool has_m_grade() const;
  inline void clear_m_grade();
  static const int kMGradeFieldNumber = 1;
  inline ::google::protobuf::int32 m_grade() const;
  inline void set_m_grade(::google::protobuf::int32 value);

  // optional int32 m_lv = 2;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 2;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryLockskillSkillDesc)
 private:
  inline void set_has_m_grade();
  inline void clear_has_m_grade();
  inline void set_has_m_lv();
  inline void clear_has_m_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_grade_;
  ::google::protobuf::int32 m_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryLockskillSkillDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryLockskill : public ::google::protobuf::Message {
 public:
  E_MarryLockskill();
  virtual ~E_MarryLockskill();

  E_MarryLockskill(const E_MarryLockskill& from);

  inline E_MarryLockskill& operator=(const E_MarryLockskill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryLockskill& default_instance();

  void Swap(E_MarryLockskill* other);

  // implements Message ----------------------------------------------

  E_MarryLockskill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryLockskill& from);
  void MergeFrom(const E_MarryLockskill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_order = 2;
  inline bool has_m_order() const;
  inline void clear_m_order();
  static const int kMOrderFieldNumber = 2;
  inline ::google::protobuf::int32 m_order() const;
  inline void set_m_order(::google::protobuf::int32 value);

  // optional int32 m_skillid = 3;
  inline bool has_m_skillid() const;
  inline void clear_m_skillid();
  static const int kMSkillidFieldNumber = 3;
  inline ::google::protobuf::int32 m_skillid() const;
  inline void set_m_skillid(::google::protobuf::int32 value);

  // repeated .proto_ff.E_MarryLockskillSkillDesc m_skill = 4;
  inline int m_skill_size() const;
  inline void clear_m_skill();
  static const int kMSkillFieldNumber = 4;
  inline const ::proto_ff::E_MarryLockskillSkillDesc& m_skill(int index) const;
  inline ::proto_ff::E_MarryLockskillSkillDesc* mutable_m_skill(int index);
  inline ::proto_ff::E_MarryLockskillSkillDesc* add_m_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskillSkillDesc >&
      m_skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskillSkillDesc >*
      mutable_m_skill();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryLockskill)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_order();
  inline void clear_has_m_order();
  inline void set_has_m_skillid();
  inline void clear_has_m_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_order_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskillSkillDesc > m_skill_;
  ::google::protobuf::int32 m_skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryLockskill* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryLockskill : public ::google::protobuf::Message {
 public:
  Sheet_MarryLockskill();
  virtual ~Sheet_MarryLockskill();

  Sheet_MarryLockskill(const Sheet_MarryLockskill& from);

  inline Sheet_MarryLockskill& operator=(const Sheet_MarryLockskill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryLockskill& default_instance();

  void Swap(Sheet_MarryLockskill* other);

  // implements Message ----------------------------------------------

  Sheet_MarryLockskill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryLockskill& from);
  void MergeFrom(const Sheet_MarryLockskill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryLockskill E_MarryLockskill_List = 1;
  inline int e_marrylockskill_list_size() const;
  inline void clear_e_marrylockskill_list();
  static const int kEMarryLockskillListFieldNumber = 1;
  inline const ::proto_ff::E_MarryLockskill& e_marrylockskill_list(int index) const;
  inline ::proto_ff::E_MarryLockskill* mutable_e_marrylockskill_list(int index);
  inline ::proto_ff::E_MarryLockskill* add_e_marrylockskill_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskill >&
      e_marrylockskill_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskill >*
      mutable_e_marrylockskill_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryLockskill)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskill > e_marrylockskill_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryLockskill* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryChildAttributeDesc : public ::google::protobuf::Message {
 public:
  E_MarryChildAttributeDesc();
  virtual ~E_MarryChildAttributeDesc();

  E_MarryChildAttributeDesc(const E_MarryChildAttributeDesc& from);

  inline E_MarryChildAttributeDesc& operator=(const E_MarryChildAttributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryChildAttributeDesc& default_instance();

  void Swap(E_MarryChildAttributeDesc* other);

  // implements Message ----------------------------------------------

  E_MarryChildAttributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryChildAttributeDesc& from);
  void MergeFrom(const E_MarryChildAttributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_value = 1;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 1;
  inline ::google::protobuf::int64 m_value() const;
  inline void set_m_value(::google::protobuf::int64 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryChildAttributeDesc)
 private:
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_value_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryChildAttributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryChildStariattributeDesc : public ::google::protobuf::Message {
 public:
  E_MarryChildStariattributeDesc();
  virtual ~E_MarryChildStariattributeDesc();

  E_MarryChildStariattributeDesc(const E_MarryChildStariattributeDesc& from);

  inline E_MarryChildStariattributeDesc& operator=(const E_MarryChildStariattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryChildStariattributeDesc& default_instance();

  void Swap(E_MarryChildStariattributeDesc* other);

  // implements Message ----------------------------------------------

  E_MarryChildStariattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryChildStariattributeDesc& from);
  void MergeFrom(const E_MarryChildStariattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_value = 1;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 1;
  inline ::google::protobuf::int64 m_value() const;
  inline void set_m_value(::google::protobuf::int64 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryChildStariattributeDesc)
 private:
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_value_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryChildStariattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryChild : public ::google::protobuf::Message {
 public:
  E_MarryChild();
  virtual ~E_MarryChild();

  E_MarryChild(const E_MarryChild& from);

  inline E_MarryChild& operator=(const E_MarryChild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryChild& default_instance();

  void Swap(E_MarryChild* other);

  // implements Message ----------------------------------------------

  E_MarryChild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryChild& from);
  void MergeFrom(const E_MarryChild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_childID = 1;
  inline bool has_m_childid() const;
  inline void clear_m_childid();
  static const int kMChildIDFieldNumber = 1;
  inline ::google::protobuf::int64 m_childid() const;
  inline void set_m_childid(::google::protobuf::int64 value);

  // optional int64 m_itemId = 2;
  inline bool has_m_itemid() const;
  inline void clear_m_itemid();
  static const int kMItemIdFieldNumber = 2;
  inline ::google::protobuf::int64 m_itemid() const;
  inline void set_m_itemid(::google::protobuf::int64 value);

  // optional string m_childName = 3;
  inline bool has_m_childname() const;
  inline void clear_m_childname();
  static const int kMChildNameFieldNumber = 3;
  inline const ::std::string& m_childname() const;
  inline void set_m_childname(const ::std::string& value);
  inline void set_m_childname(const char* value);
  inline void set_m_childname(const char* value, size_t size);
  inline ::std::string* mutable_m_childname();
  inline ::std::string* release_m_childname();
  inline void set_allocated_m_childname(::std::string* m_childname);

  // optional int32 m_childQuality = 4;
  inline bool has_m_childquality() const;
  inline void clear_m_childquality();
  static const int kMChildQualityFieldNumber = 4;
  inline ::google::protobuf::int32 m_childquality() const;
  inline void set_m_childquality(::google::protobuf::int32 value);

  // optional int32 m_handZ = 5;
  inline bool has_m_handz() const;
  inline void clear_m_handz();
  static const int kMHandZFieldNumber = 5;
  inline ::google::protobuf::int32 m_handz() const;
  inline void set_m_handz(::google::protobuf::int32 value);

  // optional string m_handZName = 6;
  inline bool has_m_handzname() const;
  inline void clear_m_handzname();
  static const int kMHandZNameFieldNumber = 6;
  inline const ::std::string& m_handzname() const;
  inline void set_m_handzname(const ::std::string& value);
  inline void set_m_handzname(const char* value);
  inline void set_m_handzname(const char* value, size_t size);
  inline ::std::string* mutable_m_handzname();
  inline ::std::string* release_m_handzname();
  inline void set_allocated_m_handzname(::std::string* m_handzname);

  // optional string m_skillID = 7;
  inline bool has_m_skillid() const;
  inline void clear_m_skillid();
  static const int kMSkillIDFieldNumber = 7;
  inline const ::std::string& m_skillid() const;
  inline void set_m_skillid(const ::std::string& value);
  inline void set_m_skillid(const char* value);
  inline void set_m_skillid(const char* value, size_t size);
  inline ::std::string* mutable_m_skillid();
  inline ::std::string* release_m_skillid();
  inline void set_allocated_m_skillid(::std::string* m_skillid);

  // optional int64 m_starId = 8;
  inline bool has_m_starid() const;
  inline void clear_m_starid();
  static const int kMStarIdFieldNumber = 8;
  inline ::google::protobuf::int64 m_starid() const;
  inline void set_m_starid(::google::protobuf::int64 value);

  // optional string m_starNum = 9;
  inline bool has_m_starnum() const;
  inline void clear_m_starnum();
  static const int kMStarNumFieldNumber = 9;
  inline const ::std::string& m_starnum() const;
  inline void set_m_starnum(const ::std::string& value);
  inline void set_m_starnum(const char* value);
  inline void set_m_starnum(const char* value, size_t size);
  inline ::std::string* mutable_m_starnum();
  inline ::std::string* release_m_starnum();
  inline void set_allocated_m_starnum(::std::string* m_starnum);

  // repeated .proto_ff.E_MarryChildAttributeDesc m_attribute = 10;
  inline int m_attribute_size() const;
  inline void clear_m_attribute();
  static const int kMAttributeFieldNumber = 10;
  inline const ::proto_ff::E_MarryChildAttributeDesc& m_attribute(int index) const;
  inline ::proto_ff::E_MarryChildAttributeDesc* mutable_m_attribute(int index);
  inline ::proto_ff::E_MarryChildAttributeDesc* add_m_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildAttributeDesc >&
      m_attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildAttributeDesc >*
      mutable_m_attribute();

  // repeated .proto_ff.E_MarryChildStariattributeDesc m_starIattribute = 11;
  inline int m_stariattribute_size() const;
  inline void clear_m_stariattribute();
  static const int kMStarIattributeFieldNumber = 11;
  inline const ::proto_ff::E_MarryChildStariattributeDesc& m_stariattribute(int index) const;
  inline ::proto_ff::E_MarryChildStariattributeDesc* mutable_m_stariattribute(int index);
  inline ::proto_ff::E_MarryChildStariattributeDesc* add_m_stariattribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildStariattributeDesc >&
      m_stariattribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildStariattributeDesc >*
      mutable_m_stariattribute();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryChild)
 private:
  inline void set_has_m_childid();
  inline void clear_has_m_childid();
  inline void set_has_m_itemid();
  inline void clear_has_m_itemid();
  inline void set_has_m_childname();
  inline void clear_has_m_childname();
  inline void set_has_m_childquality();
  inline void clear_has_m_childquality();
  inline void set_has_m_handz();
  inline void clear_has_m_handz();
  inline void set_has_m_handzname();
  inline void clear_has_m_handzname();
  inline void set_has_m_skillid();
  inline void clear_has_m_skillid();
  inline void set_has_m_starid();
  inline void clear_has_m_starid();
  inline void set_has_m_starnum();
  inline void clear_has_m_starnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_childid_;
  ::google::protobuf::int64 m_itemid_;
  ::std::string* m_childname_;
  ::google::protobuf::int32 m_childquality_;
  ::google::protobuf::int32 m_handz_;
  ::std::string* m_handzname_;
  ::std::string* m_skillid_;
  ::google::protobuf::int64 m_starid_;
  ::std::string* m_starnum_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildAttributeDesc > m_attribute_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildStariattributeDesc > m_stariattribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryChild* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryChild : public ::google::protobuf::Message {
 public:
  Sheet_MarryChild();
  virtual ~Sheet_MarryChild();

  Sheet_MarryChild(const Sheet_MarryChild& from);

  inline Sheet_MarryChild& operator=(const Sheet_MarryChild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryChild& default_instance();

  void Swap(Sheet_MarryChild* other);

  // implements Message ----------------------------------------------

  Sheet_MarryChild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryChild& from);
  void MergeFrom(const Sheet_MarryChild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryChild E_MarryChild_List = 1;
  inline int e_marrychild_list_size() const;
  inline void clear_e_marrychild_list();
  static const int kEMarryChildListFieldNumber = 1;
  inline const ::proto_ff::E_MarryChild& e_marrychild_list(int index) const;
  inline ::proto_ff::E_MarryChild* mutable_e_marrychild_list(int index);
  inline ::proto_ff::E_MarryChild* add_e_marrychild_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChild >&
      e_marrychild_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChild >*
      mutable_e_marrychild_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryChild)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChild > e_marrychild_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryChild* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryChildvalue : public ::google::protobuf::Message {
 public:
  E_MarryChildvalue();
  virtual ~E_MarryChildvalue();

  E_MarryChildvalue(const E_MarryChildvalue& from);

  inline E_MarryChildvalue& operator=(const E_MarryChildvalue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryChildvalue& default_instance();

  void Swap(E_MarryChildvalue* other);

  // implements Message ----------------------------------------------

  E_MarryChildvalue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryChildvalue& from);
  void MergeFrom(const E_MarryChildvalue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_id() const;
  inline void set_m_id(::google::protobuf::int64 value);

  // repeated int32 m_lvValue = 2;
  inline int m_lvvalue_size() const;
  inline void clear_m_lvvalue();
  static const int kMLvValueFieldNumber = 2;
  inline ::google::protobuf::int32 m_lvvalue(int index) const;
  inline void set_m_lvvalue(int index, ::google::protobuf::int32 value);
  inline void add_m_lvvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_lvvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_lvvalue();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryChildvalue)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_lvvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryChildvalue* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryChildvalue : public ::google::protobuf::Message {
 public:
  Sheet_MarryChildvalue();
  virtual ~Sheet_MarryChildvalue();

  Sheet_MarryChildvalue(const Sheet_MarryChildvalue& from);

  inline Sheet_MarryChildvalue& operator=(const Sheet_MarryChildvalue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryChildvalue& default_instance();

  void Swap(Sheet_MarryChildvalue* other);

  // implements Message ----------------------------------------------

  Sheet_MarryChildvalue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryChildvalue& from);
  void MergeFrom(const Sheet_MarryChildvalue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryChildvalue E_MarryChildvalue_List = 1;
  inline int e_marrychildvalue_list_size() const;
  inline void clear_e_marrychildvalue_list();
  static const int kEMarryChildvalueListFieldNumber = 1;
  inline const ::proto_ff::E_MarryChildvalue& e_marrychildvalue_list(int index) const;
  inline ::proto_ff::E_MarryChildvalue* mutable_e_marrychildvalue_list(int index);
  inline ::proto_ff::E_MarryChildvalue* add_e_marrychildvalue_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildvalue >&
      e_marrychildvalue_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildvalue >*
      mutable_e_marrychildvalue_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryChildvalue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildvalue > e_marrychildvalue_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryChildvalue* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryChildexpGradeDesc : public ::google::protobuf::Message {
 public:
  E_MarryChildexpGradeDesc();
  virtual ~E_MarryChildexpGradeDesc();

  E_MarryChildexpGradeDesc(const E_MarryChildexpGradeDesc& from);

  inline E_MarryChildexpGradeDesc& operator=(const E_MarryChildexpGradeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryChildexpGradeDesc& default_instance();

  void Swap(E_MarryChildexpGradeDesc* other);

  // implements Message ----------------------------------------------

  E_MarryChildexpGradeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryChildexpGradeDesc& from);
  void MergeFrom(const E_MarryChildexpGradeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_exp = 1;
  inline bool has_m_exp() const;
  inline void clear_m_exp();
  static const int kMExpFieldNumber = 1;
  inline ::google::protobuf::int32 m_exp() const;
  inline void set_m_exp(::google::protobuf::int32 value);

  // optional int32 m_lv = 2;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 2;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryChildexpGradeDesc)
 private:
  inline void set_has_m_exp();
  inline void clear_has_m_exp();
  inline void set_has_m_lv();
  inline void clear_has_m_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_exp_;
  ::google::protobuf::int32 m_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryChildexpGradeDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryChildexp : public ::google::protobuf::Message {
 public:
  E_MarryChildexp();
  virtual ~E_MarryChildexp();

  E_MarryChildexp(const E_MarryChildexp& from);

  inline E_MarryChildexp& operator=(const E_MarryChildexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryChildexp& default_instance();

  void Swap(E_MarryChildexp* other);

  // implements Message ----------------------------------------------

  E_MarryChildexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryChildexp& from);
  void MergeFrom(const E_MarryChildexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // repeated .proto_ff.E_MarryChildexpGradeDesc m_Grade = 2;
  inline int m_grade_size() const;
  inline void clear_m_grade();
  static const int kMGradeFieldNumber = 2;
  inline const ::proto_ff::E_MarryChildexpGradeDesc& m_grade(int index) const;
  inline ::proto_ff::E_MarryChildexpGradeDesc* mutable_m_grade(int index);
  inline ::proto_ff::E_MarryChildexpGradeDesc* add_m_grade();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexpGradeDesc >&
      m_grade() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexpGradeDesc >*
      mutable_m_grade();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryChildexp)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexpGradeDesc > m_grade_;
  ::google::protobuf::int32 m_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryChildexp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryChildexp : public ::google::protobuf::Message {
 public:
  Sheet_MarryChildexp();
  virtual ~Sheet_MarryChildexp();

  Sheet_MarryChildexp(const Sheet_MarryChildexp& from);

  inline Sheet_MarryChildexp& operator=(const Sheet_MarryChildexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryChildexp& default_instance();

  void Swap(Sheet_MarryChildexp* other);

  // implements Message ----------------------------------------------

  Sheet_MarryChildexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryChildexp& from);
  void MergeFrom(const Sheet_MarryChildexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryChildexp E_MarryChildexp_List = 1;
  inline int e_marrychildexp_list_size() const;
  inline void clear_e_marrychildexp_list();
  static const int kEMarryChildexpListFieldNumber = 1;
  inline const ::proto_ff::E_MarryChildexp& e_marrychildexp_list(int index) const;
  inline ::proto_ff::E_MarryChildexp* mutable_e_marrychildexp_list(int index);
  inline ::proto_ff::E_MarryChildexp* add_e_marrychildexp_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexp >&
      e_marrychildexp_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexp >*
      mutable_e_marrychildexp_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryChildexp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexp > e_marrychildexp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryChildexp* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryExpressAttributeDesc : public ::google::protobuf::Message {
 public:
  E_MarryExpressAttributeDesc();
  virtual ~E_MarryExpressAttributeDesc();

  E_MarryExpressAttributeDesc(const E_MarryExpressAttributeDesc& from);

  inline E_MarryExpressAttributeDesc& operator=(const E_MarryExpressAttributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryExpressAttributeDesc& default_instance();

  void Swap(E_MarryExpressAttributeDesc* other);

  // implements Message ----------------------------------------------

  E_MarryExpressAttributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryExpressAttributeDesc& from);
  void MergeFrom(const E_MarryExpressAttributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_value = 1;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 1;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryExpressAttributeDesc)
 private:
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryExpressAttributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryExpress : public ::google::protobuf::Message {
 public:
  E_MarryExpress();
  virtual ~E_MarryExpress();

  E_MarryExpress(const E_MarryExpress& from);

  inline E_MarryExpress& operator=(const E_MarryExpress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryExpress& default_instance();

  void Swap(E_MarryExpress* other);

  // implements Message ----------------------------------------------

  E_MarryExpress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryExpress& from);
  void MergeFrom(const E_MarryExpress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_Exp = 2;
  inline bool has_m_exp() const;
  inline void clear_m_exp();
  static const int kMExpFieldNumber = 2;
  inline ::google::protobuf::int32 m_exp() const;
  inline void set_m_exp(::google::protobuf::int32 value);

  // repeated .proto_ff.E_MarryExpressAttributeDesc m_Attribute = 3;
  inline int m_attribute_size() const;
  inline void clear_m_attribute();
  static const int kMAttributeFieldNumber = 3;
  inline const ::proto_ff::E_MarryExpressAttributeDesc& m_attribute(int index) const;
  inline ::proto_ff::E_MarryExpressAttributeDesc* mutable_m_attribute(int index);
  inline ::proto_ff::E_MarryExpressAttributeDesc* add_m_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressAttributeDesc >&
      m_attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressAttributeDesc >*
      mutable_m_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryExpress)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_exp();
  inline void clear_has_m_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_exp_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressAttributeDesc > m_attribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryExpress* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryExpress : public ::google::protobuf::Message {
 public:
  Sheet_MarryExpress();
  virtual ~Sheet_MarryExpress();

  Sheet_MarryExpress(const Sheet_MarryExpress& from);

  inline Sheet_MarryExpress& operator=(const Sheet_MarryExpress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryExpress& default_instance();

  void Swap(Sheet_MarryExpress* other);

  // implements Message ----------------------------------------------

  Sheet_MarryExpress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryExpress& from);
  void MergeFrom(const Sheet_MarryExpress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryExpress E_MarryExpress_List = 1;
  inline int e_marryexpress_list_size() const;
  inline void clear_e_marryexpress_list();
  static const int kEMarryExpressListFieldNumber = 1;
  inline const ::proto_ff::E_MarryExpress& e_marryexpress_list(int index) const;
  inline ::proto_ff::E_MarryExpress* mutable_e_marryexpress_list(int index);
  inline ::proto_ff::E_MarryExpress* add_e_marryexpress_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpress >&
      e_marryexpress_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpress >*
      mutable_e_marryexpress_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryExpress)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpress > e_marryexpress_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryExpress* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryExpresslanguage : public ::google::protobuf::Message {
 public:
  E_MarryExpresslanguage();
  virtual ~E_MarryExpresslanguage();

  E_MarryExpresslanguage(const E_MarryExpresslanguage& from);

  inline E_MarryExpresslanguage& operator=(const E_MarryExpresslanguage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryExpresslanguage& default_instance();

  void Swap(E_MarryExpresslanguage* other);

  // implements Message ----------------------------------------------

  E_MarryExpresslanguage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryExpresslanguage& from);
  void MergeFrom(const E_MarryExpresslanguage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_language = 2;
  inline bool has_m_language() const;
  inline void clear_m_language();
  static const int kMLanguageFieldNumber = 2;
  inline const ::std::string& m_language() const;
  inline void set_m_language(const ::std::string& value);
  inline void set_m_language(const char* value);
  inline void set_m_language(const char* value, size_t size);
  inline ::std::string* mutable_m_language();
  inline ::std::string* release_m_language();
  inline void set_allocated_m_language(::std::string* m_language);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryExpresslanguage)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_language();
  inline void clear_has_m_language();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_language_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryExpresslanguage* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryExpresslanguage : public ::google::protobuf::Message {
 public:
  Sheet_MarryExpresslanguage();
  virtual ~Sheet_MarryExpresslanguage();

  Sheet_MarryExpresslanguage(const Sheet_MarryExpresslanguage& from);

  inline Sheet_MarryExpresslanguage& operator=(const Sheet_MarryExpresslanguage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryExpresslanguage& default_instance();

  void Swap(Sheet_MarryExpresslanguage* other);

  // implements Message ----------------------------------------------

  Sheet_MarryExpresslanguage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryExpresslanguage& from);
  void MergeFrom(const Sheet_MarryExpresslanguage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryExpresslanguage E_MarryExpresslanguage_List = 1;
  inline int e_marryexpresslanguage_list_size() const;
  inline void clear_e_marryexpresslanguage_list();
  static const int kEMarryExpresslanguageListFieldNumber = 1;
  inline const ::proto_ff::E_MarryExpresslanguage& e_marryexpresslanguage_list(int index) const;
  inline ::proto_ff::E_MarryExpresslanguage* mutable_e_marryexpresslanguage_list(int index);
  inline ::proto_ff::E_MarryExpresslanguage* add_e_marryexpresslanguage_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpresslanguage >&
      e_marryexpresslanguage_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpresslanguage >*
      mutable_e_marryexpresslanguage_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryExpresslanguage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpresslanguage > e_marryexpresslanguage_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryExpresslanguage* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryExpressshop : public ::google::protobuf::Message {
 public:
  E_MarryExpressshop();
  virtual ~E_MarryExpressshop();

  E_MarryExpressshop(const E_MarryExpressshop& from);

  inline E_MarryExpressshop& operator=(const E_MarryExpressshop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryExpressshop& default_instance();

  void Swap(E_MarryExpressshop* other);

  // implements Message ----------------------------------------------

  E_MarryExpressshop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryExpressshop& from);
  void MergeFrom(const E_MarryExpressshop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_exitem = 1;
  inline bool has_m_exitem() const;
  inline void clear_m_exitem();
  static const int kMExitemFieldNumber = 1;
  inline ::google::protobuf::int32 m_exitem() const;
  inline void set_m_exitem(::google::protobuf::int32 value);

  // optional int32 m_mallid = 2;
  inline bool has_m_mallid() const;
  inline void clear_m_mallid();
  static const int kMMallidFieldNumber = 2;
  inline ::google::protobuf::int32 m_mallid() const;
  inline void set_m_mallid(::google::protobuf::int32 value);

  // optional int32 m_exp = 3;
  inline bool has_m_exp() const;
  inline void clear_m_exp();
  static const int kMExpFieldNumber = 3;
  inline ::google::protobuf::int32 m_exp() const;
  inline void set_m_exp(::google::protobuf::int32 value);

  // optional int32 m_expto = 4;
  inline bool has_m_expto() const;
  inline void clear_m_expto();
  static const int kMExptoFieldNumber = 4;
  inline ::google::protobuf::int32 m_expto() const;
  inline void set_m_expto(::google::protobuf::int32 value);

  // optional int32 m_broadcastid = 5;
  inline bool has_m_broadcastid() const;
  inline void clear_m_broadcastid();
  static const int kMBroadcastidFieldNumber = 5;
  inline ::google::protobuf::int32 m_broadcastid() const;
  inline void set_m_broadcastid(::google::protobuf::int32 value);

  // optional int32 m_effectId = 6;
  inline bool has_m_effectid() const;
  inline void clear_m_effectid();
  static const int kMEffectIdFieldNumber = 6;
  inline ::google::protobuf::int32 m_effectid() const;
  inline void set_m_effectid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryExpressshop)
 private:
  inline void set_has_m_exitem();
  inline void clear_has_m_exitem();
  inline void set_has_m_mallid();
  inline void clear_has_m_mallid();
  inline void set_has_m_exp();
  inline void clear_has_m_exp();
  inline void set_has_m_expto();
  inline void clear_has_m_expto();
  inline void set_has_m_broadcastid();
  inline void clear_has_m_broadcastid();
  inline void set_has_m_effectid();
  inline void clear_has_m_effectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_exitem_;
  ::google::protobuf::int32 m_mallid_;
  ::google::protobuf::int32 m_exp_;
  ::google::protobuf::int32 m_expto_;
  ::google::protobuf::int32 m_broadcastid_;
  ::google::protobuf::int32 m_effectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryExpressshop* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryExpressshop : public ::google::protobuf::Message {
 public:
  Sheet_MarryExpressshop();
  virtual ~Sheet_MarryExpressshop();

  Sheet_MarryExpressshop(const Sheet_MarryExpressshop& from);

  inline Sheet_MarryExpressshop& operator=(const Sheet_MarryExpressshop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryExpressshop& default_instance();

  void Swap(Sheet_MarryExpressshop* other);

  // implements Message ----------------------------------------------

  Sheet_MarryExpressshop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryExpressshop& from);
  void MergeFrom(const Sheet_MarryExpressshop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryExpressshop E_MarryExpressshop_List = 1;
  inline int e_marryexpressshop_list_size() const;
  inline void clear_e_marryexpressshop_list();
  static const int kEMarryExpressshopListFieldNumber = 1;
  inline const ::proto_ff::E_MarryExpressshop& e_marryexpressshop_list(int index) const;
  inline ::proto_ff::E_MarryExpressshop* mutable_e_marryexpressshop_list(int index);
  inline ::proto_ff::E_MarryExpressshop* add_e_marryexpressshop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressshop >&
      e_marryexpressshop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressshop >*
      mutable_e_marryexpressshop_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryExpressshop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressshop > e_marryexpressshop_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryExpressshop* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryConstantTourmonsterDesc : public ::google::protobuf::Message {
 public:
  E_MarryConstantTourmonsterDesc();
  virtual ~E_MarryConstantTourmonsterDesc();

  E_MarryConstantTourmonsterDesc(const E_MarryConstantTourmonsterDesc& from);

  inline E_MarryConstantTourmonsterDesc& operator=(const E_MarryConstantTourmonsterDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryConstantTourmonsterDesc& default_instance();

  void Swap(E_MarryConstantTourmonsterDesc* other);

  // implements Message ----------------------------------------------

  E_MarryConstantTourmonsterDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryConstantTourmonsterDesc& from);
  void MergeFrom(const E_MarryConstantTourmonsterDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_pathid = 1;
  inline bool has_m_pathid() const;
  inline void clear_m_pathid();
  static const int kMPathidFieldNumber = 1;
  inline ::google::protobuf::int32 m_pathid() const;
  inline void set_m_pathid(::google::protobuf::int32 value);

  // optional int32 m_id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryConstantTourmonsterDesc)
 private:
  inline void set_has_m_pathid();
  inline void clear_has_m_pathid();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_pathid_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryConstantTourmonsterDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryConstant : public ::google::protobuf::Message {
 public:
  E_MarryConstant();
  virtual ~E_MarryConstant();

  E_MarryConstant(const E_MarryConstant& from);

  inline E_MarryConstant& operator=(const E_MarryConstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryConstant& default_instance();

  void Swap(E_MarryConstant* other);

  // implements Message ----------------------------------------------

  E_MarryConstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryConstant& from);
  void MergeFrom(const E_MarryConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_money = 2;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 m_money() const;
  inline void set_m_money(::google::protobuf::int32 value);

  // optional int32 m_price = 3;
  inline bool has_m_price() const;
  inline void clear_m_price();
  static const int kMPriceFieldNumber = 3;
  inline ::google::protobuf::int32 m_price() const;
  inline void set_m_price(::google::protobuf::int32 value);

  // optional int32 m_buyitem = 4;
  inline bool has_m_buyitem() const;
  inline void clear_m_buyitem();
  static const int kMBuyitemFieldNumber = 4;
  inline ::google::protobuf::int32 m_buyitem() const;
  inline void set_m_buyitem(::google::protobuf::int32 value);

  // optional int32 m_dailyitem = 5;
  inline bool has_m_dailyitem() const;
  inline void clear_m_dailyitem();
  static const int kMDailyitemFieldNumber = 5;
  inline ::google::protobuf::int32 m_dailyitem() const;
  inline void set_m_dailyitem(::google::protobuf::int32 value);

  // optional int32 m_boxitme = 6;
  inline bool has_m_boxitme() const;
  inline void clear_m_boxitme();
  static const int kMBoxitmeFieldNumber = 6;
  inline ::google::protobuf::int32 m_boxitme() const;
  inline void set_m_boxitme(::google::protobuf::int32 value);

  // optional int32 m_interval = 7;
  inline bool has_m_interval() const;
  inline void clear_m_interval();
  static const int kMIntervalFieldNumber = 7;
  inline ::google::protobuf::int32 m_interval() const;
  inline void set_m_interval(::google::protobuf::int32 value);

  // optional int32 m_lifetime = 8;
  inline bool has_m_lifetime() const;
  inline void clear_m_lifetime();
  static const int kMLifetimeFieldNumber = 8;
  inline ::google::protobuf::int32 m_lifetime() const;
  inline void set_m_lifetime(::google::protobuf::int32 value);

  // optional int32 m_scale = 9;
  inline bool has_m_scale() const;
  inline void clear_m_scale();
  static const int kMScaleFieldNumber = 9;
  inline ::google::protobuf::int32 m_scale() const;
  inline void set_m_scale(::google::protobuf::int32 value);

  // optional int32 m_giveboy = 10;
  inline bool has_m_giveboy() const;
  inline void clear_m_giveboy();
  static const int kMGiveboyFieldNumber = 10;
  inline ::google::protobuf::int32 m_giveboy() const;
  inline void set_m_giveboy(::google::protobuf::int32 value);

  // optional int32 m_givegirl = 11;
  inline bool has_m_givegirl() const;
  inline void clear_m_givegirl();
  static const int kMGivegirlFieldNumber = 11;
  inline ::google::protobuf::int32 m_givegirl() const;
  inline void set_m_givegirl(::google::protobuf::int32 value);

  // optional int32 m_Xytime = 12;
  inline bool has_m_xytime() const;
  inline void clear_m_xytime();
  static const int kMXytimeFieldNumber = 12;
  inline ::google::protobuf::int32 m_xytime() const;
  inline void set_m_xytime(::google::protobuf::int32 value);

  // optional int32 m_free = 13;
  inline bool has_m_free() const;
  inline void clear_m_free();
  static const int kMFreeFieldNumber = 13;
  inline ::google::protobuf::int32 m_free() const;
  inline void set_m_free(::google::protobuf::int32 value);

  // optional int32 m_buyNum = 14;
  inline bool has_m_buynum() const;
  inline void clear_m_buynum();
  static const int kMBuyNumFieldNumber = 14;
  inline ::google::protobuf::int32 m_buynum() const;
  inline void set_m_buynum(::google::protobuf::int32 value);

  // optional int32 m_consume = 15;
  inline bool has_m_consume() const;
  inline void clear_m_consume();
  static const int kMConsumeFieldNumber = 15;
  inline ::google::protobuf::int32 m_consume() const;
  inline void set_m_consume(::google::protobuf::int32 value);

  // optional int32 m_consumeNum = 16;
  inline bool has_m_consumenum() const;
  inline void clear_m_consumenum();
  static const int kMConsumeNumFieldNumber = 16;
  inline ::google::protobuf::int32 m_consumenum() const;
  inline void set_m_consumenum(::google::protobuf::int32 value);

  // optional int32 m_marrylv = 17;
  inline bool has_m_marrylv() const;
  inline void clear_m_marrylv();
  static const int kMMarrylvFieldNumber = 17;
  inline ::google::protobuf::int32 m_marrylv() const;
  inline void set_m_marrylv(::google::protobuf::int32 value);

  // optional int32 m_childtime = 18;
  inline bool has_m_childtime() const;
  inline void clear_m_childtime();
  static const int kMChildtimeFieldNumber = 18;
  inline ::google::protobuf::int32 m_childtime() const;
  inline void set_m_childtime(::google::protobuf::int32 value);

  // optional int32 m_lockitem = 19;
  inline bool has_m_lockitem() const;
  inline void clear_m_lockitem();
  static const int kMLockitemFieldNumber = 19;
  inline ::google::protobuf::int32 m_lockitem() const;
  inline void set_m_lockitem(::google::protobuf::int32 value);

  // optional int32 m_lockitemExp = 20;
  inline bool has_m_lockitemexp() const;
  inline void clear_m_lockitemexp();
  static const int kMLockitemExpFieldNumber = 20;
  inline ::google::protobuf::int32 m_lockitemexp() const;
  inline void set_m_lockitemexp(::google::protobuf::int32 value);

  // optional int32 m_childitem = 21;
  inline bool has_m_childitem() const;
  inline void clear_m_childitem();
  static const int kMChilditemFieldNumber = 21;
  inline ::google::protobuf::int32 m_childitem() const;
  inline void set_m_childitem(::google::protobuf::int32 value);

  // optional int32 m_childitemExp = 22;
  inline bool has_m_childitemexp() const;
  inline void clear_m_childitemexp();
  static const int kMChilditemExpFieldNumber = 22;
  inline ::google::protobuf::int32 m_childitemexp() const;
  inline void set_m_childitemexp(::google::protobuf::int32 value);

  // optional int32 m_guestprice = 23;
  inline bool has_m_guestprice() const;
  inline void clear_m_guestprice();
  static const int kMGuestpriceFieldNumber = 23;
  inline ::google::protobuf::int32 m_guestprice() const;
  inline void set_m_guestprice(::google::protobuf::int32 value);

  // optional int32 m_guestpricenum = 24;
  inline bool has_m_guestpricenum() const;
  inline void clear_m_guestpricenum();
  static const int kMGuestpricenumFieldNumber = 24;
  inline ::google::protobuf::int32 m_guestpricenum() const;
  inline void set_m_guestpricenum(::google::protobuf::int32 value);

  // optional int32 m_asklimit = 25;
  inline bool has_m_asklimit() const;
  inline void clear_m_asklimit();
  static const int kMAsklimitFieldNumber = 25;
  inline ::google::protobuf::int32 m_asklimit() const;
  inline void set_m_asklimit(::google::protobuf::int32 value);

  // optional int32 m_HyReward = 26;
  inline bool has_m_hyreward() const;
  inline void clear_m_hyreward();
  static const int kMHyRewardFieldNumber = 26;
  inline ::google::protobuf::int32 m_hyreward() const;
  inline void set_m_hyreward(::google::protobuf::int32 value);

  // optional int32 m_tourSceneId = 27;
  inline bool has_m_toursceneid() const;
  inline void clear_m_toursceneid();
  static const int kMTourSceneIdFieldNumber = 27;
  inline ::google::protobuf::int32 m_toursceneid() const;
  inline void set_m_toursceneid(::google::protobuf::int32 value);

  // optional int32 m_tourFollowIndex = 28;
  inline bool has_m_tourfollowindex() const;
  inline void clear_m_tourfollowindex();
  static const int kMTourFollowIndexFieldNumber = 28;
  inline ::google::protobuf::int32 m_tourfollowindex() const;
  inline void set_m_tourfollowindex(::google::protobuf::int32 value);

  // optional string m_Hyicon = 29;
  inline bool has_m_hyicon() const;
  inline void clear_m_hyicon();
  static const int kMHyiconFieldNumber = 29;
  inline const ::std::string& m_hyicon() const;
  inline void set_m_hyicon(const ::std::string& value);
  inline void set_m_hyicon(const char* value);
  inline void set_m_hyicon(const char* value, size_t size);
  inline ::std::string* mutable_m_hyicon();
  inline ::std::string* release_m_hyicon();
  inline void set_allocated_m_hyicon(::std::string* m_hyicon);

  // optional string m_Hyname = 30;
  inline bool has_m_hyname() const;
  inline void clear_m_hyname();
  static const int kMHynameFieldNumber = 30;
  inline const ::std::string& m_hyname() const;
  inline void set_m_hyname(const ::std::string& value);
  inline void set_m_hyname(const char* value);
  inline void set_m_hyname(const char* value, size_t size);
  inline ::std::string* mutable_m_hyname();
  inline ::std::string* release_m_hyname();
  inline void set_allocated_m_hyname(::std::string* m_hyname);

  // optional string m_Xyicon = 31;
  inline bool has_m_xyicon() const;
  inline void clear_m_xyicon();
  static const int kMXyiconFieldNumber = 31;
  inline const ::std::string& m_xyicon() const;
  inline void set_m_xyicon(const ::std::string& value);
  inline void set_m_xyicon(const char* value);
  inline void set_m_xyicon(const char* value, size_t size);
  inline ::std::string* mutable_m_xyicon();
  inline ::std::string* release_m_xyicon();
  inline void set_allocated_m_xyicon(::std::string* m_xyicon);

  // optional string m_Xyname = 32;
  inline bool has_m_xyname() const;
  inline void clear_m_xyname();
  static const int kMXynameFieldNumber = 32;
  inline const ::std::string& m_xyname() const;
  inline void set_m_xyname(const ::std::string& value);
  inline void set_m_xyname(const char* value);
  inline void set_m_xyname(const char* value, size_t size);
  inline ::std::string* mutable_m_xyname();
  inline ::std::string* release_m_xyname();
  inline void set_allocated_m_xyname(::std::string* m_xyname);

  // optional int32 m_redbagNum = 33;
  inline bool has_m_redbagnum() const;
  inline void clear_m_redbagnum();
  static const int kMRedbagNumFieldNumber = 33;
  inline ::google::protobuf::int32 m_redbagnum() const;
  inline void set_m_redbagnum(::google::protobuf::int32 value);

  // optional int32 m_redMoney = 34;
  inline bool has_m_redmoney() const;
  inline void clear_m_redmoney();
  static const int kMRedMoneyFieldNumber = 34;
  inline ::google::protobuf::int32 m_redmoney() const;
  inline void set_m_redmoney(::google::protobuf::int32 value);

  // optional int32 m_redPrice = 35;
  inline bool has_m_redprice() const;
  inline void clear_m_redprice();
  static const int kMRedPriceFieldNumber = 35;
  inline ::google::protobuf::int32 m_redprice() const;
  inline void set_m_redprice(::google::protobuf::int32 value);

  // optional int32 m_sendredReward = 36;
  inline bool has_m_sendredreward() const;
  inline void clear_m_sendredreward();
  static const int kMSendredRewardFieldNumber = 36;
  inline ::google::protobuf::int32 m_sendredreward() const;
  inline void set_m_sendredreward(::google::protobuf::int32 value);

  // optional int32 m_sendredNum = 37;
  inline bool has_m_sendrednum() const;
  inline void clear_m_sendrednum();
  static const int kMSendredNumFieldNumber = 37;
  inline ::google::protobuf::int32 m_sendrednum() const;
  inline void set_m_sendrednum(::google::protobuf::int32 value);

  // optional int32 m_redcollect = 38;
  inline bool has_m_redcollect() const;
  inline void clear_m_redcollect();
  static const int kMRedcollectFieldNumber = 38;
  inline ::google::protobuf::int32 m_redcollect() const;
  inline void set_m_redcollect(::google::protobuf::int32 value);

  // optional int32 m_redcollectNum = 39;
  inline bool has_m_redcollectnum() const;
  inline void clear_m_redcollectnum();
  static const int kMRedcollectNumFieldNumber = 39;
  inline ::google::protobuf::int32 m_redcollectnum() const;
  inline void set_m_redcollectnum(::google::protobuf::int32 value);

  // optional int32 m_cakeMonster = 40;
  inline bool has_m_cakemonster() const;
  inline void clear_m_cakemonster();
  static const int kMCakeMonsterFieldNumber = 40;
  inline ::google::protobuf::int32 m_cakemonster() const;
  inline void set_m_cakemonster(::google::protobuf::int32 value);

  // optional int32 m_HyMonster = 41;
  inline bool has_m_hymonster() const;
  inline void clear_m_hymonster();
  static const int kMHyMonsterFieldNumber = 41;
  inline ::google::protobuf::int32 m_hymonster() const;
  inline void set_m_hymonster(::google::protobuf::int32 value);

  // repeated .proto_ff.E_MarryConstantTourmonsterDesc m_tourMonster = 42;
  inline int m_tourmonster_size() const;
  inline void clear_m_tourmonster();
  static const int kMTourMonsterFieldNumber = 42;
  inline const ::proto_ff::E_MarryConstantTourmonsterDesc& m_tourmonster(int index) const;
  inline ::proto_ff::E_MarryConstantTourmonsterDesc* mutable_m_tourmonster(int index);
  inline ::proto_ff::E_MarryConstantTourmonsterDesc* add_m_tourmonster();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstantTourmonsterDesc >&
      m_tourmonster() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstantTourmonsterDesc >*
      mutable_m_tourmonster();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryConstant)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_price();
  inline void clear_has_m_price();
  inline void set_has_m_buyitem();
  inline void clear_has_m_buyitem();
  inline void set_has_m_dailyitem();
  inline void clear_has_m_dailyitem();
  inline void set_has_m_boxitme();
  inline void clear_has_m_boxitme();
  inline void set_has_m_interval();
  inline void clear_has_m_interval();
  inline void set_has_m_lifetime();
  inline void clear_has_m_lifetime();
  inline void set_has_m_scale();
  inline void clear_has_m_scale();
  inline void set_has_m_giveboy();
  inline void clear_has_m_giveboy();
  inline void set_has_m_givegirl();
  inline void clear_has_m_givegirl();
  inline void set_has_m_xytime();
  inline void clear_has_m_xytime();
  inline void set_has_m_free();
  inline void clear_has_m_free();
  inline void set_has_m_buynum();
  inline void clear_has_m_buynum();
  inline void set_has_m_consume();
  inline void clear_has_m_consume();
  inline void set_has_m_consumenum();
  inline void clear_has_m_consumenum();
  inline void set_has_m_marrylv();
  inline void clear_has_m_marrylv();
  inline void set_has_m_childtime();
  inline void clear_has_m_childtime();
  inline void set_has_m_lockitem();
  inline void clear_has_m_lockitem();
  inline void set_has_m_lockitemexp();
  inline void clear_has_m_lockitemexp();
  inline void set_has_m_childitem();
  inline void clear_has_m_childitem();
  inline void set_has_m_childitemexp();
  inline void clear_has_m_childitemexp();
  inline void set_has_m_guestprice();
  inline void clear_has_m_guestprice();
  inline void set_has_m_guestpricenum();
  inline void clear_has_m_guestpricenum();
  inline void set_has_m_asklimit();
  inline void clear_has_m_asklimit();
  inline void set_has_m_hyreward();
  inline void clear_has_m_hyreward();
  inline void set_has_m_toursceneid();
  inline void clear_has_m_toursceneid();
  inline void set_has_m_tourfollowindex();
  inline void clear_has_m_tourfollowindex();
  inline void set_has_m_hyicon();
  inline void clear_has_m_hyicon();
  inline void set_has_m_hyname();
  inline void clear_has_m_hyname();
  inline void set_has_m_xyicon();
  inline void clear_has_m_xyicon();
  inline void set_has_m_xyname();
  inline void clear_has_m_xyname();
  inline void set_has_m_redbagnum();
  inline void clear_has_m_redbagnum();
  inline void set_has_m_redmoney();
  inline void clear_has_m_redmoney();
  inline void set_has_m_redprice();
  inline void clear_has_m_redprice();
  inline void set_has_m_sendredreward();
  inline void clear_has_m_sendredreward();
  inline void set_has_m_sendrednum();
  inline void clear_has_m_sendrednum();
  inline void set_has_m_redcollect();
  inline void clear_has_m_redcollect();
  inline void set_has_m_redcollectnum();
  inline void clear_has_m_redcollectnum();
  inline void set_has_m_cakemonster();
  inline void clear_has_m_cakemonster();
  inline void set_has_m_hymonster();
  inline void clear_has_m_hymonster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_money_;
  ::google::protobuf::int32 m_price_;
  ::google::protobuf::int32 m_buyitem_;
  ::google::protobuf::int32 m_dailyitem_;
  ::google::protobuf::int32 m_boxitme_;
  ::google::protobuf::int32 m_interval_;
  ::google::protobuf::int32 m_lifetime_;
  ::google::protobuf::int32 m_scale_;
  ::google::protobuf::int32 m_giveboy_;
  ::google::protobuf::int32 m_givegirl_;
  ::google::protobuf::int32 m_xytime_;
  ::google::protobuf::int32 m_free_;
  ::google::protobuf::int32 m_buynum_;
  ::google::protobuf::int32 m_consume_;
  ::google::protobuf::int32 m_consumenum_;
  ::google::protobuf::int32 m_marrylv_;
  ::google::protobuf::int32 m_childtime_;
  ::google::protobuf::int32 m_lockitem_;
  ::google::protobuf::int32 m_lockitemexp_;
  ::google::protobuf::int32 m_childitem_;
  ::google::protobuf::int32 m_childitemexp_;
  ::google::protobuf::int32 m_guestprice_;
  ::google::protobuf::int32 m_guestpricenum_;
  ::google::protobuf::int32 m_asklimit_;
  ::google::protobuf::int32 m_hyreward_;
  ::google::protobuf::int32 m_toursceneid_;
  ::google::protobuf::int32 m_tourfollowindex_;
  ::std::string* m_hyicon_;
  ::std::string* m_hyname_;
  ::std::string* m_xyicon_;
  ::std::string* m_xyname_;
  ::google::protobuf::int32 m_redbagnum_;
  ::google::protobuf::int32 m_redmoney_;
  ::google::protobuf::int32 m_redprice_;
  ::google::protobuf::int32 m_sendredreward_;
  ::google::protobuf::int32 m_sendrednum_;
  ::google::protobuf::int32 m_redcollect_;
  ::google::protobuf::int32 m_redcollectnum_;
  ::google::protobuf::int32 m_cakemonster_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstantTourmonsterDesc > m_tourmonster_;
  ::google::protobuf::int32 m_hymonster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(42 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryConstant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryConstant : public ::google::protobuf::Message {
 public:
  Sheet_MarryConstant();
  virtual ~Sheet_MarryConstant();

  Sheet_MarryConstant(const Sheet_MarryConstant& from);

  inline Sheet_MarryConstant& operator=(const Sheet_MarryConstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryConstant& default_instance();

  void Swap(Sheet_MarryConstant* other);

  // implements Message ----------------------------------------------

  Sheet_MarryConstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryConstant& from);
  void MergeFrom(const Sheet_MarryConstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryConstant E_MarryConstant_List = 1;
  inline int e_marryconstant_list_size() const;
  inline void clear_e_marryconstant_list();
  static const int kEMarryConstantListFieldNumber = 1;
  inline const ::proto_ff::E_MarryConstant& e_marryconstant_list(int index) const;
  inline ::proto_ff::E_MarryConstant* mutable_e_marryconstant_list(int index);
  inline ::proto_ff::E_MarryConstant* add_e_marryconstant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstant >&
      e_marryconstant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstant >*
      mutable_e_marryconstant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryConstant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstant > e_marryconstant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryConstant* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryCommon : public ::google::protobuf::Message {
 public:
  E_MarryCommon();
  virtual ~E_MarryCommon();

  E_MarryCommon(const E_MarryCommon& from);

  inline E_MarryCommon& operator=(const E_MarryCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryCommon& default_instance();

  void Swap(E_MarryCommon* other);

  // implements Message ----------------------------------------------

  E_MarryCommon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryCommon& from);
  void MergeFrom(const E_MarryCommon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryCommon)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryCommon* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryCommon : public ::google::protobuf::Message {
 public:
  Sheet_MarryCommon();
  virtual ~Sheet_MarryCommon();

  Sheet_MarryCommon(const Sheet_MarryCommon& from);

  inline Sheet_MarryCommon& operator=(const Sheet_MarryCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryCommon& default_instance();

  void Swap(Sheet_MarryCommon* other);

  // implements Message ----------------------------------------------

  Sheet_MarryCommon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryCommon& from);
  void MergeFrom(const Sheet_MarryCommon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryCommon E_MarryCommon_List = 1;
  inline int e_marrycommon_list_size() const;
  inline void clear_e_marrycommon_list();
  static const int kEMarryCommonListFieldNumber = 1;
  inline const ::proto_ff::E_MarryCommon& e_marrycommon_list(int index) const;
  inline ::proto_ff::E_MarryCommon* mutable_e_marrycommon_list(int index);
  inline ::proto_ff::E_MarryCommon* add_e_marrycommon_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryCommon >&
      e_marrycommon_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryCommon >*
      mutable_e_marrycommon_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryCommon)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryCommon > e_marrycommon_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryCommon* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryWeddingStageDesc : public ::google::protobuf::Message {
 public:
  E_MarryWeddingStageDesc();
  virtual ~E_MarryWeddingStageDesc();

  E_MarryWeddingStageDesc(const E_MarryWeddingStageDesc& from);

  inline E_MarryWeddingStageDesc& operator=(const E_MarryWeddingStageDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryWeddingStageDesc& default_instance();

  void Swap(E_MarryWeddingStageDesc* other);

  // implements Message ----------------------------------------------

  E_MarryWeddingStageDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryWeddingStageDesc& from);
  void MergeFrom(const E_MarryWeddingStageDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_num = 1;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 1;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryWeddingStageDesc)
 private:
  inline void set_has_m_num();
  inline void clear_has_m_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryWeddingStageDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryWeddingFireDesc : public ::google::protobuf::Message {
 public:
  E_MarryWeddingFireDesc();
  virtual ~E_MarryWeddingFireDesc();

  E_MarryWeddingFireDesc(const E_MarryWeddingFireDesc& from);

  inline E_MarryWeddingFireDesc& operator=(const E_MarryWeddingFireDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryWeddingFireDesc& default_instance();

  void Swap(E_MarryWeddingFireDesc* other);

  // implements Message ----------------------------------------------

  E_MarryWeddingFireDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryWeddingFireDesc& from);
  void MergeFrom(const E_MarryWeddingFireDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_value = 1;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 1;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryWeddingFireDesc)
 private:
  inline void set_has_m_value();
  inline void clear_has_m_value();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_value_;
  ::google::protobuf::int32 m_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryWeddingFireDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryWeddingMoodDesc : public ::google::protobuf::Message {
 public:
  E_MarryWeddingMoodDesc();
  virtual ~E_MarryWeddingMoodDesc();

  E_MarryWeddingMoodDesc(const E_MarryWeddingMoodDesc& from);

  inline E_MarryWeddingMoodDesc& operator=(const E_MarryWeddingMoodDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryWeddingMoodDesc& default_instance();

  void Swap(E_MarryWeddingMoodDesc* other);

  // implements Message ----------------------------------------------

  E_MarryWeddingMoodDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryWeddingMoodDesc& from);
  void MergeFrom(const E_MarryWeddingMoodDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_reward = 1;
  inline bool has_m_reward() const;
  inline void clear_m_reward();
  static const int kMRewardFieldNumber = 1;
  inline ::google::protobuf::int32 m_reward() const;
  inline void set_m_reward(::google::protobuf::int32 value);

  // optional int32 m_value = 2;
  inline bool has_m_value() const;
  inline void clear_m_value();
  static const int kMValueFieldNumber = 2;
  inline ::google::protobuf::int32 m_value() const;
  inline void set_m_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryWeddingMoodDesc)
 private:
  inline void set_has_m_reward();
  inline void clear_has_m_reward();
  inline void set_has_m_value();
  inline void clear_has_m_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_reward_;
  ::google::protobuf::int32 m_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryWeddingMoodDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryWedding : public ::google::protobuf::Message {
 public:
  E_MarryWedding();
  virtual ~E_MarryWedding();

  E_MarryWedding(const E_MarryWedding& from);

  inline E_MarryWedding& operator=(const E_MarryWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryWedding& default_instance();

  void Swap(E_MarryWedding* other);

  // implements Message ----------------------------------------------

  E_MarryWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryWedding& from);
  void MergeFrom(const E_MarryWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_signReward = 2;
  inline bool has_m_signreward() const;
  inline void clear_m_signreward();
  static const int kMSignRewardFieldNumber = 2;
  inline ::google::protobuf::int32 m_signreward() const;
  inline void set_m_signreward(::google::protobuf::int32 value);

  // optional int32 m_signDaynum = 3;
  inline bool has_m_signdaynum() const;
  inline void clear_m_signdaynum();
  static const int kMSignDaynumFieldNumber = 3;
  inline ::google::protobuf::int32 m_signdaynum() const;
  inline void set_m_signdaynum(::google::protobuf::int32 value);

  // optional int32 m_cakeReftime = 4;
  inline bool has_m_cakereftime() const;
  inline void clear_m_cakereftime();
  static const int kMCakeReftimeFieldNumber = 4;
  inline ::google::protobuf::int32 m_cakereftime() const;
  inline void set_m_cakereftime(::google::protobuf::int32 value);

  // optional int32 m_cakeNum = 5;
  inline bool has_m_cakenum() const;
  inline void clear_m_cakenum();
  static const int kMCakeNumFieldNumber = 5;
  inline ::google::protobuf::int32 m_cakenum() const;
  inline void set_m_cakenum(::google::protobuf::int32 value);

  // optional int32 m_cake = 6;
  inline bool has_m_cake() const;
  inline void clear_m_cake();
  static const int kMCakeFieldNumber = 6;
  inline ::google::protobuf::int32 m_cake() const;
  inline void set_m_cake(::google::protobuf::int32 value);

  // optional string m_model = 7;
  inline bool has_m_model() const;
  inline void clear_m_model();
  static const int kMModelFieldNumber = 7;
  inline const ::std::string& m_model() const;
  inline void set_m_model(const ::std::string& value);
  inline void set_m_model(const char* value);
  inline void set_m_model(const char* value, size_t size);
  inline ::std::string* mutable_m_model();
  inline ::std::string* release_m_model();
  inline void set_allocated_m_model(::std::string* m_model);

  // optional int32 m_modeltime = 8;
  inline bool has_m_modeltime() const;
  inline void clear_m_modeltime();
  static const int kMModeltimeFieldNumber = 8;
  inline ::google::protobuf::int32 m_modeltime() const;
  inline void set_m_modeltime(::google::protobuf::int32 value);

  // optional int32 m_cakeReward = 9;
  inline bool has_m_cakereward() const;
  inline void clear_m_cakereward();
  static const int kMCakeRewardFieldNumber = 9;
  inline ::google::protobuf::int32 m_cakereward() const;
  inline void set_m_cakereward(::google::protobuf::int32 value);

  // optional int32 m_signCakenum = 10;
  inline bool has_m_signcakenum() const;
  inline void clear_m_signcakenum();
  static const int kMSignCakenumFieldNumber = 10;
  inline ::google::protobuf::int32 m_signcakenum() const;
  inline void set_m_signcakenum(::google::protobuf::int32 value);

  // optional int32 m_monster = 11;
  inline bool has_m_monster() const;
  inline void clear_m_monster();
  static const int kMMonsterFieldNumber = 11;
  inline ::google::protobuf::int32 m_monster() const;
  inline void set_m_monster(::google::protobuf::int32 value);

  // optional int32 m_monsterNum = 12;
  inline bool has_m_monsternum() const;
  inline void clear_m_monsternum();
  static const int kMMonsterNumFieldNumber = 12;
  inline ::google::protobuf::int32 m_monsternum() const;
  inline void set_m_monsternum(::google::protobuf::int32 value);

  // optional int32 m_monstertime = 13;
  inline bool has_m_monstertime() const;
  inline void clear_m_monstertime();
  static const int kMMonstertimeFieldNumber = 13;
  inline ::google::protobuf::int32 m_monstertime() const;
  inline void set_m_monstertime(::google::protobuf::int32 value);

  // optional int32 m_npcid = 14;
  inline bool has_m_npcid() const;
  inline void clear_m_npcid();
  static const int kMNpcidFieldNumber = 14;
  inline ::google::protobuf::int32 m_npcid() const;
  inline void set_m_npcid(::google::protobuf::int32 value);

  // optional int32 m_npcNum = 15;
  inline bool has_m_npcnum() const;
  inline void clear_m_npcnum();
  static const int kMNpcNumFieldNumber = 15;
  inline ::google::protobuf::int32 m_npcnum() const;
  inline void set_m_npcnum(::google::protobuf::int32 value);

  // optional int32 m_monsterReward = 16;
  inline bool has_m_monsterreward() const;
  inline void clear_m_monsterreward();
  static const int kMMonsterRewardFieldNumber = 16;
  inline ::google::protobuf::int32 m_monsterreward() const;
  inline void set_m_monsterreward(::google::protobuf::int32 value);

  // optional int32 m_monsterDaynum = 17;
  inline bool has_m_monsterdaynum() const;
  inline void clear_m_monsterdaynum();
  static const int kMMonsterDaynumFieldNumber = 17;
  inline ::google::protobuf::int32 m_monsterdaynum() const;
  inline void set_m_monsterdaynum(::google::protobuf::int32 value);

  // optional int32 m_feastId = 18;
  inline bool has_m_feastid() const;
  inline void clear_m_feastid();
  static const int kMFeastIdFieldNumber = 18;
  inline ::google::protobuf::int32 m_feastid() const;
  inline void set_m_feastid(::google::protobuf::int32 value);

  // optional int32 m_feastReward = 19;
  inline bool has_m_feastreward() const;
  inline void clear_m_feastreward();
  static const int kMFeastRewardFieldNumber = 19;
  inline ::google::protobuf::int32 m_feastreward() const;
  inline void set_m_feastreward(::google::protobuf::int32 value);

  // optional int32 m_feastNum = 20;
  inline bool has_m_feastnum() const;
  inline void clear_m_feastnum();
  static const int kMFeastNumFieldNumber = 20;
  inline ::google::protobuf::int32 m_feastnum() const;
  inline void set_m_feastnum(::google::protobuf::int32 value);

  // optional int32 m_interval = 21;
  inline bool has_m_interval() const;
  inline void clear_m_interval();
  static const int kMIntervalFieldNumber = 21;
  inline ::google::protobuf::int32 m_interval() const;
  inline void set_m_interval(::google::protobuf::int32 value);

  // optional int32 m_skillid = 22;
  inline bool has_m_skillid() const;
  inline void clear_m_skillid();
  static const int kMSkillidFieldNumber = 22;
  inline ::google::protobuf::int32 m_skillid() const;
  inline void set_m_skillid(::google::protobuf::int32 value);

  // repeated .proto_ff.E_MarryWeddingStageDesc m_stage = 23;
  inline int m_stage_size() const;
  inline void clear_m_stage();
  static const int kMStageFieldNumber = 23;
  inline const ::proto_ff::E_MarryWeddingStageDesc& m_stage(int index) const;
  inline ::proto_ff::E_MarryWeddingStageDesc* mutable_m_stage(int index);
  inline ::proto_ff::E_MarryWeddingStageDesc* add_m_stage();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingStageDesc >&
      m_stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingStageDesc >*
      mutable_m_stage();

  // repeated .proto_ff.E_MarryWeddingFireDesc m_fire = 24;
  inline int m_fire_size() const;
  inline void clear_m_fire();
  static const int kMFireFieldNumber = 24;
  inline const ::proto_ff::E_MarryWeddingFireDesc& m_fire(int index) const;
  inline ::proto_ff::E_MarryWeddingFireDesc* mutable_m_fire(int index);
  inline ::proto_ff::E_MarryWeddingFireDesc* add_m_fire();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingFireDesc >&
      m_fire() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingFireDesc >*
      mutable_m_fire();

  // repeated .proto_ff.E_MarryWeddingMoodDesc m_mood = 25;
  inline int m_mood_size() const;
  inline void clear_m_mood();
  static const int kMMoodFieldNumber = 25;
  inline const ::proto_ff::E_MarryWeddingMoodDesc& m_mood(int index) const;
  inline ::proto_ff::E_MarryWeddingMoodDesc* mutable_m_mood(int index);
  inline ::proto_ff::E_MarryWeddingMoodDesc* add_m_mood();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingMoodDesc >&
      m_mood() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingMoodDesc >*
      mutable_m_mood();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryWedding)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_signreward();
  inline void clear_has_m_signreward();
  inline void set_has_m_signdaynum();
  inline void clear_has_m_signdaynum();
  inline void set_has_m_cakereftime();
  inline void clear_has_m_cakereftime();
  inline void set_has_m_cakenum();
  inline void clear_has_m_cakenum();
  inline void set_has_m_cake();
  inline void clear_has_m_cake();
  inline void set_has_m_model();
  inline void clear_has_m_model();
  inline void set_has_m_modeltime();
  inline void clear_has_m_modeltime();
  inline void set_has_m_cakereward();
  inline void clear_has_m_cakereward();
  inline void set_has_m_signcakenum();
  inline void clear_has_m_signcakenum();
  inline void set_has_m_monster();
  inline void clear_has_m_monster();
  inline void set_has_m_monsternum();
  inline void clear_has_m_monsternum();
  inline void set_has_m_monstertime();
  inline void clear_has_m_monstertime();
  inline void set_has_m_npcid();
  inline void clear_has_m_npcid();
  inline void set_has_m_npcnum();
  inline void clear_has_m_npcnum();
  inline void set_has_m_monsterreward();
  inline void clear_has_m_monsterreward();
  inline void set_has_m_monsterdaynum();
  inline void clear_has_m_monsterdaynum();
  inline void set_has_m_feastid();
  inline void clear_has_m_feastid();
  inline void set_has_m_feastreward();
  inline void clear_has_m_feastreward();
  inline void set_has_m_feastnum();
  inline void clear_has_m_feastnum();
  inline void set_has_m_interval();
  inline void clear_has_m_interval();
  inline void set_has_m_skillid();
  inline void clear_has_m_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_signreward_;
  ::google::protobuf::int32 m_signdaynum_;
  ::google::protobuf::int32 m_cakereftime_;
  ::google::protobuf::int32 m_cakenum_;
  ::google::protobuf::int32 m_cake_;
  ::std::string* m_model_;
  ::google::protobuf::int32 m_modeltime_;
  ::google::protobuf::int32 m_cakereward_;
  ::google::protobuf::int32 m_signcakenum_;
  ::google::protobuf::int32 m_monster_;
  ::google::protobuf::int32 m_monsternum_;
  ::google::protobuf::int32 m_monstertime_;
  ::google::protobuf::int32 m_npcid_;
  ::google::protobuf::int32 m_npcnum_;
  ::google::protobuf::int32 m_monsterreward_;
  ::google::protobuf::int32 m_monsterdaynum_;
  ::google::protobuf::int32 m_feastid_;
  ::google::protobuf::int32 m_feastreward_;
  ::google::protobuf::int32 m_feastnum_;
  ::google::protobuf::int32 m_interval_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingStageDesc > m_stage_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingFireDesc > m_fire_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingMoodDesc > m_mood_;
  ::google::protobuf::int32 m_skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryWedding* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryWedding : public ::google::protobuf::Message {
 public:
  Sheet_MarryWedding();
  virtual ~Sheet_MarryWedding();

  Sheet_MarryWedding(const Sheet_MarryWedding& from);

  inline Sheet_MarryWedding& operator=(const Sheet_MarryWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryWedding& default_instance();

  void Swap(Sheet_MarryWedding* other);

  // implements Message ----------------------------------------------

  Sheet_MarryWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryWedding& from);
  void MergeFrom(const Sheet_MarryWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryWedding E_MarryWedding_List = 1;
  inline int e_marrywedding_list_size() const;
  inline void clear_e_marrywedding_list();
  static const int kEMarryWeddingListFieldNumber = 1;
  inline const ::proto_ff::E_MarryWedding& e_marrywedding_list(int index) const;
  inline ::proto_ff::E_MarryWedding* mutable_e_marrywedding_list(int index);
  inline ::proto_ff::E_MarryWedding* add_e_marrywedding_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWedding >&
      e_marrywedding_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWedding >*
      mutable_e_marrywedding_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryWedding)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWedding > e_marrywedding_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryWedding* default_instance_;
};
// -------------------------------------------------------------------

class E_MarryExp : public ::google::protobuf::Message {
 public:
  E_MarryExp();
  virtual ~E_MarryExp();

  E_MarryExp(const E_MarryExp& from);

  inline E_MarryExp& operator=(const E_MarryExp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MarryExp& default_instance();

  void Swap(E_MarryExp* other);

  // implements Message ----------------------------------------------

  E_MarryExp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MarryExp& from);
  void MergeFrom(const E_MarryExp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_weddingExp = 2;
  inline bool has_m_weddingexp() const;
  inline void clear_m_weddingexp();
  static const int kMWeddingExpFieldNumber = 2;
  inline ::google::protobuf::int32 m_weddingexp() const;
  inline void set_m_weddingexp(::google::protobuf::int32 value);

  // optional int32 m_dayExpmax = 3;
  inline bool has_m_dayexpmax() const;
  inline void clear_m_dayexpmax();
  static const int kMDayExpmaxFieldNumber = 3;
  inline ::google::protobuf::int32 m_dayexpmax() const;
  inline void set_m_dayexpmax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MarryExp)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_weddingexp();
  inline void clear_has_m_weddingexp();
  inline void set_has_m_dayexpmax();
  inline void clear_has_m_dayexpmax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_weddingexp_;
  ::google::protobuf::int32 m_dayexpmax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static E_MarryExp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MarryExp : public ::google::protobuf::Message {
 public:
  Sheet_MarryExp();
  virtual ~Sheet_MarryExp();

  Sheet_MarryExp(const Sheet_MarryExp& from);

  inline Sheet_MarryExp& operator=(const Sheet_MarryExp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MarryExp& default_instance();

  void Swap(Sheet_MarryExp* other);

  // implements Message ----------------------------------------------

  Sheet_MarryExp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MarryExp& from);
  void MergeFrom(const Sheet_MarryExp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MarryExp E_MarryExp_List = 1;
  inline int e_marryexp_list_size() const;
  inline void clear_e_marryexp_list();
  static const int kEMarryExpListFieldNumber = 1;
  inline const ::proto_ff::E_MarryExp& e_marryexp_list(int index) const;
  inline ::proto_ff::E_MarryExp* mutable_e_marryexp_list(int index);
  inline ::proto_ff::E_MarryExp* add_e_marryexp_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExp >&
      e_marryexp_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExp >*
      mutable_e_marryexp_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MarryExp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExp > e_marryexp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMarry_2eproto();
  friend void protobuf_AssignDesc_E_5fMarry_2eproto();
  friend void protobuf_ShutdownFile_E_5fMarry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MarryExp* default_instance_;
};
// ===================================================================


// ===================================================================

// E_MarryMarriage

// optional int32 m_id = 1;
inline bool E_MarryMarriage::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryMarriage::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryMarriage::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryMarriage::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_id() const {
  return m_id_;
}
inline void E_MarryMarriage::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_weddingName = 2;
inline bool E_MarryMarriage::has_m_weddingname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryMarriage::set_has_m_weddingname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryMarriage::clear_has_m_weddingname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryMarriage::clear_m_weddingname() {
  if (m_weddingname_ != &::google::protobuf::internal::kEmptyString) {
    m_weddingname_->clear();
  }
  clear_has_m_weddingname();
}
inline const ::std::string& E_MarryMarriage::m_weddingname() const {
  return *m_weddingname_;
}
inline void E_MarryMarriage::set_m_weddingname(const ::std::string& value) {
  set_has_m_weddingname();
  if (m_weddingname_ == &::google::protobuf::internal::kEmptyString) {
    m_weddingname_ = new ::std::string;
  }
  m_weddingname_->assign(value);
}
inline void E_MarryMarriage::set_m_weddingname(const char* value) {
  set_has_m_weddingname();
  if (m_weddingname_ == &::google::protobuf::internal::kEmptyString) {
    m_weddingname_ = new ::std::string;
  }
  m_weddingname_->assign(value);
}
inline void E_MarryMarriage::set_m_weddingname(const char* value, size_t size) {
  set_has_m_weddingname();
  if (m_weddingname_ == &::google::protobuf::internal::kEmptyString) {
    m_weddingname_ = new ::std::string;
  }
  m_weddingname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryMarriage::mutable_m_weddingname() {
  set_has_m_weddingname();
  if (m_weddingname_ == &::google::protobuf::internal::kEmptyString) {
    m_weddingname_ = new ::std::string;
  }
  return m_weddingname_;
}
inline ::std::string* E_MarryMarriage::release_m_weddingname() {
  clear_has_m_weddingname();
  if (m_weddingname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_weddingname_;
    m_weddingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryMarriage::set_allocated_m_weddingname(::std::string* m_weddingname) {
  if (m_weddingname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_weddingname_;
  }
  if (m_weddingname) {
    set_has_m_weddingname();
    m_weddingname_ = m_weddingname;
  } else {
    clear_has_m_weddingname();
    m_weddingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_banquet = 3;
inline bool E_MarryMarriage::has_m_banquet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryMarriage::set_has_m_banquet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryMarriage::clear_has_m_banquet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryMarriage::clear_m_banquet() {
  m_banquet_ = 0;
  clear_has_m_banquet();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_banquet() const {
  return m_banquet_;
}
inline void E_MarryMarriage::set_m_banquet(::google::protobuf::int32 value) {
  set_has_m_banquet();
  m_banquet_ = value;
}

// optional int32 m_cruise = 4;
inline bool E_MarryMarriage::has_m_cruise() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarryMarriage::set_has_m_cruise() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarryMarriage::clear_has_m_cruise() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarryMarriage::clear_m_cruise() {
  m_cruise_ = 0;
  clear_has_m_cruise();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_cruise() const {
  return m_cruise_;
}
inline void E_MarryMarriage::set_m_cruise(::google::protobuf::int32 value) {
  set_has_m_cruise();
  m_cruise_ = value;
}

// optional int32 m_money = 5;
inline bool E_MarryMarriage::has_m_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MarryMarriage::set_has_m_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MarryMarriage::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MarryMarriage::clear_m_money() {
  m_money_ = 0;
  clear_has_m_money();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_money() const {
  return m_money_;
}
inline void E_MarryMarriage::set_m_money(::google::protobuf::int32 value) {
  set_has_m_money();
  m_money_ = value;
}

// optional int32 m_price = 6;
inline bool E_MarryMarriage::has_m_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MarryMarriage::set_has_m_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MarryMarriage::clear_has_m_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MarryMarriage::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_price() const {
  return m_price_;
}
inline void E_MarryMarriage::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_firstboxID = 7;
inline bool E_MarryMarriage::has_m_firstboxid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MarryMarriage::set_has_m_firstboxid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MarryMarriage::clear_has_m_firstboxid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MarryMarriage::clear_m_firstboxid() {
  m_firstboxid_ = 0;
  clear_has_m_firstboxid();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_firstboxid() const {
  return m_firstboxid_;
}
inline void E_MarryMarriage::set_m_firstboxid(::google::protobuf::int32 value) {
  set_has_m_firstboxid();
  m_firstboxid_ = value;
}

// optional int32 m_firstaddPower = 8;
inline bool E_MarryMarriage::has_m_firstaddpower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MarryMarriage::set_has_m_firstaddpower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MarryMarriage::clear_has_m_firstaddpower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MarryMarriage::clear_m_firstaddpower() {
  m_firstaddpower_ = 0;
  clear_has_m_firstaddpower();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_firstaddpower() const {
  return m_firstaddpower_;
}
inline void E_MarryMarriage::set_m_firstaddpower(::google::protobuf::int32 value) {
  set_has_m_firstaddpower();
  m_firstaddpower_ = value;
}

// optional int32 m_repeatboxID = 9;
inline bool E_MarryMarriage::has_m_repeatboxid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MarryMarriage::set_has_m_repeatboxid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MarryMarriage::clear_has_m_repeatboxid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MarryMarriage::clear_m_repeatboxid() {
  m_repeatboxid_ = 0;
  clear_has_m_repeatboxid();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_repeatboxid() const {
  return m_repeatboxid_;
}
inline void E_MarryMarriage::set_m_repeatboxid(::google::protobuf::int32 value) {
  set_has_m_repeatboxid();
  m_repeatboxid_ = value;
}

// optional int32 m_repeataddPower = 10;
inline bool E_MarryMarriage::has_m_repeataddpower() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MarryMarriage::set_has_m_repeataddpower() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MarryMarriage::clear_has_m_repeataddpower() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MarryMarriage::clear_m_repeataddpower() {
  m_repeataddpower_ = 0;
  clear_has_m_repeataddpower();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_repeataddpower() const {
  return m_repeataddpower_;
}
inline void E_MarryMarriage::set_m_repeataddpower(::google::protobuf::int32 value) {
  set_has_m_repeataddpower();
  m_repeataddpower_ = value;
}

// optional int32 m_titleID = 11;
inline bool E_MarryMarriage::has_m_titleid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MarryMarriage::set_has_m_titleid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MarryMarriage::clear_has_m_titleid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MarryMarriage::clear_m_titleid() {
  m_titleid_ = 0;
  clear_has_m_titleid();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_titleid() const {
  return m_titleid_;
}
inline void E_MarryMarriage::set_m_titleid(::google::protobuf::int32 value) {
  set_has_m_titleid();
  m_titleid_ = value;
}

// optional int32 m_equip = 12;
inline bool E_MarryMarriage::has_m_equip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MarryMarriage::set_has_m_equip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MarryMarriage::clear_has_m_equip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MarryMarriage::clear_m_equip() {
  m_equip_ = 0;
  clear_has_m_equip();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_equip() const {
  return m_equip_;
}
inline void E_MarryMarriage::set_m_equip(::google::protobuf::int32 value) {
  set_has_m_equip();
  m_equip_ = value;
}

// optional int32 m_freeprice = 13;
inline bool E_MarryMarriage::has_m_freeprice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_MarryMarriage::set_has_m_freeprice() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_MarryMarriage::clear_has_m_freeprice() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_MarryMarriage::clear_m_freeprice() {
  m_freeprice_ = 0;
  clear_has_m_freeprice();
}
inline ::google::protobuf::int32 E_MarryMarriage::m_freeprice() const {
  return m_freeprice_;
}
inline void E_MarryMarriage::set_m_freeprice(::google::protobuf::int32 value) {
  set_has_m_freeprice();
  m_freeprice_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarryMarriage

// repeated .proto_ff.E_MarryMarriage E_MarryMarriage_List = 1;
inline int Sheet_MarryMarriage::e_marrymarriage_list_size() const {
  return e_marrymarriage_list_.size();
}
inline void Sheet_MarryMarriage::clear_e_marrymarriage_list() {
  e_marrymarriage_list_.Clear();
}
inline const ::proto_ff::E_MarryMarriage& Sheet_MarryMarriage::e_marrymarriage_list(int index) const {
  return e_marrymarriage_list_.Get(index);
}
inline ::proto_ff::E_MarryMarriage* Sheet_MarryMarriage::mutable_e_marrymarriage_list(int index) {
  return e_marrymarriage_list_.Mutable(index);
}
inline ::proto_ff::E_MarryMarriage* Sheet_MarryMarriage::add_e_marrymarriage_list() {
  return e_marrymarriage_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryMarriage >&
Sheet_MarryMarriage::e_marrymarriage_list() const {
  return e_marrymarriage_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryMarriage >*
Sheet_MarryMarriage::mutable_e_marrymarriage_list() {
  return &e_marrymarriage_list_;
}

// -------------------------------------------------------------------

// E_MarryBanquet

// optional int32 m_id = 1;
inline bool E_MarryBanquet::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryBanquet::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryBanquet::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryBanquet::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarryBanquet::m_id() const {
  return m_id_;
}
inline void E_MarryBanquet::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_beginTime = 2;
inline bool E_MarryBanquet::has_m_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryBanquet::set_has_m_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryBanquet::clear_has_m_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryBanquet::clear_m_begintime() {
  if (m_begintime_ != &::google::protobuf::internal::kEmptyString) {
    m_begintime_->clear();
  }
  clear_has_m_begintime();
}
inline const ::std::string& E_MarryBanquet::m_begintime() const {
  return *m_begintime_;
}
inline void E_MarryBanquet::set_m_begintime(const ::std::string& value) {
  set_has_m_begintime();
  if (m_begintime_ == &::google::protobuf::internal::kEmptyString) {
    m_begintime_ = new ::std::string;
  }
  m_begintime_->assign(value);
}
inline void E_MarryBanquet::set_m_begintime(const char* value) {
  set_has_m_begintime();
  if (m_begintime_ == &::google::protobuf::internal::kEmptyString) {
    m_begintime_ = new ::std::string;
  }
  m_begintime_->assign(value);
}
inline void E_MarryBanquet::set_m_begintime(const char* value, size_t size) {
  set_has_m_begintime();
  if (m_begintime_ == &::google::protobuf::internal::kEmptyString) {
    m_begintime_ = new ::std::string;
  }
  m_begintime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryBanquet::mutable_m_begintime() {
  set_has_m_begintime();
  if (m_begintime_ == &::google::protobuf::internal::kEmptyString) {
    m_begintime_ = new ::std::string;
  }
  return m_begintime_;
}
inline ::std::string* E_MarryBanquet::release_m_begintime() {
  clear_has_m_begintime();
  if (m_begintime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_begintime_;
    m_begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryBanquet::set_allocated_m_begintime(::std::string* m_begintime) {
  if (m_begintime_ != &::google::protobuf::internal::kEmptyString) {
    delete m_begintime_;
  }
  if (m_begintime) {
    set_has_m_begintime();
    m_begintime_ = m_begintime;
  } else {
    clear_has_m_begintime();
    m_begintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_finishTime = 3;
inline bool E_MarryBanquet::has_m_finishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryBanquet::set_has_m_finishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryBanquet::clear_has_m_finishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryBanquet::clear_m_finishtime() {
  if (m_finishtime_ != &::google::protobuf::internal::kEmptyString) {
    m_finishtime_->clear();
  }
  clear_has_m_finishtime();
}
inline const ::std::string& E_MarryBanquet::m_finishtime() const {
  return *m_finishtime_;
}
inline void E_MarryBanquet::set_m_finishtime(const ::std::string& value) {
  set_has_m_finishtime();
  if (m_finishtime_ == &::google::protobuf::internal::kEmptyString) {
    m_finishtime_ = new ::std::string;
  }
  m_finishtime_->assign(value);
}
inline void E_MarryBanquet::set_m_finishtime(const char* value) {
  set_has_m_finishtime();
  if (m_finishtime_ == &::google::protobuf::internal::kEmptyString) {
    m_finishtime_ = new ::std::string;
  }
  m_finishtime_->assign(value);
}
inline void E_MarryBanquet::set_m_finishtime(const char* value, size_t size) {
  set_has_m_finishtime();
  if (m_finishtime_ == &::google::protobuf::internal::kEmptyString) {
    m_finishtime_ = new ::std::string;
  }
  m_finishtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryBanquet::mutable_m_finishtime() {
  set_has_m_finishtime();
  if (m_finishtime_ == &::google::protobuf::internal::kEmptyString) {
    m_finishtime_ = new ::std::string;
  }
  return m_finishtime_;
}
inline ::std::string* E_MarryBanquet::release_m_finishtime() {
  clear_has_m_finishtime();
  if (m_finishtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_finishtime_;
    m_finishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryBanquet::set_allocated_m_finishtime(::std::string* m_finishtime) {
  if (m_finishtime_ != &::google::protobuf::internal::kEmptyString) {
    delete m_finishtime_;
  }
  if (m_finishtime) {
    set_has_m_finishtime();
    m_finishtime_ = m_finishtime;
  } else {
    clear_has_m_finishtime();
    m_finishtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_pre_broad_sec = 4;
inline bool E_MarryBanquet::has_m_pre_broad_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarryBanquet::set_has_m_pre_broad_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarryBanquet::clear_has_m_pre_broad_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarryBanquet::clear_m_pre_broad_sec() {
  m_pre_broad_sec_ = 0;
  clear_has_m_pre_broad_sec();
}
inline ::google::protobuf::int32 E_MarryBanquet::m_pre_broad_sec() const {
  return m_pre_broad_sec_;
}
inline void E_MarryBanquet::set_m_pre_broad_sec(::google::protobuf::int32 value) {
  set_has_m_pre_broad_sec();
  m_pre_broad_sec_ = value;
}

// optional int32 m_broad_inter_sec = 5;
inline bool E_MarryBanquet::has_m_broad_inter_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MarryBanquet::set_has_m_broad_inter_sec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MarryBanquet::clear_has_m_broad_inter_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MarryBanquet::clear_m_broad_inter_sec() {
  m_broad_inter_sec_ = 0;
  clear_has_m_broad_inter_sec();
}
inline ::google::protobuf::int32 E_MarryBanquet::m_broad_inter_sec() const {
  return m_broad_inter_sec_;
}
inline void E_MarryBanquet::set_m_broad_inter_sec(::google::protobuf::int32 value) {
  set_has_m_broad_inter_sec();
  m_broad_inter_sec_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarryBanquet

// repeated .proto_ff.E_MarryBanquet E_MarryBanquet_List = 1;
inline int Sheet_MarryBanquet::e_marrybanquet_list_size() const {
  return e_marrybanquet_list_.size();
}
inline void Sheet_MarryBanquet::clear_e_marrybanquet_list() {
  e_marrybanquet_list_.Clear();
}
inline const ::proto_ff::E_MarryBanquet& Sheet_MarryBanquet::e_marrybanquet_list(int index) const {
  return e_marrybanquet_list_.Get(index);
}
inline ::proto_ff::E_MarryBanquet* Sheet_MarryBanquet::mutable_e_marrybanquet_list(int index) {
  return e_marrybanquet_list_.Mutable(index);
}
inline ::proto_ff::E_MarryBanquet* Sheet_MarryBanquet::add_e_marrybanquet_list() {
  return e_marrybanquet_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryBanquet >&
Sheet_MarryBanquet::e_marrybanquet_list() const {
  return e_marrybanquet_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryBanquet >*
Sheet_MarryBanquet::mutable_e_marrybanquet_list() {
  return &e_marrybanquet_list_;
}

// -------------------------------------------------------------------

// E_MarryLocklvAttributeDesc

// optional int32 m_value = 1;
inline bool E_MarryLocklvAttributeDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryLocklvAttributeDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryLocklvAttributeDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryLocklvAttributeDesc::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_MarryLocklvAttributeDesc::m_value() const {
  return m_value_;
}
inline void E_MarryLocklvAttributeDesc::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_type = 2;
inline bool E_MarryLocklvAttributeDesc::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryLocklvAttributeDesc::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryLocklvAttributeDesc::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryLocklvAttributeDesc::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MarryLocklvAttributeDesc::m_type() const {
  return m_type_;
}
inline void E_MarryLocklvAttributeDesc::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// -------------------------------------------------------------------

// E_MarryLocklvSkillDesc

// optional int32 m_lv = 1;
inline bool E_MarryLocklvSkillDesc::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryLocklvSkillDesc::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryLocklvSkillDesc::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryLocklvSkillDesc::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_MarryLocklvSkillDesc::m_lv() const {
  return m_lv_;
}
inline void E_MarryLocklvSkillDesc::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_skill = 2;
inline bool E_MarryLocklvSkillDesc::has_m_skill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryLocklvSkillDesc::set_has_m_skill() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryLocklvSkillDesc::clear_has_m_skill() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryLocklvSkillDesc::clear_m_skill() {
  m_skill_ = 0;
  clear_has_m_skill();
}
inline ::google::protobuf::int32 E_MarryLocklvSkillDesc::m_skill() const {
  return m_skill_;
}
inline void E_MarryLocklvSkillDesc::set_m_skill(::google::protobuf::int32 value) {
  set_has_m_skill();
  m_skill_ = value;
}

// -------------------------------------------------------------------

// E_MarryLocklv

// optional int32 m_id = 1;
inline bool E_MarryLocklv::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryLocklv::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryLocklv::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryLocklv::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarryLocklv::m_id() const {
  return m_id_;
}
inline void E_MarryLocklv::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_lv = 2;
inline bool E_MarryLocklv::has_m_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryLocklv::set_has_m_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryLocklv::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryLocklv::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_MarryLocklv::m_lv() const {
  return m_lv_;
}
inline void E_MarryLocklv::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_Exp = 3;
inline bool E_MarryLocklv::has_m_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryLocklv::set_has_m_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryLocklv::clear_has_m_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryLocklv::clear_m_exp() {
  m_exp_ = 0;
  clear_has_m_exp();
}
inline ::google::protobuf::int32 E_MarryLocklv::m_exp() const {
  return m_exp_;
}
inline void E_MarryLocklv::set_m_exp(::google::protobuf::int32 value) {
  set_has_m_exp();
  m_exp_ = value;
}

// repeated .proto_ff.E_MarryLocklvAttributeDesc m_Attribute = 4;
inline int E_MarryLocklv::m_attribute_size() const {
  return m_attribute_.size();
}
inline void E_MarryLocklv::clear_m_attribute() {
  m_attribute_.Clear();
}
inline const ::proto_ff::E_MarryLocklvAttributeDesc& E_MarryLocklv::m_attribute(int index) const {
  return m_attribute_.Get(index);
}
inline ::proto_ff::E_MarryLocklvAttributeDesc* E_MarryLocklv::mutable_m_attribute(int index) {
  return m_attribute_.Mutable(index);
}
inline ::proto_ff::E_MarryLocklvAttributeDesc* E_MarryLocklv::add_m_attribute() {
  return m_attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvAttributeDesc >&
E_MarryLocklv::m_attribute() const {
  return m_attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvAttributeDesc >*
E_MarryLocklv::mutable_m_attribute() {
  return &m_attribute_;
}

// repeated .proto_ff.E_MarryLocklvSkillDesc m_skill = 5;
inline int E_MarryLocklv::m_skill_size() const {
  return m_skill_.size();
}
inline void E_MarryLocklv::clear_m_skill() {
  m_skill_.Clear();
}
inline const ::proto_ff::E_MarryLocklvSkillDesc& E_MarryLocklv::m_skill(int index) const {
  return m_skill_.Get(index);
}
inline ::proto_ff::E_MarryLocklvSkillDesc* E_MarryLocklv::mutable_m_skill(int index) {
  return m_skill_.Mutable(index);
}
inline ::proto_ff::E_MarryLocklvSkillDesc* E_MarryLocklv::add_m_skill() {
  return m_skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvSkillDesc >&
E_MarryLocklv::m_skill() const {
  return m_skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklvSkillDesc >*
E_MarryLocklv::mutable_m_skill() {
  return &m_skill_;
}

// -------------------------------------------------------------------

// Sheet_MarryLocklv

// repeated .proto_ff.E_MarryLocklv E_MarryLocklv_List = 1;
inline int Sheet_MarryLocklv::e_marrylocklv_list_size() const {
  return e_marrylocklv_list_.size();
}
inline void Sheet_MarryLocklv::clear_e_marrylocklv_list() {
  e_marrylocklv_list_.Clear();
}
inline const ::proto_ff::E_MarryLocklv& Sheet_MarryLocklv::e_marrylocklv_list(int index) const {
  return e_marrylocklv_list_.Get(index);
}
inline ::proto_ff::E_MarryLocklv* Sheet_MarryLocklv::mutable_e_marrylocklv_list(int index) {
  return e_marrylocklv_list_.Mutable(index);
}
inline ::proto_ff::E_MarryLocklv* Sheet_MarryLocklv::add_e_marrylocklv_list() {
  return e_marrylocklv_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklv >&
Sheet_MarryLocklv::e_marrylocklv_list() const {
  return e_marrylocklv_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLocklv >*
Sheet_MarryLocklv::mutable_e_marrylocklv_list() {
  return &e_marrylocklv_list_;
}

// -------------------------------------------------------------------

// E_MarryLockskillSkillDesc

// optional int32 m_grade = 1;
inline bool E_MarryLockskillSkillDesc::has_m_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryLockskillSkillDesc::set_has_m_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryLockskillSkillDesc::clear_has_m_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryLockskillSkillDesc::clear_m_grade() {
  m_grade_ = 0;
  clear_has_m_grade();
}
inline ::google::protobuf::int32 E_MarryLockskillSkillDesc::m_grade() const {
  return m_grade_;
}
inline void E_MarryLockskillSkillDesc::set_m_grade(::google::protobuf::int32 value) {
  set_has_m_grade();
  m_grade_ = value;
}

// optional int32 m_lv = 2;
inline bool E_MarryLockskillSkillDesc::has_m_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryLockskillSkillDesc::set_has_m_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryLockskillSkillDesc::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryLockskillSkillDesc::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_MarryLockskillSkillDesc::m_lv() const {
  return m_lv_;
}
inline void E_MarryLockskillSkillDesc::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// -------------------------------------------------------------------

// E_MarryLockskill

// optional int32 m_id = 1;
inline bool E_MarryLockskill::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryLockskill::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryLockskill::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryLockskill::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarryLockskill::m_id() const {
  return m_id_;
}
inline void E_MarryLockskill::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_order = 2;
inline bool E_MarryLockskill::has_m_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryLockskill::set_has_m_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryLockskill::clear_has_m_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryLockskill::clear_m_order() {
  m_order_ = 0;
  clear_has_m_order();
}
inline ::google::protobuf::int32 E_MarryLockskill::m_order() const {
  return m_order_;
}
inline void E_MarryLockskill::set_m_order(::google::protobuf::int32 value) {
  set_has_m_order();
  m_order_ = value;
}

// optional int32 m_skillid = 3;
inline bool E_MarryLockskill::has_m_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryLockskill::set_has_m_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryLockskill::clear_has_m_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryLockskill::clear_m_skillid() {
  m_skillid_ = 0;
  clear_has_m_skillid();
}
inline ::google::protobuf::int32 E_MarryLockskill::m_skillid() const {
  return m_skillid_;
}
inline void E_MarryLockskill::set_m_skillid(::google::protobuf::int32 value) {
  set_has_m_skillid();
  m_skillid_ = value;
}

// repeated .proto_ff.E_MarryLockskillSkillDesc m_skill = 4;
inline int E_MarryLockskill::m_skill_size() const {
  return m_skill_.size();
}
inline void E_MarryLockskill::clear_m_skill() {
  m_skill_.Clear();
}
inline const ::proto_ff::E_MarryLockskillSkillDesc& E_MarryLockskill::m_skill(int index) const {
  return m_skill_.Get(index);
}
inline ::proto_ff::E_MarryLockskillSkillDesc* E_MarryLockskill::mutable_m_skill(int index) {
  return m_skill_.Mutable(index);
}
inline ::proto_ff::E_MarryLockskillSkillDesc* E_MarryLockskill::add_m_skill() {
  return m_skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskillSkillDesc >&
E_MarryLockskill::m_skill() const {
  return m_skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskillSkillDesc >*
E_MarryLockskill::mutable_m_skill() {
  return &m_skill_;
}

// -------------------------------------------------------------------

// Sheet_MarryLockskill

// repeated .proto_ff.E_MarryLockskill E_MarryLockskill_List = 1;
inline int Sheet_MarryLockskill::e_marrylockskill_list_size() const {
  return e_marrylockskill_list_.size();
}
inline void Sheet_MarryLockskill::clear_e_marrylockskill_list() {
  e_marrylockskill_list_.Clear();
}
inline const ::proto_ff::E_MarryLockskill& Sheet_MarryLockskill::e_marrylockskill_list(int index) const {
  return e_marrylockskill_list_.Get(index);
}
inline ::proto_ff::E_MarryLockskill* Sheet_MarryLockskill::mutable_e_marrylockskill_list(int index) {
  return e_marrylockskill_list_.Mutable(index);
}
inline ::proto_ff::E_MarryLockskill* Sheet_MarryLockskill::add_e_marrylockskill_list() {
  return e_marrylockskill_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskill >&
Sheet_MarryLockskill::e_marrylockskill_list() const {
  return e_marrylockskill_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryLockskill >*
Sheet_MarryLockskill::mutable_e_marrylockskill_list() {
  return &e_marrylockskill_list_;
}

// -------------------------------------------------------------------

// E_MarryChildAttributeDesc

// optional int64 m_value = 1;
inline bool E_MarryChildAttributeDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryChildAttributeDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryChildAttributeDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryChildAttributeDesc::clear_m_value() {
  m_value_ = GOOGLE_LONGLONG(0);
  clear_has_m_value();
}
inline ::google::protobuf::int64 E_MarryChildAttributeDesc::m_value() const {
  return m_value_;
}
inline void E_MarryChildAttributeDesc::set_m_value(::google::protobuf::int64 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_type = 2;
inline bool E_MarryChildAttributeDesc::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryChildAttributeDesc::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryChildAttributeDesc::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryChildAttributeDesc::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MarryChildAttributeDesc::m_type() const {
  return m_type_;
}
inline void E_MarryChildAttributeDesc::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// -------------------------------------------------------------------

// E_MarryChildStariattributeDesc

// optional int64 m_value = 1;
inline bool E_MarryChildStariattributeDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryChildStariattributeDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryChildStariattributeDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryChildStariattributeDesc::clear_m_value() {
  m_value_ = GOOGLE_LONGLONG(0);
  clear_has_m_value();
}
inline ::google::protobuf::int64 E_MarryChildStariattributeDesc::m_value() const {
  return m_value_;
}
inline void E_MarryChildStariattributeDesc::set_m_value(::google::protobuf::int64 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_type = 2;
inline bool E_MarryChildStariattributeDesc::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryChildStariattributeDesc::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryChildStariattributeDesc::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryChildStariattributeDesc::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MarryChildStariattributeDesc::m_type() const {
  return m_type_;
}
inline void E_MarryChildStariattributeDesc::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// -------------------------------------------------------------------

// E_MarryChild

// optional int64 m_childID = 1;
inline bool E_MarryChild::has_m_childid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryChild::set_has_m_childid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryChild::clear_has_m_childid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryChild::clear_m_childid() {
  m_childid_ = GOOGLE_LONGLONG(0);
  clear_has_m_childid();
}
inline ::google::protobuf::int64 E_MarryChild::m_childid() const {
  return m_childid_;
}
inline void E_MarryChild::set_m_childid(::google::protobuf::int64 value) {
  set_has_m_childid();
  m_childid_ = value;
}

// optional int64 m_itemId = 2;
inline bool E_MarryChild::has_m_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryChild::set_has_m_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryChild::clear_has_m_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryChild::clear_m_itemid() {
  m_itemid_ = GOOGLE_LONGLONG(0);
  clear_has_m_itemid();
}
inline ::google::protobuf::int64 E_MarryChild::m_itemid() const {
  return m_itemid_;
}
inline void E_MarryChild::set_m_itemid(::google::protobuf::int64 value) {
  set_has_m_itemid();
  m_itemid_ = value;
}

// optional string m_childName = 3;
inline bool E_MarryChild::has_m_childname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryChild::set_has_m_childname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryChild::clear_has_m_childname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryChild::clear_m_childname() {
  if (m_childname_ != &::google::protobuf::internal::kEmptyString) {
    m_childname_->clear();
  }
  clear_has_m_childname();
}
inline const ::std::string& E_MarryChild::m_childname() const {
  return *m_childname_;
}
inline void E_MarryChild::set_m_childname(const ::std::string& value) {
  set_has_m_childname();
  if (m_childname_ == &::google::protobuf::internal::kEmptyString) {
    m_childname_ = new ::std::string;
  }
  m_childname_->assign(value);
}
inline void E_MarryChild::set_m_childname(const char* value) {
  set_has_m_childname();
  if (m_childname_ == &::google::protobuf::internal::kEmptyString) {
    m_childname_ = new ::std::string;
  }
  m_childname_->assign(value);
}
inline void E_MarryChild::set_m_childname(const char* value, size_t size) {
  set_has_m_childname();
  if (m_childname_ == &::google::protobuf::internal::kEmptyString) {
    m_childname_ = new ::std::string;
  }
  m_childname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryChild::mutable_m_childname() {
  set_has_m_childname();
  if (m_childname_ == &::google::protobuf::internal::kEmptyString) {
    m_childname_ = new ::std::string;
  }
  return m_childname_;
}
inline ::std::string* E_MarryChild::release_m_childname() {
  clear_has_m_childname();
  if (m_childname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_childname_;
    m_childname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryChild::set_allocated_m_childname(::std::string* m_childname) {
  if (m_childname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_childname_;
  }
  if (m_childname) {
    set_has_m_childname();
    m_childname_ = m_childname;
  } else {
    clear_has_m_childname();
    m_childname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_childQuality = 4;
inline bool E_MarryChild::has_m_childquality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarryChild::set_has_m_childquality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarryChild::clear_has_m_childquality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarryChild::clear_m_childquality() {
  m_childquality_ = 0;
  clear_has_m_childquality();
}
inline ::google::protobuf::int32 E_MarryChild::m_childquality() const {
  return m_childquality_;
}
inline void E_MarryChild::set_m_childquality(::google::protobuf::int32 value) {
  set_has_m_childquality();
  m_childquality_ = value;
}

// optional int32 m_handZ = 5;
inline bool E_MarryChild::has_m_handz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MarryChild::set_has_m_handz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MarryChild::clear_has_m_handz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MarryChild::clear_m_handz() {
  m_handz_ = 0;
  clear_has_m_handz();
}
inline ::google::protobuf::int32 E_MarryChild::m_handz() const {
  return m_handz_;
}
inline void E_MarryChild::set_m_handz(::google::protobuf::int32 value) {
  set_has_m_handz();
  m_handz_ = value;
}

// optional string m_handZName = 6;
inline bool E_MarryChild::has_m_handzname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MarryChild::set_has_m_handzname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MarryChild::clear_has_m_handzname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MarryChild::clear_m_handzname() {
  if (m_handzname_ != &::google::protobuf::internal::kEmptyString) {
    m_handzname_->clear();
  }
  clear_has_m_handzname();
}
inline const ::std::string& E_MarryChild::m_handzname() const {
  return *m_handzname_;
}
inline void E_MarryChild::set_m_handzname(const ::std::string& value) {
  set_has_m_handzname();
  if (m_handzname_ == &::google::protobuf::internal::kEmptyString) {
    m_handzname_ = new ::std::string;
  }
  m_handzname_->assign(value);
}
inline void E_MarryChild::set_m_handzname(const char* value) {
  set_has_m_handzname();
  if (m_handzname_ == &::google::protobuf::internal::kEmptyString) {
    m_handzname_ = new ::std::string;
  }
  m_handzname_->assign(value);
}
inline void E_MarryChild::set_m_handzname(const char* value, size_t size) {
  set_has_m_handzname();
  if (m_handzname_ == &::google::protobuf::internal::kEmptyString) {
    m_handzname_ = new ::std::string;
  }
  m_handzname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryChild::mutable_m_handzname() {
  set_has_m_handzname();
  if (m_handzname_ == &::google::protobuf::internal::kEmptyString) {
    m_handzname_ = new ::std::string;
  }
  return m_handzname_;
}
inline ::std::string* E_MarryChild::release_m_handzname() {
  clear_has_m_handzname();
  if (m_handzname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_handzname_;
    m_handzname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryChild::set_allocated_m_handzname(::std::string* m_handzname) {
  if (m_handzname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_handzname_;
  }
  if (m_handzname) {
    set_has_m_handzname();
    m_handzname_ = m_handzname;
  } else {
    clear_has_m_handzname();
    m_handzname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_skillID = 7;
inline bool E_MarryChild::has_m_skillid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MarryChild::set_has_m_skillid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MarryChild::clear_has_m_skillid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MarryChild::clear_m_skillid() {
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    m_skillid_->clear();
  }
  clear_has_m_skillid();
}
inline const ::std::string& E_MarryChild::m_skillid() const {
  return *m_skillid_;
}
inline void E_MarryChild::set_m_skillid(const ::std::string& value) {
  set_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    m_skillid_ = new ::std::string;
  }
  m_skillid_->assign(value);
}
inline void E_MarryChild::set_m_skillid(const char* value) {
  set_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    m_skillid_ = new ::std::string;
  }
  m_skillid_->assign(value);
}
inline void E_MarryChild::set_m_skillid(const char* value, size_t size) {
  set_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    m_skillid_ = new ::std::string;
  }
  m_skillid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryChild::mutable_m_skillid() {
  set_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    m_skillid_ = new ::std::string;
  }
  return m_skillid_;
}
inline ::std::string* E_MarryChild::release_m_skillid() {
  clear_has_m_skillid();
  if (m_skillid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_skillid_;
    m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryChild::set_allocated_m_skillid(::std::string* m_skillid) {
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillid_;
  }
  if (m_skillid) {
    set_has_m_skillid();
    m_skillid_ = m_skillid;
  } else {
    clear_has_m_skillid();
    m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 m_starId = 8;
inline bool E_MarryChild::has_m_starid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MarryChild::set_has_m_starid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MarryChild::clear_has_m_starid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MarryChild::clear_m_starid() {
  m_starid_ = GOOGLE_LONGLONG(0);
  clear_has_m_starid();
}
inline ::google::protobuf::int64 E_MarryChild::m_starid() const {
  return m_starid_;
}
inline void E_MarryChild::set_m_starid(::google::protobuf::int64 value) {
  set_has_m_starid();
  m_starid_ = value;
}

// optional string m_starNum = 9;
inline bool E_MarryChild::has_m_starnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MarryChild::set_has_m_starnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MarryChild::clear_has_m_starnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MarryChild::clear_m_starnum() {
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    m_starnum_->clear();
  }
  clear_has_m_starnum();
}
inline const ::std::string& E_MarryChild::m_starnum() const {
  return *m_starnum_;
}
inline void E_MarryChild::set_m_starnum(const ::std::string& value) {
  set_has_m_starnum();
  if (m_starnum_ == &::google::protobuf::internal::kEmptyString) {
    m_starnum_ = new ::std::string;
  }
  m_starnum_->assign(value);
}
inline void E_MarryChild::set_m_starnum(const char* value) {
  set_has_m_starnum();
  if (m_starnum_ == &::google::protobuf::internal::kEmptyString) {
    m_starnum_ = new ::std::string;
  }
  m_starnum_->assign(value);
}
inline void E_MarryChild::set_m_starnum(const char* value, size_t size) {
  set_has_m_starnum();
  if (m_starnum_ == &::google::protobuf::internal::kEmptyString) {
    m_starnum_ = new ::std::string;
  }
  m_starnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryChild::mutable_m_starnum() {
  set_has_m_starnum();
  if (m_starnum_ == &::google::protobuf::internal::kEmptyString) {
    m_starnum_ = new ::std::string;
  }
  return m_starnum_;
}
inline ::std::string* E_MarryChild::release_m_starnum() {
  clear_has_m_starnum();
  if (m_starnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_starnum_;
    m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryChild::set_allocated_m_starnum(::std::string* m_starnum) {
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (m_starnum) {
    set_has_m_starnum();
    m_starnum_ = m_starnum;
  } else {
    clear_has_m_starnum();
    m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.E_MarryChildAttributeDesc m_attribute = 10;
inline int E_MarryChild::m_attribute_size() const {
  return m_attribute_.size();
}
inline void E_MarryChild::clear_m_attribute() {
  m_attribute_.Clear();
}
inline const ::proto_ff::E_MarryChildAttributeDesc& E_MarryChild::m_attribute(int index) const {
  return m_attribute_.Get(index);
}
inline ::proto_ff::E_MarryChildAttributeDesc* E_MarryChild::mutable_m_attribute(int index) {
  return m_attribute_.Mutable(index);
}
inline ::proto_ff::E_MarryChildAttributeDesc* E_MarryChild::add_m_attribute() {
  return m_attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildAttributeDesc >&
E_MarryChild::m_attribute() const {
  return m_attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildAttributeDesc >*
E_MarryChild::mutable_m_attribute() {
  return &m_attribute_;
}

// repeated .proto_ff.E_MarryChildStariattributeDesc m_starIattribute = 11;
inline int E_MarryChild::m_stariattribute_size() const {
  return m_stariattribute_.size();
}
inline void E_MarryChild::clear_m_stariattribute() {
  m_stariattribute_.Clear();
}
inline const ::proto_ff::E_MarryChildStariattributeDesc& E_MarryChild::m_stariattribute(int index) const {
  return m_stariattribute_.Get(index);
}
inline ::proto_ff::E_MarryChildStariattributeDesc* E_MarryChild::mutable_m_stariattribute(int index) {
  return m_stariattribute_.Mutable(index);
}
inline ::proto_ff::E_MarryChildStariattributeDesc* E_MarryChild::add_m_stariattribute() {
  return m_stariattribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildStariattributeDesc >&
E_MarryChild::m_stariattribute() const {
  return m_stariattribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildStariattributeDesc >*
E_MarryChild::mutable_m_stariattribute() {
  return &m_stariattribute_;
}

// -------------------------------------------------------------------

// Sheet_MarryChild

// repeated .proto_ff.E_MarryChild E_MarryChild_List = 1;
inline int Sheet_MarryChild::e_marrychild_list_size() const {
  return e_marrychild_list_.size();
}
inline void Sheet_MarryChild::clear_e_marrychild_list() {
  e_marrychild_list_.Clear();
}
inline const ::proto_ff::E_MarryChild& Sheet_MarryChild::e_marrychild_list(int index) const {
  return e_marrychild_list_.Get(index);
}
inline ::proto_ff::E_MarryChild* Sheet_MarryChild::mutable_e_marrychild_list(int index) {
  return e_marrychild_list_.Mutable(index);
}
inline ::proto_ff::E_MarryChild* Sheet_MarryChild::add_e_marrychild_list() {
  return e_marrychild_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChild >&
Sheet_MarryChild::e_marrychild_list() const {
  return e_marrychild_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChild >*
Sheet_MarryChild::mutable_e_marrychild_list() {
  return &e_marrychild_list_;
}

// -------------------------------------------------------------------

// E_MarryChildvalue

// optional int64 m_id = 1;
inline bool E_MarryChildvalue::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryChildvalue::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryChildvalue::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryChildvalue::clear_m_id() {
  m_id_ = GOOGLE_LONGLONG(0);
  clear_has_m_id();
}
inline ::google::protobuf::int64 E_MarryChildvalue::m_id() const {
  return m_id_;
}
inline void E_MarryChildvalue::set_m_id(::google::protobuf::int64 value) {
  set_has_m_id();
  m_id_ = value;
}

// repeated int32 m_lvValue = 2;
inline int E_MarryChildvalue::m_lvvalue_size() const {
  return m_lvvalue_.size();
}
inline void E_MarryChildvalue::clear_m_lvvalue() {
  m_lvvalue_.Clear();
}
inline ::google::protobuf::int32 E_MarryChildvalue::m_lvvalue(int index) const {
  return m_lvvalue_.Get(index);
}
inline void E_MarryChildvalue::set_m_lvvalue(int index, ::google::protobuf::int32 value) {
  m_lvvalue_.Set(index, value);
}
inline void E_MarryChildvalue::add_m_lvvalue(::google::protobuf::int32 value) {
  m_lvvalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_MarryChildvalue::m_lvvalue() const {
  return m_lvvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_MarryChildvalue::mutable_m_lvvalue() {
  return &m_lvvalue_;
}

// -------------------------------------------------------------------

// Sheet_MarryChildvalue

// repeated .proto_ff.E_MarryChildvalue E_MarryChildvalue_List = 1;
inline int Sheet_MarryChildvalue::e_marrychildvalue_list_size() const {
  return e_marrychildvalue_list_.size();
}
inline void Sheet_MarryChildvalue::clear_e_marrychildvalue_list() {
  e_marrychildvalue_list_.Clear();
}
inline const ::proto_ff::E_MarryChildvalue& Sheet_MarryChildvalue::e_marrychildvalue_list(int index) const {
  return e_marrychildvalue_list_.Get(index);
}
inline ::proto_ff::E_MarryChildvalue* Sheet_MarryChildvalue::mutable_e_marrychildvalue_list(int index) {
  return e_marrychildvalue_list_.Mutable(index);
}
inline ::proto_ff::E_MarryChildvalue* Sheet_MarryChildvalue::add_e_marrychildvalue_list() {
  return e_marrychildvalue_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildvalue >&
Sheet_MarryChildvalue::e_marrychildvalue_list() const {
  return e_marrychildvalue_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildvalue >*
Sheet_MarryChildvalue::mutable_e_marrychildvalue_list() {
  return &e_marrychildvalue_list_;
}

// -------------------------------------------------------------------

// E_MarryChildexpGradeDesc

// optional int32 m_exp = 1;
inline bool E_MarryChildexpGradeDesc::has_m_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryChildexpGradeDesc::set_has_m_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryChildexpGradeDesc::clear_has_m_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryChildexpGradeDesc::clear_m_exp() {
  m_exp_ = 0;
  clear_has_m_exp();
}
inline ::google::protobuf::int32 E_MarryChildexpGradeDesc::m_exp() const {
  return m_exp_;
}
inline void E_MarryChildexpGradeDesc::set_m_exp(::google::protobuf::int32 value) {
  set_has_m_exp();
  m_exp_ = value;
}

// optional int32 m_lv = 2;
inline bool E_MarryChildexpGradeDesc::has_m_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryChildexpGradeDesc::set_has_m_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryChildexpGradeDesc::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryChildexpGradeDesc::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_MarryChildexpGradeDesc::m_lv() const {
  return m_lv_;
}
inline void E_MarryChildexpGradeDesc::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// -------------------------------------------------------------------

// E_MarryChildexp

// optional int32 m_lv = 1;
inline bool E_MarryChildexp::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryChildexp::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryChildexp::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryChildexp::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_MarryChildexp::m_lv() const {
  return m_lv_;
}
inline void E_MarryChildexp::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// repeated .proto_ff.E_MarryChildexpGradeDesc m_Grade = 2;
inline int E_MarryChildexp::m_grade_size() const {
  return m_grade_.size();
}
inline void E_MarryChildexp::clear_m_grade() {
  m_grade_.Clear();
}
inline const ::proto_ff::E_MarryChildexpGradeDesc& E_MarryChildexp::m_grade(int index) const {
  return m_grade_.Get(index);
}
inline ::proto_ff::E_MarryChildexpGradeDesc* E_MarryChildexp::mutable_m_grade(int index) {
  return m_grade_.Mutable(index);
}
inline ::proto_ff::E_MarryChildexpGradeDesc* E_MarryChildexp::add_m_grade() {
  return m_grade_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexpGradeDesc >&
E_MarryChildexp::m_grade() const {
  return m_grade_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexpGradeDesc >*
E_MarryChildexp::mutable_m_grade() {
  return &m_grade_;
}

// -------------------------------------------------------------------

// Sheet_MarryChildexp

// repeated .proto_ff.E_MarryChildexp E_MarryChildexp_List = 1;
inline int Sheet_MarryChildexp::e_marrychildexp_list_size() const {
  return e_marrychildexp_list_.size();
}
inline void Sheet_MarryChildexp::clear_e_marrychildexp_list() {
  e_marrychildexp_list_.Clear();
}
inline const ::proto_ff::E_MarryChildexp& Sheet_MarryChildexp::e_marrychildexp_list(int index) const {
  return e_marrychildexp_list_.Get(index);
}
inline ::proto_ff::E_MarryChildexp* Sheet_MarryChildexp::mutable_e_marrychildexp_list(int index) {
  return e_marrychildexp_list_.Mutable(index);
}
inline ::proto_ff::E_MarryChildexp* Sheet_MarryChildexp::add_e_marrychildexp_list() {
  return e_marrychildexp_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexp >&
Sheet_MarryChildexp::e_marrychildexp_list() const {
  return e_marrychildexp_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryChildexp >*
Sheet_MarryChildexp::mutable_e_marrychildexp_list() {
  return &e_marrychildexp_list_;
}

// -------------------------------------------------------------------

// E_MarryExpressAttributeDesc

// optional int32 m_value = 1;
inline bool E_MarryExpressAttributeDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryExpressAttributeDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryExpressAttributeDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryExpressAttributeDesc::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_MarryExpressAttributeDesc::m_value() const {
  return m_value_;
}
inline void E_MarryExpressAttributeDesc::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_type = 2;
inline bool E_MarryExpressAttributeDesc::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryExpressAttributeDesc::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryExpressAttributeDesc::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryExpressAttributeDesc::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MarryExpressAttributeDesc::m_type() const {
  return m_type_;
}
inline void E_MarryExpressAttributeDesc::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// -------------------------------------------------------------------

// E_MarryExpress

// optional int32 m_lv = 1;
inline bool E_MarryExpress::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryExpress::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryExpress::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryExpress::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_MarryExpress::m_lv() const {
  return m_lv_;
}
inline void E_MarryExpress::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_Exp = 2;
inline bool E_MarryExpress::has_m_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryExpress::set_has_m_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryExpress::clear_has_m_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryExpress::clear_m_exp() {
  m_exp_ = 0;
  clear_has_m_exp();
}
inline ::google::protobuf::int32 E_MarryExpress::m_exp() const {
  return m_exp_;
}
inline void E_MarryExpress::set_m_exp(::google::protobuf::int32 value) {
  set_has_m_exp();
  m_exp_ = value;
}

// repeated .proto_ff.E_MarryExpressAttributeDesc m_Attribute = 3;
inline int E_MarryExpress::m_attribute_size() const {
  return m_attribute_.size();
}
inline void E_MarryExpress::clear_m_attribute() {
  m_attribute_.Clear();
}
inline const ::proto_ff::E_MarryExpressAttributeDesc& E_MarryExpress::m_attribute(int index) const {
  return m_attribute_.Get(index);
}
inline ::proto_ff::E_MarryExpressAttributeDesc* E_MarryExpress::mutable_m_attribute(int index) {
  return m_attribute_.Mutable(index);
}
inline ::proto_ff::E_MarryExpressAttributeDesc* E_MarryExpress::add_m_attribute() {
  return m_attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressAttributeDesc >&
E_MarryExpress::m_attribute() const {
  return m_attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressAttributeDesc >*
E_MarryExpress::mutable_m_attribute() {
  return &m_attribute_;
}

// -------------------------------------------------------------------

// Sheet_MarryExpress

// repeated .proto_ff.E_MarryExpress E_MarryExpress_List = 1;
inline int Sheet_MarryExpress::e_marryexpress_list_size() const {
  return e_marryexpress_list_.size();
}
inline void Sheet_MarryExpress::clear_e_marryexpress_list() {
  e_marryexpress_list_.Clear();
}
inline const ::proto_ff::E_MarryExpress& Sheet_MarryExpress::e_marryexpress_list(int index) const {
  return e_marryexpress_list_.Get(index);
}
inline ::proto_ff::E_MarryExpress* Sheet_MarryExpress::mutable_e_marryexpress_list(int index) {
  return e_marryexpress_list_.Mutable(index);
}
inline ::proto_ff::E_MarryExpress* Sheet_MarryExpress::add_e_marryexpress_list() {
  return e_marryexpress_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpress >&
Sheet_MarryExpress::e_marryexpress_list() const {
  return e_marryexpress_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpress >*
Sheet_MarryExpress::mutable_e_marryexpress_list() {
  return &e_marryexpress_list_;
}

// -------------------------------------------------------------------

// E_MarryExpresslanguage

// optional int32 m_id = 1;
inline bool E_MarryExpresslanguage::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryExpresslanguage::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryExpresslanguage::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryExpresslanguage::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarryExpresslanguage::m_id() const {
  return m_id_;
}
inline void E_MarryExpresslanguage::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_language = 2;
inline bool E_MarryExpresslanguage::has_m_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryExpresslanguage::set_has_m_language() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryExpresslanguage::clear_has_m_language() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryExpresslanguage::clear_m_language() {
  if (m_language_ != &::google::protobuf::internal::kEmptyString) {
    m_language_->clear();
  }
  clear_has_m_language();
}
inline const ::std::string& E_MarryExpresslanguage::m_language() const {
  return *m_language_;
}
inline void E_MarryExpresslanguage::set_m_language(const ::std::string& value) {
  set_has_m_language();
  if (m_language_ == &::google::protobuf::internal::kEmptyString) {
    m_language_ = new ::std::string;
  }
  m_language_->assign(value);
}
inline void E_MarryExpresslanguage::set_m_language(const char* value) {
  set_has_m_language();
  if (m_language_ == &::google::protobuf::internal::kEmptyString) {
    m_language_ = new ::std::string;
  }
  m_language_->assign(value);
}
inline void E_MarryExpresslanguage::set_m_language(const char* value, size_t size) {
  set_has_m_language();
  if (m_language_ == &::google::protobuf::internal::kEmptyString) {
    m_language_ = new ::std::string;
  }
  m_language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryExpresslanguage::mutable_m_language() {
  set_has_m_language();
  if (m_language_ == &::google::protobuf::internal::kEmptyString) {
    m_language_ = new ::std::string;
  }
  return m_language_;
}
inline ::std::string* E_MarryExpresslanguage::release_m_language() {
  clear_has_m_language();
  if (m_language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_language_;
    m_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryExpresslanguage::set_allocated_m_language(::std::string* m_language) {
  if (m_language_ != &::google::protobuf::internal::kEmptyString) {
    delete m_language_;
  }
  if (m_language) {
    set_has_m_language();
    m_language_ = m_language;
  } else {
    clear_has_m_language();
    m_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_MarryExpresslanguage

// repeated .proto_ff.E_MarryExpresslanguage E_MarryExpresslanguage_List = 1;
inline int Sheet_MarryExpresslanguage::e_marryexpresslanguage_list_size() const {
  return e_marryexpresslanguage_list_.size();
}
inline void Sheet_MarryExpresslanguage::clear_e_marryexpresslanguage_list() {
  e_marryexpresslanguage_list_.Clear();
}
inline const ::proto_ff::E_MarryExpresslanguage& Sheet_MarryExpresslanguage::e_marryexpresslanguage_list(int index) const {
  return e_marryexpresslanguage_list_.Get(index);
}
inline ::proto_ff::E_MarryExpresslanguage* Sheet_MarryExpresslanguage::mutable_e_marryexpresslanguage_list(int index) {
  return e_marryexpresslanguage_list_.Mutable(index);
}
inline ::proto_ff::E_MarryExpresslanguage* Sheet_MarryExpresslanguage::add_e_marryexpresslanguage_list() {
  return e_marryexpresslanguage_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpresslanguage >&
Sheet_MarryExpresslanguage::e_marryexpresslanguage_list() const {
  return e_marryexpresslanguage_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpresslanguage >*
Sheet_MarryExpresslanguage::mutable_e_marryexpresslanguage_list() {
  return &e_marryexpresslanguage_list_;
}

// -------------------------------------------------------------------

// E_MarryExpressshop

// optional int32 m_exitem = 1;
inline bool E_MarryExpressshop::has_m_exitem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryExpressshop::set_has_m_exitem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryExpressshop::clear_has_m_exitem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryExpressshop::clear_m_exitem() {
  m_exitem_ = 0;
  clear_has_m_exitem();
}
inline ::google::protobuf::int32 E_MarryExpressshop::m_exitem() const {
  return m_exitem_;
}
inline void E_MarryExpressshop::set_m_exitem(::google::protobuf::int32 value) {
  set_has_m_exitem();
  m_exitem_ = value;
}

// optional int32 m_mallid = 2;
inline bool E_MarryExpressshop::has_m_mallid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryExpressshop::set_has_m_mallid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryExpressshop::clear_has_m_mallid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryExpressshop::clear_m_mallid() {
  m_mallid_ = 0;
  clear_has_m_mallid();
}
inline ::google::protobuf::int32 E_MarryExpressshop::m_mallid() const {
  return m_mallid_;
}
inline void E_MarryExpressshop::set_m_mallid(::google::protobuf::int32 value) {
  set_has_m_mallid();
  m_mallid_ = value;
}

// optional int32 m_exp = 3;
inline bool E_MarryExpressshop::has_m_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryExpressshop::set_has_m_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryExpressshop::clear_has_m_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryExpressshop::clear_m_exp() {
  m_exp_ = 0;
  clear_has_m_exp();
}
inline ::google::protobuf::int32 E_MarryExpressshop::m_exp() const {
  return m_exp_;
}
inline void E_MarryExpressshop::set_m_exp(::google::protobuf::int32 value) {
  set_has_m_exp();
  m_exp_ = value;
}

// optional int32 m_expto = 4;
inline bool E_MarryExpressshop::has_m_expto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarryExpressshop::set_has_m_expto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarryExpressshop::clear_has_m_expto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarryExpressshop::clear_m_expto() {
  m_expto_ = 0;
  clear_has_m_expto();
}
inline ::google::protobuf::int32 E_MarryExpressshop::m_expto() const {
  return m_expto_;
}
inline void E_MarryExpressshop::set_m_expto(::google::protobuf::int32 value) {
  set_has_m_expto();
  m_expto_ = value;
}

// optional int32 m_broadcastid = 5;
inline bool E_MarryExpressshop::has_m_broadcastid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MarryExpressshop::set_has_m_broadcastid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MarryExpressshop::clear_has_m_broadcastid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MarryExpressshop::clear_m_broadcastid() {
  m_broadcastid_ = 0;
  clear_has_m_broadcastid();
}
inline ::google::protobuf::int32 E_MarryExpressshop::m_broadcastid() const {
  return m_broadcastid_;
}
inline void E_MarryExpressshop::set_m_broadcastid(::google::protobuf::int32 value) {
  set_has_m_broadcastid();
  m_broadcastid_ = value;
}

// optional int32 m_effectId = 6;
inline bool E_MarryExpressshop::has_m_effectid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MarryExpressshop::set_has_m_effectid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MarryExpressshop::clear_has_m_effectid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MarryExpressshop::clear_m_effectid() {
  m_effectid_ = 0;
  clear_has_m_effectid();
}
inline ::google::protobuf::int32 E_MarryExpressshop::m_effectid() const {
  return m_effectid_;
}
inline void E_MarryExpressshop::set_m_effectid(::google::protobuf::int32 value) {
  set_has_m_effectid();
  m_effectid_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarryExpressshop

// repeated .proto_ff.E_MarryExpressshop E_MarryExpressshop_List = 1;
inline int Sheet_MarryExpressshop::e_marryexpressshop_list_size() const {
  return e_marryexpressshop_list_.size();
}
inline void Sheet_MarryExpressshop::clear_e_marryexpressshop_list() {
  e_marryexpressshop_list_.Clear();
}
inline const ::proto_ff::E_MarryExpressshop& Sheet_MarryExpressshop::e_marryexpressshop_list(int index) const {
  return e_marryexpressshop_list_.Get(index);
}
inline ::proto_ff::E_MarryExpressshop* Sheet_MarryExpressshop::mutable_e_marryexpressshop_list(int index) {
  return e_marryexpressshop_list_.Mutable(index);
}
inline ::proto_ff::E_MarryExpressshop* Sheet_MarryExpressshop::add_e_marryexpressshop_list() {
  return e_marryexpressshop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressshop >&
Sheet_MarryExpressshop::e_marryexpressshop_list() const {
  return e_marryexpressshop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExpressshop >*
Sheet_MarryExpressshop::mutable_e_marryexpressshop_list() {
  return &e_marryexpressshop_list_;
}

// -------------------------------------------------------------------

// E_MarryConstantTourmonsterDesc

// optional int32 m_pathid = 1;
inline bool E_MarryConstantTourmonsterDesc::has_m_pathid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryConstantTourmonsterDesc::set_has_m_pathid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryConstantTourmonsterDesc::clear_has_m_pathid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryConstantTourmonsterDesc::clear_m_pathid() {
  m_pathid_ = 0;
  clear_has_m_pathid();
}
inline ::google::protobuf::int32 E_MarryConstantTourmonsterDesc::m_pathid() const {
  return m_pathid_;
}
inline void E_MarryConstantTourmonsterDesc::set_m_pathid(::google::protobuf::int32 value) {
  set_has_m_pathid();
  m_pathid_ = value;
}

// optional int32 m_id = 2;
inline bool E_MarryConstantTourmonsterDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryConstantTourmonsterDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryConstantTourmonsterDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryConstantTourmonsterDesc::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarryConstantTourmonsterDesc::m_id() const {
  return m_id_;
}
inline void E_MarryConstantTourmonsterDesc::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_MarryConstant

// optional int32 m_id = 1;
inline bool E_MarryConstant::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryConstant::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryConstant::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryConstant::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarryConstant::m_id() const {
  return m_id_;
}
inline void E_MarryConstant::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_money = 2;
inline bool E_MarryConstant::has_m_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryConstant::set_has_m_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryConstant::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryConstant::clear_m_money() {
  m_money_ = 0;
  clear_has_m_money();
}
inline ::google::protobuf::int32 E_MarryConstant::m_money() const {
  return m_money_;
}
inline void E_MarryConstant::set_m_money(::google::protobuf::int32 value) {
  set_has_m_money();
  m_money_ = value;
}

// optional int32 m_price = 3;
inline bool E_MarryConstant::has_m_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryConstant::set_has_m_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryConstant::clear_has_m_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryConstant::clear_m_price() {
  m_price_ = 0;
  clear_has_m_price();
}
inline ::google::protobuf::int32 E_MarryConstant::m_price() const {
  return m_price_;
}
inline void E_MarryConstant::set_m_price(::google::protobuf::int32 value) {
  set_has_m_price();
  m_price_ = value;
}

// optional int32 m_buyitem = 4;
inline bool E_MarryConstant::has_m_buyitem() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarryConstant::set_has_m_buyitem() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarryConstant::clear_has_m_buyitem() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarryConstant::clear_m_buyitem() {
  m_buyitem_ = 0;
  clear_has_m_buyitem();
}
inline ::google::protobuf::int32 E_MarryConstant::m_buyitem() const {
  return m_buyitem_;
}
inline void E_MarryConstant::set_m_buyitem(::google::protobuf::int32 value) {
  set_has_m_buyitem();
  m_buyitem_ = value;
}

// optional int32 m_dailyitem = 5;
inline bool E_MarryConstant::has_m_dailyitem() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MarryConstant::set_has_m_dailyitem() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MarryConstant::clear_has_m_dailyitem() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MarryConstant::clear_m_dailyitem() {
  m_dailyitem_ = 0;
  clear_has_m_dailyitem();
}
inline ::google::protobuf::int32 E_MarryConstant::m_dailyitem() const {
  return m_dailyitem_;
}
inline void E_MarryConstant::set_m_dailyitem(::google::protobuf::int32 value) {
  set_has_m_dailyitem();
  m_dailyitem_ = value;
}

// optional int32 m_boxitme = 6;
inline bool E_MarryConstant::has_m_boxitme() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MarryConstant::set_has_m_boxitme() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MarryConstant::clear_has_m_boxitme() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MarryConstant::clear_m_boxitme() {
  m_boxitme_ = 0;
  clear_has_m_boxitme();
}
inline ::google::protobuf::int32 E_MarryConstant::m_boxitme() const {
  return m_boxitme_;
}
inline void E_MarryConstant::set_m_boxitme(::google::protobuf::int32 value) {
  set_has_m_boxitme();
  m_boxitme_ = value;
}

// optional int32 m_interval = 7;
inline bool E_MarryConstant::has_m_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MarryConstant::set_has_m_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MarryConstant::clear_has_m_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MarryConstant::clear_m_interval() {
  m_interval_ = 0;
  clear_has_m_interval();
}
inline ::google::protobuf::int32 E_MarryConstant::m_interval() const {
  return m_interval_;
}
inline void E_MarryConstant::set_m_interval(::google::protobuf::int32 value) {
  set_has_m_interval();
  m_interval_ = value;
}

// optional int32 m_lifetime = 8;
inline bool E_MarryConstant::has_m_lifetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MarryConstant::set_has_m_lifetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MarryConstant::clear_has_m_lifetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MarryConstant::clear_m_lifetime() {
  m_lifetime_ = 0;
  clear_has_m_lifetime();
}
inline ::google::protobuf::int32 E_MarryConstant::m_lifetime() const {
  return m_lifetime_;
}
inline void E_MarryConstant::set_m_lifetime(::google::protobuf::int32 value) {
  set_has_m_lifetime();
  m_lifetime_ = value;
}

// optional int32 m_scale = 9;
inline bool E_MarryConstant::has_m_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MarryConstant::set_has_m_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MarryConstant::clear_has_m_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MarryConstant::clear_m_scale() {
  m_scale_ = 0;
  clear_has_m_scale();
}
inline ::google::protobuf::int32 E_MarryConstant::m_scale() const {
  return m_scale_;
}
inline void E_MarryConstant::set_m_scale(::google::protobuf::int32 value) {
  set_has_m_scale();
  m_scale_ = value;
}

// optional int32 m_giveboy = 10;
inline bool E_MarryConstant::has_m_giveboy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MarryConstant::set_has_m_giveboy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MarryConstant::clear_has_m_giveboy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MarryConstant::clear_m_giveboy() {
  m_giveboy_ = 0;
  clear_has_m_giveboy();
}
inline ::google::protobuf::int32 E_MarryConstant::m_giveboy() const {
  return m_giveboy_;
}
inline void E_MarryConstant::set_m_giveboy(::google::protobuf::int32 value) {
  set_has_m_giveboy();
  m_giveboy_ = value;
}

// optional int32 m_givegirl = 11;
inline bool E_MarryConstant::has_m_givegirl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MarryConstant::set_has_m_givegirl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MarryConstant::clear_has_m_givegirl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MarryConstant::clear_m_givegirl() {
  m_givegirl_ = 0;
  clear_has_m_givegirl();
}
inline ::google::protobuf::int32 E_MarryConstant::m_givegirl() const {
  return m_givegirl_;
}
inline void E_MarryConstant::set_m_givegirl(::google::protobuf::int32 value) {
  set_has_m_givegirl();
  m_givegirl_ = value;
}

// optional int32 m_Xytime = 12;
inline bool E_MarryConstant::has_m_xytime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MarryConstant::set_has_m_xytime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MarryConstant::clear_has_m_xytime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MarryConstant::clear_m_xytime() {
  m_xytime_ = 0;
  clear_has_m_xytime();
}
inline ::google::protobuf::int32 E_MarryConstant::m_xytime() const {
  return m_xytime_;
}
inline void E_MarryConstant::set_m_xytime(::google::protobuf::int32 value) {
  set_has_m_xytime();
  m_xytime_ = value;
}

// optional int32 m_free = 13;
inline bool E_MarryConstant::has_m_free() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_MarryConstant::set_has_m_free() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_MarryConstant::clear_has_m_free() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_MarryConstant::clear_m_free() {
  m_free_ = 0;
  clear_has_m_free();
}
inline ::google::protobuf::int32 E_MarryConstant::m_free() const {
  return m_free_;
}
inline void E_MarryConstant::set_m_free(::google::protobuf::int32 value) {
  set_has_m_free();
  m_free_ = value;
}

// optional int32 m_buyNum = 14;
inline bool E_MarryConstant::has_m_buynum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_MarryConstant::set_has_m_buynum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_MarryConstant::clear_has_m_buynum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_MarryConstant::clear_m_buynum() {
  m_buynum_ = 0;
  clear_has_m_buynum();
}
inline ::google::protobuf::int32 E_MarryConstant::m_buynum() const {
  return m_buynum_;
}
inline void E_MarryConstant::set_m_buynum(::google::protobuf::int32 value) {
  set_has_m_buynum();
  m_buynum_ = value;
}

// optional int32 m_consume = 15;
inline bool E_MarryConstant::has_m_consume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_MarryConstant::set_has_m_consume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_MarryConstant::clear_has_m_consume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_MarryConstant::clear_m_consume() {
  m_consume_ = 0;
  clear_has_m_consume();
}
inline ::google::protobuf::int32 E_MarryConstant::m_consume() const {
  return m_consume_;
}
inline void E_MarryConstant::set_m_consume(::google::protobuf::int32 value) {
  set_has_m_consume();
  m_consume_ = value;
}

// optional int32 m_consumeNum = 16;
inline bool E_MarryConstant::has_m_consumenum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_MarryConstant::set_has_m_consumenum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_MarryConstant::clear_has_m_consumenum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_MarryConstant::clear_m_consumenum() {
  m_consumenum_ = 0;
  clear_has_m_consumenum();
}
inline ::google::protobuf::int32 E_MarryConstant::m_consumenum() const {
  return m_consumenum_;
}
inline void E_MarryConstant::set_m_consumenum(::google::protobuf::int32 value) {
  set_has_m_consumenum();
  m_consumenum_ = value;
}

// optional int32 m_marrylv = 17;
inline bool E_MarryConstant::has_m_marrylv() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_MarryConstant::set_has_m_marrylv() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_MarryConstant::clear_has_m_marrylv() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_MarryConstant::clear_m_marrylv() {
  m_marrylv_ = 0;
  clear_has_m_marrylv();
}
inline ::google::protobuf::int32 E_MarryConstant::m_marrylv() const {
  return m_marrylv_;
}
inline void E_MarryConstant::set_m_marrylv(::google::protobuf::int32 value) {
  set_has_m_marrylv();
  m_marrylv_ = value;
}

// optional int32 m_childtime = 18;
inline bool E_MarryConstant::has_m_childtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_MarryConstant::set_has_m_childtime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_MarryConstant::clear_has_m_childtime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_MarryConstant::clear_m_childtime() {
  m_childtime_ = 0;
  clear_has_m_childtime();
}
inline ::google::protobuf::int32 E_MarryConstant::m_childtime() const {
  return m_childtime_;
}
inline void E_MarryConstant::set_m_childtime(::google::protobuf::int32 value) {
  set_has_m_childtime();
  m_childtime_ = value;
}

// optional int32 m_lockitem = 19;
inline bool E_MarryConstant::has_m_lockitem() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_MarryConstant::set_has_m_lockitem() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_MarryConstant::clear_has_m_lockitem() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_MarryConstant::clear_m_lockitem() {
  m_lockitem_ = 0;
  clear_has_m_lockitem();
}
inline ::google::protobuf::int32 E_MarryConstant::m_lockitem() const {
  return m_lockitem_;
}
inline void E_MarryConstant::set_m_lockitem(::google::protobuf::int32 value) {
  set_has_m_lockitem();
  m_lockitem_ = value;
}

// optional int32 m_lockitemExp = 20;
inline bool E_MarryConstant::has_m_lockitemexp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_MarryConstant::set_has_m_lockitemexp() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_MarryConstant::clear_has_m_lockitemexp() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_MarryConstant::clear_m_lockitemexp() {
  m_lockitemexp_ = 0;
  clear_has_m_lockitemexp();
}
inline ::google::protobuf::int32 E_MarryConstant::m_lockitemexp() const {
  return m_lockitemexp_;
}
inline void E_MarryConstant::set_m_lockitemexp(::google::protobuf::int32 value) {
  set_has_m_lockitemexp();
  m_lockitemexp_ = value;
}

// optional int32 m_childitem = 21;
inline bool E_MarryConstant::has_m_childitem() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_MarryConstant::set_has_m_childitem() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_MarryConstant::clear_has_m_childitem() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_MarryConstant::clear_m_childitem() {
  m_childitem_ = 0;
  clear_has_m_childitem();
}
inline ::google::protobuf::int32 E_MarryConstant::m_childitem() const {
  return m_childitem_;
}
inline void E_MarryConstant::set_m_childitem(::google::protobuf::int32 value) {
  set_has_m_childitem();
  m_childitem_ = value;
}

// optional int32 m_childitemExp = 22;
inline bool E_MarryConstant::has_m_childitemexp() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_MarryConstant::set_has_m_childitemexp() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_MarryConstant::clear_has_m_childitemexp() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_MarryConstant::clear_m_childitemexp() {
  m_childitemexp_ = 0;
  clear_has_m_childitemexp();
}
inline ::google::protobuf::int32 E_MarryConstant::m_childitemexp() const {
  return m_childitemexp_;
}
inline void E_MarryConstant::set_m_childitemexp(::google::protobuf::int32 value) {
  set_has_m_childitemexp();
  m_childitemexp_ = value;
}

// optional int32 m_guestprice = 23;
inline bool E_MarryConstant::has_m_guestprice() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void E_MarryConstant::set_has_m_guestprice() {
  _has_bits_[0] |= 0x00400000u;
}
inline void E_MarryConstant::clear_has_m_guestprice() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void E_MarryConstant::clear_m_guestprice() {
  m_guestprice_ = 0;
  clear_has_m_guestprice();
}
inline ::google::protobuf::int32 E_MarryConstant::m_guestprice() const {
  return m_guestprice_;
}
inline void E_MarryConstant::set_m_guestprice(::google::protobuf::int32 value) {
  set_has_m_guestprice();
  m_guestprice_ = value;
}

// optional int32 m_guestpricenum = 24;
inline bool E_MarryConstant::has_m_guestpricenum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void E_MarryConstant::set_has_m_guestpricenum() {
  _has_bits_[0] |= 0x00800000u;
}
inline void E_MarryConstant::clear_has_m_guestpricenum() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void E_MarryConstant::clear_m_guestpricenum() {
  m_guestpricenum_ = 0;
  clear_has_m_guestpricenum();
}
inline ::google::protobuf::int32 E_MarryConstant::m_guestpricenum() const {
  return m_guestpricenum_;
}
inline void E_MarryConstant::set_m_guestpricenum(::google::protobuf::int32 value) {
  set_has_m_guestpricenum();
  m_guestpricenum_ = value;
}

// optional int32 m_asklimit = 25;
inline bool E_MarryConstant::has_m_asklimit() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void E_MarryConstant::set_has_m_asklimit() {
  _has_bits_[0] |= 0x01000000u;
}
inline void E_MarryConstant::clear_has_m_asklimit() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void E_MarryConstant::clear_m_asklimit() {
  m_asklimit_ = 0;
  clear_has_m_asklimit();
}
inline ::google::protobuf::int32 E_MarryConstant::m_asklimit() const {
  return m_asklimit_;
}
inline void E_MarryConstant::set_m_asklimit(::google::protobuf::int32 value) {
  set_has_m_asklimit();
  m_asklimit_ = value;
}

// optional int32 m_HyReward = 26;
inline bool E_MarryConstant::has_m_hyreward() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void E_MarryConstant::set_has_m_hyreward() {
  _has_bits_[0] |= 0x02000000u;
}
inline void E_MarryConstant::clear_has_m_hyreward() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void E_MarryConstant::clear_m_hyreward() {
  m_hyreward_ = 0;
  clear_has_m_hyreward();
}
inline ::google::protobuf::int32 E_MarryConstant::m_hyreward() const {
  return m_hyreward_;
}
inline void E_MarryConstant::set_m_hyreward(::google::protobuf::int32 value) {
  set_has_m_hyreward();
  m_hyreward_ = value;
}

// optional int32 m_tourSceneId = 27;
inline bool E_MarryConstant::has_m_toursceneid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void E_MarryConstant::set_has_m_toursceneid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void E_MarryConstant::clear_has_m_toursceneid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void E_MarryConstant::clear_m_toursceneid() {
  m_toursceneid_ = 0;
  clear_has_m_toursceneid();
}
inline ::google::protobuf::int32 E_MarryConstant::m_toursceneid() const {
  return m_toursceneid_;
}
inline void E_MarryConstant::set_m_toursceneid(::google::protobuf::int32 value) {
  set_has_m_toursceneid();
  m_toursceneid_ = value;
}

// optional int32 m_tourFollowIndex = 28;
inline bool E_MarryConstant::has_m_tourfollowindex() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void E_MarryConstant::set_has_m_tourfollowindex() {
  _has_bits_[0] |= 0x08000000u;
}
inline void E_MarryConstant::clear_has_m_tourfollowindex() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void E_MarryConstant::clear_m_tourfollowindex() {
  m_tourfollowindex_ = 0;
  clear_has_m_tourfollowindex();
}
inline ::google::protobuf::int32 E_MarryConstant::m_tourfollowindex() const {
  return m_tourfollowindex_;
}
inline void E_MarryConstant::set_m_tourfollowindex(::google::protobuf::int32 value) {
  set_has_m_tourfollowindex();
  m_tourfollowindex_ = value;
}

// optional string m_Hyicon = 29;
inline bool E_MarryConstant::has_m_hyicon() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void E_MarryConstant::set_has_m_hyicon() {
  _has_bits_[0] |= 0x10000000u;
}
inline void E_MarryConstant::clear_has_m_hyicon() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void E_MarryConstant::clear_m_hyicon() {
  if (m_hyicon_ != &::google::protobuf::internal::kEmptyString) {
    m_hyicon_->clear();
  }
  clear_has_m_hyicon();
}
inline const ::std::string& E_MarryConstant::m_hyicon() const {
  return *m_hyicon_;
}
inline void E_MarryConstant::set_m_hyicon(const ::std::string& value) {
  set_has_m_hyicon();
  if (m_hyicon_ == &::google::protobuf::internal::kEmptyString) {
    m_hyicon_ = new ::std::string;
  }
  m_hyicon_->assign(value);
}
inline void E_MarryConstant::set_m_hyicon(const char* value) {
  set_has_m_hyicon();
  if (m_hyicon_ == &::google::protobuf::internal::kEmptyString) {
    m_hyicon_ = new ::std::string;
  }
  m_hyicon_->assign(value);
}
inline void E_MarryConstant::set_m_hyicon(const char* value, size_t size) {
  set_has_m_hyicon();
  if (m_hyicon_ == &::google::protobuf::internal::kEmptyString) {
    m_hyicon_ = new ::std::string;
  }
  m_hyicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryConstant::mutable_m_hyicon() {
  set_has_m_hyicon();
  if (m_hyicon_ == &::google::protobuf::internal::kEmptyString) {
    m_hyicon_ = new ::std::string;
  }
  return m_hyicon_;
}
inline ::std::string* E_MarryConstant::release_m_hyicon() {
  clear_has_m_hyicon();
  if (m_hyicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_hyicon_;
    m_hyicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryConstant::set_allocated_m_hyicon(::std::string* m_hyicon) {
  if (m_hyicon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_hyicon_;
  }
  if (m_hyicon) {
    set_has_m_hyicon();
    m_hyicon_ = m_hyicon;
  } else {
    clear_has_m_hyicon();
    m_hyicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_Hyname = 30;
inline bool E_MarryConstant::has_m_hyname() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void E_MarryConstant::set_has_m_hyname() {
  _has_bits_[0] |= 0x20000000u;
}
inline void E_MarryConstant::clear_has_m_hyname() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void E_MarryConstant::clear_m_hyname() {
  if (m_hyname_ != &::google::protobuf::internal::kEmptyString) {
    m_hyname_->clear();
  }
  clear_has_m_hyname();
}
inline const ::std::string& E_MarryConstant::m_hyname() const {
  return *m_hyname_;
}
inline void E_MarryConstant::set_m_hyname(const ::std::string& value) {
  set_has_m_hyname();
  if (m_hyname_ == &::google::protobuf::internal::kEmptyString) {
    m_hyname_ = new ::std::string;
  }
  m_hyname_->assign(value);
}
inline void E_MarryConstant::set_m_hyname(const char* value) {
  set_has_m_hyname();
  if (m_hyname_ == &::google::protobuf::internal::kEmptyString) {
    m_hyname_ = new ::std::string;
  }
  m_hyname_->assign(value);
}
inline void E_MarryConstant::set_m_hyname(const char* value, size_t size) {
  set_has_m_hyname();
  if (m_hyname_ == &::google::protobuf::internal::kEmptyString) {
    m_hyname_ = new ::std::string;
  }
  m_hyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryConstant::mutable_m_hyname() {
  set_has_m_hyname();
  if (m_hyname_ == &::google::protobuf::internal::kEmptyString) {
    m_hyname_ = new ::std::string;
  }
  return m_hyname_;
}
inline ::std::string* E_MarryConstant::release_m_hyname() {
  clear_has_m_hyname();
  if (m_hyname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_hyname_;
    m_hyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryConstant::set_allocated_m_hyname(::std::string* m_hyname) {
  if (m_hyname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_hyname_;
  }
  if (m_hyname) {
    set_has_m_hyname();
    m_hyname_ = m_hyname;
  } else {
    clear_has_m_hyname();
    m_hyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_Xyicon = 31;
inline bool E_MarryConstant::has_m_xyicon() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void E_MarryConstant::set_has_m_xyicon() {
  _has_bits_[0] |= 0x40000000u;
}
inline void E_MarryConstant::clear_has_m_xyicon() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void E_MarryConstant::clear_m_xyicon() {
  if (m_xyicon_ != &::google::protobuf::internal::kEmptyString) {
    m_xyicon_->clear();
  }
  clear_has_m_xyicon();
}
inline const ::std::string& E_MarryConstant::m_xyicon() const {
  return *m_xyicon_;
}
inline void E_MarryConstant::set_m_xyicon(const ::std::string& value) {
  set_has_m_xyicon();
  if (m_xyicon_ == &::google::protobuf::internal::kEmptyString) {
    m_xyicon_ = new ::std::string;
  }
  m_xyicon_->assign(value);
}
inline void E_MarryConstant::set_m_xyicon(const char* value) {
  set_has_m_xyicon();
  if (m_xyicon_ == &::google::protobuf::internal::kEmptyString) {
    m_xyicon_ = new ::std::string;
  }
  m_xyicon_->assign(value);
}
inline void E_MarryConstant::set_m_xyicon(const char* value, size_t size) {
  set_has_m_xyicon();
  if (m_xyicon_ == &::google::protobuf::internal::kEmptyString) {
    m_xyicon_ = new ::std::string;
  }
  m_xyicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryConstant::mutable_m_xyicon() {
  set_has_m_xyicon();
  if (m_xyicon_ == &::google::protobuf::internal::kEmptyString) {
    m_xyicon_ = new ::std::string;
  }
  return m_xyicon_;
}
inline ::std::string* E_MarryConstant::release_m_xyicon() {
  clear_has_m_xyicon();
  if (m_xyicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_xyicon_;
    m_xyicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryConstant::set_allocated_m_xyicon(::std::string* m_xyicon) {
  if (m_xyicon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_xyicon_;
  }
  if (m_xyicon) {
    set_has_m_xyicon();
    m_xyicon_ = m_xyicon;
  } else {
    clear_has_m_xyicon();
    m_xyicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_Xyname = 32;
inline bool E_MarryConstant::has_m_xyname() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void E_MarryConstant::set_has_m_xyname() {
  _has_bits_[0] |= 0x80000000u;
}
inline void E_MarryConstant::clear_has_m_xyname() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void E_MarryConstant::clear_m_xyname() {
  if (m_xyname_ != &::google::protobuf::internal::kEmptyString) {
    m_xyname_->clear();
  }
  clear_has_m_xyname();
}
inline const ::std::string& E_MarryConstant::m_xyname() const {
  return *m_xyname_;
}
inline void E_MarryConstant::set_m_xyname(const ::std::string& value) {
  set_has_m_xyname();
  if (m_xyname_ == &::google::protobuf::internal::kEmptyString) {
    m_xyname_ = new ::std::string;
  }
  m_xyname_->assign(value);
}
inline void E_MarryConstant::set_m_xyname(const char* value) {
  set_has_m_xyname();
  if (m_xyname_ == &::google::protobuf::internal::kEmptyString) {
    m_xyname_ = new ::std::string;
  }
  m_xyname_->assign(value);
}
inline void E_MarryConstant::set_m_xyname(const char* value, size_t size) {
  set_has_m_xyname();
  if (m_xyname_ == &::google::protobuf::internal::kEmptyString) {
    m_xyname_ = new ::std::string;
  }
  m_xyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryConstant::mutable_m_xyname() {
  set_has_m_xyname();
  if (m_xyname_ == &::google::protobuf::internal::kEmptyString) {
    m_xyname_ = new ::std::string;
  }
  return m_xyname_;
}
inline ::std::string* E_MarryConstant::release_m_xyname() {
  clear_has_m_xyname();
  if (m_xyname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_xyname_;
    m_xyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryConstant::set_allocated_m_xyname(::std::string* m_xyname) {
  if (m_xyname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_xyname_;
  }
  if (m_xyname) {
    set_has_m_xyname();
    m_xyname_ = m_xyname;
  } else {
    clear_has_m_xyname();
    m_xyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_redbagNum = 33;
inline bool E_MarryConstant::has_m_redbagnum() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void E_MarryConstant::set_has_m_redbagnum() {
  _has_bits_[1] |= 0x00000001u;
}
inline void E_MarryConstant::clear_has_m_redbagnum() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void E_MarryConstant::clear_m_redbagnum() {
  m_redbagnum_ = 0;
  clear_has_m_redbagnum();
}
inline ::google::protobuf::int32 E_MarryConstant::m_redbagnum() const {
  return m_redbagnum_;
}
inline void E_MarryConstant::set_m_redbagnum(::google::protobuf::int32 value) {
  set_has_m_redbagnum();
  m_redbagnum_ = value;
}

// optional int32 m_redMoney = 34;
inline bool E_MarryConstant::has_m_redmoney() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void E_MarryConstant::set_has_m_redmoney() {
  _has_bits_[1] |= 0x00000002u;
}
inline void E_MarryConstant::clear_has_m_redmoney() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void E_MarryConstant::clear_m_redmoney() {
  m_redmoney_ = 0;
  clear_has_m_redmoney();
}
inline ::google::protobuf::int32 E_MarryConstant::m_redmoney() const {
  return m_redmoney_;
}
inline void E_MarryConstant::set_m_redmoney(::google::protobuf::int32 value) {
  set_has_m_redmoney();
  m_redmoney_ = value;
}

// optional int32 m_redPrice = 35;
inline bool E_MarryConstant::has_m_redprice() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void E_MarryConstant::set_has_m_redprice() {
  _has_bits_[1] |= 0x00000004u;
}
inline void E_MarryConstant::clear_has_m_redprice() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void E_MarryConstant::clear_m_redprice() {
  m_redprice_ = 0;
  clear_has_m_redprice();
}
inline ::google::protobuf::int32 E_MarryConstant::m_redprice() const {
  return m_redprice_;
}
inline void E_MarryConstant::set_m_redprice(::google::protobuf::int32 value) {
  set_has_m_redprice();
  m_redprice_ = value;
}

// optional int32 m_sendredReward = 36;
inline bool E_MarryConstant::has_m_sendredreward() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void E_MarryConstant::set_has_m_sendredreward() {
  _has_bits_[1] |= 0x00000008u;
}
inline void E_MarryConstant::clear_has_m_sendredreward() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void E_MarryConstant::clear_m_sendredreward() {
  m_sendredreward_ = 0;
  clear_has_m_sendredreward();
}
inline ::google::protobuf::int32 E_MarryConstant::m_sendredreward() const {
  return m_sendredreward_;
}
inline void E_MarryConstant::set_m_sendredreward(::google::protobuf::int32 value) {
  set_has_m_sendredreward();
  m_sendredreward_ = value;
}

// optional int32 m_sendredNum = 37;
inline bool E_MarryConstant::has_m_sendrednum() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void E_MarryConstant::set_has_m_sendrednum() {
  _has_bits_[1] |= 0x00000010u;
}
inline void E_MarryConstant::clear_has_m_sendrednum() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void E_MarryConstant::clear_m_sendrednum() {
  m_sendrednum_ = 0;
  clear_has_m_sendrednum();
}
inline ::google::protobuf::int32 E_MarryConstant::m_sendrednum() const {
  return m_sendrednum_;
}
inline void E_MarryConstant::set_m_sendrednum(::google::protobuf::int32 value) {
  set_has_m_sendrednum();
  m_sendrednum_ = value;
}

// optional int32 m_redcollect = 38;
inline bool E_MarryConstant::has_m_redcollect() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void E_MarryConstant::set_has_m_redcollect() {
  _has_bits_[1] |= 0x00000020u;
}
inline void E_MarryConstant::clear_has_m_redcollect() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void E_MarryConstant::clear_m_redcollect() {
  m_redcollect_ = 0;
  clear_has_m_redcollect();
}
inline ::google::protobuf::int32 E_MarryConstant::m_redcollect() const {
  return m_redcollect_;
}
inline void E_MarryConstant::set_m_redcollect(::google::protobuf::int32 value) {
  set_has_m_redcollect();
  m_redcollect_ = value;
}

// optional int32 m_redcollectNum = 39;
inline bool E_MarryConstant::has_m_redcollectnum() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void E_MarryConstant::set_has_m_redcollectnum() {
  _has_bits_[1] |= 0x00000040u;
}
inline void E_MarryConstant::clear_has_m_redcollectnum() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void E_MarryConstant::clear_m_redcollectnum() {
  m_redcollectnum_ = 0;
  clear_has_m_redcollectnum();
}
inline ::google::protobuf::int32 E_MarryConstant::m_redcollectnum() const {
  return m_redcollectnum_;
}
inline void E_MarryConstant::set_m_redcollectnum(::google::protobuf::int32 value) {
  set_has_m_redcollectnum();
  m_redcollectnum_ = value;
}

// optional int32 m_cakeMonster = 40;
inline bool E_MarryConstant::has_m_cakemonster() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void E_MarryConstant::set_has_m_cakemonster() {
  _has_bits_[1] |= 0x00000080u;
}
inline void E_MarryConstant::clear_has_m_cakemonster() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void E_MarryConstant::clear_m_cakemonster() {
  m_cakemonster_ = 0;
  clear_has_m_cakemonster();
}
inline ::google::protobuf::int32 E_MarryConstant::m_cakemonster() const {
  return m_cakemonster_;
}
inline void E_MarryConstant::set_m_cakemonster(::google::protobuf::int32 value) {
  set_has_m_cakemonster();
  m_cakemonster_ = value;
}

// optional int32 m_HyMonster = 41;
inline bool E_MarryConstant::has_m_hymonster() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void E_MarryConstant::set_has_m_hymonster() {
  _has_bits_[1] |= 0x00000100u;
}
inline void E_MarryConstant::clear_has_m_hymonster() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void E_MarryConstant::clear_m_hymonster() {
  m_hymonster_ = 0;
  clear_has_m_hymonster();
}
inline ::google::protobuf::int32 E_MarryConstant::m_hymonster() const {
  return m_hymonster_;
}
inline void E_MarryConstant::set_m_hymonster(::google::protobuf::int32 value) {
  set_has_m_hymonster();
  m_hymonster_ = value;
}

// repeated .proto_ff.E_MarryConstantTourmonsterDesc m_tourMonster = 42;
inline int E_MarryConstant::m_tourmonster_size() const {
  return m_tourmonster_.size();
}
inline void E_MarryConstant::clear_m_tourmonster() {
  m_tourmonster_.Clear();
}
inline const ::proto_ff::E_MarryConstantTourmonsterDesc& E_MarryConstant::m_tourmonster(int index) const {
  return m_tourmonster_.Get(index);
}
inline ::proto_ff::E_MarryConstantTourmonsterDesc* E_MarryConstant::mutable_m_tourmonster(int index) {
  return m_tourmonster_.Mutable(index);
}
inline ::proto_ff::E_MarryConstantTourmonsterDesc* E_MarryConstant::add_m_tourmonster() {
  return m_tourmonster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstantTourmonsterDesc >&
E_MarryConstant::m_tourmonster() const {
  return m_tourmonster_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstantTourmonsterDesc >*
E_MarryConstant::mutable_m_tourmonster() {
  return &m_tourmonster_;
}

// -------------------------------------------------------------------

// Sheet_MarryConstant

// repeated .proto_ff.E_MarryConstant E_MarryConstant_List = 1;
inline int Sheet_MarryConstant::e_marryconstant_list_size() const {
  return e_marryconstant_list_.size();
}
inline void Sheet_MarryConstant::clear_e_marryconstant_list() {
  e_marryconstant_list_.Clear();
}
inline const ::proto_ff::E_MarryConstant& Sheet_MarryConstant::e_marryconstant_list(int index) const {
  return e_marryconstant_list_.Get(index);
}
inline ::proto_ff::E_MarryConstant* Sheet_MarryConstant::mutable_e_marryconstant_list(int index) {
  return e_marryconstant_list_.Mutable(index);
}
inline ::proto_ff::E_MarryConstant* Sheet_MarryConstant::add_e_marryconstant_list() {
  return e_marryconstant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstant >&
Sheet_MarryConstant::e_marryconstant_list() const {
  return e_marryconstant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryConstant >*
Sheet_MarryConstant::mutable_e_marryconstant_list() {
  return &e_marryconstant_list_;
}

// -------------------------------------------------------------------

// E_MarryCommon

// optional int32 m_lv = 1;
inline bool E_MarryCommon::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryCommon::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryCommon::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryCommon::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_MarryCommon::m_lv() const {
  return m_lv_;
}
inline void E_MarryCommon::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarryCommon

// repeated .proto_ff.E_MarryCommon E_MarryCommon_List = 1;
inline int Sheet_MarryCommon::e_marrycommon_list_size() const {
  return e_marrycommon_list_.size();
}
inline void Sheet_MarryCommon::clear_e_marrycommon_list() {
  e_marrycommon_list_.Clear();
}
inline const ::proto_ff::E_MarryCommon& Sheet_MarryCommon::e_marrycommon_list(int index) const {
  return e_marrycommon_list_.Get(index);
}
inline ::proto_ff::E_MarryCommon* Sheet_MarryCommon::mutable_e_marrycommon_list(int index) {
  return e_marrycommon_list_.Mutable(index);
}
inline ::proto_ff::E_MarryCommon* Sheet_MarryCommon::add_e_marrycommon_list() {
  return e_marrycommon_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryCommon >&
Sheet_MarryCommon::e_marrycommon_list() const {
  return e_marrycommon_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryCommon >*
Sheet_MarryCommon::mutable_e_marrycommon_list() {
  return &e_marrycommon_list_;
}

// -------------------------------------------------------------------

// E_MarryWeddingStageDesc

// optional int32 m_num = 1;
inline bool E_MarryWeddingStageDesc::has_m_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryWeddingStageDesc::set_has_m_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryWeddingStageDesc::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryWeddingStageDesc::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_MarryWeddingStageDesc::m_num() const {
  return m_num_;
}
inline void E_MarryWeddingStageDesc::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// -------------------------------------------------------------------

// E_MarryWeddingFireDesc

// optional int32 m_value = 1;
inline bool E_MarryWeddingFireDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryWeddingFireDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryWeddingFireDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryWeddingFireDesc::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_MarryWeddingFireDesc::m_value() const {
  return m_value_;
}
inline void E_MarryWeddingFireDesc::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// optional int32 m_type = 2;
inline bool E_MarryWeddingFireDesc::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryWeddingFireDesc::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryWeddingFireDesc::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryWeddingFireDesc::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MarryWeddingFireDesc::m_type() const {
  return m_type_;
}
inline void E_MarryWeddingFireDesc::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// -------------------------------------------------------------------

// E_MarryWeddingMoodDesc

// optional int32 m_reward = 1;
inline bool E_MarryWeddingMoodDesc::has_m_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryWeddingMoodDesc::set_has_m_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryWeddingMoodDesc::clear_has_m_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryWeddingMoodDesc::clear_m_reward() {
  m_reward_ = 0;
  clear_has_m_reward();
}
inline ::google::protobuf::int32 E_MarryWeddingMoodDesc::m_reward() const {
  return m_reward_;
}
inline void E_MarryWeddingMoodDesc::set_m_reward(::google::protobuf::int32 value) {
  set_has_m_reward();
  m_reward_ = value;
}

// optional int32 m_value = 2;
inline bool E_MarryWeddingMoodDesc::has_m_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryWeddingMoodDesc::set_has_m_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryWeddingMoodDesc::clear_has_m_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryWeddingMoodDesc::clear_m_value() {
  m_value_ = 0;
  clear_has_m_value();
}
inline ::google::protobuf::int32 E_MarryWeddingMoodDesc::m_value() const {
  return m_value_;
}
inline void E_MarryWeddingMoodDesc::set_m_value(::google::protobuf::int32 value) {
  set_has_m_value();
  m_value_ = value;
}

// -------------------------------------------------------------------

// E_MarryWedding

// optional int32 m_id = 1;
inline bool E_MarryWedding::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryWedding::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryWedding::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryWedding::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MarryWedding::m_id() const {
  return m_id_;
}
inline void E_MarryWedding::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_signReward = 2;
inline bool E_MarryWedding::has_m_signreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryWedding::set_has_m_signreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryWedding::clear_has_m_signreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryWedding::clear_m_signreward() {
  m_signreward_ = 0;
  clear_has_m_signreward();
}
inline ::google::protobuf::int32 E_MarryWedding::m_signreward() const {
  return m_signreward_;
}
inline void E_MarryWedding::set_m_signreward(::google::protobuf::int32 value) {
  set_has_m_signreward();
  m_signreward_ = value;
}

// optional int32 m_signDaynum = 3;
inline bool E_MarryWedding::has_m_signdaynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryWedding::set_has_m_signdaynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryWedding::clear_has_m_signdaynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryWedding::clear_m_signdaynum() {
  m_signdaynum_ = 0;
  clear_has_m_signdaynum();
}
inline ::google::protobuf::int32 E_MarryWedding::m_signdaynum() const {
  return m_signdaynum_;
}
inline void E_MarryWedding::set_m_signdaynum(::google::protobuf::int32 value) {
  set_has_m_signdaynum();
  m_signdaynum_ = value;
}

// optional int32 m_cakeReftime = 4;
inline bool E_MarryWedding::has_m_cakereftime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MarryWedding::set_has_m_cakereftime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MarryWedding::clear_has_m_cakereftime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MarryWedding::clear_m_cakereftime() {
  m_cakereftime_ = 0;
  clear_has_m_cakereftime();
}
inline ::google::protobuf::int32 E_MarryWedding::m_cakereftime() const {
  return m_cakereftime_;
}
inline void E_MarryWedding::set_m_cakereftime(::google::protobuf::int32 value) {
  set_has_m_cakereftime();
  m_cakereftime_ = value;
}

// optional int32 m_cakeNum = 5;
inline bool E_MarryWedding::has_m_cakenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MarryWedding::set_has_m_cakenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MarryWedding::clear_has_m_cakenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MarryWedding::clear_m_cakenum() {
  m_cakenum_ = 0;
  clear_has_m_cakenum();
}
inline ::google::protobuf::int32 E_MarryWedding::m_cakenum() const {
  return m_cakenum_;
}
inline void E_MarryWedding::set_m_cakenum(::google::protobuf::int32 value) {
  set_has_m_cakenum();
  m_cakenum_ = value;
}

// optional int32 m_cake = 6;
inline bool E_MarryWedding::has_m_cake() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MarryWedding::set_has_m_cake() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MarryWedding::clear_has_m_cake() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MarryWedding::clear_m_cake() {
  m_cake_ = 0;
  clear_has_m_cake();
}
inline ::google::protobuf::int32 E_MarryWedding::m_cake() const {
  return m_cake_;
}
inline void E_MarryWedding::set_m_cake(::google::protobuf::int32 value) {
  set_has_m_cake();
  m_cake_ = value;
}

// optional string m_model = 7;
inline bool E_MarryWedding::has_m_model() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MarryWedding::set_has_m_model() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MarryWedding::clear_has_m_model() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MarryWedding::clear_m_model() {
  if (m_model_ != &::google::protobuf::internal::kEmptyString) {
    m_model_->clear();
  }
  clear_has_m_model();
}
inline const ::std::string& E_MarryWedding::m_model() const {
  return *m_model_;
}
inline void E_MarryWedding::set_m_model(const ::std::string& value) {
  set_has_m_model();
  if (m_model_ == &::google::protobuf::internal::kEmptyString) {
    m_model_ = new ::std::string;
  }
  m_model_->assign(value);
}
inline void E_MarryWedding::set_m_model(const char* value) {
  set_has_m_model();
  if (m_model_ == &::google::protobuf::internal::kEmptyString) {
    m_model_ = new ::std::string;
  }
  m_model_->assign(value);
}
inline void E_MarryWedding::set_m_model(const char* value, size_t size) {
  set_has_m_model();
  if (m_model_ == &::google::protobuf::internal::kEmptyString) {
    m_model_ = new ::std::string;
  }
  m_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MarryWedding::mutable_m_model() {
  set_has_m_model();
  if (m_model_ == &::google::protobuf::internal::kEmptyString) {
    m_model_ = new ::std::string;
  }
  return m_model_;
}
inline ::std::string* E_MarryWedding::release_m_model() {
  clear_has_m_model();
  if (m_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_model_;
    m_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MarryWedding::set_allocated_m_model(::std::string* m_model) {
  if (m_model_ != &::google::protobuf::internal::kEmptyString) {
    delete m_model_;
  }
  if (m_model) {
    set_has_m_model();
    m_model_ = m_model;
  } else {
    clear_has_m_model();
    m_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_modeltime = 8;
inline bool E_MarryWedding::has_m_modeltime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MarryWedding::set_has_m_modeltime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MarryWedding::clear_has_m_modeltime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MarryWedding::clear_m_modeltime() {
  m_modeltime_ = 0;
  clear_has_m_modeltime();
}
inline ::google::protobuf::int32 E_MarryWedding::m_modeltime() const {
  return m_modeltime_;
}
inline void E_MarryWedding::set_m_modeltime(::google::protobuf::int32 value) {
  set_has_m_modeltime();
  m_modeltime_ = value;
}

// optional int32 m_cakeReward = 9;
inline bool E_MarryWedding::has_m_cakereward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MarryWedding::set_has_m_cakereward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MarryWedding::clear_has_m_cakereward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MarryWedding::clear_m_cakereward() {
  m_cakereward_ = 0;
  clear_has_m_cakereward();
}
inline ::google::protobuf::int32 E_MarryWedding::m_cakereward() const {
  return m_cakereward_;
}
inline void E_MarryWedding::set_m_cakereward(::google::protobuf::int32 value) {
  set_has_m_cakereward();
  m_cakereward_ = value;
}

// optional int32 m_signCakenum = 10;
inline bool E_MarryWedding::has_m_signcakenum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MarryWedding::set_has_m_signcakenum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MarryWedding::clear_has_m_signcakenum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MarryWedding::clear_m_signcakenum() {
  m_signcakenum_ = 0;
  clear_has_m_signcakenum();
}
inline ::google::protobuf::int32 E_MarryWedding::m_signcakenum() const {
  return m_signcakenum_;
}
inline void E_MarryWedding::set_m_signcakenum(::google::protobuf::int32 value) {
  set_has_m_signcakenum();
  m_signcakenum_ = value;
}

// optional int32 m_monster = 11;
inline bool E_MarryWedding::has_m_monster() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MarryWedding::set_has_m_monster() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MarryWedding::clear_has_m_monster() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MarryWedding::clear_m_monster() {
  m_monster_ = 0;
  clear_has_m_monster();
}
inline ::google::protobuf::int32 E_MarryWedding::m_monster() const {
  return m_monster_;
}
inline void E_MarryWedding::set_m_monster(::google::protobuf::int32 value) {
  set_has_m_monster();
  m_monster_ = value;
}

// optional int32 m_monsterNum = 12;
inline bool E_MarryWedding::has_m_monsternum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MarryWedding::set_has_m_monsternum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MarryWedding::clear_has_m_monsternum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MarryWedding::clear_m_monsternum() {
  m_monsternum_ = 0;
  clear_has_m_monsternum();
}
inline ::google::protobuf::int32 E_MarryWedding::m_monsternum() const {
  return m_monsternum_;
}
inline void E_MarryWedding::set_m_monsternum(::google::protobuf::int32 value) {
  set_has_m_monsternum();
  m_monsternum_ = value;
}

// optional int32 m_monstertime = 13;
inline bool E_MarryWedding::has_m_monstertime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_MarryWedding::set_has_m_monstertime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_MarryWedding::clear_has_m_monstertime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_MarryWedding::clear_m_monstertime() {
  m_monstertime_ = 0;
  clear_has_m_monstertime();
}
inline ::google::protobuf::int32 E_MarryWedding::m_monstertime() const {
  return m_monstertime_;
}
inline void E_MarryWedding::set_m_monstertime(::google::protobuf::int32 value) {
  set_has_m_monstertime();
  m_monstertime_ = value;
}

// optional int32 m_npcid = 14;
inline bool E_MarryWedding::has_m_npcid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_MarryWedding::set_has_m_npcid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_MarryWedding::clear_has_m_npcid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_MarryWedding::clear_m_npcid() {
  m_npcid_ = 0;
  clear_has_m_npcid();
}
inline ::google::protobuf::int32 E_MarryWedding::m_npcid() const {
  return m_npcid_;
}
inline void E_MarryWedding::set_m_npcid(::google::protobuf::int32 value) {
  set_has_m_npcid();
  m_npcid_ = value;
}

// optional int32 m_npcNum = 15;
inline bool E_MarryWedding::has_m_npcnum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_MarryWedding::set_has_m_npcnum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_MarryWedding::clear_has_m_npcnum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_MarryWedding::clear_m_npcnum() {
  m_npcnum_ = 0;
  clear_has_m_npcnum();
}
inline ::google::protobuf::int32 E_MarryWedding::m_npcnum() const {
  return m_npcnum_;
}
inline void E_MarryWedding::set_m_npcnum(::google::protobuf::int32 value) {
  set_has_m_npcnum();
  m_npcnum_ = value;
}

// optional int32 m_monsterReward = 16;
inline bool E_MarryWedding::has_m_monsterreward() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_MarryWedding::set_has_m_monsterreward() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_MarryWedding::clear_has_m_monsterreward() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_MarryWedding::clear_m_monsterreward() {
  m_monsterreward_ = 0;
  clear_has_m_monsterreward();
}
inline ::google::protobuf::int32 E_MarryWedding::m_monsterreward() const {
  return m_monsterreward_;
}
inline void E_MarryWedding::set_m_monsterreward(::google::protobuf::int32 value) {
  set_has_m_monsterreward();
  m_monsterreward_ = value;
}

// optional int32 m_monsterDaynum = 17;
inline bool E_MarryWedding::has_m_monsterdaynum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_MarryWedding::set_has_m_monsterdaynum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_MarryWedding::clear_has_m_monsterdaynum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_MarryWedding::clear_m_monsterdaynum() {
  m_monsterdaynum_ = 0;
  clear_has_m_monsterdaynum();
}
inline ::google::protobuf::int32 E_MarryWedding::m_monsterdaynum() const {
  return m_monsterdaynum_;
}
inline void E_MarryWedding::set_m_monsterdaynum(::google::protobuf::int32 value) {
  set_has_m_monsterdaynum();
  m_monsterdaynum_ = value;
}

// optional int32 m_feastId = 18;
inline bool E_MarryWedding::has_m_feastid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_MarryWedding::set_has_m_feastid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_MarryWedding::clear_has_m_feastid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_MarryWedding::clear_m_feastid() {
  m_feastid_ = 0;
  clear_has_m_feastid();
}
inline ::google::protobuf::int32 E_MarryWedding::m_feastid() const {
  return m_feastid_;
}
inline void E_MarryWedding::set_m_feastid(::google::protobuf::int32 value) {
  set_has_m_feastid();
  m_feastid_ = value;
}

// optional int32 m_feastReward = 19;
inline bool E_MarryWedding::has_m_feastreward() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_MarryWedding::set_has_m_feastreward() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_MarryWedding::clear_has_m_feastreward() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_MarryWedding::clear_m_feastreward() {
  m_feastreward_ = 0;
  clear_has_m_feastreward();
}
inline ::google::protobuf::int32 E_MarryWedding::m_feastreward() const {
  return m_feastreward_;
}
inline void E_MarryWedding::set_m_feastreward(::google::protobuf::int32 value) {
  set_has_m_feastreward();
  m_feastreward_ = value;
}

// optional int32 m_feastNum = 20;
inline bool E_MarryWedding::has_m_feastnum() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_MarryWedding::set_has_m_feastnum() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_MarryWedding::clear_has_m_feastnum() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_MarryWedding::clear_m_feastnum() {
  m_feastnum_ = 0;
  clear_has_m_feastnum();
}
inline ::google::protobuf::int32 E_MarryWedding::m_feastnum() const {
  return m_feastnum_;
}
inline void E_MarryWedding::set_m_feastnum(::google::protobuf::int32 value) {
  set_has_m_feastnum();
  m_feastnum_ = value;
}

// optional int32 m_interval = 21;
inline bool E_MarryWedding::has_m_interval() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_MarryWedding::set_has_m_interval() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_MarryWedding::clear_has_m_interval() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_MarryWedding::clear_m_interval() {
  m_interval_ = 0;
  clear_has_m_interval();
}
inline ::google::protobuf::int32 E_MarryWedding::m_interval() const {
  return m_interval_;
}
inline void E_MarryWedding::set_m_interval(::google::protobuf::int32 value) {
  set_has_m_interval();
  m_interval_ = value;
}

// optional int32 m_skillid = 22;
inline bool E_MarryWedding::has_m_skillid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_MarryWedding::set_has_m_skillid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_MarryWedding::clear_has_m_skillid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_MarryWedding::clear_m_skillid() {
  m_skillid_ = 0;
  clear_has_m_skillid();
}
inline ::google::protobuf::int32 E_MarryWedding::m_skillid() const {
  return m_skillid_;
}
inline void E_MarryWedding::set_m_skillid(::google::protobuf::int32 value) {
  set_has_m_skillid();
  m_skillid_ = value;
}

// repeated .proto_ff.E_MarryWeddingStageDesc m_stage = 23;
inline int E_MarryWedding::m_stage_size() const {
  return m_stage_.size();
}
inline void E_MarryWedding::clear_m_stage() {
  m_stage_.Clear();
}
inline const ::proto_ff::E_MarryWeddingStageDesc& E_MarryWedding::m_stage(int index) const {
  return m_stage_.Get(index);
}
inline ::proto_ff::E_MarryWeddingStageDesc* E_MarryWedding::mutable_m_stage(int index) {
  return m_stage_.Mutable(index);
}
inline ::proto_ff::E_MarryWeddingStageDesc* E_MarryWedding::add_m_stage() {
  return m_stage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingStageDesc >&
E_MarryWedding::m_stage() const {
  return m_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingStageDesc >*
E_MarryWedding::mutable_m_stage() {
  return &m_stage_;
}

// repeated .proto_ff.E_MarryWeddingFireDesc m_fire = 24;
inline int E_MarryWedding::m_fire_size() const {
  return m_fire_.size();
}
inline void E_MarryWedding::clear_m_fire() {
  m_fire_.Clear();
}
inline const ::proto_ff::E_MarryWeddingFireDesc& E_MarryWedding::m_fire(int index) const {
  return m_fire_.Get(index);
}
inline ::proto_ff::E_MarryWeddingFireDesc* E_MarryWedding::mutable_m_fire(int index) {
  return m_fire_.Mutable(index);
}
inline ::proto_ff::E_MarryWeddingFireDesc* E_MarryWedding::add_m_fire() {
  return m_fire_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingFireDesc >&
E_MarryWedding::m_fire() const {
  return m_fire_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingFireDesc >*
E_MarryWedding::mutable_m_fire() {
  return &m_fire_;
}

// repeated .proto_ff.E_MarryWeddingMoodDesc m_mood = 25;
inline int E_MarryWedding::m_mood_size() const {
  return m_mood_.size();
}
inline void E_MarryWedding::clear_m_mood() {
  m_mood_.Clear();
}
inline const ::proto_ff::E_MarryWeddingMoodDesc& E_MarryWedding::m_mood(int index) const {
  return m_mood_.Get(index);
}
inline ::proto_ff::E_MarryWeddingMoodDesc* E_MarryWedding::mutable_m_mood(int index) {
  return m_mood_.Mutable(index);
}
inline ::proto_ff::E_MarryWeddingMoodDesc* E_MarryWedding::add_m_mood() {
  return m_mood_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingMoodDesc >&
E_MarryWedding::m_mood() const {
  return m_mood_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWeddingMoodDesc >*
E_MarryWedding::mutable_m_mood() {
  return &m_mood_;
}

// -------------------------------------------------------------------

// Sheet_MarryWedding

// repeated .proto_ff.E_MarryWedding E_MarryWedding_List = 1;
inline int Sheet_MarryWedding::e_marrywedding_list_size() const {
  return e_marrywedding_list_.size();
}
inline void Sheet_MarryWedding::clear_e_marrywedding_list() {
  e_marrywedding_list_.Clear();
}
inline const ::proto_ff::E_MarryWedding& Sheet_MarryWedding::e_marrywedding_list(int index) const {
  return e_marrywedding_list_.Get(index);
}
inline ::proto_ff::E_MarryWedding* Sheet_MarryWedding::mutable_e_marrywedding_list(int index) {
  return e_marrywedding_list_.Mutable(index);
}
inline ::proto_ff::E_MarryWedding* Sheet_MarryWedding::add_e_marrywedding_list() {
  return e_marrywedding_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWedding >&
Sheet_MarryWedding::e_marrywedding_list() const {
  return e_marrywedding_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryWedding >*
Sheet_MarryWedding::mutable_e_marrywedding_list() {
  return &e_marrywedding_list_;
}

// -------------------------------------------------------------------

// E_MarryExp

// optional int32 m_lv = 1;
inline bool E_MarryExp::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MarryExp::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MarryExp::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MarryExp::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_MarryExp::m_lv() const {
  return m_lv_;
}
inline void E_MarryExp::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_weddingExp = 2;
inline bool E_MarryExp::has_m_weddingexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MarryExp::set_has_m_weddingexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MarryExp::clear_has_m_weddingexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MarryExp::clear_m_weddingexp() {
  m_weddingexp_ = 0;
  clear_has_m_weddingexp();
}
inline ::google::protobuf::int32 E_MarryExp::m_weddingexp() const {
  return m_weddingexp_;
}
inline void E_MarryExp::set_m_weddingexp(::google::protobuf::int32 value) {
  set_has_m_weddingexp();
  m_weddingexp_ = value;
}

// optional int32 m_dayExpmax = 3;
inline bool E_MarryExp::has_m_dayexpmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MarryExp::set_has_m_dayexpmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MarryExp::clear_has_m_dayexpmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MarryExp::clear_m_dayexpmax() {
  m_dayexpmax_ = 0;
  clear_has_m_dayexpmax();
}
inline ::google::protobuf::int32 E_MarryExp::m_dayexpmax() const {
  return m_dayexpmax_;
}
inline void E_MarryExp::set_m_dayexpmax(::google::protobuf::int32 value) {
  set_has_m_dayexpmax();
  m_dayexpmax_ = value;
}

// -------------------------------------------------------------------

// Sheet_MarryExp

// repeated .proto_ff.E_MarryExp E_MarryExp_List = 1;
inline int Sheet_MarryExp::e_marryexp_list_size() const {
  return e_marryexp_list_.size();
}
inline void Sheet_MarryExp::clear_e_marryexp_list() {
  e_marryexp_list_.Clear();
}
inline const ::proto_ff::E_MarryExp& Sheet_MarryExp::e_marryexp_list(int index) const {
  return e_marryexp_list_.Get(index);
}
inline ::proto_ff::E_MarryExp* Sheet_MarryExp::mutable_e_marryexp_list(int index) {
  return e_marryexp_list_.Mutable(index);
}
inline ::proto_ff::E_MarryExp* Sheet_MarryExp::add_e_marryexp_list() {
  return e_marryexp_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExp >&
Sheet_MarryExp::e_marryexp_list() const {
  return e_marryexp_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MarryExp >*
Sheet_MarryExp::mutable_e_marryexp_list() {
  return &e_marryexp_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fMarry_2eproto__INCLUDED
