// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_logic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common_logic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* PacketMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerPacketMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerPacketMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldExternalConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldExternalConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameExternalConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameExternalConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapJsonConfigObjsPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapJsonConfigObjsPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapJsonConfigObjs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapJsonConfigObjs_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapJsonConfigAreaDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapJsonConfigAreaDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapJsonConfigArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapJsonConfigArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapJsonConfigPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapJsonConfigPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapJsonConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapJsonConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TableID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_5flogic_2eproto() {
  protobuf_AddDesc_common_5flogic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common_logic.proto");
  GOOGLE_CHECK(file != NULL);
  PacketMsg_descriptor_ = file->message_type(0);
  static const int PacketMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, upper_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, min_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, control_time_),
  };
  PacketMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PacketMsg_descriptor_,
      PacketMsg::default_instance_,
      PacketMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PacketMsg));
  ServerPacketMsg_descriptor_ = file->message_type(1);
  static const int ServerPacketMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPacketMsg, packetmsg_),
  };
  ServerPacketMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerPacketMsg_descriptor_,
      ServerPacketMsg::default_instance_,
      ServerPacketMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPacketMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPacketMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerPacketMsg));
  WorldExternalConfig_descriptor_ = file->message_type(2);
  static const int WorldExternalConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, tokentimecheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, whiteliststate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, maxregisternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, whitelist_),
  };
  WorldExternalConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldExternalConfig_descriptor_,
      WorldExternalConfig::default_instance_,
      WorldExternalConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldExternalConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldExternalConfig));
  GameExternalConfig_descriptor_ = file->message_type(3);
  static const int GameExternalConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameExternalConfig, map_),
  };
  GameExternalConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameExternalConfig_descriptor_,
      GameExternalConfig::default_instance_,
      GameExternalConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameExternalConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameExternalConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameExternalConfig));
  MapPosInfo_descriptor_ = file->message_type(4);
  static const int MapPosInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPosInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPosInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPosInfo, z_),
  };
  MapPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPosInfo_descriptor_,
      MapPosInfo::default_instance_,
      MapPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPosInfo));
  MapJsonConfigObjsPos_descriptor_ = file->message_type(5);
  static const int MapJsonConfigObjsPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigObjsPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigObjsPos, rot_),
  };
  MapJsonConfigObjsPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapJsonConfigObjsPos_descriptor_,
      MapJsonConfigObjsPos::default_instance_,
      MapJsonConfigObjsPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigObjsPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigObjsPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapJsonConfigObjsPos));
  MapJsonConfigObjs_descriptor_ = file->message_type(6);
  static const int MapJsonConfigObjs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigObjs, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigObjs, pos_),
  };
  MapJsonConfigObjs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapJsonConfigObjs_descriptor_,
      MapJsonConfigObjs::default_instance_,
      MapJsonConfigObjs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigObjs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigObjs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapJsonConfigObjs));
  MapJsonConfigAreaDetail_descriptor_ = file->message_type(7);
  static const int MapJsonConfigAreaDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigAreaDetail, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigAreaDetail, pos_),
  };
  MapJsonConfigAreaDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapJsonConfigAreaDetail_descriptor_,
      MapJsonConfigAreaDetail::default_instance_,
      MapJsonConfigAreaDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigAreaDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigAreaDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapJsonConfigAreaDetail));
  MapJsonConfigArea_descriptor_ = file->message_type(8);
  static const int MapJsonConfigArea_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigArea, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigArea, detail_),
  };
  MapJsonConfigArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapJsonConfigArea_descriptor_,
      MapJsonConfigArea::default_instance_,
      MapJsonConfigArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapJsonConfigArea));
  MapJsonConfigPath_descriptor_ = file->message_type(9);
  static const int MapJsonConfigPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigPath, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigPath, pos_),
  };
  MapJsonConfigPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapJsonConfigPath_descriptor_,
      MapJsonConfigPath::default_instance_,
      MapJsonConfigPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfigPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapJsonConfigPath));
  MapJsonConfig_descriptor_ = file->message_type(10);
  static const int MapJsonConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfig, objs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfig, areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfig, paths_),
  };
  MapJsonConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapJsonConfig_descriptor_,
      MapJsonConfig::default_instance_,
      MapJsonConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapJsonConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapJsonConfig));
  TableID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_5flogic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PacketMsg_descriptor_, &PacketMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerPacketMsg_descriptor_, &ServerPacketMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldExternalConfig_descriptor_, &WorldExternalConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameExternalConfig_descriptor_, &GameExternalConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPosInfo_descriptor_, &MapPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapJsonConfigObjsPos_descriptor_, &MapJsonConfigObjsPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapJsonConfigObjs_descriptor_, &MapJsonConfigObjs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapJsonConfigAreaDetail_descriptor_, &MapJsonConfigAreaDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapJsonConfigArea_descriptor_, &MapJsonConfigArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapJsonConfigPath_descriptor_, &MapJsonConfigPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapJsonConfig_descriptor_, &MapJsonConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_5flogic_2eproto() {
  delete PacketMsg::default_instance_;
  delete PacketMsg_reflection_;
  delete ServerPacketMsg::default_instance_;
  delete ServerPacketMsg_reflection_;
  delete WorldExternalConfig::default_instance_;
  delete WorldExternalConfig_reflection_;
  delete GameExternalConfig::default_instance_;
  delete GameExternalConfig_reflection_;
  delete MapPosInfo::default_instance_;
  delete MapPosInfo_reflection_;
  delete MapJsonConfigObjsPos::default_instance_;
  delete MapJsonConfigObjsPos_reflection_;
  delete MapJsonConfigObjs::default_instance_;
  delete MapJsonConfigObjs_reflection_;
  delete MapJsonConfigAreaDetail::default_instance_;
  delete MapJsonConfigAreaDetail_reflection_;
  delete MapJsonConfigArea::default_instance_;
  delete MapJsonConfigArea_reflection_;
  delete MapJsonConfigPath::default_instance_;
  delete MapJsonConfigPath_reflection_;
  delete MapJsonConfig::default_instance_;
  delete MapJsonConfig_reflection_;
}

void protobuf_AddDesc_common_5flogic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022common_logic.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"s\n\tPacketMsg\022\021\n\003cmd\030\001 \001(\rB"
    "\004\240\301\024\001\022\022\n\nserverType\030\002 \001(\r\022\023\n\013upper_limit"
    "\030\003 \001(\r\022\024\n\014min_interval\030\004 \001(\r\022\024\n\014control_"
    "time\030\005 \001(\r\"\?\n\017ServerPacketMsg\022,\n\tPacketM"
    "sg\030\001 \003(\0132\023.proto_ff.PacketMsgB\004\240\301\024\001\"v\n\023W"
    "orldExternalConfig\022\026\n\016TokenTimeCheck\030\001 \001"
    "(\010\022\026\n\016WhiteListState\030\002 \001(\010\022\026\n\016MaxRegiste"
    "rNum\030\003 \001(\r\022\027\n\tWhiteList\030\004 \003(\004B\004\210\301\024d\"\'\n\022G"
    "ameExternalConfig\022\021\n\003map\030\001 \003(\004B\004\240\301\024\001\"3\n\n"
    "MapPosInfo\022\017\n\001x\030\001 \001(\001B\004\240\301\024\001\022\t\n\001y\030\002 \001(\001\022\t"
    "\n\001z\030\003 \001(\001\"L\n\024MapJsonConfigObjsPos\022\'\n\003pos"
    "\030\001 \001(\0132\024.proto_ff.MapPosInfoB\004\240\301\024\001\022\013\n\003ro"
    "t\030\002 \001(\001\"R\n\021MapJsonConfigObjs\022\020\n\002id\030\001 \001(\004"
    "B\004\240\301\024\001\022+\n\003pos\030\002 \003(\0132\036.proto_ff.MapJsonCo"
    "nfigObjsPos\"R\n\027MapJsonConfigAreaDetail\022\024"
    "\n\006radius\030\001 \001(\001B\004\240\301\024\001\022!\n\003pos\030\002 \001(\0132\024.prot"
    "o_ff.MapPosInfo\"X\n\021MapJsonConfigArea\022\020\n\002"
    "id\030\001 \001(\004B\004\240\301\024\001\0221\n\006detail\030\002 \003(\0132!.proto_f"
    "f.MapJsonConfigAreaDetail\"H\n\021MapJsonConf"
    "igPath\022\020\n\002id\030\001 \001(\004B\004\240\301\024\001\022!\n\003pos\030\002 \003(\0132\024."
    "proto_ff.MapPosInfo\"\230\001\n\rMapJsonConfig\022/\n"
    "\004objs\030\001 \003(\0132\033.proto_ff.MapJsonConfigObjs"
    "B\004\240\301\024\001\022*\n\005areas\030\002 \003(\0132\033.proto_ff.MapJson"
    "ConfigArea\022*\n\005paths\030\003 \003(\0132\033.proto_ff.Map"
    "JsonConfigPath*5\n\007TableID\022\020\n\014E_TABLE_NON"
    "E\020\000\022\030\n\024E_TABLE_ROLE_DB_DATA\020\001", 1069);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common_logic.proto", &protobuf_RegisterTypes);
  PacketMsg::default_instance_ = new PacketMsg();
  ServerPacketMsg::default_instance_ = new ServerPacketMsg();
  WorldExternalConfig::default_instance_ = new WorldExternalConfig();
  GameExternalConfig::default_instance_ = new GameExternalConfig();
  MapPosInfo::default_instance_ = new MapPosInfo();
  MapJsonConfigObjsPos::default_instance_ = new MapJsonConfigObjsPos();
  MapJsonConfigObjs::default_instance_ = new MapJsonConfigObjs();
  MapJsonConfigAreaDetail::default_instance_ = new MapJsonConfigAreaDetail();
  MapJsonConfigArea::default_instance_ = new MapJsonConfigArea();
  MapJsonConfigPath::default_instance_ = new MapJsonConfigPath();
  MapJsonConfig::default_instance_ = new MapJsonConfig();
  PacketMsg::default_instance_->InitAsDefaultInstance();
  ServerPacketMsg::default_instance_->InitAsDefaultInstance();
  WorldExternalConfig::default_instance_->InitAsDefaultInstance();
  GameExternalConfig::default_instance_->InitAsDefaultInstance();
  MapPosInfo::default_instance_->InitAsDefaultInstance();
  MapJsonConfigObjsPos::default_instance_->InitAsDefaultInstance();
  MapJsonConfigObjs::default_instance_->InitAsDefaultInstance();
  MapJsonConfigAreaDetail::default_instance_->InitAsDefaultInstance();
  MapJsonConfigArea::default_instance_->InitAsDefaultInstance();
  MapJsonConfigPath::default_instance_->InitAsDefaultInstance();
  MapJsonConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_5flogic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_5flogic_2eproto {
  StaticDescriptorInitializer_common_5flogic_2eproto() {
    protobuf_AddDesc_common_5flogic_2eproto();
  }
} static_descriptor_initializer_common_5flogic_2eproto_;
const ::google::protobuf::EnumDescriptor* TableID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableID_descriptor_;
}
bool TableID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PacketMsg::kCmdFieldNumber;
const int PacketMsg::kServerTypeFieldNumber;
const int PacketMsg::kUpperLimitFieldNumber;
const int PacketMsg::kMinIntervalFieldNumber;
const int PacketMsg::kControlTimeFieldNumber;
#endif  // !_MSC_VER

PacketMsg::PacketMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PacketMsg::InitAsDefaultInstance() {
}

PacketMsg::PacketMsg(const PacketMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PacketMsg::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  servertype_ = 0u;
  upper_limit_ = 0u;
  min_interval_ = 0u;
  control_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketMsg::~PacketMsg() {
  SharedDtor();
}

void PacketMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PacketMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketMsg_descriptor_;
}

const PacketMsg& PacketMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

PacketMsg* PacketMsg::default_instance_ = NULL;

PacketMsg* PacketMsg::New() const {
  return new PacketMsg;
}

void PacketMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0u;
    servertype_ = 0u;
    upper_limit_ = 0u;
    min_interval_ = 0u;
    control_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PacketMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverType;
        break;
      }

      // optional uint32 serverType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_upper_limit;
        break;
      }

      // optional uint32 upper_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upper_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upper_limit_)));
          set_has_upper_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_min_interval;
        break;
      }

      // optional uint32 min_interval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_interval_)));
          set_has_min_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_control_time;
        break;
      }

      // optional uint32 control_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_time_)));
          set_has_control_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PacketMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional uint32 serverType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertype(), output);
  }

  // optional uint32 upper_limit = 3;
  if (has_upper_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upper_limit(), output);
  }

  // optional uint32 min_interval = 4;
  if (has_min_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_interval(), output);
  }

  // optional uint32 control_time = 5;
  if (has_control_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->control_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PacketMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional uint32 serverType = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertype(), target);
  }

  // optional uint32 upper_limit = 3;
  if (has_upper_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upper_limit(), target);
  }

  // optional uint32 min_interval = 4;
  if (has_min_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min_interval(), target);
  }

  // optional uint32 control_time = 5;
  if (has_control_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->control_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PacketMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 serverType = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // optional uint32 upper_limit = 3;
    if (has_upper_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upper_limit());
    }

    // optional uint32 min_interval = 4;
    if (has_min_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_interval());
    }

    // optional uint32 control_time = 5;
    if (has_control_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PacketMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PacketMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketMsg::MergeFrom(const PacketMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_upper_limit()) {
      set_upper_limit(from.upper_limit());
    }
    if (from.has_min_interval()) {
      set_min_interval(from.min_interval());
    }
    if (from.has_control_time()) {
      set_control_time(from.control_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PacketMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketMsg::CopyFrom(const PacketMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketMsg::IsInitialized() const {

  return true;
}

void PacketMsg::Swap(PacketMsg* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(servertype_, other->servertype_);
    std::swap(upper_limit_, other->upper_limit_);
    std::swap(min_interval_, other->min_interval_);
    std::swap(control_time_, other->control_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PacketMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketMsg_descriptor_;
  metadata.reflection = PacketMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerPacketMsg::kPacketMsgFieldNumber;
#endif  // !_MSC_VER

ServerPacketMsg::ServerPacketMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerPacketMsg::InitAsDefaultInstance() {
}

ServerPacketMsg::ServerPacketMsg(const ServerPacketMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerPacketMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPacketMsg::~ServerPacketMsg() {
  SharedDtor();
}

void ServerPacketMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerPacketMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerPacketMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerPacketMsg_descriptor_;
}

const ServerPacketMsg& ServerPacketMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

ServerPacketMsg* ServerPacketMsg::default_instance_ = NULL;

ServerPacketMsg* ServerPacketMsg::New() const {
  return new ServerPacketMsg;
}

void ServerPacketMsg::Clear() {
  packetmsg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerPacketMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.PacketMsg PacketMsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PacketMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packetmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PacketMsg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerPacketMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.PacketMsg PacketMsg = 1;
  for (int i = 0; i < this->packetmsg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->packetmsg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerPacketMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.PacketMsg PacketMsg = 1;
  for (int i = 0; i < this->packetmsg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->packetmsg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerPacketMsg::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.PacketMsg PacketMsg = 1;
  total_size += 1 * this->packetmsg_size();
  for (int i = 0; i < this->packetmsg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packetmsg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPacketMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerPacketMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerPacketMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerPacketMsg::MergeFrom(const ServerPacketMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  packetmsg_.MergeFrom(from.packetmsg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerPacketMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerPacketMsg::CopyFrom(const ServerPacketMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPacketMsg::IsInitialized() const {

  return true;
}

void ServerPacketMsg::Swap(ServerPacketMsg* other) {
  if (other != this) {
    packetmsg_.Swap(&other->packetmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerPacketMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerPacketMsg_descriptor_;
  metadata.reflection = ServerPacketMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldExternalConfig::kTokenTimeCheckFieldNumber;
const int WorldExternalConfig::kWhiteListStateFieldNumber;
const int WorldExternalConfig::kMaxRegisterNumFieldNumber;
const int WorldExternalConfig::kWhiteListFieldNumber;
#endif  // !_MSC_VER

WorldExternalConfig::WorldExternalConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldExternalConfig::InitAsDefaultInstance() {
}

WorldExternalConfig::WorldExternalConfig(const WorldExternalConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldExternalConfig::SharedCtor() {
  _cached_size_ = 0;
  tokentimecheck_ = false;
  whiteliststate_ = false;
  maxregisternum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldExternalConfig::~WorldExternalConfig() {
  SharedDtor();
}

void WorldExternalConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldExternalConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldExternalConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldExternalConfig_descriptor_;
}

const WorldExternalConfig& WorldExternalConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

WorldExternalConfig* WorldExternalConfig::default_instance_ = NULL;

WorldExternalConfig* WorldExternalConfig::New() const {
  return new WorldExternalConfig;
}

void WorldExternalConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tokentimecheck_ = false;
    whiteliststate_ = false;
    maxregisternum_ = 0u;
  }
  whitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldExternalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool TokenTimeCheck = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tokentimecheck_)));
          set_has_tokentimecheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WhiteListState;
        break;
      }

      // optional bool WhiteListState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WhiteListState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &whiteliststate_)));
          set_has_whiteliststate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxRegisterNum;
        break;
      }

      // optional uint32 MaxRegisterNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxRegisterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxregisternum_)));
          set_has_maxregisternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WhiteList;
        break;
      }

      // repeated uint64 WhiteList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WhiteList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_whitelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_whitelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WhiteList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldExternalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool TokenTimeCheck = 1;
  if (has_tokentimecheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->tokentimecheck(), output);
  }

  // optional bool WhiteListState = 2;
  if (has_whiteliststate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->whiteliststate(), output);
  }

  // optional uint32 MaxRegisterNum = 3;
  if (has_maxregisternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxregisternum(), output);
  }

  // repeated uint64 WhiteList = 4;
  for (int i = 0; i < this->whitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->whitelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldExternalConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool TokenTimeCheck = 1;
  if (has_tokentimecheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->tokentimecheck(), target);
  }

  // optional bool WhiteListState = 2;
  if (has_whiteliststate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->whiteliststate(), target);
  }

  // optional uint32 MaxRegisterNum = 3;
  if (has_maxregisternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxregisternum(), target);
  }

  // repeated uint64 WhiteList = 4;
  for (int i = 0; i < this->whitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->whitelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldExternalConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool TokenTimeCheck = 1;
    if (has_tokentimecheck()) {
      total_size += 1 + 1;
    }

    // optional bool WhiteListState = 2;
    if (has_whiteliststate()) {
      total_size += 1 + 1;
    }

    // optional uint32 MaxRegisterNum = 3;
    if (has_maxregisternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxregisternum());
    }

  }
  // repeated uint64 WhiteList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->whitelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->whitelist(i));
    }
    total_size += 1 * this->whitelist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldExternalConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldExternalConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldExternalConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldExternalConfig::MergeFrom(const WorldExternalConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  whitelist_.MergeFrom(from.whitelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokentimecheck()) {
      set_tokentimecheck(from.tokentimecheck());
    }
    if (from.has_whiteliststate()) {
      set_whiteliststate(from.whiteliststate());
    }
    if (from.has_maxregisternum()) {
      set_maxregisternum(from.maxregisternum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldExternalConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldExternalConfig::CopyFrom(const WorldExternalConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldExternalConfig::IsInitialized() const {

  return true;
}

void WorldExternalConfig::Swap(WorldExternalConfig* other) {
  if (other != this) {
    std::swap(tokentimecheck_, other->tokentimecheck_);
    std::swap(whiteliststate_, other->whiteliststate_);
    std::swap(maxregisternum_, other->maxregisternum_);
    whitelist_.Swap(&other->whitelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldExternalConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldExternalConfig_descriptor_;
  metadata.reflection = WorldExternalConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameExternalConfig::kMapFieldNumber;
#endif  // !_MSC_VER

GameExternalConfig::GameExternalConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameExternalConfig::InitAsDefaultInstance() {
}

GameExternalConfig::GameExternalConfig(const GameExternalConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameExternalConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameExternalConfig::~GameExternalConfig() {
  SharedDtor();
}

void GameExternalConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameExternalConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameExternalConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameExternalConfig_descriptor_;
}

const GameExternalConfig& GameExternalConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

GameExternalConfig* GameExternalConfig::default_instance_ = NULL;

GameExternalConfig* GameExternalConfig::New() const {
  return new GameExternalConfig;
}

void GameExternalConfig::Clear() {
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameExternalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_map())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_map())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameExternalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 map = 1;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameExternalConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 map = 1;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameExternalConfig::ByteSize() const {
  int total_size = 0;

  // repeated uint64 map = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->map(i));
    }
    total_size += 1 * this->map_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameExternalConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameExternalConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameExternalConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameExternalConfig::MergeFrom(const GameExternalConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameExternalConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameExternalConfig::CopyFrom(const GameExternalConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameExternalConfig::IsInitialized() const {

  return true;
}

void GameExternalConfig::Swap(GameExternalConfig* other) {
  if (other != this) {
    map_.Swap(&other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameExternalConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameExternalConfig_descriptor_;
  metadata.reflection = GameExternalConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapPosInfo::kXFieldNumber;
const int MapPosInfo::kYFieldNumber;
const int MapPosInfo::kZFieldNumber;
#endif  // !_MSC_VER

MapPosInfo::MapPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPosInfo::InitAsDefaultInstance() {
}

MapPosInfo::MapPosInfo(const MapPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPosInfo::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPosInfo::~MapPosInfo() {
  SharedDtor();
}

void MapPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPosInfo_descriptor_;
}

const MapPosInfo& MapPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MapPosInfo* MapPosInfo::default_instance_ = NULL;

MapPosInfo* MapPosInfo::New() const {
  return new MapPosInfo;
}

void MapPosInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapPosInfo::MergeFrom(const MapPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPosInfo::CopyFrom(const MapPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPosInfo::IsInitialized() const {

  return true;
}

void MapPosInfo::Swap(MapPosInfo* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPosInfo_descriptor_;
  metadata.reflection = MapPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapJsonConfigObjsPos::kPosFieldNumber;
const int MapJsonConfigObjsPos::kRotFieldNumber;
#endif  // !_MSC_VER

MapJsonConfigObjsPos::MapJsonConfigObjsPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapJsonConfigObjsPos::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::MapPosInfo*>(&::proto_ff::MapPosInfo::default_instance());
}

MapJsonConfigObjsPos::MapJsonConfigObjsPos(const MapJsonConfigObjsPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapJsonConfigObjsPos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  rot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapJsonConfigObjsPos::~MapJsonConfigObjsPos() {
  SharedDtor();
}

void MapJsonConfigObjsPos::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MapJsonConfigObjsPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapJsonConfigObjsPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapJsonConfigObjsPos_descriptor_;
}

const MapJsonConfigObjsPos& MapJsonConfigObjsPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MapJsonConfigObjsPos* MapJsonConfigObjsPos::default_instance_ = NULL;

MapJsonConfigObjsPos* MapJsonConfigObjsPos::New() const {
  return new MapJsonConfigObjsPos;
}

void MapJsonConfigObjsPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::MapPosInfo::Clear();
    }
    rot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapJsonConfigObjsPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MapPosInfo pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_rot;
        break;
      }

      // optional double rot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rot_)));
          set_has_rot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapJsonConfigObjsPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MapPosInfo pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // optional double rot = 2;
  if (has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapJsonConfigObjsPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MapPosInfo pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // optional double rot = 2;
  if (has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapJsonConfigObjsPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MapPosInfo pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional double rot = 2;
    if (has_rot()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapJsonConfigObjsPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapJsonConfigObjsPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapJsonConfigObjsPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapJsonConfigObjsPos::MergeFrom(const MapJsonConfigObjsPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::MapPosInfo::MergeFrom(from.pos());
    }
    if (from.has_rot()) {
      set_rot(from.rot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapJsonConfigObjsPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapJsonConfigObjsPos::CopyFrom(const MapJsonConfigObjsPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapJsonConfigObjsPos::IsInitialized() const {

  return true;
}

void MapJsonConfigObjsPos::Swap(MapJsonConfigObjsPos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(rot_, other->rot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapJsonConfigObjsPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapJsonConfigObjsPos_descriptor_;
  metadata.reflection = MapJsonConfigObjsPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapJsonConfigObjs::kIdFieldNumber;
const int MapJsonConfigObjs::kPosFieldNumber;
#endif  // !_MSC_VER

MapJsonConfigObjs::MapJsonConfigObjs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapJsonConfigObjs::InitAsDefaultInstance() {
}

MapJsonConfigObjs::MapJsonConfigObjs(const MapJsonConfigObjs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapJsonConfigObjs::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapJsonConfigObjs::~MapJsonConfigObjs() {
  SharedDtor();
}

void MapJsonConfigObjs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapJsonConfigObjs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapJsonConfigObjs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapJsonConfigObjs_descriptor_;
}

const MapJsonConfigObjs& MapJsonConfigObjs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MapJsonConfigObjs* MapJsonConfigObjs::default_instance_ = NULL;

MapJsonConfigObjs* MapJsonConfigObjs::New() const {
  return new MapJsonConfigObjs;
}

void MapJsonConfigObjs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapJsonConfigObjs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // repeated .proto_ff.MapJsonConfigObjsPos pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapJsonConfigObjs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.MapJsonConfigObjsPos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapJsonConfigObjs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.MapJsonConfigObjsPos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapJsonConfigObjs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.MapJsonConfigObjsPos pos = 2;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapJsonConfigObjs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapJsonConfigObjs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapJsonConfigObjs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapJsonConfigObjs::MergeFrom(const MapJsonConfigObjs& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapJsonConfigObjs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapJsonConfigObjs::CopyFrom(const MapJsonConfigObjs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapJsonConfigObjs::IsInitialized() const {

  return true;
}

void MapJsonConfigObjs::Swap(MapJsonConfigObjs* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapJsonConfigObjs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapJsonConfigObjs_descriptor_;
  metadata.reflection = MapJsonConfigObjs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapJsonConfigAreaDetail::kRadiusFieldNumber;
const int MapJsonConfigAreaDetail::kPosFieldNumber;
#endif  // !_MSC_VER

MapJsonConfigAreaDetail::MapJsonConfigAreaDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapJsonConfigAreaDetail::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::MapPosInfo*>(&::proto_ff::MapPosInfo::default_instance());
}

MapJsonConfigAreaDetail::MapJsonConfigAreaDetail(const MapJsonConfigAreaDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapJsonConfigAreaDetail::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapJsonConfigAreaDetail::~MapJsonConfigAreaDetail() {
  SharedDtor();
}

void MapJsonConfigAreaDetail::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MapJsonConfigAreaDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapJsonConfigAreaDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapJsonConfigAreaDetail_descriptor_;
}

const MapJsonConfigAreaDetail& MapJsonConfigAreaDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MapJsonConfigAreaDetail* MapJsonConfigAreaDetail::default_instance_ = NULL;

MapJsonConfigAreaDetail* MapJsonConfigAreaDetail::New() const {
  return new MapJsonConfigAreaDetail;
}

void MapJsonConfigAreaDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    radius_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::MapPosInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapJsonConfigAreaDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double radius = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .proto_ff.MapPosInfo pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapJsonConfigAreaDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double radius = 1;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->radius(), output);
  }

  // optional .proto_ff.MapPosInfo pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapJsonConfigAreaDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double radius = 1;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->radius(), target);
  }

  // optional .proto_ff.MapPosInfo pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapJsonConfigAreaDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double radius = 1;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional .proto_ff.MapPosInfo pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapJsonConfigAreaDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapJsonConfigAreaDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapJsonConfigAreaDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapJsonConfigAreaDetail::MergeFrom(const MapJsonConfigAreaDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::MapPosInfo::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapJsonConfigAreaDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapJsonConfigAreaDetail::CopyFrom(const MapJsonConfigAreaDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapJsonConfigAreaDetail::IsInitialized() const {

  return true;
}

void MapJsonConfigAreaDetail::Swap(MapJsonConfigAreaDetail* other) {
  if (other != this) {
    std::swap(radius_, other->radius_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapJsonConfigAreaDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapJsonConfigAreaDetail_descriptor_;
  metadata.reflection = MapJsonConfigAreaDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapJsonConfigArea::kIdFieldNumber;
const int MapJsonConfigArea::kDetailFieldNumber;
#endif  // !_MSC_VER

MapJsonConfigArea::MapJsonConfigArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapJsonConfigArea::InitAsDefaultInstance() {
}

MapJsonConfigArea::MapJsonConfigArea(const MapJsonConfigArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapJsonConfigArea::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapJsonConfigArea::~MapJsonConfigArea() {
  SharedDtor();
}

void MapJsonConfigArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapJsonConfigArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapJsonConfigArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapJsonConfigArea_descriptor_;
}

const MapJsonConfigArea& MapJsonConfigArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MapJsonConfigArea* MapJsonConfigArea::default_instance_ = NULL;

MapJsonConfigArea* MapJsonConfigArea::New() const {
  return new MapJsonConfigArea;
}

void MapJsonConfigArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapJsonConfigArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // repeated .proto_ff.MapJsonConfigAreaDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapJsonConfigArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.MapJsonConfigAreaDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapJsonConfigArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.MapJsonConfigAreaDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapJsonConfigArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.MapJsonConfigAreaDetail detail = 2;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapJsonConfigArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapJsonConfigArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapJsonConfigArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapJsonConfigArea::MergeFrom(const MapJsonConfigArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapJsonConfigArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapJsonConfigArea::CopyFrom(const MapJsonConfigArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapJsonConfigArea::IsInitialized() const {

  return true;
}

void MapJsonConfigArea::Swap(MapJsonConfigArea* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapJsonConfigArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapJsonConfigArea_descriptor_;
  metadata.reflection = MapJsonConfigArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapJsonConfigPath::kIdFieldNumber;
const int MapJsonConfigPath::kPosFieldNumber;
#endif  // !_MSC_VER

MapJsonConfigPath::MapJsonConfigPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapJsonConfigPath::InitAsDefaultInstance() {
}

MapJsonConfigPath::MapJsonConfigPath(const MapJsonConfigPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapJsonConfigPath::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapJsonConfigPath::~MapJsonConfigPath() {
  SharedDtor();
}

void MapJsonConfigPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapJsonConfigPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapJsonConfigPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapJsonConfigPath_descriptor_;
}

const MapJsonConfigPath& MapJsonConfigPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MapJsonConfigPath* MapJsonConfigPath::default_instance_ = NULL;

MapJsonConfigPath* MapJsonConfigPath::New() const {
  return new MapJsonConfigPath;
}

void MapJsonConfigPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapJsonConfigPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // repeated .proto_ff.MapPosInfo pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapJsonConfigPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.MapPosInfo pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapJsonConfigPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.MapPosInfo pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapJsonConfigPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.MapPosInfo pos = 2;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapJsonConfigPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapJsonConfigPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapJsonConfigPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapJsonConfigPath::MergeFrom(const MapJsonConfigPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapJsonConfigPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapJsonConfigPath::CopyFrom(const MapJsonConfigPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapJsonConfigPath::IsInitialized() const {

  return true;
}

void MapJsonConfigPath::Swap(MapJsonConfigPath* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapJsonConfigPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapJsonConfigPath_descriptor_;
  metadata.reflection = MapJsonConfigPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapJsonConfig::kObjsFieldNumber;
const int MapJsonConfig::kAreasFieldNumber;
const int MapJsonConfig::kPathsFieldNumber;
#endif  // !_MSC_VER

MapJsonConfig::MapJsonConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapJsonConfig::InitAsDefaultInstance() {
}

MapJsonConfig::MapJsonConfig(const MapJsonConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapJsonConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapJsonConfig::~MapJsonConfig() {
  SharedDtor();
}

void MapJsonConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapJsonConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapJsonConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapJsonConfig_descriptor_;
}

const MapJsonConfig& MapJsonConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5flogic_2eproto();
  return *default_instance_;
}

MapJsonConfig* MapJsonConfig::default_instance_ = NULL;

MapJsonConfig* MapJsonConfig::New() const {
  return new MapJsonConfig;
}

void MapJsonConfig::Clear() {
  objs_.Clear();
  areas_.Clear();
  paths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapJsonConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MapJsonConfigObjs objs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_objs;
        if (input->ExpectTag(18)) goto parse_areas;
        break;
      }

      // repeated .proto_ff.MapJsonConfigArea areas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_areas;
        if (input->ExpectTag(26)) goto parse_paths;
        break;
      }

      // repeated .proto_ff.MapJsonConfigPath paths = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paths;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapJsonConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MapJsonConfigObjs objs = 1;
  for (int i = 0; i < this->objs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objs(i), output);
  }

  // repeated .proto_ff.MapJsonConfigArea areas = 2;
  for (int i = 0; i < this->areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->areas(i), output);
  }

  // repeated .proto_ff.MapJsonConfigPath paths = 3;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paths(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapJsonConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MapJsonConfigObjs objs = 1;
  for (int i = 0; i < this->objs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objs(i), target);
  }

  // repeated .proto_ff.MapJsonConfigArea areas = 2;
  for (int i = 0; i < this->areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->areas(i), target);
  }

  // repeated .proto_ff.MapJsonConfigPath paths = 3;
  for (int i = 0; i < this->paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->paths(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapJsonConfig::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MapJsonConfigObjs objs = 1;
  total_size += 1 * this->objs_size();
  for (int i = 0; i < this->objs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objs(i));
  }

  // repeated .proto_ff.MapJsonConfigArea areas = 2;
  total_size += 1 * this->areas_size();
  for (int i = 0; i < this->areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areas(i));
  }

  // repeated .proto_ff.MapJsonConfigPath paths = 3;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapJsonConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapJsonConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapJsonConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapJsonConfig::MergeFrom(const MapJsonConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  objs_.MergeFrom(from.objs_);
  areas_.MergeFrom(from.areas_);
  paths_.MergeFrom(from.paths_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapJsonConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapJsonConfig::CopyFrom(const MapJsonConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapJsonConfig::IsInitialized() const {

  return true;
}

void MapJsonConfig::Swap(MapJsonConfig* other) {
  if (other != this) {
    objs_.Swap(&other->objs_);
    areas_.Swap(&other->areas_);
    paths_.Swap(&other->paths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapJsonConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapJsonConfig_descriptor_;
  metadata.reflection = MapJsonConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
