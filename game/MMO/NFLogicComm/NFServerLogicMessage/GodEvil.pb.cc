// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GodEvil.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GodEvil.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GodEvil_FetchPreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_FetchPreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_FetchPreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_FetchPreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_FetchTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_FetchTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_FetchTaskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_FetchTaskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_UpdateTaskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_UpdateTaskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_UpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_UpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_UpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_UpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ChgFacadeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ChgFacadeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ChgFacadeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ChgFacadeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_BuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_BuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_BuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_BuyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_PrivLevNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_PrivLevNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ChangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ChangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ChangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ChangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ExtraExpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ExtraExpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_UpdateEquipRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_UpdateEquipRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipUpdateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipUpdateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipUnDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipTransReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipTransReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipTransRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipTransRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipStrongReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipStrongReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipStrongRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipStrongRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipWearQuaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipWearQuaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipWearQuaRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipWearQuaRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipQuaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipQuaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipQuaRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipQuaRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipMakeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipMakeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_EquipMakeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_EquipMakeRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GodEvil_2eproto() {
  protobuf_AddDesc_GodEvil_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GodEvil.proto");
  GOOGLE_CHECK(file != NULL);
  GodEvil_FetchPreReq_descriptor_ = file->message_type(0);
  static const int GodEvil_FetchPreReq_offsets_[1] = {
  };
  GodEvil_FetchPreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_FetchPreReq_descriptor_,
      GodEvil_FetchPreReq::default_instance_,
      GodEvil_FetchPreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_FetchPreReq));
  GodEvil_FetchPreRsp_descriptor_ = file->message_type(1);
  static const int GodEvil_FetchPreRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreRsp, ret_),
  };
  GodEvil_FetchPreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_FetchPreRsp_descriptor_,
      GodEvil_FetchPreRsp::default_instance_,
      GodEvil_FetchPreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_FetchPreRsp));
  GodEvil_FetchTaskReq_descriptor_ = file->message_type(2);
  static const int GodEvil_FetchTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskReq, id_),
  };
  GodEvil_FetchTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_FetchTaskReq_descriptor_,
      GodEvil_FetchTaskReq::default_instance_,
      GodEvil_FetchTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_FetchTaskReq));
  GodEvil_FetchTaskRsp_descriptor_ = file->message_type(3);
  static const int GodEvil_FetchTaskRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskRsp, ret_),
  };
  GodEvil_FetchTaskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_FetchTaskRsp_descriptor_,
      GodEvil_FetchTaskRsp::default_instance_,
      GodEvil_FetchTaskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_FetchTaskRsp));
  GodEvil_UpdateTaskRsp_descriptor_ = file->message_type(4);
  static const int GodEvil_UpdateTaskRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateTaskRsp, stage_),
  };
  GodEvil_UpdateTaskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_UpdateTaskRsp_descriptor_,
      GodEvil_UpdateTaskRsp::default_instance_,
      GodEvil_UpdateTaskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateTaskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateTaskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_UpdateTaskRsp));
  GodEvil_ActiveReq_descriptor_ = file->message_type(5);
  static const int GodEvil_ActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveReq, type_),
  };
  GodEvil_ActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ActiveReq_descriptor_,
      GodEvil_ActiveReq::default_instance_,
      GodEvil_ActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ActiveReq));
  GodEvil_ActiveRsp_descriptor_ = file->message_type(6);
  static const int GodEvil_ActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveRsp, type_),
  };
  GodEvil_ActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ActiveRsp_descriptor_,
      GodEvil_ActiveRsp::default_instance_,
      GodEvil_ActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ActiveRsp));
  GodEvil_UpgradeReq_descriptor_ = file->message_type(7);
  static const int GodEvil_UpgradeReq_offsets_[1] = {
  };
  GodEvil_UpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_UpgradeReq_descriptor_,
      GodEvil_UpgradeReq::default_instance_,
      GodEvil_UpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_UpgradeReq));
  GodEvil_UpgradeRsp_descriptor_ = file->message_type(8);
  static const int GodEvil_UpgradeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeRsp, ret_),
  };
  GodEvil_UpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_UpgradeRsp_descriptor_,
      GodEvil_UpgradeRsp::default_instance_,
      GodEvil_UpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_UpgradeRsp));
  GodEvil_ChgFacadeReq_descriptor_ = file->message_type(9);
  static const int GodEvil_ChgFacadeReq_offsets_[1] = {
  };
  GodEvil_ChgFacadeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ChgFacadeReq_descriptor_,
      GodEvil_ChgFacadeReq::default_instance_,
      GodEvil_ChgFacadeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ChgFacadeReq));
  GodEvil_ChgFacadeRsp_descriptor_ = file->message_type(10);
  static const int GodEvil_ChgFacadeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeRsp, cd_),
  };
  GodEvil_ChgFacadeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ChgFacadeRsp_descriptor_,
      GodEvil_ChgFacadeRsp::default_instance_,
      GodEvil_ChgFacadeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ChgFacadeRsp));
  GodEvil_BuyReq_descriptor_ = file->message_type(11);
  static const int GodEvil_BuyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyReq, type_),
  };
  GodEvil_BuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_BuyReq_descriptor_,
      GodEvil_BuyReq::default_instance_,
      GodEvil_BuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_BuyReq));
  GodEvil_BuyRsp_descriptor_ = file->message_type(12);
  static const int GodEvil_BuyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyRsp, ret_),
  };
  GodEvil_BuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_BuyRsp_descriptor_,
      GodEvil_BuyRsp::default_instance_,
      GodEvil_BuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_BuyRsp));
  GodEvil_PrivLevNotify_descriptor_ = file->message_type(13);
  static const int GodEvil_PrivLevNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_PrivLevNotify, vessel_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_PrivLevNotify, mirror_lev_),
  };
  GodEvil_PrivLevNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_PrivLevNotify_descriptor_,
      GodEvil_PrivLevNotify::default_instance_,
      GodEvil_PrivLevNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_PrivLevNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_PrivLevNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_PrivLevNotify));
  GodEvil_ChangeReq_descriptor_ = file->message_type(14);
  static const int GodEvil_ChangeReq_offsets_[1] = {
  };
  GodEvil_ChangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ChangeReq_descriptor_,
      GodEvil_ChangeReq::default_instance_,
      GodEvil_ChangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ChangeReq));
  GodEvil_ChangeRsp_descriptor_ = file->message_type(15);
  static const int GodEvil_ChangeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeRsp, type_),
  };
  GodEvil_ChangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ChangeRsp_descriptor_,
      GodEvil_ChangeRsp::default_instance_,
      GodEvil_ChangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ChangeRsp));
  GodEvil_ExtraExpNotify_descriptor_ = file->message_type(16);
  static const int GodEvil_ExtraExpNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ExtraExpNotify, extra_exp_),
  };
  GodEvil_ExtraExpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ExtraExpNotify_descriptor_,
      GodEvil_ExtraExpNotify::default_instance_,
      GodEvil_ExtraExpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ExtraExpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ExtraExpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ExtraExpNotify));
  GodEvil_UpdateEquipRsp_descriptor_ = file->message_type(17);
  static const int GodEvil_UpdateEquipRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateEquipRsp, info_),
  };
  GodEvil_UpdateEquipRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_UpdateEquipRsp_descriptor_,
      GodEvil_UpdateEquipRsp::default_instance_,
      GodEvil_UpdateEquipRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateEquipRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateEquipRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_UpdateEquipRsp));
  GodEvil_EquipListReq_descriptor_ = file->message_type(18);
  static const int GodEvil_EquipListReq_offsets_[1] = {
  };
  GodEvil_EquipListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipListReq_descriptor_,
      GodEvil_EquipListReq::default_instance_,
      GodEvil_EquipListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipListReq));
  GodEvil_EquipListRsp_descriptor_ = file->message_type(19);
  static const int GodEvil_EquipListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipListRsp, equip_),
  };
  GodEvil_EquipListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipListRsp_descriptor_,
      GodEvil_EquipListRsp::default_instance_,
      GodEvil_EquipListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipListRsp));
  GodEvil_EquipUpdateRsp_descriptor_ = file->message_type(20);
  static const int GodEvil_EquipUpdateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUpdateRsp, equip_),
  };
  GodEvil_EquipUpdateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipUpdateRsp_descriptor_,
      GodEvil_EquipUpdateRsp::default_instance_,
      GodEvil_EquipUpdateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUpdateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUpdateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipUpdateRsp));
  GodEvil_EquipDressReq_descriptor_ = file->message_type(21);
  static const int GodEvil_EquipDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipDressReq, index_),
  };
  GodEvil_EquipDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipDressReq_descriptor_,
      GodEvil_EquipDressReq::default_instance_,
      GodEvil_EquipDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipDressReq));
  GodEvil_EquipDressRsp_descriptor_ = file->message_type(22);
  static const int GodEvil_EquipDressRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipDressRsp, ret_),
  };
  GodEvil_EquipDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipDressRsp_descriptor_,
      GodEvil_EquipDressRsp::default_instance_,
      GodEvil_EquipDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipDressRsp));
  GodEvil_EquipUnDressReq_descriptor_ = file->message_type(23);
  static const int GodEvil_EquipUnDressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUnDressReq, pos_),
  };
  GodEvil_EquipUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipUnDressReq_descriptor_,
      GodEvil_EquipUnDressReq::default_instance_,
      GodEvil_EquipUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipUnDressReq));
  GodEvil_EquipUnDressRsp_descriptor_ = file->message_type(24);
  static const int GodEvil_EquipUnDressRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUnDressRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUnDressRsp, pos_),
  };
  GodEvil_EquipUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipUnDressRsp_descriptor_,
      GodEvil_EquipUnDressRsp::default_instance_,
      GodEvil_EquipUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipUnDressRsp));
  GodEvil_EquipTransReq_descriptor_ = file->message_type(25);
  static const int GodEvil_EquipTransReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipTransReq, index_),
  };
  GodEvil_EquipTransReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipTransReq_descriptor_,
      GodEvil_EquipTransReq::default_instance_,
      GodEvil_EquipTransReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipTransReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipTransReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipTransReq));
  GodEvil_EquipTransRsp_descriptor_ = file->message_type(26);
  static const int GodEvil_EquipTransRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipTransRsp, ret_),
  };
  GodEvil_EquipTransRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipTransRsp_descriptor_,
      GodEvil_EquipTransRsp::default_instance_,
      GodEvil_EquipTransRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipTransRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipTransRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipTransRsp));
  GodEvil_EquipStrongReq_descriptor_ = file->message_type(27);
  static const int GodEvil_EquipStrongReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipStrongReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipStrongReq, index_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipStrongReq, items_),
  };
  GodEvil_EquipStrongReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipStrongReq_descriptor_,
      GodEvil_EquipStrongReq::default_instance_,
      GodEvil_EquipStrongReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipStrongReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipStrongReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipStrongReq));
  GodEvil_EquipStrongRsp_descriptor_ = file->message_type(28);
  static const int GodEvil_EquipStrongRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipStrongRsp, ret_),
  };
  GodEvil_EquipStrongRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipStrongRsp_descriptor_,
      GodEvil_EquipStrongRsp::default_instance_,
      GodEvil_EquipStrongRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipStrongRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipStrongRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipStrongRsp));
  GodEvil_EquipWearQuaReq_descriptor_ = file->message_type(29);
  static const int GodEvil_EquipWearQuaReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipWearQuaReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipWearQuaReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipWearQuaReq, num_),
  };
  GodEvil_EquipWearQuaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipWearQuaReq_descriptor_,
      GodEvil_EquipWearQuaReq::default_instance_,
      GodEvil_EquipWearQuaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipWearQuaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipWearQuaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipWearQuaReq));
  GodEvil_EquipWearQuaRsp_descriptor_ = file->message_type(30);
  static const int GodEvil_EquipWearQuaRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipWearQuaRsp, ret_),
  };
  GodEvil_EquipWearQuaRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipWearQuaRsp_descriptor_,
      GodEvil_EquipWearQuaRsp::default_instance_,
      GodEvil_EquipWearQuaRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipWearQuaRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipWearQuaRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipWearQuaRsp));
  GodEvil_EquipQuaReq_descriptor_ = file->message_type(31);
  static const int GodEvil_EquipQuaReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipQuaReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipQuaReq, is_auto_),
  };
  GodEvil_EquipQuaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipQuaReq_descriptor_,
      GodEvil_EquipQuaReq::default_instance_,
      GodEvil_EquipQuaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipQuaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipQuaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipQuaReq));
  GodEvil_EquipQuaRsp_descriptor_ = file->message_type(32);
  static const int GodEvil_EquipQuaRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipQuaRsp, ret_),
  };
  GodEvil_EquipQuaRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipQuaRsp_descriptor_,
      GodEvil_EquipQuaRsp::default_instance_,
      GodEvil_EquipQuaRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipQuaRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipQuaRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipQuaRsp));
  GodEvil_EquipMakeReq_descriptor_ = file->message_type(33);
  static const int GodEvil_EquipMakeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipMakeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipMakeReq, item_id_),
  };
  GodEvil_EquipMakeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipMakeReq_descriptor_,
      GodEvil_EquipMakeReq::default_instance_,
      GodEvil_EquipMakeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipMakeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipMakeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipMakeReq));
  GodEvil_EquipMakeRsp_descriptor_ = file->message_type(34);
  static const int GodEvil_EquipMakeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipMakeRsp, ret_),
  };
  GodEvil_EquipMakeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_EquipMakeRsp_descriptor_,
      GodEvil_EquipMakeRsp::default_instance_,
      GodEvil_EquipMakeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipMakeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_EquipMakeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_EquipMakeRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GodEvil_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_FetchPreReq_descriptor_, &GodEvil_FetchPreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_FetchPreRsp_descriptor_, &GodEvil_FetchPreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_FetchTaskReq_descriptor_, &GodEvil_FetchTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_FetchTaskRsp_descriptor_, &GodEvil_FetchTaskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_UpdateTaskRsp_descriptor_, &GodEvil_UpdateTaskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ActiveReq_descriptor_, &GodEvil_ActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ActiveRsp_descriptor_, &GodEvil_ActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_UpgradeReq_descriptor_, &GodEvil_UpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_UpgradeRsp_descriptor_, &GodEvil_UpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ChgFacadeReq_descriptor_, &GodEvil_ChgFacadeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ChgFacadeRsp_descriptor_, &GodEvil_ChgFacadeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_BuyReq_descriptor_, &GodEvil_BuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_BuyRsp_descriptor_, &GodEvil_BuyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_PrivLevNotify_descriptor_, &GodEvil_PrivLevNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ChangeReq_descriptor_, &GodEvil_ChangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ChangeRsp_descriptor_, &GodEvil_ChangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ExtraExpNotify_descriptor_, &GodEvil_ExtraExpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_UpdateEquipRsp_descriptor_, &GodEvil_UpdateEquipRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipListReq_descriptor_, &GodEvil_EquipListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipListRsp_descriptor_, &GodEvil_EquipListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipUpdateRsp_descriptor_, &GodEvil_EquipUpdateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipDressReq_descriptor_, &GodEvil_EquipDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipDressRsp_descriptor_, &GodEvil_EquipDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipUnDressReq_descriptor_, &GodEvil_EquipUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipUnDressRsp_descriptor_, &GodEvil_EquipUnDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipTransReq_descriptor_, &GodEvil_EquipTransReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipTransRsp_descriptor_, &GodEvil_EquipTransRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipStrongReq_descriptor_, &GodEvil_EquipStrongReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipStrongRsp_descriptor_, &GodEvil_EquipStrongRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipWearQuaReq_descriptor_, &GodEvil_EquipWearQuaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipWearQuaRsp_descriptor_, &GodEvil_EquipWearQuaRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipQuaReq_descriptor_, &GodEvil_EquipQuaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipQuaRsp_descriptor_, &GodEvil_EquipQuaRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipMakeReq_descriptor_, &GodEvil_EquipMakeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_EquipMakeRsp_descriptor_, &GodEvil_EquipMakeRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GodEvil_2eproto() {
  delete GodEvil_FetchPreReq::default_instance_;
  delete GodEvil_FetchPreReq_reflection_;
  delete GodEvil_FetchPreRsp::default_instance_;
  delete GodEvil_FetchPreRsp_reflection_;
  delete GodEvil_FetchTaskReq::default_instance_;
  delete GodEvil_FetchTaskReq_reflection_;
  delete GodEvil_FetchTaskRsp::default_instance_;
  delete GodEvil_FetchTaskRsp_reflection_;
  delete GodEvil_UpdateTaskRsp::default_instance_;
  delete GodEvil_UpdateTaskRsp_reflection_;
  delete GodEvil_ActiveReq::default_instance_;
  delete GodEvil_ActiveReq_reflection_;
  delete GodEvil_ActiveRsp::default_instance_;
  delete GodEvil_ActiveRsp_reflection_;
  delete GodEvil_UpgradeReq::default_instance_;
  delete GodEvil_UpgradeReq_reflection_;
  delete GodEvil_UpgradeRsp::default_instance_;
  delete GodEvil_UpgradeRsp_reflection_;
  delete GodEvil_ChgFacadeReq::default_instance_;
  delete GodEvil_ChgFacadeReq_reflection_;
  delete GodEvil_ChgFacadeRsp::default_instance_;
  delete GodEvil_ChgFacadeRsp_reflection_;
  delete GodEvil_BuyReq::default_instance_;
  delete GodEvil_BuyReq_reflection_;
  delete GodEvil_BuyRsp::default_instance_;
  delete GodEvil_BuyRsp_reflection_;
  delete GodEvil_PrivLevNotify::default_instance_;
  delete GodEvil_PrivLevNotify_reflection_;
  delete GodEvil_ChangeReq::default_instance_;
  delete GodEvil_ChangeReq_reflection_;
  delete GodEvil_ChangeRsp::default_instance_;
  delete GodEvil_ChangeRsp_reflection_;
  delete GodEvil_ExtraExpNotify::default_instance_;
  delete GodEvil_ExtraExpNotify_reflection_;
  delete GodEvil_UpdateEquipRsp::default_instance_;
  delete GodEvil_UpdateEquipRsp_reflection_;
  delete GodEvil_EquipListReq::default_instance_;
  delete GodEvil_EquipListReq_reflection_;
  delete GodEvil_EquipListRsp::default_instance_;
  delete GodEvil_EquipListRsp_reflection_;
  delete GodEvil_EquipUpdateRsp::default_instance_;
  delete GodEvil_EquipUpdateRsp_reflection_;
  delete GodEvil_EquipDressReq::default_instance_;
  delete GodEvil_EquipDressReq_reflection_;
  delete GodEvil_EquipDressRsp::default_instance_;
  delete GodEvil_EquipDressRsp_reflection_;
  delete GodEvil_EquipUnDressReq::default_instance_;
  delete GodEvil_EquipUnDressReq_reflection_;
  delete GodEvil_EquipUnDressRsp::default_instance_;
  delete GodEvil_EquipUnDressRsp_reflection_;
  delete GodEvil_EquipTransReq::default_instance_;
  delete GodEvil_EquipTransReq_reflection_;
  delete GodEvil_EquipTransRsp::default_instance_;
  delete GodEvil_EquipTransRsp_reflection_;
  delete GodEvil_EquipStrongReq::default_instance_;
  delete GodEvil_EquipStrongReq_reflection_;
  delete GodEvil_EquipStrongRsp::default_instance_;
  delete GodEvil_EquipStrongRsp_reflection_;
  delete GodEvil_EquipWearQuaReq::default_instance_;
  delete GodEvil_EquipWearQuaReq_reflection_;
  delete GodEvil_EquipWearQuaRsp::default_instance_;
  delete GodEvil_EquipWearQuaRsp_reflection_;
  delete GodEvil_EquipQuaReq::default_instance_;
  delete GodEvil_EquipQuaReq_reflection_;
  delete GodEvil_EquipQuaRsp::default_instance_;
  delete GodEvil_EquipQuaRsp_reflection_;
  delete GodEvil_EquipMakeReq::default_instance_;
  delete GodEvil_EquipMakeReq_reflection_;
  delete GodEvil_EquipMakeRsp::default_instance_;
  delete GodEvil_EquipMakeRsp_reflection_;
}

void protobuf_AddDesc_GodEvil_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGodEvil.proto\022\010proto_ff\032\tCom.proto\032\017Co"
    "mDefine.proto\"\025\n\023GodEvil_FetchPreReq\"\"\n\023"
    "GodEvil_FetchPreRsp\022\013\n\003ret\030\001 \002(\005\"\"\n\024GodE"
    "vil_FetchTaskReq\022\n\n\002id\030\001 \001(\005\"#\n\024GodEvil_"
    "FetchTaskRsp\022\013\n\003ret\030\001 \002(\005\"C\n\025GodEvil_Upd"
    "ateTaskRsp\022*\n\005stage\030\001 \001(\0132\033.proto_ff.God"
    "EvilStageProto\"!\n\021GodEvil_ActiveReq\022\014\n\004t"
    "ype\030\001 \001(\005\".\n\021GodEvil_ActiveRsp\022\013\n\003ret\030\001 "
    "\002(\005\022\014\n\004type\030\002 \001(\005\"\024\n\022GodEvil_UpgradeReq\""
    "!\n\022GodEvil_UpgradeRsp\022\013\n\003ret\030\001 \002(\005\"\026\n\024Go"
    "dEvil_ChgFacadeReq\"/\n\024GodEvil_ChgFacadeR"
    "sp\022\013\n\003ret\030\001 \002(\005\022\n\n\002cd\030\002 \001(\005\"\036\n\016GodEvil_B"
    "uyReq\022\014\n\004type\030\001 \001(\005\"\035\n\016GodEvil_BuyRsp\022\013\n"
    "\003ret\030\001 \002(\005\"\?\n\025GodEvil_PrivLevNotify\022\022\n\nv"
    "essel_lev\030\001 \001(\005\022\022\n\nmirror_lev\030\002 \001(\005\"\023\n\021G"
    "odEvil_ChangeReq\".\n\021GodEvil_ChangeRsp\022\013\n"
    "\003ret\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\"+\n\026GodEvil_Extr"
    "aExpNotify\022\021\n\textra_exp\030\001 \002(\003\"\?\n\026GodEvil"
    "_UpdateEquipRsp\022%\n\004info\030\001 \003(\0132\027.proto_ff"
    ".ItemProtoInfo\"\026\n\024GodEvil_EquipListReq\">"
    "\n\024GodEvil_EquipListRsp\022&\n\005equip\030\001 \003(\0132\027."
    "proto_ff.ItemProtoInfo\"@\n\026GodEvil_EquipU"
    "pdateRsp\022&\n\005equip\030\001 \003(\0132\027.proto_ff.ItemP"
    "rotoInfo\"&\n\025GodEvil_EquipDressReq\022\r\n\005ind"
    "ex\030\001 \001(\r\"$\n\025GodEvil_EquipDressRsp\022\013\n\003ret"
    "\030\001 \002(\005\"&\n\027GodEvil_EquipUnDressReq\022\013\n\003pos"
    "\030\001 \001(\r\"3\n\027GodEvil_EquipUnDressRsp\022\013\n\003ret"
    "\030\001 \002(\005\022\013\n\003pos\030\002 \001(\r\"&\n\025GodEvil_EquipTran"
    "sReq\022\r\n\005index\030\001 \001(\r\"$\n\025GodEvil_EquipTran"
    "sRsp\022\013\n\003ret\030\001 \002(\005\"\\\n\026GodEvil_EquipStrong"
    "Req\022\013\n\003pos\030\001 \001(\r\022\021\n\tindex_lst\030\002 \003(\r\022\"\n\005i"
    "tems\030\003 \003(\0132\023.proto_ff.ComPair64\"%\n\026GodEv"
    "il_EquipStrongRsp\022\013\n\003ret\030\001 \002(\005\"B\n\027GodEvi"
    "l_EquipWearQuaReq\022\013\n\003pos\030\001 \001(\r\022\r\n\005index\030"
    "\002 \003(\r\022\013\n\003num\030\003 \001(\r\"&\n\027GodEvil_EquipWearQ"
    "uaRsp\022\013\n\003ret\030\001 \002(\005\"3\n\023GodEvil_EquipQuaRe"
    "q\022\013\n\003pos\030\001 \001(\r\022\017\n\007is_auto\030\002 \001(\005\"\"\n\023GodEv"
    "il_EquipQuaRsp\022\013\n\003ret\030\001 \002(\005\"5\n\024GodEvil_E"
    "quipMakeReq\022\014\n\004type\030\001 \001(\005\022\017\n\007item_id\030\002 \001"
    "(\004\"#\n\024GodEvil_EquipMakeRsp\022\013\n\003ret\030\001 \002(\005", 1599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GodEvil.proto", &protobuf_RegisterTypes);
  GodEvil_FetchPreReq::default_instance_ = new GodEvil_FetchPreReq();
  GodEvil_FetchPreRsp::default_instance_ = new GodEvil_FetchPreRsp();
  GodEvil_FetchTaskReq::default_instance_ = new GodEvil_FetchTaskReq();
  GodEvil_FetchTaskRsp::default_instance_ = new GodEvil_FetchTaskRsp();
  GodEvil_UpdateTaskRsp::default_instance_ = new GodEvil_UpdateTaskRsp();
  GodEvil_ActiveReq::default_instance_ = new GodEvil_ActiveReq();
  GodEvil_ActiveRsp::default_instance_ = new GodEvil_ActiveRsp();
  GodEvil_UpgradeReq::default_instance_ = new GodEvil_UpgradeReq();
  GodEvil_UpgradeRsp::default_instance_ = new GodEvil_UpgradeRsp();
  GodEvil_ChgFacadeReq::default_instance_ = new GodEvil_ChgFacadeReq();
  GodEvil_ChgFacadeRsp::default_instance_ = new GodEvil_ChgFacadeRsp();
  GodEvil_BuyReq::default_instance_ = new GodEvil_BuyReq();
  GodEvil_BuyRsp::default_instance_ = new GodEvil_BuyRsp();
  GodEvil_PrivLevNotify::default_instance_ = new GodEvil_PrivLevNotify();
  GodEvil_ChangeReq::default_instance_ = new GodEvil_ChangeReq();
  GodEvil_ChangeRsp::default_instance_ = new GodEvil_ChangeRsp();
  GodEvil_ExtraExpNotify::default_instance_ = new GodEvil_ExtraExpNotify();
  GodEvil_UpdateEquipRsp::default_instance_ = new GodEvil_UpdateEquipRsp();
  GodEvil_EquipListReq::default_instance_ = new GodEvil_EquipListReq();
  GodEvil_EquipListRsp::default_instance_ = new GodEvil_EquipListRsp();
  GodEvil_EquipUpdateRsp::default_instance_ = new GodEvil_EquipUpdateRsp();
  GodEvil_EquipDressReq::default_instance_ = new GodEvil_EquipDressReq();
  GodEvil_EquipDressRsp::default_instance_ = new GodEvil_EquipDressRsp();
  GodEvil_EquipUnDressReq::default_instance_ = new GodEvil_EquipUnDressReq();
  GodEvil_EquipUnDressRsp::default_instance_ = new GodEvil_EquipUnDressRsp();
  GodEvil_EquipTransReq::default_instance_ = new GodEvil_EquipTransReq();
  GodEvil_EquipTransRsp::default_instance_ = new GodEvil_EquipTransRsp();
  GodEvil_EquipStrongReq::default_instance_ = new GodEvil_EquipStrongReq();
  GodEvil_EquipStrongRsp::default_instance_ = new GodEvil_EquipStrongRsp();
  GodEvil_EquipWearQuaReq::default_instance_ = new GodEvil_EquipWearQuaReq();
  GodEvil_EquipWearQuaRsp::default_instance_ = new GodEvil_EquipWearQuaRsp();
  GodEvil_EquipQuaReq::default_instance_ = new GodEvil_EquipQuaReq();
  GodEvil_EquipQuaRsp::default_instance_ = new GodEvil_EquipQuaRsp();
  GodEvil_EquipMakeReq::default_instance_ = new GodEvil_EquipMakeReq();
  GodEvil_EquipMakeRsp::default_instance_ = new GodEvil_EquipMakeRsp();
  GodEvil_FetchPreReq::default_instance_->InitAsDefaultInstance();
  GodEvil_FetchPreRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_FetchTaskReq::default_instance_->InitAsDefaultInstance();
  GodEvil_FetchTaskRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_UpdateTaskRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_ActiveReq::default_instance_->InitAsDefaultInstance();
  GodEvil_ActiveRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_UpgradeReq::default_instance_->InitAsDefaultInstance();
  GodEvil_UpgradeRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_ChgFacadeReq::default_instance_->InitAsDefaultInstance();
  GodEvil_ChgFacadeRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_BuyReq::default_instance_->InitAsDefaultInstance();
  GodEvil_BuyRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_PrivLevNotify::default_instance_->InitAsDefaultInstance();
  GodEvil_ChangeReq::default_instance_->InitAsDefaultInstance();
  GodEvil_ChangeRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_ExtraExpNotify::default_instance_->InitAsDefaultInstance();
  GodEvil_UpdateEquipRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipListReq::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipListRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipUpdateRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipDressReq::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipDressRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipUnDressReq::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipUnDressRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipTransReq::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipTransRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipStrongReq::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipStrongRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipWearQuaReq::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipWearQuaRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipQuaReq::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipQuaRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipMakeReq::default_instance_->InitAsDefaultInstance();
  GodEvil_EquipMakeRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GodEvil_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GodEvil_2eproto {
  StaticDescriptorInitializer_GodEvil_2eproto() {
    protobuf_AddDesc_GodEvil_2eproto();
  }
} static_descriptor_initializer_GodEvil_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_FetchPreReq::GodEvil_FetchPreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_FetchPreReq::InitAsDefaultInstance() {
}

GodEvil_FetchPreReq::GodEvil_FetchPreReq(const GodEvil_FetchPreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_FetchPreReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_FetchPreReq::~GodEvil_FetchPreReq() {
  SharedDtor();
}

void GodEvil_FetchPreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_FetchPreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_FetchPreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_FetchPreReq_descriptor_;
}

const GodEvil_FetchPreReq& GodEvil_FetchPreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_FetchPreReq* GodEvil_FetchPreReq::default_instance_ = NULL;

GodEvil_FetchPreReq* GodEvil_FetchPreReq::New() const {
  return new GodEvil_FetchPreReq;
}

void GodEvil_FetchPreReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_FetchPreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_FetchPreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_FetchPreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_FetchPreReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_FetchPreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_FetchPreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_FetchPreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_FetchPreReq::MergeFrom(const GodEvil_FetchPreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_FetchPreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_FetchPreReq::CopyFrom(const GodEvil_FetchPreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_FetchPreReq::IsInitialized() const {

  return true;
}

void GodEvil_FetchPreReq::Swap(GodEvil_FetchPreReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_FetchPreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_FetchPreReq_descriptor_;
  metadata.reflection = GodEvil_FetchPreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_FetchPreRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_FetchPreRsp::GodEvil_FetchPreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_FetchPreRsp::InitAsDefaultInstance() {
}

GodEvil_FetchPreRsp::GodEvil_FetchPreRsp(const GodEvil_FetchPreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_FetchPreRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_FetchPreRsp::~GodEvil_FetchPreRsp() {
  SharedDtor();
}

void GodEvil_FetchPreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_FetchPreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_FetchPreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_FetchPreRsp_descriptor_;
}

const GodEvil_FetchPreRsp& GodEvil_FetchPreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_FetchPreRsp* GodEvil_FetchPreRsp::default_instance_ = NULL;

GodEvil_FetchPreRsp* GodEvil_FetchPreRsp::New() const {
  return new GodEvil_FetchPreRsp;
}

void GodEvil_FetchPreRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_FetchPreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_FetchPreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_FetchPreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_FetchPreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_FetchPreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_FetchPreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_FetchPreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_FetchPreRsp::MergeFrom(const GodEvil_FetchPreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_FetchPreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_FetchPreRsp::CopyFrom(const GodEvil_FetchPreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_FetchPreRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_FetchPreRsp::Swap(GodEvil_FetchPreRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_FetchPreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_FetchPreRsp_descriptor_;
  metadata.reflection = GodEvil_FetchPreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_FetchTaskReq::kIdFieldNumber;
#endif  // !_MSC_VER

GodEvil_FetchTaskReq::GodEvil_FetchTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_FetchTaskReq::InitAsDefaultInstance() {
}

GodEvil_FetchTaskReq::GodEvil_FetchTaskReq(const GodEvil_FetchTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_FetchTaskReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_FetchTaskReq::~GodEvil_FetchTaskReq() {
  SharedDtor();
}

void GodEvil_FetchTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_FetchTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_FetchTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_FetchTaskReq_descriptor_;
}

const GodEvil_FetchTaskReq& GodEvil_FetchTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_FetchTaskReq* GodEvil_FetchTaskReq::default_instance_ = NULL;

GodEvil_FetchTaskReq* GodEvil_FetchTaskReq::New() const {
  return new GodEvil_FetchTaskReq;
}

void GodEvil_FetchTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_FetchTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_FetchTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_FetchTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_FetchTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_FetchTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_FetchTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_FetchTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_FetchTaskReq::MergeFrom(const GodEvil_FetchTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_FetchTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_FetchTaskReq::CopyFrom(const GodEvil_FetchTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_FetchTaskReq::IsInitialized() const {

  return true;
}

void GodEvil_FetchTaskReq::Swap(GodEvil_FetchTaskReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_FetchTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_FetchTaskReq_descriptor_;
  metadata.reflection = GodEvil_FetchTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_FetchTaskRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_FetchTaskRsp::GodEvil_FetchTaskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_FetchTaskRsp::InitAsDefaultInstance() {
}

GodEvil_FetchTaskRsp::GodEvil_FetchTaskRsp(const GodEvil_FetchTaskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_FetchTaskRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_FetchTaskRsp::~GodEvil_FetchTaskRsp() {
  SharedDtor();
}

void GodEvil_FetchTaskRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_FetchTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_FetchTaskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_FetchTaskRsp_descriptor_;
}

const GodEvil_FetchTaskRsp& GodEvil_FetchTaskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_FetchTaskRsp* GodEvil_FetchTaskRsp::default_instance_ = NULL;

GodEvil_FetchTaskRsp* GodEvil_FetchTaskRsp::New() const {
  return new GodEvil_FetchTaskRsp;
}

void GodEvil_FetchTaskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_FetchTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_FetchTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_FetchTaskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_FetchTaskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_FetchTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_FetchTaskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_FetchTaskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_FetchTaskRsp::MergeFrom(const GodEvil_FetchTaskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_FetchTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_FetchTaskRsp::CopyFrom(const GodEvil_FetchTaskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_FetchTaskRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_FetchTaskRsp::Swap(GodEvil_FetchTaskRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_FetchTaskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_FetchTaskRsp_descriptor_;
  metadata.reflection = GodEvil_FetchTaskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_UpdateTaskRsp::kStageFieldNumber;
#endif  // !_MSC_VER

GodEvil_UpdateTaskRsp::GodEvil_UpdateTaskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_UpdateTaskRsp::InitAsDefaultInstance() {
  stage_ = const_cast< ::proto_ff::GodEvilStageProto*>(&::proto_ff::GodEvilStageProto::default_instance());
}

GodEvil_UpdateTaskRsp::GodEvil_UpdateTaskRsp(const GodEvil_UpdateTaskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_UpdateTaskRsp::SharedCtor() {
  _cached_size_ = 0;
  stage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_UpdateTaskRsp::~GodEvil_UpdateTaskRsp() {
  SharedDtor();
}

void GodEvil_UpdateTaskRsp::SharedDtor() {
  if (this != default_instance_) {
    delete stage_;
  }
}

void GodEvil_UpdateTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_UpdateTaskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_UpdateTaskRsp_descriptor_;
}

const GodEvil_UpdateTaskRsp& GodEvil_UpdateTaskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_UpdateTaskRsp* GodEvil_UpdateTaskRsp::default_instance_ = NULL;

GodEvil_UpdateTaskRsp* GodEvil_UpdateTaskRsp::New() const {
  return new GodEvil_UpdateTaskRsp;
}

void GodEvil_UpdateTaskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stage()) {
      if (stage_ != NULL) stage_->::proto_ff::GodEvilStageProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_UpdateTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GodEvilStageProto stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_UpdateTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GodEvilStageProto stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_UpdateTaskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GodEvilStageProto stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_UpdateTaskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GodEvilStageProto stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_UpdateTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_UpdateTaskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_UpdateTaskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_UpdateTaskRsp::MergeFrom(const GodEvil_UpdateTaskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      mutable_stage()->::proto_ff::GodEvilStageProto::MergeFrom(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_UpdateTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_UpdateTaskRsp::CopyFrom(const GodEvil_UpdateTaskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_UpdateTaskRsp::IsInitialized() const {

  return true;
}

void GodEvil_UpdateTaskRsp::Swap(GodEvil_UpdateTaskRsp* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_UpdateTaskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_UpdateTaskRsp_descriptor_;
  metadata.reflection = GodEvil_UpdateTaskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ActiveReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GodEvil_ActiveReq::GodEvil_ActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ActiveReq::InitAsDefaultInstance() {
}

GodEvil_ActiveReq::GodEvil_ActiveReq(const GodEvil_ActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ActiveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ActiveReq::~GodEvil_ActiveReq() {
  SharedDtor();
}

void GodEvil_ActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ActiveReq_descriptor_;
}

const GodEvil_ActiveReq& GodEvil_ActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ActiveReq* GodEvil_ActiveReq::default_instance_ = NULL;

GodEvil_ActiveReq* GodEvil_ActiveReq::New() const {
  return new GodEvil_ActiveReq;
}

void GodEvil_ActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ActiveReq::MergeFrom(const GodEvil_ActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ActiveReq::CopyFrom(const GodEvil_ActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ActiveReq::IsInitialized() const {

  return true;
}

void GodEvil_ActiveReq::Swap(GodEvil_ActiveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ActiveReq_descriptor_;
  metadata.reflection = GodEvil_ActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ActiveRsp::kRetFieldNumber;
const int GodEvil_ActiveRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

GodEvil_ActiveRsp::GodEvil_ActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ActiveRsp::InitAsDefaultInstance() {
}

GodEvil_ActiveRsp::GodEvil_ActiveRsp(const GodEvil_ActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ActiveRsp::~GodEvil_ActiveRsp() {
  SharedDtor();
}

void GodEvil_ActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ActiveRsp_descriptor_;
}

const GodEvil_ActiveRsp& GodEvil_ActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ActiveRsp* GodEvil_ActiveRsp::default_instance_ = NULL;

GodEvil_ActiveRsp* GodEvil_ActiveRsp::New() const {
  return new GodEvil_ActiveRsp;
}

void GodEvil_ActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ActiveRsp::MergeFrom(const GodEvil_ActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ActiveRsp::CopyFrom(const GodEvil_ActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ActiveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_ActiveRsp::Swap(GodEvil_ActiveRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ActiveRsp_descriptor_;
  metadata.reflection = GodEvil_ActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_UpgradeReq::GodEvil_UpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_UpgradeReq::InitAsDefaultInstance() {
}

GodEvil_UpgradeReq::GodEvil_UpgradeReq(const GodEvil_UpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_UpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_UpgradeReq::~GodEvil_UpgradeReq() {
  SharedDtor();
}

void GodEvil_UpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_UpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_UpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_UpgradeReq_descriptor_;
}

const GodEvil_UpgradeReq& GodEvil_UpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_UpgradeReq* GodEvil_UpgradeReq::default_instance_ = NULL;

GodEvil_UpgradeReq* GodEvil_UpgradeReq::New() const {
  return new GodEvil_UpgradeReq;
}

void GodEvil_UpgradeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_UpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_UpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_UpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_UpgradeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_UpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_UpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_UpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_UpgradeReq::MergeFrom(const GodEvil_UpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_UpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_UpgradeReq::CopyFrom(const GodEvil_UpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_UpgradeReq::IsInitialized() const {

  return true;
}

void GodEvil_UpgradeReq::Swap(GodEvil_UpgradeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_UpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_UpgradeReq_descriptor_;
  metadata.reflection = GodEvil_UpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_UpgradeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_UpgradeRsp::GodEvil_UpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_UpgradeRsp::InitAsDefaultInstance() {
}

GodEvil_UpgradeRsp::GodEvil_UpgradeRsp(const GodEvil_UpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_UpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_UpgradeRsp::~GodEvil_UpgradeRsp() {
  SharedDtor();
}

void GodEvil_UpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_UpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_UpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_UpgradeRsp_descriptor_;
}

const GodEvil_UpgradeRsp& GodEvil_UpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_UpgradeRsp* GodEvil_UpgradeRsp::default_instance_ = NULL;

GodEvil_UpgradeRsp* GodEvil_UpgradeRsp::New() const {
  return new GodEvil_UpgradeRsp;
}

void GodEvil_UpgradeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_UpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_UpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_UpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_UpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_UpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_UpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_UpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_UpgradeRsp::MergeFrom(const GodEvil_UpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_UpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_UpgradeRsp::CopyFrom(const GodEvil_UpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_UpgradeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_UpgradeRsp::Swap(GodEvil_UpgradeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_UpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_UpgradeRsp_descriptor_;
  metadata.reflection = GodEvil_UpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_ChgFacadeReq::GodEvil_ChgFacadeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ChgFacadeReq::InitAsDefaultInstance() {
}

GodEvil_ChgFacadeReq::GodEvil_ChgFacadeReq(const GodEvil_ChgFacadeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ChgFacadeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ChgFacadeReq::~GodEvil_ChgFacadeReq() {
  SharedDtor();
}

void GodEvil_ChgFacadeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ChgFacadeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ChgFacadeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ChgFacadeReq_descriptor_;
}

const GodEvil_ChgFacadeReq& GodEvil_ChgFacadeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ChgFacadeReq* GodEvil_ChgFacadeReq::default_instance_ = NULL;

GodEvil_ChgFacadeReq* GodEvil_ChgFacadeReq::New() const {
  return new GodEvil_ChgFacadeReq;
}

void GodEvil_ChgFacadeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ChgFacadeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_ChgFacadeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ChgFacadeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ChgFacadeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ChgFacadeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ChgFacadeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ChgFacadeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ChgFacadeReq::MergeFrom(const GodEvil_ChgFacadeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ChgFacadeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ChgFacadeReq::CopyFrom(const GodEvil_ChgFacadeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ChgFacadeReq::IsInitialized() const {

  return true;
}

void GodEvil_ChgFacadeReq::Swap(GodEvil_ChgFacadeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ChgFacadeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ChgFacadeReq_descriptor_;
  metadata.reflection = GodEvil_ChgFacadeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ChgFacadeRsp::kRetFieldNumber;
const int GodEvil_ChgFacadeRsp::kCdFieldNumber;
#endif  // !_MSC_VER

GodEvil_ChgFacadeRsp::GodEvil_ChgFacadeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ChgFacadeRsp::InitAsDefaultInstance() {
}

GodEvil_ChgFacadeRsp::GodEvil_ChgFacadeRsp(const GodEvil_ChgFacadeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ChgFacadeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ChgFacadeRsp::~GodEvil_ChgFacadeRsp() {
  SharedDtor();
}

void GodEvil_ChgFacadeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ChgFacadeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ChgFacadeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ChgFacadeRsp_descriptor_;
}

const GodEvil_ChgFacadeRsp& GodEvil_ChgFacadeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ChgFacadeRsp* GodEvil_ChgFacadeRsp::default_instance_ = NULL;

GodEvil_ChgFacadeRsp* GodEvil_ChgFacadeRsp::New() const {
  return new GodEvil_ChgFacadeRsp;
}

void GodEvil_ChgFacadeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ChgFacadeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // optional int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ChgFacadeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ChgFacadeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ChgFacadeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ChgFacadeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ChgFacadeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ChgFacadeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ChgFacadeRsp::MergeFrom(const GodEvil_ChgFacadeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ChgFacadeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ChgFacadeRsp::CopyFrom(const GodEvil_ChgFacadeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ChgFacadeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_ChgFacadeRsp::Swap(GodEvil_ChgFacadeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ChgFacadeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ChgFacadeRsp_descriptor_;
  metadata.reflection = GodEvil_ChgFacadeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_BuyReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GodEvil_BuyReq::GodEvil_BuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_BuyReq::InitAsDefaultInstance() {
}

GodEvil_BuyReq::GodEvil_BuyReq(const GodEvil_BuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_BuyReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_BuyReq::~GodEvil_BuyReq() {
  SharedDtor();
}

void GodEvil_BuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_BuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_BuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_BuyReq_descriptor_;
}

const GodEvil_BuyReq& GodEvil_BuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_BuyReq* GodEvil_BuyReq::default_instance_ = NULL;

GodEvil_BuyReq* GodEvil_BuyReq::New() const {
  return new GodEvil_BuyReq;
}

void GodEvil_BuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_BuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_BuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_BuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_BuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_BuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_BuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_BuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_BuyReq::MergeFrom(const GodEvil_BuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_BuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_BuyReq::CopyFrom(const GodEvil_BuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_BuyReq::IsInitialized() const {

  return true;
}

void GodEvil_BuyReq::Swap(GodEvil_BuyReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_BuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_BuyReq_descriptor_;
  metadata.reflection = GodEvil_BuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_BuyRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_BuyRsp::GodEvil_BuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_BuyRsp::InitAsDefaultInstance() {
}

GodEvil_BuyRsp::GodEvil_BuyRsp(const GodEvil_BuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_BuyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_BuyRsp::~GodEvil_BuyRsp() {
  SharedDtor();
}

void GodEvil_BuyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_BuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_BuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_BuyRsp_descriptor_;
}

const GodEvil_BuyRsp& GodEvil_BuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_BuyRsp* GodEvil_BuyRsp::default_instance_ = NULL;

GodEvil_BuyRsp* GodEvil_BuyRsp::New() const {
  return new GodEvil_BuyRsp;
}

void GodEvil_BuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_BuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_BuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_BuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_BuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_BuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_BuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_BuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_BuyRsp::MergeFrom(const GodEvil_BuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_BuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_BuyRsp::CopyFrom(const GodEvil_BuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_BuyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_BuyRsp::Swap(GodEvil_BuyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_BuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_BuyRsp_descriptor_;
  metadata.reflection = GodEvil_BuyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_PrivLevNotify::kVesselLevFieldNumber;
const int GodEvil_PrivLevNotify::kMirrorLevFieldNumber;
#endif  // !_MSC_VER

GodEvil_PrivLevNotify::GodEvil_PrivLevNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_PrivLevNotify::InitAsDefaultInstance() {
}

GodEvil_PrivLevNotify::GodEvil_PrivLevNotify(const GodEvil_PrivLevNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_PrivLevNotify::SharedCtor() {
  _cached_size_ = 0;
  vessel_lev_ = 0;
  mirror_lev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_PrivLevNotify::~GodEvil_PrivLevNotify() {
  SharedDtor();
}

void GodEvil_PrivLevNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_PrivLevNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_PrivLevNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_PrivLevNotify_descriptor_;
}

const GodEvil_PrivLevNotify& GodEvil_PrivLevNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_PrivLevNotify* GodEvil_PrivLevNotify::default_instance_ = NULL;

GodEvil_PrivLevNotify* GodEvil_PrivLevNotify::New() const {
  return new GodEvil_PrivLevNotify;
}

void GodEvil_PrivLevNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vessel_lev_ = 0;
    mirror_lev_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_PrivLevNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vessel_lev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vessel_lev_)));
          set_has_vessel_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mirror_lev;
        break;
      }

      // optional int32 mirror_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mirror_lev_)));
          set_has_mirror_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_PrivLevNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vessel_lev = 1;
  if (has_vessel_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vessel_lev(), output);
  }

  // optional int32 mirror_lev = 2;
  if (has_mirror_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mirror_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_PrivLevNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vessel_lev = 1;
  if (has_vessel_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vessel_lev(), target);
  }

  // optional int32 mirror_lev = 2;
  if (has_mirror_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mirror_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_PrivLevNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vessel_lev = 1;
    if (has_vessel_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vessel_lev());
    }

    // optional int32 mirror_lev = 2;
    if (has_mirror_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mirror_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_PrivLevNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_PrivLevNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_PrivLevNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_PrivLevNotify::MergeFrom(const GodEvil_PrivLevNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vessel_lev()) {
      set_vessel_lev(from.vessel_lev());
    }
    if (from.has_mirror_lev()) {
      set_mirror_lev(from.mirror_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_PrivLevNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_PrivLevNotify::CopyFrom(const GodEvil_PrivLevNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_PrivLevNotify::IsInitialized() const {

  return true;
}

void GodEvil_PrivLevNotify::Swap(GodEvil_PrivLevNotify* other) {
  if (other != this) {
    std::swap(vessel_lev_, other->vessel_lev_);
    std::swap(mirror_lev_, other->mirror_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_PrivLevNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_PrivLevNotify_descriptor_;
  metadata.reflection = GodEvil_PrivLevNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_ChangeReq::GodEvil_ChangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ChangeReq::InitAsDefaultInstance() {
}

GodEvil_ChangeReq::GodEvil_ChangeReq(const GodEvil_ChangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ChangeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ChangeReq::~GodEvil_ChangeReq() {
  SharedDtor();
}

void GodEvil_ChangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ChangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ChangeReq_descriptor_;
}

const GodEvil_ChangeReq& GodEvil_ChangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ChangeReq* GodEvil_ChangeReq::default_instance_ = NULL;

GodEvil_ChangeReq* GodEvil_ChangeReq::New() const {
  return new GodEvil_ChangeReq;
}

void GodEvil_ChangeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_ChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ChangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ChangeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ChangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ChangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ChangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ChangeReq::MergeFrom(const GodEvil_ChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ChangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ChangeReq::CopyFrom(const GodEvil_ChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ChangeReq::IsInitialized() const {

  return true;
}

void GodEvil_ChangeReq::Swap(GodEvil_ChangeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ChangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ChangeReq_descriptor_;
  metadata.reflection = GodEvil_ChangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ChangeRsp::kRetFieldNumber;
const int GodEvil_ChangeRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

GodEvil_ChangeRsp::GodEvil_ChangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ChangeRsp::InitAsDefaultInstance() {
}

GodEvil_ChangeRsp::GodEvil_ChangeRsp(const GodEvil_ChangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ChangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ChangeRsp::~GodEvil_ChangeRsp() {
  SharedDtor();
}

void GodEvil_ChangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ChangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ChangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ChangeRsp_descriptor_;
}

const GodEvil_ChangeRsp& GodEvil_ChangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ChangeRsp* GodEvil_ChangeRsp::default_instance_ = NULL;

GodEvil_ChangeRsp* GodEvil_ChangeRsp::New() const {
  return new GodEvil_ChangeRsp;
}

void GodEvil_ChangeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ChangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ChangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ChangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ChangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ChangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ChangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ChangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ChangeRsp::MergeFrom(const GodEvil_ChangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ChangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ChangeRsp::CopyFrom(const GodEvil_ChangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ChangeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_ChangeRsp::Swap(GodEvil_ChangeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ChangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ChangeRsp_descriptor_;
  metadata.reflection = GodEvil_ChangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ExtraExpNotify::kExtraExpFieldNumber;
#endif  // !_MSC_VER

GodEvil_ExtraExpNotify::GodEvil_ExtraExpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ExtraExpNotify::InitAsDefaultInstance() {
}

GodEvil_ExtraExpNotify::GodEvil_ExtraExpNotify(const GodEvil_ExtraExpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ExtraExpNotify::SharedCtor() {
  _cached_size_ = 0;
  extra_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ExtraExpNotify::~GodEvil_ExtraExpNotify() {
  SharedDtor();
}

void GodEvil_ExtraExpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ExtraExpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ExtraExpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ExtraExpNotify_descriptor_;
}

const GodEvil_ExtraExpNotify& GodEvil_ExtraExpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ExtraExpNotify* GodEvil_ExtraExpNotify::default_instance_ = NULL;

GodEvil_ExtraExpNotify* GodEvil_ExtraExpNotify::New() const {
  return new GodEvil_ExtraExpNotify;
}

void GodEvil_ExtraExpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    extra_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ExtraExpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 extra_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extra_exp_)));
          set_has_extra_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ExtraExpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 extra_exp = 1;
  if (has_extra_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->extra_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ExtraExpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 extra_exp = 1;
  if (has_extra_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->extra_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ExtraExpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 extra_exp = 1;
    if (has_extra_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extra_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ExtraExpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ExtraExpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ExtraExpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ExtraExpNotify::MergeFrom(const GodEvil_ExtraExpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extra_exp()) {
      set_extra_exp(from.extra_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ExtraExpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ExtraExpNotify::CopyFrom(const GodEvil_ExtraExpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ExtraExpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_ExtraExpNotify::Swap(GodEvil_ExtraExpNotify* other) {
  if (other != this) {
    std::swap(extra_exp_, other->extra_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ExtraExpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ExtraExpNotify_descriptor_;
  metadata.reflection = GodEvil_ExtraExpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_UpdateEquipRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

GodEvil_UpdateEquipRsp::GodEvil_UpdateEquipRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_UpdateEquipRsp::InitAsDefaultInstance() {
}

GodEvil_UpdateEquipRsp::GodEvil_UpdateEquipRsp(const GodEvil_UpdateEquipRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_UpdateEquipRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_UpdateEquipRsp::~GodEvil_UpdateEquipRsp() {
  SharedDtor();
}

void GodEvil_UpdateEquipRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_UpdateEquipRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_UpdateEquipRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_UpdateEquipRsp_descriptor_;
}

const GodEvil_UpdateEquipRsp& GodEvil_UpdateEquipRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_UpdateEquipRsp* GodEvil_UpdateEquipRsp::default_instance_ = NULL;

GodEvil_UpdateEquipRsp* GodEvil_UpdateEquipRsp::New() const {
  return new GodEvil_UpdateEquipRsp;
}

void GodEvil_UpdateEquipRsp::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_UpdateEquipRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_UpdateEquipRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_UpdateEquipRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_UpdateEquipRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ItemProtoInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_UpdateEquipRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_UpdateEquipRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_UpdateEquipRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_UpdateEquipRsp::MergeFrom(const GodEvil_UpdateEquipRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_UpdateEquipRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_UpdateEquipRsp::CopyFrom(const GodEvil_UpdateEquipRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_UpdateEquipRsp::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GodEvil_UpdateEquipRsp::Swap(GodEvil_UpdateEquipRsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_UpdateEquipRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_UpdateEquipRsp_descriptor_;
  metadata.reflection = GodEvil_UpdateEquipRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_EquipListReq::GodEvil_EquipListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipListReq::InitAsDefaultInstance() {
}

GodEvil_EquipListReq::GodEvil_EquipListReq(const GodEvil_EquipListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipListReq::~GodEvil_EquipListReq() {
  SharedDtor();
}

void GodEvil_EquipListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipListReq_descriptor_;
}

const GodEvil_EquipListReq& GodEvil_EquipListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipListReq* GodEvil_EquipListReq::default_instance_ = NULL;

GodEvil_EquipListReq* GodEvil_EquipListReq::New() const {
  return new GodEvil_EquipListReq;
}

void GodEvil_EquipListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_EquipListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipListReq::MergeFrom(const GodEvil_EquipListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipListReq::CopyFrom(const GodEvil_EquipListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipListReq::IsInitialized() const {

  return true;
}

void GodEvil_EquipListReq::Swap(GodEvil_EquipListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipListReq_descriptor_;
  metadata.reflection = GodEvil_EquipListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipListRsp::kEquipFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipListRsp::GodEvil_EquipListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipListRsp::InitAsDefaultInstance() {
}

GodEvil_EquipListRsp::GodEvil_EquipListRsp(const GodEvil_EquipListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipListRsp::~GodEvil_EquipListRsp() {
  SharedDtor();
}

void GodEvil_EquipListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipListRsp_descriptor_;
}

const GodEvil_EquipListRsp& GodEvil_EquipListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipListRsp* GodEvil_EquipListRsp::default_instance_ = NULL;

GodEvil_EquipListRsp* GodEvil_EquipListRsp::New() const {
  return new GodEvil_EquipListRsp;
}

void GodEvil_EquipListRsp::Clear() {
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ItemProtoInfo equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipListRsp::MergeFrom(const GodEvil_EquipListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipListRsp::CopyFrom(const GodEvil_EquipListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipListRsp::IsInitialized() const {

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void GodEvil_EquipListRsp::Swap(GodEvil_EquipListRsp* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipListRsp_descriptor_;
  metadata.reflection = GodEvil_EquipListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipUpdateRsp::kEquipFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipUpdateRsp::GodEvil_EquipUpdateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipUpdateRsp::InitAsDefaultInstance() {
}

GodEvil_EquipUpdateRsp::GodEvil_EquipUpdateRsp(const GodEvil_EquipUpdateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipUpdateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipUpdateRsp::~GodEvil_EquipUpdateRsp() {
  SharedDtor();
}

void GodEvil_EquipUpdateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipUpdateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipUpdateRsp_descriptor_;
}

const GodEvil_EquipUpdateRsp& GodEvil_EquipUpdateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipUpdateRsp* GodEvil_EquipUpdateRsp::default_instance_ = NULL;

GodEvil_EquipUpdateRsp* GodEvil_EquipUpdateRsp::New() const {
  return new GodEvil_EquipUpdateRsp;
}

void GodEvil_EquipUpdateRsp::Clear() {
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipUpdateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipUpdateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ItemProtoInfo equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipUpdateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipUpdateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipUpdateRsp::MergeFrom(const GodEvil_EquipUpdateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipUpdateRsp::CopyFrom(const GodEvil_EquipUpdateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipUpdateRsp::IsInitialized() const {

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void GodEvil_EquipUpdateRsp::Swap(GodEvil_EquipUpdateRsp* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipUpdateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipUpdateRsp_descriptor_;
  metadata.reflection = GodEvil_EquipUpdateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipDressReq::kIndexFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipDressReq::GodEvil_EquipDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipDressReq::InitAsDefaultInstance() {
}

GodEvil_EquipDressReq::GodEvil_EquipDressReq(const GodEvil_EquipDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipDressReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipDressReq::~GodEvil_EquipDressReq() {
  SharedDtor();
}

void GodEvil_EquipDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipDressReq_descriptor_;
}

const GodEvil_EquipDressReq& GodEvil_EquipDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipDressReq* GodEvil_EquipDressReq::default_instance_ = NULL;

GodEvil_EquipDressReq* GodEvil_EquipDressReq::New() const {
  return new GodEvil_EquipDressReq;
}

void GodEvil_EquipDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipDressReq::MergeFrom(const GodEvil_EquipDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipDressReq::CopyFrom(const GodEvil_EquipDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipDressReq::IsInitialized() const {

  return true;
}

void GodEvil_EquipDressReq::Swap(GodEvil_EquipDressReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipDressReq_descriptor_;
  metadata.reflection = GodEvil_EquipDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipDressRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipDressRsp::GodEvil_EquipDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipDressRsp::InitAsDefaultInstance() {
}

GodEvil_EquipDressRsp::GodEvil_EquipDressRsp(const GodEvil_EquipDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipDressRsp::~GodEvil_EquipDressRsp() {
  SharedDtor();
}

void GodEvil_EquipDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipDressRsp_descriptor_;
}

const GodEvil_EquipDressRsp& GodEvil_EquipDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipDressRsp* GodEvil_EquipDressRsp::default_instance_ = NULL;

GodEvil_EquipDressRsp* GodEvil_EquipDressRsp::New() const {
  return new GodEvil_EquipDressRsp;
}

void GodEvil_EquipDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipDressRsp::MergeFrom(const GodEvil_EquipDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipDressRsp::CopyFrom(const GodEvil_EquipDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipDressRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_EquipDressRsp::Swap(GodEvil_EquipDressRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipDressRsp_descriptor_;
  metadata.reflection = GodEvil_EquipDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipUnDressReq::kPosFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipUnDressReq::GodEvil_EquipUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipUnDressReq::InitAsDefaultInstance() {
}

GodEvil_EquipUnDressReq::GodEvil_EquipUnDressReq(const GodEvil_EquipUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipUnDressReq::~GodEvil_EquipUnDressReq() {
  SharedDtor();
}

void GodEvil_EquipUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipUnDressReq_descriptor_;
}

const GodEvil_EquipUnDressReq& GodEvil_EquipUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipUnDressReq* GodEvil_EquipUnDressReq::default_instance_ = NULL;

GodEvil_EquipUnDressReq* GodEvil_EquipUnDressReq::New() const {
  return new GodEvil_EquipUnDressReq;
}

void GodEvil_EquipUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipUnDressReq::MergeFrom(const GodEvil_EquipUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipUnDressReq::CopyFrom(const GodEvil_EquipUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipUnDressReq::IsInitialized() const {

  return true;
}

void GodEvil_EquipUnDressReq::Swap(GodEvil_EquipUnDressReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipUnDressReq_descriptor_;
  metadata.reflection = GodEvil_EquipUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipUnDressRsp::kRetFieldNumber;
const int GodEvil_EquipUnDressRsp::kPosFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipUnDressRsp::GodEvil_EquipUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipUnDressRsp::InitAsDefaultInstance() {
}

GodEvil_EquipUnDressRsp::GodEvil_EquipUnDressRsp(const GodEvil_EquipUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipUnDressRsp::~GodEvil_EquipUnDressRsp() {
  SharedDtor();
}

void GodEvil_EquipUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipUnDressRsp_descriptor_;
}

const GodEvil_EquipUnDressRsp& GodEvil_EquipUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipUnDressRsp* GodEvil_EquipUnDressRsp::default_instance_ = NULL;

GodEvil_EquipUnDressRsp* GodEvil_EquipUnDressRsp::New() const {
  return new GodEvil_EquipUnDressRsp;
}

void GodEvil_EquipUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipUnDressRsp::MergeFrom(const GodEvil_EquipUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipUnDressRsp::CopyFrom(const GodEvil_EquipUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipUnDressRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_EquipUnDressRsp::Swap(GodEvil_EquipUnDressRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipUnDressRsp_descriptor_;
  metadata.reflection = GodEvil_EquipUnDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipTransReq::kIndexFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipTransReq::GodEvil_EquipTransReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipTransReq::InitAsDefaultInstance() {
}

GodEvil_EquipTransReq::GodEvil_EquipTransReq(const GodEvil_EquipTransReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipTransReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipTransReq::~GodEvil_EquipTransReq() {
  SharedDtor();
}

void GodEvil_EquipTransReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipTransReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipTransReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipTransReq_descriptor_;
}

const GodEvil_EquipTransReq& GodEvil_EquipTransReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipTransReq* GodEvil_EquipTransReq::default_instance_ = NULL;

GodEvil_EquipTransReq* GodEvil_EquipTransReq::New() const {
  return new GodEvil_EquipTransReq;
}

void GodEvil_EquipTransReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipTransReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipTransReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipTransReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipTransReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipTransReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipTransReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipTransReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipTransReq::MergeFrom(const GodEvil_EquipTransReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipTransReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipTransReq::CopyFrom(const GodEvil_EquipTransReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipTransReq::IsInitialized() const {

  return true;
}

void GodEvil_EquipTransReq::Swap(GodEvil_EquipTransReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipTransReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipTransReq_descriptor_;
  metadata.reflection = GodEvil_EquipTransReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipTransRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipTransRsp::GodEvil_EquipTransRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipTransRsp::InitAsDefaultInstance() {
}

GodEvil_EquipTransRsp::GodEvil_EquipTransRsp(const GodEvil_EquipTransRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipTransRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipTransRsp::~GodEvil_EquipTransRsp() {
  SharedDtor();
}

void GodEvil_EquipTransRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipTransRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipTransRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipTransRsp_descriptor_;
}

const GodEvil_EquipTransRsp& GodEvil_EquipTransRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipTransRsp* GodEvil_EquipTransRsp::default_instance_ = NULL;

GodEvil_EquipTransRsp* GodEvil_EquipTransRsp::New() const {
  return new GodEvil_EquipTransRsp;
}

void GodEvil_EquipTransRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipTransRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipTransRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipTransRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipTransRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipTransRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipTransRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipTransRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipTransRsp::MergeFrom(const GodEvil_EquipTransRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipTransRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipTransRsp::CopyFrom(const GodEvil_EquipTransRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipTransRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_EquipTransRsp::Swap(GodEvil_EquipTransRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipTransRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipTransRsp_descriptor_;
  metadata.reflection = GodEvil_EquipTransRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipStrongReq::kPosFieldNumber;
const int GodEvil_EquipStrongReq::kIndexLstFieldNumber;
const int GodEvil_EquipStrongReq::kItemsFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipStrongReq::GodEvil_EquipStrongReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipStrongReq::InitAsDefaultInstance() {
}

GodEvil_EquipStrongReq::GodEvil_EquipStrongReq(const GodEvil_EquipStrongReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipStrongReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipStrongReq::~GodEvil_EquipStrongReq() {
  SharedDtor();
}

void GodEvil_EquipStrongReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipStrongReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipStrongReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipStrongReq_descriptor_;
}

const GodEvil_EquipStrongReq& GodEvil_EquipStrongReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipStrongReq* GodEvil_EquipStrongReq::default_instance_ = NULL;

GodEvil_EquipStrongReq* GodEvil_EquipStrongReq::New() const {
  return new GodEvil_EquipStrongReq;
}

void GodEvil_EquipStrongReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
  }
  index_lst_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipStrongReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_lst;
        break;
      }

      // repeated uint32 index_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_index_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_lst;
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComPair64 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipStrongReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // repeated uint32 index_lst = 2;
  for (int i = 0; i < this->index_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->index_lst(i), output);
  }

  // repeated .proto_ff.ComPair64 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipStrongReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // repeated uint32 index_lst = 2;
  for (int i = 0; i < this->index_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->index_lst(i), target);
  }

  // repeated .proto_ff.ComPair64 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipStrongReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  // repeated uint32 index_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->index_lst(i));
    }
    total_size += 1 * this->index_lst_size() + data_size;
  }

  // repeated .proto_ff.ComPair64 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipStrongReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipStrongReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipStrongReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipStrongReq::MergeFrom(const GodEvil_EquipStrongReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_lst_.MergeFrom(from.index_lst_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipStrongReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipStrongReq::CopyFrom(const GodEvil_EquipStrongReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipStrongReq::IsInitialized() const {

  return true;
}

void GodEvil_EquipStrongReq::Swap(GodEvil_EquipStrongReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    index_lst_.Swap(&other->index_lst_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipStrongReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipStrongReq_descriptor_;
  metadata.reflection = GodEvil_EquipStrongReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipStrongRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipStrongRsp::GodEvil_EquipStrongRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipStrongRsp::InitAsDefaultInstance() {
}

GodEvil_EquipStrongRsp::GodEvil_EquipStrongRsp(const GodEvil_EquipStrongRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipStrongRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipStrongRsp::~GodEvil_EquipStrongRsp() {
  SharedDtor();
}

void GodEvil_EquipStrongRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipStrongRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipStrongRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipStrongRsp_descriptor_;
}

const GodEvil_EquipStrongRsp& GodEvil_EquipStrongRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipStrongRsp* GodEvil_EquipStrongRsp::default_instance_ = NULL;

GodEvil_EquipStrongRsp* GodEvil_EquipStrongRsp::New() const {
  return new GodEvil_EquipStrongRsp;
}

void GodEvil_EquipStrongRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipStrongRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipStrongRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipStrongRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipStrongRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipStrongRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipStrongRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipStrongRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipStrongRsp::MergeFrom(const GodEvil_EquipStrongRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipStrongRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipStrongRsp::CopyFrom(const GodEvil_EquipStrongRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipStrongRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_EquipStrongRsp::Swap(GodEvil_EquipStrongRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipStrongRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipStrongRsp_descriptor_;
  metadata.reflection = GodEvil_EquipStrongRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipWearQuaReq::kPosFieldNumber;
const int GodEvil_EquipWearQuaReq::kIndexFieldNumber;
const int GodEvil_EquipWearQuaReq::kNumFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipWearQuaReq::GodEvil_EquipWearQuaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipWearQuaReq::InitAsDefaultInstance() {
}

GodEvil_EquipWearQuaReq::GodEvil_EquipWearQuaReq(const GodEvil_EquipWearQuaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipWearQuaReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipWearQuaReq::~GodEvil_EquipWearQuaReq() {
  SharedDtor();
}

void GodEvil_EquipWearQuaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipWearQuaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipWearQuaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipWearQuaReq_descriptor_;
}

const GodEvil_EquipWearQuaReq& GodEvil_EquipWearQuaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipWearQuaReq* GodEvil_EquipWearQuaReq::default_instance_ = NULL;

GodEvil_EquipWearQuaReq* GodEvil_EquipWearQuaReq::New() const {
  return new GodEvil_EquipWearQuaReq;
}

void GodEvil_EquipWearQuaReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    num_ = 0u;
  }
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipWearQuaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // repeated uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipWearQuaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // repeated uint32 index = 2;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->index(i), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipWearQuaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // repeated uint32 index = 2;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->index(i), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipWearQuaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated uint32 index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipWearQuaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipWearQuaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipWearQuaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipWearQuaReq::MergeFrom(const GodEvil_EquipWearQuaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipWearQuaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipWearQuaReq::CopyFrom(const GodEvil_EquipWearQuaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipWearQuaReq::IsInitialized() const {

  return true;
}

void GodEvil_EquipWearQuaReq::Swap(GodEvil_EquipWearQuaReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    index_.Swap(&other->index_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipWearQuaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipWearQuaReq_descriptor_;
  metadata.reflection = GodEvil_EquipWearQuaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipWearQuaRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipWearQuaRsp::GodEvil_EquipWearQuaRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipWearQuaRsp::InitAsDefaultInstance() {
}

GodEvil_EquipWearQuaRsp::GodEvil_EquipWearQuaRsp(const GodEvil_EquipWearQuaRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipWearQuaRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipWearQuaRsp::~GodEvil_EquipWearQuaRsp() {
  SharedDtor();
}

void GodEvil_EquipWearQuaRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipWearQuaRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipWearQuaRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipWearQuaRsp_descriptor_;
}

const GodEvil_EquipWearQuaRsp& GodEvil_EquipWearQuaRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipWearQuaRsp* GodEvil_EquipWearQuaRsp::default_instance_ = NULL;

GodEvil_EquipWearQuaRsp* GodEvil_EquipWearQuaRsp::New() const {
  return new GodEvil_EquipWearQuaRsp;
}

void GodEvil_EquipWearQuaRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipWearQuaRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipWearQuaRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipWearQuaRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipWearQuaRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipWearQuaRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipWearQuaRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipWearQuaRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipWearQuaRsp::MergeFrom(const GodEvil_EquipWearQuaRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipWearQuaRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipWearQuaRsp::CopyFrom(const GodEvil_EquipWearQuaRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipWearQuaRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_EquipWearQuaRsp::Swap(GodEvil_EquipWearQuaRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipWearQuaRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipWearQuaRsp_descriptor_;
  metadata.reflection = GodEvil_EquipWearQuaRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipQuaReq::kPosFieldNumber;
const int GodEvil_EquipQuaReq::kIsAutoFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipQuaReq::GodEvil_EquipQuaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipQuaReq::InitAsDefaultInstance() {
}

GodEvil_EquipQuaReq::GodEvil_EquipQuaReq(const GodEvil_EquipQuaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipQuaReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  is_auto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipQuaReq::~GodEvil_EquipQuaReq() {
  SharedDtor();
}

void GodEvil_EquipQuaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipQuaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipQuaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipQuaReq_descriptor_;
}

const GodEvil_EquipQuaReq& GodEvil_EquipQuaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipQuaReq* GodEvil_EquipQuaReq::default_instance_ = NULL;

GodEvil_EquipQuaReq* GodEvil_EquipQuaReq::New() const {
  return new GodEvil_EquipQuaReq;
}

void GodEvil_EquipQuaReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    is_auto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipQuaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_auto;
        break;
      }

      // optional int32 is_auto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_auto_)));
          set_has_is_auto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipQuaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional int32 is_auto = 2;
  if (has_is_auto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_auto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipQuaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional int32 is_auto = 2;
  if (has_is_auto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_auto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipQuaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional int32 is_auto = 2;
    if (has_is_auto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_auto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipQuaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipQuaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipQuaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipQuaReq::MergeFrom(const GodEvil_EquipQuaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_is_auto()) {
      set_is_auto(from.is_auto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipQuaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipQuaReq::CopyFrom(const GodEvil_EquipQuaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipQuaReq::IsInitialized() const {

  return true;
}

void GodEvil_EquipQuaReq::Swap(GodEvil_EquipQuaReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(is_auto_, other->is_auto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipQuaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipQuaReq_descriptor_;
  metadata.reflection = GodEvil_EquipQuaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipQuaRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipQuaRsp::GodEvil_EquipQuaRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipQuaRsp::InitAsDefaultInstance() {
}

GodEvil_EquipQuaRsp::GodEvil_EquipQuaRsp(const GodEvil_EquipQuaRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipQuaRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipQuaRsp::~GodEvil_EquipQuaRsp() {
  SharedDtor();
}

void GodEvil_EquipQuaRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipQuaRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipQuaRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipQuaRsp_descriptor_;
}

const GodEvil_EquipQuaRsp& GodEvil_EquipQuaRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipQuaRsp* GodEvil_EquipQuaRsp::default_instance_ = NULL;

GodEvil_EquipQuaRsp* GodEvil_EquipQuaRsp::New() const {
  return new GodEvil_EquipQuaRsp;
}

void GodEvil_EquipQuaRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipQuaRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipQuaRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipQuaRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipQuaRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipQuaRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipQuaRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipQuaRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipQuaRsp::MergeFrom(const GodEvil_EquipQuaRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipQuaRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipQuaRsp::CopyFrom(const GodEvil_EquipQuaRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipQuaRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_EquipQuaRsp::Swap(GodEvil_EquipQuaRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipQuaRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipQuaRsp_descriptor_;
  metadata.reflection = GodEvil_EquipQuaRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipMakeReq::kTypeFieldNumber;
const int GodEvil_EquipMakeReq::kItemIdFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipMakeReq::GodEvil_EquipMakeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipMakeReq::InitAsDefaultInstance() {
}

GodEvil_EquipMakeReq::GodEvil_EquipMakeReq(const GodEvil_EquipMakeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipMakeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipMakeReq::~GodEvil_EquipMakeReq() {
  SharedDtor();
}

void GodEvil_EquipMakeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipMakeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipMakeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipMakeReq_descriptor_;
}

const GodEvil_EquipMakeReq& GodEvil_EquipMakeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipMakeReq* GodEvil_EquipMakeReq::default_instance_ = NULL;

GodEvil_EquipMakeReq* GodEvil_EquipMakeReq::New() const {
  return new GodEvil_EquipMakeReq;
}

void GodEvil_EquipMakeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipMakeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipMakeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipMakeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipMakeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipMakeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipMakeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipMakeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipMakeReq::MergeFrom(const GodEvil_EquipMakeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipMakeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipMakeReq::CopyFrom(const GodEvil_EquipMakeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipMakeReq::IsInitialized() const {

  return true;
}

void GodEvil_EquipMakeReq::Swap(GodEvil_EquipMakeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipMakeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipMakeReq_descriptor_;
  metadata.reflection = GodEvil_EquipMakeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_EquipMakeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_EquipMakeRsp::GodEvil_EquipMakeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_EquipMakeRsp::InitAsDefaultInstance() {
}

GodEvil_EquipMakeRsp::GodEvil_EquipMakeRsp(const GodEvil_EquipMakeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_EquipMakeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_EquipMakeRsp::~GodEvil_EquipMakeRsp() {
  SharedDtor();
}

void GodEvil_EquipMakeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_EquipMakeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_EquipMakeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_EquipMakeRsp_descriptor_;
}

const GodEvil_EquipMakeRsp& GodEvil_EquipMakeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GodEvil_2eproto();
  return *default_instance_;
}

GodEvil_EquipMakeRsp* GodEvil_EquipMakeRsp::default_instance_ = NULL;

GodEvil_EquipMakeRsp* GodEvil_EquipMakeRsp::New() const {
  return new GodEvil_EquipMakeRsp;
}

void GodEvil_EquipMakeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_EquipMakeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_EquipMakeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_EquipMakeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_EquipMakeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_EquipMakeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_EquipMakeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_EquipMakeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_EquipMakeRsp::MergeFrom(const GodEvil_EquipMakeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_EquipMakeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_EquipMakeRsp::CopyFrom(const GodEvil_EquipMakeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_EquipMakeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_EquipMakeRsp::Swap(GodEvil_EquipMakeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_EquipMakeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_EquipMakeRsp_descriptor_;
  metadata.reflection = GodEvil_EquipMakeRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
