// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* PlayerInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureAttrSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureAttrSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureAttrBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureAttrBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureStateBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureStateBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeShowInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeShowInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChgNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChgNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChgNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChgNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReliveNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReliveNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReliveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReliveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReliveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReliveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCollectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCollectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCollectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCollectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCollectSuccessRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCollectSuccessRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPvpStateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPvpStateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerExchangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerExchangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSubPackSaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSubPackSaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSubPackFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSubPackFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSubPackFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSubPackFetchRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Player_2eproto() {
  protobuf_AddDesc_Player_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Player.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfoRsp_descriptor_ = file->message_type(0);
  static const int PlayerInfoRsp_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, unlockinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, skill_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, godevil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, donate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, pkmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, killvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, is_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, marry_dst_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, tour_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, anger_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, wpp_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, fetch_war_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, strguidelines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, clan_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, vip_hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, subpack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, subpack_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, world_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, world_lv_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, world_lv_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, world_lv_16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, is_merge_),
  };
  PlayerInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoRsp_descriptor_,
      PlayerInfoRsp::default_instance_,
      PlayerInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoRsp));
  CreatureAttrSyn_descriptor_ = file->message_type(1);
  static const int CreatureAttrSyn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrSyn, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrSyn, attr_),
  };
  CreatureAttrSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureAttrSyn_descriptor_,
      CreatureAttrSyn::default_instance_,
      CreatureAttrSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureAttrSyn));
  CreatureAttrBroadRsp_descriptor_ = file->message_type(2);
  static const int CreatureAttrBroadRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrBroadRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrBroadRsp, attr_),
  };
  CreatureAttrBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureAttrBroadRsp_descriptor_,
      CreatureAttrBroadRsp::default_instance_,
      CreatureAttrBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureAttrBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureAttrBroadRsp));
  CreatureStateBroadRsp_descriptor_ = file->message_type(3);
  static const int CreatureStateBroadRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, beforestate_),
  };
  CreatureStateBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureStateBroadRsp_descriptor_,
      CreatureStateBroadRsp::default_instance_,
      CreatureStateBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureStateBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureStateBroadRsp));
  NoticeShowInfoRsp_descriptor_ = file->message_type(4);
  static const int NoticeShowInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, show_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, add_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, item_lst_),
  };
  NoticeShowInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticeShowInfoRsp_descriptor_,
      NoticeShowInfoRsp::default_instance_,
      NoticeShowInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeShowInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticeShowInfoRsp));
  ChgNameReq_descriptor_ = file->message_type(5);
  static const int ChgNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameReq, name_),
  };
  ChgNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChgNameReq_descriptor_,
      ChgNameReq::default_instance_,
      ChgNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChgNameReq));
  ChgNameRsp_descriptor_ = file->message_type(6);
  static const int ChgNameRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameRsp, name_),
  };
  ChgNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChgNameRsp_descriptor_,
      ChgNameRsp::default_instance_,
      ChgNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChgNameRsp));
  PlayerReliveNotify_descriptor_ = file->message_type(7);
  static const int PlayerReliveNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, is_tired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, already_num_),
  };
  PlayerReliveNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReliveNotify_descriptor_,
      PlayerReliveNotify::default_instance_,
      PlayerReliveNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReliveNotify));
  PlayerReliveReq_descriptor_ = file->message_type(8);
  static const int PlayerReliveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveReq, type_),
  };
  PlayerReliveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReliveReq_descriptor_,
      PlayerReliveReq::default_instance_,
      PlayerReliveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReliveReq));
  PlayerReliveRsp_descriptor_ = file->message_type(9);
  static const int PlayerReliveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveRsp, ret_),
  };
  PlayerReliveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReliveRsp_descriptor_,
      PlayerReliveRsp::default_instance_,
      PlayerReliveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReliveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReliveRsp));
  PlayerCollectReq_descriptor_ = file->message_type(10);
  static const int PlayerCollectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectReq, cid_),
  };
  PlayerCollectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCollectReq_descriptor_,
      PlayerCollectReq::default_instance_,
      PlayerCollectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCollectReq));
  PlayerCollectRsp_descriptor_ = file->message_type(11);
  static const int PlayerCollectRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectRsp, mons_cid_),
  };
  PlayerCollectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCollectRsp_descriptor_,
      PlayerCollectRsp::default_instance_,
      PlayerCollectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCollectRsp));
  PlayerCollectSuccessRsp_descriptor_ = file->message_type(12);
  static const int PlayerCollectSuccessRsp_offsets_[1] = {
  };
  PlayerCollectSuccessRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCollectSuccessRsp_descriptor_,
      PlayerCollectSuccessRsp::default_instance_,
      PlayerCollectSuccessRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectSuccessRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollectSuccessRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCollectSuccessRsp));
  PlayerPvpStateNotify_descriptor_ = file->message_type(13);
  static const int PlayerPvpStateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvpStateNotify, pvp_state_),
  };
  PlayerPvpStateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPvpStateNotify_descriptor_,
      PlayerPvpStateNotify::default_instance_,
      PlayerPvpStateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvpStateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvpStateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPvpStateNotify));
  PlayerExchangeReq_descriptor_ = file->message_type(14);
  static const int PlayerExchangeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExchangeReq, exchange_code_),
  };
  PlayerExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerExchangeReq_descriptor_,
      PlayerExchangeReq::default_instance_,
      PlayerExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerExchangeReq));
  PlayerExchangeRsp_descriptor_ = file->message_type(15);
  static const int PlayerExchangeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExchangeRsp, ret_),
  };
  PlayerExchangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerExchangeRsp_descriptor_,
      PlayerExchangeRsp::default_instance_,
      PlayerExchangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExchangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerExchangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerExchangeRsp));
  PlayerSubPackSaveReq_descriptor_ = file->message_type(16);
  static const int PlayerSubPackSaveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSubPackSaveReq, type_),
  };
  PlayerSubPackSaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSubPackSaveReq_descriptor_,
      PlayerSubPackSaveReq::default_instance_,
      PlayerSubPackSaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSubPackSaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSubPackSaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSubPackSaveReq));
  PlayerSubPackFetchReq_descriptor_ = file->message_type(17);
  static const int PlayerSubPackFetchReq_offsets_[1] = {
  };
  PlayerSubPackFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSubPackFetchReq_descriptor_,
      PlayerSubPackFetchReq::default_instance_,
      PlayerSubPackFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSubPackFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSubPackFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSubPackFetchReq));
  PlayerSubPackFetchRsp_descriptor_ = file->message_type(18);
  static const int PlayerSubPackFetchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSubPackFetchRsp, ret_),
  };
  PlayerSubPackFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSubPackFetchRsp_descriptor_,
      PlayerSubPackFetchRsp::default_instance_,
      PlayerSubPackFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSubPackFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSubPackFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSubPackFetchRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Player_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoRsp_descriptor_, &PlayerInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureAttrSyn_descriptor_, &CreatureAttrSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureAttrBroadRsp_descriptor_, &CreatureAttrBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureStateBroadRsp_descriptor_, &CreatureStateBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticeShowInfoRsp_descriptor_, &NoticeShowInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChgNameReq_descriptor_, &ChgNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChgNameRsp_descriptor_, &ChgNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReliveNotify_descriptor_, &PlayerReliveNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReliveReq_descriptor_, &PlayerReliveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReliveRsp_descriptor_, &PlayerReliveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCollectReq_descriptor_, &PlayerCollectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCollectRsp_descriptor_, &PlayerCollectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCollectSuccessRsp_descriptor_, &PlayerCollectSuccessRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPvpStateNotify_descriptor_, &PlayerPvpStateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerExchangeReq_descriptor_, &PlayerExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerExchangeRsp_descriptor_, &PlayerExchangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSubPackSaveReq_descriptor_, &PlayerSubPackSaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSubPackFetchReq_descriptor_, &PlayerSubPackFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSubPackFetchRsp_descriptor_, &PlayerSubPackFetchRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Player_2eproto() {
  delete PlayerInfoRsp::default_instance_;
  delete PlayerInfoRsp_reflection_;
  delete CreatureAttrSyn::default_instance_;
  delete CreatureAttrSyn_reflection_;
  delete CreatureAttrBroadRsp::default_instance_;
  delete CreatureAttrBroadRsp_reflection_;
  delete CreatureStateBroadRsp::default_instance_;
  delete CreatureStateBroadRsp_reflection_;
  delete NoticeShowInfoRsp::default_instance_;
  delete NoticeShowInfoRsp_reflection_;
  delete ChgNameReq::default_instance_;
  delete ChgNameReq_reflection_;
  delete ChgNameRsp::default_instance_;
  delete ChgNameRsp_reflection_;
  delete PlayerReliveNotify::default_instance_;
  delete PlayerReliveNotify_reflection_;
  delete PlayerReliveReq::default_instance_;
  delete PlayerReliveReq_reflection_;
  delete PlayerReliveRsp::default_instance_;
  delete PlayerReliveRsp_reflection_;
  delete PlayerCollectReq::default_instance_;
  delete PlayerCollectReq_reflection_;
  delete PlayerCollectRsp::default_instance_;
  delete PlayerCollectRsp_reflection_;
  delete PlayerCollectSuccessRsp::default_instance_;
  delete PlayerCollectSuccessRsp_reflection_;
  delete PlayerPvpStateNotify::default_instance_;
  delete PlayerPvpStateNotify_reflection_;
  delete PlayerExchangeReq::default_instance_;
  delete PlayerExchangeReq_reflection_;
  delete PlayerExchangeRsp::default_instance_;
  delete PlayerExchangeRsp_reflection_;
  delete PlayerSubPackSaveReq::default_instance_;
  delete PlayerSubPackSaveReq_reflection_;
  delete PlayerSubPackFetchReq::default_instance_;
  delete PlayerSubPackFetchReq_reflection_;
  delete PlayerSubPackFetchRsp::default_instance_;
  delete PlayerSubPackFetchRsp_reflection_;
}

void protobuf_AddDesc_Player_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Player.proto\022\010proto_ff\032\tCom.proto\032\017Com"
    "Define.proto\"\302\006\n\rPlayerInfoRsp\022\013\n\003cid\030\001 "
    "\001(\004\022\014\n\004name\030\002 \001(\014\022\013\n\003zid\030\003 \001(\r\022\020\n\010openti"
    "me\030\004 \001(\004\022\022\n\ncreatetime\030\005 \001(\004\022)\n\006facade\030\006"
    " \001(\0132\031.proto_ff.RoleFacadeProto\022\036\n\004attr\030"
    "\007 \003(\0132\020.proto_ff.Attr64\022\r\n\005mapid\030\010 \001(\004\022 "
    "\n\003pos\030\t \001(\0132\023.proto_ff.Vector3PB\0220\n\nunlo"
    "ckInfo\030\n \001(\0132\034.proto_ff.FunctionUnlockIn"
    "fo\022\r\n\005state\030\013 \001(\005\0222\n\013skill_group\030\014 \001(\0132\035"
    ".proto_ff.SkillGroupListProto\022\'\n\007godevil"
    "\030\r \001(\0132\026.proto_ff.GodEvilProto\022\016\n\006donate"
    "\030\016 \001(\005\022\016\n\006pkmode\030\017 \001(\005\022\021\n\tkillvalue\030\020 \001("
    "\005\022\021\n\tis_yellow\030\021 \001(\005\022\026\n\016marry_dst_name\030\022"
    " \001(\014\022\022\n\ntour_state\030\023 \001(\005\022)\n\010recharge\030\024 \001"
    "(\0132\027.proto_ff.RechargeProto\022\023\n\013anger_val"
    "ue\030\025 \001(\r\022%\n\twpp_state\030\026 \001(\0132\022.proto_ff.W"
    "PPState\022\021\n\tfetch_war\030\027 \001(\005\022\025\n\rstrGuideli"
    "nes\030\030 \001(\t\022&\n\nclan_infos\030\031 \003(\0132\022.proto_ff"
    ".ClanView\022\020\n\010vip_hide\030\032 \001(\005\022\024\n\014subpack_t"
    "ype\030\033 \001(\005\022\025\n\rsubpack_fetch\030\034 \001(\005\022\020\n\010worl"
    "d_lv\030\035 \001(\005\022\022\n\nworld_lv_4\030\036 \001(\005\022\022\n\nworld_"
    "lv_8\030\037 \001(\005\022\023\n\013world_lv_16\030  \001(\005\022\020\n\010is_me"
    "rge\030! \001(\005\">\n\017CreatureAttrSyn\022\013\n\003cid\030\001 \001("
    "\004\022\036\n\004attr\030\002 \003(\0132\020.proto_ff.Attr64\"C\n\024Cre"
    "atureAttrBroadRsp\022\013\n\003cid\030\001 \001(\004\022\036\n\004attr\030\002"
    " \003(\0132\020.proto_ff.Attr64\"K\n\025CreatureStateB"
    "roadRsp\022\013\n\003cid\030\001 \001(\004\022\020\n\010curstate\030\002 \001(\r\022\023"
    "\n\013beforestate\030\003 \001(\r\"h\n\021NoticeShowInfoRsp"
    "\022\021\n\tshow_type\030\001 \001(\005\022\017\n\007add_val\030\002 \001(\004\022/\n\010"
    "item_lst\030\003 \001(\0132\035.proto_ff.MultItemSimple"
    "Proto\"\032\n\nChgNameReq\022\014\n\004name\030\001 \001(\t\"+\n\nChg"
    "NameRsp\022\017\n\007retcode\030\001 \002(\005\022\014\n\004name\030\002 \001(\014\"h"
    "\n\022PlayerReliveNotify\022\014\n\004name\030\001 \001(\014\022\020\n\010le"
    "ft_num\030\002 \001(\005\022\013\n\003sec\030\003 \001(\005\022\020\n\010is_tired\030\004 "
    "\001(\010\022\023\n\013already_num\030\005 \001(\005\"\037\n\017PlayerRelive"
    "Req\022\014\n\004type\030\001 \001(\005\"\036\n\017PlayerReliveRsp\022\013\n\003"
    "ret\030\001 \002(\005\"\037\n\020PlayerCollectReq\022\013\n\003cid\030\001 \002"
    "(\004\"1\n\020PlayerCollectRsp\022\013\n\003ret\030\001 \002(\005\022\020\n\010m"
    "ons_cid\030\002 \001(\004\"\031\n\027PlayerCollectSuccessRsp"
    "\")\n\024PlayerPvpStateNotify\022\021\n\tpvp_state\030\001 "
    "\002(\005\"*\n\021PlayerExchangeReq\022\025\n\rexchange_cod"
    "e\030\001 \002(\014\" \n\021PlayerExchangeRsp\022\013\n\003ret\030\001 \002("
    "\005\"$\n\024PlayerSubPackSaveReq\022\014\n\004type\030\001 \002(\005\""
    "\027\n\025PlayerSubPackFetchReq\"$\n\025PlayerSubPac"
    "kFetchRsp\022\013\n\003ret\030\001 \002(\005", 1782);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Player.proto", &protobuf_RegisterTypes);
  PlayerInfoRsp::default_instance_ = new PlayerInfoRsp();
  CreatureAttrSyn::default_instance_ = new CreatureAttrSyn();
  CreatureAttrBroadRsp::default_instance_ = new CreatureAttrBroadRsp();
  CreatureStateBroadRsp::default_instance_ = new CreatureStateBroadRsp();
  NoticeShowInfoRsp::default_instance_ = new NoticeShowInfoRsp();
  ChgNameReq::default_instance_ = new ChgNameReq();
  ChgNameRsp::default_instance_ = new ChgNameRsp();
  PlayerReliveNotify::default_instance_ = new PlayerReliveNotify();
  PlayerReliveReq::default_instance_ = new PlayerReliveReq();
  PlayerReliveRsp::default_instance_ = new PlayerReliveRsp();
  PlayerCollectReq::default_instance_ = new PlayerCollectReq();
  PlayerCollectRsp::default_instance_ = new PlayerCollectRsp();
  PlayerCollectSuccessRsp::default_instance_ = new PlayerCollectSuccessRsp();
  PlayerPvpStateNotify::default_instance_ = new PlayerPvpStateNotify();
  PlayerExchangeReq::default_instance_ = new PlayerExchangeReq();
  PlayerExchangeRsp::default_instance_ = new PlayerExchangeRsp();
  PlayerSubPackSaveReq::default_instance_ = new PlayerSubPackSaveReq();
  PlayerSubPackFetchReq::default_instance_ = new PlayerSubPackFetchReq();
  PlayerSubPackFetchRsp::default_instance_ = new PlayerSubPackFetchRsp();
  PlayerInfoRsp::default_instance_->InitAsDefaultInstance();
  CreatureAttrSyn::default_instance_->InitAsDefaultInstance();
  CreatureAttrBroadRsp::default_instance_->InitAsDefaultInstance();
  CreatureStateBroadRsp::default_instance_->InitAsDefaultInstance();
  NoticeShowInfoRsp::default_instance_->InitAsDefaultInstance();
  ChgNameReq::default_instance_->InitAsDefaultInstance();
  ChgNameRsp::default_instance_->InitAsDefaultInstance();
  PlayerReliveNotify::default_instance_->InitAsDefaultInstance();
  PlayerReliveReq::default_instance_->InitAsDefaultInstance();
  PlayerReliveRsp::default_instance_->InitAsDefaultInstance();
  PlayerCollectReq::default_instance_->InitAsDefaultInstance();
  PlayerCollectRsp::default_instance_->InitAsDefaultInstance();
  PlayerCollectSuccessRsp::default_instance_->InitAsDefaultInstance();
  PlayerPvpStateNotify::default_instance_->InitAsDefaultInstance();
  PlayerExchangeReq::default_instance_->InitAsDefaultInstance();
  PlayerExchangeRsp::default_instance_->InitAsDefaultInstance();
  PlayerSubPackSaveReq::default_instance_->InitAsDefaultInstance();
  PlayerSubPackFetchReq::default_instance_->InitAsDefaultInstance();
  PlayerSubPackFetchRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Player_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Player_2eproto {
  StaticDescriptorInitializer_Player_2eproto() {
    protobuf_AddDesc_Player_2eproto();
  }
} static_descriptor_initializer_Player_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoRsp::kCidFieldNumber;
const int PlayerInfoRsp::kNameFieldNumber;
const int PlayerInfoRsp::kZidFieldNumber;
const int PlayerInfoRsp::kOpentimeFieldNumber;
const int PlayerInfoRsp::kCreatetimeFieldNumber;
const int PlayerInfoRsp::kFacadeFieldNumber;
const int PlayerInfoRsp::kAttrFieldNumber;
const int PlayerInfoRsp::kMapidFieldNumber;
const int PlayerInfoRsp::kPosFieldNumber;
const int PlayerInfoRsp::kUnlockInfoFieldNumber;
const int PlayerInfoRsp::kStateFieldNumber;
const int PlayerInfoRsp::kSkillGroupFieldNumber;
const int PlayerInfoRsp::kGodevilFieldNumber;
const int PlayerInfoRsp::kDonateFieldNumber;
const int PlayerInfoRsp::kPkmodeFieldNumber;
const int PlayerInfoRsp::kKillvalueFieldNumber;
const int PlayerInfoRsp::kIsYellowFieldNumber;
const int PlayerInfoRsp::kMarryDstNameFieldNumber;
const int PlayerInfoRsp::kTourStateFieldNumber;
const int PlayerInfoRsp::kRechargeFieldNumber;
const int PlayerInfoRsp::kAngerValueFieldNumber;
const int PlayerInfoRsp::kWppStateFieldNumber;
const int PlayerInfoRsp::kFetchWarFieldNumber;
const int PlayerInfoRsp::kStrGuidelinesFieldNumber;
const int PlayerInfoRsp::kClanInfosFieldNumber;
const int PlayerInfoRsp::kVipHideFieldNumber;
const int PlayerInfoRsp::kSubpackTypeFieldNumber;
const int PlayerInfoRsp::kSubpackFetchFieldNumber;
const int PlayerInfoRsp::kWorldLvFieldNumber;
const int PlayerInfoRsp::kWorldLv4FieldNumber;
const int PlayerInfoRsp::kWorldLv8FieldNumber;
const int PlayerInfoRsp::kWorldLv16FieldNumber;
const int PlayerInfoRsp::kIsMergeFieldNumber;
#endif  // !_MSC_VER

PlayerInfoRsp::PlayerInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoRsp::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  unlockinfo_ = const_cast< ::proto_ff::FunctionUnlockInfo*>(&::proto_ff::FunctionUnlockInfo::default_instance());
  skill_group_ = const_cast< ::proto_ff::SkillGroupListProto*>(&::proto_ff::SkillGroupListProto::default_instance());
  godevil_ = const_cast< ::proto_ff::GodEvilProto*>(&::proto_ff::GodEvilProto::default_instance());
  recharge_ = const_cast< ::proto_ff::RechargeProto*>(&::proto_ff::RechargeProto::default_instance());
  wpp_state_ = const_cast< ::proto_ff::WPPState*>(&::proto_ff::WPPState::default_instance());
}

PlayerInfoRsp::PlayerInfoRsp(const PlayerInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  opentime_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  mapid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  unlockinfo_ = NULL;
  state_ = 0;
  skill_group_ = NULL;
  godevil_ = NULL;
  donate_ = 0;
  pkmode_ = 0;
  killvalue_ = 0;
  is_yellow_ = 0;
  marry_dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tour_state_ = 0;
  recharge_ = NULL;
  anger_value_ = 0u;
  wpp_state_ = NULL;
  fetch_war_ = 0;
  strguidelines_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_hide_ = 0;
  subpack_type_ = 0;
  subpack_fetch_ = 0;
  world_lv_ = 0;
  world_lv_4_ = 0;
  world_lv_8_ = 0;
  world_lv_16_ = 0;
  is_merge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoRsp::~PlayerInfoRsp() {
  SharedDtor();
}

void PlayerInfoRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (marry_dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete marry_dst_name_;
  }
  if (strguidelines_ != &::google::protobuf::internal::kEmptyString) {
    delete strguidelines_;
  }
  if (this != default_instance_) {
    delete facade_;
    delete pos_;
    delete unlockinfo_;
    delete skill_group_;
    delete godevil_;
    delete recharge_;
    delete wpp_state_;
  }
}

void PlayerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoRsp_descriptor_;
}

const PlayerInfoRsp& PlayerInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerInfoRsp* PlayerInfoRsp::default_instance_ = NULL;

PlayerInfoRsp* PlayerInfoRsp::New() const {
  return new PlayerInfoRsp;
}

void PlayerInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    opentime_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    mapid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    if (has_unlockinfo()) {
      if (unlockinfo_ != NULL) unlockinfo_->::proto_ff::FunctionUnlockInfo::Clear();
    }
    state_ = 0;
    if (has_skill_group()) {
      if (skill_group_ != NULL) skill_group_->::proto_ff::SkillGroupListProto::Clear();
    }
    if (has_godevil()) {
      if (godevil_ != NULL) godevil_->::proto_ff::GodEvilProto::Clear();
    }
    donate_ = 0;
    pkmode_ = 0;
    killvalue_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_yellow_ = 0;
    if (has_marry_dst_name()) {
      if (marry_dst_name_ != &::google::protobuf::internal::kEmptyString) {
        marry_dst_name_->clear();
      }
    }
    tour_state_ = 0;
    if (has_recharge()) {
      if (recharge_ != NULL) recharge_->::proto_ff::RechargeProto::Clear();
    }
    anger_value_ = 0u;
    if (has_wpp_state()) {
      if (wpp_state_ != NULL) wpp_state_->::proto_ff::WPPState::Clear();
    }
    fetch_war_ = 0;
    if (has_strguidelines()) {
      if (strguidelines_ != &::google::protobuf::internal::kEmptyString) {
        strguidelines_->clear();
      }
    }
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    vip_hide_ = 0;
    subpack_type_ = 0;
    subpack_fetch_ = 0;
    world_lv_ = 0;
    world_lv_4_ = 0;
    world_lv_8_ = 0;
    world_lv_16_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    is_merge_ = 0;
  }
  attr_.Clear();
  clan_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opentime;
        break;
      }

      // optional uint64 opentime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr;
        if (input->ExpectTag(64)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_unlockInfo;
        break;
      }

      // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlockinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_state;
        break;
      }

      // optional int32 state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill_group;
        break;
      }

      // optional .proto_ff.SkillGroupListProto skill_group = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_godevil;
        break;
      }

      // optional .proto_ff.GodEvilProto godevil = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godevil:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_godevil()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_donate;
        break;
      }

      // optional int32 donate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donate_)));
          set_has_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_pkmode;
        break;
      }

      // optional int32 pkmode = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkmode_)));
          set_has_pkmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_killvalue;
        break;
      }

      // optional int32 killvalue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killvalue_)));
          set_has_killvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_yellow;
        break;
      }

      // optional int32 is_yellow = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_)));
          set_has_is_yellow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_marry_dst_name;
        break;
      }

      // optional bytes marry_dst_name = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marry_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marry_dst_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tour_state;
        break;
      }

      // optional int32 tour_state = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tour_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tour_state_)));
          set_has_tour_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_recharge;
        break;
      }

      // optional .proto_ff.RechargeProto recharge = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_anger_value;
        break;
      }

      // optional uint32 anger_value = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anger_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anger_value_)));
          set_has_anger_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_wpp_state;
        break;
      }

      // optional .proto_ff.WPPState wpp_state = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wpp_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wpp_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fetch_war;
        break;
      }

      // optional int32 fetch_war = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_war:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_war_)));
          set_has_fetch_war();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_strGuidelines;
        break;
      }

      // optional string strGuidelines = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGuidelines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strguidelines()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strguidelines().data(), this->strguidelines().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_clan_infos;
        break;
      }

      // repeated .proto_ff.ClanView clan_infos = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clan_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_clan_infos;
        if (input->ExpectTag(208)) goto parse_vip_hide;
        break;
      }

      // optional int32 vip_hide = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_hide_)));
          set_has_vip_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_subpack_type;
        break;
      }

      // optional int32 subpack_type = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subpack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subpack_type_)));
          set_has_subpack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_subpack_fetch;
        break;
      }

      // optional int32 subpack_fetch = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subpack_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subpack_fetch_)));
          set_has_subpack_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_world_lv;
        break;
      }

      // optional int32 world_lv = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_lv_)));
          set_has_world_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_world_lv_4;
        break;
      }

      // optional int32 world_lv_4 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_lv_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_lv_4_)));
          set_has_world_lv_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_world_lv_8;
        break;
      }

      // optional int32 world_lv_8 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_lv_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_lv_8_)));
          set_has_world_lv_8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_world_lv_16;
        break;
      }

      // optional int32 world_lv_16 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_lv_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_lv_16_)));
          set_has_world_lv_16();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_is_merge;
        break;
      }

      // optional int32 is_merge = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_merge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_merge_)));
          set_has_is_merge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional uint64 opentime = 4;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->opentime(), output);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->createtime(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 6;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->facade(), output);
  }

  // repeated .proto_ff.Attr64 attr = 7;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attr(i), output);
  }

  // optional uint64 mapid = 8;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->mapid(), output);
  }

  // optional .proto_ff.Vector3PB pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pos(), output);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
  if (has_unlockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->unlockinfo(), output);
  }

  // optional int32 state = 11;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->state(), output);
  }

  // optional .proto_ff.SkillGroupListProto skill_group = 12;
  if (has_skill_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill_group(), output);
  }

  // optional .proto_ff.GodEvilProto godevil = 13;
  if (has_godevil()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->godevil(), output);
  }

  // optional int32 donate = 14;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->donate(), output);
  }

  // optional int32 pkmode = 15;
  if (has_pkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pkmode(), output);
  }

  // optional int32 killvalue = 16;
  if (has_killvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->killvalue(), output);
  }

  // optional int32 is_yellow = 17;
  if (has_is_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->is_yellow(), output);
  }

  // optional bytes marry_dst_name = 18;
  if (has_marry_dst_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->marry_dst_name(), output);
  }

  // optional int32 tour_state = 19;
  if (has_tour_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tour_state(), output);
  }

  // optional .proto_ff.RechargeProto recharge = 20;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->recharge(), output);
  }

  // optional uint32 anger_value = 21;
  if (has_anger_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->anger_value(), output);
  }

  // optional .proto_ff.WPPState wpp_state = 22;
  if (has_wpp_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->wpp_state(), output);
  }

  // optional int32 fetch_war = 23;
  if (has_fetch_war()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->fetch_war(), output);
  }

  // optional string strGuidelines = 24;
  if (has_strguidelines()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strguidelines().data(), this->strguidelines().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->strguidelines(), output);
  }

  // repeated .proto_ff.ClanView clan_infos = 25;
  for (int i = 0; i < this->clan_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->clan_infos(i), output);
  }

  // optional int32 vip_hide = 26;
  if (has_vip_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->vip_hide(), output);
  }

  // optional int32 subpack_type = 27;
  if (has_subpack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->subpack_type(), output);
  }

  // optional int32 subpack_fetch = 28;
  if (has_subpack_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->subpack_fetch(), output);
  }

  // optional int32 world_lv = 29;
  if (has_world_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->world_lv(), output);
  }

  // optional int32 world_lv_4 = 30;
  if (has_world_lv_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->world_lv_4(), output);
  }

  // optional int32 world_lv_8 = 31;
  if (has_world_lv_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->world_lv_8(), output);
  }

  // optional int32 world_lv_16 = 32;
  if (has_world_lv_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->world_lv_16(), output);
  }

  // optional int32 is_merge = 33;
  if (has_is_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->is_merge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional uint64 opentime = 4;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->opentime(), target);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->createtime(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 6;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->facade(), target);
  }

  // repeated .proto_ff.Attr64 attr = 7;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attr(i), target);
  }

  // optional uint64 mapid = 8;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->mapid(), target);
  }

  // optional .proto_ff.Vector3PB pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pos(), target);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
  if (has_unlockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->unlockinfo(), target);
  }

  // optional int32 state = 11;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->state(), target);
  }

  // optional .proto_ff.SkillGroupListProto skill_group = 12;
  if (has_skill_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skill_group(), target);
  }

  // optional .proto_ff.GodEvilProto godevil = 13;
  if (has_godevil()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->godevil(), target);
  }

  // optional int32 donate = 14;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->donate(), target);
  }

  // optional int32 pkmode = 15;
  if (has_pkmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pkmode(), target);
  }

  // optional int32 killvalue = 16;
  if (has_killvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->killvalue(), target);
  }

  // optional int32 is_yellow = 17;
  if (has_is_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->is_yellow(), target);
  }

  // optional bytes marry_dst_name = 18;
  if (has_marry_dst_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->marry_dst_name(), target);
  }

  // optional int32 tour_state = 19;
  if (has_tour_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tour_state(), target);
  }

  // optional .proto_ff.RechargeProto recharge = 20;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->recharge(), target);
  }

  // optional uint32 anger_value = 21;
  if (has_anger_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->anger_value(), target);
  }

  // optional .proto_ff.WPPState wpp_state = 22;
  if (has_wpp_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->wpp_state(), target);
  }

  // optional int32 fetch_war = 23;
  if (has_fetch_war()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->fetch_war(), target);
  }

  // optional string strGuidelines = 24;
  if (has_strguidelines()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strguidelines().data(), this->strguidelines().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->strguidelines(), target);
  }

  // repeated .proto_ff.ClanView clan_infos = 25;
  for (int i = 0; i < this->clan_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->clan_infos(i), target);
  }

  // optional int32 vip_hide = 26;
  if (has_vip_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->vip_hide(), target);
  }

  // optional int32 subpack_type = 27;
  if (has_subpack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->subpack_type(), target);
  }

  // optional int32 subpack_fetch = 28;
  if (has_subpack_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->subpack_fetch(), target);
  }

  // optional int32 world_lv = 29;
  if (has_world_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->world_lv(), target);
  }

  // optional int32 world_lv_4 = 30;
  if (has_world_lv_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->world_lv_4(), target);
  }

  // optional int32 world_lv_8 = 31;
  if (has_world_lv_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->world_lv_8(), target);
  }

  // optional int32 world_lv_16 = 32;
  if (has_world_lv_16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->world_lv_16(), target);
  }

  // optional int32 is_merge = 33;
  if (has_is_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->is_merge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 opentime = 4;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

    // optional uint64 createtime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .proto_ff.RoleFacadeProto facade = 6;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint64 mapid = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.Vector3PB pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .proto_ff.FunctionUnlockInfo unlockInfo = 10;
    if (has_unlockinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockinfo());
    }

    // optional int32 state = 11;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .proto_ff.SkillGroupListProto skill_group = 12;
    if (has_skill_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_group());
    }

    // optional .proto_ff.GodEvilProto godevil = 13;
    if (has_godevil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->godevil());
    }

    // optional int32 donate = 14;
    if (has_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donate());
    }

    // optional int32 pkmode = 15;
    if (has_pkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkmode());
    }

    // optional int32 killvalue = 16;
    if (has_killvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killvalue());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 is_yellow = 17;
    if (has_is_yellow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow());
    }

    // optional bytes marry_dst_name = 18;
    if (has_marry_dst_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marry_dst_name());
    }

    // optional int32 tour_state = 19;
    if (has_tour_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tour_state());
    }

    // optional .proto_ff.RechargeProto recharge = 20;
    if (has_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recharge());
    }

    // optional uint32 anger_value = 21;
    if (has_anger_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anger_value());
    }

    // optional .proto_ff.WPPState wpp_state = 22;
    if (has_wpp_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpp_state());
    }

    // optional int32 fetch_war = 23;
    if (has_fetch_war()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch_war());
    }

    // optional string strGuidelines = 24;
    if (has_strguidelines()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strguidelines());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional int32 vip_hide = 26;
    if (has_vip_hide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_hide());
    }

    // optional int32 subpack_type = 27;
    if (has_subpack_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subpack_type());
    }

    // optional int32 subpack_fetch = 28;
    if (has_subpack_fetch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subpack_fetch());
    }

    // optional int32 world_lv = 29;
    if (has_world_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_lv());
    }

    // optional int32 world_lv_4 = 30;
    if (has_world_lv_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_lv_4());
    }

    // optional int32 world_lv_8 = 31;
    if (has_world_lv_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_lv_8());
    }

    // optional int32 world_lv_16 = 32;
    if (has_world_lv_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_lv_16());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 is_merge = 33;
    if (has_is_merge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_merge());
    }

  }
  // repeated .proto_ff.Attr64 attr = 7;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .proto_ff.ClanView clan_infos = 25;
  total_size += 2 * this->clan_infos_size();
  for (int i = 0; i < this->clan_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clan_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoRsp::MergeFrom(const PlayerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  clan_infos_.MergeFrom(from.clan_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_unlockinfo()) {
      mutable_unlockinfo()->::proto_ff::FunctionUnlockInfo::MergeFrom(from.unlockinfo());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_skill_group()) {
      mutable_skill_group()->::proto_ff::SkillGroupListProto::MergeFrom(from.skill_group());
    }
    if (from.has_godevil()) {
      mutable_godevil()->::proto_ff::GodEvilProto::MergeFrom(from.godevil());
    }
    if (from.has_donate()) {
      set_donate(from.donate());
    }
    if (from.has_pkmode()) {
      set_pkmode(from.pkmode());
    }
    if (from.has_killvalue()) {
      set_killvalue(from.killvalue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_yellow()) {
      set_is_yellow(from.is_yellow());
    }
    if (from.has_marry_dst_name()) {
      set_marry_dst_name(from.marry_dst_name());
    }
    if (from.has_tour_state()) {
      set_tour_state(from.tour_state());
    }
    if (from.has_recharge()) {
      mutable_recharge()->::proto_ff::RechargeProto::MergeFrom(from.recharge());
    }
    if (from.has_anger_value()) {
      set_anger_value(from.anger_value());
    }
    if (from.has_wpp_state()) {
      mutable_wpp_state()->::proto_ff::WPPState::MergeFrom(from.wpp_state());
    }
    if (from.has_fetch_war()) {
      set_fetch_war(from.fetch_war());
    }
    if (from.has_strguidelines()) {
      set_strguidelines(from.strguidelines());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_vip_hide()) {
      set_vip_hide(from.vip_hide());
    }
    if (from.has_subpack_type()) {
      set_subpack_type(from.subpack_type());
    }
    if (from.has_subpack_fetch()) {
      set_subpack_fetch(from.subpack_fetch());
    }
    if (from.has_world_lv()) {
      set_world_lv(from.world_lv());
    }
    if (from.has_world_lv_4()) {
      set_world_lv_4(from.world_lv_4());
    }
    if (from.has_world_lv_8()) {
      set_world_lv_8(from.world_lv_8());
    }
    if (from.has_world_lv_16()) {
      set_world_lv_16(from.world_lv_16());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_is_merge()) {
      set_is_merge(from.is_merge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoRsp::CopyFrom(const PlayerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRsp::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_godevil()) {
    if (!this->godevil().IsInitialized()) return false;
  }
  if (has_wpp_state()) {
    if (!this->wpp_state().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoRsp::Swap(PlayerInfoRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(opentime_, other->opentime_);
    std::swap(createtime_, other->createtime_);
    std::swap(facade_, other->facade_);
    attr_.Swap(&other->attr_);
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(unlockinfo_, other->unlockinfo_);
    std::swap(state_, other->state_);
    std::swap(skill_group_, other->skill_group_);
    std::swap(godevil_, other->godevil_);
    std::swap(donate_, other->donate_);
    std::swap(pkmode_, other->pkmode_);
    std::swap(killvalue_, other->killvalue_);
    std::swap(is_yellow_, other->is_yellow_);
    std::swap(marry_dst_name_, other->marry_dst_name_);
    std::swap(tour_state_, other->tour_state_);
    std::swap(recharge_, other->recharge_);
    std::swap(anger_value_, other->anger_value_);
    std::swap(wpp_state_, other->wpp_state_);
    std::swap(fetch_war_, other->fetch_war_);
    std::swap(strguidelines_, other->strguidelines_);
    clan_infos_.Swap(&other->clan_infos_);
    std::swap(vip_hide_, other->vip_hide_);
    std::swap(subpack_type_, other->subpack_type_);
    std::swap(subpack_fetch_, other->subpack_fetch_);
    std::swap(world_lv_, other->world_lv_);
    std::swap(world_lv_4_, other->world_lv_4_);
    std::swap(world_lv_8_, other->world_lv_8_);
    std::swap(world_lv_16_, other->world_lv_16_);
    std::swap(is_merge_, other->is_merge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoRsp_descriptor_;
  metadata.reflection = PlayerInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureAttrSyn::kCidFieldNumber;
const int CreatureAttrSyn::kAttrFieldNumber;
#endif  // !_MSC_VER

CreatureAttrSyn::CreatureAttrSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureAttrSyn::InitAsDefaultInstance() {
}

CreatureAttrSyn::CreatureAttrSyn(const CreatureAttrSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureAttrSyn::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureAttrSyn::~CreatureAttrSyn() {
  SharedDtor();
}

void CreatureAttrSyn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureAttrSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureAttrSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureAttrSyn_descriptor_;
}

const CreatureAttrSyn& CreatureAttrSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

CreatureAttrSyn* CreatureAttrSyn::default_instance_ = NULL;

CreatureAttrSyn* CreatureAttrSyn::New() const {
  return new CreatureAttrSyn;
}

void CreatureAttrSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureAttrSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureAttrSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureAttrSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureAttrSyn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.Attr64 attr = 2;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureAttrSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureAttrSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureAttrSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureAttrSyn::MergeFrom(const CreatureAttrSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureAttrSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureAttrSyn::CopyFrom(const CreatureAttrSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureAttrSyn::IsInitialized() const {

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  return true;
}

void CreatureAttrSyn::Swap(CreatureAttrSyn* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureAttrSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureAttrSyn_descriptor_;
  metadata.reflection = CreatureAttrSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureAttrBroadRsp::kCidFieldNumber;
const int CreatureAttrBroadRsp::kAttrFieldNumber;
#endif  // !_MSC_VER

CreatureAttrBroadRsp::CreatureAttrBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureAttrBroadRsp::InitAsDefaultInstance() {
}

CreatureAttrBroadRsp::CreatureAttrBroadRsp(const CreatureAttrBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureAttrBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureAttrBroadRsp::~CreatureAttrBroadRsp() {
  SharedDtor();
}

void CreatureAttrBroadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureAttrBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureAttrBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureAttrBroadRsp_descriptor_;
}

const CreatureAttrBroadRsp& CreatureAttrBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

CreatureAttrBroadRsp* CreatureAttrBroadRsp::default_instance_ = NULL;

CreatureAttrBroadRsp* CreatureAttrBroadRsp::New() const {
  return new CreatureAttrBroadRsp;
}

void CreatureAttrBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureAttrBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureAttrBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureAttrBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.Attr64 attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureAttrBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.Attr64 attr = 2;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureAttrBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureAttrBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureAttrBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureAttrBroadRsp::MergeFrom(const CreatureAttrBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureAttrBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureAttrBroadRsp::CopyFrom(const CreatureAttrBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureAttrBroadRsp::IsInitialized() const {

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  return true;
}

void CreatureAttrBroadRsp::Swap(CreatureAttrBroadRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureAttrBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureAttrBroadRsp_descriptor_;
  metadata.reflection = CreatureAttrBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureStateBroadRsp::kCidFieldNumber;
const int CreatureStateBroadRsp::kCurstateFieldNumber;
const int CreatureStateBroadRsp::kBeforestateFieldNumber;
#endif  // !_MSC_VER

CreatureStateBroadRsp::CreatureStateBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureStateBroadRsp::InitAsDefaultInstance() {
}

CreatureStateBroadRsp::CreatureStateBroadRsp(const CreatureStateBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureStateBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  curstate_ = 0u;
  beforestate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureStateBroadRsp::~CreatureStateBroadRsp() {
  SharedDtor();
}

void CreatureStateBroadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureStateBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureStateBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureStateBroadRsp_descriptor_;
}

const CreatureStateBroadRsp& CreatureStateBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

CreatureStateBroadRsp* CreatureStateBroadRsp::default_instance_ = NULL;

CreatureStateBroadRsp* CreatureStateBroadRsp::New() const {
  return new CreatureStateBroadRsp;
}

void CreatureStateBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    curstate_ = 0u;
    beforestate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureStateBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curstate;
        break;
      }

      // optional uint32 curstate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beforestate;
        break;
      }

      // optional uint32 beforestate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beforestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beforestate_)));
          set_has_beforestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureStateBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 curstate = 2;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curstate(), output);
  }

  // optional uint32 beforestate = 3;
  if (has_beforestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->beforestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureStateBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 curstate = 2;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curstate(), target);
  }

  // optional uint32 beforestate = 3;
  if (has_beforestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->beforestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureStateBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 curstate = 2;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // optional uint32 beforestate = 3;
    if (has_beforestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beforestate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureStateBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureStateBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureStateBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureStateBroadRsp::MergeFrom(const CreatureStateBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_beforestate()) {
      set_beforestate(from.beforestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureStateBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureStateBroadRsp::CopyFrom(const CreatureStateBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureStateBroadRsp::IsInitialized() const {

  return true;
}

void CreatureStateBroadRsp::Swap(CreatureStateBroadRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(curstate_, other->curstate_);
    std::swap(beforestate_, other->beforestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureStateBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureStateBroadRsp_descriptor_;
  metadata.reflection = CreatureStateBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoticeShowInfoRsp::kShowTypeFieldNumber;
const int NoticeShowInfoRsp::kAddValFieldNumber;
const int NoticeShowInfoRsp::kItemLstFieldNumber;
#endif  // !_MSC_VER

NoticeShowInfoRsp::NoticeShowInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoticeShowInfoRsp::InitAsDefaultInstance() {
  item_lst_ = const_cast< ::proto_ff::MultItemSimpleProto*>(&::proto_ff::MultItemSimpleProto::default_instance());
}

NoticeShowInfoRsp::NoticeShowInfoRsp(const NoticeShowInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoticeShowInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  show_type_ = 0;
  add_val_ = GOOGLE_ULONGLONG(0);
  item_lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeShowInfoRsp::~NoticeShowInfoRsp() {
  SharedDtor();
}

void NoticeShowInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete item_lst_;
  }
}

void NoticeShowInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeShowInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeShowInfoRsp_descriptor_;
}

const NoticeShowInfoRsp& NoticeShowInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

NoticeShowInfoRsp* NoticeShowInfoRsp::default_instance_ = NULL;

NoticeShowInfoRsp* NoticeShowInfoRsp::New() const {
  return new NoticeShowInfoRsp;
}

void NoticeShowInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_type_ = 0;
    add_val_ = GOOGLE_ULONGLONG(0);
    if (has_item_lst()) {
      if (item_lst_ != NULL) item_lst_->::proto_ff::MultItemSimpleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticeShowInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 show_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_type_)));
          set_has_show_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_val;
        break;
      }

      // optional uint64 add_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_val_)));
          set_has_add_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_lst;
        break;
      }

      // optional .proto_ff.MultItemSimpleProto item_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoticeShowInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 show_type = 1;
  if (has_show_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->show_type(), output);
  }

  // optional uint64 add_val = 2;
  if (has_add_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->add_val(), output);
  }

  // optional .proto_ff.MultItemSimpleProto item_lst = 3;
  if (has_item_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoticeShowInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 show_type = 1;
  if (has_show_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->show_type(), target);
  }

  // optional uint64 add_val = 2;
  if (has_add_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->add_val(), target);
  }

  // optional .proto_ff.MultItemSimpleProto item_lst = 3;
  if (has_item_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoticeShowInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 show_type = 1;
    if (has_show_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_type());
    }

    // optional uint64 add_val = 2;
    if (has_add_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_val());
    }

    // optional .proto_ff.MultItemSimpleProto item_lst = 3;
    if (has_item_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeShowInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticeShowInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticeShowInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticeShowInfoRsp::MergeFrom(const NoticeShowInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_type()) {
      set_show_type(from.show_type());
    }
    if (from.has_add_val()) {
      set_add_val(from.add_val());
    }
    if (from.has_item_lst()) {
      mutable_item_lst()->::proto_ff::MultItemSimpleProto::MergeFrom(from.item_lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticeShowInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeShowInfoRsp::CopyFrom(const NoticeShowInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeShowInfoRsp::IsInitialized() const {

  return true;
}

void NoticeShowInfoRsp::Swap(NoticeShowInfoRsp* other) {
  if (other != this) {
    std::swap(show_type_, other->show_type_);
    std::swap(add_val_, other->add_val_);
    std::swap(item_lst_, other->item_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticeShowInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeShowInfoRsp_descriptor_;
  metadata.reflection = NoticeShowInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChgNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

ChgNameReq::ChgNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChgNameReq::InitAsDefaultInstance() {
}

ChgNameReq::ChgNameReq(const ChgNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChgNameReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChgNameReq::~ChgNameReq() {
  SharedDtor();
}

void ChgNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChgNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChgNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChgNameReq_descriptor_;
}

const ChgNameReq& ChgNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

ChgNameReq* ChgNameReq::default_instance_ = NULL;

ChgNameReq* ChgNameReq::New() const {
  return new ChgNameReq;
}

void ChgNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChgNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChgNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChgNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChgNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChgNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChgNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChgNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChgNameReq::MergeFrom(const ChgNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChgNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChgNameReq::CopyFrom(const ChgNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChgNameReq::IsInitialized() const {

  return true;
}

void ChgNameReq::Swap(ChgNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChgNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChgNameReq_descriptor_;
  metadata.reflection = ChgNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChgNameRsp::kRetcodeFieldNumber;
const int ChgNameRsp::kNameFieldNumber;
#endif  // !_MSC_VER

ChgNameRsp::ChgNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChgNameRsp::InitAsDefaultInstance() {
}

ChgNameRsp::ChgNameRsp(const ChgNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChgNameRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChgNameRsp::~ChgNameRsp() {
  SharedDtor();
}

void ChgNameRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChgNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChgNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChgNameRsp_descriptor_;
}

const ChgNameRsp& ChgNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

ChgNameRsp* ChgNameRsp::default_instance_ = NULL;

ChgNameRsp* ChgNameRsp::New() const {
  return new ChgNameRsp;
}

void ChgNameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChgNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChgNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChgNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChgNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChgNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChgNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChgNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChgNameRsp::MergeFrom(const ChgNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChgNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChgNameRsp::CopyFrom(const ChgNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChgNameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChgNameRsp::Swap(ChgNameRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChgNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChgNameRsp_descriptor_;
  metadata.reflection = ChgNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReliveNotify::kNameFieldNumber;
const int PlayerReliveNotify::kLeftNumFieldNumber;
const int PlayerReliveNotify::kSecFieldNumber;
const int PlayerReliveNotify::kIsTiredFieldNumber;
const int PlayerReliveNotify::kAlreadyNumFieldNumber;
#endif  // !_MSC_VER

PlayerReliveNotify::PlayerReliveNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReliveNotify::InitAsDefaultInstance() {
}

PlayerReliveNotify::PlayerReliveNotify(const PlayerReliveNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReliveNotify::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  left_num_ = 0;
  sec_ = 0;
  is_tired_ = false;
  already_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReliveNotify::~PlayerReliveNotify() {
  SharedDtor();
}

void PlayerReliveNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerReliveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReliveNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReliveNotify_descriptor_;
}

const PlayerReliveNotify& PlayerReliveNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerReliveNotify* PlayerReliveNotify::default_instance_ = NULL;

PlayerReliveNotify* PlayerReliveNotify::New() const {
  return new PlayerReliveNotify;
}

void PlayerReliveNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    left_num_ = 0;
    sec_ = 0;
    is_tired_ = false;
    already_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReliveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_num;
        break;
      }

      // optional int32 left_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sec;
        break;
      }

      // optional int32 sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_tired;
        break;
      }

      // optional bool is_tired = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_tired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tired_)));
          set_has_is_tired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_already_num;
        break;
      }

      // optional int32 already_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_num_)));
          set_has_already_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReliveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 left_num = 2;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_num(), output);
  }

  // optional int32 sec = 3;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sec(), output);
  }

  // optional bool is_tired = 4;
  if (has_is_tired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_tired(), output);
  }

  // optional int32 already_num = 5;
  if (has_already_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->already_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReliveNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 left_num = 2;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_num(), target);
  }

  // optional int32 sec = 3;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sec(), target);
  }

  // optional bool is_tired = 4;
  if (has_is_tired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_tired(), target);
  }

  // optional int32 already_num = 5;
  if (has_already_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->already_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReliveNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 left_num = 2;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }

    // optional int32 sec = 3;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }

    // optional bool is_tired = 4;
    if (has_is_tired()) {
      total_size += 1 + 1;
    }

    // optional int32 already_num = 5;
    if (has_already_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReliveNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReliveNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReliveNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReliveNotify::MergeFrom(const PlayerReliveNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_is_tired()) {
      set_is_tired(from.is_tired());
    }
    if (from.has_already_num()) {
      set_already_num(from.already_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReliveNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReliveNotify::CopyFrom(const PlayerReliveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReliveNotify::IsInitialized() const {

  return true;
}

void PlayerReliveNotify::Swap(PlayerReliveNotify* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(left_num_, other->left_num_);
    std::swap(sec_, other->sec_);
    std::swap(is_tired_, other->is_tired_);
    std::swap(already_num_, other->already_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReliveNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReliveNotify_descriptor_;
  metadata.reflection = PlayerReliveNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReliveReq::kTypeFieldNumber;
#endif  // !_MSC_VER

PlayerReliveReq::PlayerReliveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReliveReq::InitAsDefaultInstance() {
}

PlayerReliveReq::PlayerReliveReq(const PlayerReliveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReliveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReliveReq::~PlayerReliveReq() {
  SharedDtor();
}

void PlayerReliveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReliveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReliveReq_descriptor_;
}

const PlayerReliveReq& PlayerReliveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerReliveReq* PlayerReliveReq::default_instance_ = NULL;

PlayerReliveReq* PlayerReliveReq::New() const {
  return new PlayerReliveReq;
}

void PlayerReliveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReliveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReliveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReliveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReliveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReliveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReliveReq::MergeFrom(const PlayerReliveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReliveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReliveReq::CopyFrom(const PlayerReliveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReliveReq::IsInitialized() const {

  return true;
}

void PlayerReliveReq::Swap(PlayerReliveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReliveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReliveReq_descriptor_;
  metadata.reflection = PlayerReliveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReliveRsp::kRetFieldNumber;
#endif  // !_MSC_VER

PlayerReliveRsp::PlayerReliveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReliveRsp::InitAsDefaultInstance() {
}

PlayerReliveRsp::PlayerReliveRsp(const PlayerReliveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReliveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReliveRsp::~PlayerReliveRsp() {
  SharedDtor();
}

void PlayerReliveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReliveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReliveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReliveRsp_descriptor_;
}

const PlayerReliveRsp& PlayerReliveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerReliveRsp* PlayerReliveRsp::default_instance_ = NULL;

PlayerReliveRsp* PlayerReliveRsp::New() const {
  return new PlayerReliveRsp;
}

void PlayerReliveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReliveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReliveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReliveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReliveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReliveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReliveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReliveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReliveRsp::MergeFrom(const PlayerReliveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReliveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReliveRsp::CopyFrom(const PlayerReliveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReliveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerReliveRsp::Swap(PlayerReliveRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReliveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReliveRsp_descriptor_;
  metadata.reflection = PlayerReliveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCollectReq::kCidFieldNumber;
#endif  // !_MSC_VER

PlayerCollectReq::PlayerCollectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCollectReq::InitAsDefaultInstance() {
}

PlayerCollectReq::PlayerCollectReq(const PlayerCollectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCollectReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCollectReq::~PlayerCollectReq() {
  SharedDtor();
}

void PlayerCollectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCollectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCollectReq_descriptor_;
}

const PlayerCollectReq& PlayerCollectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerCollectReq* PlayerCollectReq::default_instance_ = NULL;

PlayerCollectReq* PlayerCollectReq::New() const {
  return new PlayerCollectReq;
}

void PlayerCollectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCollectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCollectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCollectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCollectReq::MergeFrom(const PlayerCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCollectReq::CopyFrom(const PlayerCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCollectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerCollectReq::Swap(PlayerCollectReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCollectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCollectReq_descriptor_;
  metadata.reflection = PlayerCollectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCollectRsp::kRetFieldNumber;
const int PlayerCollectRsp::kMonsCidFieldNumber;
#endif  // !_MSC_VER

PlayerCollectRsp::PlayerCollectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCollectRsp::InitAsDefaultInstance() {
}

PlayerCollectRsp::PlayerCollectRsp(const PlayerCollectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCollectRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mons_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCollectRsp::~PlayerCollectRsp() {
  SharedDtor();
}

void PlayerCollectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCollectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCollectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCollectRsp_descriptor_;
}

const PlayerCollectRsp& PlayerCollectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerCollectRsp* PlayerCollectRsp::default_instance_ = NULL;

PlayerCollectRsp* PlayerCollectRsp::New() const {
  return new PlayerCollectRsp;
}

void PlayerCollectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    mons_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCollectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mons_cid;
        break;
      }

      // optional uint64 mons_cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mons_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mons_cid_)));
          set_has_mons_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCollectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 mons_cid = 2;
  if (has_mons_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mons_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCollectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 mons_cid = 2;
  if (has_mons_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mons_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCollectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 mons_cid = 2;
    if (has_mons_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mons_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCollectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCollectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCollectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCollectRsp::MergeFrom(const PlayerCollectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mons_cid()) {
      set_mons_cid(from.mons_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCollectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCollectRsp::CopyFrom(const PlayerCollectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCollectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerCollectRsp::Swap(PlayerCollectRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mons_cid_, other->mons_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCollectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCollectRsp_descriptor_;
  metadata.reflection = PlayerCollectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerCollectSuccessRsp::PlayerCollectSuccessRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCollectSuccessRsp::InitAsDefaultInstance() {
}

PlayerCollectSuccessRsp::PlayerCollectSuccessRsp(const PlayerCollectSuccessRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCollectSuccessRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCollectSuccessRsp::~PlayerCollectSuccessRsp() {
  SharedDtor();
}

void PlayerCollectSuccessRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCollectSuccessRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCollectSuccessRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCollectSuccessRsp_descriptor_;
}

const PlayerCollectSuccessRsp& PlayerCollectSuccessRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerCollectSuccessRsp* PlayerCollectSuccessRsp::default_instance_ = NULL;

PlayerCollectSuccessRsp* PlayerCollectSuccessRsp::New() const {
  return new PlayerCollectSuccessRsp;
}

void PlayerCollectSuccessRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCollectSuccessRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerCollectSuccessRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCollectSuccessRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCollectSuccessRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCollectSuccessRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCollectSuccessRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCollectSuccessRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCollectSuccessRsp::MergeFrom(const PlayerCollectSuccessRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCollectSuccessRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCollectSuccessRsp::CopyFrom(const PlayerCollectSuccessRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCollectSuccessRsp::IsInitialized() const {

  return true;
}

void PlayerCollectSuccessRsp::Swap(PlayerCollectSuccessRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCollectSuccessRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCollectSuccessRsp_descriptor_;
  metadata.reflection = PlayerCollectSuccessRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPvpStateNotify::kPvpStateFieldNumber;
#endif  // !_MSC_VER

PlayerPvpStateNotify::PlayerPvpStateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPvpStateNotify::InitAsDefaultInstance() {
}

PlayerPvpStateNotify::PlayerPvpStateNotify(const PlayerPvpStateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPvpStateNotify::SharedCtor() {
  _cached_size_ = 0;
  pvp_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPvpStateNotify::~PlayerPvpStateNotify() {
  SharedDtor();
}

void PlayerPvpStateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPvpStateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPvpStateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPvpStateNotify_descriptor_;
}

const PlayerPvpStateNotify& PlayerPvpStateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerPvpStateNotify* PlayerPvpStateNotify::default_instance_ = NULL;

PlayerPvpStateNotify* PlayerPvpStateNotify::New() const {
  return new PlayerPvpStateNotify;
}

void PlayerPvpStateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvp_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPvpStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pvp_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_state_)));
          set_has_pvp_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPvpStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pvp_state = 1;
  if (has_pvp_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pvp_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPvpStateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pvp_state = 1;
  if (has_pvp_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pvp_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPvpStateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pvp_state = 1;
    if (has_pvp_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPvpStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPvpStateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPvpStateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPvpStateNotify::MergeFrom(const PlayerPvpStateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvp_state()) {
      set_pvp_state(from.pvp_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPvpStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPvpStateNotify::CopyFrom(const PlayerPvpStateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPvpStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerPvpStateNotify::Swap(PlayerPvpStateNotify* other) {
  if (other != this) {
    std::swap(pvp_state_, other->pvp_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPvpStateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPvpStateNotify_descriptor_;
  metadata.reflection = PlayerPvpStateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerExchangeReq::kExchangeCodeFieldNumber;
#endif  // !_MSC_VER

PlayerExchangeReq::PlayerExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerExchangeReq::InitAsDefaultInstance() {
}

PlayerExchangeReq::PlayerExchangeReq(const PlayerExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  exchange_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerExchangeReq::~PlayerExchangeReq() {
  SharedDtor();
}

void PlayerExchangeReq::SharedDtor() {
  if (exchange_code_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_code_;
  }
  if (this != default_instance_) {
  }
}

void PlayerExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerExchangeReq_descriptor_;
}

const PlayerExchangeReq& PlayerExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerExchangeReq* PlayerExchangeReq::default_instance_ = NULL;

PlayerExchangeReq* PlayerExchangeReq::New() const {
  return new PlayerExchangeReq;
}

void PlayerExchangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_exchange_code()) {
      if (exchange_code_ != &::google::protobuf::internal::kEmptyString) {
        exchange_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes exchange_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes exchange_code = 1;
  if (has_exchange_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->exchange_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes exchange_code = 1;
  if (has_exchange_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->exchange_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes exchange_code = 1;
    if (has_exchange_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->exchange_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerExchangeReq::MergeFrom(const PlayerExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_code()) {
      set_exchange_code(from.exchange_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerExchangeReq::CopyFrom(const PlayerExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExchangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerExchangeReq::Swap(PlayerExchangeReq* other) {
  if (other != this) {
    std::swap(exchange_code_, other->exchange_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerExchangeReq_descriptor_;
  metadata.reflection = PlayerExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerExchangeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

PlayerExchangeRsp::PlayerExchangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerExchangeRsp::InitAsDefaultInstance() {
}

PlayerExchangeRsp::PlayerExchangeRsp(const PlayerExchangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerExchangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerExchangeRsp::~PlayerExchangeRsp() {
  SharedDtor();
}

void PlayerExchangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerExchangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerExchangeRsp_descriptor_;
}

const PlayerExchangeRsp& PlayerExchangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerExchangeRsp* PlayerExchangeRsp::default_instance_ = NULL;

PlayerExchangeRsp* PlayerExchangeRsp::New() const {
  return new PlayerExchangeRsp;
}

void PlayerExchangeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerExchangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerExchangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerExchangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerExchangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerExchangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerExchangeRsp::MergeFrom(const PlayerExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerExchangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerExchangeRsp::CopyFrom(const PlayerExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExchangeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerExchangeRsp::Swap(PlayerExchangeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerExchangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerExchangeRsp_descriptor_;
  metadata.reflection = PlayerExchangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSubPackSaveReq::kTypeFieldNumber;
#endif  // !_MSC_VER

PlayerSubPackSaveReq::PlayerSubPackSaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSubPackSaveReq::InitAsDefaultInstance() {
}

PlayerSubPackSaveReq::PlayerSubPackSaveReq(const PlayerSubPackSaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSubPackSaveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSubPackSaveReq::~PlayerSubPackSaveReq() {
  SharedDtor();
}

void PlayerSubPackSaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSubPackSaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSubPackSaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSubPackSaveReq_descriptor_;
}

const PlayerSubPackSaveReq& PlayerSubPackSaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerSubPackSaveReq* PlayerSubPackSaveReq::default_instance_ = NULL;

PlayerSubPackSaveReq* PlayerSubPackSaveReq::New() const {
  return new PlayerSubPackSaveReq;
}

void PlayerSubPackSaveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSubPackSaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSubPackSaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSubPackSaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSubPackSaveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSubPackSaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSubPackSaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSubPackSaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSubPackSaveReq::MergeFrom(const PlayerSubPackSaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSubPackSaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSubPackSaveReq::CopyFrom(const PlayerSubPackSaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSubPackSaveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerSubPackSaveReq::Swap(PlayerSubPackSaveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSubPackSaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSubPackSaveReq_descriptor_;
  metadata.reflection = PlayerSubPackSaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerSubPackFetchReq::PlayerSubPackFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSubPackFetchReq::InitAsDefaultInstance() {
}

PlayerSubPackFetchReq::PlayerSubPackFetchReq(const PlayerSubPackFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSubPackFetchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSubPackFetchReq::~PlayerSubPackFetchReq() {
  SharedDtor();
}

void PlayerSubPackFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSubPackFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSubPackFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSubPackFetchReq_descriptor_;
}

const PlayerSubPackFetchReq& PlayerSubPackFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerSubPackFetchReq* PlayerSubPackFetchReq::default_instance_ = NULL;

PlayerSubPackFetchReq* PlayerSubPackFetchReq::New() const {
  return new PlayerSubPackFetchReq;
}

void PlayerSubPackFetchReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSubPackFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerSubPackFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSubPackFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSubPackFetchReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSubPackFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSubPackFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSubPackFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSubPackFetchReq::MergeFrom(const PlayerSubPackFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSubPackFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSubPackFetchReq::CopyFrom(const PlayerSubPackFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSubPackFetchReq::IsInitialized() const {

  return true;
}

void PlayerSubPackFetchReq::Swap(PlayerSubPackFetchReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSubPackFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSubPackFetchReq_descriptor_;
  metadata.reflection = PlayerSubPackFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSubPackFetchRsp::kRetFieldNumber;
#endif  // !_MSC_VER

PlayerSubPackFetchRsp::PlayerSubPackFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSubPackFetchRsp::InitAsDefaultInstance() {
}

PlayerSubPackFetchRsp::PlayerSubPackFetchRsp(const PlayerSubPackFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSubPackFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSubPackFetchRsp::~PlayerSubPackFetchRsp() {
  SharedDtor();
}

void PlayerSubPackFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSubPackFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSubPackFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSubPackFetchRsp_descriptor_;
}

const PlayerSubPackFetchRsp& PlayerSubPackFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Player_2eproto();
  return *default_instance_;
}

PlayerSubPackFetchRsp* PlayerSubPackFetchRsp::default_instance_ = NULL;

PlayerSubPackFetchRsp* PlayerSubPackFetchRsp::New() const {
  return new PlayerSubPackFetchRsp;
}

void PlayerSubPackFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSubPackFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSubPackFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSubPackFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSubPackFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSubPackFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSubPackFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSubPackFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSubPackFetchRsp::MergeFrom(const PlayerSubPackFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSubPackFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSubPackFetchRsp::CopyFrom(const PlayerSubPackFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSubPackFetchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerSubPackFetchRsp::Swap(PlayerSubPackFetchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSubPackFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSubPackFetchRsp_descriptor_;
  metadata.reflection = PlayerSubPackFetchRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
