// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monster.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* monstermonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monstermonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_monstermonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_monstermonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* monsterdisplayskillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monsterdisplayskillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* monsterdisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monsterdisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_monsterdisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_monsterdisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* monstervalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monstervalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_monstervalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_monstervalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* monstervalueParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monstervalueParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_monstervalueParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_monstervalueParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* monsterdrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  monsterdrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_monsterdrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_monsterdrop_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_monster_2eproto() {
  protobuf_AddDesc_monster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "monster.proto");
  GOOGLE_CHECK(file != NULL);
  monstermonster_descriptor_ = file->message_type(0);
  static const int monstermonster_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, monstername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, functionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, damageaddtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, monsterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, droplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, displayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, valueparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, aiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, hpsectionnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, breedprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, breedmonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, breedmonlive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, itemcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, isbornactionon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, belongshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, dropgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, harmdrop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, joninper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, btnrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, btnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, drivepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, corpseid_),
  };
  monstermonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monstermonster_descriptor_,
      monstermonster::default_instance_,
      monstermonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstermonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monstermonster));
  Sheet_monstermonster_descriptor_ = file->message_type(1);
  static const int Sheet_monstermonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstermonster, monstermonster_list_),
  };
  Sheet_monstermonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_monstermonster_descriptor_,
      Sheet_monstermonster::default_instance_,
      Sheet_monstermonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstermonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstermonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_monstermonster));
  monsterdisplayskillDesc_descriptor_ = file->message_type(2);
  static const int monsterdisplayskillDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplayskillDesc, id_),
  };
  monsterdisplayskillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monsterdisplayskillDesc_descriptor_,
      monsterdisplayskillDesc::default_instance_,
      monsterdisplayskillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplayskillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplayskillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monsterdisplayskillDesc));
  monsterdisplay_descriptor_ = file->message_type(3);
  static const int monsterdisplay_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, displayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, modeloffsetsx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, modeloffsetsy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, modelscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, modelradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, pathradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, collisionradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, rspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, skill_),
  };
  monsterdisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monsterdisplay_descriptor_,
      monsterdisplay::default_instance_,
      monsterdisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monsterdisplay));
  Sheet_monsterdisplay_descriptor_ = file->message_type(4);
  static const int Sheet_monsterdisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdisplay, monsterdisplay_list_),
  };
  Sheet_monsterdisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_monsterdisplay_descriptor_,
      Sheet_monsterdisplay::default_instance_,
      Sheet_monsterdisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_monsterdisplay));
  monstervalue_descriptor_ = file->message_type(5);
  static const int monstervalue_offsets_[74] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, monsterlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, brk_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, five_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, five_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, thump_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, thump_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, sky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, sky_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, sky_redu_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, sky_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, kill_god_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, god_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, mortal_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, mortal_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, fairy_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, fairy_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, god_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, god_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, crit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, crit_resit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, crit_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, crit_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, batter_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, batter_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, batter_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, batter_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, brkdown_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, brkdown_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, dam_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, dam_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, all_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, all_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, skill_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, skill_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, rebound_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, hp_steal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, dodge_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, hit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, blk_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, brk_blk_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, blk_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, blk_pierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, rel_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, rel_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, five_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, five_resist_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, fire_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, fire_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, ice_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, ice_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, thunder_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, thunder_rdu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, player_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, player_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, leader_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, leader_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, mon_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, mon_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, var_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, var_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, unusual_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, unusual_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, hp_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, unusual_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, fix_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, high_hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, recover_hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, week_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, shield_),
  };
  monstervalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monstervalue_descriptor_,
      monstervalue::default_instance_,
      monstervalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monstervalue));
  Sheet_monstervalue_descriptor_ = file->message_type(6);
  static const int Sheet_monstervalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalue, monstervalue_list_),
  };
  Sheet_monstervalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_monstervalue_descriptor_,
      Sheet_monstervalue::default_instance_,
      Sheet_monstervalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_monstervalue));
  monstervalueParam_descriptor_ = file->message_type(7);
  static const int monstervalueParam_offsets_[72] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_brk_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_five_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_five_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_thump_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_thump_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_sky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_sky_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_sky_redu_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_sky_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_kill_god_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_god_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_mortal_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_mortal_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_fairy_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_fairy_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_god_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_god_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_crit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_crit_resit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_crit_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_crit_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_batter_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_batter_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_batter_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_batter_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_brkdown_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_brkdown_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_dam_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_dam_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_all_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_all_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_skill_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_skill_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_rebound_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_hp_steal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_dodge_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_hit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_blk_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_brk_blk_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_blk_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_blk_pierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_rel_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_rel_dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_five_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_five_resist_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_fire_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_fire_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_ice_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_ice_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_thunder_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_thunder_rdu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_player_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_player_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_leader_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_leader_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_mon_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_mon_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_var_redu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_var_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_unusual_resist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_unusual_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_hp_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_unusual_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_fix_recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_high_hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_recover_hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, p_week_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, shield_),
  };
  monstervalueParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monstervalueParam_descriptor_,
      monstervalueParam::default_instance_,
      monstervalueParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monstervalueParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monstervalueParam));
  Sheet_monstervalueParam_descriptor_ = file->message_type(8);
  static const int Sheet_monstervalueParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalueParam, monstervalueparam_list_),
  };
  Sheet_monstervalueParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_monstervalueParam_descriptor_,
      Sheet_monstervalueParam::default_instance_,
      Sheet_monstervalueParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalueParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monstervalueParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_monstervalueParam));
  monsterdrop_descriptor_ = file->message_type(9);
  static const int monsterdrop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdrop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdrop, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdrop, own_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdrop, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdrop, boxid_),
  };
  monsterdrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      monsterdrop_descriptor_,
      monsterdrop::default_instance_,
      monsterdrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(monsterdrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(monsterdrop));
  Sheet_monsterdrop_descriptor_ = file->message_type(10);
  static const int Sheet_monsterdrop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdrop, monsterdrop_list_),
  };
  Sheet_monsterdrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_monsterdrop_descriptor_,
      Sheet_monsterdrop::default_instance_,
      Sheet_monsterdrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_monsterdrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_monsterdrop));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_monster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monstermonster_descriptor_, &monstermonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_monstermonster_descriptor_, &Sheet_monstermonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monsterdisplayskillDesc_descriptor_, &monsterdisplayskillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monsterdisplay_descriptor_, &monsterdisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_monsterdisplay_descriptor_, &Sheet_monsterdisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monstervalue_descriptor_, &monstervalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_monstervalue_descriptor_, &Sheet_monstervalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monstervalueParam_descriptor_, &monstervalueParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_monstervalueParam_descriptor_, &Sheet_monstervalueParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    monsterdrop_descriptor_, &monsterdrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_monsterdrop_descriptor_, &Sheet_monsterdrop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_monster_2eproto() {
  delete monstermonster::default_instance_;
  delete monstermonster_reflection_;
  delete Sheet_monstermonster::default_instance_;
  delete Sheet_monstermonster_reflection_;
  delete monsterdisplayskillDesc::default_instance_;
  delete monsterdisplayskillDesc_reflection_;
  delete monsterdisplay::default_instance_;
  delete monsterdisplay_reflection_;
  delete Sheet_monsterdisplay::default_instance_;
  delete Sheet_monsterdisplay_reflection_;
  delete monstervalue::default_instance_;
  delete monstervalue_reflection_;
  delete Sheet_monstervalue::default_instance_;
  delete Sheet_monstervalue_reflection_;
  delete monstervalueParam::default_instance_;
  delete monstervalueParam_reflection_;
  delete Sheet_monstervalueParam::default_instance_;
  delete Sheet_monstervalueParam_reflection_;
  delete monsterdrop::default_instance_;
  delete monsterdrop_reflection_;
  delete Sheet_monsterdrop::default_instance_;
  delete Sheet_monsterdrop_reflection_;
}

void protobuf_AddDesc_monster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmonster.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\266\010\n\016monstermonster\022\037\n\tmonsterID"
    "\030\001 \001(\003B\014\302\377\024\010\346\200\252\347\211\251ID\022&\n\013monsterName\030\002 \001("
    "\tB\021\302\377\024\t\346\200\252\347\211\251\345\220\215\220\301\024<\022&\n\014functionType\030\003 \001"
    "(\005B\020\302\377\024\014\345\212\237\350\203\275\347\261\273\345\236\213\022\'\n\rfunctionValue\030\004 "
    "\001(\003B\020\302\377\024\014\345\212\237\350\203\275\345\217\202\346\225\260\022$\n\nprofession\030\005 \001("
    "\005B\020\302\377\024\014\346\200\252\347\211\251\350\201\214\344\270\232\022-\n\rdamageAddType\030\006 \001"
    "(\005B\026\302\377\024\022\344\274\244\345\256\263\345\212\240\346\210\220\347\261\273\345\236\213\022#\n\tmonsterLV\030"
    "\007 \001(\005B\020\302\377\024\014\346\200\252\347\211\251\347\255\211\347\272\247\022)\n\tdroplimit\030\010 \001"
    "(\005B\026\302\377\024\022\346\234\200\345\244\247\346\216\211\350\220\275\347\255\211\347\272\247\022(\n\tdisplayID\030"
    "\t \001(\003B\025\302\377\024\021\350\265\204\346\272\220\344\270\216\350\241\250\347\216\260ID\022#\n\tvaluetyp"
    "e\030\n \001(\003B\020\302\377\024\014\346\225\260\345\200\274\347\261\273\345\236\213\022$\n\nvalueParam\030"
    "\013 \001(\005B\020\302\377\024\014\346\225\260\345\200\274\345\217\202\346\225\260\022\031\n\004aiId\030\014 \001(\003B\013\302"
    "\377\024\007AI\350\241\250ID\022,\n\014hpSectionNum\030\r \001(\005B\026\302\377\024\022\346\200"
    "\252\347\211\251\350\241\200\346\235\241\346\256\265\346\225\260\0222\n\tbreedProb\030\016 \001(\005B\037\302\377\024"
    "\033\346\255\273\344\272\241\350\247\246\345\217\221\346\226\260\346\200\252\347\211\251\345\207\240\347\216\207\022,\n\nbreedMon"
    "ID\030\017 \001(\003B\030\302\377\024\024\350\247\246\345\217\221\347\224\237\346\210\220\346\200\252\347\211\251ID\022,\n\014br"
    "eedMonLive\030\020 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\345\255\230\346\264\273\346\227\266\351\227\264"
    "\022&\n\010itemCost\030\021 \001(\tB\024\302\377\024\014\351\201\223\345\205\267\346\266\210\350\200\227\220\301\024<"
    "\0224\n\016isBornActionOn\030\022 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\345\220\257\347"
    "\224\250\345\207\272\347\224\237\345\212\250\344\275\234\0226\n\nbelongshow\030\023 \001(\005B\"\302\377\024\036"
    "\346\200\252\347\211\251\346\216\211\350\220\275\345\275\222\345\261\236\346\230\257\345\220\246\346\230\276\347\244\272\022!\n\013dropGr"
    "oupID\030\024 \001(\005B\014\302\377\024\010\346\216\211\350\220\275ID\022-\n\rharmdrop_ty"
    "pe\030\025 \001(\005B\026\302\377\024\022\344\274\244\345\256\263\350\256\241\347\256\227\346\226\271\345\274\217\022.\n\010joni"
    "nper\030\026 \001(\005B\034\302\377\024\030\345\217\202\344\270\216\345\245\226\346\234\200\344\275\216\347\231\276\345\210\206\346\257\224"
    "\022\"\n\010btnRange\030\027 \001(\005B\020\302\377\024\014\346\214\211\351\222\256\350\214\203\345\233\264\022\033\n\005"
    "btnId\030\030 \001(\003B\014\302\377\024\010\346\214\211\351\222\256ID\022\036\n\ndrivePoint\030"
    "\031 \001(\005B\n\302\377\024\006\346\200\222\346\260\224\022\036\n\010corpseID\030\032 \001(\005B\014\302\377\024"
    "\010\345\260\270\344\275\223ID\"T\n\024Sheet_monstermonster\022<\n\023mon"
    "stermonster_List\030\001 \003(\0132\030.proto_ff.monste"
    "rmonsterB\005\210\301\024\310\001\"-\n\027monsterdisplayskillDe"
    "sc\022\022\n\002id\030\001 \001(\003B\006\302\377\024\002id\"\256\003\n\016monsterdispla"
    "y\022(\n\tdisplayID\030\001 \001(\003B\025\302\377\024\021\350\265\204\346\272\220\344\270\216\350\241\250\347\216"
    "\260ID\0220\n\rmodelOffsetsX\030\002 \001(\005B\031\302\377\024\025UI\346\250\241\345\236\213"
    "X\345\235\220\346\240\207\345\201\217\347\247\273\0220\n\rmodelOffsetsY\030\003 \001(\005B\031\302\377"
    "\024\025UI\346\250\241\345\236\213Y\345\235\220\346\240\207\345\201\217\347\247\273\022,\n\nmodelScale\030\004 "
    "\001(\005B\030\302\377\024\024UI\346\250\241\345\236\213\347\274\251\346\224\276\346\257\224\344\276\213\022+\n\013modelRa"
    "dius\030\005 \001(\005B\026\302\377\024\022\346\200\252\347\211\251\346\250\241\345\236\213\345\215\212\345\276\204\022$\n\npa"
    "thRadius\030\006 \001(\005B\020\302\377\024\014\345\257\273\350\267\257\345\215\212\345\276\204\022)\n\017coll"
    "isionRadius\030\007 \001(\005B\020\302\377\024\014\345\257\273\350\267\257\345\215\212\345\276\204\022 \n\006r"
    "Speed\030\010 \001(\005B\020\302\377\024\014\350\267\221\346\255\245\351\200\237\345\272\246\022@\n\005skill\030\t"
    " \003(\0132!.proto_ff.monsterdisplayskillDescB"
    "\016\302\377\024\006\346\212\200\350\203\275\210\301\024\007\"S\n\024Sheet_monsterdisplay\022"
    ";\n\023monsterdisplay_List\030\001 \003(\0132\030.proto_ff."
    "monsterdisplayB\004\210\301\024P\"\254\025\n\014monstervalue\022\030\n"
    "\002ID\030\001 \001(\003B\014\302\377\024\010\346\225\260\345\200\274ID\022\036\n\004type\030\002 \001(\005B\020\302"
    "\377\024\014\346\200\252\347\211\251\347\261\273\345\236\213\022#\n\tmonsterLV\030\003 \001(\005B\020\302\377\024\014"
    "\346\200\252\347\211\251\347\255\211\347\272\247\022 \n\006max_Hp\030\004 \001(\003B\020\302\377\024\014\346\234\200\345\244\247"
    "\347\224\237\345\221\275\022\027\n\003atk\030\005 \001(\003B\n\302\377\024\006\346\224\273\345\207\273\022\027\n\003def\030\006"
    " \001(\003B\n\302\377\024\006\351\230\262\345\276\241\022\035\n\tbrk_Armor\030\007 \001(\003B\n\302\377\024"
    "\006\347\240\264\347\224\262\022\"\n\010five_Dam\030\010 \001(\003B\020\302\377\024\014\344\272\224\350\241\214\344\274\244"
    "\345\256\263\022$\n\nfive_Armor\030\t \001(\003B\020\302\377\024\014\344\272\224\350\241\214\346\212\244\347\224"
    "\262\022$\n\nthump_Rate\030\n \001(\003B\020\302\377\024\014\351\207\215\345\207\273\345\207\240\347\216\207\022"
    "&\n\014thump_Resist\030\013 \001(\003B\020\302\377\024\014\351\207\215\345\207\273\346\212\265\346\212\227\022"
    "\027\n\003sky\030\014 \001(\003B\n\302\377\024\006\345\244\251\351\201\223\022!\n\007sky_Dam\030\r \001("
    "\003B\020\302\377\024\014\345\244\251\351\201\223\344\274\244\345\256\263\022)\n\017sky_Redu_Resist\030\016"
    " \001(\003B\020\302\377\024\014\345\244\251\351\201\223\345\207\217\346\212\227\022$\n\nsky_Resist\030\017 \001"
    "(\003B\020\302\377\024\014\345\244\251\351\201\223\346\212\227\346\200\247\022\034\n\010kill_God\030\020 \001(\003B\n"
    "\302\377\024\006\345\274\221\347\245\236\022\034\n\010god_Body\030\021 \001(\003B\n\302\377\024\006\347\245\236\344\275\223"
    "\022%\n\013mortal_Rate\030\022 \001(\003B\020\302\377\024\014\345\207\241\345\205\215\345\207\240\347\216\207\022"
    "\'\n\rmortal_Resist\030\023 \001(\003B\020\302\377\024\014\345\207\241\345\205\215\346\212\227\346\200\247"
    "\022$\n\nfairy_Rate\030\024 \001(\003B\020\302\377\024\014\344\273\231\345\205\215\345\207\240\347\216\207\022&"
    "\n\014fairy_Resist\030\025 \001(\003B\020\302\377\024\014\344\273\231\345\205\215\346\212\227\346\200\247\022\""
    "\n\010god_Rate\030\026 \001(\003B\020\302\377\024\014\347\245\236\345\205\215\345\207\240\347\216\207\022$\n\ngo"
    "d_Resist\030\027 \001(\003B\020\302\377\024\014\347\245\236\345\205\215\346\212\227\346\200\247\022#\n\tcrit"
    "_Rate\030\030 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\345\207\240\347\216\207\022)\n\017crit_re"
    "sit_Rate\030\031 \001(\003B\020\302\377\024\014\346\212\227\346\232\264\345\207\240\347\216\207\022\"\n\010crit"
    "_Dam\030\032 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\344\274\244\345\256\263\022#\n\tcrit_Red"
    "u\030\033 \001(\003B\020\302\377\024\014\346\232\264\345\207\273\345\207\217\345\205\215\022%\n\013batter_Rate"
    "\030\034 \001(\003B\020\302\377\024\014\350\277\236\345\207\273\345\207\240\347\216\207\022\'\n\rbatter_Resis"
    "t\030\035 \001(\003B\020\302\377\024\014\350\277\236\345\207\273\346\212\265\346\212\227\022$\n\nbatter_Dam\030"
    "\036 \001(\003B\020\302\377\024\014\350\277\236\345\207\273\344\274\244\345\256\263\022%\n\013batter_Redu\030\037"
    " \001(\003B\020\302\377\024\014\350\277\236\345\207\273\345\207\217\345\205\215\022&\n\014brkdown_Rate\030 "
    " \001(\003B\020\302\377\024\014\345\207\273\347\251\277\345\207\240\347\216\207\022(\n\016brkdown_Resist"
    "\030! \001(\003B\020\302\377\024\014\345\207\273\347\251\277\346\212\265\346\212\227\022!\n\007dam_Add\030\" \001("
    "\003B\020\302\377\024\014\344\274\244\345\256\263\345\212\240\346\210\220\022\"\n\010dam_Redu\030# \001(\003B\020\302"
    "\377\024\014\344\274\244\345\256\263\345\207\217\345\205\215\022!\n\007all_Add\030$ \001(\003B\020\302\377\024\014\345\205"
    "\250\350\203\275\345\242\236\344\274\244\022\"\n\010all_Redu\030% \001(\003B\020\302\377\024\014\345\205\250\350\203\275"
    "\345\207\217\345\205\215\022#\n\tskill_Add\030& \001(\003B\020\302\377\024\014\346\212\200\350\203\275\345\242\236"
    "\344\274\244\022$\n\nskill_Redu\030\' \001(\003B\020\302\377\024\014\346\212\200\350\203\275\345\207\217\344\274"
    "\244\022%\n\013rebound_Dam\030( \001(\003B\020\302\377\024\014\345\217\215\345\274\271\344\274\244\345\256\263"
    "\022\"\n\010hp_Steal\030) \001(\003B\020\302\377\024\014\347\224\237\345\221\275\347\252\203\345\217\226\022$\n\n"
    "dodge_Rate\030* \001(\003B\020\302\377\024\014\351\227\252\351\201\277\345\207\240\347\216\207\022\"\n\010hi"
    "t_Rate\030+ \001(\003B\020\302\377\024\014\345\221\275\344\270\255\345\207\240\347\216\207\022\"\n\010blk_Ra"
    "te\030, \001(\003B\020\302\377\024\014\346\240\274\346\214\241\345\207\240\347\216\207\022&\n\014brk_blk_Ra"
    "te\030- \001(\003B\020\302\377\024\014\347\240\264\346\241\243\345\207\240\347\216\207\022\"\n\010blk_Free\030."
    " \001(\003B\020\302\377\024\014\346\240\274\346\214\241\345\205\215\344\274\244\022$\n\nblk_Pierce\030/ \001"
    "(\003B\020\302\377\024\014\346\240\274\346\214\241\347\251\277\351\200\217\022#\n\trel_Armor\0300 \001(\003B"
    "\020\302\377\024\014\347\234\237\345\256\236\346\212\244\347\224\262\022!\n\007rel_Dam\0301 \001(\003B\020\302\377\024\014"
    "\347\234\237\345\256\236\344\274\244\345\256\263\022%\n\013five_Resist\0302 \001(\003B\020\302\377\024\014\344"
    "\272\224\350\241\214\346\212\227\346\200\247\022*\n\020five_resist_Redu\0303 \001(\003B\020\302"
    "\377\024\014\344\272\224\350\241\214\345\207\217\346\212\227\022\"\n\010fire_Add\0304 \001(\003B\020\302\377\024\014\347"
    "\246\273\347\201\253\345\242\236\344\274\244\022#\n\tfire_Redu\0305 \001(\003B\020\302\377\024\014\347\246\273\347"
    "\201\253\345\207\217\344\274\244\022!\n\007ice_Add\0306 \001(\003B\020\302\377\024\014\347\216\204\345\206\260\345\242\236"
    "\344\274\244\022\"\n\010ice_Redu\0307 \001(\003B\020\302\377\024\014\347\216\204\345\206\260\345\207\217\344\274\244\022"
    "%\n\013thunder_Add\0308 \001(\003B\020\302\377\024\014\351\233\267\347\275\232\345\242\236\344\274\244\022%"
    "\n\013thunder_Rdu\0309 \001(\003B\020\302\377\024\014\351\233\267\347\275\232\345\207\217\344\274\244\022$\n"
    "\nplayer_Add\030: \001(\003B\020\302\377\024\014\347\216\251\345\256\266\345\207\217\344\274\244\022%\n\013p"
    "layer_Redu\030; \001(\003B\020\302\377\024\014\347\216\251\345\256\266\345\242\236\344\274\244\022$\n\nle"
    "ader_Add\030< \001(\003B\020\302\377\024\014\351\246\226\351\242\206\345\207\217\344\274\244\022%\n\013lead"
    "er_Redu\030= \001(\003B\020\302\377\024\014\351\246\226\351\242\206\345\242\236\344\274\244\022!\n\007mon_A"
    "dd\030> \001(\003B\020\302\377\024\014\346\200\252\347\211\251\345\207\217\344\274\244\022\"\n\010mon_Redu\030\?"
    " \001(\003B\020\302\377\024\014\346\200\252\347\211\251\345\242\236\344\274\244\022\"\n\010var_Redu\030@ \001(\003"
    "B\020\302\377\024\014\345\217\230\350\272\253\345\207\217\344\274\244\022!\n\007var_Add\030A \001(\003B\020\302\377\024"
    "\014\345\217\230\350\272\253\345\242\236\344\274\244\022(\n\016unusual_Resist\030B \001(\003B\020\302"
    "\377\024\014\345\274\202\345\270\270\346\212\265\346\212\227\022%\n\013unusual_Hit\030C \001(\003B\020\302\377"
    "\024\014\345\274\202\345\270\270\345\221\275\344\270\255\022$\n\nhp_Recover\030D \001(\003B\020\302\377\024\014"
    "\347\224\237\345\221\275\346\201\242\345\244\215\022%\n\013unusual_Add\030E \001(\003B\020\302\377\024\014\345"
    "\274\202\345\270\270\345\242\236\344\274\244\022%\n\013fix_Recover\030F \001(\003B\020\302\377\024\014\345\233"
    "\272\345\256\232\345\233\236\345\244\215\022%\n\013high_hp_Add\030G \001(\003B\020\302\377\024\014\351\253\230"
    "\350\241\200\345\242\236\344\274\244\022(\n\016recover_hp_Add\030H \001(\003B\020\302\377\024\014\345"
    "\233\236\350\241\200\345\242\236\346\225\210\022\"\n\010week_Add\030I \001(\003B\020\302\377\024\014\350\231\232\345\274"
    "\261\345\242\236\344\274\244\022\032\n\006shield\030J \001(\003B\n\302\377\024\006\346\212\244\347\233\276\"N\n\022S"
    "heet_monstervalue\0228\n\021monstervalue_List\030\001"
    " \003(\0132\026.proto_ff.monstervalueB\005\210\301\024\310\001\"\362\025\n\021"
    "monstervalueParam\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\"\n"
    "\010P_max_Hp\030\002 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\347\224\237\345\221\275\022\031\n\005P_a"
    "tk\030\003 \001(\005B\n\302\377\024\006\346\224\273\345\207\273\022\031\n\005P_def\030\004 \001(\005B\n\302\377\024"
    "\006\351\230\262\345\276\241\022\037\n\013P_brk_Armor\030\005 \001(\005B\n\302\377\024\006\347\240\264\347\224\262"
    "\022$\n\nP_five_Dam\030\006 \001(\005B\020\302\377\024\014\344\272\224\350\241\214\344\274\244\345\256\263\022&"
    "\n\014P_five_Armor\030\007 \001(\005B\020\302\377\024\014\344\272\224\350\241\214\346\212\244\347\224\262\022&"
    "\n\014P_thump_Rate\030\010 \001(\005B\020\302\377\024\014\351\207\215\345\207\273\345\207\240\347\216\207\022("
    "\n\016P_thump_Resist\030\t \001(\005B\020\302\377\024\014\351\207\215\345\207\273\346\212\265\346\212\227"
    "\022\031\n\005P_sky\030\n \001(\005B\n\302\377\024\006\345\244\251\351\201\223\022#\n\tP_sky_Dam"
    "\030\013 \001(\005B\020\302\377\024\014\345\244\251\351\201\223\344\274\244\345\256\263\022+\n\021P_sky_Redu_R"
    "esist\030\014 \001(\005B\020\302\377\024\014\345\244\251\351\201\223\345\207\217\346\212\227\022&\n\014P_sky_R"
    "esist\030\r \001(\005B\020\302\377\024\014\345\244\251\351\201\223\346\212\227\346\200\247\022\036\n\nP_kill_"
    "God\030\016 \001(\005B\n\302\377\024\006\345\274\221\347\245\236\022\036\n\nP_god_Body\030\017 \001("
    "\005B\n\302\377\024\006\347\245\236\344\275\223\022\'\n\rP_mortal_Rate\030\020 \001(\005B\020\302\377"
    "\024\014\345\207\241\345\205\215\345\207\240\347\216\207\022)\n\017P_mortal_Resist\030\021 \001(\005B"
    "\020\302\377\024\014\345\207\241\345\205\215\346\212\227\346\200\247\022&\n\014P_fairy_Rate\030\022 \001(\005B"
    "\020\302\377\024\014\344\273\231\345\205\215\345\207\240\347\216\207\022(\n\016P_fairy_Resist\030\023 \001("
    "\005B\020\302\377\024\014\344\273\231\345\205\215\346\212\227\346\200\247\022$\n\nP_god_Rate\030\024 \001(\005B"
    "\020\302\377\024\014\347\245\236\345\205\215\345\207\240\347\216\207\022&\n\014P_god_Resist\030\025 \001(\005B"
    "\020\302\377\024\014\347\245\236\345\205\215\346\212\227\346\200\247\022%\n\013P_crit_Rate\030\026 \001(\005B\020"
    "\302\377\024\014\346\232\264\345\207\273\345\207\240\347\216\207\022+\n\021P_crit_resit_Rate\030\027 "
    "\001(\005B\020\302\377\024\014\346\212\227\346\232\264\345\207\240\347\216\207\022$\n\nP_crit_Dam\030\030 \001("
    "\005B\020\302\377\024\014\346\232\264\345\207\273\344\274\244\345\256\263\022%\n\013P_crit_Redu\030\031 \001(\005"
    "B\020\302\377\024\014\346\232\264\345\207\273\345\207\217\345\205\215\022\'\n\rP_batter_Rate\030\032 \001("
    "\005B\020\302\377\024\014\350\277\236\345\207\273\345\207\240\347\216\207\022)\n\017P_batter_Resist\030\033"
    " \001(\005B\020\302\377\024\014\350\277\236\345\207\273\346\212\265\346\212\227\022&\n\014P_batter_Dam\030\034"
    " \001(\005B\020\302\377\024\014\350\277\236\345\207\273\344\274\244\345\256\263\022\'\n\rP_batter_Redu\030"
    "\035 \001(\005B\020\302\377\024\014\350\277\236\345\207\273\345\207\217\345\205\215\022(\n\016P_brkdown_Rat"
    "e\030\036 \001(\005B\020\302\377\024\014\345\207\273\347\251\277\345\207\240\347\216\207\022*\n\020P_brkdown_R"
    "esist\030\037 \001(\005B\020\302\377\024\014\345\207\273\347\251\277\346\212\265\346\212\227\022#\n\tP_dam_A"
    "dd\030  \001(\005B\020\302\377\024\014\344\274\244\345\256\263\345\212\240\346\210\220\022$\n\nP_dam_Redu"
    "\030! \001(\005B\020\302\377\024\014\344\274\244\345\256\263\345\207\217\345\205\215\022#\n\tP_all_Add\030\" "
    "\001(\005B\020\302\377\024\014\345\205\250\350\203\275\345\242\236\344\274\244\022$\n\nP_all_Redu\030# \001("
    "\005B\020\302\377\024\014\345\205\250\350\203\275\345\207\217\345\205\215\022%\n\013P_skill_Add\030$ \001(\005"
    "B\020\302\377\024\014\346\212\200\350\203\275\345\242\236\344\274\244\022&\n\014P_skill_Redu\030% \001(\005"
    "B\020\302\377\024\014\346\212\200\350\203\275\345\207\217\344\274\244\022\'\n\rP_rebound_Dam\030& \001("
    "\005B\020\302\377\024\014\345\217\215\345\274\271\344\274\244\345\256\263\022$\n\nP_hp_Steal\030\' \001(\005B"
    "\020\302\377\024\014\347\224\237\345\221\275\347\252\203\345\217\226\022&\n\014P_dodge_Rate\030( \001(\005B"
    "\020\302\377\024\014\351\227\252\351\201\277\345\207\240\347\216\207\022$\n\nP_hit_Rate\030) \001(\005B\020\302"
    "\377\024\014\345\221\275\344\270\255\345\207\240\347\216\207\022$\n\nP_blk_Rate\030* \001(\005B\020\302\377\024"
    "\014\346\240\274\346\214\241\345\207\240\347\216\207\022(\n\016P_brk_blk_Rate\030+ \001(\005B\020\302"
    "\377\024\014\347\240\264\346\241\243\345\207\240\347\216\207\022$\n\nP_blk_Free\030, \001(\005B\020\302\377\024"
    "\014\346\240\274\346\214\241\345\205\215\344\274\244\022&\n\014P_blk_Pierce\030- \001(\005B\020\302\377\024"
    "\014\346\240\274\346\214\241\347\251\277\351\200\217\022%\n\013P_rel_Armor\030. \001(\005B\020\302\377\024\014"
    "\347\234\237\345\256\236\346\212\244\347\224\262\022#\n\tP_rel_Dam\030/ \001(\005B\020\302\377\024\014\347\234\237"
    "\345\256\236\344\274\244\345\256\263\022\'\n\rP_five_Resist\0300 \001(\005B\020\302\377\024\014\344\272"
    "\224\350\241\214\346\212\227\346\200\247\022,\n\022P_five_resist_Redu\0301 \001(\005B\020"
    "\302\377\024\014\344\272\224\350\241\214\345\207\217\346\212\227\022$\n\nP_fire_Add\0302 \001(\005B\020\302\377"
    "\024\014\347\246\273\347\201\253\345\242\236\344\274\244\022%\n\013P_fire_Redu\0303 \001(\005B\020\302\377\024"
    "\014\347\246\273\347\201\253\345\207\217\344\274\244\022#\n\tP_ice_Add\0304 \001(\005B\020\302\377\024\014\347\216"
    "\204\345\206\260\345\242\236\344\274\244\022$\n\nP_ice_Redu\0305 \001(\005B\020\302\377\024\014\347\216\204\345"
    "\206\260\345\207\217\344\274\244\022\'\n\rP_thunder_Add\0306 \001(\005B\020\302\377\024\014\351\233\267"
    "\347\275\232\345\242\236\344\274\244\022\'\n\rP_thunder_Rdu\0307 \001(\005B\020\302\377\024\014\351\233"
    "\267\347\275\232\345\207\217\344\274\244\022&\n\014P_player_Add\0308 \001(\005B\020\302\377\024\014\347\216"
    "\251\345\256\266\345\207\217\344\274\244\022\'\n\rP_player_Redu\0309 \001(\005B\020\302\377\024\014\347"
    "\216\251\345\256\266\345\242\236\344\274\244\022&\n\014P_leader_Add\030: \001(\005B\020\302\377\024\014\351"
    "\246\226\351\242\206\345\207\217\344\274\244\022\'\n\rP_leader_Redu\030; \001(\005B\020\302\377\024\014"
    "\351\246\226\351\242\206\345\242\236\344\274\244\022#\n\tP_mon_Add\030< \001(\005B\020\302\377\024\014\346\200\252"
    "\347\211\251\345\207\217\344\274\244\022$\n\nP_mon_Redu\030= \001(\005B\020\302\377\024\014\346\200\252\347\211"
    "\251\345\242\236\344\274\244\022$\n\nP_var_Redu\030> \001(\005B\020\302\377\024\014\345\217\230\350\272\253\345"
    "\207\217\344\274\244\022#\n\tP_var_Add\030\? \001(\005B\020\302\377\024\014\345\217\230\350\272\253\345\242\236\344"
    "\274\244\022*\n\020P_unusual_Resist\030@ \001(\005B\020\302\377\024\014\345\274\202\345\270\270"
    "\346\212\265\346\212\227\022\'\n\rP_unusual_Hit\030A \001(\005B\020\302\377\024\014\345\274\202\345\270"
    "\270\345\221\275\344\270\255\022&\n\014P_hp_Recover\030B \001(\005B\020\302\377\024\014\347\224\237\345\221"
    "\275\346\201\242\345\244\215\022\'\n\rP_unusual_Add\030C \001(\005B\020\302\377\024\014\345\274\202\345"
    "\270\270\345\242\236\344\274\244\022\'\n\rP_fix_Recover\030D \001(\005B\020\302\377\024\014\345\233\272"
    "\345\256\232\345\233\236\345\244\215\022\'\n\rP_high_hp_Add\030E \001(\005B\020\302\377\024\014\351\253"
    "\230\350\241\200\345\242\236\344\274\244\022*\n\020P_recover_hp_Add\030F \001(\005B\020\302\377"
    "\024\014\345\233\236\350\241\200\345\242\236\346\225\210\022$\n\nP_week_Add\030G \001(\005B\020\302\377\024\014"
    "\350\231\232\345\274\261\345\242\236\344\274\244\022\032\n\006shield\030H \001(\003B\n\302\377\024\006\346\212\244\347\233\276"
    "\"\\\n\027Sheet_monstervalueParam\022A\n\026monsterva"
    "lueParam_List\030\001 \003(\0132\033.proto_ff.monsterva"
    "lueParamB\004\210\301\024\024\"\240\001\n\013monsterdrop\022\033\n\002id\030\001 \001"
    "(\005B\017\302\377\024\013\346\216\211\350\220\275\345\214\205ID\022\034\n\005group\030\002 \001(\005B\r\302\377\024\t"
    "\346\216\211\350\220\275\347\273\204\022\032\n\003own\030\003 \001(\005B\r\302\377\024\t\345\275\222\345\261\236\346\235\203\022\036\n"
    "\004type\030\004 \001(\005B\020\302\377\024\014\346\216\211\350\220\275\346\226\271\345\274\217\022\032\n\005boxID\030\005"
    " \003(\003B\013\302\377\024\003box\210\301\024\005\"J\n\021Sheet_monsterdrop\0225"
    "\n\020monsterdrop_List\030\001 \003(\0132\025.proto_ff.mons"
    "terdropB\004\210\301\024\024", 7733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monster.proto", &protobuf_RegisterTypes);
  monstermonster::default_instance_ = new monstermonster();
  Sheet_monstermonster::default_instance_ = new Sheet_monstermonster();
  monsterdisplayskillDesc::default_instance_ = new monsterdisplayskillDesc();
  monsterdisplay::default_instance_ = new monsterdisplay();
  Sheet_monsterdisplay::default_instance_ = new Sheet_monsterdisplay();
  monstervalue::default_instance_ = new monstervalue();
  Sheet_monstervalue::default_instance_ = new Sheet_monstervalue();
  monstervalueParam::default_instance_ = new monstervalueParam();
  Sheet_monstervalueParam::default_instance_ = new Sheet_monstervalueParam();
  monsterdrop::default_instance_ = new monsterdrop();
  Sheet_monsterdrop::default_instance_ = new Sheet_monsterdrop();
  monstermonster::default_instance_->InitAsDefaultInstance();
  Sheet_monstermonster::default_instance_->InitAsDefaultInstance();
  monsterdisplayskillDesc::default_instance_->InitAsDefaultInstance();
  monsterdisplay::default_instance_->InitAsDefaultInstance();
  Sheet_monsterdisplay::default_instance_->InitAsDefaultInstance();
  monstervalue::default_instance_->InitAsDefaultInstance();
  Sheet_monstervalue::default_instance_->InitAsDefaultInstance();
  monstervalueParam::default_instance_->InitAsDefaultInstance();
  Sheet_monstervalueParam::default_instance_->InitAsDefaultInstance();
  monsterdrop::default_instance_->InitAsDefaultInstance();
  Sheet_monsterdrop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_monster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_monster_2eproto {
  StaticDescriptorInitializer_monster_2eproto() {
    protobuf_AddDesc_monster_2eproto();
  }
} static_descriptor_initializer_monster_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int monstermonster::kMonsterIDFieldNumber;
const int monstermonster::kMonsterNameFieldNumber;
const int monstermonster::kFunctionTypeFieldNumber;
const int monstermonster::kFunctionValueFieldNumber;
const int monstermonster::kProfessionFieldNumber;
const int monstermonster::kDamageAddTypeFieldNumber;
const int monstermonster::kMonsterLVFieldNumber;
const int monstermonster::kDroplimitFieldNumber;
const int monstermonster::kDisplayIDFieldNumber;
const int monstermonster::kValuetypeFieldNumber;
const int monstermonster::kValueParamFieldNumber;
const int monstermonster::kAiIdFieldNumber;
const int monstermonster::kHpSectionNumFieldNumber;
const int monstermonster::kBreedProbFieldNumber;
const int monstermonster::kBreedMonIDFieldNumber;
const int monstermonster::kBreedMonLiveFieldNumber;
const int monstermonster::kItemCostFieldNumber;
const int monstermonster::kIsBornActionOnFieldNumber;
const int monstermonster::kBelongshowFieldNumber;
const int monstermonster::kDropGroupIDFieldNumber;
const int monstermonster::kHarmdropTypeFieldNumber;
const int monstermonster::kJoninperFieldNumber;
const int monstermonster::kBtnRangeFieldNumber;
const int monstermonster::kBtnIdFieldNumber;
const int monstermonster::kDrivePointFieldNumber;
const int monstermonster::kCorpseIDFieldNumber;
#endif  // !_MSC_VER

monstermonster::monstermonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monstermonster::InitAsDefaultInstance() {
}

monstermonster::monstermonster(const monstermonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monstermonster::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = GOOGLE_LONGLONG(0);
  monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  functiontype_ = 0;
  functionvalue_ = GOOGLE_LONGLONG(0);
  profession_ = 0;
  damageaddtype_ = 0;
  monsterlv_ = 0;
  droplimit_ = 0;
  displayid_ = GOOGLE_LONGLONG(0);
  valuetype_ = GOOGLE_LONGLONG(0);
  valueparam_ = 0;
  aiid_ = GOOGLE_LONGLONG(0);
  hpsectionnum_ = 0;
  breedprob_ = 0;
  breedmonid_ = GOOGLE_LONGLONG(0);
  breedmonlive_ = 0;
  itemcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbornactionon_ = 0;
  belongshow_ = 0;
  dropgroupid_ = 0;
  harmdrop_type_ = 0;
  joninper_ = 0;
  btnrange_ = 0;
  btnid_ = GOOGLE_LONGLONG(0);
  drivepoint_ = 0;
  corpseid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monstermonster::~monstermonster() {
  SharedDtor();
}

void monstermonster::SharedDtor() {
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete monstername_;
  }
  if (itemcost_ != &::google::protobuf::internal::kEmptyString) {
    delete itemcost_;
  }
  if (this != default_instance_) {
  }
}

void monstermonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monstermonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monstermonster_descriptor_;
}

const monstermonster& monstermonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monstermonster* monstermonster::default_instance_ = NULL;

monstermonster* monstermonster::New() const {
  return new monstermonster;
}

void monstermonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = GOOGLE_LONGLONG(0);
    if (has_monstername()) {
      if (monstername_ != &::google::protobuf::internal::kEmptyString) {
        monstername_->clear();
      }
    }
    functiontype_ = 0;
    functionvalue_ = GOOGLE_LONGLONG(0);
    profession_ = 0;
    damageaddtype_ = 0;
    monsterlv_ = 0;
    droplimit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    displayid_ = GOOGLE_LONGLONG(0);
    valuetype_ = GOOGLE_LONGLONG(0);
    valueparam_ = 0;
    aiid_ = GOOGLE_LONGLONG(0);
    hpsectionnum_ = 0;
    breedprob_ = 0;
    breedmonid_ = GOOGLE_LONGLONG(0);
    breedmonlive_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_itemcost()) {
      if (itemcost_ != &::google::protobuf::internal::kEmptyString) {
        itemcost_->clear();
      }
    }
    isbornactionon_ = 0;
    belongshow_ = 0;
    dropgroupid_ = 0;
    harmdrop_type_ = 0;
    joninper_ = 0;
    btnrange_ = 0;
    btnid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    drivepoint_ = 0;
    corpseid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monstermonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 monsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsterName;
        break;
      }

      // optional string monsterName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monstername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monstername().data(), this->monstername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_functionType;
        break;
      }

      // optional int32 functionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functiontype_)));
          set_has_functiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_functionValue;
        break;
      }

      // optional int64 functionValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &functionvalue_)));
          set_has_functionvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional int32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_damageAddType;
        break;
      }

      // optional int32 damageAddType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageAddType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damageaddtype_)));
          set_has_damageaddtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_monsterLV;
        break;
      }

      // optional int32 monsterLV = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterlv_)));
          set_has_monsterlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_droplimit;
        break;
      }

      // optional int32 droplimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_droplimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &droplimit_)));
          set_has_droplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_displayID;
        break;
      }

      // optional int64 displayID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displayID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &displayid_)));
          set_has_displayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_valuetype;
        break;
      }

      // optional int64 valuetype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &valuetype_)));
          set_has_valuetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_valueParam;
        break;
      }

      // optional int32 valueParam = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valueparam_)));
          set_has_valueparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_aiId;
        break;
      }

      // optional int64 aiId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aiid_)));
          set_has_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hpSectionNum;
        break;
      }

      // optional int32 hpSectionNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpSectionNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpsectionnum_)));
          set_has_hpsectionnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_breedProb;
        break;
      }

      // optional int32 breedProb = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breedProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breedprob_)));
          set_has_breedprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_breedMonID;
        break;
      }

      // optional int64 breedMonID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breedMonID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &breedmonid_)));
          set_has_breedmonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_breedMonLive;
        break;
      }

      // optional int32 breedMonLive = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breedMonLive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breedmonlive_)));
          set_has_breedmonlive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_itemCost;
        break;
      }

      // optional string itemCost = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemcost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemcost().data(), this->itemcost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isBornActionOn;
        break;
      }

      // optional int32 isBornActionOn = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBornActionOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbornactionon_)));
          set_has_isbornactionon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_belongshow;
        break;
      }

      // optional int32 belongshow = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belongshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belongshow_)));
          set_has_belongshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_dropGroupID;
        break;
      }

      // optional int32 dropGroupID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropgroupid_)));
          set_has_dropgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_harmdrop_type;
        break;
      }

      // optional int32 harmdrop_type = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harmdrop_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &harmdrop_type_)));
          set_has_harmdrop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_joninper;
        break;
      }

      // optional int32 joninper = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joninper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joninper_)));
          set_has_joninper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_btnRange;
        break;
      }

      // optional int32 btnRange = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btnRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btnrange_)));
          set_has_btnrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_btnId;
        break;
      }

      // optional int64 btnId = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btnId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &btnid_)));
          set_has_btnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_drivePoint;
        break;
      }

      // optional int32 drivePoint = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drivePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drivepoint_)));
          set_has_drivepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_corpseID;
        break;
      }

      // optional int32 corpseID = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corpseID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &corpseid_)));
          set_has_corpseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monstermonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 monsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->monsterid(), output);
  }

  // optional string monsterName = 2;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monstername().data(), this->monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->monstername(), output);
  }

  // optional int32 functionType = 3;
  if (has_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->functiontype(), output);
  }

  // optional int64 functionValue = 4;
  if (has_functionvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->functionvalue(), output);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  // optional int32 damageAddType = 6;
  if (has_damageaddtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->damageaddtype(), output);
  }

  // optional int32 monsterLV = 7;
  if (has_monsterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->monsterlv(), output);
  }

  // optional int32 droplimit = 8;
  if (has_droplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->droplimit(), output);
  }

  // optional int64 displayID = 9;
  if (has_displayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->displayid(), output);
  }

  // optional int64 valuetype = 10;
  if (has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->valuetype(), output);
  }

  // optional int32 valueParam = 11;
  if (has_valueparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->valueparam(), output);
  }

  // optional int64 aiId = 12;
  if (has_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->aiid(), output);
  }

  // optional int32 hpSectionNum = 13;
  if (has_hpsectionnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hpsectionnum(), output);
  }

  // optional int32 breedProb = 14;
  if (has_breedprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->breedprob(), output);
  }

  // optional int64 breedMonID = 15;
  if (has_breedmonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->breedmonid(), output);
  }

  // optional int32 breedMonLive = 16;
  if (has_breedmonlive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->breedmonlive(), output);
  }

  // optional string itemCost = 17;
  if (has_itemcost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemcost().data(), this->itemcost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->itemcost(), output);
  }

  // optional int32 isBornActionOn = 18;
  if (has_isbornactionon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->isbornactionon(), output);
  }

  // optional int32 belongshow = 19;
  if (has_belongshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->belongshow(), output);
  }

  // optional int32 dropGroupID = 20;
  if (has_dropgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->dropgroupid(), output);
  }

  // optional int32 harmdrop_type = 21;
  if (has_harmdrop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->harmdrop_type(), output);
  }

  // optional int32 joninper = 22;
  if (has_joninper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->joninper(), output);
  }

  // optional int32 btnRange = 23;
  if (has_btnrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->btnrange(), output);
  }

  // optional int64 btnId = 24;
  if (has_btnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->btnid(), output);
  }

  // optional int32 drivePoint = 25;
  if (has_drivepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->drivepoint(), output);
  }

  // optional int32 corpseID = 26;
  if (has_corpseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->corpseid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monstermonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 monsterID = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->monsterid(), target);
  }

  // optional string monsterName = 2;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monstername().data(), this->monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->monstername(), target);
  }

  // optional int32 functionType = 3;
  if (has_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->functiontype(), target);
  }

  // optional int64 functionValue = 4;
  if (has_functionvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->functionvalue(), target);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  // optional int32 damageAddType = 6;
  if (has_damageaddtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->damageaddtype(), target);
  }

  // optional int32 monsterLV = 7;
  if (has_monsterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->monsterlv(), target);
  }

  // optional int32 droplimit = 8;
  if (has_droplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->droplimit(), target);
  }

  // optional int64 displayID = 9;
  if (has_displayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->displayid(), target);
  }

  // optional int64 valuetype = 10;
  if (has_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->valuetype(), target);
  }

  // optional int32 valueParam = 11;
  if (has_valueparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->valueparam(), target);
  }

  // optional int64 aiId = 12;
  if (has_aiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->aiid(), target);
  }

  // optional int32 hpSectionNum = 13;
  if (has_hpsectionnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hpsectionnum(), target);
  }

  // optional int32 breedProb = 14;
  if (has_breedprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->breedprob(), target);
  }

  // optional int64 breedMonID = 15;
  if (has_breedmonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->breedmonid(), target);
  }

  // optional int32 breedMonLive = 16;
  if (has_breedmonlive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->breedmonlive(), target);
  }

  // optional string itemCost = 17;
  if (has_itemcost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemcost().data(), this->itemcost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->itemcost(), target);
  }

  // optional int32 isBornActionOn = 18;
  if (has_isbornactionon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->isbornactionon(), target);
  }

  // optional int32 belongshow = 19;
  if (has_belongshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->belongshow(), target);
  }

  // optional int32 dropGroupID = 20;
  if (has_dropgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->dropgroupid(), target);
  }

  // optional int32 harmdrop_type = 21;
  if (has_harmdrop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->harmdrop_type(), target);
  }

  // optional int32 joninper = 22;
  if (has_joninper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->joninper(), target);
  }

  // optional int32 btnRange = 23;
  if (has_btnrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->btnrange(), target);
  }

  // optional int64 btnId = 24;
  if (has_btnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->btnid(), target);
  }

  // optional int32 drivePoint = 25;
  if (has_drivepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->drivepoint(), target);
  }

  // optional int32 corpseID = 26;
  if (has_corpseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->corpseid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monstermonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 monsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

    // optional string monsterName = 2;
    if (has_monstername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monstername());
    }

    // optional int32 functionType = 3;
    if (has_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functiontype());
    }

    // optional int64 functionValue = 4;
    if (has_functionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->functionvalue());
    }

    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 damageAddType = 6;
    if (has_damageaddtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damageaddtype());
    }

    // optional int32 monsterLV = 7;
    if (has_monsterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterlv());
    }

    // optional int32 droplimit = 8;
    if (has_droplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->droplimit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 displayID = 9;
    if (has_displayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->displayid());
    }

    // optional int64 valuetype = 10;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->valuetype());
    }

    // optional int32 valueParam = 11;
    if (has_valueparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valueparam());
    }

    // optional int64 aiId = 12;
    if (has_aiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->aiid());
    }

    // optional int32 hpSectionNum = 13;
    if (has_hpsectionnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpsectionnum());
    }

    // optional int32 breedProb = 14;
    if (has_breedprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breedprob());
    }

    // optional int64 breedMonID = 15;
    if (has_breedmonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->breedmonid());
    }

    // optional int32 breedMonLive = 16;
    if (has_breedmonlive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breedmonlive());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string itemCost = 17;
    if (has_itemcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemcost());
    }

    // optional int32 isBornActionOn = 18;
    if (has_isbornactionon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbornactionon());
    }

    // optional int32 belongshow = 19;
    if (has_belongshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->belongshow());
    }

    // optional int32 dropGroupID = 20;
    if (has_dropgroupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropgroupid());
    }

    // optional int32 harmdrop_type = 21;
    if (has_harmdrop_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->harmdrop_type());
    }

    // optional int32 joninper = 22;
    if (has_joninper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joninper());
    }

    // optional int32 btnRange = 23;
    if (has_btnrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btnrange());
    }

    // optional int64 btnId = 24;
    if (has_btnid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->btnid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 drivePoint = 25;
    if (has_drivepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drivepoint());
    }

    // optional int32 corpseID = 26;
    if (has_corpseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->corpseid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monstermonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monstermonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monstermonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monstermonster::MergeFrom(const monstermonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monstername()) {
      set_monstername(from.monstername());
    }
    if (from.has_functiontype()) {
      set_functiontype(from.functiontype());
    }
    if (from.has_functionvalue()) {
      set_functionvalue(from.functionvalue());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_damageaddtype()) {
      set_damageaddtype(from.damageaddtype());
    }
    if (from.has_monsterlv()) {
      set_monsterlv(from.monsterlv());
    }
    if (from.has_droplimit()) {
      set_droplimit(from.droplimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_displayid()) {
      set_displayid(from.displayid());
    }
    if (from.has_valuetype()) {
      set_valuetype(from.valuetype());
    }
    if (from.has_valueparam()) {
      set_valueparam(from.valueparam());
    }
    if (from.has_aiid()) {
      set_aiid(from.aiid());
    }
    if (from.has_hpsectionnum()) {
      set_hpsectionnum(from.hpsectionnum());
    }
    if (from.has_breedprob()) {
      set_breedprob(from.breedprob());
    }
    if (from.has_breedmonid()) {
      set_breedmonid(from.breedmonid());
    }
    if (from.has_breedmonlive()) {
      set_breedmonlive(from.breedmonlive());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_itemcost()) {
      set_itemcost(from.itemcost());
    }
    if (from.has_isbornactionon()) {
      set_isbornactionon(from.isbornactionon());
    }
    if (from.has_belongshow()) {
      set_belongshow(from.belongshow());
    }
    if (from.has_dropgroupid()) {
      set_dropgroupid(from.dropgroupid());
    }
    if (from.has_harmdrop_type()) {
      set_harmdrop_type(from.harmdrop_type());
    }
    if (from.has_joninper()) {
      set_joninper(from.joninper());
    }
    if (from.has_btnrange()) {
      set_btnrange(from.btnrange());
    }
    if (from.has_btnid()) {
      set_btnid(from.btnid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_drivepoint()) {
      set_drivepoint(from.drivepoint());
    }
    if (from.has_corpseid()) {
      set_corpseid(from.corpseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monstermonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monstermonster::CopyFrom(const monstermonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monstermonster::IsInitialized() const {

  return true;
}

void monstermonster::Swap(monstermonster* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(monstername_, other->monstername_);
    std::swap(functiontype_, other->functiontype_);
    std::swap(functionvalue_, other->functionvalue_);
    std::swap(profession_, other->profession_);
    std::swap(damageaddtype_, other->damageaddtype_);
    std::swap(monsterlv_, other->monsterlv_);
    std::swap(droplimit_, other->droplimit_);
    std::swap(displayid_, other->displayid_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(valueparam_, other->valueparam_);
    std::swap(aiid_, other->aiid_);
    std::swap(hpsectionnum_, other->hpsectionnum_);
    std::swap(breedprob_, other->breedprob_);
    std::swap(breedmonid_, other->breedmonid_);
    std::swap(breedmonlive_, other->breedmonlive_);
    std::swap(itemcost_, other->itemcost_);
    std::swap(isbornactionon_, other->isbornactionon_);
    std::swap(belongshow_, other->belongshow_);
    std::swap(dropgroupid_, other->dropgroupid_);
    std::swap(harmdrop_type_, other->harmdrop_type_);
    std::swap(joninper_, other->joninper_);
    std::swap(btnrange_, other->btnrange_);
    std::swap(btnid_, other->btnid_);
    std::swap(drivepoint_, other->drivepoint_);
    std::swap(corpseid_, other->corpseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monstermonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monstermonster_descriptor_;
  metadata.reflection = monstermonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_monstermonster::kMonstermonsterListFieldNumber;
#endif  // !_MSC_VER

Sheet_monstermonster::Sheet_monstermonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_monstermonster::InitAsDefaultInstance() {
}

Sheet_monstermonster::Sheet_monstermonster(const Sheet_monstermonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_monstermonster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_monstermonster::~Sheet_monstermonster() {
  SharedDtor();
}

void Sheet_monstermonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_monstermonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_monstermonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_monstermonster_descriptor_;
}

const Sheet_monstermonster& Sheet_monstermonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

Sheet_monstermonster* Sheet_monstermonster::default_instance_ = NULL;

Sheet_monstermonster* Sheet_monstermonster::New() const {
  return new Sheet_monstermonster;
}

void Sheet_monstermonster::Clear() {
  monstermonster_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_monstermonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.monstermonster monstermonster_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monstermonster_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monstermonster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monstermonster_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_monstermonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.monstermonster monstermonster_List = 1;
  for (int i = 0; i < this->monstermonster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monstermonster_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_monstermonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.monstermonster monstermonster_List = 1;
  for (int i = 0; i < this->monstermonster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monstermonster_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_monstermonster::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.monstermonster monstermonster_List = 1;
  total_size += 1 * this->monstermonster_list_size();
  for (int i = 0; i < this->monstermonster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monstermonster_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_monstermonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_monstermonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_monstermonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_monstermonster::MergeFrom(const Sheet_monstermonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  monstermonster_list_.MergeFrom(from.monstermonster_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_monstermonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_monstermonster::CopyFrom(const Sheet_monstermonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_monstermonster::IsInitialized() const {

  return true;
}

void Sheet_monstermonster::Swap(Sheet_monstermonster* other) {
  if (other != this) {
    monstermonster_list_.Swap(&other->monstermonster_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_monstermonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_monstermonster_descriptor_;
  metadata.reflection = Sheet_monstermonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monsterdisplayskillDesc::kIdFieldNumber;
#endif  // !_MSC_VER

monsterdisplayskillDesc::monsterdisplayskillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monsterdisplayskillDesc::InitAsDefaultInstance() {
}

monsterdisplayskillDesc::monsterdisplayskillDesc(const monsterdisplayskillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monsterdisplayskillDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monsterdisplayskillDesc::~monsterdisplayskillDesc() {
  SharedDtor();
}

void monsterdisplayskillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monsterdisplayskillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monsterdisplayskillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monsterdisplayskillDesc_descriptor_;
}

const monsterdisplayskillDesc& monsterdisplayskillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monsterdisplayskillDesc* monsterdisplayskillDesc::default_instance_ = NULL;

monsterdisplayskillDesc* monsterdisplayskillDesc::New() const {
  return new monsterdisplayskillDesc;
}

void monsterdisplayskillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monsterdisplayskillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monsterdisplayskillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monsterdisplayskillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monsterdisplayskillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monsterdisplayskillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monsterdisplayskillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monsterdisplayskillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monsterdisplayskillDesc::MergeFrom(const monsterdisplayskillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monsterdisplayskillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monsterdisplayskillDesc::CopyFrom(const monsterdisplayskillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monsterdisplayskillDesc::IsInitialized() const {

  return true;
}

void monsterdisplayskillDesc::Swap(monsterdisplayskillDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monsterdisplayskillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monsterdisplayskillDesc_descriptor_;
  metadata.reflection = monsterdisplayskillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monsterdisplay::kDisplayIDFieldNumber;
const int monsterdisplay::kModelOffsetsXFieldNumber;
const int monsterdisplay::kModelOffsetsYFieldNumber;
const int monsterdisplay::kModelScaleFieldNumber;
const int monsterdisplay::kModelRadiusFieldNumber;
const int monsterdisplay::kPathRadiusFieldNumber;
const int monsterdisplay::kCollisionRadiusFieldNumber;
const int monsterdisplay::kRSpeedFieldNumber;
const int monsterdisplay::kSkillFieldNumber;
#endif  // !_MSC_VER

monsterdisplay::monsterdisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monsterdisplay::InitAsDefaultInstance() {
}

monsterdisplay::monsterdisplay(const monsterdisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monsterdisplay::SharedCtor() {
  _cached_size_ = 0;
  displayid_ = GOOGLE_LONGLONG(0);
  modeloffsetsx_ = 0;
  modeloffsetsy_ = 0;
  modelscale_ = 0;
  modelradius_ = 0;
  pathradius_ = 0;
  collisionradius_ = 0;
  rspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monsterdisplay::~monsterdisplay() {
  SharedDtor();
}

void monsterdisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monsterdisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monsterdisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monsterdisplay_descriptor_;
}

const monsterdisplay& monsterdisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monsterdisplay* monsterdisplay::default_instance_ = NULL;

monsterdisplay* monsterdisplay::New() const {
  return new monsterdisplay;
}

void monsterdisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    displayid_ = GOOGLE_LONGLONG(0);
    modeloffsetsx_ = 0;
    modeloffsetsy_ = 0;
    modelscale_ = 0;
    modelradius_ = 0;
    pathradius_ = 0;
    collisionradius_ = 0;
    rspeed_ = 0;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monsterdisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 displayID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &displayid_)));
          set_has_displayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modelOffsetsX;
        break;
      }

      // optional int32 modelOffsetsX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelOffsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeloffsetsx_)));
          set_has_modeloffsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modelOffsetsY;
        break;
      }

      // optional int32 modelOffsetsY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelOffsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeloffsetsy_)));
          set_has_modeloffsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_modelScale;
        break;
      }

      // optional int32 modelScale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelscale_)));
          set_has_modelscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_modelRadius;
        break;
      }

      // optional int32 modelRadius = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modelradius_)));
          set_has_modelradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pathRadius;
        break;
      }

      // optional int32 pathRadius = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathradius_)));
          set_has_pathradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_collisionRadius;
        break;
      }

      // optional int32 collisionRadius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collisionRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collisionradius_)));
          set_has_collisionradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rSpeed;
        break;
      }

      // optional int32 rSpeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rspeed_)));
          set_has_rspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        break;
      }

      // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monsterdisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 displayID = 1;
  if (has_displayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->displayid(), output);
  }

  // optional int32 modelOffsetsX = 2;
  if (has_modeloffsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modeloffsetsx(), output);
  }

  // optional int32 modelOffsetsY = 3;
  if (has_modeloffsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modeloffsetsy(), output);
  }

  // optional int32 modelScale = 4;
  if (has_modelscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->modelscale(), output);
  }

  // optional int32 modelRadius = 5;
  if (has_modelradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->modelradius(), output);
  }

  // optional int32 pathRadius = 6;
  if (has_pathradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pathradius(), output);
  }

  // optional int32 collisionRadius = 7;
  if (has_collisionradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->collisionradius(), output);
  }

  // optional int32 rSpeed = 8;
  if (has_rspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rspeed(), output);
  }

  // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monsterdisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 displayID = 1;
  if (has_displayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->displayid(), target);
  }

  // optional int32 modelOffsetsX = 2;
  if (has_modeloffsetsx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modeloffsetsx(), target);
  }

  // optional int32 modelOffsetsY = 3;
  if (has_modeloffsetsy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modeloffsetsy(), target);
  }

  // optional int32 modelScale = 4;
  if (has_modelscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->modelscale(), target);
  }

  // optional int32 modelRadius = 5;
  if (has_modelradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->modelradius(), target);
  }

  // optional int32 pathRadius = 6;
  if (has_pathradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pathradius(), target);
  }

  // optional int32 collisionRadius = 7;
  if (has_collisionradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->collisionradius(), target);
  }

  // optional int32 rSpeed = 8;
  if (has_rspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rspeed(), target);
  }

  // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monsterdisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 displayID = 1;
    if (has_displayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->displayid());
    }

    // optional int32 modelOffsetsX = 2;
    if (has_modeloffsetsx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeloffsetsx());
    }

    // optional int32 modelOffsetsY = 3;
    if (has_modeloffsetsy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeloffsetsy());
    }

    // optional int32 modelScale = 4;
    if (has_modelscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelscale());
    }

    // optional int32 modelRadius = 5;
    if (has_modelradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modelradius());
    }

    // optional int32 pathRadius = 6;
    if (has_pathradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathradius());
    }

    // optional int32 collisionRadius = 7;
    if (has_collisionradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collisionradius());
    }

    // optional int32 rSpeed = 8;
    if (has_rspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rspeed());
    }

  }
  // repeated .proto_ff.monsterdisplayskillDesc skill = 9;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monsterdisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monsterdisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monsterdisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monsterdisplay::MergeFrom(const monsterdisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_displayid()) {
      set_displayid(from.displayid());
    }
    if (from.has_modeloffsetsx()) {
      set_modeloffsetsx(from.modeloffsetsx());
    }
    if (from.has_modeloffsetsy()) {
      set_modeloffsetsy(from.modeloffsetsy());
    }
    if (from.has_modelscale()) {
      set_modelscale(from.modelscale());
    }
    if (from.has_modelradius()) {
      set_modelradius(from.modelradius());
    }
    if (from.has_pathradius()) {
      set_pathradius(from.pathradius());
    }
    if (from.has_collisionradius()) {
      set_collisionradius(from.collisionradius());
    }
    if (from.has_rspeed()) {
      set_rspeed(from.rspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monsterdisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monsterdisplay::CopyFrom(const monsterdisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monsterdisplay::IsInitialized() const {

  return true;
}

void monsterdisplay::Swap(monsterdisplay* other) {
  if (other != this) {
    std::swap(displayid_, other->displayid_);
    std::swap(modeloffsetsx_, other->modeloffsetsx_);
    std::swap(modeloffsetsy_, other->modeloffsetsy_);
    std::swap(modelscale_, other->modelscale_);
    std::swap(modelradius_, other->modelradius_);
    std::swap(pathradius_, other->pathradius_);
    std::swap(collisionradius_, other->collisionradius_);
    std::swap(rspeed_, other->rspeed_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monsterdisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monsterdisplay_descriptor_;
  metadata.reflection = monsterdisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_monsterdisplay::kMonsterdisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_monsterdisplay::Sheet_monsterdisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_monsterdisplay::InitAsDefaultInstance() {
}

Sheet_monsterdisplay::Sheet_monsterdisplay(const Sheet_monsterdisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_monsterdisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_monsterdisplay::~Sheet_monsterdisplay() {
  SharedDtor();
}

void Sheet_monsterdisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_monsterdisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_monsterdisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_monsterdisplay_descriptor_;
}

const Sheet_monsterdisplay& Sheet_monsterdisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

Sheet_monsterdisplay* Sheet_monsterdisplay::default_instance_ = NULL;

Sheet_monsterdisplay* Sheet_monsterdisplay::New() const {
  return new Sheet_monsterdisplay;
}

void Sheet_monsterdisplay::Clear() {
  monsterdisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_monsterdisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterdisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterdisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterdisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_monsterdisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
  for (int i = 0; i < this->monsterdisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterdisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_monsterdisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
  for (int i = 0; i < this->monsterdisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterdisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_monsterdisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.monsterdisplay monsterdisplay_List = 1;
  total_size += 1 * this->monsterdisplay_list_size();
  for (int i = 0; i < this->monsterdisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterdisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_monsterdisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_monsterdisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_monsterdisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_monsterdisplay::MergeFrom(const Sheet_monsterdisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterdisplay_list_.MergeFrom(from.monsterdisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_monsterdisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_monsterdisplay::CopyFrom(const Sheet_monsterdisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_monsterdisplay::IsInitialized() const {

  return true;
}

void Sheet_monsterdisplay::Swap(Sheet_monsterdisplay* other) {
  if (other != this) {
    monsterdisplay_list_.Swap(&other->monsterdisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_monsterdisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_monsterdisplay_descriptor_;
  metadata.reflection = Sheet_monsterdisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monstervalue::kIDFieldNumber;
const int monstervalue::kTypeFieldNumber;
const int monstervalue::kMonsterLVFieldNumber;
const int monstervalue::kMaxHpFieldNumber;
const int monstervalue::kAtkFieldNumber;
const int monstervalue::kDefFieldNumber;
const int monstervalue::kBrkArmorFieldNumber;
const int monstervalue::kFiveDamFieldNumber;
const int monstervalue::kFiveArmorFieldNumber;
const int monstervalue::kThumpRateFieldNumber;
const int monstervalue::kThumpResistFieldNumber;
const int monstervalue::kSkyFieldNumber;
const int monstervalue::kSkyDamFieldNumber;
const int monstervalue::kSkyReduResistFieldNumber;
const int monstervalue::kSkyResistFieldNumber;
const int monstervalue::kKillGodFieldNumber;
const int monstervalue::kGodBodyFieldNumber;
const int monstervalue::kMortalRateFieldNumber;
const int monstervalue::kMortalResistFieldNumber;
const int monstervalue::kFairyRateFieldNumber;
const int monstervalue::kFairyResistFieldNumber;
const int monstervalue::kGodRateFieldNumber;
const int monstervalue::kGodResistFieldNumber;
const int monstervalue::kCritRateFieldNumber;
const int monstervalue::kCritResitRateFieldNumber;
const int monstervalue::kCritDamFieldNumber;
const int monstervalue::kCritReduFieldNumber;
const int monstervalue::kBatterRateFieldNumber;
const int monstervalue::kBatterResistFieldNumber;
const int monstervalue::kBatterDamFieldNumber;
const int monstervalue::kBatterReduFieldNumber;
const int monstervalue::kBrkdownRateFieldNumber;
const int monstervalue::kBrkdownResistFieldNumber;
const int monstervalue::kDamAddFieldNumber;
const int monstervalue::kDamReduFieldNumber;
const int monstervalue::kAllAddFieldNumber;
const int monstervalue::kAllReduFieldNumber;
const int monstervalue::kSkillAddFieldNumber;
const int monstervalue::kSkillReduFieldNumber;
const int monstervalue::kReboundDamFieldNumber;
const int monstervalue::kHpStealFieldNumber;
const int monstervalue::kDodgeRateFieldNumber;
const int monstervalue::kHitRateFieldNumber;
const int monstervalue::kBlkRateFieldNumber;
const int monstervalue::kBrkBlkRateFieldNumber;
const int monstervalue::kBlkFreeFieldNumber;
const int monstervalue::kBlkPierceFieldNumber;
const int monstervalue::kRelArmorFieldNumber;
const int monstervalue::kRelDamFieldNumber;
const int monstervalue::kFiveResistFieldNumber;
const int monstervalue::kFiveResistReduFieldNumber;
const int monstervalue::kFireAddFieldNumber;
const int monstervalue::kFireReduFieldNumber;
const int monstervalue::kIceAddFieldNumber;
const int monstervalue::kIceReduFieldNumber;
const int monstervalue::kThunderAddFieldNumber;
const int monstervalue::kThunderRduFieldNumber;
const int monstervalue::kPlayerAddFieldNumber;
const int monstervalue::kPlayerReduFieldNumber;
const int monstervalue::kLeaderAddFieldNumber;
const int monstervalue::kLeaderReduFieldNumber;
const int monstervalue::kMonAddFieldNumber;
const int monstervalue::kMonReduFieldNumber;
const int monstervalue::kVarReduFieldNumber;
const int monstervalue::kVarAddFieldNumber;
const int monstervalue::kUnusualResistFieldNumber;
const int monstervalue::kUnusualHitFieldNumber;
const int monstervalue::kHpRecoverFieldNumber;
const int monstervalue::kUnusualAddFieldNumber;
const int monstervalue::kFixRecoverFieldNumber;
const int monstervalue::kHighHpAddFieldNumber;
const int monstervalue::kRecoverHpAddFieldNumber;
const int monstervalue::kWeekAddFieldNumber;
const int monstervalue::kShieldFieldNumber;
#endif  // !_MSC_VER

monstervalue::monstervalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monstervalue::InitAsDefaultInstance() {
}

monstervalue::monstervalue(const monstervalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monstervalue::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  monsterlv_ = 0;
  max_hp_ = GOOGLE_LONGLONG(0);
  atk_ = GOOGLE_LONGLONG(0);
  def_ = GOOGLE_LONGLONG(0);
  brk_armor_ = GOOGLE_LONGLONG(0);
  five_dam_ = GOOGLE_LONGLONG(0);
  five_armor_ = GOOGLE_LONGLONG(0);
  thump_rate_ = GOOGLE_LONGLONG(0);
  thump_resist_ = GOOGLE_LONGLONG(0);
  sky_ = GOOGLE_LONGLONG(0);
  sky_dam_ = GOOGLE_LONGLONG(0);
  sky_redu_resist_ = GOOGLE_LONGLONG(0);
  sky_resist_ = GOOGLE_LONGLONG(0);
  kill_god_ = GOOGLE_LONGLONG(0);
  god_body_ = GOOGLE_LONGLONG(0);
  mortal_rate_ = GOOGLE_LONGLONG(0);
  mortal_resist_ = GOOGLE_LONGLONG(0);
  fairy_rate_ = GOOGLE_LONGLONG(0);
  fairy_resist_ = GOOGLE_LONGLONG(0);
  god_rate_ = GOOGLE_LONGLONG(0);
  god_resist_ = GOOGLE_LONGLONG(0);
  crit_rate_ = GOOGLE_LONGLONG(0);
  crit_resit_rate_ = GOOGLE_LONGLONG(0);
  crit_dam_ = GOOGLE_LONGLONG(0);
  crit_redu_ = GOOGLE_LONGLONG(0);
  batter_rate_ = GOOGLE_LONGLONG(0);
  batter_resist_ = GOOGLE_LONGLONG(0);
  batter_dam_ = GOOGLE_LONGLONG(0);
  batter_redu_ = GOOGLE_LONGLONG(0);
  brkdown_rate_ = GOOGLE_LONGLONG(0);
  brkdown_resist_ = GOOGLE_LONGLONG(0);
  dam_add_ = GOOGLE_LONGLONG(0);
  dam_redu_ = GOOGLE_LONGLONG(0);
  all_add_ = GOOGLE_LONGLONG(0);
  all_redu_ = GOOGLE_LONGLONG(0);
  skill_add_ = GOOGLE_LONGLONG(0);
  skill_redu_ = GOOGLE_LONGLONG(0);
  rebound_dam_ = GOOGLE_LONGLONG(0);
  hp_steal_ = GOOGLE_LONGLONG(0);
  dodge_rate_ = GOOGLE_LONGLONG(0);
  hit_rate_ = GOOGLE_LONGLONG(0);
  blk_rate_ = GOOGLE_LONGLONG(0);
  brk_blk_rate_ = GOOGLE_LONGLONG(0);
  blk_free_ = GOOGLE_LONGLONG(0);
  blk_pierce_ = GOOGLE_LONGLONG(0);
  rel_armor_ = GOOGLE_LONGLONG(0);
  rel_dam_ = GOOGLE_LONGLONG(0);
  five_resist_ = GOOGLE_LONGLONG(0);
  five_resist_redu_ = GOOGLE_LONGLONG(0);
  fire_add_ = GOOGLE_LONGLONG(0);
  fire_redu_ = GOOGLE_LONGLONG(0);
  ice_add_ = GOOGLE_LONGLONG(0);
  ice_redu_ = GOOGLE_LONGLONG(0);
  thunder_add_ = GOOGLE_LONGLONG(0);
  thunder_rdu_ = GOOGLE_LONGLONG(0);
  player_add_ = GOOGLE_LONGLONG(0);
  player_redu_ = GOOGLE_LONGLONG(0);
  leader_add_ = GOOGLE_LONGLONG(0);
  leader_redu_ = GOOGLE_LONGLONG(0);
  mon_add_ = GOOGLE_LONGLONG(0);
  mon_redu_ = GOOGLE_LONGLONG(0);
  var_redu_ = GOOGLE_LONGLONG(0);
  var_add_ = GOOGLE_LONGLONG(0);
  unusual_resist_ = GOOGLE_LONGLONG(0);
  unusual_hit_ = GOOGLE_LONGLONG(0);
  hp_recover_ = GOOGLE_LONGLONG(0);
  unusual_add_ = GOOGLE_LONGLONG(0);
  fix_recover_ = GOOGLE_LONGLONG(0);
  high_hp_add_ = GOOGLE_LONGLONG(0);
  recover_hp_add_ = GOOGLE_LONGLONG(0);
  week_add_ = GOOGLE_LONGLONG(0);
  shield_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monstervalue::~monstervalue() {
  SharedDtor();
}

void monstervalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monstervalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monstervalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monstervalue_descriptor_;
}

const monstervalue& monstervalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monstervalue* monstervalue::default_instance_ = NULL;

monstervalue* monstervalue::New() const {
  return new monstervalue;
}

void monstervalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    monsterlv_ = 0;
    max_hp_ = GOOGLE_LONGLONG(0);
    atk_ = GOOGLE_LONGLONG(0);
    def_ = GOOGLE_LONGLONG(0);
    brk_armor_ = GOOGLE_LONGLONG(0);
    five_dam_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    five_armor_ = GOOGLE_LONGLONG(0);
    thump_rate_ = GOOGLE_LONGLONG(0);
    thump_resist_ = GOOGLE_LONGLONG(0);
    sky_ = GOOGLE_LONGLONG(0);
    sky_dam_ = GOOGLE_LONGLONG(0);
    sky_redu_resist_ = GOOGLE_LONGLONG(0);
    sky_resist_ = GOOGLE_LONGLONG(0);
    kill_god_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    god_body_ = GOOGLE_LONGLONG(0);
    mortal_rate_ = GOOGLE_LONGLONG(0);
    mortal_resist_ = GOOGLE_LONGLONG(0);
    fairy_rate_ = GOOGLE_LONGLONG(0);
    fairy_resist_ = GOOGLE_LONGLONG(0);
    god_rate_ = GOOGLE_LONGLONG(0);
    god_resist_ = GOOGLE_LONGLONG(0);
    crit_rate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    crit_resit_rate_ = GOOGLE_LONGLONG(0);
    crit_dam_ = GOOGLE_LONGLONG(0);
    crit_redu_ = GOOGLE_LONGLONG(0);
    batter_rate_ = GOOGLE_LONGLONG(0);
    batter_resist_ = GOOGLE_LONGLONG(0);
    batter_dam_ = GOOGLE_LONGLONG(0);
    batter_redu_ = GOOGLE_LONGLONG(0);
    brkdown_rate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    brkdown_resist_ = GOOGLE_LONGLONG(0);
    dam_add_ = GOOGLE_LONGLONG(0);
    dam_redu_ = GOOGLE_LONGLONG(0);
    all_add_ = GOOGLE_LONGLONG(0);
    all_redu_ = GOOGLE_LONGLONG(0);
    skill_add_ = GOOGLE_LONGLONG(0);
    skill_redu_ = GOOGLE_LONGLONG(0);
    rebound_dam_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    hp_steal_ = GOOGLE_LONGLONG(0);
    dodge_rate_ = GOOGLE_LONGLONG(0);
    hit_rate_ = GOOGLE_LONGLONG(0);
    blk_rate_ = GOOGLE_LONGLONG(0);
    brk_blk_rate_ = GOOGLE_LONGLONG(0);
    blk_free_ = GOOGLE_LONGLONG(0);
    blk_pierce_ = GOOGLE_LONGLONG(0);
    rel_armor_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    rel_dam_ = GOOGLE_LONGLONG(0);
    five_resist_ = GOOGLE_LONGLONG(0);
    five_resist_redu_ = GOOGLE_LONGLONG(0);
    fire_add_ = GOOGLE_LONGLONG(0);
    fire_redu_ = GOOGLE_LONGLONG(0);
    ice_add_ = GOOGLE_LONGLONG(0);
    ice_redu_ = GOOGLE_LONGLONG(0);
    thunder_add_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    thunder_rdu_ = GOOGLE_LONGLONG(0);
    player_add_ = GOOGLE_LONGLONG(0);
    player_redu_ = GOOGLE_LONGLONG(0);
    leader_add_ = GOOGLE_LONGLONG(0);
    leader_redu_ = GOOGLE_LONGLONG(0);
    mon_add_ = GOOGLE_LONGLONG(0);
    mon_redu_ = GOOGLE_LONGLONG(0);
    var_redu_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    var_add_ = GOOGLE_LONGLONG(0);
    unusual_resist_ = GOOGLE_LONGLONG(0);
    unusual_hit_ = GOOGLE_LONGLONG(0);
    hp_recover_ = GOOGLE_LONGLONG(0);
    unusual_add_ = GOOGLE_LONGLONG(0);
    fix_recover_ = GOOGLE_LONGLONG(0);
    high_hp_add_ = GOOGLE_LONGLONG(0);
    recover_hp_add_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    week_add_ = GOOGLE_LONGLONG(0);
    shield_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monstervalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monsterLV;
        break;
      }

      // optional int32 monsterLV = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterlv_)));
          set_has_monsterlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_Hp;
        break;
      }

      // optional int64 max_Hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_atk;
        break;
      }

      // optional int64 atk = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_def;
        break;
      }

      // optional int64 def = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_brk_Armor;
        break;
      }

      // optional int64 brk_Armor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brk_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brk_armor_)));
          set_has_brk_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_five_Dam;
        break;
      }

      // optional int64 five_Dam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_five_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &five_dam_)));
          set_has_five_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_five_Armor;
        break;
      }

      // optional int64 five_Armor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_five_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &five_armor_)));
          set_has_five_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_thump_Rate;
        break;
      }

      // optional int64 thump_Rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thump_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thump_rate_)));
          set_has_thump_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_thump_Resist;
        break;
      }

      // optional int64 thump_Resist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thump_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thump_resist_)));
          set_has_thump_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sky;
        break;
      }

      // optional int64 sky = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sky_)));
          set_has_sky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sky_Dam;
        break;
      }

      // optional int64 sky_Dam = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sky_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sky_dam_)));
          set_has_sky_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_sky_Redu_Resist;
        break;
      }

      // optional int64 sky_Redu_Resist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sky_Redu_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sky_redu_resist_)));
          set_has_sky_redu_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sky_Resist;
        break;
      }

      // optional int64 sky_Resist = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sky_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sky_resist_)));
          set_has_sky_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_kill_God;
        break;
      }

      // optional int64 kill_God = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_God:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kill_god_)));
          set_has_kill_god();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_god_Body;
        break;
      }

      // optional int64 god_Body = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_god_Body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &god_body_)));
          set_has_god_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_mortal_Rate;
        break;
      }

      // optional int64 mortal_Rate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mortal_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mortal_rate_)));
          set_has_mortal_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_mortal_Resist;
        break;
      }

      // optional int64 mortal_Resist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mortal_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mortal_resist_)));
          set_has_mortal_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fairy_Rate;
        break;
      }

      // optional int64 fairy_Rate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fairy_rate_)));
          set_has_fairy_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fairy_Resist;
        break;
      }

      // optional int64 fairy_Resist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fairy_resist_)));
          set_has_fairy_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_god_Rate;
        break;
      }

      // optional int64 god_Rate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_god_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &god_rate_)));
          set_has_god_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_god_Resist;
        break;
      }

      // optional int64 god_Resist = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_god_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &god_resist_)));
          set_has_god_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_crit_Rate;
        break;
      }

      // optional int64 crit_Rate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crit_rate_)));
          set_has_crit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_crit_resit_Rate;
        break;
      }

      // optional int64 crit_resit_Rate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_resit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crit_resit_rate_)));
          set_has_crit_resit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_crit_Dam;
        break;
      }

      // optional int64 crit_Dam = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crit_dam_)));
          set_has_crit_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_crit_Redu;
        break;
      }

      // optional int64 crit_Redu = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crit_redu_)));
          set_has_crit_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_batter_Rate;
        break;
      }

      // optional int64 batter_Rate = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batter_rate_)));
          set_has_batter_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_batter_Resist;
        break;
      }

      // optional int64 batter_Resist = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batter_resist_)));
          set_has_batter_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_batter_Dam;
        break;
      }

      // optional int64 batter_Dam = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batter_dam_)));
          set_has_batter_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_batter_Redu;
        break;
      }

      // optional int64 batter_Redu = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batter_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batter_redu_)));
          set_has_batter_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_brkdown_Rate;
        break;
      }

      // optional int64 brkdown_Rate = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brkdown_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brkdown_rate_)));
          set_has_brkdown_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_brkdown_Resist;
        break;
      }

      // optional int64 brkdown_Resist = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brkdown_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brkdown_resist_)));
          set_has_brkdown_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_dam_Add;
        break;
      }

      // optional int64 dam_Add = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dam_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dam_add_)));
          set_has_dam_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_dam_Redu;
        break;
      }

      // optional int64 dam_Redu = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dam_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dam_redu_)));
          set_has_dam_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_all_Add;
        break;
      }

      // optional int64 all_Add = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_add_)));
          set_has_all_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_all_Redu;
        break;
      }

      // optional int64 all_Redu = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_redu_)));
          set_has_all_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_skill_Add;
        break;
      }

      // optional int64 skill_Add = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_add_)));
          set_has_skill_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_skill_Redu;
        break;
      }

      // optional int64 skill_Redu = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_redu_)));
          set_has_skill_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_rebound_Dam;
        break;
      }

      // optional int64 rebound_Dam = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebound_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rebound_dam_)));
          set_has_rebound_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_hp_Steal;
        break;
      }

      // optional int64 hp_Steal = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_Steal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_steal_)));
          set_has_hp_steal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_dodge_Rate;
        break;
      }

      // optional int64 dodge_Rate = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dodge_rate_)));
          set_has_dodge_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_hit_Rate;
        break;
      }

      // optional int64 hit_Rate = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hit_rate_)));
          set_has_hit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_blk_Rate;
        break;
      }

      // optional int64 blk_Rate = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blk_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blk_rate_)));
          set_has_blk_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_brk_blk_Rate;
        break;
      }

      // optional int64 brk_blk_Rate = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brk_blk_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brk_blk_rate_)));
          set_has_brk_blk_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_blk_Free;
        break;
      }

      // optional int64 blk_Free = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blk_Free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blk_free_)));
          set_has_blk_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_blk_Pierce;
        break;
      }

      // optional int64 blk_Pierce = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blk_Pierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blk_pierce_)));
          set_has_blk_pierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_rel_Armor;
        break;
      }

      // optional int64 rel_Armor = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rel_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rel_armor_)));
          set_has_rel_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_rel_Dam;
        break;
      }

      // optional int64 rel_Dam = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rel_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rel_dam_)));
          set_has_rel_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_five_Resist;
        break;
      }

      // optional int64 five_Resist = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_five_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &five_resist_)));
          set_has_five_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_five_resist_Redu;
        break;
      }

      // optional int64 five_resist_Redu = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_five_resist_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &five_resist_redu_)));
          set_has_five_resist_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_fire_Add;
        break;
      }

      // optional int64 fire_Add = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fire_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fire_add_)));
          set_has_fire_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_fire_Redu;
        break;
      }

      // optional int64 fire_Redu = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fire_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fire_redu_)));
          set_has_fire_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_ice_Add;
        break;
      }

      // optional int64 ice_Add = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ice_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ice_add_)));
          set_has_ice_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_ice_Redu;
        break;
      }

      // optional int64 ice_Redu = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ice_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ice_redu_)));
          set_has_ice_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_thunder_Add;
        break;
      }

      // optional int64 thunder_Add = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thunder_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thunder_add_)));
          set_has_thunder_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_thunder_Rdu;
        break;
      }

      // optional int64 thunder_Rdu = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thunder_Rdu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thunder_rdu_)));
          set_has_thunder_rdu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_player_Add;
        break;
      }

      // optional int64 player_Add = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_add_)));
          set_has_player_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_player_Redu;
        break;
      }

      // optional int64 player_Redu = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_redu_)));
          set_has_player_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_leader_Add;
        break;
      }

      // optional int64 leader_Add = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_add_)));
          set_has_leader_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_leader_Redu;
        break;
      }

      // optional int64 leader_Redu = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_redu_)));
          set_has_leader_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_mon_Add;
        break;
      }

      // optional int64 mon_Add = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mon_add_)));
          set_has_mon_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_mon_Redu;
        break;
      }

      // optional int64 mon_Redu = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mon_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mon_redu_)));
          set_has_mon_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_var_Redu;
        break;
      }

      // optional int64 var_Redu = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_var_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &var_redu_)));
          set_has_var_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_var_Add;
        break;
      }

      // optional int64 var_Add = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_var_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &var_add_)));
          set_has_var_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_unusual_Resist;
        break;
      }

      // optional int64 unusual_Resist = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unusual_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unusual_resist_)));
          set_has_unusual_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_unusual_Hit;
        break;
      }

      // optional int64 unusual_Hit = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unusual_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unusual_hit_)));
          set_has_unusual_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_hp_Recover;
        break;
      }

      // optional int64 hp_Recover = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_Recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_recover_)));
          set_has_hp_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_unusual_Add;
        break;
      }

      // optional int64 unusual_Add = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unusual_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unusual_add_)));
          set_has_unusual_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_fix_Recover;
        break;
      }

      // optional int64 fix_Recover = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fix_Recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fix_recover_)));
          set_has_fix_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_high_hp_Add;
        break;
      }

      // optional int64 high_hp_Add = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_hp_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_hp_add_)));
          set_has_high_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_recover_hp_Add;
        break;
      }

      // optional int64 recover_hp_Add = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recover_hp_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recover_hp_add_)));
          set_has_recover_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_week_Add;
        break;
      }

      // optional int64 week_Add = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &week_add_)));
          set_has_week_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_shield;
        break;
      }

      // optional int64 shield = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shield_)));
          set_has_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monstervalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 monsterLV = 3;
  if (has_monsterlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monsterlv(), output);
  }

  // optional int64 max_Hp = 4;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_hp(), output);
  }

  // optional int64 atk = 5;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->atk(), output);
  }

  // optional int64 def = 6;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->def(), output);
  }

  // optional int64 brk_Armor = 7;
  if (has_brk_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->brk_armor(), output);
  }

  // optional int64 five_Dam = 8;
  if (has_five_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->five_dam(), output);
  }

  // optional int64 five_Armor = 9;
  if (has_five_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->five_armor(), output);
  }

  // optional int64 thump_Rate = 10;
  if (has_thump_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->thump_rate(), output);
  }

  // optional int64 thump_Resist = 11;
  if (has_thump_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->thump_resist(), output);
  }

  // optional int64 sky = 12;
  if (has_sky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->sky(), output);
  }

  // optional int64 sky_Dam = 13;
  if (has_sky_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sky_dam(), output);
  }

  // optional int64 sky_Redu_Resist = 14;
  if (has_sky_redu_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->sky_redu_resist(), output);
  }

  // optional int64 sky_Resist = 15;
  if (has_sky_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->sky_resist(), output);
  }

  // optional int64 kill_God = 16;
  if (has_kill_god()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->kill_god(), output);
  }

  // optional int64 god_Body = 17;
  if (has_god_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->god_body(), output);
  }

  // optional int64 mortal_Rate = 18;
  if (has_mortal_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->mortal_rate(), output);
  }

  // optional int64 mortal_Resist = 19;
  if (has_mortal_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->mortal_resist(), output);
  }

  // optional int64 fairy_Rate = 20;
  if (has_fairy_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->fairy_rate(), output);
  }

  // optional int64 fairy_Resist = 21;
  if (has_fairy_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->fairy_resist(), output);
  }

  // optional int64 god_Rate = 22;
  if (has_god_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->god_rate(), output);
  }

  // optional int64 god_Resist = 23;
  if (has_god_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->god_resist(), output);
  }

  // optional int64 crit_Rate = 24;
  if (has_crit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->crit_rate(), output);
  }

  // optional int64 crit_resit_Rate = 25;
  if (has_crit_resit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->crit_resit_rate(), output);
  }

  // optional int64 crit_Dam = 26;
  if (has_crit_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->crit_dam(), output);
  }

  // optional int64 crit_Redu = 27;
  if (has_crit_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->crit_redu(), output);
  }

  // optional int64 batter_Rate = 28;
  if (has_batter_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->batter_rate(), output);
  }

  // optional int64 batter_Resist = 29;
  if (has_batter_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->batter_resist(), output);
  }

  // optional int64 batter_Dam = 30;
  if (has_batter_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->batter_dam(), output);
  }

  // optional int64 batter_Redu = 31;
  if (has_batter_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->batter_redu(), output);
  }

  // optional int64 brkdown_Rate = 32;
  if (has_brkdown_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->brkdown_rate(), output);
  }

  // optional int64 brkdown_Resist = 33;
  if (has_brkdown_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->brkdown_resist(), output);
  }

  // optional int64 dam_Add = 34;
  if (has_dam_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->dam_add(), output);
  }

  // optional int64 dam_Redu = 35;
  if (has_dam_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->dam_redu(), output);
  }

  // optional int64 all_Add = 36;
  if (has_all_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->all_add(), output);
  }

  // optional int64 all_Redu = 37;
  if (has_all_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->all_redu(), output);
  }

  // optional int64 skill_Add = 38;
  if (has_skill_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->skill_add(), output);
  }

  // optional int64 skill_Redu = 39;
  if (has_skill_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->skill_redu(), output);
  }

  // optional int64 rebound_Dam = 40;
  if (has_rebound_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->rebound_dam(), output);
  }

  // optional int64 hp_Steal = 41;
  if (has_hp_steal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->hp_steal(), output);
  }

  // optional int64 dodge_Rate = 42;
  if (has_dodge_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->dodge_rate(), output);
  }

  // optional int64 hit_Rate = 43;
  if (has_hit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->hit_rate(), output);
  }

  // optional int64 blk_Rate = 44;
  if (has_blk_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->blk_rate(), output);
  }

  // optional int64 brk_blk_Rate = 45;
  if (has_brk_blk_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->brk_blk_rate(), output);
  }

  // optional int64 blk_Free = 46;
  if (has_blk_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->blk_free(), output);
  }

  // optional int64 blk_Pierce = 47;
  if (has_blk_pierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->blk_pierce(), output);
  }

  // optional int64 rel_Armor = 48;
  if (has_rel_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->rel_armor(), output);
  }

  // optional int64 rel_Dam = 49;
  if (has_rel_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->rel_dam(), output);
  }

  // optional int64 five_Resist = 50;
  if (has_five_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->five_resist(), output);
  }

  // optional int64 five_resist_Redu = 51;
  if (has_five_resist_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->five_resist_redu(), output);
  }

  // optional int64 fire_Add = 52;
  if (has_fire_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->fire_add(), output);
  }

  // optional int64 fire_Redu = 53;
  if (has_fire_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(53, this->fire_redu(), output);
  }

  // optional int64 ice_Add = 54;
  if (has_ice_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(54, this->ice_add(), output);
  }

  // optional int64 ice_Redu = 55;
  if (has_ice_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(55, this->ice_redu(), output);
  }

  // optional int64 thunder_Add = 56;
  if (has_thunder_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(56, this->thunder_add(), output);
  }

  // optional int64 thunder_Rdu = 57;
  if (has_thunder_rdu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(57, this->thunder_rdu(), output);
  }

  // optional int64 player_Add = 58;
  if (has_player_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(58, this->player_add(), output);
  }

  // optional int64 player_Redu = 59;
  if (has_player_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(59, this->player_redu(), output);
  }

  // optional int64 leader_Add = 60;
  if (has_leader_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(60, this->leader_add(), output);
  }

  // optional int64 leader_Redu = 61;
  if (has_leader_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(61, this->leader_redu(), output);
  }

  // optional int64 mon_Add = 62;
  if (has_mon_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->mon_add(), output);
  }

  // optional int64 mon_Redu = 63;
  if (has_mon_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(63, this->mon_redu(), output);
  }

  // optional int64 var_Redu = 64;
  if (has_var_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(64, this->var_redu(), output);
  }

  // optional int64 var_Add = 65;
  if (has_var_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(65, this->var_add(), output);
  }

  // optional int64 unusual_Resist = 66;
  if (has_unusual_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(66, this->unusual_resist(), output);
  }

  // optional int64 unusual_Hit = 67;
  if (has_unusual_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(67, this->unusual_hit(), output);
  }

  // optional int64 hp_Recover = 68;
  if (has_hp_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(68, this->hp_recover(), output);
  }

  // optional int64 unusual_Add = 69;
  if (has_unusual_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(69, this->unusual_add(), output);
  }

  // optional int64 fix_Recover = 70;
  if (has_fix_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(70, this->fix_recover(), output);
  }

  // optional int64 high_hp_Add = 71;
  if (has_high_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(71, this->high_hp_add(), output);
  }

  // optional int64 recover_hp_Add = 72;
  if (has_recover_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(72, this->recover_hp_add(), output);
  }

  // optional int64 week_Add = 73;
  if (has_week_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(73, this->week_add(), output);
  }

  // optional int64 shield = 74;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(74, this->shield(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monstervalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 monsterLV = 3;
  if (has_monsterlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monsterlv(), target);
  }

  // optional int64 max_Hp = 4;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_hp(), target);
  }

  // optional int64 atk = 5;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->atk(), target);
  }

  // optional int64 def = 6;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->def(), target);
  }

  // optional int64 brk_Armor = 7;
  if (has_brk_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->brk_armor(), target);
  }

  // optional int64 five_Dam = 8;
  if (has_five_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->five_dam(), target);
  }

  // optional int64 five_Armor = 9;
  if (has_five_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->five_armor(), target);
  }

  // optional int64 thump_Rate = 10;
  if (has_thump_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->thump_rate(), target);
  }

  // optional int64 thump_Resist = 11;
  if (has_thump_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->thump_resist(), target);
  }

  // optional int64 sky = 12;
  if (has_sky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->sky(), target);
  }

  // optional int64 sky_Dam = 13;
  if (has_sky_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sky_dam(), target);
  }

  // optional int64 sky_Redu_Resist = 14;
  if (has_sky_redu_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->sky_redu_resist(), target);
  }

  // optional int64 sky_Resist = 15;
  if (has_sky_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->sky_resist(), target);
  }

  // optional int64 kill_God = 16;
  if (has_kill_god()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->kill_god(), target);
  }

  // optional int64 god_Body = 17;
  if (has_god_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->god_body(), target);
  }

  // optional int64 mortal_Rate = 18;
  if (has_mortal_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->mortal_rate(), target);
  }

  // optional int64 mortal_Resist = 19;
  if (has_mortal_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->mortal_resist(), target);
  }

  // optional int64 fairy_Rate = 20;
  if (has_fairy_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->fairy_rate(), target);
  }

  // optional int64 fairy_Resist = 21;
  if (has_fairy_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->fairy_resist(), target);
  }

  // optional int64 god_Rate = 22;
  if (has_god_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->god_rate(), target);
  }

  // optional int64 god_Resist = 23;
  if (has_god_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->god_resist(), target);
  }

  // optional int64 crit_Rate = 24;
  if (has_crit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->crit_rate(), target);
  }

  // optional int64 crit_resit_Rate = 25;
  if (has_crit_resit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->crit_resit_rate(), target);
  }

  // optional int64 crit_Dam = 26;
  if (has_crit_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->crit_dam(), target);
  }

  // optional int64 crit_Redu = 27;
  if (has_crit_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->crit_redu(), target);
  }

  // optional int64 batter_Rate = 28;
  if (has_batter_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->batter_rate(), target);
  }

  // optional int64 batter_Resist = 29;
  if (has_batter_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->batter_resist(), target);
  }

  // optional int64 batter_Dam = 30;
  if (has_batter_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->batter_dam(), target);
  }

  // optional int64 batter_Redu = 31;
  if (has_batter_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->batter_redu(), target);
  }

  // optional int64 brkdown_Rate = 32;
  if (has_brkdown_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->brkdown_rate(), target);
  }

  // optional int64 brkdown_Resist = 33;
  if (has_brkdown_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->brkdown_resist(), target);
  }

  // optional int64 dam_Add = 34;
  if (has_dam_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->dam_add(), target);
  }

  // optional int64 dam_Redu = 35;
  if (has_dam_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->dam_redu(), target);
  }

  // optional int64 all_Add = 36;
  if (has_all_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->all_add(), target);
  }

  // optional int64 all_Redu = 37;
  if (has_all_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->all_redu(), target);
  }

  // optional int64 skill_Add = 38;
  if (has_skill_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->skill_add(), target);
  }

  // optional int64 skill_Redu = 39;
  if (has_skill_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->skill_redu(), target);
  }

  // optional int64 rebound_Dam = 40;
  if (has_rebound_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->rebound_dam(), target);
  }

  // optional int64 hp_Steal = 41;
  if (has_hp_steal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->hp_steal(), target);
  }

  // optional int64 dodge_Rate = 42;
  if (has_dodge_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->dodge_rate(), target);
  }

  // optional int64 hit_Rate = 43;
  if (has_hit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->hit_rate(), target);
  }

  // optional int64 blk_Rate = 44;
  if (has_blk_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->blk_rate(), target);
  }

  // optional int64 brk_blk_Rate = 45;
  if (has_brk_blk_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->brk_blk_rate(), target);
  }

  // optional int64 blk_Free = 46;
  if (has_blk_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->blk_free(), target);
  }

  // optional int64 blk_Pierce = 47;
  if (has_blk_pierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->blk_pierce(), target);
  }

  // optional int64 rel_Armor = 48;
  if (has_rel_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->rel_armor(), target);
  }

  // optional int64 rel_Dam = 49;
  if (has_rel_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->rel_dam(), target);
  }

  // optional int64 five_Resist = 50;
  if (has_five_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->five_resist(), target);
  }

  // optional int64 five_resist_Redu = 51;
  if (has_five_resist_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->five_resist_redu(), target);
  }

  // optional int64 fire_Add = 52;
  if (has_fire_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->fire_add(), target);
  }

  // optional int64 fire_Redu = 53;
  if (has_fire_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(53, this->fire_redu(), target);
  }

  // optional int64 ice_Add = 54;
  if (has_ice_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(54, this->ice_add(), target);
  }

  // optional int64 ice_Redu = 55;
  if (has_ice_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(55, this->ice_redu(), target);
  }

  // optional int64 thunder_Add = 56;
  if (has_thunder_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(56, this->thunder_add(), target);
  }

  // optional int64 thunder_Rdu = 57;
  if (has_thunder_rdu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(57, this->thunder_rdu(), target);
  }

  // optional int64 player_Add = 58;
  if (has_player_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(58, this->player_add(), target);
  }

  // optional int64 player_Redu = 59;
  if (has_player_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(59, this->player_redu(), target);
  }

  // optional int64 leader_Add = 60;
  if (has_leader_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(60, this->leader_add(), target);
  }

  // optional int64 leader_Redu = 61;
  if (has_leader_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(61, this->leader_redu(), target);
  }

  // optional int64 mon_Add = 62;
  if (has_mon_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(62, this->mon_add(), target);
  }

  // optional int64 mon_Redu = 63;
  if (has_mon_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(63, this->mon_redu(), target);
  }

  // optional int64 var_Redu = 64;
  if (has_var_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(64, this->var_redu(), target);
  }

  // optional int64 var_Add = 65;
  if (has_var_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(65, this->var_add(), target);
  }

  // optional int64 unusual_Resist = 66;
  if (has_unusual_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(66, this->unusual_resist(), target);
  }

  // optional int64 unusual_Hit = 67;
  if (has_unusual_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(67, this->unusual_hit(), target);
  }

  // optional int64 hp_Recover = 68;
  if (has_hp_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(68, this->hp_recover(), target);
  }

  // optional int64 unusual_Add = 69;
  if (has_unusual_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(69, this->unusual_add(), target);
  }

  // optional int64 fix_Recover = 70;
  if (has_fix_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(70, this->fix_recover(), target);
  }

  // optional int64 high_hp_Add = 71;
  if (has_high_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(71, this->high_hp_add(), target);
  }

  // optional int64 recover_hp_Add = 72;
  if (has_recover_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(72, this->recover_hp_add(), target);
  }

  // optional int64 week_Add = 73;
  if (has_week_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(73, this->week_add(), target);
  }

  // optional int64 shield = 74;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(74, this->shield(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monstervalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 monsterLV = 3;
    if (has_monsterlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterlv());
    }

    // optional int64 max_Hp = 4;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

    // optional int64 atk = 5;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->atk());
    }

    // optional int64 def = 6;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->def());
    }

    // optional int64 brk_Armor = 7;
    if (has_brk_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brk_armor());
    }

    // optional int64 five_Dam = 8;
    if (has_five_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->five_dam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 five_Armor = 9;
    if (has_five_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->five_armor());
    }

    // optional int64 thump_Rate = 10;
    if (has_thump_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->thump_rate());
    }

    // optional int64 thump_Resist = 11;
    if (has_thump_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->thump_resist());
    }

    // optional int64 sky = 12;
    if (has_sky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sky());
    }

    // optional int64 sky_Dam = 13;
    if (has_sky_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sky_dam());
    }

    // optional int64 sky_Redu_Resist = 14;
    if (has_sky_redu_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sky_redu_resist());
    }

    // optional int64 sky_Resist = 15;
    if (has_sky_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sky_resist());
    }

    // optional int64 kill_God = 16;
    if (has_kill_god()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kill_god());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 god_Body = 17;
    if (has_god_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->god_body());
    }

    // optional int64 mortal_Rate = 18;
    if (has_mortal_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mortal_rate());
    }

    // optional int64 mortal_Resist = 19;
    if (has_mortal_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mortal_resist());
    }

    // optional int64 fairy_Rate = 20;
    if (has_fairy_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fairy_rate());
    }

    // optional int64 fairy_Resist = 21;
    if (has_fairy_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fairy_resist());
    }

    // optional int64 god_Rate = 22;
    if (has_god_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->god_rate());
    }

    // optional int64 god_Resist = 23;
    if (has_god_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->god_resist());
    }

    // optional int64 crit_Rate = 24;
    if (has_crit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crit_rate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 crit_resit_Rate = 25;
    if (has_crit_resit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crit_resit_rate());
    }

    // optional int64 crit_Dam = 26;
    if (has_crit_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crit_dam());
    }

    // optional int64 crit_Redu = 27;
    if (has_crit_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crit_redu());
    }

    // optional int64 batter_Rate = 28;
    if (has_batter_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->batter_rate());
    }

    // optional int64 batter_Resist = 29;
    if (has_batter_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->batter_resist());
    }

    // optional int64 batter_Dam = 30;
    if (has_batter_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->batter_dam());
    }

    // optional int64 batter_Redu = 31;
    if (has_batter_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->batter_redu());
    }

    // optional int64 brkdown_Rate = 32;
    if (has_brkdown_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brkdown_rate());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 brkdown_Resist = 33;
    if (has_brkdown_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brkdown_resist());
    }

    // optional int64 dam_Add = 34;
    if (has_dam_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dam_add());
    }

    // optional int64 dam_Redu = 35;
    if (has_dam_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dam_redu());
    }

    // optional int64 all_Add = 36;
    if (has_all_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_add());
    }

    // optional int64 all_Redu = 37;
    if (has_all_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_redu());
    }

    // optional int64 skill_Add = 38;
    if (has_skill_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skill_add());
    }

    // optional int64 skill_Redu = 39;
    if (has_skill_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skill_redu());
    }

    // optional int64 rebound_Dam = 40;
    if (has_rebound_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rebound_dam());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int64 hp_Steal = 41;
    if (has_hp_steal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp_steal());
    }

    // optional int64 dodge_Rate = 42;
    if (has_dodge_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dodge_rate());
    }

    // optional int64 hit_Rate = 43;
    if (has_hit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hit_rate());
    }

    // optional int64 blk_Rate = 44;
    if (has_blk_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blk_rate());
    }

    // optional int64 brk_blk_Rate = 45;
    if (has_brk_blk_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brk_blk_rate());
    }

    // optional int64 blk_Free = 46;
    if (has_blk_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blk_free());
    }

    // optional int64 blk_Pierce = 47;
    if (has_blk_pierce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blk_pierce());
    }

    // optional int64 rel_Armor = 48;
    if (has_rel_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rel_armor());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int64 rel_Dam = 49;
    if (has_rel_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rel_dam());
    }

    // optional int64 five_Resist = 50;
    if (has_five_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->five_resist());
    }

    // optional int64 five_resist_Redu = 51;
    if (has_five_resist_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->five_resist_redu());
    }

    // optional int64 fire_Add = 52;
    if (has_fire_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fire_add());
    }

    // optional int64 fire_Redu = 53;
    if (has_fire_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fire_redu());
    }

    // optional int64 ice_Add = 54;
    if (has_ice_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ice_add());
    }

    // optional int64 ice_Redu = 55;
    if (has_ice_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ice_redu());
    }

    // optional int64 thunder_Add = 56;
    if (has_thunder_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->thunder_add());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int64 thunder_Rdu = 57;
    if (has_thunder_rdu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->thunder_rdu());
    }

    // optional int64 player_Add = 58;
    if (has_player_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_add());
    }

    // optional int64 player_Redu = 59;
    if (has_player_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_redu());
    }

    // optional int64 leader_Add = 60;
    if (has_leader_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_add());
    }

    // optional int64 leader_Redu = 61;
    if (has_leader_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_redu());
    }

    // optional int64 mon_Add = 62;
    if (has_mon_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mon_add());
    }

    // optional int64 mon_Redu = 63;
    if (has_mon_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mon_redu());
    }

    // optional int64 var_Redu = 64;
    if (has_var_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->var_redu());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int64 var_Add = 65;
    if (has_var_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->var_add());
    }

    // optional int64 unusual_Resist = 66;
    if (has_unusual_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unusual_resist());
    }

    // optional int64 unusual_Hit = 67;
    if (has_unusual_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unusual_hit());
    }

    // optional int64 hp_Recover = 68;
    if (has_hp_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp_recover());
    }

    // optional int64 unusual_Add = 69;
    if (has_unusual_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unusual_add());
    }

    // optional int64 fix_Recover = 70;
    if (has_fix_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fix_recover());
    }

    // optional int64 high_hp_Add = 71;
    if (has_high_hp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->high_hp_add());
    }

    // optional int64 recover_hp_Add = 72;
    if (has_recover_hp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recover_hp_add());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int64 week_Add = 73;
    if (has_week_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->week_add());
    }

    // optional int64 shield = 74;
    if (has_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shield());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monstervalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monstervalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monstervalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monstervalue::MergeFrom(const monstervalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_monsterlv()) {
      set_monsterlv(from.monsterlv());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_brk_armor()) {
      set_brk_armor(from.brk_armor());
    }
    if (from.has_five_dam()) {
      set_five_dam(from.five_dam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_five_armor()) {
      set_five_armor(from.five_armor());
    }
    if (from.has_thump_rate()) {
      set_thump_rate(from.thump_rate());
    }
    if (from.has_thump_resist()) {
      set_thump_resist(from.thump_resist());
    }
    if (from.has_sky()) {
      set_sky(from.sky());
    }
    if (from.has_sky_dam()) {
      set_sky_dam(from.sky_dam());
    }
    if (from.has_sky_redu_resist()) {
      set_sky_redu_resist(from.sky_redu_resist());
    }
    if (from.has_sky_resist()) {
      set_sky_resist(from.sky_resist());
    }
    if (from.has_kill_god()) {
      set_kill_god(from.kill_god());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_god_body()) {
      set_god_body(from.god_body());
    }
    if (from.has_mortal_rate()) {
      set_mortal_rate(from.mortal_rate());
    }
    if (from.has_mortal_resist()) {
      set_mortal_resist(from.mortal_resist());
    }
    if (from.has_fairy_rate()) {
      set_fairy_rate(from.fairy_rate());
    }
    if (from.has_fairy_resist()) {
      set_fairy_resist(from.fairy_resist());
    }
    if (from.has_god_rate()) {
      set_god_rate(from.god_rate());
    }
    if (from.has_god_resist()) {
      set_god_resist(from.god_resist());
    }
    if (from.has_crit_rate()) {
      set_crit_rate(from.crit_rate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_crit_resit_rate()) {
      set_crit_resit_rate(from.crit_resit_rate());
    }
    if (from.has_crit_dam()) {
      set_crit_dam(from.crit_dam());
    }
    if (from.has_crit_redu()) {
      set_crit_redu(from.crit_redu());
    }
    if (from.has_batter_rate()) {
      set_batter_rate(from.batter_rate());
    }
    if (from.has_batter_resist()) {
      set_batter_resist(from.batter_resist());
    }
    if (from.has_batter_dam()) {
      set_batter_dam(from.batter_dam());
    }
    if (from.has_batter_redu()) {
      set_batter_redu(from.batter_redu());
    }
    if (from.has_brkdown_rate()) {
      set_brkdown_rate(from.brkdown_rate());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_brkdown_resist()) {
      set_brkdown_resist(from.brkdown_resist());
    }
    if (from.has_dam_add()) {
      set_dam_add(from.dam_add());
    }
    if (from.has_dam_redu()) {
      set_dam_redu(from.dam_redu());
    }
    if (from.has_all_add()) {
      set_all_add(from.all_add());
    }
    if (from.has_all_redu()) {
      set_all_redu(from.all_redu());
    }
    if (from.has_skill_add()) {
      set_skill_add(from.skill_add());
    }
    if (from.has_skill_redu()) {
      set_skill_redu(from.skill_redu());
    }
    if (from.has_rebound_dam()) {
      set_rebound_dam(from.rebound_dam());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_hp_steal()) {
      set_hp_steal(from.hp_steal());
    }
    if (from.has_dodge_rate()) {
      set_dodge_rate(from.dodge_rate());
    }
    if (from.has_hit_rate()) {
      set_hit_rate(from.hit_rate());
    }
    if (from.has_blk_rate()) {
      set_blk_rate(from.blk_rate());
    }
    if (from.has_brk_blk_rate()) {
      set_brk_blk_rate(from.brk_blk_rate());
    }
    if (from.has_blk_free()) {
      set_blk_free(from.blk_free());
    }
    if (from.has_blk_pierce()) {
      set_blk_pierce(from.blk_pierce());
    }
    if (from.has_rel_armor()) {
      set_rel_armor(from.rel_armor());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_rel_dam()) {
      set_rel_dam(from.rel_dam());
    }
    if (from.has_five_resist()) {
      set_five_resist(from.five_resist());
    }
    if (from.has_five_resist_redu()) {
      set_five_resist_redu(from.five_resist_redu());
    }
    if (from.has_fire_add()) {
      set_fire_add(from.fire_add());
    }
    if (from.has_fire_redu()) {
      set_fire_redu(from.fire_redu());
    }
    if (from.has_ice_add()) {
      set_ice_add(from.ice_add());
    }
    if (from.has_ice_redu()) {
      set_ice_redu(from.ice_redu());
    }
    if (from.has_thunder_add()) {
      set_thunder_add(from.thunder_add());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_thunder_rdu()) {
      set_thunder_rdu(from.thunder_rdu());
    }
    if (from.has_player_add()) {
      set_player_add(from.player_add());
    }
    if (from.has_player_redu()) {
      set_player_redu(from.player_redu());
    }
    if (from.has_leader_add()) {
      set_leader_add(from.leader_add());
    }
    if (from.has_leader_redu()) {
      set_leader_redu(from.leader_redu());
    }
    if (from.has_mon_add()) {
      set_mon_add(from.mon_add());
    }
    if (from.has_mon_redu()) {
      set_mon_redu(from.mon_redu());
    }
    if (from.has_var_redu()) {
      set_var_redu(from.var_redu());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_var_add()) {
      set_var_add(from.var_add());
    }
    if (from.has_unusual_resist()) {
      set_unusual_resist(from.unusual_resist());
    }
    if (from.has_unusual_hit()) {
      set_unusual_hit(from.unusual_hit());
    }
    if (from.has_hp_recover()) {
      set_hp_recover(from.hp_recover());
    }
    if (from.has_unusual_add()) {
      set_unusual_add(from.unusual_add());
    }
    if (from.has_fix_recover()) {
      set_fix_recover(from.fix_recover());
    }
    if (from.has_high_hp_add()) {
      set_high_hp_add(from.high_hp_add());
    }
    if (from.has_recover_hp_add()) {
      set_recover_hp_add(from.recover_hp_add());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_week_add()) {
      set_week_add(from.week_add());
    }
    if (from.has_shield()) {
      set_shield(from.shield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monstervalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monstervalue::CopyFrom(const monstervalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monstervalue::IsInitialized() const {

  return true;
}

void monstervalue::Swap(monstervalue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(monsterlv_, other->monsterlv_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(brk_armor_, other->brk_armor_);
    std::swap(five_dam_, other->five_dam_);
    std::swap(five_armor_, other->five_armor_);
    std::swap(thump_rate_, other->thump_rate_);
    std::swap(thump_resist_, other->thump_resist_);
    std::swap(sky_, other->sky_);
    std::swap(sky_dam_, other->sky_dam_);
    std::swap(sky_redu_resist_, other->sky_redu_resist_);
    std::swap(sky_resist_, other->sky_resist_);
    std::swap(kill_god_, other->kill_god_);
    std::swap(god_body_, other->god_body_);
    std::swap(mortal_rate_, other->mortal_rate_);
    std::swap(mortal_resist_, other->mortal_resist_);
    std::swap(fairy_rate_, other->fairy_rate_);
    std::swap(fairy_resist_, other->fairy_resist_);
    std::swap(god_rate_, other->god_rate_);
    std::swap(god_resist_, other->god_resist_);
    std::swap(crit_rate_, other->crit_rate_);
    std::swap(crit_resit_rate_, other->crit_resit_rate_);
    std::swap(crit_dam_, other->crit_dam_);
    std::swap(crit_redu_, other->crit_redu_);
    std::swap(batter_rate_, other->batter_rate_);
    std::swap(batter_resist_, other->batter_resist_);
    std::swap(batter_dam_, other->batter_dam_);
    std::swap(batter_redu_, other->batter_redu_);
    std::swap(brkdown_rate_, other->brkdown_rate_);
    std::swap(brkdown_resist_, other->brkdown_resist_);
    std::swap(dam_add_, other->dam_add_);
    std::swap(dam_redu_, other->dam_redu_);
    std::swap(all_add_, other->all_add_);
    std::swap(all_redu_, other->all_redu_);
    std::swap(skill_add_, other->skill_add_);
    std::swap(skill_redu_, other->skill_redu_);
    std::swap(rebound_dam_, other->rebound_dam_);
    std::swap(hp_steal_, other->hp_steal_);
    std::swap(dodge_rate_, other->dodge_rate_);
    std::swap(hit_rate_, other->hit_rate_);
    std::swap(blk_rate_, other->blk_rate_);
    std::swap(brk_blk_rate_, other->brk_blk_rate_);
    std::swap(blk_free_, other->blk_free_);
    std::swap(blk_pierce_, other->blk_pierce_);
    std::swap(rel_armor_, other->rel_armor_);
    std::swap(rel_dam_, other->rel_dam_);
    std::swap(five_resist_, other->five_resist_);
    std::swap(five_resist_redu_, other->five_resist_redu_);
    std::swap(fire_add_, other->fire_add_);
    std::swap(fire_redu_, other->fire_redu_);
    std::swap(ice_add_, other->ice_add_);
    std::swap(ice_redu_, other->ice_redu_);
    std::swap(thunder_add_, other->thunder_add_);
    std::swap(thunder_rdu_, other->thunder_rdu_);
    std::swap(player_add_, other->player_add_);
    std::swap(player_redu_, other->player_redu_);
    std::swap(leader_add_, other->leader_add_);
    std::swap(leader_redu_, other->leader_redu_);
    std::swap(mon_add_, other->mon_add_);
    std::swap(mon_redu_, other->mon_redu_);
    std::swap(var_redu_, other->var_redu_);
    std::swap(var_add_, other->var_add_);
    std::swap(unusual_resist_, other->unusual_resist_);
    std::swap(unusual_hit_, other->unusual_hit_);
    std::swap(hp_recover_, other->hp_recover_);
    std::swap(unusual_add_, other->unusual_add_);
    std::swap(fix_recover_, other->fix_recover_);
    std::swap(high_hp_add_, other->high_hp_add_);
    std::swap(recover_hp_add_, other->recover_hp_add_);
    std::swap(week_add_, other->week_add_);
    std::swap(shield_, other->shield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monstervalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monstervalue_descriptor_;
  metadata.reflection = monstervalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_monstervalue::kMonstervalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_monstervalue::Sheet_monstervalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_monstervalue::InitAsDefaultInstance() {
}

Sheet_monstervalue::Sheet_monstervalue(const Sheet_monstervalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_monstervalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_monstervalue::~Sheet_monstervalue() {
  SharedDtor();
}

void Sheet_monstervalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_monstervalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_monstervalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_monstervalue_descriptor_;
}

const Sheet_monstervalue& Sheet_monstervalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

Sheet_monstervalue* Sheet_monstervalue::default_instance_ = NULL;

Sheet_monstervalue* Sheet_monstervalue::New() const {
  return new Sheet_monstervalue;
}

void Sheet_monstervalue::Clear() {
  monstervalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_monstervalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.monstervalue monstervalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monstervalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monstervalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monstervalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_monstervalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.monstervalue monstervalue_List = 1;
  for (int i = 0; i < this->monstervalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monstervalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_monstervalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.monstervalue monstervalue_List = 1;
  for (int i = 0; i < this->monstervalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monstervalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_monstervalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.monstervalue monstervalue_List = 1;
  total_size += 1 * this->monstervalue_list_size();
  for (int i = 0; i < this->monstervalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monstervalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_monstervalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_monstervalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_monstervalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_monstervalue::MergeFrom(const Sheet_monstervalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  monstervalue_list_.MergeFrom(from.monstervalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_monstervalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_monstervalue::CopyFrom(const Sheet_monstervalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_monstervalue::IsInitialized() const {

  return true;
}

void Sheet_monstervalue::Swap(Sheet_monstervalue* other) {
  if (other != this) {
    monstervalue_list_.Swap(&other->monstervalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_monstervalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_monstervalue_descriptor_;
  metadata.reflection = Sheet_monstervalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monstervalueParam::kIdFieldNumber;
const int monstervalueParam::kPMaxHpFieldNumber;
const int monstervalueParam::kPAtkFieldNumber;
const int monstervalueParam::kPDefFieldNumber;
const int monstervalueParam::kPBrkArmorFieldNumber;
const int monstervalueParam::kPFiveDamFieldNumber;
const int monstervalueParam::kPFiveArmorFieldNumber;
const int monstervalueParam::kPThumpRateFieldNumber;
const int monstervalueParam::kPThumpResistFieldNumber;
const int monstervalueParam::kPSkyFieldNumber;
const int monstervalueParam::kPSkyDamFieldNumber;
const int monstervalueParam::kPSkyReduResistFieldNumber;
const int monstervalueParam::kPSkyResistFieldNumber;
const int monstervalueParam::kPKillGodFieldNumber;
const int monstervalueParam::kPGodBodyFieldNumber;
const int monstervalueParam::kPMortalRateFieldNumber;
const int monstervalueParam::kPMortalResistFieldNumber;
const int monstervalueParam::kPFairyRateFieldNumber;
const int monstervalueParam::kPFairyResistFieldNumber;
const int monstervalueParam::kPGodRateFieldNumber;
const int monstervalueParam::kPGodResistFieldNumber;
const int monstervalueParam::kPCritRateFieldNumber;
const int monstervalueParam::kPCritResitRateFieldNumber;
const int monstervalueParam::kPCritDamFieldNumber;
const int monstervalueParam::kPCritReduFieldNumber;
const int monstervalueParam::kPBatterRateFieldNumber;
const int monstervalueParam::kPBatterResistFieldNumber;
const int monstervalueParam::kPBatterDamFieldNumber;
const int monstervalueParam::kPBatterReduFieldNumber;
const int monstervalueParam::kPBrkdownRateFieldNumber;
const int monstervalueParam::kPBrkdownResistFieldNumber;
const int monstervalueParam::kPDamAddFieldNumber;
const int monstervalueParam::kPDamReduFieldNumber;
const int monstervalueParam::kPAllAddFieldNumber;
const int monstervalueParam::kPAllReduFieldNumber;
const int monstervalueParam::kPSkillAddFieldNumber;
const int monstervalueParam::kPSkillReduFieldNumber;
const int monstervalueParam::kPReboundDamFieldNumber;
const int monstervalueParam::kPHpStealFieldNumber;
const int monstervalueParam::kPDodgeRateFieldNumber;
const int monstervalueParam::kPHitRateFieldNumber;
const int monstervalueParam::kPBlkRateFieldNumber;
const int monstervalueParam::kPBrkBlkRateFieldNumber;
const int monstervalueParam::kPBlkFreeFieldNumber;
const int monstervalueParam::kPBlkPierceFieldNumber;
const int monstervalueParam::kPRelArmorFieldNumber;
const int monstervalueParam::kPRelDamFieldNumber;
const int monstervalueParam::kPFiveResistFieldNumber;
const int monstervalueParam::kPFiveResistReduFieldNumber;
const int monstervalueParam::kPFireAddFieldNumber;
const int monstervalueParam::kPFireReduFieldNumber;
const int monstervalueParam::kPIceAddFieldNumber;
const int monstervalueParam::kPIceReduFieldNumber;
const int monstervalueParam::kPThunderAddFieldNumber;
const int monstervalueParam::kPThunderRduFieldNumber;
const int monstervalueParam::kPPlayerAddFieldNumber;
const int monstervalueParam::kPPlayerReduFieldNumber;
const int monstervalueParam::kPLeaderAddFieldNumber;
const int monstervalueParam::kPLeaderReduFieldNumber;
const int monstervalueParam::kPMonAddFieldNumber;
const int monstervalueParam::kPMonReduFieldNumber;
const int monstervalueParam::kPVarReduFieldNumber;
const int monstervalueParam::kPVarAddFieldNumber;
const int monstervalueParam::kPUnusualResistFieldNumber;
const int monstervalueParam::kPUnusualHitFieldNumber;
const int monstervalueParam::kPHpRecoverFieldNumber;
const int monstervalueParam::kPUnusualAddFieldNumber;
const int monstervalueParam::kPFixRecoverFieldNumber;
const int monstervalueParam::kPHighHpAddFieldNumber;
const int monstervalueParam::kPRecoverHpAddFieldNumber;
const int monstervalueParam::kPWeekAddFieldNumber;
const int monstervalueParam::kShieldFieldNumber;
#endif  // !_MSC_VER

monstervalueParam::monstervalueParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monstervalueParam::InitAsDefaultInstance() {
}

monstervalueParam::monstervalueParam(const monstervalueParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monstervalueParam::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  p_max_hp_ = 0;
  p_atk_ = 0;
  p_def_ = 0;
  p_brk_armor_ = 0;
  p_five_dam_ = 0;
  p_five_armor_ = 0;
  p_thump_rate_ = 0;
  p_thump_resist_ = 0;
  p_sky_ = 0;
  p_sky_dam_ = 0;
  p_sky_redu_resist_ = 0;
  p_sky_resist_ = 0;
  p_kill_god_ = 0;
  p_god_body_ = 0;
  p_mortal_rate_ = 0;
  p_mortal_resist_ = 0;
  p_fairy_rate_ = 0;
  p_fairy_resist_ = 0;
  p_god_rate_ = 0;
  p_god_resist_ = 0;
  p_crit_rate_ = 0;
  p_crit_resit_rate_ = 0;
  p_crit_dam_ = 0;
  p_crit_redu_ = 0;
  p_batter_rate_ = 0;
  p_batter_resist_ = 0;
  p_batter_dam_ = 0;
  p_batter_redu_ = 0;
  p_brkdown_rate_ = 0;
  p_brkdown_resist_ = 0;
  p_dam_add_ = 0;
  p_dam_redu_ = 0;
  p_all_add_ = 0;
  p_all_redu_ = 0;
  p_skill_add_ = 0;
  p_skill_redu_ = 0;
  p_rebound_dam_ = 0;
  p_hp_steal_ = 0;
  p_dodge_rate_ = 0;
  p_hit_rate_ = 0;
  p_blk_rate_ = 0;
  p_brk_blk_rate_ = 0;
  p_blk_free_ = 0;
  p_blk_pierce_ = 0;
  p_rel_armor_ = 0;
  p_rel_dam_ = 0;
  p_five_resist_ = 0;
  p_five_resist_redu_ = 0;
  p_fire_add_ = 0;
  p_fire_redu_ = 0;
  p_ice_add_ = 0;
  p_ice_redu_ = 0;
  p_thunder_add_ = 0;
  p_thunder_rdu_ = 0;
  p_player_add_ = 0;
  p_player_redu_ = 0;
  p_leader_add_ = 0;
  p_leader_redu_ = 0;
  p_mon_add_ = 0;
  p_mon_redu_ = 0;
  p_var_redu_ = 0;
  p_var_add_ = 0;
  p_unusual_resist_ = 0;
  p_unusual_hit_ = 0;
  p_hp_recover_ = 0;
  p_unusual_add_ = 0;
  p_fix_recover_ = 0;
  p_high_hp_add_ = 0;
  p_recover_hp_add_ = 0;
  p_week_add_ = 0;
  shield_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monstervalueParam::~monstervalueParam() {
  SharedDtor();
}

void monstervalueParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monstervalueParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monstervalueParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monstervalueParam_descriptor_;
}

const monstervalueParam& monstervalueParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monstervalueParam* monstervalueParam::default_instance_ = NULL;

monstervalueParam* monstervalueParam::New() const {
  return new monstervalueParam;
}

void monstervalueParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    p_max_hp_ = 0;
    p_atk_ = 0;
    p_def_ = 0;
    p_brk_armor_ = 0;
    p_five_dam_ = 0;
    p_five_armor_ = 0;
    p_thump_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    p_thump_resist_ = 0;
    p_sky_ = 0;
    p_sky_dam_ = 0;
    p_sky_redu_resist_ = 0;
    p_sky_resist_ = 0;
    p_kill_god_ = 0;
    p_god_body_ = 0;
    p_mortal_rate_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    p_mortal_resist_ = 0;
    p_fairy_rate_ = 0;
    p_fairy_resist_ = 0;
    p_god_rate_ = 0;
    p_god_resist_ = 0;
    p_crit_rate_ = 0;
    p_crit_resit_rate_ = 0;
    p_crit_dam_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    p_crit_redu_ = 0;
    p_batter_rate_ = 0;
    p_batter_resist_ = 0;
    p_batter_dam_ = 0;
    p_batter_redu_ = 0;
    p_brkdown_rate_ = 0;
    p_brkdown_resist_ = 0;
    p_dam_add_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    p_dam_redu_ = 0;
    p_all_add_ = 0;
    p_all_redu_ = 0;
    p_skill_add_ = 0;
    p_skill_redu_ = 0;
    p_rebound_dam_ = 0;
    p_hp_steal_ = 0;
    p_dodge_rate_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    p_hit_rate_ = 0;
    p_blk_rate_ = 0;
    p_brk_blk_rate_ = 0;
    p_blk_free_ = 0;
    p_blk_pierce_ = 0;
    p_rel_armor_ = 0;
    p_rel_dam_ = 0;
    p_five_resist_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    p_five_resist_redu_ = 0;
    p_fire_add_ = 0;
    p_fire_redu_ = 0;
    p_ice_add_ = 0;
    p_ice_redu_ = 0;
    p_thunder_add_ = 0;
    p_thunder_rdu_ = 0;
    p_player_add_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    p_player_redu_ = 0;
    p_leader_add_ = 0;
    p_leader_redu_ = 0;
    p_mon_add_ = 0;
    p_mon_redu_ = 0;
    p_var_redu_ = 0;
    p_var_add_ = 0;
    p_unusual_resist_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    p_unusual_hit_ = 0;
    p_hp_recover_ = 0;
    p_unusual_add_ = 0;
    p_fix_recover_ = 0;
    p_high_hp_add_ = 0;
    p_recover_hp_add_ = 0;
    p_week_add_ = 0;
    shield_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monstervalueParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_P_max_Hp;
        break;
      }

      // optional int32 P_max_Hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_max_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_max_hp_)));
          set_has_p_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_P_atk;
        break;
      }

      // optional int32 P_atk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_atk_)));
          set_has_p_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_P_def;
        break;
      }

      // optional int32 P_def = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_def_)));
          set_has_p_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_P_brk_Armor;
        break;
      }

      // optional int32 P_brk_Armor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_brk_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_brk_armor_)));
          set_has_p_brk_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_P_five_Dam;
        break;
      }

      // optional int32 P_five_Dam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_five_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_five_dam_)));
          set_has_p_five_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_P_five_Armor;
        break;
      }

      // optional int32 P_five_Armor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_five_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_five_armor_)));
          set_has_p_five_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_P_thump_Rate;
        break;
      }

      // optional int32 P_thump_Rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_thump_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_thump_rate_)));
          set_has_p_thump_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_P_thump_Resist;
        break;
      }

      // optional int32 P_thump_Resist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_thump_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_thump_resist_)));
          set_has_p_thump_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_P_sky;
        break;
      }

      // optional int32 P_sky = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_sky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_sky_)));
          set_has_p_sky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_P_sky_Dam;
        break;
      }

      // optional int32 P_sky_Dam = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_sky_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_sky_dam_)));
          set_has_p_sky_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_P_sky_Redu_Resist;
        break;
      }

      // optional int32 P_sky_Redu_Resist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_sky_Redu_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_sky_redu_resist_)));
          set_has_p_sky_redu_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_P_sky_Resist;
        break;
      }

      // optional int32 P_sky_Resist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_sky_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_sky_resist_)));
          set_has_p_sky_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_P_kill_God;
        break;
      }

      // optional int32 P_kill_God = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_kill_God:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_kill_god_)));
          set_has_p_kill_god();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_P_god_Body;
        break;
      }

      // optional int32 P_god_Body = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_god_Body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_god_body_)));
          set_has_p_god_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_P_mortal_Rate;
        break;
      }

      // optional int32 P_mortal_Rate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_mortal_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_mortal_rate_)));
          set_has_p_mortal_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_P_mortal_Resist;
        break;
      }

      // optional int32 P_mortal_Resist = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_mortal_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_mortal_resist_)));
          set_has_p_mortal_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_P_fairy_Rate;
        break;
      }

      // optional int32 P_fairy_Rate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_fairy_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_fairy_rate_)));
          set_has_p_fairy_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_P_fairy_Resist;
        break;
      }

      // optional int32 P_fairy_Resist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_fairy_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_fairy_resist_)));
          set_has_p_fairy_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_P_god_Rate;
        break;
      }

      // optional int32 P_god_Rate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_god_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_god_rate_)));
          set_has_p_god_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_P_god_Resist;
        break;
      }

      // optional int32 P_god_Resist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_god_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_god_resist_)));
          set_has_p_god_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_P_crit_Rate;
        break;
      }

      // optional int32 P_crit_Rate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_crit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_crit_rate_)));
          set_has_p_crit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_P_crit_resit_Rate;
        break;
      }

      // optional int32 P_crit_resit_Rate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_crit_resit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_crit_resit_rate_)));
          set_has_p_crit_resit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_P_crit_Dam;
        break;
      }

      // optional int32 P_crit_Dam = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_crit_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_crit_dam_)));
          set_has_p_crit_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_P_crit_Redu;
        break;
      }

      // optional int32 P_crit_Redu = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_crit_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_crit_redu_)));
          set_has_p_crit_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_P_batter_Rate;
        break;
      }

      // optional int32 P_batter_Rate = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_batter_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_batter_rate_)));
          set_has_p_batter_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_P_batter_Resist;
        break;
      }

      // optional int32 P_batter_Resist = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_batter_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_batter_resist_)));
          set_has_p_batter_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_P_batter_Dam;
        break;
      }

      // optional int32 P_batter_Dam = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_batter_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_batter_dam_)));
          set_has_p_batter_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_P_batter_Redu;
        break;
      }

      // optional int32 P_batter_Redu = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_batter_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_batter_redu_)));
          set_has_p_batter_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_P_brkdown_Rate;
        break;
      }

      // optional int32 P_brkdown_Rate = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_brkdown_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_brkdown_rate_)));
          set_has_p_brkdown_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_P_brkdown_Resist;
        break;
      }

      // optional int32 P_brkdown_Resist = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_brkdown_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_brkdown_resist_)));
          set_has_p_brkdown_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_P_dam_Add;
        break;
      }

      // optional int32 P_dam_Add = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_dam_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_dam_add_)));
          set_has_p_dam_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_P_dam_Redu;
        break;
      }

      // optional int32 P_dam_Redu = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_dam_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_dam_redu_)));
          set_has_p_dam_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_P_all_Add;
        break;
      }

      // optional int32 P_all_Add = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_all_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_all_add_)));
          set_has_p_all_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_P_all_Redu;
        break;
      }

      // optional int32 P_all_Redu = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_all_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_all_redu_)));
          set_has_p_all_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_P_skill_Add;
        break;
      }

      // optional int32 P_skill_Add = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_skill_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_skill_add_)));
          set_has_p_skill_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_P_skill_Redu;
        break;
      }

      // optional int32 P_skill_Redu = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_skill_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_skill_redu_)));
          set_has_p_skill_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_P_rebound_Dam;
        break;
      }

      // optional int32 P_rebound_Dam = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_rebound_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_rebound_dam_)));
          set_has_p_rebound_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_P_hp_Steal;
        break;
      }

      // optional int32 P_hp_Steal = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_hp_Steal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_hp_steal_)));
          set_has_p_hp_steal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_P_dodge_Rate;
        break;
      }

      // optional int32 P_dodge_Rate = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_dodge_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_dodge_rate_)));
          set_has_p_dodge_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_P_hit_Rate;
        break;
      }

      // optional int32 P_hit_Rate = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_hit_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_hit_rate_)));
          set_has_p_hit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_P_blk_Rate;
        break;
      }

      // optional int32 P_blk_Rate = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_blk_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_blk_rate_)));
          set_has_p_blk_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_P_brk_blk_Rate;
        break;
      }

      // optional int32 P_brk_blk_Rate = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_brk_blk_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_brk_blk_rate_)));
          set_has_p_brk_blk_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_P_blk_Free;
        break;
      }

      // optional int32 P_blk_Free = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_blk_Free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_blk_free_)));
          set_has_p_blk_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_P_blk_Pierce;
        break;
      }

      // optional int32 P_blk_Pierce = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_blk_Pierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_blk_pierce_)));
          set_has_p_blk_pierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_P_rel_Armor;
        break;
      }

      // optional int32 P_rel_Armor = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_rel_Armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_rel_armor_)));
          set_has_p_rel_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_P_rel_Dam;
        break;
      }

      // optional int32 P_rel_Dam = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_rel_Dam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_rel_dam_)));
          set_has_p_rel_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_P_five_Resist;
        break;
      }

      // optional int32 P_five_Resist = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_five_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_five_resist_)));
          set_has_p_five_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_P_five_resist_Redu;
        break;
      }

      // optional int32 P_five_resist_Redu = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_five_resist_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_five_resist_redu_)));
          set_has_p_five_resist_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_P_fire_Add;
        break;
      }

      // optional int32 P_fire_Add = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_fire_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_fire_add_)));
          set_has_p_fire_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_P_fire_Redu;
        break;
      }

      // optional int32 P_fire_Redu = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_fire_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_fire_redu_)));
          set_has_p_fire_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_P_ice_Add;
        break;
      }

      // optional int32 P_ice_Add = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_ice_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_ice_add_)));
          set_has_p_ice_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_P_ice_Redu;
        break;
      }

      // optional int32 P_ice_Redu = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_ice_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_ice_redu_)));
          set_has_p_ice_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_P_thunder_Add;
        break;
      }

      // optional int32 P_thunder_Add = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_thunder_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_thunder_add_)));
          set_has_p_thunder_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_P_thunder_Rdu;
        break;
      }

      // optional int32 P_thunder_Rdu = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_thunder_Rdu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_thunder_rdu_)));
          set_has_p_thunder_rdu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_P_player_Add;
        break;
      }

      // optional int32 P_player_Add = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_player_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_player_add_)));
          set_has_p_player_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_P_player_Redu;
        break;
      }

      // optional int32 P_player_Redu = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_player_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_player_redu_)));
          set_has_p_player_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_P_leader_Add;
        break;
      }

      // optional int32 P_leader_Add = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_leader_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_leader_add_)));
          set_has_p_leader_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_P_leader_Redu;
        break;
      }

      // optional int32 P_leader_Redu = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_leader_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_leader_redu_)));
          set_has_p_leader_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_P_mon_Add;
        break;
      }

      // optional int32 P_mon_Add = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_mon_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_mon_add_)));
          set_has_p_mon_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_P_mon_Redu;
        break;
      }

      // optional int32 P_mon_Redu = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_mon_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_mon_redu_)));
          set_has_p_mon_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_P_var_Redu;
        break;
      }

      // optional int32 P_var_Redu = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_var_Redu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_var_redu_)));
          set_has_p_var_redu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_P_var_Add;
        break;
      }

      // optional int32 P_var_Add = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_var_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_var_add_)));
          set_has_p_var_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_P_unusual_Resist;
        break;
      }

      // optional int32 P_unusual_Resist = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_unusual_Resist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_unusual_resist_)));
          set_has_p_unusual_resist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_P_unusual_Hit;
        break;
      }

      // optional int32 P_unusual_Hit = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_unusual_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_unusual_hit_)));
          set_has_p_unusual_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_P_hp_Recover;
        break;
      }

      // optional int32 P_hp_Recover = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_hp_Recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_hp_recover_)));
          set_has_p_hp_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_P_unusual_Add;
        break;
      }

      // optional int32 P_unusual_Add = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_unusual_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_unusual_add_)));
          set_has_p_unusual_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_P_fix_Recover;
        break;
      }

      // optional int32 P_fix_Recover = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_fix_Recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_fix_recover_)));
          set_has_p_fix_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_P_high_hp_Add;
        break;
      }

      // optional int32 P_high_hp_Add = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_high_hp_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_high_hp_add_)));
          set_has_p_high_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_P_recover_hp_Add;
        break;
      }

      // optional int32 P_recover_hp_Add = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_recover_hp_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_recover_hp_add_)));
          set_has_p_recover_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_P_week_Add;
        break;
      }

      // optional int32 P_week_Add = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_P_week_Add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p_week_add_)));
          set_has_p_week_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_shield;
        break;
      }

      // optional int64 shield = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shield_)));
          set_has_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monstervalueParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 P_max_Hp = 2;
  if (has_p_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->p_max_hp(), output);
  }

  // optional int32 P_atk = 3;
  if (has_p_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->p_atk(), output);
  }

  // optional int32 P_def = 4;
  if (has_p_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->p_def(), output);
  }

  // optional int32 P_brk_Armor = 5;
  if (has_p_brk_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->p_brk_armor(), output);
  }

  // optional int32 P_five_Dam = 6;
  if (has_p_five_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->p_five_dam(), output);
  }

  // optional int32 P_five_Armor = 7;
  if (has_p_five_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->p_five_armor(), output);
  }

  // optional int32 P_thump_Rate = 8;
  if (has_p_thump_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->p_thump_rate(), output);
  }

  // optional int32 P_thump_Resist = 9;
  if (has_p_thump_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->p_thump_resist(), output);
  }

  // optional int32 P_sky = 10;
  if (has_p_sky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->p_sky(), output);
  }

  // optional int32 P_sky_Dam = 11;
  if (has_p_sky_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->p_sky_dam(), output);
  }

  // optional int32 P_sky_Redu_Resist = 12;
  if (has_p_sky_redu_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->p_sky_redu_resist(), output);
  }

  // optional int32 P_sky_Resist = 13;
  if (has_p_sky_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->p_sky_resist(), output);
  }

  // optional int32 P_kill_God = 14;
  if (has_p_kill_god()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->p_kill_god(), output);
  }

  // optional int32 P_god_Body = 15;
  if (has_p_god_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->p_god_body(), output);
  }

  // optional int32 P_mortal_Rate = 16;
  if (has_p_mortal_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->p_mortal_rate(), output);
  }

  // optional int32 P_mortal_Resist = 17;
  if (has_p_mortal_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->p_mortal_resist(), output);
  }

  // optional int32 P_fairy_Rate = 18;
  if (has_p_fairy_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->p_fairy_rate(), output);
  }

  // optional int32 P_fairy_Resist = 19;
  if (has_p_fairy_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->p_fairy_resist(), output);
  }

  // optional int32 P_god_Rate = 20;
  if (has_p_god_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->p_god_rate(), output);
  }

  // optional int32 P_god_Resist = 21;
  if (has_p_god_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->p_god_resist(), output);
  }

  // optional int32 P_crit_Rate = 22;
  if (has_p_crit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->p_crit_rate(), output);
  }

  // optional int32 P_crit_resit_Rate = 23;
  if (has_p_crit_resit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->p_crit_resit_rate(), output);
  }

  // optional int32 P_crit_Dam = 24;
  if (has_p_crit_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->p_crit_dam(), output);
  }

  // optional int32 P_crit_Redu = 25;
  if (has_p_crit_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->p_crit_redu(), output);
  }

  // optional int32 P_batter_Rate = 26;
  if (has_p_batter_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->p_batter_rate(), output);
  }

  // optional int32 P_batter_Resist = 27;
  if (has_p_batter_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->p_batter_resist(), output);
  }

  // optional int32 P_batter_Dam = 28;
  if (has_p_batter_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->p_batter_dam(), output);
  }

  // optional int32 P_batter_Redu = 29;
  if (has_p_batter_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->p_batter_redu(), output);
  }

  // optional int32 P_brkdown_Rate = 30;
  if (has_p_brkdown_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->p_brkdown_rate(), output);
  }

  // optional int32 P_brkdown_Resist = 31;
  if (has_p_brkdown_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->p_brkdown_resist(), output);
  }

  // optional int32 P_dam_Add = 32;
  if (has_p_dam_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->p_dam_add(), output);
  }

  // optional int32 P_dam_Redu = 33;
  if (has_p_dam_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->p_dam_redu(), output);
  }

  // optional int32 P_all_Add = 34;
  if (has_p_all_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->p_all_add(), output);
  }

  // optional int32 P_all_Redu = 35;
  if (has_p_all_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->p_all_redu(), output);
  }

  // optional int32 P_skill_Add = 36;
  if (has_p_skill_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->p_skill_add(), output);
  }

  // optional int32 P_skill_Redu = 37;
  if (has_p_skill_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->p_skill_redu(), output);
  }

  // optional int32 P_rebound_Dam = 38;
  if (has_p_rebound_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->p_rebound_dam(), output);
  }

  // optional int32 P_hp_Steal = 39;
  if (has_p_hp_steal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->p_hp_steal(), output);
  }

  // optional int32 P_dodge_Rate = 40;
  if (has_p_dodge_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->p_dodge_rate(), output);
  }

  // optional int32 P_hit_Rate = 41;
  if (has_p_hit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->p_hit_rate(), output);
  }

  // optional int32 P_blk_Rate = 42;
  if (has_p_blk_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->p_blk_rate(), output);
  }

  // optional int32 P_brk_blk_Rate = 43;
  if (has_p_brk_blk_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->p_brk_blk_rate(), output);
  }

  // optional int32 P_blk_Free = 44;
  if (has_p_blk_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->p_blk_free(), output);
  }

  // optional int32 P_blk_Pierce = 45;
  if (has_p_blk_pierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->p_blk_pierce(), output);
  }

  // optional int32 P_rel_Armor = 46;
  if (has_p_rel_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->p_rel_armor(), output);
  }

  // optional int32 P_rel_Dam = 47;
  if (has_p_rel_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->p_rel_dam(), output);
  }

  // optional int32 P_five_Resist = 48;
  if (has_p_five_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->p_five_resist(), output);
  }

  // optional int32 P_five_resist_Redu = 49;
  if (has_p_five_resist_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->p_five_resist_redu(), output);
  }

  // optional int32 P_fire_Add = 50;
  if (has_p_fire_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->p_fire_add(), output);
  }

  // optional int32 P_fire_Redu = 51;
  if (has_p_fire_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->p_fire_redu(), output);
  }

  // optional int32 P_ice_Add = 52;
  if (has_p_ice_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->p_ice_add(), output);
  }

  // optional int32 P_ice_Redu = 53;
  if (has_p_ice_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->p_ice_redu(), output);
  }

  // optional int32 P_thunder_Add = 54;
  if (has_p_thunder_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->p_thunder_add(), output);
  }

  // optional int32 P_thunder_Rdu = 55;
  if (has_p_thunder_rdu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->p_thunder_rdu(), output);
  }

  // optional int32 P_player_Add = 56;
  if (has_p_player_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->p_player_add(), output);
  }

  // optional int32 P_player_Redu = 57;
  if (has_p_player_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->p_player_redu(), output);
  }

  // optional int32 P_leader_Add = 58;
  if (has_p_leader_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->p_leader_add(), output);
  }

  // optional int32 P_leader_Redu = 59;
  if (has_p_leader_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->p_leader_redu(), output);
  }

  // optional int32 P_mon_Add = 60;
  if (has_p_mon_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->p_mon_add(), output);
  }

  // optional int32 P_mon_Redu = 61;
  if (has_p_mon_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->p_mon_redu(), output);
  }

  // optional int32 P_var_Redu = 62;
  if (has_p_var_redu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->p_var_redu(), output);
  }

  // optional int32 P_var_Add = 63;
  if (has_p_var_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->p_var_add(), output);
  }

  // optional int32 P_unusual_Resist = 64;
  if (has_p_unusual_resist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->p_unusual_resist(), output);
  }

  // optional int32 P_unusual_Hit = 65;
  if (has_p_unusual_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->p_unusual_hit(), output);
  }

  // optional int32 P_hp_Recover = 66;
  if (has_p_hp_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->p_hp_recover(), output);
  }

  // optional int32 P_unusual_Add = 67;
  if (has_p_unusual_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->p_unusual_add(), output);
  }

  // optional int32 P_fix_Recover = 68;
  if (has_p_fix_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->p_fix_recover(), output);
  }

  // optional int32 P_high_hp_Add = 69;
  if (has_p_high_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->p_high_hp_add(), output);
  }

  // optional int32 P_recover_hp_Add = 70;
  if (has_p_recover_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->p_recover_hp_add(), output);
  }

  // optional int32 P_week_Add = 71;
  if (has_p_week_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->p_week_add(), output);
  }

  // optional int64 shield = 72;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(72, this->shield(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monstervalueParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 P_max_Hp = 2;
  if (has_p_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->p_max_hp(), target);
  }

  // optional int32 P_atk = 3;
  if (has_p_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->p_atk(), target);
  }

  // optional int32 P_def = 4;
  if (has_p_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->p_def(), target);
  }

  // optional int32 P_brk_Armor = 5;
  if (has_p_brk_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->p_brk_armor(), target);
  }

  // optional int32 P_five_Dam = 6;
  if (has_p_five_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->p_five_dam(), target);
  }

  // optional int32 P_five_Armor = 7;
  if (has_p_five_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->p_five_armor(), target);
  }

  // optional int32 P_thump_Rate = 8;
  if (has_p_thump_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->p_thump_rate(), target);
  }

  // optional int32 P_thump_Resist = 9;
  if (has_p_thump_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->p_thump_resist(), target);
  }

  // optional int32 P_sky = 10;
  if (has_p_sky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->p_sky(), target);
  }

  // optional int32 P_sky_Dam = 11;
  if (has_p_sky_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->p_sky_dam(), target);
  }

  // optional int32 P_sky_Redu_Resist = 12;
  if (has_p_sky_redu_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->p_sky_redu_resist(), target);
  }

  // optional int32 P_sky_Resist = 13;
  if (has_p_sky_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->p_sky_resist(), target);
  }

  // optional int32 P_kill_God = 14;
  if (has_p_kill_god()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->p_kill_god(), target);
  }

  // optional int32 P_god_Body = 15;
  if (has_p_god_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->p_god_body(), target);
  }

  // optional int32 P_mortal_Rate = 16;
  if (has_p_mortal_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->p_mortal_rate(), target);
  }

  // optional int32 P_mortal_Resist = 17;
  if (has_p_mortal_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->p_mortal_resist(), target);
  }

  // optional int32 P_fairy_Rate = 18;
  if (has_p_fairy_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->p_fairy_rate(), target);
  }

  // optional int32 P_fairy_Resist = 19;
  if (has_p_fairy_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->p_fairy_resist(), target);
  }

  // optional int32 P_god_Rate = 20;
  if (has_p_god_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->p_god_rate(), target);
  }

  // optional int32 P_god_Resist = 21;
  if (has_p_god_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->p_god_resist(), target);
  }

  // optional int32 P_crit_Rate = 22;
  if (has_p_crit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->p_crit_rate(), target);
  }

  // optional int32 P_crit_resit_Rate = 23;
  if (has_p_crit_resit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->p_crit_resit_rate(), target);
  }

  // optional int32 P_crit_Dam = 24;
  if (has_p_crit_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->p_crit_dam(), target);
  }

  // optional int32 P_crit_Redu = 25;
  if (has_p_crit_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->p_crit_redu(), target);
  }

  // optional int32 P_batter_Rate = 26;
  if (has_p_batter_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->p_batter_rate(), target);
  }

  // optional int32 P_batter_Resist = 27;
  if (has_p_batter_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->p_batter_resist(), target);
  }

  // optional int32 P_batter_Dam = 28;
  if (has_p_batter_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->p_batter_dam(), target);
  }

  // optional int32 P_batter_Redu = 29;
  if (has_p_batter_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->p_batter_redu(), target);
  }

  // optional int32 P_brkdown_Rate = 30;
  if (has_p_brkdown_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->p_brkdown_rate(), target);
  }

  // optional int32 P_brkdown_Resist = 31;
  if (has_p_brkdown_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->p_brkdown_resist(), target);
  }

  // optional int32 P_dam_Add = 32;
  if (has_p_dam_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->p_dam_add(), target);
  }

  // optional int32 P_dam_Redu = 33;
  if (has_p_dam_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->p_dam_redu(), target);
  }

  // optional int32 P_all_Add = 34;
  if (has_p_all_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->p_all_add(), target);
  }

  // optional int32 P_all_Redu = 35;
  if (has_p_all_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->p_all_redu(), target);
  }

  // optional int32 P_skill_Add = 36;
  if (has_p_skill_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->p_skill_add(), target);
  }

  // optional int32 P_skill_Redu = 37;
  if (has_p_skill_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->p_skill_redu(), target);
  }

  // optional int32 P_rebound_Dam = 38;
  if (has_p_rebound_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->p_rebound_dam(), target);
  }

  // optional int32 P_hp_Steal = 39;
  if (has_p_hp_steal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->p_hp_steal(), target);
  }

  // optional int32 P_dodge_Rate = 40;
  if (has_p_dodge_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->p_dodge_rate(), target);
  }

  // optional int32 P_hit_Rate = 41;
  if (has_p_hit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->p_hit_rate(), target);
  }

  // optional int32 P_blk_Rate = 42;
  if (has_p_blk_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->p_blk_rate(), target);
  }

  // optional int32 P_brk_blk_Rate = 43;
  if (has_p_brk_blk_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->p_brk_blk_rate(), target);
  }

  // optional int32 P_blk_Free = 44;
  if (has_p_blk_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->p_blk_free(), target);
  }

  // optional int32 P_blk_Pierce = 45;
  if (has_p_blk_pierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->p_blk_pierce(), target);
  }

  // optional int32 P_rel_Armor = 46;
  if (has_p_rel_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->p_rel_armor(), target);
  }

  // optional int32 P_rel_Dam = 47;
  if (has_p_rel_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->p_rel_dam(), target);
  }

  // optional int32 P_five_Resist = 48;
  if (has_p_five_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->p_five_resist(), target);
  }

  // optional int32 P_five_resist_Redu = 49;
  if (has_p_five_resist_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->p_five_resist_redu(), target);
  }

  // optional int32 P_fire_Add = 50;
  if (has_p_fire_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->p_fire_add(), target);
  }

  // optional int32 P_fire_Redu = 51;
  if (has_p_fire_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->p_fire_redu(), target);
  }

  // optional int32 P_ice_Add = 52;
  if (has_p_ice_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->p_ice_add(), target);
  }

  // optional int32 P_ice_Redu = 53;
  if (has_p_ice_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->p_ice_redu(), target);
  }

  // optional int32 P_thunder_Add = 54;
  if (has_p_thunder_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->p_thunder_add(), target);
  }

  // optional int32 P_thunder_Rdu = 55;
  if (has_p_thunder_rdu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->p_thunder_rdu(), target);
  }

  // optional int32 P_player_Add = 56;
  if (has_p_player_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->p_player_add(), target);
  }

  // optional int32 P_player_Redu = 57;
  if (has_p_player_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->p_player_redu(), target);
  }

  // optional int32 P_leader_Add = 58;
  if (has_p_leader_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->p_leader_add(), target);
  }

  // optional int32 P_leader_Redu = 59;
  if (has_p_leader_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->p_leader_redu(), target);
  }

  // optional int32 P_mon_Add = 60;
  if (has_p_mon_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->p_mon_add(), target);
  }

  // optional int32 P_mon_Redu = 61;
  if (has_p_mon_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->p_mon_redu(), target);
  }

  // optional int32 P_var_Redu = 62;
  if (has_p_var_redu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->p_var_redu(), target);
  }

  // optional int32 P_var_Add = 63;
  if (has_p_var_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->p_var_add(), target);
  }

  // optional int32 P_unusual_Resist = 64;
  if (has_p_unusual_resist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->p_unusual_resist(), target);
  }

  // optional int32 P_unusual_Hit = 65;
  if (has_p_unusual_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->p_unusual_hit(), target);
  }

  // optional int32 P_hp_Recover = 66;
  if (has_p_hp_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->p_hp_recover(), target);
  }

  // optional int32 P_unusual_Add = 67;
  if (has_p_unusual_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->p_unusual_add(), target);
  }

  // optional int32 P_fix_Recover = 68;
  if (has_p_fix_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->p_fix_recover(), target);
  }

  // optional int32 P_high_hp_Add = 69;
  if (has_p_high_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->p_high_hp_add(), target);
  }

  // optional int32 P_recover_hp_Add = 70;
  if (has_p_recover_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->p_recover_hp_add(), target);
  }

  // optional int32 P_week_Add = 71;
  if (has_p_week_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->p_week_add(), target);
  }

  // optional int64 shield = 72;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(72, this->shield(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monstervalueParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 P_max_Hp = 2;
    if (has_p_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_max_hp());
    }

    // optional int32 P_atk = 3;
    if (has_p_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_atk());
    }

    // optional int32 P_def = 4;
    if (has_p_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_def());
    }

    // optional int32 P_brk_Armor = 5;
    if (has_p_brk_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_brk_armor());
    }

    // optional int32 P_five_Dam = 6;
    if (has_p_five_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_five_dam());
    }

    // optional int32 P_five_Armor = 7;
    if (has_p_five_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_five_armor());
    }

    // optional int32 P_thump_Rate = 8;
    if (has_p_thump_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_thump_rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 P_thump_Resist = 9;
    if (has_p_thump_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_thump_resist());
    }

    // optional int32 P_sky = 10;
    if (has_p_sky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_sky());
    }

    // optional int32 P_sky_Dam = 11;
    if (has_p_sky_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_sky_dam());
    }

    // optional int32 P_sky_Redu_Resist = 12;
    if (has_p_sky_redu_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_sky_redu_resist());
    }

    // optional int32 P_sky_Resist = 13;
    if (has_p_sky_resist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_sky_resist());
    }

    // optional int32 P_kill_God = 14;
    if (has_p_kill_god()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_kill_god());
    }

    // optional int32 P_god_Body = 15;
    if (has_p_god_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_god_body());
    }

    // optional int32 P_mortal_Rate = 16;
    if (has_p_mortal_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_mortal_rate());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 P_mortal_Resist = 17;
    if (has_p_mortal_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_mortal_resist());
    }

    // optional int32 P_fairy_Rate = 18;
    if (has_p_fairy_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_fairy_rate());
    }

    // optional int32 P_fairy_Resist = 19;
    if (has_p_fairy_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_fairy_resist());
    }

    // optional int32 P_god_Rate = 20;
    if (has_p_god_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_god_rate());
    }

    // optional int32 P_god_Resist = 21;
    if (has_p_god_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_god_resist());
    }

    // optional int32 P_crit_Rate = 22;
    if (has_p_crit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_crit_rate());
    }

    // optional int32 P_crit_resit_Rate = 23;
    if (has_p_crit_resit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_crit_resit_rate());
    }

    // optional int32 P_crit_Dam = 24;
    if (has_p_crit_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_crit_dam());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 P_crit_Redu = 25;
    if (has_p_crit_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_crit_redu());
    }

    // optional int32 P_batter_Rate = 26;
    if (has_p_batter_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_batter_rate());
    }

    // optional int32 P_batter_Resist = 27;
    if (has_p_batter_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_batter_resist());
    }

    // optional int32 P_batter_Dam = 28;
    if (has_p_batter_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_batter_dam());
    }

    // optional int32 P_batter_Redu = 29;
    if (has_p_batter_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_batter_redu());
    }

    // optional int32 P_brkdown_Rate = 30;
    if (has_p_brkdown_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_brkdown_rate());
    }

    // optional int32 P_brkdown_Resist = 31;
    if (has_p_brkdown_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_brkdown_resist());
    }

    // optional int32 P_dam_Add = 32;
    if (has_p_dam_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_dam_add());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 P_dam_Redu = 33;
    if (has_p_dam_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_dam_redu());
    }

    // optional int32 P_all_Add = 34;
    if (has_p_all_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_all_add());
    }

    // optional int32 P_all_Redu = 35;
    if (has_p_all_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_all_redu());
    }

    // optional int32 P_skill_Add = 36;
    if (has_p_skill_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_skill_add());
    }

    // optional int32 P_skill_Redu = 37;
    if (has_p_skill_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_skill_redu());
    }

    // optional int32 P_rebound_Dam = 38;
    if (has_p_rebound_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_rebound_dam());
    }

    // optional int32 P_hp_Steal = 39;
    if (has_p_hp_steal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_hp_steal());
    }

    // optional int32 P_dodge_Rate = 40;
    if (has_p_dodge_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_dodge_rate());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 P_hit_Rate = 41;
    if (has_p_hit_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_hit_rate());
    }

    // optional int32 P_blk_Rate = 42;
    if (has_p_blk_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_blk_rate());
    }

    // optional int32 P_brk_blk_Rate = 43;
    if (has_p_brk_blk_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_brk_blk_rate());
    }

    // optional int32 P_blk_Free = 44;
    if (has_p_blk_free()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_blk_free());
    }

    // optional int32 P_blk_Pierce = 45;
    if (has_p_blk_pierce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_blk_pierce());
    }

    // optional int32 P_rel_Armor = 46;
    if (has_p_rel_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_rel_armor());
    }

    // optional int32 P_rel_Dam = 47;
    if (has_p_rel_dam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_rel_dam());
    }

    // optional int32 P_five_Resist = 48;
    if (has_p_five_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_five_resist());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 P_five_resist_Redu = 49;
    if (has_p_five_resist_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_five_resist_redu());
    }

    // optional int32 P_fire_Add = 50;
    if (has_p_fire_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_fire_add());
    }

    // optional int32 P_fire_Redu = 51;
    if (has_p_fire_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_fire_redu());
    }

    // optional int32 P_ice_Add = 52;
    if (has_p_ice_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_ice_add());
    }

    // optional int32 P_ice_Redu = 53;
    if (has_p_ice_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_ice_redu());
    }

    // optional int32 P_thunder_Add = 54;
    if (has_p_thunder_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_thunder_add());
    }

    // optional int32 P_thunder_Rdu = 55;
    if (has_p_thunder_rdu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_thunder_rdu());
    }

    // optional int32 P_player_Add = 56;
    if (has_p_player_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_player_add());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 P_player_Redu = 57;
    if (has_p_player_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_player_redu());
    }

    // optional int32 P_leader_Add = 58;
    if (has_p_leader_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_leader_add());
    }

    // optional int32 P_leader_Redu = 59;
    if (has_p_leader_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_leader_redu());
    }

    // optional int32 P_mon_Add = 60;
    if (has_p_mon_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_mon_add());
    }

    // optional int32 P_mon_Redu = 61;
    if (has_p_mon_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_mon_redu());
    }

    // optional int32 P_var_Redu = 62;
    if (has_p_var_redu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_var_redu());
    }

    // optional int32 P_var_Add = 63;
    if (has_p_var_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_var_add());
    }

    // optional int32 P_unusual_Resist = 64;
    if (has_p_unusual_resist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_unusual_resist());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 P_unusual_Hit = 65;
    if (has_p_unusual_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_unusual_hit());
    }

    // optional int32 P_hp_Recover = 66;
    if (has_p_hp_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_hp_recover());
    }

    // optional int32 P_unusual_Add = 67;
    if (has_p_unusual_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_unusual_add());
    }

    // optional int32 P_fix_Recover = 68;
    if (has_p_fix_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_fix_recover());
    }

    // optional int32 P_high_hp_Add = 69;
    if (has_p_high_hp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_high_hp_add());
    }

    // optional int32 P_recover_hp_Add = 70;
    if (has_p_recover_hp_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_recover_hp_add());
    }

    // optional int32 P_week_Add = 71;
    if (has_p_week_add()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p_week_add());
    }

    // optional int64 shield = 72;
    if (has_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shield());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monstervalueParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monstervalueParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monstervalueParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monstervalueParam::MergeFrom(const monstervalueParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_p_max_hp()) {
      set_p_max_hp(from.p_max_hp());
    }
    if (from.has_p_atk()) {
      set_p_atk(from.p_atk());
    }
    if (from.has_p_def()) {
      set_p_def(from.p_def());
    }
    if (from.has_p_brk_armor()) {
      set_p_brk_armor(from.p_brk_armor());
    }
    if (from.has_p_five_dam()) {
      set_p_five_dam(from.p_five_dam());
    }
    if (from.has_p_five_armor()) {
      set_p_five_armor(from.p_five_armor());
    }
    if (from.has_p_thump_rate()) {
      set_p_thump_rate(from.p_thump_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_p_thump_resist()) {
      set_p_thump_resist(from.p_thump_resist());
    }
    if (from.has_p_sky()) {
      set_p_sky(from.p_sky());
    }
    if (from.has_p_sky_dam()) {
      set_p_sky_dam(from.p_sky_dam());
    }
    if (from.has_p_sky_redu_resist()) {
      set_p_sky_redu_resist(from.p_sky_redu_resist());
    }
    if (from.has_p_sky_resist()) {
      set_p_sky_resist(from.p_sky_resist());
    }
    if (from.has_p_kill_god()) {
      set_p_kill_god(from.p_kill_god());
    }
    if (from.has_p_god_body()) {
      set_p_god_body(from.p_god_body());
    }
    if (from.has_p_mortal_rate()) {
      set_p_mortal_rate(from.p_mortal_rate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_p_mortal_resist()) {
      set_p_mortal_resist(from.p_mortal_resist());
    }
    if (from.has_p_fairy_rate()) {
      set_p_fairy_rate(from.p_fairy_rate());
    }
    if (from.has_p_fairy_resist()) {
      set_p_fairy_resist(from.p_fairy_resist());
    }
    if (from.has_p_god_rate()) {
      set_p_god_rate(from.p_god_rate());
    }
    if (from.has_p_god_resist()) {
      set_p_god_resist(from.p_god_resist());
    }
    if (from.has_p_crit_rate()) {
      set_p_crit_rate(from.p_crit_rate());
    }
    if (from.has_p_crit_resit_rate()) {
      set_p_crit_resit_rate(from.p_crit_resit_rate());
    }
    if (from.has_p_crit_dam()) {
      set_p_crit_dam(from.p_crit_dam());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_p_crit_redu()) {
      set_p_crit_redu(from.p_crit_redu());
    }
    if (from.has_p_batter_rate()) {
      set_p_batter_rate(from.p_batter_rate());
    }
    if (from.has_p_batter_resist()) {
      set_p_batter_resist(from.p_batter_resist());
    }
    if (from.has_p_batter_dam()) {
      set_p_batter_dam(from.p_batter_dam());
    }
    if (from.has_p_batter_redu()) {
      set_p_batter_redu(from.p_batter_redu());
    }
    if (from.has_p_brkdown_rate()) {
      set_p_brkdown_rate(from.p_brkdown_rate());
    }
    if (from.has_p_brkdown_resist()) {
      set_p_brkdown_resist(from.p_brkdown_resist());
    }
    if (from.has_p_dam_add()) {
      set_p_dam_add(from.p_dam_add());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_p_dam_redu()) {
      set_p_dam_redu(from.p_dam_redu());
    }
    if (from.has_p_all_add()) {
      set_p_all_add(from.p_all_add());
    }
    if (from.has_p_all_redu()) {
      set_p_all_redu(from.p_all_redu());
    }
    if (from.has_p_skill_add()) {
      set_p_skill_add(from.p_skill_add());
    }
    if (from.has_p_skill_redu()) {
      set_p_skill_redu(from.p_skill_redu());
    }
    if (from.has_p_rebound_dam()) {
      set_p_rebound_dam(from.p_rebound_dam());
    }
    if (from.has_p_hp_steal()) {
      set_p_hp_steal(from.p_hp_steal());
    }
    if (from.has_p_dodge_rate()) {
      set_p_dodge_rate(from.p_dodge_rate());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_p_hit_rate()) {
      set_p_hit_rate(from.p_hit_rate());
    }
    if (from.has_p_blk_rate()) {
      set_p_blk_rate(from.p_blk_rate());
    }
    if (from.has_p_brk_blk_rate()) {
      set_p_brk_blk_rate(from.p_brk_blk_rate());
    }
    if (from.has_p_blk_free()) {
      set_p_blk_free(from.p_blk_free());
    }
    if (from.has_p_blk_pierce()) {
      set_p_blk_pierce(from.p_blk_pierce());
    }
    if (from.has_p_rel_armor()) {
      set_p_rel_armor(from.p_rel_armor());
    }
    if (from.has_p_rel_dam()) {
      set_p_rel_dam(from.p_rel_dam());
    }
    if (from.has_p_five_resist()) {
      set_p_five_resist(from.p_five_resist());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_p_five_resist_redu()) {
      set_p_five_resist_redu(from.p_five_resist_redu());
    }
    if (from.has_p_fire_add()) {
      set_p_fire_add(from.p_fire_add());
    }
    if (from.has_p_fire_redu()) {
      set_p_fire_redu(from.p_fire_redu());
    }
    if (from.has_p_ice_add()) {
      set_p_ice_add(from.p_ice_add());
    }
    if (from.has_p_ice_redu()) {
      set_p_ice_redu(from.p_ice_redu());
    }
    if (from.has_p_thunder_add()) {
      set_p_thunder_add(from.p_thunder_add());
    }
    if (from.has_p_thunder_rdu()) {
      set_p_thunder_rdu(from.p_thunder_rdu());
    }
    if (from.has_p_player_add()) {
      set_p_player_add(from.p_player_add());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_p_player_redu()) {
      set_p_player_redu(from.p_player_redu());
    }
    if (from.has_p_leader_add()) {
      set_p_leader_add(from.p_leader_add());
    }
    if (from.has_p_leader_redu()) {
      set_p_leader_redu(from.p_leader_redu());
    }
    if (from.has_p_mon_add()) {
      set_p_mon_add(from.p_mon_add());
    }
    if (from.has_p_mon_redu()) {
      set_p_mon_redu(from.p_mon_redu());
    }
    if (from.has_p_var_redu()) {
      set_p_var_redu(from.p_var_redu());
    }
    if (from.has_p_var_add()) {
      set_p_var_add(from.p_var_add());
    }
    if (from.has_p_unusual_resist()) {
      set_p_unusual_resist(from.p_unusual_resist());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_p_unusual_hit()) {
      set_p_unusual_hit(from.p_unusual_hit());
    }
    if (from.has_p_hp_recover()) {
      set_p_hp_recover(from.p_hp_recover());
    }
    if (from.has_p_unusual_add()) {
      set_p_unusual_add(from.p_unusual_add());
    }
    if (from.has_p_fix_recover()) {
      set_p_fix_recover(from.p_fix_recover());
    }
    if (from.has_p_high_hp_add()) {
      set_p_high_hp_add(from.p_high_hp_add());
    }
    if (from.has_p_recover_hp_add()) {
      set_p_recover_hp_add(from.p_recover_hp_add());
    }
    if (from.has_p_week_add()) {
      set_p_week_add(from.p_week_add());
    }
    if (from.has_shield()) {
      set_shield(from.shield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monstervalueParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monstervalueParam::CopyFrom(const monstervalueParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monstervalueParam::IsInitialized() const {

  return true;
}

void monstervalueParam::Swap(monstervalueParam* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(p_max_hp_, other->p_max_hp_);
    std::swap(p_atk_, other->p_atk_);
    std::swap(p_def_, other->p_def_);
    std::swap(p_brk_armor_, other->p_brk_armor_);
    std::swap(p_five_dam_, other->p_five_dam_);
    std::swap(p_five_armor_, other->p_five_armor_);
    std::swap(p_thump_rate_, other->p_thump_rate_);
    std::swap(p_thump_resist_, other->p_thump_resist_);
    std::swap(p_sky_, other->p_sky_);
    std::swap(p_sky_dam_, other->p_sky_dam_);
    std::swap(p_sky_redu_resist_, other->p_sky_redu_resist_);
    std::swap(p_sky_resist_, other->p_sky_resist_);
    std::swap(p_kill_god_, other->p_kill_god_);
    std::swap(p_god_body_, other->p_god_body_);
    std::swap(p_mortal_rate_, other->p_mortal_rate_);
    std::swap(p_mortal_resist_, other->p_mortal_resist_);
    std::swap(p_fairy_rate_, other->p_fairy_rate_);
    std::swap(p_fairy_resist_, other->p_fairy_resist_);
    std::swap(p_god_rate_, other->p_god_rate_);
    std::swap(p_god_resist_, other->p_god_resist_);
    std::swap(p_crit_rate_, other->p_crit_rate_);
    std::swap(p_crit_resit_rate_, other->p_crit_resit_rate_);
    std::swap(p_crit_dam_, other->p_crit_dam_);
    std::swap(p_crit_redu_, other->p_crit_redu_);
    std::swap(p_batter_rate_, other->p_batter_rate_);
    std::swap(p_batter_resist_, other->p_batter_resist_);
    std::swap(p_batter_dam_, other->p_batter_dam_);
    std::swap(p_batter_redu_, other->p_batter_redu_);
    std::swap(p_brkdown_rate_, other->p_brkdown_rate_);
    std::swap(p_brkdown_resist_, other->p_brkdown_resist_);
    std::swap(p_dam_add_, other->p_dam_add_);
    std::swap(p_dam_redu_, other->p_dam_redu_);
    std::swap(p_all_add_, other->p_all_add_);
    std::swap(p_all_redu_, other->p_all_redu_);
    std::swap(p_skill_add_, other->p_skill_add_);
    std::swap(p_skill_redu_, other->p_skill_redu_);
    std::swap(p_rebound_dam_, other->p_rebound_dam_);
    std::swap(p_hp_steal_, other->p_hp_steal_);
    std::swap(p_dodge_rate_, other->p_dodge_rate_);
    std::swap(p_hit_rate_, other->p_hit_rate_);
    std::swap(p_blk_rate_, other->p_blk_rate_);
    std::swap(p_brk_blk_rate_, other->p_brk_blk_rate_);
    std::swap(p_blk_free_, other->p_blk_free_);
    std::swap(p_blk_pierce_, other->p_blk_pierce_);
    std::swap(p_rel_armor_, other->p_rel_armor_);
    std::swap(p_rel_dam_, other->p_rel_dam_);
    std::swap(p_five_resist_, other->p_five_resist_);
    std::swap(p_five_resist_redu_, other->p_five_resist_redu_);
    std::swap(p_fire_add_, other->p_fire_add_);
    std::swap(p_fire_redu_, other->p_fire_redu_);
    std::swap(p_ice_add_, other->p_ice_add_);
    std::swap(p_ice_redu_, other->p_ice_redu_);
    std::swap(p_thunder_add_, other->p_thunder_add_);
    std::swap(p_thunder_rdu_, other->p_thunder_rdu_);
    std::swap(p_player_add_, other->p_player_add_);
    std::swap(p_player_redu_, other->p_player_redu_);
    std::swap(p_leader_add_, other->p_leader_add_);
    std::swap(p_leader_redu_, other->p_leader_redu_);
    std::swap(p_mon_add_, other->p_mon_add_);
    std::swap(p_mon_redu_, other->p_mon_redu_);
    std::swap(p_var_redu_, other->p_var_redu_);
    std::swap(p_var_add_, other->p_var_add_);
    std::swap(p_unusual_resist_, other->p_unusual_resist_);
    std::swap(p_unusual_hit_, other->p_unusual_hit_);
    std::swap(p_hp_recover_, other->p_hp_recover_);
    std::swap(p_unusual_add_, other->p_unusual_add_);
    std::swap(p_fix_recover_, other->p_fix_recover_);
    std::swap(p_high_hp_add_, other->p_high_hp_add_);
    std::swap(p_recover_hp_add_, other->p_recover_hp_add_);
    std::swap(p_week_add_, other->p_week_add_);
    std::swap(shield_, other->shield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monstervalueParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monstervalueParam_descriptor_;
  metadata.reflection = monstervalueParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_monstervalueParam::kMonstervalueParamListFieldNumber;
#endif  // !_MSC_VER

Sheet_monstervalueParam::Sheet_monstervalueParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_monstervalueParam::InitAsDefaultInstance() {
}

Sheet_monstervalueParam::Sheet_monstervalueParam(const Sheet_monstervalueParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_monstervalueParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_monstervalueParam::~Sheet_monstervalueParam() {
  SharedDtor();
}

void Sheet_monstervalueParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_monstervalueParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_monstervalueParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_monstervalueParam_descriptor_;
}

const Sheet_monstervalueParam& Sheet_monstervalueParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

Sheet_monstervalueParam* Sheet_monstervalueParam::default_instance_ = NULL;

Sheet_monstervalueParam* Sheet_monstervalueParam::New() const {
  return new Sheet_monstervalueParam;
}

void Sheet_monstervalueParam::Clear() {
  monstervalueparam_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_monstervalueParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.monstervalueParam monstervalueParam_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monstervalueParam_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monstervalueparam_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monstervalueParam_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_monstervalueParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.monstervalueParam monstervalueParam_List = 1;
  for (int i = 0; i < this->monstervalueparam_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monstervalueparam_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_monstervalueParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.monstervalueParam monstervalueParam_List = 1;
  for (int i = 0; i < this->monstervalueparam_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monstervalueparam_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_monstervalueParam::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.monstervalueParam monstervalueParam_List = 1;
  total_size += 1 * this->monstervalueparam_list_size();
  for (int i = 0; i < this->monstervalueparam_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monstervalueparam_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_monstervalueParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_monstervalueParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_monstervalueParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_monstervalueParam::MergeFrom(const Sheet_monstervalueParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  monstervalueparam_list_.MergeFrom(from.monstervalueparam_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_monstervalueParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_monstervalueParam::CopyFrom(const Sheet_monstervalueParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_monstervalueParam::IsInitialized() const {

  return true;
}

void Sheet_monstervalueParam::Swap(Sheet_monstervalueParam* other) {
  if (other != this) {
    monstervalueparam_list_.Swap(&other->monstervalueparam_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_monstervalueParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_monstervalueParam_descriptor_;
  metadata.reflection = Sheet_monstervalueParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int monsterdrop::kIdFieldNumber;
const int monsterdrop::kGroupFieldNumber;
const int monsterdrop::kOwnFieldNumber;
const int monsterdrop::kTypeFieldNumber;
const int monsterdrop::kBoxIDFieldNumber;
#endif  // !_MSC_VER

monsterdrop::monsterdrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void monsterdrop::InitAsDefaultInstance() {
}

monsterdrop::monsterdrop(const monsterdrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void monsterdrop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  group_ = 0;
  own_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

monsterdrop::~monsterdrop() {
  SharedDtor();
}

void monsterdrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void monsterdrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* monsterdrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return monsterdrop_descriptor_;
}

const monsterdrop& monsterdrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

monsterdrop* monsterdrop::default_instance_ = NULL;

monsterdrop* monsterdrop::New() const {
  return new monsterdrop;
}

void monsterdrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    group_ = 0;
    own_ = 0;
    type_ = 0;
  }
  boxid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool monsterdrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_own;
        break;
      }

      // optional int32 own = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_)));
          set_has_own();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boxID;
        break;
      }

      // repeated int64 boxID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_boxid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_boxid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boxID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void monsterdrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // optional int32 own = 3;
  if (has_own()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->own(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // repeated int64 boxID = 5;
  for (int i = 0; i < this->boxid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->boxid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* monsterdrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // optional int32 own = 3;
  if (has_own()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->own(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // repeated int64 boxID = 5;
  for (int i = 0; i < this->boxid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->boxid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int monsterdrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 own = 3;
    if (has_own()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->own());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int64 boxID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->boxid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->boxid(i));
    }
    total_size += 1 * this->boxid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void monsterdrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const monsterdrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const monsterdrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void monsterdrop::MergeFrom(const monsterdrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxid_.MergeFrom(from.boxid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_own()) {
      set_own(from.own());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void monsterdrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void monsterdrop::CopyFrom(const monsterdrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool monsterdrop::IsInitialized() const {

  return true;
}

void monsterdrop::Swap(monsterdrop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_, other->group_);
    std::swap(own_, other->own_);
    std::swap(type_, other->type_);
    boxid_.Swap(&other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata monsterdrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = monsterdrop_descriptor_;
  metadata.reflection = monsterdrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_monsterdrop::kMonsterdropListFieldNumber;
#endif  // !_MSC_VER

Sheet_monsterdrop::Sheet_monsterdrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_monsterdrop::InitAsDefaultInstance() {
}

Sheet_monsterdrop::Sheet_monsterdrop(const Sheet_monsterdrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_monsterdrop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_monsterdrop::~Sheet_monsterdrop() {
  SharedDtor();
}

void Sheet_monsterdrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_monsterdrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_monsterdrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_monsterdrop_descriptor_;
}

const Sheet_monsterdrop& Sheet_monsterdrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monster_2eproto();
  return *default_instance_;
}

Sheet_monsterdrop* Sheet_monsterdrop::default_instance_ = NULL;

Sheet_monsterdrop* Sheet_monsterdrop::New() const {
  return new Sheet_monsterdrop;
}

void Sheet_monsterdrop::Clear() {
  monsterdrop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_monsterdrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.monsterdrop monsterdrop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterdrop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterdrop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monsterdrop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_monsterdrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.monsterdrop monsterdrop_List = 1;
  for (int i = 0; i < this->monsterdrop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterdrop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_monsterdrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.monsterdrop monsterdrop_List = 1;
  for (int i = 0; i < this->monsterdrop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterdrop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_monsterdrop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.monsterdrop monsterdrop_List = 1;
  total_size += 1 * this->monsterdrop_list_size();
  for (int i = 0; i < this->monsterdrop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterdrop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_monsterdrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_monsterdrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_monsterdrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_monsterdrop::MergeFrom(const Sheet_monsterdrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterdrop_list_.MergeFrom(from.monsterdrop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_monsterdrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_monsterdrop::CopyFrom(const Sheet_monsterdrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_monsterdrop::IsInitialized() const {

  return true;
}

void Sheet_monsterdrop::Swap(Sheet_monsterdrop* other) {
  if (other != this) {
    monsterdrop_list_.Swap(&other->monsterdrop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_monsterdrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_monsterdrop_descriptor_;
  metadata.reflection = Sheet_monsterdrop_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
